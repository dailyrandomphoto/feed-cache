<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Page Object Model in Cypress</title>
      <author>Dilpreet Johal</author>
      <pubDate>Wed, 18 Aug 2021 11:45:16 +0000</pubDate>
      <link>https://dev.to/automationbro/page-object-model-in-cypress-h9i</link>
      <guid>https://dev.to/automationbro/page-object-model-in-cypress-h9i</guid>
      <description>&lt;p&gt;In this tutorial, we will cover how to setup Page Object Model in Cypress. We will also cover why Cypress team suggests not to use Page Object Model.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-page-object-model-pom"&gt;
  &lt;/a&gt;
  What is Page Object Model (POM)
&lt;/h3&gt;

&lt;p&gt;POM is a popular design pattern that helps in reducing code duplication and improves test maintenance. You do that by storing page related elements in a separate file which gets called by your tests.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-not-to-use-pom-per-cypress"&gt;
  &lt;/a&gt;
  Why NOT to use POM per Cypress?
&lt;/h3&gt;

&lt;p&gt;In an &lt;a href="https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/"&gt;article&lt;/a&gt; published by Cypress team back in 2019, they pointed out that instead of using POM you should rather use App Actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are App Actions?&lt;/strong&gt;&lt;br&gt;
Instead of interacting through the UI, App Actions lets you dispatch actions directly through the application internal logic by using the &lt;code&gt;window.Cypress&lt;/code&gt; object. This way you end up saving a lot more time by setting your app in a certain state rather than getting to that state via UI. &lt;/p&gt;

&lt;p&gt;For ex: Use App actions to set your app in a logged in state if you need a user that needs to do something after it's logged in. Traditionally, you would use UI to first login and then execute your test.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#my-opinion"&gt;
  &lt;/a&gt;
  My Opinion
&lt;/h3&gt;

&lt;p&gt;I personally feel you can use both, use Page objects to store page related details and also access Application code to speed up your tests as well (if that is an option for you). &lt;br&gt;
¬†&lt;br&gt;
Cypress works best if you have access to your code base and you are testing application¬†in the pre-PROD mode (dev/qa/stage). For example, in my &lt;a href="https://practice.automationbro.com/"&gt;test app&lt;/a&gt;, it‚Äôs a Wordpress application and I don‚Äôt have access to the application code so I cant use App actions but I can still go ahead and use POM. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#how-to-setup-pom-in-cypress"&gt;
  &lt;/a&gt;
  How to setup POM in Cypress?
&lt;/h3&gt;

&lt;p&gt;Setting up POM in Cypress is pretty straightforward, you just need to setup a class that contains your web elements and page methods. Let's take a look at an example - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8UecdP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scmyszi0vsddszhzdmb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8UecdP5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/scmyszi0vsddszhzdmb8.png" alt="Cypress Page Class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, I have created a &lt;code&gt;HomePage&lt;/code&gt; class with getter functions that are calling the web elements using &lt;code&gt;Cy.get()&lt;/code&gt;. And, it also has a page method that is going to the base url of the website. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling Page class in the tests&lt;/strong&gt;&lt;br&gt;
Now, to access the Page related elements and methods, you can simply import it your test file and call the relevant method.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HomePage.visitPage()&lt;/code&gt;&lt;br&gt;
&lt;code&gt;HomePage.getStartedBtn.click()&lt;/code&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Setting up POM is a common design pattern in the test automation industry, so as long as you implement it correctly I personally don't see any harm in NOT using POM. At the same time, I agree with Cypress team regarding App Actions as that can significantly improve your tests speed as well as stability.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-how-to-setup-pom-in-cypress%E2%80%8A%E2%80%8A"&gt;
  &lt;/a&gt;
  Check out the video below to learn more about how to setup POM in Cypress‚Ää-‚Ää
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uPoyTy11lPE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;üìß Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this as well as free access to a Private Facebook community&lt;/p&gt;

&lt;p&gt;üëç You can follow my content here as well - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/automationbro"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/company/automation-bro"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 methods for testing JavaScript Lambda functions</title>
      <author>K</author>
      <pubDate>Wed, 18 Aug 2021 11:45:12 +0000</pubDate>
      <link>https://dev.to/dashbird/3-methods-for-testing-javascript-lambda-functions-19po</link>
      <guid>https://dev.to/dashbird/3-methods-for-testing-javascript-lambda-functions-19po</guid>
      <description>&lt;p&gt;&lt;em&gt;This article will discuss the different options for testing your AWS Lambda functions; the focus will be on JavaScript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/what-is-faas-function-as-a-service/"&gt;Function as a service&lt;/a&gt;¬†(FaaS) offerings like AWS Lambda are a blessing for software development. They¬†&lt;strong&gt;remove many of the issues&lt;/strong&gt;¬†that come with the setup and maintenance of backend infrastructure. With much of the upfront work taken out of the process, they also¬†&lt;strong&gt;lower the barrier to start a new service&lt;/strong&gt;¬†and encourage modularization and encapsulation of software systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing distributed systems&lt;/strong&gt;¬†and¬†&lt;strong&gt;serverless cloud infrastructures&lt;/strong&gt;¬†specifically is always a source of long discussions. Some people prefer the¬†&lt;strong&gt;local approach&lt;/strong&gt;¬†of emulating everything around your own code because it gives you fast iterations. Others say it gives you a false sense of safety because you're not really testing the actual services involved later when you deploy into your production environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-needs-to-be-tested"&gt;
  &lt;/a&gt;
  What Needs to be Tested?
&lt;/h2&gt;

&lt;p&gt;First of all,¬†&lt;strong&gt;your own code&lt;/strong&gt;, obviously.&lt;/p&gt;

&lt;p&gt;But the main part in the architecture where FaaS really shines is¬†&lt;strong&gt;integration code&lt;/strong&gt;. Lambda can be seen as versatile glue between all the managed services AWS, and other vendors, have to offer. So, the¬†&lt;strong&gt;main focus of tests isn't just your code&lt;/strong&gt;¬†but also how it¬†&lt;strong&gt;integrates with different services&lt;/strong&gt;. Having a Lambda that just reads an event and writes an output will be a rare occasion; usually, it will access one or multiple other services like S3, Step Functions, or RDS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smoke-tests"&gt;
  &lt;/a&gt;
  Smoke Tests
&lt;/h2&gt;

&lt;p&gt;Smoke tests are a¬†&lt;strong&gt;straightforward type of test&lt;/strong&gt;. They only check that your¬†&lt;strong&gt;code doesn't crash when you try to run it&lt;/strong&gt;. This means smoke tests¬†&lt;strong&gt;don't check if your code works correctly&lt;/strong&gt;. It could be that you have a bug in some if-branch anywhere that isn't executed with the test. It doesn't test for logic issues either.&lt;/p&gt;

&lt;p&gt;In terms of a¬†&lt;strong&gt;web server&lt;/strong&gt;, a smoke test would mean starting the server. No request gets sent to the server; just starting the server and see if it crashes. This is easy to do, and if it fails, you can save time running any other test.&lt;/p&gt;

&lt;p&gt;For¬†&lt;strong&gt;Lambda&lt;/strong&gt;, the action of starting and handling an event is the same because Lambdas only run when they handle an event and get frozen or retired right after they did their work. This means a smoke test would mean¬†&lt;strong&gt;sending an event to the Lambda function&lt;/strong&gt;¬†to see if it throws an error. The simplest even you think your Lambda function should be able to handle would do.¬†&lt;/p&gt;

&lt;p&gt;A smoke test can be done via the AWS CLI with the following command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PXderMnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kodn3matj7kp48pup9cf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PXderMnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kodn3matj7kp48pup9cf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For automation purposes, you can add such CLI commands to a bash script and simply execute it before every other test runs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests"&gt;
  &lt;/a&gt;
  Unit Tests
&lt;/h2&gt;

&lt;p&gt;Unit tests are a bit more¬†&lt;strong&gt;complex&lt;/strong&gt;¬†than smoke tests because they actually¬†&lt;strong&gt;test the logic of your function&lt;/strong&gt;. Since most errors usually happen when integrating your code with other services, they don't bring that much value compared to integration tests.&lt;/p&gt;

&lt;p&gt;But sometimes, you have very complex logic inside a Lambda function that doesn't need to access other services. If it does access other services, the interaction with them is very basic.&lt;/p&gt;

&lt;p&gt;To get unit tests going, your first step is¬†&lt;strong&gt;extracting the logic you want to test&lt;/strong&gt;¬†into a JavaScript module.¬†&lt;/p&gt;

&lt;p&gt;Let's look at the following example of a Lambda function that adds or substracts two numbers depending on an operation argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPtGFcBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4gdbu7534wyt7l0nrud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPtGFcBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4gdbu7534wyt7l0nrud.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a contrived example, but still, the function is harder to test than it needs to be. We would have to create an event object containing the¬†&lt;code&gt;queryStringParameters&lt;/code&gt;¬†field, which would require an¬†&lt;code&gt;operation&lt;/code&gt;,¬†&lt;code&gt;x&lt;/code&gt;, and¬†&lt;code&gt;y&lt;/code&gt;¬†fields to be present.&lt;/p&gt;

&lt;p&gt;If we encapsulate this logic in a plain JavaScript function that only requires three arguments, things would be simpler.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESgOtM9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnuyl2rdnd04vtvizdim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESgOtM9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnuyl2rdnd04vtvizdim.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this refactored example, we can now test the logic independently from the Lambda handler function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-tests"&gt;
  &lt;/a&gt;
  Integration Tests
&lt;/h2&gt;

&lt;p&gt;Integration tests are the¬†&lt;strong&gt;most important part of testing FaaS&lt;/strong&gt;. I said it before, and I will repeat it,¬†&lt;strong&gt;AWS Lambda&lt;/strong&gt;¬†is mostly used to¬†&lt;strong&gt;glue together managed cloud services&lt;/strong&gt;, and the parts where your Lambda function interacts with other services are the¬†&lt;strong&gt;most crucial test targets&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, there are two main ways of integration testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Test with real infrastructure&lt;/li&gt;
&lt;li&gt;  Test by emulating that infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They both have their¬†&lt;strong&gt;pros and cons&lt;/strong&gt;. For example, if testing with¬†&lt;strong&gt;mocked-up&lt;/strong&gt;¬†infrastructure is¬†&lt;strong&gt;faster and cheaper&lt;/strong&gt;, but if your mocks are wrong, you're tests are wrong too. Testing with¬†&lt;strong&gt;real infrastructure&lt;/strong&gt;¬†gives you¬†&lt;strong&gt;more confidence but costs more money&lt;/strong&gt;¬†and can be quite¬†&lt;strong&gt;slow&lt;/strong&gt;¬†if you need to provide it for each test run.&lt;/p&gt;

&lt;p&gt;Also, there is "no free lunch" in writing integration tests. The time you might save when you don't have to meddle with real infrastructure will sink into keeping your mocked-up infrastructure up-to-date.¬†&lt;strong&gt;Martin Fowler&lt;/strong&gt;¬†wrote¬†&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs"&gt;an awesome article&lt;/a&gt;¬†about everything that goes into mock tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-with-real-infrastructure"&gt;
  &lt;/a&gt;
  Testing with Real Infrastructure
&lt;/h2&gt;

&lt;p&gt;Testing with real infrastructure only makes sense when you are¬†&lt;strong&gt;using infrastructure as code&lt;/strong&gt;¬†(IaC) tool. Otherwise, you¬†&lt;strong&gt;waste too much time&lt;/strong&gt;¬†provisioning your resources manually. Especially serverless applications are prone to contain many small services.&lt;/p&gt;

&lt;p&gt;AWS offers multiple IaC tools:¬†&lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt;,¬†&lt;a href="https://aws.amazon.com/serverless/sam/"&gt;SAM&lt;/a&gt;, and¬†&lt;a href="https://aws.amazon.com/cdk/"&gt;the CDK&lt;/a&gt;¬†are a few of them that are very well integrated with the AWS ecosystem.¬†&lt;/p&gt;

&lt;p&gt;When you have your tool of choice ready, you can then use it to deploy to test and production with one IaC definition. This way, you can be sure your testing environment matches production.&lt;/p&gt;

&lt;p&gt;Now, the tests would check the inputs and outputs of your Lambda functions.&lt;/p&gt;

&lt;p&gt;For a¬†&lt;strong&gt;synchronous invocation of Lambda&lt;/strong&gt;, which happens with API-Gateway, for example, this means the events that go into your Lambda function and the response that function returns. For¬†&lt;strong&gt;asynchronous invocations&lt;/strong&gt;, there are no values returned.&lt;/p&gt;

&lt;p&gt;The more interesting part of these tests is¬†&lt;strong&gt;how your function accesses other services&lt;/strong&gt;. If your function reads some data from DynamoDB for authentication, before it does its work, you need to check that that data is accessible and correct*&lt;em&gt;¬†before running the test&lt;/em&gt;&lt;em&gt;. If you write to S3, you must access S3 to check if everything went right&lt;/em&gt;&lt;em&gt;¬†after running the test&lt;/em&gt;*.&lt;/p&gt;

&lt;p&gt;You can use the same¬†&lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/installing-jssdk.html"&gt;AWS SDK for JavaScript&lt;/a&gt;¬†to check these services inside your tests. If you choose to run your tests on AWS Lambda, too, it will even be preinstalled.&lt;/p&gt;

&lt;p&gt;Let's look at how such an integration test could look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DVHiKGCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6f3qap1b8gov1sorsy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DVHiKGCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ux6f3qap1b8gov1sorsy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find the copyable code snippets, &lt;a href="https://dashbird.io/blog/test-javascript-lambda-functions/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This example is a¬†&lt;strong&gt;Lambda function&lt;/strong&gt;¬†&lt;strong&gt;that tests another Lambda function&lt;/strong&gt;. It creates a user document in a DynamoDB table with admin permissions. Then it invokes a Lambda function with event arguments. After the function was invoked, it checks that a file in S3 was created. And finally, it cleans up all the test-related data.&lt;/p&gt;

&lt;p&gt;This is only a basic implementation, including¬†&lt;a href="https://www.npmjs.com/package/tape"&gt;a testing framework like tape&lt;/a&gt;¬†to make things more convenient. But it illustrates what even a simple integration test requires to work.&lt;/p&gt;

&lt;p&gt;You can test, retest applications all you want but once that baby goes Live, s*#@ will happen. It's just how it is. You'll be able to use¬†&lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;'s function view to see exactly how your application is behaving and when the app goes sideways, you'll be able to use the Incident management platform you can see exactly what broke and where.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp5Ry-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2021/08/errorview-2019.02.13-1-1024x492.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp5Ry-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2021/08/errorview-2019.02.13-1-1024x492.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article only talked about¬†&lt;strong&gt;three basic methods to test your functions&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  smoke tests&lt;/li&gt;
&lt;li&gt;  unit tests&lt;/li&gt;
&lt;li&gt;  integration tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are even more test types out there that have a much bigger scope, like E2E tests or test specific behavior of your functions like performance tests.&lt;/p&gt;

&lt;p&gt;To get started, you should be good to go with¬†&lt;strong&gt;smoke and integration tests&lt;/strong&gt;. Make sure your Lambda doesn't crash right at the start of an invocation and then test that it actually accurately uses other services.&lt;/p&gt;

&lt;p&gt;If you have very complex Lambda functions used for specific logic and not just to integrate multiple services, try to encapsulate that logic and run unit tests. This way, you can iterate faster and cheaper.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Further reading:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/how-to-test-serverless-applications/"&gt;How to test serverless applications?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/log-based-monitoring-for-aws-lambda/"&gt;Log-based monitoring for AWS Lambda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/sizing-cloud-resources-mistakes/"&gt;10 mistakes to avoid when sizing your cloud resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/why-serverless-apps-fail-and-how-to-design-resilient-architectures/"&gt;Why serverless apps fail and how to design resilient architectures?&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>üò± Make a Random Meme API With Node.js and Puppeteer</title>
      <author>Max Programming</author>
      <pubDate>Wed, 18 Aug 2021 11:27:51 +0000</pubDate>
      <link>https://dev.to/maxprogramming/make-a-random-meme-api-with-node-js-and-puppeteer-4h4b</link>
      <guid>https://dev.to/maxprogramming/make-a-random-meme-api-with-node-js-and-puppeteer-4h4b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-there"&gt;
  &lt;/a&gt;
  üëã Hello there
&lt;/h2&gt;

&lt;p&gt;Today's article is all about how you can make a &lt;strong&gt;Random Meme&lt;/strong&gt; API using Node.js and web scraping. We'll be using &lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt; for our API and we'll be using &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt; to scrape the web and get the random meme.&lt;/p&gt;

&lt;p&gt;This random meme API was inspired by the same kind of API &lt;a href="https://github.com/techytushar/random-memer"&gt;here&lt;/a&gt;. But I wanted to build it using Node.js and Puppeteer.&lt;/p&gt;

&lt;p&gt;We'll be scraping &lt;a href="http://memedroid.com/"&gt;Memedroid&lt;/a&gt; using the  &lt;a href="http://npmjs.org/package/puppeteer"&gt;Puppeteer NPM package&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-project"&gt;
  &lt;/a&gt;
  Initializing the project
&lt;/h2&gt;

&lt;p&gt;First of all, we'll need to create a folder with the name we want and we'll need to initialize our Node.js app in that folder. We do it using this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need two dependencies to install, simply install &lt;code&gt;puppeteer&lt;/code&gt; and &lt;code&gt;fastify&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i puppeteer fastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-fastify-for-api"&gt;
  &lt;/a&gt;
  Using Fastify for API
&lt;/h2&gt;

&lt;p&gt;After we have our project set up and our dependencies installed, we're good to go with writing the code! Create an &lt;code&gt;index.js&lt;/code&gt; file and import &lt;code&gt;fastify&lt;/code&gt; with this code to create the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt; &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5555&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this thing is done, when we run the app using &lt;code&gt;node index&lt;/code&gt;, our app will be running on port &lt;code&gt;5555&lt;/code&gt;. But let's create the base route (&lt;code&gt;/&lt;/code&gt; )for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-the-random-meme-using-puppeteer"&gt;
  &lt;/a&gt;
  Getting the random meme using Puppeteer
&lt;/h2&gt;

&lt;p&gt;Here comes the fun part now! We'll open the web browser and get all the images from memedroid, and we'll do all of it through code. &lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;puppeteer&lt;/code&gt; package, Chromium also comes installed to scrape the web. That's why it might have taken time for you to get installed&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To skip Chromium download, you can use &lt;a href="http://npmjs.org/package/puppeteer-core"&gt;&lt;code&gt;puppeteer-core&lt;/code&gt;&lt;/a&gt; package and add the path to your Chrome file following the docs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We'll create a function to &lt;strong&gt;get all memes&lt;/strong&gt; and then we'll pick a random one in the route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllMemes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.memedroid.com/memes/tag/programming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="c1"&gt;// launch browser&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// open a page&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// go to the page&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply launch the browser and open the page for memedroid in this code üëÜ.&lt;/p&gt;

&lt;p&gt;Now let's get all the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags which are in the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the class of &lt;code&gt;item-aux-container&lt;/code&gt;. That's where all the memes live in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tJafAmOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629208607331/hMu6pVYP6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tJafAmOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629208607331/hMu6pVYP6h.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As in the above image, inside of each &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag, the div with that class exists, so we simply get it using the &lt;code&gt;$$eval&lt;/code&gt; method on the &lt;code&gt;page&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This method takes two arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Selector&lt;/li&gt;
&lt;li&gt;Callback function with the element(s)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div.item-aux-container img[src]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will map over the images in the callback function, and we'll return only the URL of the image from getting the &lt;code&gt;src&lt;/code&gt; attribute. And this is how we do it.&lt;/p&gt;

&lt;p&gt;We check if the &lt;code&gt;src&lt;/code&gt; attribute starts with &lt;code&gt;http&lt;/code&gt; and ends with &lt;code&gt;jpeg&lt;/code&gt; and we return that if it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div.item-aux-container img[src]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, that also returns to us &lt;code&gt;null&lt;/code&gt; if that's not the case, so we filter out the nulls using the &lt;code&gt;.filter()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all that work is done, we close the browser and return the array of images, this is how the whole function looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAllMemes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.memedroid.com/memes/tag/programming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;puppeteer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;headless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;goto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$$eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div.item-aux-container img[src]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;endsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jpeg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allImages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// NEW LINES&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;imgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-fastify-to-send-the-random-meme"&gt;
  &lt;/a&gt;
  Using Fastify to send the random meme
&lt;/h2&gt;

&lt;p&gt;Finally, we will pick a random meme and send it to the user using this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllMemes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;memeUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, whenever the user visits &lt;code&gt;localhost:5555&lt;/code&gt;, they get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZ_fqIRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629209526927/q3deMvwlE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZ_fqIRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629209526927/q3deMvwlE.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q20LghGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/DRNHiOI54DlW3MBO30/200.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q20LghGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/DRNHiOI54DlW3MBO30/200.gif" alt="done.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have our app done! Thanks for reading! You can find all the code  &lt;a href="https://github.com/max-programming/meme-api"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you liked it! Comment down your thoughts! There is always room for improvement so let me know your suggestions on this project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me on my &lt;a href="https://youtube.com/MaxProgramming"&gt;YouTube channel&lt;/a&gt; and my  &lt;a href="https://twitter.com/maxprogramming1"&gt;Twitter&lt;/a&gt; üòâ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Until next time, keeping awesome ‚úåÔ∏è&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>puppeteer</category>
      <category>api</category>
    </item>
    <item>
      <title>Writing as a developer is like going on a journey</title>
      <author>Tobias Timm</author>
      <pubDate>Wed, 18 Aug 2021 09:56:09 +0000</pubDate>
      <link>https://dev.to/s2engineers/writing-as-a-developer-is-like-going-on-a-journey-7ak</link>
      <guid>https://dev.to/s2engineers/writing-as-a-developer-is-like-going-on-a-journey-7ak</guid>
      <description>&lt;p&gt;Do you often feel the urge to write an excellent blog article, or do you not care about it at all? Your choice doesn't matter here, and it is neither good nor bad. &lt;/p&gt;

&lt;p&gt;As a developer, you need to handle a lot of reading, writing technical documentation, and explain to non-technical people how you would approach specific technical solutions. Maybe you can already read it between the line; the keyword I'm looking for is &lt;strong&gt;communication&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt; is critical in the developer's life. So how can you relate this to writing a blog article? &lt;br&gt;
Writing itself can be a joyful experience, where you can express your emotions and creativity in a completely new way. With writing, you can reflect on yourself and experience situations from the perspective of a different person.&lt;/p&gt;

&lt;p&gt;Do you want an example? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think of the last README file you have written. Have you adequately tested it and tried it out, like a person grabbing your GitHub repository? If not, do it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sooner or later, you will experience that maybe some critical pieces of information would be helpful or even required to know for your repository, and you forgot to mention them within your README. &lt;/p&gt;

&lt;p&gt;Another example? Here we go.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A new junior developer joins your team, and you need to explain how &lt;em&gt;insert your fancy framework here&lt;/em&gt; works. To make it easier to memorize it, you should also write it down.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you ever tried to explain your beloved framework to starters or non-technical people in an easy way or even write it down for them?&lt;/p&gt;

&lt;p&gt;Okay, so writing is an essential skill to learn as a developer, but how can I overcome myself by doing it more often?&lt;/p&gt;

&lt;p&gt;If you ask most developers why they don't write more often, the most common answers are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I have no time for that."&lt;/li&gt;
&lt;li&gt;"I don't like it."&lt;/li&gt;
&lt;li&gt;"I don't even know what I should write about."&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-have-no-time-for-that"&gt;
  &lt;/a&gt;
  I have no time for that
&lt;/h2&gt;

&lt;p&gt;I can emphasize myself with that statement. Most of my days are fully packed with work stuff, and if I can finally spare some hours/minutes, they are most often blocked by other topics that I wanted to explore.&lt;br&gt;
Unfortunately, there is no easy answer to loose this situation. &lt;br&gt;
At least I can share some tips/tasks for better handling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reprioritize your calendar and check if it is vital that you attend every meeting&lt;/li&gt;
&lt;li&gt;Create a blocker for ~30 minutes dedicated to writing &lt;/li&gt;
&lt;li&gt;Ask your colleagues for help; for example; they could participate in a meeting instead, take over a particular task, ... .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-like-it"&gt;
  &lt;/a&gt;
  I don't like it
&lt;/h2&gt;

&lt;p&gt;Writing like every other activity isn't for everyone, which is completely fine, but can you say that you tried it out long enough?&lt;br&gt;
To get a grasp on your emotions and motivation towards writing, set yourself a challenge. Make a week dedicated to writing. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The goal should be a small article about a topic you like. Every day try to write at least for thirty minutes; it doesn't matter if you write some words or can even phrase sentences within the 30 minutes. &lt;br&gt;
You have a ready-to-publish blog article at the end of the week, and you should post it! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It isn't good, or do you think it isn't perfect? &lt;br&gt;
Try not to be too hard on yourself. Small steps are the key to success, and feedback is more than welcome. If you don't want to publish your article, give it to a friend or colleague and talk about it.&lt;/p&gt;

&lt;p&gt;So how do you feel after the completion of this task? Happy, excited, stressed, bored? Sort your emotions and try to retake this exercise after 3-4 weeks. If your emotions and feelings haven't changed, you either found a new hobby, or writing isn't your correct fit; it should be something you enjoy, not something you feel like you need to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-even-know-what-i-should-write-about"&gt;
  &lt;/a&gt;
  I don't even know what I should write about
&lt;/h2&gt;

&lt;p&gt;There are several creative methods for brainstorming topics you can write about, but for starters, take your current technology stack and start with the simple things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to set up a server with technology xyz&lt;/li&gt;
&lt;li&gt;Creating a blog with abc&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This is covered all over the internet&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe it is, but does it cover your perspective? I bet not. There is at least one or two things that you would do differently than the other blog post. &lt;br&gt;
It is crucial and significant to share that with the whole world! &lt;/p&gt;

&lt;p&gt;Another great way to explore topics is to ask your colleagues or friends. Maybe there are some particular questions nobody has answered before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;p&gt;I have mentioned several times how vital writing is for me as a developer, and like every other activity, it can be a challenging journey. If you don't like it, try not to force writing on you, it should be something you enjoy doing. &lt;br&gt;
If you like it or haven't tried it out, try it! Don't be picky or too hard on yourself with your first result. Mistakes are allowed, and there is no perfect article/documentation.&lt;br&gt;
To make it easier to start or to get into writing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set yourself a goal to write something in a certain amount of time. For example, write a small article by the end of the week.&lt;/li&gt;
&lt;li&gt;Pick a topic covered by your daily work. Which framework are you using in your current tech stack? Try to explain how it works under the hood or set up a project with it.&lt;/li&gt;
&lt;li&gt;Reserve ~30 minutes a day in writing something. It can be a sentence or even some words.&lt;/li&gt;
&lt;li&gt;Present your work by publishing it or sharing it with your family, friend, or colleague by the end of the week. Ask them for some feedback!&lt;/li&gt;
&lt;li&gt;Did you feel stressed, happy, excited while doing this? Reflect on your emotions&lt;/li&gt;
&lt;li&gt;Redo this exercise in 3-4 weeks and compare the results.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to get as much enjoyment out of it as possible and make mistakes. There is no perfect article, and there will never be one. &lt;br&gt;
In mastering writing, you can reflect your technical perspective from different angles, improving your communication skill on several levels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-your-story"&gt;
  &lt;/a&gt;
  Share your story
&lt;/h2&gt;

&lt;p&gt;Do you have some tips on motivating yourself for writing, or what difficulties do you occur on your journey? Share your thoughts in the comments!&lt;/p&gt;

</description>
      <category>writing</category>
      <category>career</category>
      <category>webdev</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Tooltip using TailwindCss and AlpineJs</title>
      <author>Saurabh Mahajan</author>
      <pubDate>Wed, 18 Aug 2021 09:18:20 +0000</pubDate>
      <link>https://dev.to/100r0bh/tooltip-using-tailwindcss-and-alpinejs-47c8</link>
      <guid>https://dev.to/100r0bh/tooltip-using-tailwindcss-and-alpinejs-47c8</guid>
      <description>&lt;p&gt;In this Tutorial, we will build Tooltip using TailwindCss and AlpineJs and then encapsulate the logic into Laravel Component. At the end of the Tutorial, we will have a Tooltip like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/b3gTrRBOBjzQs2nge6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/b3gTrRBOBjzQs2nge6/giphy.gif" alt="Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before you begin further please make sure that you have a Laravel Project installed along with AlpineJs and TailwindCss. I would suggest installing Breeze in a Laravel Project as that automatically install both these dependencies.&lt;/p&gt;

&lt;p&gt;Our objective is to create a Help Icon and when user moves the mouse over the icon it would display the help text as tooltip.&lt;/p&gt;

&lt;p&gt;So first of all we would need a Help Icon. TailwindCss suggests using &lt;a href="https://heroicons.com/"&gt;HeroIcons&lt;/a&gt;, so we  would pick up an Icon, a question mark with Circle which has the following SVG.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"&amp;gt;
    &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would encapsulate it within a span tag like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="ml-2 h-5 w-5 cursor-pointer"&amp;gt;
  &amp;lt;!-- SVG Goes Here --&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have used the following Classes from TailwindCss:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ml-2: Margin Left of 0.5 rem&lt;/li&gt;
&lt;li&gt;h-5, w-5: Height &amp;amp; Width of 1.25 rem&lt;/li&gt;
&lt;li&gt;cursor-pointer: Changing the Cursor Style to Pointer on Mouseover &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can modify these classes as per you requirement.&lt;/p&gt;

&lt;p&gt;Now, let us also include the div which would display the Tooltip inside this span.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class="ml-2 h-5 w-5 cursor-pointer"&amp;gt;
  &amp;lt;!-- SVG Goes Here --&amp;gt;
  &amp;lt;div&amp;gt;
     This is the Tooltip.
  &amp;lt;/div&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to hide this div initially and only display it when User moves the mouse over the SVG. We will use AlpineJs to achieve this.&lt;/p&gt;

&lt;p&gt;First of all we will define AlpineJS data which will have a property that we will initially set to false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-data="{ tooltip: false }"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will &lt;code&gt;x-on&lt;/code&gt; directive to set this property to true on &lt;code&gt;mouseover&lt;/code&gt; as well as set this property to false on &lt;code&gt;mouseleave&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-on:mouseover="tooltip = true" x-on:mouseleave="tooltip = false"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we will use this property to show and hide the div using &lt;code&gt;x-show&lt;/code&gt; directive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x-show="tooltip" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Code at this stage looks like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span 
    x-data="{ tooltip: false }" 
    x-on:mouseover="tooltip = true" 
    x-on:mouseleave="tooltip = false"
    class="ml-2 h-5 w-5 cursor-pointer"&amp;gt;
  &amp;lt;!-- SVG Goes Here --&amp;gt;
  &amp;lt;div x-show="tooltip"&amp;gt;
     This is the Tooltip.
  &amp;lt;/div&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our Tooltip should now be working. However, we can further improve it by applying below TailwindCss Classes to the div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;div x-show="tooltip" 
      class="text-sm text-white absolute bg-blue-400 rounded-lg p-2
 transform -translate-y-8 translate-x-8"&amp;gt;
     This is the Tooltip.
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have applied the following TailwindCss Classes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;text-sm: Make the Tooltip text smaller&lt;/li&gt;
&lt;li&gt;text-white: Apply white Color to tooltip text&lt;/li&gt;
&lt;li&gt;absolute: To give it an absolute position so that it does not disturb the surrounding elements&lt;/li&gt;
&lt;li&gt;bg-blue-400: Background Color of Blue Shade&lt;/li&gt;
&lt;li&gt;rounded-lg: Apply Border Radius &lt;/li&gt;
&lt;li&gt;p-2: Padding of .5 rem&lt;/li&gt;
&lt;li&gt;transform: So that we can apply following translate classes&lt;/li&gt;
&lt;li&gt;-translate-y-8 translate-x-8: To shift the text on x-axis and y-axis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this stage you should have the same output as shown in the image at the start of the Tutorial. And we can also include multiple tooltips in a Blade File.&lt;/p&gt;

&lt;p&gt;However, let us move all our logic into a Component. We will create the file at &lt;code&gt;resources/views/components/tooltip.blade.php&lt;/code&gt; and move all our code into this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span 
    x-data="{ tooltip: false }" 
    x-on:mouseover="tooltip = true" 
    x-on:mouseleave="tooltip = false"
    class="ml-2 h-5 w-5 cursor-pointer"&amp;gt;
  &amp;lt;!-- SVG Goes Here --&amp;gt;
  &amp;lt;div x-show="tooltip"
    class="text-sm text-white absolute bg-blue-400 rounded-lg 
    p-2 transform -translate-y-8 translate-x-8"
  &amp;gt;
     {{$slot}}
  &amp;lt;/div&amp;gt;
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we have replaced the Tooltip Text with &lt;code&gt;$slot&lt;/code&gt;. So now within the Blade File we can call this Component and also pass the Tooltip Text like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;x-tooltip&amp;gt;This is the Tooltip Text&amp;lt;/x-tooltip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code shows how easy it is to use the Tooltip in our Blade File. And if we want to change the behavior of the Tooltip, we only need to do so in the Component File.&lt;/p&gt;

&lt;p&gt;Hope you have enjoyed this Article. For similar articles, you can follow me on &lt;a href="https://twitter.com/TheLaravelDev"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>alpinejs</category>
      <category>laravel</category>
    </item>
    <item>
      <title>What are your best tips for starting well in a new job?</title>
      <author>Jean-Michel Fayard üá´üá∑üá©üá™üá¨üáßüá™üá∏üá®üá¥</author>
      <pubDate>Wed, 18 Aug 2021 09:11:35 +0000</pubDate>
      <link>https://dev.to/jmfayard/what-are-your-best-tips-for-starting-well-in-a-new-job-fkf</link>
      <guid>https://dev.to/jmfayard/what-are-your-best-tips-for-starting-well-in-a-new-job-fkf</guid>
      <description>&lt;p&gt;Hello friends. I'm happy to start a new job soon üéâ &lt;/p&gt;

&lt;p&gt;I'm also a bit anxious. &lt;/p&gt;

&lt;p&gt;In the past, I had been overwhelmed by all the unknown that comes with a new job: unknown people, unknown expectations, unknown tools, unknown processes, unknown codebase, unknown libraries or even programming language, unknown unknowns.&lt;/p&gt;

&lt;p&gt;What are some of your best tips to be more prepared to handle all of this?&lt;/p&gt;

</description>
      <category>career</category>
      <category>discuss</category>
      <category>help</category>
    </item>
    <item>
      <title>8 Technical Writing Tips I Learned From Writing For SitePoint, Draft.dev, and More</title>
      <author>Shahed Nasser</author>
      <pubDate>Wed, 18 Aug 2021 08:53:27 +0000</pubDate>
      <link>https://dev.to/shahednasser/8-technical-writing-tips-i-learned-from-writing-for-sitepoint-draft-dev-and-more-250k</link>
      <guid>https://dev.to/shahednasser/8-technical-writing-tips-i-learned-from-writing-for-sitepoint-draft-dev-and-more-250k</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://blog.shahednasser.com/8-technical-writing-tips-i-learned-from-writing-for-sitepoint-draft-dev-and-more/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Late 2020, after writing articles sporadically, I finally created this blog. Through this blog, I was able to write many articles and tutorials about &lt;a href="https://blog.shahednasser.com/tag/javascript"&gt;Javascript&lt;/a&gt;, &lt;a href="https://blog.shahednasser.com/tag/browser-extensions"&gt;Browser Extensions&lt;/a&gt;, &lt;a href="https://blog.shahednasser.com/tag/magento"&gt;Magento 2&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;Then, in May 2021, I branched out and applied to write for different platforms. I landed a couple of gigs and became an author for some notable websites or agencies like &lt;a href="https://www.sitepoint.com"&gt;SitePoint&lt;/a&gt;, &lt;a href="https://draft.dev"&gt;Draft.dev&lt;/a&gt;, &lt;a href="https://logrocket.com"&gt;LogRocket&lt;/a&gt;, &lt;a href="https://contentlab.io"&gt;ContentLab&lt;/a&gt;, and more. Check the &lt;a href="https://blog.shahednasser.com/my-guest-writings/"&gt;My Guest Writings&lt;/a&gt; page to see some of them.&lt;/p&gt;

&lt;p&gt;After writing for these websites or some of their clients, I learned so many things regarding different technologies. I also learned some tips that allowed me to improve my technical writing. In this article, I'll share some of them with you, and in the end, I'll add some links in case you want to apply to these platforms, as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-with-an-outline"&gt;
  &lt;/a&gt;
  Start with an Outline
&lt;/h2&gt;

&lt;p&gt;Previously, I would get an idea or a concept I'd think would be good to write about. Then, I'd start writing right away, or if it's a tutorial I'd start coding in parallel. However, when I started writing for SitePoint, I was always asked to provide an outline before I start writing an article. Similarly for Draft.dev whenever I was assigned an article, it always starts with an outline.&lt;/p&gt;

&lt;p&gt;Defining an outline for your article organizes your thoughts and ideas before getting into them. You might have a lot of useful knowledge to share, but it gets lost between the spontaneous sentences here and there. Outlining the topic's headlines first allows you to organize where each thought, idea, or tip should go.&lt;/p&gt;

&lt;p&gt;If you're not sure how you can write an outline, there are &lt;a href="https://www.sitepoint.com/writing-for-money-tips-for-planning-your-next-article-pitch/"&gt;some tutorials&lt;/a&gt; that can help you get started. However, you can also start with outlining articles in your thoughts if that's easier. Take time to plan how the article's structure will look, and once you think you're confident enough in the planned headings and ideas flow, you can start writing the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplify-tutorials"&gt;
  &lt;/a&gt;
  Simplify Tutorials
&lt;/h2&gt;

&lt;p&gt;When a certain section in your tutorial requires setting up something that isn't actually necessary to the topic of the tutorial, simplify that as best as possible. Here's an example: let's say you're doing a tutorial on something related to Node.js. You might need to store the data somehow, so you end up choosing MySQL as the database. So, you'll have to add setup instructions in your tutorial related to setting up the database, when it's actually not necessary to the tutorial.&lt;/p&gt;

&lt;p&gt;This can cause confusion, especially if the reader doesn't know about MySQL (in the example I'm giving) enough to keep up, or maybe they don't have a MySQL server installed on their machine anyway. Make sure your tutorials are simple and to the point. Even if something seems simple to you, it might be a hurdle to the reader and they end up leaving your tutorial trying to find a simpler one. In the example above, if you need to use something to store the data you can try using something simple like an SQLite database where there won't be any complicated configurations required. Even if the reader doesn't know anything about it, then don't really need to know to keep going with the article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-consistent"&gt;
  &lt;/a&gt;
  Stay Consistent
&lt;/h2&gt;

&lt;p&gt;When writing an article or a tutorial, it's important to stay consistent. This applies to many things. First, don't use different spellings throughout the article. For example, don't use Javascript at one point then use JavaScript at another. Second, make sure your code is consistent. Don't use &lt;code&gt;"&lt;/code&gt; at some points then use &lt;code&gt;'&lt;/code&gt; in others, or don't omit &lt;code&gt;;&lt;/code&gt; in some code blocks and leave it in others. Although these details might not seem like they're a big deal, providing consistency keeps your article organized and uniform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-assume-the-reader-knows"&gt;
  &lt;/a&gt;
  Don't Assume The Reader Knows
&lt;/h2&gt;

&lt;p&gt;A lot of times we use certain words, phrases, abbreviations, or overlook details thinking they're basics and just like we know them, the reader will know them as well. It's important to cater your articles to readers in general.&lt;/p&gt;

&lt;p&gt;When using abbreviations, you should at least use the full word or phrase once with its abbreviation, then you can use the abbreviation after that. For example, if your article mentions Create React App, you might be inclined to just use CRA. Instead, the first time you mention it you should do it as "Create React App (CRA)", then refer to it as CRA in the rest of your article.&lt;/p&gt;

&lt;p&gt;When it comes to tutorials, for example, using methods, try to link to documentation on that method even if your tutorial explains it briefly. This allows the reader to delve more into the details if they need to and see any additional details you might have overshadowed as they don't necessarily fit into the tutorial. You can link to documentation from &lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Web Docs&lt;/a&gt; or other websites depending on the programming language you're using.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#always-link-to-sources"&gt;
  &lt;/a&gt;
  Always Link to Sources
&lt;/h2&gt;

&lt;p&gt;Similar to the previous section, you should always link to sources when possible. If you mention a survey or study results, browser limitations, quotes from other articles or books, or anything that comes from an original source, link back to it. This builds your article's credibility and maintains trust with the reader. Also, it allows the reader to check it out for themselves and see the details if needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-style-guide"&gt;
  &lt;/a&gt;
  Create a Style Guide
&lt;/h2&gt;

&lt;p&gt;When you first start writing articles, you might not care much about following a certain guideline for your articles. However, for the consistency of the blog as a whole and to maintain a certain structure for your articles, it's good to have a style guide. A style guide that an article must follow includes the type of headings it should use, certain words or formatting of the content, and other rules you can add yourself that you find are helpful through your journey in writing. You might be confused on how to start, but the more you write and start understanding the kind of blog you're creating, the clearer it comes.&lt;/p&gt;

&lt;p&gt;Try to start by creating a certain guideline for the content formatting. For example, a new line should be added before every new section or after every headline in the article. Start with simple guidelines and grow the list with time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-an-average-word-count"&gt;
  &lt;/a&gt;
  Have an Average Word Count
&lt;/h2&gt;

&lt;p&gt;A good tip I've learned by writing for all these different platforms is to keep an article between 1500~2000 words. You don't have to always keep the article in that range, but it's good to have an average range just to keep yourself in check and know when an article can be shortened or split into parts, or when it should be longer with more details.&lt;/p&gt;

&lt;p&gt;A lot of times I write a long article, then I take a second look at it and realize that I repeated myself a lot of times unnecessarily. After writing an article, if it's too long try to remove any unnecessary details or repeated statements. Make sure the article or tutorial focuses on its main purpose rather than unnecessary details. This helps the reader to get the best out of it when reading it and not get lost in irrelevant details. If it's a tutorial and can be split into parts, do that as it will be easier for the reader.&lt;/p&gt;

&lt;p&gt;On the other hand, if an article is too short take a second look at it. Are there ambiguous details? Is there room for confusion or misunderstandings? If so, take the time to re-iterate or elaborate on what you want to say or teach the reader. A lot of times we think that our point is coming across well, or what we are trying to teach is easily understood, but in reality, the article ends up missing the main point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-and-write"&gt;
  &lt;/a&gt;
  Learn and Write
&lt;/h2&gt;

&lt;p&gt;Before I started writing, I got to a point where I stopped learning new things. I just stuck to what I knew and never evolved. When I started writing, I started expanding my knowledge and learning new things to write about. Especially when I started writing for platforms like SitePoint or Draft.dev. A lot of times I was assigned an article that I had a basic knowledge of, or some I barely knew anything about. However, because I had to write about it for an article, I researched and went deep into the details of the topics. This helped me learn new things and expand my knowledge. I wasn't only writing to help others, I was learning through the process as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-be-confident-in-what-you-know"&gt;
  &lt;/a&gt;
  Bonus: Be Confident In What You Know
&lt;/h2&gt;

&lt;p&gt;A lot of people want to write but are scared that their knowledge is nothing compared to others, or that it will not benefit anyone. I felt the same way too when I started this blog. I thought that what I knew everyone knew, and that writing about these topics will not benefit anyone. However, after I started writing about all the different topics I had knowledge of, I received so many messages and emails thanking me for helping them resolve an issue they faced, learn more about a topic, or help them understand some things more. Even if you think your knowledge is limited, that does not mean others can't learn from you. None of us know everything, and someone is bound to learn from what you have to share.&lt;/p&gt;

&lt;p&gt;Additionally, even if no one reads or benefits from your article, you'll benefit yourself. Every single article or tutorial I wrote I learned something new from it. Sometimes it's minor details when I'm trying or searching for something, sometimes it's the entire topic. At the end of the day, there's at least one person learning from your writings, so be confident about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you're considering writing for these platforms, don't hesitate or think you can't do it. You can always apply and try, and hopefully, you'll learn through writing for them as well.&lt;/p&gt;

&lt;p&gt;I'll leave the links to apply to write for these websites below. Take the time to go through them if it interests you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjh8urvgLHyAhUE1hoKHfByDFEQFnoECAgQAw&amp;amp;url=https%3A%2F%2Fwww.sitepoint.com%2Fwrite-for-us%2F&amp;amp;usg=AOvVaw17PGRzWlDU3-SpPm2yZ1AB"&gt;SitePoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://draft.dev/write"&gt;Draft.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwiS1oj2gLHyAhWBzoUKHUOkAZEQFnoECAMQAQ&amp;amp;url=https%3A%2F%2Fblog.logrocket.com%2Fbecome-a-logrocket-guest-author%2F&amp;amp;usg=AOvVaw21Npb2S-nFefEDCz-Rcgng"&gt;LogRocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://contentlab.io/write-for-contentlab/"&gt;ContentLab.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devjournal</category>
      <category>tips</category>
      <category>writing</category>
      <category>career</category>
    </item>
    <item>
      <title>JavaScript Form Validation and CSS Neumorphism (Video Tutorial)</title>
      <author>Chaoo Charles</author>
      <pubDate>Wed, 18 Aug 2021 08:25:32 +0000</pubDate>
      <link>https://dev.to/chaoocharles/javascript-form-validation-and-css-neumorphism-video-tutorial-4chb</link>
      <guid>https://dev.to/chaoocharles/javascript-form-validation-and-css-neumorphism-video-tutorial-4chb</guid>
      <description>&lt;p&gt;In the following tutorial we are going to cover JavaScript Client Side Form Validation, CSS Neumorphism and Show/Hide Password.&lt;/p&gt;

&lt;p&gt;The source code is available here: &lt;a href="https://github.com/chaoocharles/javascript-projects"&gt;https://github.com/chaoocharles/javascript-projects&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-video-tutorial"&gt;
  &lt;/a&gt;
  The Video Tutorial
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QPRTgsTkM1k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>const rvalue references</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 18 Aug 2021 07:58:31 +0000</pubDate>
      <link>https://dev.to/sandordargo/const-rvalue-references-11lo</link>
      <guid>https://dev.to/sandordargo/const-rvalue-references-11lo</guid>
      <description>&lt;p&gt;Recently I facilitated a workshop at &lt;a href="https://cpponsea.uk/2021/sessions/workshop_how-to-use-correctly-the-const-qualifier.html"&gt;C++OnSea&lt;/a&gt;. It went well, but there was one topic that I couldn't deliver as well as I wanted. You might have guessed it right, it was about &lt;code&gt;const&lt;/code&gt; rvalue references.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-rvalue-references"&gt;
  &lt;/a&gt;
  What are rvalue references?
&lt;/h2&gt;

&lt;p&gt;Rvalue references were introduced to C++ with C++11. Since then, we refer to the traditional references (marked with one &lt;code&gt;&amp;amp;&lt;/code&gt;) as lvalue references.&lt;/p&gt;

&lt;p&gt;With the use of rvalue (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;) references, we can avoid logically unnecessary copying by moving the values instead of making an extra copy with the sacrifice of potentially leaving the original value in an unusable state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;MyObject&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;MyObject&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Don't do this, it's unsafe, potentially a is in a default constructed state or worse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As said, with the help of rvalue references we can limit unnecessary copying and implement perfect forwarding functions, thus achieving higher performance and more robust libraries.&lt;/p&gt;

&lt;p&gt;If we try to define rvalue references in contrast with lvaule references, we can say that an lvalue is an expression whose address can be taken, as such an lvalue reference is a locator value. &lt;/p&gt;

&lt;p&gt;At the same time, an rvalue is an unnamed value that exists only during the evaluation of an expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// i is an lvalue&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;lvri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// lvri is an lvalue reference&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rvrt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// rvr1 is rvalue reference to temporary rvalue returned by f()&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rvrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// rvalue reference to a literal!&lt;/span&gt;

    &lt;span class="c1"&gt;// int&amp;amp;&amp;amp; rv3 = i;   // ERROR, cannot bind int&amp;amp;&amp;amp; to int lvalue&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;  &lt;span class="n"&gt;lvri&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; 
              &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rvrt&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rvrl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In other terms, &lt;em&gt;"an lvalue is an expression that refers to a memory location and allows us to take the address of that memory location via the &lt;code&gt;&amp;amp;&lt;/code&gt; operator. An rvalue is an expression that is not an lvalue."&lt;/em&gt; (&lt;a href="http://thbecker.net/articles/rvalue_references/section_01.html"&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;From one point of view, we might say that if you have a temporary value on the right, why would anyone want to modify it.&lt;/p&gt;

&lt;p&gt;But on the other hand, we said that rvalue references are used for removing unnecessary copying, they are used with move semantics. If we "move away" from a variable, it implies modification.&lt;/p&gt;

&lt;p&gt;Why would anyone (and how!) make such move-away variables &lt;code&gt;const&lt;/code&gt;? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binding-rules"&gt;
  &lt;/a&gt;
  Binding rules
&lt;/h2&gt;

&lt;p&gt;Given the above constraint, not surprisingly, the canonical signatures of the move assignment operator and of the move constructor use non-&lt;code&gt;const&lt;/code&gt; rvalue references.&lt;/p&gt;

&lt;p&gt;But that doesn't mean that &lt;code&gt;const T&amp;amp;&amp;amp;&lt;/code&gt; doesn't exist. It does, it's syntactically completely valid.&lt;/p&gt;

&lt;p&gt;It's not simply syntactically valid, but the language has clear, well-defined binding rules for it.&lt;/p&gt;

&lt;p&gt;For our binding examples, we'll use the following four overloads of a simple function &lt;code&gt;f&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;// #1&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"const lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;// #2&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"rvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// #3&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"const rvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// #4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have a non-&lt;code&gt;const&lt;/code&gt; rvalue reference, it can be used with any of these, but the non-&lt;code&gt;const&lt;/code&gt; lvalue reference (#1). The first choice is &lt;code&gt;f(T&amp;amp;&amp;amp;)&lt;/code&gt;, then &lt;code&gt;f(const T&amp;amp;&amp;amp;)&lt;/code&gt; and finally &lt;code&gt;f(const T&amp;amp;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But if none of those is available, only &lt;code&gt;f(T&amp;amp;)&lt;/code&gt;, you'll get the following error message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;// #1&lt;/span&gt;
&lt;span class="c1"&gt;// void f(const T&amp;amp;) { std::cout &amp;lt;&amp;lt; "const lvalue ref\n"; }  // #2&lt;/span&gt;
&lt;span class="c1"&gt;// void f(T&amp;amp;&amp;amp;) { std::cout &amp;lt;&amp;lt; "rvalue ref\n"; } // #3&lt;/span&gt;
&lt;span class="c1"&gt;// void f(const T&amp;amp;&amp;amp;) { std::cout &amp;lt;&amp;lt; "const rvalue ref\n"; } // #4&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;{});&lt;/span&gt; &lt;span class="c1"&gt;// rvalue #3, #4, #2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
main.cpp:12:8: error: cannot bind non-`const` lvalue reference of type 'T&amp;amp;' to an rvalue of type 'T'
   12 |     f (T{}); // rvalue        #3, #4, #2
      |    
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So an rvalue can be used both with rvalue overloads and a const lvalue reference. It's a little bit of a mixture.&lt;/p&gt;

&lt;p&gt;If we have an lvalue, that can be used only with &lt;code&gt;f(T&amp;amp;)&lt;/code&gt; and &lt;code&gt;f(const T&amp;amp;)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;// #1&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"const lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;// #2&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"rvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// #3&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"const rvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// #4&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #1, #2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a little bit of asymmetry here.&lt;/p&gt;

&lt;p&gt;Can we "fix" this asymmetry? Is there any option that can be used only with the rvalue overloads?&lt;/p&gt;

&lt;p&gt;No. If we take a &lt;code&gt;const&lt;/code&gt; rvalue reference, it can be used with the &lt;code&gt;f(const T&amp;amp;&amp;amp;)&lt;/code&gt; and &lt;code&gt;f(const T&amp;amp;)&lt;/code&gt;, but not with any of the non-&lt;code&gt;const&lt;/code&gt; references.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;// #1&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"const lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="c1"&gt;// #2&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"rvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// #3&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"const rvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// #4&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// #4, #2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;By the way, don't return &lt;code&gt;const&lt;/code&gt; values from a function, because you make it impossible to use move semantics. &lt;a href="https://www.sandordargo.com/blog/2020/11/18/when-use-const-3-return-types"&gt;Find more info here.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-const-rvalue-references"&gt;
  &lt;/a&gt;
  When to use const rvalue references?
&lt;/h2&gt;

&lt;p&gt;Let's turn it around a bit. A lvalue overload can accept both lvalues and rvalues, but an rvalue overload can only accept rvalues. &lt;/p&gt;

&lt;p&gt;The goal of rvalue references is sparing copies and using move semantics. At the same time, we cannot move away from const values. Therefore the usage of &lt;code&gt;const&lt;/code&gt; rvalue references communicates that &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a given operation is only supported on rvalues&lt;/li&gt;
&lt;li&gt;but we still make a copy, as we cannot move.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We haven't seen a lot the need for this. For a potential example with unique pointers &lt;a href="https://stackoverflow.com/a/60587511/3238101"&gt;check out this StackOverflow answer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What is important to note is that &lt;code&gt;f(const T&amp;amp;&amp;amp;)&lt;/code&gt; can take both &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;const T&amp;amp;&amp;amp;&lt;/code&gt;, while &lt;code&gt;f(T&amp;amp;&amp;amp;)&lt;/code&gt; can only take the non-&lt;code&gt;const&lt;/code&gt; rvalue reference and not the const one.&lt;/p&gt;

&lt;p&gt;Therefore if you want to prohibit rvalue references, you should delete the &lt;code&gt;f(const T&amp;amp;&amp;amp;)&lt;/code&gt; overload. &lt;/p&gt;

&lt;p&gt;What would happen otherwise?&lt;/p&gt;

&lt;p&gt;If you delete the non-&lt;code&gt;const&lt;/code&gt; overload, the compilation will fail with rvalue references, but even though it doesn't make much sense in general to pass &lt;code&gt;const&lt;/code&gt; rvalue references, the code will compile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"const lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//{ std::cout &amp;lt;&amp;lt; "rvalue ref\n"; }&lt;/span&gt;
&lt;span class="c1"&gt;// void f(const T&amp;amp;&amp;amp;) { std::cout &amp;lt;&amp;lt; "const rvalue ref\n"; }&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
const lvalue ref
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if we delete the &lt;code&gt;const T&amp;amp;&amp;amp;&lt;/code&gt; overload, we make sure that no rvalue references are accepted at all.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"const lvalue ref&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// void f(T&amp;amp;&amp;amp;) = delete; //{ std::cout &amp;lt;&amp;lt; "rvalue ref\n"; }&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//{ std::cout &amp;lt;&amp;lt; "const rvalue ref\n"; }&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/*
main.cpp: In function 'int main()':
main.cpp:15:6: error: use of deleted function 'void f(const T&amp;amp;&amp;amp;)'
   15 |     f(g());
      |     ~^~~~~
main.cpp:8:6: note: declared here
    8 | void f(const T&amp;amp;&amp;amp;) = delete; //{ std::cout &amp;lt;&amp;lt; "const rvalue ref\n"; }
      |      ^
main.cpp:16:6: error: use of deleted function 'void f(const T&amp;amp;&amp;amp;)'
   16 |     f(T{});
      |     ~^~~~~
main.cpp:8:6: note: declared here
    8 | void f(const T&amp;amp;&amp;amp;) = delete; //{ std::cout &amp;lt;&amp;lt; "const rvalue ref\n"; }
      |      ^
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So due to the binding rules, we can only make sure by deleting the &lt;code&gt;const&lt;/code&gt; version that no rvalue references are accepted.&lt;/p&gt;

&lt;p&gt;You can observe this the standard library too, for example with &lt;a href="https://github.com/microsoft/STL/blob/1ece8a0352327397997c3f4b649a228c66da3ce1/stl/inc/type_traits#L1967-L1981"&gt;&lt;code&gt;std::reference_wrapper::ref&lt;/code&gt; and &lt;code&gt;std::reference_wrapper::cref&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Today we discussed &lt;code&gt;const&lt;/code&gt; rvalue references. We saw that although at a first glance they don't make much sense, they are still useful. Rvalue references in general are used with move semantics which implies modifying the referred object, but in some rare cases, it might have a good semantic meaning. At the same time, it's also used with &lt;code&gt;=delete&lt;/code&gt; to prohibit rvalue references in a bulletproof way.&lt;/p&gt;

&lt;p&gt;Let me know if you've ever used &lt;code&gt;const&lt;/code&gt; rvalue references in your code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://accu.org/journals/overload/12/61/kilpelainen_227/"&gt;Lvalues and Rvalues By Mikael Kilpel√§inen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thbecker.net/articles/rvalue_references/section_01.html"&gt;C++ Rvalue References Explained by Thomas Becker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n2027.html"&gt;A Brief Introduction to Rvalue References by Howard E. Hinnant, Bjarne Stroustrup and Bronek Kozicki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codesynthesis.com/~boris/blog/2012/07/24/const-rvalue-references/"&gt;What are const rvalue references good for? by Boris Kolpackov&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>tutorial</category>
      <category>const</category>
      <category>rvalue</category>
    </item>
    <item>
      <title>Learning Go by examples: part 6 - Create a gRPC app in Go</title>
      <author>Aur√©lie Vache</author>
      <pubDate>Wed, 18 Aug 2021 07:50:23 +0000</pubDate>
      <link>https://dev.to/aurelievache/learning-go-by-examples-part-6-create-a-grpc-app-in-go-2ja3</link>
      <guid>https://dev.to/aurelievache/learning-go-by-examples-part-6-create-a-grpc-app-in-go-2ja3</guid>
      <description>&lt;p&gt;In previous articles we created an &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-2-create-an-http-rest-api-server-in-go-1cdm"&gt;HTTP REST API server&lt;/a&gt;, a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43"&gt;CLI&lt;/a&gt;, a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-4-create-a-bot-for-discord-in-go-43cf"&gt;Bot for Discord&lt;/a&gt; and even a &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-5-create-a-game-boy-advance-gba-game-in-go-5944"&gt;game for Nintendo Game Boy Advance&lt;/a&gt;. Today let's create another type of application: a gRPC app in Go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grpc"&gt;
  &lt;/a&gt;
  gRPC
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHm3v6ho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bouqkcbqfb5swj8crr8y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHm3v6ho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bouqkcbqfb5swj8crr8y.jpg" alt="gRPC pancake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, what is gRPC?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt; is a modern, open source Remote Procedure Call (RPC) framework, originally developed by Google.&lt;/p&gt;

&lt;p&gt;"gRPC is based around the idea of defining a service, specifying the methods that can be called remotely with their parameters and return types. On the server side, the server implements this interface and runs a gRPC server to handle client calls. On the client side, the client has a stub (referred to as just a client in some languages) that provides the same methods as the server."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iYXRJCur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf6ap50rfjjpzhytd1d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYXRJCur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf6ap50rfjjpzhytd1d3.png" alt="gRPC schema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It uses &lt;a href="https://developers.google.com/protocol-buffers"&gt;Protocol Buffers&lt;/a&gt;, Google‚Äôs Open Source technology for serializing and deserializing structured data.&lt;/p&gt;

&lt;p&gt;gRPC uses &lt;a href="https://developers.google.com/web/fundamentals/performance/http2"&gt;HTTP/2&lt;/a&gt; for the transport layer (lower latency, response multiplexing, server-side streaming, client-side streaming or even bidirectional-streaming...)&lt;/p&gt;

&lt;p&gt;Each RPC service is declared in a &lt;code&gt;protobuf&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;From this &lt;code&gt;.proto&lt;/code&gt; file, you can generate a client in many languages.&lt;/p&gt;

&lt;p&gt;So, one of the power of gRPC is that is language agnostic: you can have one server in Go and several clients in Java, Python, Rust, Go... &lt;/p&gt;

&lt;p&gt;If you have microservices that need to communicate to each other, gRPC can be a solution instead of REST API interfaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialization"&gt;
  &lt;/a&gt;
  Initialization
&lt;/h2&gt;

&lt;p&gt;We created our &lt;a href="https://github.com/scraly/learning-go-by-examples"&gt;Git repository&lt;/a&gt; in the previous article, so now we just have to retrieve it locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/scraly/learning-go-by-examples.git
$ cd learning-go-by-examples
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will create a folder &lt;code&gt;go-gopher-grpc&lt;/code&gt; for our CLI application and go into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir go-gopher-grpc
$ cd go-gopher-grpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have to initialize Go modules (dependency management):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go mod init github.com/scraly/learning-go-by-examples/go-gopher-grpc
go: creating new go.mod: module github.com/scraly/learning-go-by-examples/go-gopher-grpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;code&gt;go.mod&lt;/code&gt; file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module github.com/scraly/learning-go-by-examples/go-gopher-grpc

go 1.16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before to start our super gRPC application, as good practices, we will create a simple code organization.&lt;/p&gt;

&lt;p&gt;Create the following folders organization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ bin
‚îú‚îÄ‚îÄ go.mod
‚îî‚îÄ‚îÄ test-results
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it? Yes, the rest of our code organization will be created shortly ;-).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-our-cli-application"&gt;
  &lt;/a&gt;
  Create our CLI application
&lt;/h2&gt;

&lt;p&gt;Like the second article, we will create a CLI (Command Line Interface) application.&lt;br&gt;
If you don't know &lt;strong&gt;Cobra&lt;/strong&gt; I recommend you to read the &lt;a href="https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43"&gt;CLI article&lt;/a&gt; before to go further.&lt;/p&gt;

&lt;p&gt;Install Cobra:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get -u github.com/spf13/cobra/cobra
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate our CLI application structure and imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobra init --pkg-name github.com/scraly/learning-go-by-examples/go-gopher-grpc
Your Cobra application is ready at
/Users/aurelievache/git/github.com/scraly/learning-go-by-examples/go-gopher-grpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our application is initialized, a &lt;code&gt;main.go&lt;/code&gt; file and a &lt;code&gt;cmd/&lt;/code&gt; folder has been created, our code organization is now like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ LICENSE
‚îú‚îÄ‚îÄ bin
‚îú‚îÄ‚îÄ cmd
‚îÇ   ‚îî‚îÄ‚îÄ root.go
‚îú‚îÄ‚îÄ go.mod
‚îú‚îÄ‚îÄ go.sum
‚îú‚îÄ‚îÄ main.go
‚îî‚îÄ‚îÄ test-results
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like in the CLI article, &lt;strong&gt;Viper&lt;/strong&gt; is used in &lt;code&gt;root.go&lt;/code&gt; so we need to install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get github.com/spf13/viper@v1.8.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-create-our-grpc-client-and-server"&gt;
  &lt;/a&gt;
  Let's create our gRPC client and server
&lt;/h2&gt;

&lt;p&gt;We want a gRPC application so the first things that we need to do is to create a &lt;code&gt;server&lt;/code&gt; and a &lt;code&gt;client&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cobra add client
client created at /Users/aurelievache/git/github.com/scraly/learning-go-by-examples/go-gopher-grpc

$ cobra add server
server created at /Users/aurelievache/git/github.com/scraly/learning-go-by-examples/go-gopher-grpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the &lt;code&gt;cmd/&lt;/code&gt; folder code organisation should contains these files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cmd
‚îú‚îÄ‚îÄ client.go
‚îú‚îÄ‚îÄ root.go
‚îî‚îÄ‚îÄ server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At ths time, the &lt;code&gt;go.mod&lt;/code&gt; file should have these following imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scraly&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;learning&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gopher&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;grpc&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="m"&gt;1.16&lt;/span&gt;

&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spf13&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cast&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="m"&gt;.4.0&lt;/span&gt; &lt;span class="c"&gt;// indirect&lt;/span&gt;
    &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spf13&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cobra&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="m"&gt;.2.1&lt;/span&gt;
    &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spf13&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;viper&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="m"&gt;.8.1&lt;/span&gt;
    &lt;span class="n"&gt;golang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="m"&gt;.0.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;20210630005230&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="n"&gt;f9fa26af87c&lt;/span&gt; &lt;span class="c"&gt;// indirect&lt;/span&gt;
    &lt;span class="n"&gt;golang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="m"&gt;.3.6&lt;/span&gt; &lt;span class="c"&gt;// indirect&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to explain to the users the goal and the usage of our app, we need to edit the &lt;code&gt;root.go&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// rootCmd represents the base command when called without any subcommands&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;rootCmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cobra&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;"go-gopher-grpc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Short&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"gRPC app in Go"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;`gRPC application written in Go.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's time to execute our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go
gRPC application written in Go.

Usage:
  go-gopher-grpc [command]

Available Commands:
  client      A brief description of your command
  completion  generate the autocompletion script for the specified shell
  help        Help about any command
  server      A brief description of your command

Flags:
      --config string   config file (default is $HOME/.go-gopher-grpc.yaml)
  -h, --help            help for go-gopher-grpc
  -t, --toggle          Help message for toggle

Use "go-gopher-grpc [command] --help" for more information about a command.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, an usage message is displayed, perfect!&lt;/p&gt;

&lt;p&gt;Let's test our &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go client
client called

$ go run main.go server
server called
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OK, the &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;server&lt;/code&gt; commands answered too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-create-our-proto"&gt;
  &lt;/a&gt;
  Let's create our proto
&lt;/h2&gt;

&lt;p&gt;Like we said, by default, gRPC uses &lt;a href="https://developers.google.com/protocol-buffers"&gt;Protocol Buffers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BAm3Lsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k20363ea4bza9hhihxqd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BAm3Lsb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k20363ea4bza9hhihxqd.png" alt="JSON"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step when working with Protocol Buffers is to define the structure for the data you want to serialize in a &lt;code&gt;.proto&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;gopher.proto&lt;/code&gt; file under a new folder &lt;code&gt;pkg/gopher/&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;syntax = "proto3";
package gopher;

option go_package = "github.com/scraly/learning-by-examples/go-gopher-grpc";

// The gopher service definition.
service Gopher {
  // Get Gopher URL
  rpc GetGopher (GopherRequest) returns (GopherReply) {}
}

// The request message containing the user's name.
message GopherRequest {
  string name = 1;
}

// The response message containing the greetings
message GopherReply {
  string message = 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ms8IbYdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuc37ikkfop602pbpebc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ms8IbYdY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuc37ikkfop602pbpebc.png" alt=".proto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's explain it.&lt;br&gt;
This &lt;code&gt;.proto&lt;/code&gt; file exposes our &lt;strong&gt;Gopher&lt;/strong&gt; service which have a &lt;strong&gt;GetGopher&lt;/strong&gt; function which can be called by any gRPC client written in any language.&lt;/p&gt;

&lt;p&gt;gRPC is supported by many programming languages, so microservices that need to interact with your gRPC server can generate their own code with the &lt;code&gt;.proto&lt;/code&gt; file in output.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;option go_package&lt;/code&gt; line is required in order to generate Go code, the Go package's import path must be provided for every &lt;code&gt;.proto&lt;/code&gt; file. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#generate-go-code-from-proto"&gt;
  &lt;/a&gt;
  Generate Go code from proto
&lt;/h2&gt;

&lt;p&gt;Now, we need to &lt;a href="https://grpc.io/docs/protoc-installation/"&gt;install &lt;strong&gt;Protocol Buffers v3&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For MacOs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ brew install protoc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check protoc is correctly installed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ protoc --version
libprotoc 3.17.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to generate the Go gRPC code thanks to &lt;code&gt;protoc&lt;/code&gt; tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ protoc --go_out=plugins=grpc:. --go_opt=paths=source_relative pkg/gopher/gopher.proto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should have one new file in &lt;code&gt;pkg/gopher&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pkg/gopher
‚îú‚îÄ‚îÄ gopher.pb.go
‚îî‚îÄ‚îÄ gopher.proto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;gopher.go&lt;/code&gt; file contains generated code that we will import in our &lt;code&gt;server.go&lt;/code&gt; file in order to register our gRPC server to &lt;code&gt;Gopher&lt;/code&gt; service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-create-our-grpc-server"&gt;
  &lt;/a&gt;
  Let's create our gRPC server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9NE0odB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxbi12kiyao5ki1un3u9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9NE0odB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxbi12kiyao5ki1un3u9.png" alt="Blues Gophers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to create our gRPC server, for that we need to edit our &lt;code&gt;server.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;First, we initialize the package, called cmd, and all dependencies/librairies we need to import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"encoding/json"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"io/ioutil"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"net"&lt;/span&gt;
    &lt;span class="s"&gt;"net/http"&lt;/span&gt;
    &lt;span class="s"&gt;"strings"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/spf13/cobra"&lt;/span&gt;
    &lt;span class="s"&gt;"golang.org/x/xerrors"&lt;/span&gt;

    &lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="s"&gt;"github.com/scraly/learning-go-by-examples/go-gopher-grpc/pkg/gopher"&lt;/span&gt;
    &lt;span class="s"&gt;"google.golang.org/grpc"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we initialize our constants:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;port&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;":9000"&lt;/span&gt;
    &lt;span class="n"&gt;KuteGoAPIURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://kutego-api-xxxxx-ew.a.run.app"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We define two structs, one for our server and one for our Gopher data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// server is used to implement gopher.GopherServer.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnimplementedGopherServer&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Gopher&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json: "url"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We improve our serverCmd run function that initialize a gRPC server, register to RPC service and start our server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// serverCmd represents the server command&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;serverCmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cobra&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;"server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Short&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Starts the Schema gRPC server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cobra&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;lis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tcp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to listen: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;grpcServer&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;grpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;// Register services&lt;/span&gt;
        &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterGopherServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grpcServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;

        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GRPC server listening on %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;grpcServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lis&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to serve: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we implement &lt;code&gt;GetGopher&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Wait, what do we want?&lt;br&gt;
Oups, excuse me I forget to expain what our server will serve ^^.&lt;/p&gt;

&lt;p&gt;Our gRPC should implement a GetGopher method that will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check that request is not nil and contains a not empty Gopher's name&lt;/li&gt;
&lt;li&gt;ask to &lt;a href="https://github.com/gaelleacas/kutego-api"&gt;KuteGo API&lt;/a&gt; information about the Gopher&lt;/li&gt;
&lt;li&gt;return Gopher's URL
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// GetGopher implements gopher.GopherServer&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherReply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherReply&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c"&gt;// Check request&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"request must not be nil"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xerrors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"request must not be nil"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name must not be empty in the request"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xerrors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name must not be empty in the request"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetName&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c"&gt;//Call KuteGo API in order to get Gopher's URL&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KuteGoAPIURL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"/gophers?name="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetName&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to call KuteGoAPI: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Transform our response to a []byte&lt;/span&gt;
        &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to read response body: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Put only needed informations of the JSON document in our array of Gopher&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Gopher&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to unmarshal JSON: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// Create a string with all of the Gopher's name and a blank line as separator&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;gophers&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Builder&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gopher&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;gophers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gopher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gophers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Can't get the Gopher :-("&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Don't forget the existing original &lt;code&gt;init&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rootCmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-our-dependencies"&gt;
  &lt;/a&gt;
  Install our dependencies
&lt;/h2&gt;

&lt;p&gt;As usual, if you use external depencencies, you need to install them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get google.golang.org/grpc
$ go get golang.org/x/xerrors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-create-our-grpc-client"&gt;
  &lt;/a&gt;
  Let's create our gRPC client
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xh7J0fzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmrwwk1l5xmr4d1fvqyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xh7J0fzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmrwwk1l5xmr4d1fvqyw.png" alt="Blues Gophers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can create our gRPC client, for that we need to edit our &lt;code&gt;client.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;We initialize the package, called cmd, and all dependencies/librairies we need to import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;

    &lt;span class="s"&gt;"google.golang.org/grpc"&lt;/span&gt;

    &lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="s"&gt;"github.com/scraly/learning-go-by-examples/go-gopher-grpc/pkg/gopher"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/spf13/cobra"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Define our constants:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"localhost:9000"&lt;/span&gt;
    &lt;span class="n"&gt;defaultName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"dr-who"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We improve our clientCmd run function that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;initialize a gRPC client&lt;/li&gt;
&lt;li&gt;connect to gRPC server&lt;/li&gt;
&lt;li&gt;call the GetGopher function with the Gopher's name&lt;/li&gt;
&lt;li&gt;return "URL:" + the message returned by the gRPC call
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// clientCmd represents the client command&lt;/span&gt;
&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;clientCmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cobra&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="s"&gt;"client"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Short&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Query the gRPC server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cobra&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;grpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientConn&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;grpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithInsecure&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"did not connect: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewGopherClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;

        &lt;span class="c"&gt;// Contact the server and print out its response.&lt;/span&gt;
        &lt;span class="c"&gt;// name := defaultName&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherRequest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not greet: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"URL: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMessage&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And don't forget the existing &lt;code&gt;init&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;rootCmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientCmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-it"&gt;
  &lt;/a&gt;
  Test it!
&lt;/h2&gt;

&lt;p&gt;Let's start our gRPC server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go server
2021/08/07 14:57:27 GRPC server listening on [::]:9000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in another tab of your terminal, launch the gRPC client that call our &lt;code&gt;GetGopher&lt;/code&gt; method with "gandalf" parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go run main.go client gandalf
2021/08/07 14:57:35 URL: https://raw.githubusercontent.com/scraly/gophers/main/gandalf.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our application works properly, it answers "URL:" + the URL of the wanted Gopher.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-it"&gt;
  &lt;/a&gt;
  Built it!
&lt;/h2&gt;

&lt;p&gt;Your application is now ready, you just have to build it.&lt;br&gt;
For that, like the previous articles, we will use &lt;a href="https://taskfile.dev/#/"&gt;Taskfile&lt;/a&gt; in order to automate our common tasks.&lt;/p&gt;

&lt;p&gt;So, for this app too, I created a &lt;code&gt;Taskfile.yml&lt;/code&gt; file with this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod go build -o bin/gopher-grpc main.go&lt;/span&gt; 

    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run the app&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;GOFLAGS=-mod=mod go run main.go&lt;/span&gt;

    &lt;span class="na"&gt;generate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate Go code from protobuf&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;protoc --go_out=plugins=grpc:. --go_opt=paths=source_relative pkg/gopher/gopher.proto&lt;/span&gt;

    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;desc&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Execute Unit Tests&lt;/span&gt;
        &lt;span class="na"&gt;cmds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;gotestsum --junitfile test-results/unit-tests.xml -- -short -race -cover -coverprofile test-results/cover.out ./...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to this, we can build our app easily:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ task build
task: [build] GOFLAGS=-mod=mod go build -o bin/gopher-grpc main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test it again with our fresh executable binary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./bin/gopher-grpc server
2021/08/07 15:07:20 GRPC server listening on [::]:9000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in another tab of your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./bin/gopher-grpc client yoda-gopher
2021/08/07 15:07:34 URL: https://raw.githubusercontent.com/scraly/gophers/main/yoda-gopher.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, the URL of our cute Yoda Gopher! :-) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests"&gt;
  &lt;/a&gt;
  Unit tests?
&lt;/h2&gt;

&lt;p&gt;Now, I can deploy my gRPC server/microservice in production environment, cool, thanks, bye! &lt;/p&gt;

&lt;p&gt;Uh... wait for it, before that, as you know it's important to test our applications, in order to know if our app is working like we want to, before to deploy it. &lt;br&gt;
Unit Tests are a powerful practice and in Go you can even create Unit Tests for gRPC apps.&lt;/p&gt;

&lt;p&gt;With Golang, you don't need to import an external package, like JUnit in Java. It's integrated in core package with the command &lt;code&gt;go test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's execute our Unit Tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go test
?       github.com/scraly/learning-go-by-examples/go-gopher-grpc    [no test files]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, 0 unit test were run successfully, normal ^^ &lt;br&gt;
We will deal with them in the next section, but before that, we'll discover a useful tool &lt;strong&gt;gotestsum&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gotestsum"&gt;
  &lt;/a&gt;
  Gotestsum
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/gotestyourself/gotestsum"&gt;Gotestsum&lt;/a&gt;, what is this new tool? Go test is not enough?&lt;/p&gt;

&lt;p&gt;Let's answer this question. One of the benefits of Go is its ecosystem of tools that allow us to make our lives easier. &lt;/p&gt;

&lt;p&gt;Like we saw, the test tool is integrated with Go. This is convenient, but not very user-friendly and integrable in all CI/CD solutions, for example.&lt;/p&gt;

&lt;p&gt;That's why &lt;strong&gt;gotestsum&lt;/strong&gt;, a small Go utility, designed to run tests with &lt;code&gt;go test&lt;/code&gt; improves the display of results, making a more human-readable, practical report with possible output directly in JUnit format. And it's one of the good practice given by this article ;-).&lt;/p&gt;

&lt;p&gt;Install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get gotest.tools/gotestsum
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's execute our &lt;code&gt;task test&lt;/code&gt; command that use &lt;code&gt;gotestsum&lt;/code&gt; tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ task test
task: [test] gotestsum --junitfile test-results/unit-tests.xml -- -short -race -cover -coverprofile test-results/cover.out ./...
‚àÖ  . (3ms)
‚àÖ  cmd
‚àÖ  pkg/gopher

DONE 0 tests in 1.409s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above shows that we use the gotestsum tool to run our unit tests and that test results are exported in &lt;strong&gt;JUnit&lt;/strong&gt; format in a file, named &lt;code&gt;test-results/unit-tests.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here an example of a generated test result file in JUnit format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;testsuites&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;testsuite&lt;/span&gt; &lt;span class="na"&gt;tests=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;failures=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;time=&lt;/span&gt;&lt;span class="s"&gt;"0.000000"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"github.com/scraly/learning-go-by-examples/go-gopher-grpc"&lt;/span&gt; &lt;span class="na"&gt;timestamp=&lt;/span&gt;&lt;span class="s"&gt;"2021-08-11T14:23:36+02:00"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"go.version"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"go1.16.5 darwin/amd64"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/testsuite&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;testsuite&lt;/span&gt; &lt;span class="na"&gt;tests=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;failures=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;time=&lt;/span&gt;&lt;span class="s"&gt;"0.000000"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"github.com/scraly/learning-go-by-examples/go-gopher-grpc/cmd"&lt;/span&gt; &lt;span class="na"&gt;timestamp=&lt;/span&gt;&lt;span class="s"&gt;"2021-08-11T14:23:36+02:00"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"go.version"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"go1.16.5 darwin/amd64"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/testsuite&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;testsuite&lt;/span&gt; &lt;span class="na"&gt;tests=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;failures=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;time=&lt;/span&gt;&lt;span class="s"&gt;"0.000000"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"github.com/scraly/learning-go-by-examples/go-gopher-grpc/pkg/gopher"&lt;/span&gt; &lt;span class="na"&gt;timestamp=&lt;/span&gt;&lt;span class="s"&gt;"2021-08-11T14:23:36+02:00"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"go.version"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"go1.16.5 darwin/amd64"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/testsuite&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/testsuites&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-test-grpc"&gt;
  &lt;/a&gt;
  How to Test gRPC?
&lt;/h2&gt;

&lt;p&gt;Our app is a gRPC client/server, so this means that when we call the &lt;code&gt;getGopher&lt;/code&gt; method, a client/server communication is triggered, but no question to test the gRPC calls in our unit tests. We will only test the intelligence of our application.&lt;/p&gt;

&lt;p&gt;As we have seen, our gRPC server is based on a protobuf file named &lt;code&gt;pkg/gopher/gopher.proto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The standard Go library provides us a package that allows us to test our Go program. A test file in Go must be placed in the same folder as the file we want to test and finished with the &lt;code&gt;_test.go&lt;/code&gt; extension. This formalism must be followed so that the Go executable recognizes our test files.&lt;/p&gt;

&lt;p&gt;The first step is to create a &lt;code&gt;server_test.go&lt;/code&gt; file that is placed next to &lt;code&gt;server.go&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are going to name the package of this test file &lt;code&gt;cmd_test&lt;/code&gt; and we will start by importing the testing package and creating the function we are going to test, like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;cmd_test&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"testing"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestGetGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;/!\ &lt;strong&gt;Warning&lt;/strong&gt;: Each test function must be written as &lt;code&gt;funcTest***(t *testing.T)&lt;/code&gt;, where &lt;code&gt;***&lt;/code&gt; represents the name of the function we want to test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-tests-with-tabledriven-tests"&gt;
  &lt;/a&gt;
  Let‚Äôs Write Tests With Table-Driven Tests
&lt;/h2&gt;

&lt;p&gt;In our application, we will not test everything, but we will start by testing our business logic, the intelligence of our application. In our app, what interests us is what is inside &lt;code&gt;server.go&lt;/code&gt;, especially the &lt;code&gt;GetGopher&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;GetGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherReply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherReply&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, in order to cover the maximum amount of our code, we will have to test at least three cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The request is nil.&lt;/li&gt;
&lt;li&gt;The request is empty (the name field is empty).&lt;/li&gt;
&lt;li&gt;The name field is filled in the request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-driven-tests"&gt;
  &lt;/a&gt;
  Table Driven Tests
&lt;/h2&gt;

&lt;p&gt;Instead of creating a test case method, and copying-and-pasting it, we're going to follow &lt;a href="https://github.com/golang/go/wiki/TableDrivenTests"&gt;Table Driven Tests&lt;/a&gt;, which will make life a lot easier.&lt;/p&gt;

&lt;p&gt;Writing good tests is not easy, but in many situations, you can cover a lot of things with table driven tests: each table entry is a complete test case with the inputs and the expected results. Sometimes additional information is provided. The test output is easily readable. If you usually find yourself using copy and paste when writing a test, ask yourself if refactoring in a table-driven test may be a better option.&lt;/p&gt;

&lt;p&gt;Given a test case table, the actual test simply scans all entries in the table and performs the necessary tests for each entry. The test code is written once and is depreciated on all table entries. It is therefore easier to write a thorough test with good error messages.&lt;/p&gt;

&lt;p&gt;First, install needed external dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ go get github.com/onsi/gomega
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's define our package and dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;cmd_test&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"testing"&lt;/span&gt;

    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="s"&gt;"github.com/scraly/learning-go-by-examples/go-gopher-grpc/cmd"&lt;/span&gt;
    &lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="s"&gt;"github.com/scraly/learning-go-by-examples/go-gopher-grpc/pkg/gopher"&lt;/span&gt;

    &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;"github.com/onsi/gomega"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we define our test case in the &lt;code&gt;TestGetGopher&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestGetGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="n"&gt;testCases&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="n"&gt;req&lt;/span&gt;         &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherRequest&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="n"&gt;expectedErr&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;
    &lt;span class="p"&gt;}{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="s"&gt;"req ok"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherRequest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"yoda-gopher"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="s"&gt;"https://raw.githubusercontent.com/scraly/gophers/main/yoda-gopher.png&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;expectedErr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="s"&gt;"req with empty name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GopherRequest&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
            &lt;span class="n"&gt;expectedErr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="s"&gt;"nil request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;         &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;expectedErr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The good practice is to provide a name for our test case, so if an error occurs during its execution the name of the test case will be written and we will see easily where is our error.&lt;/p&gt;

&lt;p&gt;Then, I loop through all the test cases. I call my service and depending on whether or not I wait for an error, I test its existence, otherwise I test if the result is that expected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;testCases&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;testCase&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parallel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewGomegaWithT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c"&gt;// call&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetGopher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;testCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Got : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;// assert results expectations&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;testCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expectedErr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToNot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BeNil&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"Result should be nil"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToNot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BeNil&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"Result should be nil"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;To&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;testCase&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aur√©lie, your code is nice! But why creating a new variable, &lt;code&gt;testCase&lt;/code&gt;, which takes a value, &lt;code&gt;tc&lt;/code&gt;, when you could have used &lt;code&gt;tc&lt;/code&gt; directly?&lt;/p&gt;

&lt;p&gt;In short, without this line, there is a bug with the &lt;code&gt;t.Parallel()&lt;/code&gt; well known to Gophers ‚Äî we use a closure that is in a go routine. So, instead of executing three test cases: "req ok", "req with empty name", and "nil request", there would be three tests runs but always with the values of the first test case :-(.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-what-is-gomega"&gt;
  &lt;/a&gt;
  And, what is Gomega?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vC-U5QGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0638zned33dh8jq4pwp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vC-U5QGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0638zned33dh8jq4pwp.png" alt="Gomega"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://onsi.github.io/gomega/"&gt;Gomega&lt;/a&gt; is a Go library that allows you to make assertions. In our example, we check if what we got is null, not null, or equal to an exact value, but the gomega library is much richer than that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-run-our-unit-tests"&gt;
  &lt;/a&gt;
  Let's run our Unit Tests!
&lt;/h2&gt;

&lt;p&gt;To run your newly created Unit Tests, if you use &lt;strong&gt;VisualStudio Code&lt;/strong&gt;, you can directly run them in your IDE; it's very convenient:&lt;/p&gt;

&lt;p&gt;First, open the &lt;code&gt;server_test.go&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Then, click in the ‚Äúrun package tests‚Äù link:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VTapYa0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a827cl3pfypk3vnd3xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VTapYa0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a827cl3pfypk3vnd3xd.png" alt="Run package tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, open the &lt;code&gt;server.go&lt;/code&gt; file: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--garNTgQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86cxwhox4ac8bn3fuij3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--garNTgQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86cxwhox4ac8bn3fuij3.png" alt="server.go"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code highlighted in green is the code that is covered by the tests ‚Äî super! And red lines are code not covered by our Unit Tests ;-).&lt;/p&gt;

&lt;p&gt;Otherwise, we can run all the unit tests of our project in the command line thanks to our marvelous Taskfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ task test
task: [test] gotestsum --junitfile test-results/unit-tests.xml -- -short -race -cover -coverprofile test-results/cover.out ./...
‚àÖ  . (1ms)
‚úì  cmd (1.388s) (coverage: 41.5% of statements)
‚àÖ  pkg/gopher

DONE 4 tests in 7.787s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, it's the begining of Unit Testing journey :-).&lt;/p&gt;

&lt;p&gt;If you're in the habit of copying paste when writing your test cases, I think you'll have to seriously take a look at Table Driven Tests :-). It's really a good practice to follow when writing unit tests and as As we have seen, writing unit tests that cover our code becomes child's play.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you have seen in this article and previous articles, it's possible to create multiple different applications in Go... and to write Unit Tests without copying and pasting code from StackOverFlow ;-).&lt;/p&gt;

&lt;p&gt;All the code of our gRPC app in Go is available in: &lt;a href="https://github.com/scraly/learning-go-by-examples/tree/main/go-gopher-grpc"&gt;https://github.com/scraly/learning-go-by-examples/tree/main/go-gopher-grpc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following articles we will create others kind/types of applications in Go.&lt;/p&gt;

&lt;p&gt;Hope you'll like it.&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>grpc</category>
      <category>testing</category>
    </item>
    <item>
      <title>Write Terraform Files in Go with hclwrite</title>
      <author>Scott McAllister</author>
      <pubDate>Wed, 18 Aug 2021 07:49:37 +0000</pubDate>
      <link>https://dev.to/stmcallister/write-terraform-files-in-go-with-hclwrite-2e1j</link>
      <guid>https://dev.to/stmcallister/write-terraform-files-in-go-with-hclwrite-2e1j</guid>
      <description>&lt;p&gt;I am one of the lead maintainers of the &lt;a href="https://registry.terraform.io/providers/PagerDuty/pagerduty/latest/docs"&gt;PagerDuty Terraform Provider&lt;/a&gt; which means I find myself writing a lot of &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt; definitions in &lt;a href="https://www.terraform.io/docs/language/syntax/configuration.html"&gt;HashiCorp Configuration Language (HCL)&lt;/a&gt;. The provider itself contains a healthy collection of acceptance tests, but I often still write some of my own HCL to verify use cases and make sure bug fixes address specific issues raised by users.&lt;/p&gt;

&lt;p&gt;To create these Terraform definitions I commonly write the HCL by hand. However, this can get tedious if I need to create, say, 150 of the same resource to test &lt;a href="https://developer.pagerduty.com/docs/rest-api-v2/pagination/"&gt;pagination&lt;/a&gt; coming from the &lt;a href="https://developer.pagerduty.com/api-reference/"&gt;PagerDuty API&lt;/a&gt;. Historically, I used a Python script that verbosely wrote out the HCL syntax like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;createService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;tf_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"resource &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;pagerduty_service&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; {&lt;/span&gt;&lt;span class="se"&gt;\n\
&lt;/span&gt;&lt;span class="s"&gt;    name = &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\"\n\
&lt;/span&gt;&lt;span class="s"&gt;    escalation_policy = pagerduty_escalation_policy."&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;".id &lt;/span&gt;&lt;span class="se"&gt;\n\
&lt;/span&gt;&lt;span class="s"&gt;    alert_creation = &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;create_alerts_and_incidents&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="se"&gt;\n\
&lt;/span&gt;&lt;span class="s"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;

    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tf_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions like this &lt;code&gt;createService&lt;/code&gt; above would be written for each resource and put inside of a loop to generate the HCL resource blocks that were needed for the definition. Honestly, this method worked fine for me. At least it did until I wondered if Go provided a better way. That's when I discovered the &lt;a href="https://pkg.go.dev/github.com/hashicorp/hcl/v2/hclwrite"&gt;hclwrite&lt;/a&gt; package from HashiCorp.   &lt;/p&gt;

&lt;p&gt;The project documentation describes hclwrite as a package that, "deals with the problem of generating HCL configuration and of making specific surgical changes to existing HCL configurations." This turned out to be exactly the package I needed. Rather than writing out HCL syntax by hand the hclwrite package would do that for me while I just called functions to create the objects. &lt;/p&gt;

&lt;p&gt;This article will help you get started with the hclwrite package by walking you through how I used it to generate a Terraform configuration for creating 150 Business Services in PagerDuty. I'll step through some of the concepts I struggled with and wished there were more examples of.&lt;/p&gt;

&lt;p&gt;The hclwrite package is imported from &lt;code&gt;github.com/hashicorp/hcl/hclwrite&lt;/code&gt;. This tripped me up a bit, partly because I'm still relatively new to Go and partly because the path to the package listed in the documentation is slightly different. For the rest of you also new to Go, your imports should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/hashicorp/hcl/hclwrite"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/zclconf/go-cty/cty"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice another import for the &lt;a href="https://pkg.go.dev/github.com/zclconf/go-cty/cty"&gt;go-cty&lt;/a&gt; package. This package (pronounced see-tie) provides some infrastructure for a type system that might be useful for applications that need to represent configuration values. You'll see it used throughout the examples when setting types to attribute values.&lt;/p&gt;

&lt;p&gt;To get things started you'll need to create two different types of file objects. One for hclwrite and another for the filesystem. This can be done with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// create new empty hcl file object&lt;/span&gt;
&lt;span class="n"&gt;hclFile&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;hclwrite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewEmptyFile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;// create new file on system&lt;/span&gt;
&lt;span class="n"&gt;tfFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bservelist.tf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;// initialize the body of the new file object&lt;/span&gt;
&lt;span class="n"&gt;rootBody&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;hclFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content of every object in hclwrite is stored in a body object. To add or append anything to an object you'll need to reference its body. In the code above you see that we named the body of the HCL document object &lt;code&gt;rootBody&lt;/code&gt;. The first thing we need to do with &lt;code&gt;rootBody&lt;/code&gt; is set up the &lt;code&gt;provider&lt;/code&gt; block for the &lt;a href="https://registry.terraform.io/providers/PagerDuty/pagerduty/latest/docs"&gt;PagerDuty provider&lt;/a&gt;. The HCL for this block looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"pagerduty"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"yeahRightN0tgo1ng2t3llyOuTh@t"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Constructing this block using the &lt;code&gt;hclwrite&lt;/code&gt; package requires the &lt;a href="https://pkg.go.dev/github.com/hashicorp/hcl/v2/hclwrite#Body.AppendNewBlock"&gt;AppendNewBlock&lt;/a&gt; function which is expecting two arguments. First is a string which will set the type of block and the second argument is an array of strings that act as labels for the block. In the case of this &lt;code&gt;provider&lt;/code&gt; block we want to set the label simply as &lt;code&gt;pagerduty&lt;/code&gt;. That would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rootBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendNewBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"provider"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"pagerduty"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside this block we need to set a &lt;code&gt;token&lt;/code&gt; attribute to the value of a PagerDuty API Key. Remember, the attribute needs to be added to the body of the block. So, we'll first set that body value to the &lt;code&gt;providerBody&lt;/code&gt; variable and then call &lt;a href="https://pkg.go.dev/github.com/hashicorp/hcl/v2/hclwrite#Body.SetAttributeValue"&gt;SetAttributeValue&lt;/a&gt;, passing the label and value of the attribute as arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;providerBody&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;providerBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttributeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;cty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PAGERDUTY_TOKEN"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next block we are going to create is the &lt;code&gt;terraform&lt;/code&gt; block where we define which providers we're going to use and the versions of those providers. What's interesting about these definitions is they require two nested blocks that don't have any labels. The &lt;code&gt;AppendNewBlock&lt;/code&gt; function handles his by accepting a &lt;code&gt;nil&lt;/code&gt; argument for the labels. Creating the two blocks looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;tfBlock&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rootBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendNewBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"terraform"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tfBlockBody&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tfBlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;reqProvsBlock&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tfBlockBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendNewBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"required_providers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;reqProvsBlockBody&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;reqProvsBlock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;code&gt;required_providers&lt;/code&gt; block we need to define an attribute called &lt;code&gt;pagerduty&lt;/code&gt; that contains a value of an object with two key-value pairs as fields. This is done by setting the value to a &lt;code&gt;cty.ObjectVal&lt;/code&gt; as a map.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;reqProvsBlockBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttributeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"pagerduty"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;cty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ObjectVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;cty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"source"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;cty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PagerDuty/pagerduty"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1.10.1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The generated HCL for this code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;terraform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;required_providers&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pagerduty&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"PagerDuty/pagerduty"&lt;/span&gt;
      &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1.10.1"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to start creating actual resources. Remember, our task was to create 150 Business Services. In HCL, a resource block is just like the other block types we've created. The main difference is resource blocks contain multiple labels. In this case, each resource block contains the &lt;code&gt;pagerduty_business_service&lt;/code&gt; label for the resource type  along with the identifier label for the resource. Because we only care about creating a whole lot of Business Services it doesn't matter what they're named. So, we're just going to use the index &lt;code&gt;i&lt;/code&gt; from our loop to put a number variable into each Business Service name. For example, the name of the first Business Service will be "Business Service 1". The code for creating those resource blocks looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;bs&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rootBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendNewBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"resource"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"pagerduty_business_service"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bs%v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="n"&gt;bsBody&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;bsBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetAttributeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;cty&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Business Service %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;rootBody&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendNewline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the looping is done, and the HCL for all 150 Business Service definitions has been generated, the last thing to do is to write all the definitions out to a &lt;code&gt;.tf&lt;/code&gt; file. There are a few ways to do this. I went for the way I was most familiar with, where I wrote the bytes from the &lt;code&gt;hclwrite&lt;/code&gt; file object to the &lt;code&gt;tfFile&lt;/code&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;tfFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. You should be able to run the configurations in the &lt;code&gt;.tf&lt;/code&gt; file you created and populated. To see all the code used in these examples checkout the &lt;a href="https://github.com/stmcallister/create-terraform-files-go"&gt;Create Terraform Files in Go&lt;/a&gt; project over on GitHub. This was also only an introduction to the &lt;code&gt;hclwrite&lt;/code&gt; package. Go see the &lt;a href="https://pkg.go.dev/github.com/hashicorp/hcl/v2@v2.10.1/hclwrite"&gt;hclwrite documentation&lt;/a&gt; to see all the available functions.&lt;/p&gt;

</description>
      <category>go</category>
      <category>terraform</category>
    </item>
    <item>
      <title>Eastern Europe Software Development Outsourcing: Is It a Good Idea in 2021?</title>
      <author>AscendixTech</author>
      <pubDate>Wed, 18 Aug 2021 07:49:03 +0000</pubDate>
      <link>https://dev.to/ascendixtech/eastern-europe-software-development-outsourcing-is-it-a-good-idea-in-2021-2pko</link>
      <guid>https://dev.to/ascendixtech/eastern-europe-software-development-outsourcing-is-it-a-good-idea-in-2021-2pko</guid>
      <description>&lt;p&gt;&lt;em&gt;The article was originally published on &lt;a href="https://ascendixtech.com/eastern-europe-software-development-outsourcing/"&gt;Ascendix Tech' blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eastern Europe software development outsourcing has become a strong market rival for most top outsourcing locations like the Philippines, India, and Argentina. &lt;/p&gt;

&lt;p&gt;There are lots of reasons like a mind-boggling IT ecosystem growth, reasonable rates, a large talent pool, high English proficiency level, suitable time overlapping, and solid technical background. &lt;/p&gt;

&lt;p&gt;However, this also complicates the understanding of the key Eastern Europe software development locations, their differences, benefits, drawbacks, and factors that should impact your final decision on what outsourcing company to choose. &lt;/p&gt;

&lt;p&gt;All these issues motivated us to prepare and share an overlook of the outsourcing IT Eastern Europe market with the key numbers, statistics, average developer hourly rates, and current trends in 2021. &lt;/p&gt;

&lt;p&gt;Let‚Äôs get started with the market overview of outsourcing in Europe. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outsourcing-in-europe-market-overview-2021"&gt;
  &lt;/a&gt;
  Outsourcing in Europe: Market Overview 2021
&lt;/h2&gt;

&lt;p&gt;As we‚Äôve already stated, the current Eastern Europe software development outsourcing market is booming and growing at a mind-blowing pace. &lt;/p&gt;

&lt;p&gt;Before we start looking through the statistics and numbers, it‚Äôs worth mentioning that we‚Äôve chosen Ukraine, Poland, Belarus, and Romania as the key Eastern Europe software outsourcing locations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ukraine"&gt;
  &lt;/a&gt;
  Ukraine
&lt;/h3&gt;

&lt;p&gt;Ukraine is among the leading Eastern Europe software development outsourcing countries building world-class software products for the following locations: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The US companies make up to 50% of software development requests &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great Britain companies make up to 30% &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Western European countries (NL, LU, CH, AU, BE, NO, SE, DN, etc.) make up to 20%. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to &lt;strong&gt;IT Ukraine Association Report 2021&lt;/strong&gt;, the IT industry in Ukraine has overpassed $5 bln in 2020 compared to $4,1 bln in 2019. &lt;/p&gt;

&lt;p&gt;Below you can see the Ukrainian IT Market overlook, 2016-2025 (estimated).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--te2_QRKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xybxycq368o33wq8351k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--te2_QRKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xybxycq368o33wq8351k.png" alt="ukraine-it-services-market-overlook-2016-2025"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Among the core benefits of IT outsourcing to Ukraine is the ever-growing number of technical specialists and tech graduates yearly providing a large talent pool. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beetroot‚Äôs 2021 Report&lt;/strong&gt; states that Ukraine has overpassed 200,000 IT specialists and 36,000 tech graduates in 2021. &lt;/p&gt;

&lt;p&gt;So, Eastern Europe software development outsourcing to Ukraine is a great option for your business to surely find an experienced team of tech specialists with the technical background required to transform your project idea into a top-tier technology solution. &lt;/p&gt;

&lt;p&gt;Right here you can review the core numbers about the Ukrainian IT market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3f8NyH1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjdqln8f4gyt9pbwmuw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3f8NyH1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjdqln8f4gyt9pbwmuw6.png" alt="Key-Statistics-on-the-Ukrainian-IT-Market"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, Ukraine offers a high price-quality relationship through providing reasonable rates and wide range of IT professionals. &lt;/p&gt;

&lt;p&gt;For instance, $25-$50 are the average Ukraine outsourcing rates while $55-$150 are the average US rates for the same technical expertise. &lt;/p&gt;

&lt;p&gt;PayScale states that the average software developer salary in Ukraine is about $2,250 while US-based IT professionals get paid $4,500 per month in average. &lt;/p&gt;

&lt;p&gt;The below chart vividly demonstrates the median IT salary in Ukraine by seniority level in USD. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qe4UDNh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwy0uootfh6iutythaf9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qe4UDNh3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwy0uootfh6iutythaf9.png" alt="Median-IT-salary-by-seniority-level-in-Ukraine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from affordable financial conditions, Ukraine has become a popular R&amp;amp;D hub for world-class companies that have set up their offices in Kyiv, Kharkiv, Odesa, Lviv, and Dnepr. &lt;/p&gt;

&lt;p&gt;Below you can see the list of the world-known companies with R&amp;amp;D offices in Ukraine. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nnoDKCwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmwiu863tuq6ogvt3lo9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nnoDKCwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmwiu863tuq6ogvt3lo9.png" alt="Global-Famous-Companies-with-RD-Offices-in-Ukraine"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Besides, Ukraine has become an investment-intensive tech location for many startups and product-first companies. &lt;/p&gt;

&lt;p&gt;The leading Ukraine-based tech startups with successful stories are GitLab, Grammarly, People.ai, Reface, and Restream. Right here you can look through their acquired funds during the last investment rounds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHrtMM0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcfyhdfz7foagwhww3zy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHrtMM0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcfyhdfz7foagwhww3zy.png" alt="Top-Ukraine-Based-Successful-Tech-Startups"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#poland"&gt;
  &lt;/a&gt;
  Poland
&lt;/h3&gt;

&lt;p&gt;Poland has become one of the most popular Eastern Europe software development outsourcing locations offering 430,000 IT professionals and approximately 30,000 tech graduates in 2021. &lt;/p&gt;

&lt;p&gt;Considering the Polish IT market growth, it was valued at $4.65 bln in 2019 and it only tends to grow. Statista predicts reaching the level of $12.4 bln in 2021 including IT services, software development, and IT equipment. &lt;/p&gt;

&lt;p&gt;Interestingly, only 34% of half a million IT experts work for the Poland-based IT companies while other 66% are employed by foreign companies. &lt;/p&gt;

&lt;p&gt;NoFluttJobs Research 2020 states that the median IT salaries by seniority level in Poland is the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Junior&lt;/strong&gt;: $1,000-$1,800 &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Middle&lt;/strong&gt;: $2,400-$3,700 &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Senior&lt;/strong&gt;: $4,200-$5,300. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hmZTiR29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv3f9jy2ebmfgqf4pq39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hmZTiR29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bv3f9jy2ebmfgqf4pq39.png" alt="Poland IT Industry Look-Through 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eastern Europe software development outsourcing to Poland has become a great choice for such world-known companies as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dell EMC &lt;/li&gt;
&lt;li&gt;HP Inc &lt;/li&gt;
&lt;li&gt;Lenovo
&lt;/li&gt;
&lt;li&gt;Microsoft &lt;/li&gt;
&lt;li&gt;IBM Polska &lt;/li&gt;
&lt;li&gt;Intel &lt;/li&gt;
&lt;li&gt;Apple &lt;/li&gt;
&lt;li&gt;Cisco &lt;/li&gt;
&lt;li&gt;Oracle &lt;/li&gt;
&lt;li&gt;Google. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides, many top-tier corporations have invested significant funds into the Polish IT market growth during the last several years. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dflZsUdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f20xlo4raduf9rodh7en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dflZsUdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f20xlo4raduf9rodh7en.png" alt="Top-Tier Corporations Investments in Poland"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, the leading Polish product-first companies and tech startups are DocPlanner, Brainly, Booksy, Kontakt.io, SALESmanago, and Synerise. &lt;/p&gt;

&lt;p&gt;Below you can see some of their market values, raised funds, and current market valuations: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ted4zqHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n60sk1ioghuto2jptcrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ted4zqHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n60sk1ioghuto2jptcrv.png" alt="Leading Polish Tech Startups and Their Numbers"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#romania"&gt;
  &lt;/a&gt;
  Romania
&lt;/h3&gt;

&lt;p&gt;Romania is an emerging dark horse among the Eastern Europe software development outsourcing locations providing 120,000 tech specialists in 2021. &lt;/p&gt;

&lt;p&gt;The country has significantly invested in and grown its IT industry for the recent years due to high quality of technical education, powerful communication capabilities, affordable rates, and rapid-growing IT ecosystem.  &lt;/p&gt;

&lt;p&gt;Romania Insider stated that the IT industry market overpassed $7 bln in 2019 with a capital distribution of 27% to 73% on behalf of foreign investments. &lt;/p&gt;

&lt;p&gt;Despite the positive trends, Romania needs to provide 300,000 more tech specialists to meet the current IT market demand and fill in the vacancies according to OfficeRentInfo. &lt;/p&gt;

&lt;p&gt;Considering the average hourly developer rates, Romanian tech companies mostly charge $25-$49/h along with top vendors charging over $50/h. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIt3bQi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbz93r4uuao0i963qb07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIt3bQi3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbz93r4uuao0i963qb07.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to IT Outsourcing Review, the Romanian median IT salaries by seniority level are as follows: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Junior&lt;/strong&gt;: ~ $1045/month &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Middle&lt;/strong&gt;: ~ $1815/month &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Senior&lt;/strong&gt;: ~ $2750/month. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even though the Romanian IT industry is too small to compete with Poland and Ukraine, Eastern Europe software development outsourcing to Romania still offers such advantages as a multilingual nature. &lt;/p&gt;

&lt;p&gt;Precisely, 17% of IT specialists have upper-intermediate proficiency level of English, over 10% speak Hungarian and French fluently, approximately 5% have strong skills in Italian, and about 3% know German. &lt;/p&gt;

&lt;p&gt;Besides, Romania offers beneficial legal restrictions including: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No profit tax for reinvested profit in new technological equipment &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No income tax for employees working as software developers and hired in R&amp;amp;D labs &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No income tax for R&amp;amp;D companies during the first 10 years. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering the startup ecosystem growth, Romania is featured as the #45 in the Global Startup Rankings with the following numbers: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1,500+ startups, VCs, and business angels &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;100+ accelerators and incubators &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;100+ active investors network. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs now briefly discuss the top Romania-based tech startups and their funding: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbI_U3km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kze2thxeqb93fz17s7yj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbI_U3km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kze2thxeqb93fz17s7yj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#belarus"&gt;
  &lt;/a&gt;
  Belarus
&lt;/h3&gt;

&lt;p&gt;Belarus has become a long-held Eastern Europe software development outsourcing location with more than 55,000 tech specialists and &amp;gt;300 IT companies. &lt;/p&gt;

&lt;p&gt;The State of European Tech 2019 states that the Belarussian IT services export reached the level fo $3.1 bln in 2019 compared to $4.5 bln in Ukraine. &lt;/p&gt;

&lt;p&gt;The IT Outsourcing Review provides the following average software developer salaries by seniority level: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Junior&lt;/strong&gt;: $900 &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Middle&lt;/strong&gt;: $1,700 &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Senior&lt;/strong&gt;: $2,600 &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Team Lead&lt;/strong&gt;: $3,600. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--teC45o4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjtk99cr1rftfqflst82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--teC45o4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjtk99cr1rftfqflst82.png" alt="Belarus IT Industry Overlook 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from reasonable rates, Belarus has one of the world‚Äôs highest literacy levels with 91% global aveage among the youngest generations by UNICEF. &lt;/p&gt;

&lt;p&gt;This means that most software engineers and tech specialists from Belarus are highly educated having 2 HE universities included in the QS World University Rankings 2020. &lt;/p&gt;

&lt;p&gt;Lots of world-class companies are outsourcing software development to Eastern Europe and Belarus by establishing R&amp;amp;D offices there.  &lt;/p&gt;

&lt;p&gt;Specifically, Viber, Fitbit, IHS, Playtika, Yandex, and WorkFusion are among the top-tier companies investing much funds in Belarus IT outsourcing. &lt;/p&gt;

&lt;p&gt;Let‚Äôs now look through the Belarus-based product-first companies and tech startups: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3LAITja3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbk0252k3dge0rjbcnki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3LAITja3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mbk0252k3dge0rjbcnki.png" alt="Belarus-based product-first companies and tech startups"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides, many world-class companies have been actively investing in Belarus IT outsourcing by acquiring local Belarus-based startups: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook acquired Masquerade for $1 mln in 2016. &lt;/li&gt;
&lt;li&gt;Google bought AI Matter, a Belarussian AI startup, in 2017 &lt;/li&gt;
&lt;li&gt;Microsoft invested an undisclosed amount into PandaDoc, a Belarussian document automation startup, in 2017. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It‚Äôs worth mentioning, that political situation in 2020 forced over 2,000 software developers and over 50 IT companies to relocate to Ukraine and continue their operating activities due to the Internet connection restrictions and an unattractive investment environment. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;We hope our Eastern Europe software development outsourcing overlook will help you get a better understanding of the current market conditions, each country's statistics, and the reasons of becoming one of the most profitable business practice in 2021.&lt;/p&gt;

&lt;p&gt;If you want to learn more details and statistics, check the full blog post &lt;strong&gt;&lt;a href="https://ascendixtech.com/eastern-europe-software-development-outsourcing/"&gt;Eastern Europe Software Development Outsourcing Overlook in 2021&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>startup</category>
      <category>todayilearned</category>
      <category>writing</category>
    </item>
  </channel>
</rss>
