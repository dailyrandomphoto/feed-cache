<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Is Remote Work better than In-Office for Developers? </title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 27 Aug 2021 15:56:09 +0000</pubDate>
      <link>https://dev.to/linearb/is-remote-work-better-than-in-office-for-developers-43ha</link>
      <guid>https://dev.to/linearb/is-remote-work-better-than-in-office-for-developers-43ha</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for the Dev Interrupted by Krzysztof Waraksa, an active and participating member of the Dev Interrupted Discord.&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
In the past year-and-a-half, going remote has been the primary goal and focus for many companies and individuals. The beginning of the remote work overhaul was rocky to say the least but now that all this time has passed and workplaces have figured out how to work with it and not make it an utter mess- Is it worth keeping? Is it better than being in-office? Should remote work be a standard for dev teams, and in-office be secondary?&lt;/p&gt;

&lt;p&gt;Well, that depends on a couple of factors. With some feedback from the Dev Interrupted Discord community, let’s dive into the advantages and disadvantages of remote work.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-disadvantages"&gt;
  &lt;/a&gt;
  The Disadvantages
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Team bonding is difficult&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“It’s not impossible or anything, but I’ve found it’s so unbelievably easy to bond with a team in person doing regular lunches and such. (…) I miss being able to see someone frustrated or struggling with something and walking over to them with a couple other people and saying “let’s head to lunch and clear our heads.” You build bonds very quickly when you do demonstrable human things to reduce someone’s stress.” — Discord User The Panda#2143&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Jumping off from what The Panda said, the first major disadvantage that many people will voice is a lack of genuine team bonding when your team is fully remote. It requires much more active effort to bond with your teammates over Zoom. Being around another person naturally speeds up the bonding process much more than occasionally messaging someone because you need something.&lt;/p&gt;

&lt;p&gt;When working remote, your team needs to be intentional about team bonding. An excellent way of maintaining some form of social bonding is to have a weekly meeting where you can just sit down and chat with your colleagues, talk about what you did on the weekend, maybe occasionally host a “show and tell” of your own. Figure out what fun little trinkets your colleagues collect! Another popular weekly meeting idea are &lt;a href="https://www.techrepublic.com/article/how-to-successfully-work-remotely-in-an-engineering-organization/"&gt;“coffee talks” &lt;/a&gt;, which are informal breakout rooms hosted on Zoom that can be hopped into or out of at will.&lt;/p&gt;

&lt;p&gt;Team leaders also need to be sure to regularly schedule fun events — whether in person or online — to bond team members. This could be a happy hour where everyone gets shipped a cocktail kit and makes them together, or a digital magic show, an in-person meet up, or something else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xhf7Vvx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AgX17Zteb10o0bYCe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xhf7Vvx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AgX17Zteb10o0bYCe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Call Dread&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, it is just the most inconvenient thing to be forced to have to sit around in a conference call several times a day to get things done. Text is confusing, unclear. But you have to discuss things somehow, so you end up calling. And calling. And calling- is it just me or is it simply exhausting to sit around with the “important work meeting” looming overhead in between everything you do? Even many industry leaders and remote work proponents discuss what they often refer to as “Zoom fatigue.” In a recent &lt;a href="https://devinterrupted.com/video/the-new-leaders-of-remote-engineering-panel/"&gt;remote work panel hosted by LinearB &lt;/a&gt;, video call dread was highlighted as a major downside of remote work.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“My kid’s school over the last year has been trying to keep us involved, and one of the ways they’ve done that is booking these Zoom sessions in the evening. I notice when I get [to the meeting] I just don’t want to be there. I’ve been on video all day long.” — Lawrence Mandel, Director of Engineering at Shopify&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the biggest appeals of remote work is that you have so much freedom to do things on your own time and create focus time, but it is nearly impossible to feel comfortable doing a different activity for a while when you’re still in “work mode”.&lt;/p&gt;

&lt;p&gt;So while in reality you do focused work for 4–5 hours, mentally you’re still working the whole 8–9 hours. The meetings and work you do aren’t consecutive and are instead the equivalent of a car starting and stopping in a traffic jam. Every hour or two, you have to sit up and move .5 metres before you sit around and do something else again. It gets exhausting.&lt;/p&gt;

&lt;p&gt;Despite everything, remote work is still built around the idea of being in an office for nearly half the day. Which really shouldn’t be a surprise, as remote work was never about changing the working hours, but the expectation often comes with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of printer access.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, Really, this isn’t the biggest disadvantage but it’s something that I, as a young man under the age of thirty, found highly amusing. I can guarantee that a majority of people today just don’t own a printer. And that makes sense, you generally don’t have to print a lot these days! Though, in many cases, having an on-paper copy of a digital file is reassuring to have. (At least for me, I prefer having paper copies of important documents over a file on my desktop!) If you’re going to be working remotely, you may have to invest in a printer. Or hope there’s a copy-shop near you. You really don’t realize how convenient having a printer at work can be until you’re forced to work from home.&lt;/p&gt;

&lt;p&gt;You’ll also likely be forced to learn the true cost of printer ink if you haven’t already. Oh dear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The commute was a benefit!?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I miss my commute. It was a 10–20 minute bike ride depending on the route and the weather. I would do it year round in a winter climate, and I always was very happy about the forced fresh air in the winter. The idea of jumping on a bike in subzero snowy weather seems terrible until you’re out there, so it made the fresh air and exercise happen.” — Discord User ParksideBrad#9930&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For many people, the commute is a huge issue. Especially if you have to drive a car, or take public transport. In cases like those, getting to work remotely and avoiding that mess is great!&lt;/p&gt;

&lt;p&gt;To some hardy souls like ParksideBrad, the commute was actually a beneficial and nice thing. Either way, losing that two-birds-one-stone manner of exercising and getting to work can be a noticeable hit to your daily schedule. While this can be solved by just exercising on your own time- it’s harder to have to intentionally build that into your routine. It’s hard to exercise without reason ( &lt;a href="https://www.verywellfit.com/why-arent-you-motivated-to-exercise-1231389"&gt;“Getting healthier” isn’t really the best motivator for many, even if it’s important. &lt;/a&gt;), so using “Going from point A to point B while exercising” as a manner of getting that important movement in is a very valid way of keeping yourself healthy mentally and physically.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-advantages"&gt;
  &lt;/a&gt;
  The Advantages
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;No commute? Perfect! (Sorry, cyclists!)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alright, so sure, I did just write that the commute could be a benefit for those that like to exercise. But really, for a majority of people it was always a pain. Getting an extra hour to yourself in the morning is a significant bonus as you don’t feel the need to rush yourself out of bed to avoid any traffic. And getting extra time to yourself just throughout the day? Honestly, the following words by some of our community members emphasize how much better a lack of a commute is for many people:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“With no commute and no office tying me down, it’s easy to work from just about anywhere the internet exists. This facilitates living in new places, experiencing new things — which is amazing! — Discord user NobilityPNW#7631&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“One big disadvantage of Remote Work: avoiding commute times! I do not miss commuting at all! I save a ton of time that I can use for work or for work/life balance and necessary tasks. I’m also significantly more flexible.” — Discord User Conor#3700&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More hours in the day are dedicated to &lt;em&gt;you&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your 24 hours in the day are not the same as Beyoncé.&lt;/p&gt;

&lt;p&gt;This is a sentence that often gets thrown around in the following way: &lt;em&gt;“You have the same 24 hours in the day like [insert celebrity or billionaire here]”&lt;/em&gt;. Sure, you both have 24 hours to do everything in the day. But the allocation of those hours is vastly different. Because unlike Beyoncé, you can’t hire people to do your cooking, laundry, cleaning, etc, for you. You don’t get to leave all the painstakingly long chores and commutes to others.&lt;/p&gt;

&lt;p&gt;But thanks to remote work, a lot of these things get a little less bad. Sure, you’re still working at home, but you can take breaks. You can control your activity, your time. You decide if you want to go take a brief pause to play a short game with your kids, or if you want to have a coffee with your partner. You get a chance to spend more time with your home social groups, your family, your loved ones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I was on a call with Dan Lines recently talking about Linear B and my 6 year old came into the room and attacked me with a nerf sword. It was short lived, not terribly disruptive, but it felt good to me knowing he had access when he needed it (I survived unscathed). For most of his life I was gone 60–80 hours a week or traveling around the country. Since we went fully remote, we are very close and he feels sad if I have to go downtown for the odd meeting once a month. It has changed our family for the better and when I feel a stronger connection to my family and like their needs are being met, I can focus all my excess energy on whatever I want.” — Discord User The Panda#2143&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You finally get a printer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have a reason to buy a printer. Hopefully it’ll last you for the next two decades at minimum. May the prices of ink cartridges remain low for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The flexibility of work-locations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHr674Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2A6bXZp3TWbYy464Ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHr674Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2A6bXZp3TWbYy464Ye.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being able to work wherever at any point in your workday is an incredible advantage, especially if you struggle to stay focused being in an office environment. Having the chance to get away from the “ADHD poison” that noisy offices often are… Sitting at a quiet cafe in the park, or working from the couch at home with your beloved cat purring away, it all makes for a much better environment. And then being able to change that on a whim when you decide you’re no longer comfortable? Even better. &lt;a href="https://devinterrupted.com/adhd-in-the-workplace-3-ways-you-can-help/"&gt;After all, this is the easiest way for a company to support employees that may need a calmer environment to work in.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this isn’t even just about being comfortable- it also means that if there are any issues you’re having in your home (such as construction), or your internet is down, you can still stay in touch by being able to connect anywhere else. Rather than having a whole office-outage take out several hours (or potentially, days) of work because something went wrong with the network or power.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Allowing for remote work makes you disability-friendly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not just for people who are disabled that apply for the job, but also for those that may become disabled during their time working in your teams. Unfortunately, life isn’t perfect, and a sudden health issue could turn out to heavily impair your wellbeing. Before remote work was standardized, if you could no longer go into work on a daily basis you would most likely end up having to quit your job. But now, maybe you can still work with your disability as long as you’re at home. Or as long as you can take frequent breaks, which are made far easier in the comfort of your own home.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Conclusion&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;There’s certainly more advantages to remote work compared to the disadvantages, but this is a case where the disadvantages shouldn’t be left unaddressed.&lt;/p&gt;

&lt;p&gt;The disadvantages often fall into real problems that have some half-solutions. But honestly? The best solution might be to reduce the amount of in-office days, and have an option and support for full remote for those that need it. Most people would be happy to go into the office for just a few days a week while staying remote for the rest. And let’s not forget that this’d be the perfect way to allow people to continue wasting printer ink at the office instead of having to invest in their own.&lt;/p&gt;

&lt;p&gt;In the end, you must admit that giving employees agency over their hours tends to leave them happier and with a more positive outlook on their jobs.&lt;/p&gt;

&lt;p&gt;Consider checking out Shweta Saraf’s thoughts on the topic of remote first, and not remote friendly, in the video below!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ovJ5hkUGO4U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/devinterrupted"&gt;&lt;strong&gt;Liked this topic? Have anything you’d like to add? Join our discussions in the Dev Interrupted Discord today!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2esj52Mx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ad8w3ALr6Ybm4tvxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2esj52Mx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ad8w3ALr6Ybm4tvxt.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT:&lt;/strong&gt; An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/is-remote-work-better-than-in-office-for-developers/"&gt;https://devinterrupted.com&lt;/a&gt; on August 25, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>devops</category>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>How to combine Rails's Ajax support and Stimulus</title>
      <author>rhymes</author>
      <pubDate>Fri, 27 Aug 2021 15:03:18 +0000</pubDate>
      <link>https://dev.to/devteam/how-to-combine-rails-s-ajax-support-and-stimulus-3729</link>
      <guid>https://dev.to/devteam/how-to-combine-rails-s-ajax-support-and-stimulus-3729</guid>
      <description>&lt;p&gt;In this post I'm going to explain how we are exploring adding snappier SPA-like interactivity to the Admin and what we've learned so far. I am using the word "exploring" because this is ongoing work, that is not visible yet in Forems, so it many or may not reflect the final version but I think there are useful lessons to be learned nonetheless.&lt;/p&gt;

&lt;p&gt;I'm going to assume you're familiar with &lt;a href="https://rubyonrails.org/"&gt;Ruby on Rails&lt;/a&gt;, &lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt; and the concept of &lt;a href="https://en.wikipedia.org/wiki/Component-based_software_engineering"&gt;componentization&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-we-wanted-to-accomplish"&gt;
  &lt;/a&gt;
  What we wanted to accomplish
&lt;/h2&gt;

&lt;p&gt;Let's start with a video demo:&lt;/p&gt;



&lt;p&gt;The goal here is to give the user a perception of interactivity, and we want to do that without unleashing a full client side single page application. Forem's Admin interface is mostly server rendered and we wanted to explore a path to progressively enhance the experience, stopping short of a rewrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-status-of-the-current-admin"&gt;
  &lt;/a&gt;
  What's the status of the current Admin?
&lt;/h2&gt;

&lt;p&gt;Currently the Admin, on the backend, is a custom made collection of Rails controllers, for all intents and purposes a part of the Forem core app. It's not an external web app, it's also not generated by a third party gem. We think the Forem Creator (and their merry band of collaborators) experience is paramount and it has evolved from DEV's needs to now the larger Forem ecosystem's.&lt;/p&gt;

&lt;p&gt;Being a custom app, grown over the years, it's admittedly a mix of technologies that we're trying to streamline, hence the need for some good old exploratory software development. On the frontend it currently uses: jQuery, Bootstrap, vanilla JS, Stimulus, Preact, a few web components and our custom &lt;a href="https://storybook.forem.com/"&gt;Crayons design language&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-did-we-explore-an-alternative"&gt;
  &lt;/a&gt;
  Why did we explore an alternative?
&lt;/h2&gt;

&lt;p&gt;The end goal is to reduce that to Crayons, Stimulus and use Preact or Web Components when absolutely needed, to foster a nimbler architecture, with reuse between the "frontoffice" website and the admin, where possible.&lt;/p&gt;

&lt;p&gt;After discussing this with the team I set out to investigate the following assumption (not a direct quote): &lt;em&gt;"We want users actions to be interactive, minimizing page reloads, and because of that we're going to send blocks of server rendered HTML to them by injecting the markup into the page".&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If this sounds like a barebones version of notable frameworks like Elixir's &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html"&gt;Phoenix LiveView&lt;/a&gt;, Rails's &lt;a href="https://github.com/stimulusreflex/stimulus_reflex"&gt;StimulusReflex&lt;/a&gt; or &lt;a href="https://turbo.hotwired.dev/"&gt;Hotwire Turbo&lt;/a&gt;, PHP's &lt;a href="https://laravel-livewire.com/"&gt;LiveWire&lt;/a&gt;, Django's &lt;a href="https://github.com/edelvalle/reactor"&gt;Reactor&lt;/a&gt;... well, you're right! (Bonus: my colleague &lt;a class="mentioned-user" href="https://dev.to/jgaskins"&gt;@jgaskins&lt;/a&gt;
 built a &lt;a href="https://github.com/jgaskins/live_view"&gt;LiveView clone for Crystal&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;You can sense a pattern in these frameworks, and the demand they fulfill.&lt;/p&gt;

&lt;p&gt;In our case, though, we used none of them. I wanted to explore how far we could go without adding a whole framework and by using the tools we had a bit more in depth. This to lessen the cognitive load on anyone that's going to further this exploration or adopt this pattern for the Admin as a whole.&lt;/p&gt;

&lt;p&gt;Aside from the obvious "why should I need a framework to send basic HTML to the client", we have plenty of frameworks and libraries on the client side already and frameworks usually take quite a while to be learned. Also, we're a small team.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;this is how I implented it&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Rails and HTML on the server side with a bit of JSON when needed. I cheated a bit the constraints I set for myself using GitHub's &lt;a href="https://viewcomponent.org/"&gt;ViewComponent&lt;/a&gt; but you can achieve similar results using builtin Rails partials and this post isn't going into depth about ViewComponent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rails's &lt;a href="https://guides.rubyonrails.org/working_with_javascript_in_rails.html"&gt;UJS&lt;/a&gt; (Unobtrusive JavaScript) and &lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt; on the client side. UJS is a library builtin inside Rails that powers JavaScript interactions on the DOM via Rails special helpers, like &lt;code&gt;link_to&lt;/code&gt; or &lt;code&gt;button_to&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-all-fit-together"&gt;
  &lt;/a&gt;
  How does it all fit together?
&lt;/h2&gt;

&lt;p&gt;Let's start from the goal again: &lt;em&gt;a user clicks on a link, the client side sends a request to the server, some action is performed, some HTML is sent back, this HTML is injected in the page&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is what happens when the user clicks on one of the gray boxes for example:&lt;/p&gt;



&lt;p&gt;Clicking on "Emails", hits the &lt;code&gt;EmailsController&lt;/code&gt; which renders the &lt;code&gt;EmailsComponent&lt;/code&gt; (which, again, could just be a partial), the resulting HTML is sent to Stimulus which calls a JavaScript function injecting the HTML, thus finalizing the switch of the section.&lt;/p&gt;

&lt;p&gt;Let's look at the code, one step at a time:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initiating-the-contact-between-client-and-server"&gt;
  &lt;/a&gt;
  Initiating the contact between client and server
&lt;/h3&gt;

&lt;p&gt;This is how the gray box titled "Emails" is defined in Rails:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;admin_user_tools_emails_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;remote: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                 &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;action: &lt;/span&gt;&lt;span class="s2"&gt;"ajax:success-&amp;gt;user#replacePartial"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                                                 &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s2"&gt;"crayons-card box js-action"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"crayons-subtitle-3 mb-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Emails&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color-base-70"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;pluralize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@emails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"past email"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@emails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;verified&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; - Verified&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and this is an example of the resulting HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"crayons-card box js-action"&lt;/span&gt;
  &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/admin/users/13/tools/emails"&lt;/span&gt;
  &lt;span class="na"&gt;data-remote=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"ajax:success-&amp;gt;user#replacePartial"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"crayons-subtitle-3 mb-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Emails&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color-base-70"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 7 past emails &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a bit going on in such a small snippet of code, let's unpack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;href="/admin/users/13/tools/emails"&lt;/code&gt; identifies this as a regular HTML link, if I were to visit it with my browser I would get the same response JavaScript is going to be sent when the user activates the click.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;data-remote="true"&lt;/code&gt; (the result of &lt;code&gt;remote: true&lt;/code&gt; in Ruby) is how Rails determines if the link should be handled by Ajax or not. Rails calles these &lt;a href="https://guides.rubyonrails.org/working_with_javascript_in_rails.html#remote-elements"&gt;remote elements&lt;/a&gt;, they can be links, forms or buttons.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;data-action="ajax:success-&amp;gt;user#replacePartial"&lt;/code&gt; is how we connect Rails UJS&lt;br&gt;
and Stimulus together. &lt;code&gt;data-action&lt;/code&gt; is a &lt;a href="https://stimulus.hotwired.dev/reference/actions"&gt;Stimulus action&lt;/a&gt; (the description of how to handle an event), &lt;code&gt;ajax:success&lt;/code&gt; is a &lt;a href="https://guides.rubyonrails.org/working_with_javascript_in_rails.html#rails-ujs-event-handlers"&gt;custom event triggered by Rails UJS&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what it all translates to: &lt;em&gt;on initiating the click on link, let Rails UJS fetch the response via Ajax and, upon a successful response, handle the &lt;code&gt;ajax:success&lt;/code&gt; event via the method &lt;code&gt;replacePartial&lt;/code&gt; in the Stimulus &lt;code&gt;UserController&lt;/code&gt; class&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is a lot of behavior in a few lines. It reads like declarative programming with a good abstraction, working well if one wants to minimize the amount of custom JavaScript to write and thus needs to describe behavior directly in the templates :-)&lt;/p&gt;

&lt;p&gt;The resource the link points to is a regular HTML snippet, this is what one sees if visited manually:&lt;/p&gt;



&lt;p&gt;The great thing (in my opinion), is that the whole behavior in question still works in isolation: it's server side rendered, it redirects upon submission as it should by default, it is essentially a regular HTML form.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Being able to play with these components in isolation definitely speeds up development&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The whole section (which I called &lt;code&gt;ToolsComponent&lt;/code&gt; on the server) works&lt;br&gt;
in isolation:&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-happens-on-the-server-when-this-request-is-sent"&gt;
  &lt;/a&gt;
  What happens on the server when this request is sent?
&lt;/h3&gt;

&lt;p&gt;Once again, let's start from the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Admin&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Users&lt;/span&gt;
    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Tools&lt;/span&gt;
      &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EmailsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Admin&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ApplicationController&lt;/span&gt;
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
          &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

          &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="no"&gt;EmailsComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;user: &lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s2"&gt;"text/html"&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. We tell Rails not to embed the component (or partial) in a layout, we load the user object and we tell the framework to render the HTML sending it back to the client as HTML (this last tiny detail is important, as Rails's "remote mode" defaults to &lt;code&gt;text/javascript&lt;/code&gt; for the response, which is not very helpful to us in this case...).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-the-frontend-do-when-it-receives-the-html"&gt;
  &lt;/a&gt;
  What does the frontend do when it receives the HTML?
&lt;/h3&gt;

&lt;p&gt;Let's look at the code once again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"crayons-card box js-action"&lt;/span&gt;
  &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/admin/users/13/tools/emails"&lt;/span&gt;
  &lt;span class="na"&gt;data-remote=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
  &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"ajax:success-&amp;gt;user#replacePartial"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"crayons-subtitle-3 mb-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Emails&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color-base-70"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 7 past emails &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've instructed the app to trigger &lt;code&gt;replacePartial&lt;/code&gt; inside the Stimulus&lt;br&gt;
&lt;code&gt;UserController&lt;/code&gt;, this is what it does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;replacePartial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;js-action&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolsComponentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;announceChangedSectionToScreenReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;prevents the default behavior and stops propagation&lt;/li&gt;
&lt;li&gt;extracts the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;XMLHttpRequest&lt;/a&gt; injected by Rails&lt;/li&gt;
&lt;li&gt;hides the section we're looking at and shows the new one&lt;/li&gt;
&lt;li&gt;announces the change to the screen reader, as we are neither changing the URL nor doing a full page reload.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-did-we-make-this-accessible"&gt;
  &lt;/a&gt;
  How did we make this accessible?
&lt;/h3&gt;

&lt;p&gt;After discussing it with our resident accessibility guru, @suzanne, she suggested we use a "screen reader only" &lt;code&gt;aria-live&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"screen-reader-only"&lt;/span&gt;
  &lt;span class="na"&gt;data-user-target=&lt;/span&gt;&lt;span class="s"&gt;"activeSection"&lt;/span&gt;
  &lt;span class="na"&gt;aria-live=&lt;/span&gt;&lt;span class="s"&gt;"polite"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is managed by Stimulus, which at the end of the action, fetches the title of the new section, announces it to the screen reader and changes the focus so the section is ready to be used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap-so-far"&gt;
  &lt;/a&gt;
  Recap so far
&lt;/h2&gt;

&lt;p&gt;So far we've seen quite a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;using Rails builtin capabilities to connect client side code and the server side via Ajax but using server side HTML&lt;/li&gt;
&lt;li&gt;using Stimulus to listen in on the action and augment behavior as we see fit, keeping the code organized&lt;/li&gt;
&lt;li&gt;replacing a section of HTML with another, that's self contained in a component
that can be at least functional without JavaScript as well&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-send-an-email-with-rails-and-stimulus"&gt;
  &lt;/a&gt;
  How to send an email with Rails and Stimulus
&lt;/h2&gt;

&lt;p&gt;Here we're going to show how this "connection" works, using sending an email as an example.&lt;/p&gt;

&lt;p&gt;Let's start from the perspective of the user:&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-does-the-email-form-do"&gt;
  &lt;/a&gt;
  What does the email form do?
&lt;/h2&gt;

&lt;p&gt;Given we're in the domain of UJS and Stimulus combined, we have to look at how they are connected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"users--tools--ajax"&lt;/span&gt;
  &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"ajax:success@document-&amp;gt;users--tools--ajax#success ajax:error@document-&amp;gt;users--tools--ajax#error"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;

    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;form_with&lt;/span&gt; &lt;span class="ss"&gt;url: &lt;/span&gt;&lt;span class="n"&gt;send_email_admin_user_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;-%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our "Emails" section declares it needs a Stimulus controller named &lt;code&gt;AjaxController&lt;/code&gt; and that it's going to dispatch to it the Rails UJS events &lt;code&gt;ajax:success&lt;/code&gt; and &lt;code&gt;ajax:error&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the "Send Email" submit button is activated, Rails will send the form via Ajax to the server, which upon successful submission, will answer with data, in this case JSON.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happens-on-the-server"&gt;
  &lt;/a&gt;
  What happens on the server?
&lt;/h2&gt;

&lt;p&gt;Once again, code first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="c1"&gt;# email sent&lt;/span&gt;
  &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Email sent!"&lt;/span&gt;

    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;html&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:success&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
      &lt;span class="n"&gt;redirect_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;fallback_location: &lt;/span&gt;&lt;span class="n"&gt;admin_users_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;js&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;result: &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;content_type: &lt;/span&gt;&lt;span class="s2"&gt;"application/json"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the email is sent the server figures out if it was a regular form submission and thus invokes a redirect or if it was a submission via Ajax (our case), it sends back a feedback message in JSON.&lt;/p&gt;

&lt;p&gt;I am using JSON here because it fits well with the snackbar notifications, but we could send well styled HTML to inject for a richer interaction, same we did in the first part.&lt;/p&gt;

&lt;p&gt;Specifying the content type is important, because Rails defaults to &lt;code&gt;text/javascript&lt;/code&gt; for Ajax interactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-client-do-once-it-receives-a-successful-response"&gt;
  &lt;/a&gt;
  What does the client do once it receives a successful response?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AjaxController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// close the panel and go back to the home view&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user:tools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// display success info message&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snackbar:add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "success" event handler extracts the feedback message sent by the server and then dispatches two &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent"&gt;custom events&lt;/a&gt; that asynchronously communicate with two different areas of the page:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;user:tools&lt;/code&gt; communicates with the Stimulus &lt;code&gt;UsersController&lt;/code&gt; telling it to initiate a navigation back to the initial screen, the "Tools" section. How? Via this line in the HTML of the container page:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;data-action="user:tools@document-&amp;gt;user#fetchAndOpenTools"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;snackbar:add&lt;/code&gt; communicates with the Stimulus &lt;code&gt;SnackbarController&lt;/code&gt; telling it to add a new message to the stack of messages to show the user. &lt;a href="https://dev.to/devteam/how-to-wrap-a-preact-component-into-a-stimulus-controller-1bd0"&gt;I wrote a post if you're interested in how this part works&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once the first event is received, the following function is invoked, which triggers an Ajax call, fetching the server side &lt;code&gt;ToolsComponent&lt;/code&gt;'s HTML and displaying it in the UI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetchAndOpenTools&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stopPropagation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toolsComponentPathValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nx"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;js-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;outerHTML&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;announceChangedSectionToScreenReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Rails.ajax&lt;/code&gt; is builtin in Rails UJS, not very different from using &lt;code&gt;window.fetch&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;There's quite a bit going on here, depending on your level of familiarity with the major parts: Rails and Stimulus.&lt;/p&gt;

&lt;p&gt;In my opinion Stimulus is really good to keep vanilla JS organized and to attach behavior to server side rendered HTML markup, in a declarative way.&lt;/p&gt;

&lt;p&gt;By leveraging Rails builtin Ajax support and thin layer you can add interactivity without having to rely on larger frameworks or having to switch to client side rendering.&lt;/p&gt;

&lt;p&gt;If this is something that fits your use case, only you know, but I hope this post showed you how to combine two frameworks to improve the user experience without a steep learning curve and thus increasing the level of developer productivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;Aside from countless DuckDuckGo searches (there's little documentation on how to fit all the pieces together) and source code reading, I mainly spent time here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://guides.rubyonrails.org/working_with_javascript_in_rails.html"&gt;Working with JavaScript in Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stimulus.hotwired.dev/reference/controllers"&gt;Stimulus's Reference documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.betterstimulus.com/"&gt;BetterStimulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/stimulus-components/stimulus-remote-rails"&gt;stimulus-remote-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/pull/14283"&gt;Initial Forem's pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>javascript</category>
      <category>stimulus</category>
    </item>
    <item>
      <title>Azure Functions E2E Testing within GitHub Actions</title>
      <author>Justin Yoo</author>
      <pubDate>Fri, 27 Aug 2021 15:00:35 +0000</pubDate>
      <link>https://dev.to/azure/azure-functions-e2e-testing-within-github-actions-51m2</link>
      <guid>https://dev.to/azure/azure-functions-e2e-testing-within-github-actions-51m2</guid>
      <description>&lt;p&gt;A while ago, I wrote a blog post about &lt;a href="https://devkimchi.com/2019/08/07/azure-functions-integration-testing-with-mountebank/"&gt;Azure Functions integration testing with Mountebank&lt;/a&gt; and another blog post about &lt;a href="https://devkimchi.com/2019/08/14/azure-functions-sre-on-azure-devops-the-first-cut/"&gt;end-to-end (E2E) testing for Azure Functions&lt;/a&gt;. In the post, I suggested deploying the &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=dotnet-39275-juyoo"&gt;Azure Functions&lt;/a&gt; app first before running the E2E testing. What if you can run the Azure Function app locally within the build pipeline? Then you can get the test result even before the app deployment, which may result in the fail-fast concept.&lt;/p&gt;

&lt;p&gt;Throughout this post, I'm going to discuss how to run a function app locally within the build pipeline then run the integration testing scenarios instead of running the E2E testing after the app deployment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the sample code used in this post at this GitHub repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devkimchi"&gt;
        devkimchi
      &lt;/a&gt; / &lt;a href="https://github.com/devkimchi/azure-functions-integration-testing"&gt;
        azure-functions-integration-testing
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This provides a sample app and test for Azure Functions integration testing in a CI/CD pipeline
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#simple-azure-functions-app"&gt;
  &lt;/a&gt;
  Simple Azure Functions App
&lt;/h2&gt;

&lt;p&gt;Here's the straightforward Azure Function app code. I'm using the &lt;a href="https://github.com/azure/azure-functions-openapi-extension"&gt;Azure Functions OpenAPI extension&lt;/a&gt; in this app. It has only one endpoint like below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Run this function app and go to the URL, &lt;code&gt;http://localhost:7071/api/openapi/v3.json&lt;/code&gt;, and you will see the following OpenAPI document.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;At this stage, my focus is to make sure whether the OpenAPI document is correct or not. As you can see the OpenAPI document above, the document has a very simple data structure under the &lt;code&gt;components.schemas.greeting&lt;/code&gt; node. What if the data type is complex? We need confirmation. In this case, should we deploy the app to Azure and run the endpoint over there? Maybe or maybe not.&lt;/p&gt;

&lt;p&gt;But this time, let's run the app in the build pipeline and test it there, rather than deploying it to Azure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-azure-functions-app-as-a-background-process"&gt;
  &lt;/a&gt;
  Running Azure Functions App as a Background Process
&lt;/h2&gt;

&lt;p&gt;In order to test the Azure Functions app locally, it should be running on the local machine, using the &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-run-local?WT.mc_id=dotnet-39275-juyoo"&gt;Azure Functions CLI&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;But the issue of this CLI doesn't offer a way to run the app as a background process, something like &lt;code&gt;func start --background&lt;/code&gt;. Therefore, instead of relying on the CLI, we should use the shell command. So, for example, if you use the bash shell, run this &lt;code&gt;func start &amp;amp;&lt;/code&gt; command first, then run &lt;code&gt;bg&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;If you use PowerShell, use the &lt;code&gt;Start-Process&lt;/code&gt; cmdlet with the &lt;code&gt;-NoNewWindow&lt;/code&gt; switch so that the function app runs as a background process.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once the function app is running, execute this bash command on the same console session, &lt;code&gt;curl http://localhost:7071/api/openapi/v3.json&lt;/code&gt;. Alternatively, use the PowerShell cmdlet &lt;code&gt;Invoke-RestMethod -Method Get -Uri http://localhost:7071/api/openapi/v3.json&lt;/code&gt; to get the OpenAPI document.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-integration-test-codes"&gt;
  &lt;/a&gt;
  Writing Integration Test Codes
&lt;/h2&gt;

&lt;p&gt;As we've got the function app running in the background, we can now write the test codes on top of that. So let's have a look at the code below. First, it sends a GET request to the endpoint, &lt;code&gt;http://localhost:7071/api/openapi/v3.json&lt;/code&gt;, gets the response as a string and deserialises it to &lt;code&gt;OpenApiDocument&lt;/code&gt;, and finally asserts the results whether it's expected or not.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;As you can see from the test codes above, there's no mocking. Instead, we just use the actual endpoint running on the local machine.&lt;/p&gt;

&lt;p&gt;Once the test codes are ready, run the following command:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You will get the test results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-altogether-to-github-actions"&gt;
  &lt;/a&gt;
  Putting Altogether to GitHub Actions
&lt;/h2&gt;

&lt;p&gt;We knew how to run the function app as a background process and got the test codes. Our CI/CD pipeline should be able to execute this. Let's have a look at the &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; workflow. Some actions are omitted for brevity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#githubhosted-runners"&gt;
  &lt;/a&gt;
  GitHub-hosted Runners
&lt;/h3&gt;

&lt;p&gt;It really depends on the situation, but I'm assuming we should test the code on all the operating systems – Windows, Mac and Linux. In this case, use the &lt;code&gt;matrix&lt;/code&gt; attribute.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;GitHub-hosted runners don't have the &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-run-local?WT.mc_id=dotnet-39275-juyoo"&gt;Azure Functions CLI&lt;/a&gt; installed by default. Therefore, you should install it by yourself.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Install the .NET Core 3.1 SDK as well.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After all the tools are installed, testing should be followed.&lt;/p&gt;

&lt;p&gt;The following action is for Mac and Linux runners. The first step is to run the function app as a background process. Although you can simply use the command &lt;code&gt;func start&lt;/code&gt;, this action declares &lt;code&gt;func @("start","--verbose","false")&lt;/code&gt; to minimise the noise from the local debugging log messages.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;On the other hand, the following action is for Windows runner. The main difference from the other action is that this time doesn't use the &lt;code&gt;func&lt;/code&gt; command but the &lt;code&gt;$func&lt;/code&gt; variable. Using the &lt;code&gt;func&lt;/code&gt; command will get the error like &lt;code&gt;This command cannot be run due to the error: %1 is not a valid Win32 application.&lt;/code&gt;. It's because the &lt;code&gt;func&lt;/code&gt; command points to the &lt;code&gt;func.ps1&lt;/code&gt; file, which is the PowerShell script. Instead of using this PowerShell script, you need to call &lt;code&gt;func.cmd&lt;/code&gt; to run the function app as a background process.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once all the GitHub Actions workflow is set, push your codes to GitHub. Then you'll see all the build pipeline works as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkzeYvR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/08/azure-functions-integration-testing-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkzeYvR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/08/azure-functions-integration-testing-01.png" alt="Build Pipeline on Windows Runner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NOfidD3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/08/azure-functions-integration-testing-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NOfidD3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/08/azure-functions-integration-testing-02.png" alt="Build Pipeline on Non-Windows Runner"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So far, we've walked through how to run the integration testing codes for &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=dotnet-39275-juyoo"&gt;Azure Functions app&lt;/a&gt; within the &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; workflow, using &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-run-local?WT.mc_id=dotnet-39275-juyoo"&gt;Azure Functions CLI&lt;/a&gt; as a background process. As a result, you can now avoid extra steps for the app deployment to Azure for testing.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azurefunctions</category>
      <category>githubactions</category>
      <category>integrationtesting</category>
    </item>
    <item>
      <title>Liberating Responsibility</title>
      <author>Tony Ryzhikov</author>
      <pubDate>Fri, 27 Aug 2021 15:00:03 +0000</pubDate>
      <link>https://dev.to/stumbleagain/liberating-responsibility-gpi</link>
      <guid>https://dev.to/stumbleagain/liberating-responsibility-gpi</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;All of the thoughts below are based solely on my experience and are not universal, just something that works under current circumstances and from my point of view. It’s ok to disagree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At &lt;a href="https://dodobrands.io/post/dodo-is/"&gt;Dodo Engineering&lt;/a&gt; I conduct some interviews from time to time. Once I met the candidate who was working as a team lead while applying for the software engineer position. So at the end we stumbled upon quite an interesting topic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-managers"&gt;
  &lt;/a&gt;
  No managers
&lt;/h3&gt;

&lt;p&gt;“So I’ve heard you guys have no managers”, he asked me. The time for the interview was overdue, but it was the end of the day, so we decided to talk a bit more.&lt;/p&gt;

&lt;p&gt;“Umm, yes”, I said. “We kinda rely on teams being autonomous and keep the structure flat enough. Inside the teams we have an thing called &lt;em&gt;Product Leadership Team&lt;/em&gt; &lt;a href="https://alex4zero.medium.com/product-leadership-team-%D0%BA%D0%B0%D0%BA-%D0%BE%D1%81%D0%BD%D0%BE%D0%B2%D0%B0-%D1%80%D0%BE%D1%81%D1%82%D0%B0-efd1bba1baab"&gt;(article in Russian)&lt;/a&gt;. It has roles inside like Product Owner, People, Tech or Process Lead that help team in certain aspects. These roles can be assigned to different people in any ratio - it may be one person doing all four, or one role may be distributed between several team members - in any way certain team would prefer”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rl8flQOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AnvnT4onRRl7g_zy4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rl8flQOd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AnvnT4onRRl7g_zy4.jpeg" alt="https://cdn-images-1.medium.com/max/800/0*nvnT4onRRl7g_zy4.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“So basically you have managers, you just call them differently”, he smiled a bit. “These guys or one specific person is telling you what to do. I can’t speak for everyone, but in my experience it works only when someone have the guidance to tell the others what to do, otherwise it all falls apart”.&lt;/p&gt;

&lt;p&gt;“Well, not exactly”, I defended, “in our case the team decides what to do and how to do it by themselves. The people in the roles I mentioned can help and guide you how to do it in case we face issues.”&lt;/p&gt;

&lt;p&gt;“I don’t get it. Who takes the responsibility for the apps, when something’s happening with the services? ”, he remained on his own.&lt;/p&gt;

&lt;p&gt;“The team. We have a thing called Component Owners which indicates which guys to contact in case some service is acting weird.” I thought a bit. “And well, yes, the team with the Product Owner is also responsible for doing things the way they forecasted. But we do not blame if something goes bad, just trying to retrospect it all over to avoid same mistakes in the future”.&lt;/p&gt;

&lt;p&gt;He remained silent for a while, thinking it all over.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“So how does it work for you guys”?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It turned out I was answering this question in my head for a while afterwards — in the corner of the background mind. The ‘click’ feeling came to me at the middle of my shopping list in the grocery store. So figured it’s time to write it all down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#im-happy-and-i-own%C2%A0it"&gt;
  &lt;/a&gt;
  I’m happy and I own it
&lt;/h3&gt;

&lt;p&gt;In general, — and that’s what I answered — it works great. And please trust me when I say this post is not sponsored :]&lt;/p&gt;

&lt;p&gt;The important part of making it work is the company culture. But usually when someone tells someone else just that, the first response is “sounds like yet another corporate bullshit”. So let's dig in a bit.&lt;/p&gt;

&lt;p&gt;When speaking of culture, &lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339"&gt;Accelerate&lt;/a&gt; (the book that deserves all the glory it receives) mentions Westrum organization culture as a way to determine how organization spreads information. According to Westrum, organizations can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pathologic — based on dominance. The boss tells it employees what to do and how to do it, people are driven by fear, threats and power. Usually it relies on strict deadlines without well-defined integrations — ‘everyone on his own’.&lt;/li&gt;
&lt;li&gt;Bureaucratic — based on rules. It’s usually some hierarchy of set-up rules and strict processes that guide you to your team's specific goals. It creates a lot of really specialized teams and planned integrations between them, but they are rarely driven by some common goal, mostly interested in making it better for their part.&lt;/li&gt;
&lt;li&gt;Generative — based on result. The team needs to do something, and they are in charge of understanding how. They have full set of options for assistance, but no one’s going to make sure it works but them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjQaGsPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A1ASIh_Kh6LxjA6CdOoTKhQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjQaGsPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A1ASIh_Kh6LxjA6CdOoTKhQ.png" alt="https://cdn-images-1.medium.com/max/800/1*1ASIh_Kh6LxjA6CdOoTKhQ.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note if you found your organization in here! (image from ‘Accelerate’)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I consider Dodo Engineering culture to be generative. So let me try to answer why autonomy works for generative organizations. &lt;/p&gt;

&lt;p&gt;What happens when you know the fate of the product is in your hands?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each and every one of your team members treat your services in a much more careful way. You start to think not in terms of nowaday tasks, but in terms of strategy: what will happen if a backing service X goes down and communication was lost? How should the system behave if business would like to follow opportunity Y? It turns out that you embed reliability and other non-functional requirements as part of what you do on everyday basis, because you cannot avoid it — your hands are full in it, you see the problems and edge cases from much different angles.&lt;/li&gt;
&lt;li&gt;This enables transparency on what you do. If you know the cost of error and you know there's no ultimate figure behind your back to doublecheck it all over, you want to make the results of your efforts clear enough so that other people can check it out and may give some advices.&lt;/li&gt;
&lt;li&gt;This generates trust. As you see, you need to have more stuff on your mind and it’s quite possible you can’t carry it all alone. So you need to act together with your team to auto-distribute the needs based on what you figure will be optimal.&lt;/li&gt;
&lt;li&gt;This enables alignment. Well, yes, &lt;a href="https://engineering.atspotify.com/2014/03/27/spotify-engineering-culture-part-1/"&gt;Spotify Model&lt;/a&gt; claims it works otherwise - "alignment creates autonomy", but in this case it’s mutual — the more you act responsible, the more you need to know you’re not doing bullshit. So as a result you need to have some shared understanding of importance not only with your team members, but in terms of how the organization sees it. And the following questions if we're moving into the right direction enables discussion and collaboration.&lt;/li&gt;
&lt;li&gt;You treat your product much more carefully. You question the changes, see how they fit the big picture and what will happen if you do it differently. You do not longer see your Product Owner as a person that tells you what’s important, you start to have your own discussions and trade-offs, which is a key to the healthy product collaboration — you need to be on the one page with everything, otherwise the users may be disappointed. If you don’t own the services, there are more chances you get lost in code and miss the reason we’re all doing things and the alignment that has been mentioned before will disappear.&lt;/li&gt;
&lt;li&gt;Last but not least, it enables the diversity of views and ramps up the skills to constructively discuss all points of views together. The more people have their own background and understanding on how certain things should be carried on, the more chances you have to make it work altogether.&lt;/li&gt;
&lt;li&gt;Last but not least, it gives you the motivation to actually change how what you do affect people's lives, since it's actually you making the change. Netflix have something called &lt;a href="https://jobs.netflix.com/culture#informed-captains"&gt;informed captains&lt;/a&gt; to decentralize the decision-making, so sometimes you need to face a choice that will change everything - or you have the power to affect the choice of others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if this is so great, you may ask, why this has not become an industry standart yet?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leadership-at-your%C2%A0service"&gt;
  &lt;/a&gt;
  Leadership at your service
&lt;/h3&gt;

&lt;p&gt;It must be mentioned to changing the organization culture to result-oriented requires not only a leap of faith, but also the attitude that the people in the organization should share. So, in other words, one tiny thing should happen:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Everyone should become leaders”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The things that sound simple might not be so straightforward after all. This means that people would need to change the way the do things and set their own system of priorities. If some person used to act as an advanced typewriter, or, as the internet likes to quote, ‘turn coffee into code’, this attitude may derail from the other questions one may need to ask — how my product is doing, what’s happening — and going to happen. This is no longer responsibility of some guy that’s gonna tell you what to do, it’s some inside motivation that should hopefully emerge.&lt;/p&gt;

&lt;p&gt;And again, it pretty much relies on personalities. One would like to access services from reliability perspective and adapt SRE practices to team routine, the other will be more focused on the product future and user experience, the third would concentrate more on quality, or understanding law changes, or release optimization, or process enhancements, or system design, or hiring, or whatever else you understand the team needs. Of course, you could enable specific role or title for each and every one of them, but usually all those strong parts are mixed together between different people. The important part is the same — every person in the team needs to have the urge, the desire to change things and guide each other.&lt;/p&gt;

&lt;p&gt;Usually this is the part that we assess on the final interview — if the candidate can show these skills or is ready for such changes. From my experience, it’s very important to be candid and tell the candidate that this the part of the expectations that comes with a job, so that one will acknowledge it and decide if one wants to pursue it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-apart-from-that-no-tradeoffs"&gt;
  &lt;/a&gt;
  So, apart from that, no trade-offs?
&lt;/h3&gt;

&lt;p&gt;Or course not.&lt;/p&gt;

&lt;p&gt;This bit of leadership transformation I mentioned above is what usually happens in the majority of the companies when the engineer becomes the team lead. So since these set of challenged as somewhat known and shared within the comminity, there are some guides on how to follow it — to prefer team value over personal one, to delegate, to facilitate, to mentor, to apply decision-making. Mastering these parts takes practice and time. And some of the problems I mentioned below are pretty typical for the new teamleads, while others are tightly interlinked.&lt;/p&gt;

&lt;p&gt;And also, last but not least, it should be reminded that &lt;em&gt;the engineering team still needs to deliver value&lt;/em&gt;. Imagine the engineers as lumberjacks. So of course they may need to learn how to grow trees, select the best axes and navigate by the sun, but they still need to chop some wood. So in between facilitation and system thinking we still need to ‘turn coffee into code’. And this is the right-balancing part where it gets more complicated.&lt;/p&gt;

&lt;p&gt;So as you may notice, when this is happening faster on much larger scale there are some growth issues. Again, they might be considered pretty typical, but they are no joke on company level, and we at Dodo Engineering have the data from the pulse surveys to assure it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y79mX6DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AgSLduBnh2xaDhOlo" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y79mX6DB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AgSLduBnh2xaDhOlo" alt="https://cdn-images-1.medium.com/max/800/0*gSLduBnh2xaDhOlo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Image from an artist &lt;a href="https://vk.com/by_duran"&gt;https://vk.com/by_duran&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Distress and Burnout&lt;/strong&gt;. As modern scientists claim, stress is something natural driven by desire &lt;a href="https://en.wikipedia.org/wiki/Homeostasis"&gt;to resist change&lt;/a&gt;. However, in always changing environment like this one the organism may not be able to adapt to the stress factors which can lead to burnout - you always feel you are in some buzzed state, you cannot rechange. Again, this bit is somewhat familiar in the software engineer's community and some may consider it a matter of fashion, but I think in general modern society bumped into the burnout in a pretty hard way recently and it’s good to acknowledge the problem at a large scale. So the advice is to do things based on what gives you joy, go on long vacations. There’s no point in working in sake of it if you can’t and it doesn’t give you joy. Talk about it, address it, determine it at the early stages, don't be afraid to tell someone that you feel that way.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cannot focus&lt;/strong&gt;. This can be detected as a symptom of the distress as well, but I wanted to address the general feeling of overwhelming. When you have something else has just happened in the middle of your routine gives you a small piece of joy, so you want to drop everything you do and go there. So the feeling of being 'in the zone' is something very helpful in performing complex activities, like software engineering, and unability to focus onto them makes it very hard for you to perform them. The usual recommendation would be to forecast you efforts in advance, to use your calendar wisely, to be able to say 'no'. In our team we started a duty practice for the requests of external development teams or support, so that the other people have more time to spend on something without context switches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xb6vc811--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m74tt5whakr4tz6ncb9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xb6vc811--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m74tt5whakr4tz6ncb9i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(I find it very amusing that the term 'context switchcing' originated from software engineering matches that good to what actual engineers feel in their everyday work)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Anxiety&lt;/strong&gt;. Lots of it! You cannot be sure you’re doing a good job — are your products good? Are you following product vision fine? Haven’t we forgotten something essential? Of couse there’s no universal recipe for this, but good metrics, team support, enough sleep time and therapy sessions can help.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hard to let it go&lt;/strong&gt;. The more you assign on you, the harder it becomes to let something go, to not remain the best at it. The only thing I could recommend here is to figure out what you want to do, then rationalize your areas based on it - and trust the people around you to help you. If this activity won’t help, this may happen naturally over time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Responsibility bias.&lt;/strong&gt; It's something similar to what cognitives sciences like to call &lt;a href="https://en.wikipedia.org/wiki/Bystander_effect"&gt;bystander effect&lt;/a&gt; - if a person have some accident in the middle of the street, the more people you have around, the less chance the person will receive help - because everyone expects in from someone else. This is something that is very observable in big teams - some nasty bug in legacy system would likely receive less attention because everyone expect anyone else to step up. In this case, the smaller the team is and the more accountable their members are, then there are way less chances that this would be happening on a regular basis. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"&lt;strong&gt;Not my job"&lt;/strong&gt; attitude. This is an extremely complex topic that deserves a separate article. The more your company scales, the more complicated it becomes to understand how all parts of your service behaves. Usually there's some kind of platform team that shares the expertize in this, but depending on how it's implemented the service ownership not always fully remains on the team. The point of DevOps as a culture to remove this 'us and them' barrier is something the engineers would need to pay attention to, especially in modern cloud-based development. If the team is not aware on how your application works in production, regarding the way it's deployed, hosted and configured, the more the real ownership and responsibility is diffused. This may lead to the scenario when engineers are not responsible on the way their service operates, which kind of brings down all of the whole autonomy and responsibility ideas. But breaking this particular wheel requires some kind of cultural shift to happen, which may not come out naturally.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Feature/Ownership duality.&lt;/strong&gt; My favourite one! The longer you dwell on both technical excellence and product changes impacting business value, the harder it becomes to balance it out. Imagine you have two hats on you that you juggle on while deciding what better to do next sprint. I personally consider it normal and something worth adjusting for, but it may feel different from most of the approaches based on personalized role-based discussion. For example, American judicial system have representative for the People (prosecutor) against the defendant (defence attorney). Usually I either witnessed similar 'count hearings' or the huge leap into specific direction, but in the metaphor I presented the whole count including the jury rests on the team members.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, &lt;strong&gt;all of it takes time&lt;/strong&gt;. You need much more alignment! You need to talk not only by your regular Scrum routine, but based on what you do, and you get eventully tired of it. I have a friend that shifted to leadership position recently, and he was saying to me 'I don't get it why I'm getting paid so much, I work like three hours a day'. And when I asked why he's late after work to meet up all the time, he answered: &lt;em&gt;'Well, I'm talking about my actual work, not meetings and stuff'.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;'Meetings and stuff' become part of what you do, you need to control its amount, make sure it doesn't blow your work time to the extremes, treat it as a part of you job responsbilities to **&lt;strong&gt;&lt;em&gt;deliver value&lt;/em&gt; and see if the meetings are short, actionable and help you in your everyday work&lt;/strong&gt;.** If they are not, it can become the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-what-about-product-leadership-team"&gt;
  &lt;/a&gt;
  So what about Product Leadership Team?
&lt;/h2&gt;

&lt;p&gt;After all the obstacles shared, you may ask me, if it's that hard to make autonomous teams work, then what's the point? And here's the missing piece - we have the Product Leadership Team I mentioned at the top of the article. Their role is to ensure and guide the team in being productive. In a way, if the team is mature enough or trade-offs are something that does not apply to them, they may not need this team 'as is' or some of the roles*. &lt;/p&gt;

&lt;p&gt;I tried to match what roles can assist in which areas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People lead

&lt;ul&gt;
&lt;li&gt;Distress, Anxiety, Burnout, Fear of letting go, Lack of time&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Process lead

&lt;ul&gt;
&lt;li&gt;Burnout, Lack of Focus, Responsibility Bias, Feature/Ownership duality, Lack of time,  Lack of focus&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Product Owner

&lt;ul&gt;
&lt;li&gt;Responsibility Bias, Feature/Ownership duality, Lack of focus, Lack of time&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Tech Lead

&lt;ul&gt;
&lt;li&gt;Anxiety, Feature/Ownership duality, Fear of letting go, 'Not my job', Lack of focus&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually roles are assigned to people with some experience who have been through all this stuff, so that the engineers would feel safer addressing there problems.&lt;/p&gt;

&lt;p&gt;Also, different teams require different kind of help. These roles can perform all sorts of activities, including organizational, administrative, facilitative, coaching, visionary, servant leadership, expertize enabling, team forming and so many more. But note - I don't say in specifics what these roles &lt;strong&gt;should do&lt;/strong&gt;. I merely wanted to show what they &lt;strong&gt;can&lt;/strong&gt; do, including in scope of engineering obstacles from above.&lt;/p&gt;

&lt;p&gt;And the fun part - as you may see, since the obstacles are tightly coupled, the needs of the leadership team are coupled as well, so they need to talk to each other and address the issues from different angles, to work as a team on another level.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;All I said is true, apart from the Product Owners who act as a main person responsible on how the product works. The things one can do varies, but the role stays on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#so-tell-me-was-it-worth-it"&gt;
  &lt;/a&gt;
  So tell me, was it worth it?
&lt;/h2&gt;

&lt;p&gt;Another topic I have to mention. So yes, I tell you guys that it's all great or whatever, but how can I prove it?&lt;/p&gt;

&lt;p&gt;The straightforward way would be to track the team velocity and the set of metrics from &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2019.pdf"&gt;State of DevOps&lt;/a&gt; as lead time, change failure rate and so on. But in order to do that, we need to have some teams that work differently within one company and ideally in the same product. &lt;em&gt;So you won't see any metrics comparison from me, because I don't have this data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But I can try to identify the circumstances when &lt;strong&gt;it can work better&lt;/strong&gt; than the traditional manager-based teams. Here's what I have in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Clear product vision&lt;/strong&gt;. If you don't have a product that you work on and improve on, the whole idea falls apart.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Your team is small&lt;/strong&gt;. The more people you have, the harder it would be to communicate and take ownership without stepping on each other's toes. The chances are some sub-teams would emerge organically. Scrum recommends team size between 3 and 9, I'd lower it down to 6. Unless you're using things like &lt;a href="https://less.works/"&gt;LeSS&lt;/a&gt;, then still consider small feature teams as an outcome.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Everything may change.&lt;/strong&gt; If the nature of your activity is pretty monotonous and easily predictable, the desire to take and change ownership areas and responsibility may be smaller. &lt;a href="https://en.wikipedia.org/wiki/Cynefin_framework"&gt;Cynefin framework&lt;/a&gt; call it 'Simple' quadrant - if everything that your would need and do is determined with a very good prediction rates, the pros of extended autonomy won't that easily overwhelm the odds.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Your team needs to delivery value frequently.&lt;/strong&gt; If your stakeholders and C-level guys prefer to operate in large release cycles with vast stabilisation phases and predefined schedule, the value of autonomous teams is significantly reduced.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Your services' health is critical for the stakeholders&lt;/strong&gt;. Usually tradiditional managers do a lot of communication and planning and team-related activities, so the technical excellence still relies on the team. And the more your company is interested in the reliability and availability of your services, the more proactive assistance you may need.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Your company culture supports autonomy&lt;/strong&gt;. That's all great, but if it gets active resisistance from within, consider wisely on your ability to change the way the company operates. It's possible, but usually beraucratic and especially pathologic companies resist it, and takes great motivation and teammate support to change it - if it's worth it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I cannot say we have a magic potion to overcome the trade-offs I mentioned and we still have some work to do while we grow. But I think we're moving at right direction and I did a fair job answering the original question.&lt;/p&gt;

&lt;p&gt;We are currently hiring engineers to join our team - visit &lt;a href="https://dodo.dev/"&gt;https://dodo.dev/&lt;/a&gt; to learn more and see if what I'm telling is true.&lt;/p&gt;

</description>
      <category>teams</category>
      <category>agile</category>
      <category>culture</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Run your LoRaWAN gateway with your own The Things Stack network server on a Raspberry Pi and balena</title>
      <author>Marc Pous</author>
      <pubDate>Fri, 27 Aug 2021 14:57:01 +0000</pubDate>
      <link>https://dev.to/mpous/run-your-lorawan-gateway-with-your-own-the-things-stack-network-server-on-a-raspberry-pi-and-balena-4o4n</link>
      <guid>https://dev.to/mpous/run-your-lorawan-gateway-with-your-own-the-things-stack-network-server-on-a-raspberry-pi-and-balena-4o4n</guid>
      <description>&lt;p&gt;Running this project you can have all the LoRaWAN stack (Basics Station gateway + The Things Stack network server) running together on a single Raspberry Pi, LoRa concentrator and balena. Using containers on balena means that it can run alongside with other services such as the balena LoRaWAN BasicsTM Station gateway and others.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fNGpbVCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efth4rdpw296627ykrc4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNGpbVCi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efth4rdpw296627ykrc4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-lora-and-lorawan"&gt;
  &lt;/a&gt;
  What is LoRa and LoRaWAN
&lt;/h2&gt;

&lt;p&gt;I love the concept of the Low-Power Wide Area Networks (LPWAN). LPWAN enable to set up tiny sensors running with batteries far away from the base stations and still send data during a lot of time. &lt;/p&gt;

&lt;p&gt;LoRa is a radio modulation meant for Long Range communication using very little power to send data.&lt;/p&gt;

&lt;p&gt;LoRaWAN is a Media Acces Layer (MAC) protocol. A software layer that defines how devices use LoRa to transmit and receive messages on a network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zr7N8lMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cechj4uxy2yqar4u20vc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zr7N8lMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cechj4uxy2yqar4u20vc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LoRaWAN (LoRa Wide Area Network) is an example of LPWAN. Using LoRa (Long Range) radio-frequencies, you can send tiny packages of data over long distances (even miles away depending on the topology) with simple battery-powered devices. The radio packets are captured by gateways which relay over the Internet the LoRa packages to network servers.&lt;br&gt;
The Things Stack is an example of a LoRaWAN network server. The Things Stack (previously The Things Network) is being run on the The Things Industries clusters that are distributed worldwide. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPLNEOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5td5s00rx50llmqxgel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPLNEOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5td5s00rx50llmqxgel.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-this-running-on-a-raspberry-pi-instead-of-a-cloud"&gt;
  &lt;/a&gt;
  Why is this Running on a Raspberry Pi instead of a cloud?
&lt;/h2&gt;

&lt;p&gt;If you want to manage your own data without sharing it with any cloud provider, the data collected can’t leave your country, or other similar requirements, then the solution is to deploy The Things Stack LoRaWAN Network Server using balena on a Raspberry Pi.&lt;/p&gt;

&lt;p&gt;If you are a professional that needs to build your ad-hoc LoRaWAN private network for tests or others, this is a great and unexpensive solution. And if you are a community or company who need a tiny private LoRaWAN network server, this could be just enough.&lt;/p&gt;

&lt;p&gt;Some people says that a Raspberry Pi is to small for this type of job, but it has been running for weeks with good performance with tiny amount of LoRa nodes. Needs to be tested on a bigger environment. Feel free to bring your feedback here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hardware-and-software-required"&gt;
  &lt;/a&gt;
  Hardware and Software required
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OY_JF019--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/325hntapzouzlrfnl0do.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OY_JF019--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/325hntapzouzlrfnl0do.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3 or 4 (or similar Compute Module carrier boards).&lt;/li&gt;
&lt;li&gt;SD card&lt;/li&gt;
&lt;li&gt;Power supply&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LoRa concentrator (SX1301 or SX1302) (e.g. RAK 2245, RAK 2287 among others)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dashboard.balena-cloud.com/"&gt;balenaCloud&lt;/a&gt; account&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://balena.io/etcher"&gt;balena Etcher&lt;/a&gt; to flash the SD card.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#deploy-the-basics-station-gateway-with-the-things-stack-network-server"&gt;
  &lt;/a&gt;
  Deploy the Basics Station gateway with The Things Stack network server
&lt;/h2&gt;

&lt;p&gt;To deploy the Basics(TM) Station gateway service along TTS local network server on your Raspberry Pi, click the &lt;a href="https://dashboard.balena-cloud.com/deploy?repoUrl=https://dashboard.balena-cloud.com/deploy?repoUrl=https://github.com/xoseperez/the-things-stack-basicstation-balena"&gt;Deploy with balena here&lt;/a&gt; or go to the &lt;a href="https://github.com/xoseperez/the-things-stack-basicstation-balena"&gt;Github repo&lt;/a&gt; to click the Deploy with balena button to automatically deploy the application on balenaCloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashboard.balena-cloud.com/deploy?repoUrl=https://dashboard.balena-cloud.com/deploy?repoUrl=https://github.com/xoseperez/the-things-stack-basicstation-balena"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l3sDPIqw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or4c4wpa91kz427lt6xk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking the deploy button will create a fleet with all the necessary code to deploy your The Things Stack plus basicstation service.&lt;/p&gt;

&lt;p&gt;It’s time to connect your LoRa concentrator compatible with your Raspberry Pi or balena Fin (SX1301, or SX1302 and SX1303 such as RAK2245 or RAK 2287), to run the LoRaWAN gateway running alongside with The Things Stack network server.&lt;/p&gt;

&lt;p&gt;Remember to add or modify the variable &lt;code&gt;MODEL&lt;/code&gt; depending on the LoRa concentrator model you have (SX1301, SX1302 or SX1303). By default is set to SX1301.&lt;/p&gt;

&lt;p&gt;You should see something similar on balenaCloud as below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOlFDgyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lg6j069euyymu3dhke9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOlFDgyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lg6j069euyymu3dhke9j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will notice that the services will reboot a few times, this is normal behaviour to set up all the services properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-the-gateway-at-your-private-the-things-stack"&gt;
  &lt;/a&gt;
  Register the gateway at your private The Things Stack
&lt;/h2&gt;

&lt;p&gt;Copy your local IP address and paste it into the browser with https. Accept the self-signed certificate that the device has generated automatically for your local IP address. Alternatevaly feel free to use the public URL generated by balenaCloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HvgOvd0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pes3wm3j9ptck7ft7pe9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HvgOvd0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pes3wm3j9ptck7ft7pe9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Login using the credentials User ID &lt;code&gt;admin&lt;/code&gt; and the password &lt;code&gt;changeme&lt;/code&gt;. Feel free to change your Password after you log in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y070AT_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3eyoh4tsoneflgkj0von.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y070AT_c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3eyoh4tsoneflgkj0von.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Register a gateway&lt;/code&gt; and then &lt;code&gt;Add new Gateway&lt;/code&gt;. Copy the EUI that the basicstation service introduces as a TAG of on the balenaCloud dashboard. Paste it as the EUI of the gateway when registering.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0CqprQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q416345mgm99x60701m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0CqprQD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1q416345mgm99x60701m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the gateway is registered and it's time to generate an API Key. Go to &lt;code&gt;Add API Key&lt;/code&gt;, then select &lt;code&gt;Link as a Gateway to a Gateway Server for traffic exchange, i.e. write uplink and red downlink&lt;/code&gt;. Click the button &lt;code&gt;Create API key&lt;/code&gt;. Remember to copy the key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iPLRIn-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqlbra067y02orvmzyi6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iPLRIn-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqlbra067y02orvmzyi6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste the key on the balenaCloud &lt;code&gt;Device Variables&lt;/code&gt; of the device on balenaCloud as &lt;code&gt;TC_KEY&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The gateway registered will be online on your private The Things Stack network server and able to receive data from your LoRa nodes.&lt;/p&gt;

&lt;p&gt;This project involves a lot of services running together. If there is any issue not reported here, feel free to report it at the &lt;a href="https://forums.balena.io/"&gt;balena forums&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And remember that this project is open source, &lt;a href="https://github.com/xoseperez/the-things-stack-basicstation-balena"&gt;feel free to contribute to improve it&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>balena</category>
      <category>lorawan</category>
      <category>thethingsnetwork</category>
      <category>raspberrypi</category>
    </item>
    <item>
      <title>AWS - NLP newsletter - 2021. Aug.</title>
      <author>Mia Chang</author>
      <pubDate>Fri, 27 Aug 2021 14:19:28 +0000</pubDate>
      <link>https://dev.to/aws/aws-nlp-newsletter-2021-aug-i40</link>
      <guid>https://dev.to/aws/aws-nlp-newsletter-2021-aug-i40</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EKqpKyZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzsnw9wxv57f0br3c81x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKqpKyZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzsnw9wxv57f0br3c81x.png" alt="Cover Photo for AWS NLP Newsletter Ep01.2021.Aug."&gt;&lt;/a&gt;&lt;br&gt;
Hello world. This is the monthly Natural Language Processing(NLP) newsletter covering everything related to NLP at AWS. This is our first newsletter on Dev.to. Special thanks to &lt;a href="https://dev.to/094459"&gt;Ricardo Sueiras&lt;/a&gt; helped us make this happen. Feel free to leave comments, share it on your social network to celebrate this new launch with us!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-updates-about-nlp-on-aws"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Service updates about NLP on AWS&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/transcribe/call-analytics/"&gt;&lt;strong&gt;Amazon Transcribe Call Analytics&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Amazon Transcribe Call Analytics is a new machine learning (ML) powered conversation insights API that enables developers to improve customer experience and agent productivity. This API can analyze call recordings to generate turn-by-turn call transcripts and actionable insights for understanding customer-agent interactions, identifying trending issues, and tracking performance metrics. Launch content: &lt;a href="https://aws.amazon.com/blogs/aws/extract-insights-from-customer-conversations-with-amazon-transcribe-call-analytics/"&gt;AWS News Blog&lt;/a&gt;, &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/08/announcing-amazon-transcribe-call-analytics-api-conversation-insights/"&gt;What's New Post&lt;/a&gt;, &lt;a href="https://aws.amazon.com/transcribe/call-analytics/"&gt;Webpage&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/analytics-jobs.html"&gt;Documentation&lt;/a&gt;, &lt;a href="https://github.com/aws-samples/amazon-transcribe-output-word-document"&gt;GitHub Demo&lt;/a&gt;, &lt;a href="https://www.linkedin.com/posts/aws-machine-learning_amazon-transcribe-call-analytics-activity-6828792934440169472-wfjS"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/08/amazon-connect-amazon-lex-v2-console-apis/"&gt;&lt;strong&gt;Amazon Connect now works with Amazon Lex V2&lt;/strong&gt;&lt;/a&gt;. &lt;br&gt;
Amazon Lex allows customers to create intelligent chatbots that turn their Amazon Connect contact flows into natural conversations. Amazon Lex V2 console and API enhancements include: 1) support for multiple languages in a simple bot and the ability to manage them as a single resource through the life cycle (build, test, and deploy), 2) ability for end-users to request a bot to wait (“Can you wait while I get my credit card?”), and interrupt a bot in mid-sentence, 3) simplified bot versioning, and 4) new productivity features such as support for saving partially completed bots, bulk upload of sample utterances, and navigation via a dynamic ‘Conversation flow’ for more flexibility and control in the bot design process. Share the news: &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/08/amazon-connect-amazon-lex-v2-console-apis/"&gt;What’s New post&lt;/a&gt;, &lt;a href="https://aws.amazon.com/blogs/aws/amazon-lex-enhanced-console-experience/"&gt;Amazon Lex Blog post&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/connect/latest/adminguide/set-voice.html#set-voice-lexv2bot"&gt;Amazon Connect documentation&lt;/a&gt;, &lt;a href="https://docs.aws.amazon.com/lexv2/latest/dg/what-is.html"&gt;Amazon Lex documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-blog-posts-papers-and-more"&gt;
  &lt;/a&gt;
  &lt;strong&gt;AWS Blog posts, papers, and more&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.science/blog/amazon-announces-new-conversational-modeling-challenge"&gt;Amazon announces new conversational-modeling challenge - Amazon Science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Challenge entry will remain open until September 21, and research teams from academia, industry, and nonprofit and government sectors are welcome to participate. Amazon has open-sourced the development data, evaluation scripts, and baseline systems for challenge participants and other researchers in the field.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.science/blog/ensuring-that-new-language-processing-models-dont-backslide"&gt;Ensuring that new language-processing models don't backslide - Amazon Science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hZCAklP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58u2hoxyen6rpyqq5baj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hZCAklP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58u2hoxyen6rpyqq5baj.png" alt="Ensuring that new language-processing models don't backslide."&gt;&lt;/a&gt;&lt;br&gt;
Regression bugs are in your NLP model! This study showed that in updated models, NFRs are often much higher than the total accuracy gains, from two to eight times as high. This implies that simply aiming for greater accuracy improvements in updated models will not ensure a decrease in regression; i.e., improving accuracy and minimizing regression are related but separate learning targets. This post includes mitigations to the regression bugs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/announcing-model-improvements-and-lower-annotation-limits-for-amazon-comprehend-custom-entity-recognition/"&gt;Announcing model improvements and lower annotation limits for Amazon Comprehend custom entity recognition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The post shares how to make improvements to the F1 score while training models with different dataset sampling configurations, including multi-lingual models. With this updated model, Amazon Comprehend makes it easy to train custom entity recognition models. Limits have been lowered to 100 annotations per entity and 250 documents for training, while offering improved accuracy with your models.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/make-your-audio-and-video-files-searchable-using-amazon-transcribe-and-amazon-kendra/"&gt;Make your audio and video files searchable using Amazon Transcribe and Amazon Kendra | AWS Machine Learning Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The combination of Amazon Transcribe and Amazon Kendra enable a scalable, cost-effective solution to make your media files discoverable. You can use the content of your media files to find accurate answers to your users’ questions, whether they’re from text documents or media files, and consume them in their native format.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/machine-learning/analyze-customer-churn-probability-using-call-transcription-and-customer-profiles-with-amazon-sagemaker/"&gt;Analyze customer churn probability using call transcription and customer profiles with Amazon SageMaker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UBMwkmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxgx9vsta7hnznq6mkij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UBMwkmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxgx9vsta7hnznq6mkij.png" alt="Analyze customer churn probability using call transcription and customer profiles with Amazon SageMaker"&gt;&lt;/a&gt;&lt;br&gt;
This post explains an end-to-end solution for creating a customer churn prediction model based on customer profiles and customer-agent call transcriptions. Which included training a PyTorch model with a custom script and creating an endpoint for real-time model hosting. Start from create a public-facing API Gateway that can be securely used in your mobile applications or website, then use Amazon Transcribe for batch or real-time transcription of customer-agent conversations, which you can use for training of your model or real-time inference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w-qGSyzDL6g"&gt;&lt;strong&gt;Zillow: Near Real-Time Natural Language Processing (NLP) for Customer Interactions&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eKNFPwMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wxp11b84y22ch58vy95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eKNFPwMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wxp11b84y22ch58vy95.png" alt="Zillow: Near Real-Time Natural Language Processing (NLP) for Customer Interactions"&gt;&lt;/a&gt;&lt;br&gt;
Helping home shoppers connect to the services they need in time can make the difference if they are successful in securing a property or not. In this episode, we explore how Zillow built a natural language processing solution using Amazon Transcribe and leverage the Elastic Container Service to quickly scale their machine learning engine to match customer requests to agents. We dive into how they deploy models into the environment using GitLab pipelines to simplify the job for data scientists.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-content"&gt;
  &lt;/a&gt;
  Community content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://changelog.com/practicalai/145"&gt;&lt;strong&gt;NLP to help pregnant mothers in Kenya&lt;/strong&gt;&lt;/a&gt; &lt;br&gt;
In Kenya, 33% of maternal deaths are caused by delays in seeking care, and 55% of maternal deaths are caused by delays in action or inadequate care by providers. Jacaranda Health is employing NLP and dialogue system techniques to help mothers experience childbirth safely and with respect, and to help newborns get a safe start in life.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://towardsdatascience.com/huggingface-processing-jobs-on-amazon-sagemaker-b1f5af97b663"&gt;&lt;strong&gt;HuggingFace Processing Jobs on Amazon SageMaker&lt;/strong&gt;&lt;/a&gt; &lt;br&gt;
Prepare text data for your NLP pipeline in a scalable and reproducible way. This has two principal benefits: (1) For large datasets, data preparation can take a long time. Choosing dedicated EC2 instances allows us to pick the right processing power for the task at hand. (2) Codifying the data preparation via a processing job enables us to integrate the data processing step into a CI/CD pipeline for NLP tasks in a scalable and reproducible way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://towardsdatascience.com/how-good-is-your-nlp-model-really-b5ef2c0857ed"&gt;&lt;strong&gt;How Good Is Your NLP Model Really?&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
How to evaluate NLP models with Amazon SageMaker Processing jobs for Hugging Face’s Transformer models.  NLP model evaluation can be resource-intensive, especially when it comes to Transformer models that benefit greatly from GPU acceleration. In the post we will then see that we can speed up this process up to 267(!) times by using SageMaker’s Hugging Face Processing jobs. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-samples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Code samples&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wlnas1Zu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axs79gz5isiakvl0xn3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wlnas1Zu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axs79gz5isiakvl0xn3h.png" alt="HuggingFace with Amazon SageMaker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#huggingface"&gt;
  &lt;/a&gt;
  &lt;strong&gt;HuggingFace&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Amazon SageMaker enables customers to train, fine-tune, and run inference using Hugging Face models for Natural Language Processing(NLP) on SageMaker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://awsdocs-neuron.readthedocs-hosted.com/en/latest/src/examples/pytorch/byoc_sm_bert_tutorial/sagemaker_container_neuron.html"&gt;Bring your own HuggingFace pretrained BERT container to Sagemaker Tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://awsdocs-neuron.readthedocs-hosted.com/en/latest/src/examples/tensorflow/huggingface_bert/huggingface_bert.html"&gt;TensorFlow 2 HuggingFace distilBERT Tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nlp-with-blazingtext-with-amazon-sagemaker-and-aws-lambda"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NLP with BlazingText with Amazon SageMaker and AWS Lambda&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This example illustrates how to use a BlazingText text classification training with SageMaker, and serving with AWS Lambda for both supervised (text classification) and unsupervised (Word2Vec) modes. The repository comes with Jupyter notebook, docker container, and events file you can work with.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a href="https://github.com/aws-samples/aws-lambda-docker-serverless-inference/tree/main/blazingtext-text-classification-train-in-sagemaker-deploy-with-lambda"&gt;Train a BlazingText text classification algorithm in SageMaker, inference with AWS Lambda&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#upcoming-events"&gt;
  &lt;/a&gt;
  Upcoming events
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2wN76o8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58vj5nhtxh06uk3s8ntc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2wN76o8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58vj5nhtxh06uk3s8ntc.png" alt="Best Practices in Conversational AI Design"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://pages.awscloud.com/GLOBAL-partner-OE-spm-cci-september-2021-reg-event.html"&gt;Best Practices in Conversational AI Design&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Sep 01, 2021 | 07:00 PM CEST&lt;/p&gt;

&lt;p&gt;Join conversational design leaders from Amazon, Alexa, and AWS as we discuss best practices in conversational AI design. Building conversational interfaces can be challenging given the free-form nature of communication and unstructured data. Users can say whatever they like, however they like. It is quite a bit different from web and mobile design. Our experts will cover the best practices in conversational design, including how to design for voice assistants versus text chatbots, handling fallbacks gracefully, the role of context and personalization, how to guide the users along the happy path to successful engagement, tips for creating an intuitive flow, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-in-touch-with-nlp-on-aws"&gt;
  &lt;/a&gt;
  Stay in touch with NLP on AWS
&lt;/h2&gt;

&lt;p&gt;Our contact: &lt;a href="//mailto:aws-nlp@amazon.com"&gt;aws-nlp@amazon.com&lt;/a&gt; &lt;br&gt;
Email us about (1) your awesome project about NLP on AWS, (2) let us know which post in the newsletter helped your NLP journey, (3) other things that you want us to post on the newsletter. Talk to you soon.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>nlp</category>
      <category>machinelearning</category>
      <category>ai</category>
    </item>
    <item>
      <title>The Only 2 Ways, You Ever Need To Unsubscribe Angular Observables</title>
      <author>Dev By RayRay</author>
      <pubDate>Fri, 27 Aug 2021 14:04:37 +0000</pubDate>
      <link>https://dev.to/devbyrayray/the-only-2-ways-you-ever-need-to-unsubscribe-angular-observables-4bpp</link>
      <guid>https://dev.to/devbyrayray/the-only-2-ways-you-ever-need-to-unsubscribe-angular-observables-4bpp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#clean-up-angular-observables-in-an-easy%C2%A0way"&gt;
  &lt;/a&gt;
  Clean Up Angular Observables In An Easy Way
&lt;/h2&gt;

&lt;p&gt;Angular is full of Observables. But is there is a mechanism that automatically unsubscribes your Observables when components get destroyed?&lt;/p&gt;

&lt;p&gt;I've read a ton of different posts about cleaning your subscriptions. There are so many different ways, but I missed that one post that showed me how you should handle your subscriptions and when.&lt;/p&gt;

&lt;p&gt;To prevent you from reading all these posts like me, here is a practical post explaining how to unsubscribe from your Observables easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;The short version, for those who don't want to dive into it 😅. Here are the solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#async-pipe"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Async Pipe&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;| async&lt;/code&gt; the async pipe offers you to handle Observables in your HTML template. The async pipe automatically runs the unsubscribe process after the destruction process of a component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#takeuntil"&gt;
  &lt;/a&gt;
  &lt;strong&gt;takeUntil&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;takeUntil&lt;/code&gt; can be called in the &lt;code&gt;.pipe()&lt;/code&gt; method before you subscribe. With this method, you can add your subscription to a &lt;code&gt;Subject&lt;/code&gt;. If you have a few subscriptions in it, you can unsubscribe it in the &lt;code&gt;ngOnDestroy&lt;/code&gt; event with the &lt;code&gt;.next()&lt;/code&gt; and &lt;code&gt;.complete()&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-observables-in-a-html-template-with-async-pipe"&gt;
  &lt;/a&gt;
  1. Observables In A HTML Template With Async Pipe
&lt;/h2&gt;

&lt;p&gt;Angular offers a simple way to handle your Observables in the HTML template via the async pipe &lt;code&gt;| async&lt;/code&gt; . The best thing is, Angular takes the unsubscribe process for you instead of doing it yourself.&lt;/p&gt;

&lt;p&gt;You can use the async pipe for singular values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cool-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;h1&amp;gt;{{pageTitle$ | async}}&amp;lt;/h1&amp;gt;
    `&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoolComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;pageTitle$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;ngOninit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageTitle$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some-url.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can use it for values that are Objects or Arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cool-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;ul&amp;gt;
            &amp;lt;li *ngFor="let item of todoList$ | async"&amp;gt;{{item.name}}&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    `&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoolComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;todoList$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;ngOninit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todoList$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;other-url.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So in this component, you don't need to trigger something with the &lt;code&gt;ngOnDestroy&lt;/code&gt; , but it automatically will unsubscribe to the subscriptions during the destruction process of the component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to learn more about the Async pipe in Angular, check out this post "&lt;a href="https://betterprogramming.pub/angular-rxjs-async-pipe-deep-dive-2510b56f793a"&gt;Angular and RxJS: A deep dive into async pipe&lt;/a&gt;" by &lt;a href="https://erxk.medium.com/"&gt;Erxk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-observables-with-takeuntil-method"&gt;
  &lt;/a&gt;
  2. Observables With takeUntil method
&lt;/h2&gt;

&lt;p&gt;Let's say you are making multiple AJAX request via the &lt;code&gt;HttpClient&lt;/code&gt;. You're not going to pass it directly to the HTML, but doing something else with the data first. So the &lt;code&gt;| async&lt;/code&gt; pipe is not ideal for this situation.&lt;/p&gt;

&lt;p&gt;Now you have multiple subscriptions!&lt;/p&gt;

&lt;p&gt;How can we unsubscribe them all at once instead of unsubscribing them one by one?&lt;/p&gt;

&lt;p&gt;First, we have to make a &lt;code&gt;Subject&lt;/code&gt; in our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({...})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoolComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;Subject&lt;/code&gt; is going to be used to store our subscriptions.&lt;/p&gt;

&lt;p&gt;Now let's make some subscriptions in our &lt;code&gt;ngOnInit&lt;/code&gt; with the &lt;code&gt;HttpClient&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({...})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoolComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;ngOninit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some-url.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Do something with the data&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;other-url.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Do something with the data&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, after the &lt;code&gt;get()&lt;/code&gt; method there is a &lt;code&gt;pipe(takeUntil(this.unsubscribe$))&lt;/code&gt;. With the &lt;code&gt;takeUntil&lt;/code&gt; we add a reference from this Observable to the &lt;code&gt;unsubscribe$&lt;/code&gt; Subject.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Subject&lt;/code&gt; holds references to both Observables during the subscription process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({...})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoolComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;ngOninit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some-url.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Do something with the data&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;other-url.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Do something with the data&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ngOnDestroy()&lt;/code&gt; method is called before a component is going to be destroyed.&lt;/p&gt;

&lt;p&gt;In this method, we call two methods.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;next()&lt;/code&gt; will pass an empty value to the subscription. With the &lt;code&gt;complete()&lt;/code&gt;, we tell the subscription it's done listening for new values.&lt;/p&gt;

&lt;p&gt;Now we don't have to worry about making one or a lot more requests via the &lt;code&gt;HttpClient&lt;/code&gt;; we can stop them all at once.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be careful with this method that you don't forget to add the &lt;code&gt;ngOnDestroy&lt;/code&gt; method to your component. We are humans, so we forget them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These two strategies will be usable in nine out of ten situations, so a great plan to implement in your Angular applications. &lt;/p&gt;

&lt;p&gt;If you have other ideas on how to handle your Observables in an Angular application in a simple way, please let me know 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" alt="hashnode-footer.png"&gt;&lt;/a&gt;&lt;br&gt;
*I hope you learned something new or are inspired to create something new after reading this story! 🤗 If so, consider subscribing via email (scroll to the top of this page) or follow me here on Hashnode.&lt;br&gt;
*&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that you can create a &lt;a href="https://hashnode.com/@devbyrayray/joinme"&gt;Developer blog like this one, yourself&lt;/a&gt;? It's entirely for free. 👍💰🎉🥳🔥&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If I left you with questions or something to say as a response, scroll down and type me a message. Please send me a &lt;a href="https://twitter.com/@devbyrayray"&gt;DM on Twitter @DevByRayRay&lt;/a&gt; when you want to keep it private. My DM's are always open 😁&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>angular</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 27th August 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 27 Aug 2021 13:45:12 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-27th-august-2021-5gp9</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-27th-august-2021-5gp9</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-d3-datadriven-documents"&gt;
  &lt;/a&gt;
  1. D3: Data-Driven Documents
&lt;/h3&gt;

&lt;p&gt;Bring data to life with SVG, Canvas and HTML.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/d3"&gt;
        d3
      &lt;/a&gt; / &lt;a href="https://github.com/d3/d3"&gt;
        d3
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Bring data to life with SVG, Canvas and HTML. 📊📈🎉
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
D3: Data-Driven Documents&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://d3js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/586ccf0aad9684edc821658cee04146cf36d1f1d5ec904bbefd72728909ccb2e/68747470733a2f2f64336a732e6f72672f6c6f676f2e737667"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D3&lt;/strong&gt; (or &lt;strong&gt;D3.js&lt;/strong&gt;) is a JavaScript library for visualizing data using web standards. D3 helps you bring data to life using SVG, Canvas and HTML. D3 combines powerful visualization and interaction techniques with a data-driven approach to DOM manipulation, giving you the full capabilities of modern browsers and the freedom to design the right visual interface for your data.&lt;/p&gt;
&lt;h2&gt;
Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/@d3/learn-d3" rel="nofollow"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/d3/d3/blob/master/API.md"&gt;API Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/d3/d3/releases"&gt;Releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://observablehq.com/@d3/gallery" rel="nofollow"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/d3/d3/wiki"&gt;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installing&lt;/h2&gt;
&lt;p&gt;If you use npm, &lt;code&gt;npm install d3&lt;/code&gt;. You can also download the &lt;a href="https://github.com/d3/d3/releases/latest"&gt;latest release on GitHub&lt;/a&gt;. For vanilla HTML in modern browsers, import D3 from Skypack:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;type&lt;/span&gt;="&lt;span class="pl-s"&gt;module&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-s1"&gt;d3&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"https://cdn.skypack.dev/d3@7"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;div&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;d3&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;selectAll&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"div"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;For legacy environments, you can load D3’s UMD bundle from an npm-based CDN such as jsDelivr; a &lt;code&gt;d3&lt;/code&gt; global is exported:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/d3/d3"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-papers-we-love"&gt;
  &lt;/a&gt;
  2. Papers We Love
&lt;/h3&gt;

&lt;p&gt;Papers from the computer science community to read and discuss.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/papers-we-love"&gt;
        papers-we-love
      &lt;/a&gt; / &lt;a href="https://github.com/papers-we-love/papers-we-love"&gt;
        papers-we-love
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Papers from the computer science community to read and discuss.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6afa11d0f8602f023ad7442cbed6fb6e4b4b4803ccad03cd2c3284488d6cc507/687474703a2f2f70617065727377656c6f76652e6f72672f696d616765732f6c6f676f2d746f702e737667"&gt;&lt;img src="https://camo.githubusercontent.com/6afa11d0f8602f023ad7442cbed6fb6e4b4b4803ccad03cd2c3284488d6cc507/687474703a2f2f70617065727377656c6f76652e6f72672f696d616765732f6c6f676f2d746f702e737667" alt="Papers We Love"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://gitter.im/papers-we-love/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0e1d483602e08155f51bc05d4855304c17029982384410f56fea38d0c2b7a467/68747470733a2f2f6261646765732e6769747465722e696d2f7061706572732d77652d6c6f76652f636f6d6d756e6974792e737667" alt="Gitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Papers We Love&lt;/strong&gt; (&lt;em&gt;PWL&lt;/em&gt;) is a community built around reading, discussing and learning more about academic computer science papers. This repository serves as a directory of some of the best papers the community can find, bringing together documents scattered across the web. You can also visit the &lt;a href="http://paperswelove.org/" rel="nofollow"&gt;Papers We Love site&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Due to &lt;a href="https://github.com/papers-we-love/papers-we-love/blob/master/.github/CONTRIBUTING.md#respect-content-licenses"&gt;licenses&lt;/a&gt; we cannot always host the papers themselves (when we do, you will see a 📜 emoji next to its title in the directory README) but we can provide links to their locations.&lt;/p&gt;
&lt;p&gt;If you enjoy the papers, perhaps stop by a local chapter meetup and join in on the vibrant discussions around them. You can also discuss &lt;em&gt;PWL&lt;/em&gt; events, the content in this repository, and/or anything related to &lt;em&gt;PWL&lt;/em&gt; on our &lt;a href="https://paperswelove.slack.com/messages/general/" rel="nofollow"&gt;Slack&lt;/a&gt;, after &lt;a href="http://papersweloveslack.herokuapp.com/" rel="nofollow"&gt;signing-up&lt;/a&gt; to join it, or on our &lt;em&gt;#paperswelove&lt;/em&gt; IRC channel on freenode.&lt;/p&gt;
&lt;h3&gt;
Chapters&lt;/h3&gt;
&lt;p&gt;Here are our official…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/papers-we-love/papers-we-love"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-probot"&gt;
  &lt;/a&gt;
  3. Probot
&lt;/h3&gt;

&lt;p&gt;A framework for building GitHub Apps to automate and improve your workflow&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/probot"&gt;
        probot
      &lt;/a&gt; / &lt;a href="https://github.com/probot/probot"&gt;
        probot
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🤖 A framework for building GitHub Apps to automate and improve your workflow
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://probot.github.io" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_FUEjgH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/probot/probot/static/robot.svg" width="160" alt="Probot's logo, a cartoon robot"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
&lt;a href="https://probot.github.io" rel="nofollow"&gt;Probot&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A framework for building GitHub Apps to automate and improve your workflow&lt;/p&gt;



&lt;p&gt;&lt;a href="https://npmjs.com/package/probot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/405aa574e25f0607a216ddbde111d728f4ed6b70a90b788ac6d5a224fe659b66/68747470733a2f2f62616467656e2e6e65742f6e706d2f762f70726f626f74" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://github.com/probot/probot/actions?query=workflow%3ACI"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhzhr-d1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/probot/probot/workflows/CI/badge.svg" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/probot/probot/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ab2a61e1ac60c9fac3278f1fc419932e49c8efe05c4bbf82845d4ccf001acc8b/68747470733a2f2f62616467656e2e6e6f772e73682f636f6465636f762f632f6769746875622f70726f626f742f70726f626f74" alt="Codecov"&gt;&lt;/a&gt; &lt;a href="https://twitter.com/ProbotTheRobot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e39bca8d831dd56049224143e0a79739e6278a8a1c3f67a62be804a96d6d2c6b/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f50726f626f74546865526f626f742e7376673f7374796c653d736f6369616c266c6f676f3d74776974746572266c6162656c3d466f6c6c6f77" alt="@ProbotTheRobot on Twitter"&gt;&lt;/a&gt;
&lt;/p&gt;




&lt;p&gt;If you've ever thought, "wouldn't it be cool if GitHub could…"; I'm going to stop you right there. Most features can actually be added via &lt;a href="https://docs.github.com/en/developers/apps"&gt;GitHub Apps&lt;/a&gt;, which extend GitHub and can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. Apps are first class actors within GitHub.&lt;/p&gt;

&lt;h2&gt;
How it works&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Probot is a framework for building &lt;a href="https://docs.github.com/en/developers/apps"&gt;GitHub Apps&lt;/a&gt; in &lt;a href="https://nodejs.org/" rel="nofollow"&gt;Node.js&lt;/a&gt;&lt;/strong&gt;, written in &lt;a href="https://www.typescriptlang.org/" rel="nofollow"&gt;TypeScript&lt;/a&gt;. GitHub Apps can listen to webhook events sent by a repository or organization. Probot uses its internal event emitter to perform actions based on those events. A simple Probot App might look like this:&lt;/p&gt;

&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-smi"&gt;module&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;exports&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;on&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"issues.opened"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-k"&gt;async&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;context&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;issueComment&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/probot/probot"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#4-vs-code-jest"&gt;
  &lt;/a&gt;
  4. VS code Jest
&lt;/h3&gt;

&lt;p&gt;The optimal flow for Jest based testing in VS Code &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jest-community"&gt;
        jest-community
      &lt;/a&gt; / &lt;a href="https://github.com/jest-community/vscode-jest"&gt;
        vscode-jest
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The optimal flow for Jest based testing in VS Code
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
vscode-jest&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/jest-community/vscode-jest/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8vQJQya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jest-community/vscode-jest/actions/workflows/node-ci.yml/badge.svg" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/jest-community/vscode-jest?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0e04b1f1e4af22e53eef986bb2ba005a45b4aaa1c67f6c90e6b50cc596fb78c3/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a6573742d636f6d6d756e6974792f7673636f64652d6a6573742f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/999a9748d50b3e99fa079cbc00d79951061f7c30e61e0c6a5e9b6c51ccab0b33/68747470733a2f2f696d672e736869656c64732e696f2f76697375616c2d73747564696f2d6d61726b6574706c6163652f762f4f7274612e7673636f64652d6a6573743f636f6c6f723d73756363657373266c6162656c3d56697375616c25323053747564696f2532304d61726b6574706c616365" alt="Visual Studio Marketplace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
v4.1 with Test Explorer &lt;/h2&gt;
&lt;p&gt;Test explorer is one of the highly requested feature for this extension. Last year vscode announced the plan for the official test explorer and we have been trying out the new proposed API since. Now the vscode test explore is live (2021 July release - v1.59), we are excited to release &lt;code&gt;v4.1&lt;/code&gt; and our users can finally tap into this great new UI experience 🎉&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/jest-community/vscode-jestimages/test-explorer.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzHc6H6R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/jest-community/vscode-jestimages/test-explorer.png" alt="test-explore.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please note, the test explorer is new and some of the features might be missing or imperfect (see &lt;a href="https://github.com/jest-community/vscode-jest#how-to-use-the-test-explorer"&gt;How to use test explore&lt;/a&gt; for more details), nevertheless, we will continue to improve it. Please do not hesitate to ask questions or file issues, thanks and have fun!&lt;/p&gt;

v4 Release
&lt;p&gt;After longer than expected development, &lt;a href="https://github.com/jest-community/vscode-jest/releases/tag/v4.0.0"&gt;v4&lt;/a&gt; is finally released! 😄&lt;/p&gt;
&lt;p&gt;This is a big release packed with changes to address many nagging issues you have been asking for, such as inconsistent…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jest-community/vscode-jest"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-unpkg"&gt;
  &lt;/a&gt;
  5. UNPKG
&lt;/h3&gt;

&lt;p&gt;UNPKG is a fast, global content delivery network for everything on npm.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mjackson"&gt;
        mjackson
      &lt;/a&gt; / &lt;a href="https://github.com/mjackson/unpkg"&gt;
        unpkg
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The CDN for everything on npm
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
UNPKG · &lt;a href="https://travis-ci.org/mjackson/unpkg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/48903686ee200bbbb4f393597e5df77fa9c1de694960445812ad9c8413085568/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6d6a61636b736f6e2f756e706b672f6d61737465722e7376673f7374796c653d666c61742d737175617265" alt="Travis"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://unpkg.com" rel="nofollow"&gt;UNPKG&lt;/a&gt; is a fast, global &lt;a href="https://en.wikipedia.org/wiki/Content_delivery_network" rel="nofollow"&gt;content delivery network&lt;/a&gt; for everything on &lt;a href="https://www.npmjs.com/" rel="nofollow"&gt;npm&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Documentation&lt;/h3&gt;
&lt;p&gt;Please visit &lt;a href="https://unpkg.com" rel="nofollow"&gt;the UNPKG website&lt;/a&gt; to learn more about how to use it.&lt;/p&gt;
&lt;h3&gt;
Sponsors&lt;/h3&gt;
&lt;p&gt;Our sponsors and backers are listed &lt;a href="https://github.com/mjackson/unpkgSPONSORS.md"&gt;in SPONSORS.md&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mjackson/unpkg"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#6-ocean"&gt;
  &lt;/a&gt;
  6. Ocean
&lt;/h3&gt;

&lt;p&gt;Web component server-side rendering.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matthewp"&gt;
        matthewp
      &lt;/a&gt; / &lt;a href="https://github.com/matthewp/ocean"&gt;
        ocean
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Web component server-side rendering
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
🌊 Ocean&lt;/h1&gt;
&lt;p&gt;Web component HTML rendering that includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rendering to &lt;a href="https://web.dev/declarative-shadow-dom/" rel="nofollow"&gt;Declarative Shadow DOM&lt;/a&gt;, requiring no JavaScript in the client.&lt;/li&gt;
&lt;li&gt;Automatic inclusion of the Declarative Shadow DOM polyfill for browsers without support.&lt;/li&gt;
&lt;li&gt;Streaming HTML responses.&lt;/li&gt;
&lt;li&gt;Compatibility with the most popular web component libraries (see a compatibility list below).&lt;/li&gt;
&lt;li&gt;Lazy &lt;a href="https://www.jameshill.dev/articles/partial-hydration/" rel="nofollow"&gt;partial hydration&lt;/a&gt; via special attributes: hydrate on page load, CPU idle, element visibility, or media queries. Or create your own hydrator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#overview"&gt;Overview&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#modules"&gt;Modules&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#main-module"&gt;Main module&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#dom-shim"&gt;DOM shim&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#hydration"&gt;Hydration&lt;/a&gt;&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#full-hydration"&gt;Full hydration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#partial-hydration"&gt;Partial hydration&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#plugins"&gt;Plugins&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/matthewp/ocean#compatibility"&gt;Compatibility&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;An &lt;em&gt;ocean&lt;/em&gt; is an environment for rendering web component code. It provides an &lt;code&gt;html&lt;/code&gt; function that looks like the ones you're used to from libraries like &lt;a href="https://github.com/WebReflection/uhtml"&gt;uhtml&lt;/a&gt; and &lt;a href="https://lit.dev/" rel="nofollow"&gt;Lit&lt;/a&gt;. Instead of creating reactive DOM in the client like those libraries, Ocean's &lt;code&gt;html&lt;/code&gt; returns an &lt;em&gt;async iterator&lt;/em&gt; that will stream out HTML strings.&lt;/p&gt;
&lt;p&gt;Ocean is somewhat low-level and is meant to be used…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matthewp/ocean"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-ackee"&gt;
  &lt;/a&gt;
  7. Ackee
&lt;/h3&gt;

&lt;p&gt;Self-hosted, Node.js based analytics tool for those who care about privacy&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/electerious"&gt;
        electerious
      &lt;/a&gt; / &lt;a href="https://github.com/electerious/Ackee"&gt;
        Ackee
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Self-hosted, Node.js based analytics tool for those who care about privacy.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/202962056a9b648c18b838372973e573cf5b2a2526a3f76b157f97e93636e654/68747470733a2f2f732e656c6563746572696f75732e636f6d2f696d616765732f61636b65652f69636f6e2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/202962056a9b648c18b838372973e573cf5b2a2526a3f76b157f97e93636e654/68747470733a2f2f732e656c6563746572696f75732e636f6d2f696d616765732f61636b65652f69636f6e2e706e67" title="Ackee" alt="Ackee logo" width="128"&gt;&lt;/a&gt;
&lt;h1&gt;
Ackee&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/electerious/Ackee/workflows/Build/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gtzltGM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/electerious/Ackee/workflows/Build/badge.svg" alt="Build"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/github/electerious/Ackee?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e119c5e4bfda2dab81cc36e6d41938c6b2f6b7bf2ce44e47c50184e9fa6828fe/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656c6563746572696f75732f41636b65652f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt; &lt;a href="https://github.com/awesome-selfhosted/awesome-selfhosted"&gt;&lt;img src="https://camo.githubusercontent.com/e5d3197f63169393ee5695f496402136b412d5e3b1d77dc5aa80805fdd5e7edb/68747470733a2f2f617765736f6d652e72652f6d656e74696f6e65642d62616467652e737667" alt="Mentioned in Awesome Selfhosted"&gt;&lt;/a&gt; &lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=CYKBESW577YWE" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/57911828d12688f535394089efb343efffbf123bffd25069517f938f2bf0e38c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f70617970616c2d646f6e6174652d3030396364652e737667" alt="Donate via PayPal"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Self-hosted, Node.js based analytics tool for those who care about privacy. Ackee runs on your own server, analyzes the traffic of your websites and provides useful statistics in a minimal interface.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ackee.electerious.com" rel="nofollow"&gt;🌍 Website&lt;/a&gt; | &lt;a href="https://demo.ackee.electerious.com" rel="nofollow"&gt;🔮 Live Demo&lt;/a&gt; | &lt;a href="https://demo.ackee.electerious.com/api" rel="nofollow"&gt;🧸 GraphQL Playground&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e78ce40a80ee22d154eaade9dc5054234290ff836d86d793a03b42c002439fac/68747470733a2f2f732e656c6563746572696f75732e636f6d2f696d616765732f61636b65652f726561646d652e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/e78ce40a80ee22d154eaade9dc5054234290ff836d86d793a03b42c002439fac/68747470733a2f2f732e656c6563746572696f75732e636f6d2f696d616765732f61636b65652f726561646d652e706e67" alt="Ackee in a browser"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
👋 Introduction&lt;/h2&gt;
&lt;p&gt;Ackee is a self-hosted analytics tool that cares about privacy. We believe that you don't need to track every aspect of your visitors. Ackee keeps tracked data anonymized to avoid that users are identifiable, while still providing helpful insights. It's the right tool for everyone who doesn't need a full-featured marketing analytics platform like Google Analytics or Matomo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Self-hosted&lt;/strong&gt;: Ackee runs on your own server and is 100% open-source&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modern technologies&lt;/strong&gt;: Lightweight Node.js and MongoDB architecture&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Beautiful&lt;/strong&gt;: Minimal and focused interface&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No cookies&lt;/strong&gt;: No unique user tracking and therefore no required cookie message&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt;: Track button clicks, newsletter subscriptions and more&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/electerious/Ackee"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-material-icon-theme"&gt;
  &lt;/a&gt;
  8. Material Icon Theme
&lt;/h3&gt;

&lt;p&gt;Get the Material Design icons into your VS Code.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/PKief"&gt;
        PKief
      &lt;/a&gt; / &lt;a href="https://github.com/PKief/vscode-material-icon-theme"&gt;
        vscode-material-icon-theme
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Available on the VSCode Marketplace
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
  &lt;br&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMkGLlWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/logo.png" alt="logo" width="200"&gt;&lt;/a&gt;
  &lt;br&gt;&lt;br&gt;
  Material Icon Theme
  &lt;br&gt;
  &lt;br&gt;
&lt;/h1&gt;
&lt;h4&gt;
Get the Material Design icons into your VS Code.&lt;/h4&gt;
&lt;p&gt;
    &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b1383c4cfb97afec362e9467849e33f04e24b2483aee933eb89652bd721d908d/68747470733a2f2f76736d61726b6574706c61636562616467652e61707068622e636f6d2f76657273696f6e2d73686f72742f706b6965662e6d6174657269616c2d69636f6e2d7468656d652e7376673f7374796c653d666f722d7468652d626164676526636f6c6f72413d32353235323626636f6c6f72423d343341303437266c6162656c3d56455253494f4e" alt="Version"&gt;&lt;/a&gt; 
    &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4fcd30a05e879fb043a9f1bc974ab93b644304ee57e2e5a271ba25cebe6c120c/68747470733a2f2f76736d61726b6574706c61636562616467652e61707068622e636f6d2f726174696e672d73686f72742f706b6965662e6d6174657269616c2d69636f6e2d7468656d652e7376673f7374796c653d666f722d7468652d626164676526636f6c6f72413d32353235323626636f6c6f72423d343341303437266c6162656c3d526174696e67" alt="Rating"&gt;&lt;/a&gt; 
    &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/319faaf12412afa3a26903eb171c4be61e8ff81e0ddbf3c4690c7a391612dea3/68747470733a2f2f76736d61726b6574706c61636562616467652e61707068622e636f6d2f696e7374616c6c732d73686f72742f504b6965662e6d6174657269616c2d69636f6e2d7468656d652e7376673f7374796c653d666f722d7468652d626164676526636f6c6f72413d32353235323626636f6c6f72423d343341303437266c6162656c3d496e7374616c6c73" alt="Installs"&gt;&lt;/a&gt; 
    &lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8ddfdbfbd29c3f3a9e04b518d798db9d6acdfdb4f918ffe27aa6997ec0a4e433/68747470733a2f2f76736d61726b6574706c61636562616467652e61707068622e636f6d2f646f776e6c6f6164732d73686f72742f504b6965662e6d6174657269616c2d69636f6e2d7468656d652e7376673f7374796c653d666f722d7468652d626164676526636f6c6f72413d32353235323626636f6c6f72423d343341303437266c6162656c3d446f776e6c6f616473" alt="Downloads"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;b&gt;Sponsored by&lt;/b&gt;&lt;br&gt;&lt;br&gt;
&lt;a title="Try CodeStream" href="https://sponsorlink.codestream.com/?utm_source=vscmarket&amp;amp;utm_campaign=pkief_material&amp;amp;utm_medium=banner" rel="nofollow"&gt;&lt;img width="300px" src="https://camo.githubusercontent.com/7d74f284b70dec6ed0b754fb262534113abc6f52bdd0ab6907eba7f142478453/68747470733a2f2f616c742d696d616765732e636f646573747265616d2e636f6d2f636f646573747265616d5f6c6f676f5f706b6965665f6d6174657269616c2e706e67"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a title="Try Stepsize" href="https://marketplace.visualstudio.com/items?itemName=Stepsize.stepsize" rel="nofollow"&gt;&lt;img width="300px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rmas193q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/stepsize.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a title="Try Bloop" href="https://bloop.ai/?utm_source=vscmarket&amp;amp;utm_campaign=material-icon-theme&amp;amp;utm_medium=banner" rel="nofollow"&gt;&lt;img width="150px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DP9kC94Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/bloop.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
File icons&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/fileIcons.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pw__Lm8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/fileIcons.png" alt="file icons"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Folder icons&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/folderIcons.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fw3WDKgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/folderIcons.png" alt="folder icons"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
Customize folder color&lt;/h4&gt;
&lt;p&gt;You can change the color of the default folder icon using the command palette:&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/set-folder-color.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6cJGOfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/set-folder-color.gif" alt="custom folder colors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;or via user settings:&lt;/p&gt;
&lt;div class="highlight highlight-source-json position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;material-icon-theme.folders.color&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;#ef5350&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
Folder themes&lt;/h4&gt;
&lt;p&gt;You can change the design of the folder icons using the command palette:&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/set-folder-theme.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMonuvur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/PKief/vscode-material-icon-theme/main/images/set-folder-theme.gif" alt="folder themes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;or via user settings:&lt;/p&gt;
&lt;div class="highlight highlight-source-json position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;material-icon-theme.folders.theme&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;specific&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Custom icon opacity&lt;/h2&gt;
&lt;p&gt;You can set a custom opacity for the icons:&lt;/p&gt;
&lt;div class="highlight highlight-source-json position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;material-icon-theme.opacity&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.5&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Custom icon saturation&lt;/h2&gt;
&lt;p&gt;If colors do not make you happy you can change the icons to have less saturation making them look grayish or completely grayscale by setting saturation to 0:&lt;/p&gt;
&lt;div class="highlight highlight-source-json position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;material-icon-theme.saturation&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;0.5&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Custom icon associations&lt;/h2&gt;
&lt;p&gt;You can customize the icon associations directly in the user settings.&lt;/p&gt;
&lt;h3&gt;
File associations&lt;/h3&gt;
&lt;p&gt;With the &lt;code&gt;*.[extension]&lt;/code&gt; pattern you can define custom…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/PKief/vscode-material-icon-theme"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-toast-ui-editor"&gt;
  &lt;/a&gt;
  9. Toast UI Editor
&lt;/h3&gt;

&lt;p&gt;Markdown WYSIWYG Editor. GFM Standard + Chart &amp;amp; UML Extensible.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nhn"&gt;
        nhn
      &lt;/a&gt; / &lt;a href="https://github.com/nhn/tui.editor"&gt;
        tui.editor
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🍞📝 Markdown WYSIWYG Editor. GFM Standard + Chart &amp;amp; UML Extensible.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/5d5d1faf2493898112ec87f59fcafbc2f8da37b74826df199713d62eb7191fd4/68747470733a2f2f756963646e2e746f6173742e636f6d2f746f61737475692f696d672f7475692d656469746f722d62692e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/5d5d1faf2493898112ec87f59fcafbc2f8da37b74826df199713d62eb7191fd4/68747470733a2f2f756963646e2e746f6173742e636f6d2f746f61737475692f696d672f7475692d656469746f722d62692e706e67" alt="TOAST UI Editor"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;GFM  Markdown and WYSIWYG Editor - Productive and Extensible&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/nhn/tui.editor/releases/latest"&gt;&lt;img src="https://camo.githubusercontent.com/e0dbb29be68bcd8de7327ad1f4cca471a192962babc959c097b1e69b5df4fa13/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6e686e2f7475692e656469746f722e7376673f696e636c7564655f70726572656c6561736573" alt="github release version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@toast-ui/editor" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4a093de51f4dd180c7dfc4f4cb8816b5f2e072131320b3385e2536352c1653bc/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40746f6173742d75692f656469746f722e737667" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://github.com/nhn/tui.editor/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/be0292e30c5a5bb5edc648ba757413159e61004c40a965e606808baecfd66d4b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6e686e2f7475692e656469746f722e737667" alt="license"&gt;&lt;/a&gt; &lt;a href="https://github.com/nhn/tui.editor/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22"&gt;&lt;img src="https://camo.githubusercontent.com/e10e424cff735773e01af03ad1f573f61bd0e353ab48c75419d003f0982842e0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d6666363962342e737667" alt="PRs welcome"&gt;&lt;/a&gt; &lt;a href="https://github.com/nhn"&gt;&lt;img src="https://camo.githubusercontent.com/e3c5b8ddcf160d97d2b29659c63805ba128672dee11938e49282215b3c96d50e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2533432532462533452532307769746825323025453225393925413525323062792d4e484e2d6666313431342e737667" alt="code with hearth by NHN"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/37766175/121809054-446bac80-cc96-11eb-9139-08c6d9ad2d88.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daNnFpXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/37766175/121809054-446bac80-cc96-11eb-9139-08c6d9ad2d88.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
🚩 Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-packages"&gt;Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-why-toast-ui-editor"&gt;Why TOAST UI Editor?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-browser-support"&gt;Browser Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-pull-request-steps"&gt;Pull Request Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-toast-ui-family"&gt;TOAST UI Family&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-used-by"&gt;Used By&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhn/tui.editor#-license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
📦 Packages&lt;/h2&gt;
&lt;h3&gt;
TOAST UI Editor&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nhn/tui.editor/tree/master/apps/editor"&gt;&lt;code&gt;@toast-ui/editor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plain JavaScript component&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
TOAST UI Editor's Wrappers&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nhn/tui.editor/tree/master/apps/react-editor"&gt;&lt;code&gt;@toast-ui/react-editor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://reactjs.org/" rel="nofollow"&gt;React&lt;/a&gt; wrapper component&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nhn/tui.editor/tree/master/apps/vue-editor"&gt;&lt;code&gt;@toast-ui/vue-editor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://vuejs.org/" rel="nofollow"&gt;Vue&lt;/a&gt; wrapper component&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
TOAST UI Editor's Plugins&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nhn/tui.editor/tree/master/plugins/chart"&gt;&lt;code&gt;@toast-ui/editor-plugin-chart&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin to render chart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nhn/tui.editor/tree/master/plugins/code-syntax-highlight"&gt;&lt;code&gt;@toast-ui/editor-plugin-code-syntax-highlight&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin to highlight code syntax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nhn/tui.editor/tree/master/plugins/color-syntax"&gt;&lt;code&gt;@toast-ui/editor-plugin-color-syntax&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin to color editing text&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nhn/tui.editor/tree/master/plugins/table-merged-cell"&gt;&lt;code&gt;@toast-ui/editor-plugin-table-merged-cell&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin to merge table columns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/nhn/tui.editor/tree/master/plugins/uml"&gt;&lt;code&gt;@toast-ui/editor-plugin-uml&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Plugin to render UML&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
🤖 Why TOAST UI Editor?&lt;/h2&gt;
&lt;p&gt;TOAST UI Editor provides &lt;strong&gt;Markdown mode&lt;/strong&gt; and &lt;strong&gt;WYSIWYG mode&lt;/strong&gt;. Depending on the type of use you want like production of &lt;em&gt;Markdown&lt;/em&gt; or maybe to just edit the &lt;em&gt;Markdown&lt;/em&gt;. The TOAST UI Editor can be helpful for both the usage. It offers &lt;strong&gt;Markdown mode&lt;/strong&gt; and &lt;strong&gt;WYSIWYG mode&lt;/strong&gt;, which can be switched any…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nhn/tui.editor"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-international-telephone-input"&gt;
  &lt;/a&gt;
  10. International Telephone Input
&lt;/h3&gt;

&lt;p&gt;A JavaScript plugin for entering and validating international telephone numbers&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jackocnr"&gt;
        jackocnr
      &lt;/a&gt; / &lt;a href="https://github.com/jackocnr/intl-tel-input"&gt;
        intl-tel-input
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A JavaScript plugin for entering and validating international telephone numbers
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h4&gt;
IMPORTANT: since v14 we have removed the jQuery dependency. See below for how to initialise and use the plugin with pure JavaScript. If you want to stick with the jQuery version, there is now a separate jQuery wrapped version.&lt;/h4&gt;

&lt;h1&gt;
International Telephone Input &lt;a href="https://travis-ci.org/jackocnr/intl-tel-input" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3c6bdc65bed14aa1281ab278d5ebeac7259926ac5506b5031490072cae1c43a4/68747470733a2f2f7472617669732d63692e6f72672f6a61636b6f636e722f696e746c2d74656c2d696e7075742e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7a5f39d11cc28876f006cecccbe20163fd10d6cc2f0156ec3eb26d999a527e0b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6a61636b6f636e722f696e746c2d74656c2d696e7075742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/7a5f39d11cc28876f006cecccbe20163fd10d6cc2f0156ec3eb26d999a527e0b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7061636b6167652d6a736f6e2f762f6a61636b6f636e722f696e746c2d74656c2d696e7075742e737667"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/998ab7fcbf68e32b8228069b7f20a0ec83be192281f5cba4c9c9cd717260bd8e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f696e746c2d74656c2d696e7075742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/998ab7fcbf68e32b8228069b7f20a0ec83be192281f5cba4c9c9cd717260bd8e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f696e746c2d74656c2d696e7075742e737667"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;A JavaScript plugin for entering and validating international telephone numbers. It adds a flag dropdown to any input, detects the user's country, displays a relevant placeholder and provides formatting/validation methods.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8ab702251e06630c69065dadfecde9feda9975a8e7707c75ec1ee085b4fc6b04/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f76616e696c6c612e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/8ab702251e06630c69065dadfecde9feda9975a8e7707c75ec1ee085b4fc6b04/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f76616e696c6c612e706e67" width="424" height="246"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you like it, please consider making a donation, which you can do from &lt;a href="http://intl-tel-input.com" rel="nofollow"&gt;the demo page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Sponsored by&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b189a3be536615e042602cbf9906841aae87ecbc9c65496bbcba35f420bf68b5/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f7477696c696f2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/b189a3be536615e042602cbf9906841aae87ecbc9c65496bbcba35f420bf68b5/68747470733a2f2f7261772e6769746875622e636f6d2f6a61636b6f636e722f696e746c2d74656c2d696e7075742f6d61737465722f73637265656e73686f74732f7477696c696f2e706e67" height="100"&gt;&lt;/a&gt;&lt;/p&gt;
Use &lt;a href="https://www.twilio.com/blog/international-telephone-input-twilio?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=intl_tel_input" rel="nofollow"&gt;Twilio's API to build phone verification, SMS 2FA, appointment reminders, marketing notifications and so much more&lt;/a&gt;. We can't wait to see what you build
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#demo-and-examples"&gt;Demo and Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#browser-compatibility"&gt;Browser Compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#getting-started-using-a-bundler-eg-webpack"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#recommended-usage"&gt;Recommended Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#initialisation-options"&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#public-methods"&gt;Public Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#static-methods"&gt;Static Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#events"&gt;Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#utilities-script"&gt;Utilities Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jackocnr/intl-tel-input#attributions"&gt;Attributions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Demo and Examples&lt;/h2&gt;
&lt;p&gt;You can view a live…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jackocnr/intl-tel-input"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +2,182 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners"&gt;Web dev for beginners&lt;/a&gt; +1,157 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/filebrowser/filebrowser"&gt;File Browser&lt;/a&gt; +909 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/basarat/typescript-book"&gt;TypeScript Book&lt;/a&gt; +615 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt; +496 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/Akryum/peeky"&gt;Peeky&lt;/a&gt; +31%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mikepenz/release-changelog-builder-action"&gt;release-changelog-builder-action&lt;/a&gt; +26%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/handsontable/hyperformula"&gt;HyperFormula&lt;/a&gt; +19%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lemonadejs/lemonadejs"&gt;LemonadeJS&lt;/a&gt; +12%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jlongster/absurd-sql"&gt;absurd-sql&lt;/a&gt; +12%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +8,317 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for Beginners&lt;/a&gt; +3,558 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners"&gt;Web dev for beginners&lt;/a&gt; +3,427 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tauri-apps/tauri"&gt;Tauri&lt;/a&gt; +2,982 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Developer Roadmap&lt;/a&gt; +2,725 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/bubkoo/html-to-image"&gt;html-to-image&lt;/a&gt; +95%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/saadeghi/daisyui"&gt;DaisyUI&lt;/a&gt; +91%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +86%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/BuilderIO/mitosis"&gt;Mitosis&lt;/a&gt; +69%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vechai/vechaiui"&gt;Vechai UI&lt;/a&gt; +56%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>testing</category>
    </item>
    <item>
      <title>Monitor your Nodejs application with OpenTelemetry and SigNoz</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Fri, 27 Aug 2021 13:12:58 +0000</pubDate>
      <link>https://dev.to/signoz/monitor-your-nodejs-application-with-opentelemetry-and-signoz-21k5</link>
      <guid>https://dev.to/signoz/monitor-your-nodejs-application-with-opentelemetry-and-signoz-21k5</guid>
      <description>&lt;p&gt;OpenTelemetry can auto-instrument many common modules for a Javascript application. The telemetry data captured can then be sent to SigNoz for analysis and visualization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZldkcrEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1t5n6kds8c3fdp1iwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZldkcrEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by1t5n6kds8c3fdp1iwa.png" alt="Monitor your Nodejs applications with SigNoz"&gt;&lt;/a&gt;SigNoz UI&lt;/p&gt;

&lt;p&gt;OpenTelemetry is a set of tools, APIs, and SDKs used to instrument applications to create and manage telemetry data(Logs, metrics, and traces). For any distributed system based on microservice architecture, it's an operational challenge to solve performance issues quickly.&lt;/p&gt;

&lt;p&gt;Telemetry data helps engineering teams to troubleshoot issues across services and identify the root causes. In other words, telemetry data powers observability for your distributed applications.&lt;/p&gt;

&lt;p&gt;Steps to get started with OpenTelemetry for a Nodejs application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installing SigNoz&lt;/li&gt;
&lt;li&gt;Installing sample Nodejs app&lt;/li&gt;
&lt;li&gt;Set up OpenTelemetry and send data to SigNoz&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-signoz"&gt;
  &lt;/a&gt;
  Installing SigNoz
&lt;/h2&gt;

&lt;p&gt;You can get started with SigNoz using just three commands at your terminal if you have Docker installed. You can read about other deployment options from &lt;a href="https://signoz.io/docs/deployment/docker/"&gt;SigNoz documentation&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will have an option to choose between ClickHouse or Kafka + Druid as a storage option. Trying out SigNoz with ClickHouse database takes less than 1.5GB of memory, and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;When you are done installing SigNoz, you can access the UI at: &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The application list shown in the dashboard is from a sample app called HOT R.O.D that comes bundled with the SigNoz installation package.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VKJPr5Ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yhqjwalv45oogwg7z9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VKJPr5Ws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yhqjwalv45oogwg7z9i.png" alt="SigNoz dashboard"&gt;&lt;/a&gt;SigNoz dashboard&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-sample-nodejs-application"&gt;
  &lt;/a&gt;
  Install sample Nodejs application
&lt;/h2&gt;

&lt;p&gt;You need to ensure that you have &lt;strong&gt;Node.js version 12 or newer&lt;/strong&gt;. You can download the latest version of Node.js &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt;. For the sample application, let's create a basic 'hello world' express.js application.&lt;/p&gt;

&lt;p&gt;Steps to get the app set up and running:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a directory and install express
Make a directory for your sample app on your machine. Then open up the terminal, navigate to the directory path and install express with the following command:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   npm i express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Setup server.js
Create a file called 'server.js' in your directory and with any text editor setup your 'Hello World' file with the code below:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   const express = require('express');

   const app = express();

   app.get('/hello', (req, res) =&amp;gt; {
   res.status(200).send('Hello World');
   });

   app.listen(9090);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Boot up the server with the following command on the terminal:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check if your app is working by visiting: &lt;a href="http://localhost:9090/hello"&gt;http://localhost:9090/hello&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you are finished checking, exit the localhost on your terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-opentelemetry-and-send-data-to-signoz"&gt;
  &lt;/a&gt;
  Set up OpenTelemetry and send data to SigNoz
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In the same directory path at the terminal, install the OpenTelemetry launcher package with this command:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   npm install lightstep-opentelemetry-launcher-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The OpenTelemetry launcher makes getting started with OpenTelemetry easier by reducing configuration boilerplate.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To use OpenTelemetry, you need to start the OpenTelemetry SDK before loading your application. By initializing OpenTelemetry first, we enable OpenTelemetry to apply available instrumentation and auto-detect packages before the application starts to run. To do that, go to your directory and create a new file named, "server_init.js". This will act as the new entry point for your app. Paste the following code in the file:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   const {
    lightstep,
    opentelemetry,
   } = require('lightstep-opentelemetry-launcher-node');

   const sdk = lightstep.configureOpenTelemetry();

   sdk.start().then(() =&amp;gt; {
    require('./server');
   });

   function shutdown() {
    sdk.shutdown().then(
      () =&amp;gt; console.log("SDK shut down successfully"),
      (err) =&amp;gt; console.log("Error shutting down SDK", err),
    ).finally(() =&amp;gt; process.exit(0))
   };

   process.on('exit', shutdown);
   process.on('SIGINT', shutdown);
   process.on('SIGTERM', shutdown);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Once the file is created, you only need to run one last command at your terminal, which passes the necessary environment variables. Here, you also set SigNoz as your backend analysis tool.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   OTEL_EXPORTER_OTLP_SPAN_ENDPOINT="http://&amp;lt;IP of SigNoz Backend&amp;gt;:55681/v1/trace" OTEL_METRICS_EXPORTER=none LS_SERVICE_NAME=&amp;lt;service name&amp;gt; node server_init.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replacing the placeholders in the above command for local host:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IP of SigNoz Backend&lt;/code&gt;: localhost (since we are running SigNoz on our local host)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;service name&lt;/code&gt; : sample_app (you can give whatever name that suits you)&lt;/p&gt;

&lt;p&gt;So the final command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   OTEL_EXPORTER_OTLP_SPAN_ENDPOINT="http://localhost:55681/v1/trace" OTEL_METRICS_EXPORTER=none LS_SERVICE_NAME=sample_app node server_init.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, congratulations! You have instrumented your sample Node.js app. You can now access the SigNoz dashboard at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to monitor your app for performance metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzzZGSGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sl4xyme55jarzzq6za0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzzZGSGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sl4xyme55jarzzq6za0.png" alt="Sample nodejs app in the applications monitored"&gt;&lt;/a&gt;Sample_app in the list of applications monitored&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metrics-and-traces-of-the-nodejs-application"&gt;
  &lt;/a&gt;
  Metrics and Traces of the Nodejs application
&lt;/h2&gt;

&lt;p&gt;SigNoz makes it easy to visualize metrics and traces captured through OpenTelemetry instrumentation.&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box RED metrics charts and visualization. RED metrics stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate of requests&lt;/li&gt;
&lt;li&gt;Error rate of requests&lt;/li&gt;
&lt;li&gt;Duration taken by requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2RrWRlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77dv0497auduw1ivd4j9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2RrWRlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77dv0497auduw1ivd4j9.png" alt="Sample nodejs app in the applications monitored"&gt;&lt;/a&gt;Measure things like application latency, requests per sec, error percentage and see your top endpoints&lt;/p&gt;

&lt;p&gt;You can then choose a particular timestamp where latency is high to drill down to traces around that timestamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SW58n7lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyc9wucgwk8ntyz6xndy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SW58n7lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyc9wucgwk8ntyz6xndy.png" alt="See traces, and apply powerful filters on trace data"&gt;&lt;/a&gt;View of traces at a particular timestamp&lt;/p&gt;

&lt;p&gt;You can use flamegraphs to exactly identify the issue causing the latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--84sgdf_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcu3k3l75lka9kejoz3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--84sgdf_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pcu3k3l75lka9kejoz3s.png" alt="Flamegraphs for distributed tracing"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry makes it very convenient to instrument your Nodejs application. You can then use an open-source APM tool like SigNoz to analyze the performance of your app. As SigNoz offers a full-stack observability tool, you don't have to use multiple tools for your monitoring needs.&lt;/p&gt;

&lt;p&gt;You can try out SigNoz by visiting its GitHub repo 👇&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you face any issues while trying out SigNoz, feel free to write to us at: &lt;a href="mailto:support@signoz.io"&gt;support@signoz.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to read more about SigNoz 👇&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/blog/monitoring-your-go-application-with-signoz/"&gt;Golang Application Performance Monitoring with SigNoz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>monitoring</category>
      <category>devops</category>
    </item>
    <item>
      <title>5 tools to automate your development</title>
      <author>Petar Garžina</author>
      <pubDate>Fri, 27 Aug 2021 12:43:48 +0000</pubDate>
      <link>https://dev.to/pgarzina/5-tools-to-automate-your-development-3m</link>
      <guid>https://dev.to/pgarzina/5-tools-to-automate-your-development-3m</guid>
      <description>&lt;p&gt;Automating your development with Dependabot, Auto Assign, Merge Freeze, Husky and Scheduled reminders.&lt;/p&gt;

&lt;p&gt;The idea of this post is to introduce some of the tools and integrations that made our development life easier.&lt;/p&gt;

&lt;p&gt;Most of these are pretty straightforward to implement into your workflow but for the ones that have a couple of gotchas I might write an extended introductory version for that tool alone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-dependabot"&gt;
  &lt;/a&gt;
  1. Dependabot
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#automated-dependency-updates"&gt;
  &lt;/a&gt;
  &lt;em&gt;Automated dependency updates&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Dependabot creates pull requests to keep your dependencies secure and up-to-date.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dependabot.com/"&gt;Dependabot&lt;/a&gt; is dead simple and their punchline clearly states what it does. We started using it a couple of years back, a bit before &lt;a href="https://dependabot.com/blog/hello-github/"&gt;Github acquired it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main reason was that, at the time our current team took over the Front End division, there were a lot of outdated dependencies which we wanted to update and wanted to keep up to date. We found Dependabot, added it to our projects, and let it do its magic ever since.&lt;/p&gt;

&lt;p&gt;Now it's natively a part of Github, so adding it is even easier than before.  You can &lt;a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically"&gt;check out&lt;/a&gt; how to set up Dependabot, but in the end you'll end up with a &lt;code&gt;dependabot.yml&lt;/code&gt; in your &lt;code&gt;.github&lt;/code&gt; folder.&lt;br&gt;
Ours looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;updates&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;package-ecosystem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;npm"&lt;/span&gt; &lt;span class="c1"&gt;# See documentation for possible values&lt;/span&gt;
    &lt;span class="na"&gt;directory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/"&lt;/span&gt; &lt;span class="c1"&gt;# Location of package manifests&lt;/span&gt;
    &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;daily"&lt;/span&gt;
    &lt;span class="na"&gt;open-pull-requests-limit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="na"&gt;commit-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
       &lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;BleedingEdge"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing that differs from the default settings is that we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;chose npm as our package-ecosystem&lt;/li&gt;
&lt;li&gt;limited the number of open PRs to 2&lt;/li&gt;
&lt;li&gt;added a prefix for the default Dependabots commit message (you'll see later why)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Four years back we had 3 frontend repos, now we have around 14 active ones. Manually keeping every dependency up to date would be extremely time consuming. Dependabot helps a lot, but it still takes time to review and merge all the PR's. We usually take a day, after our weekly release, to merge Dependabots pull requests.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Writing this got me wondering if we could set the bot to open PR's only on major, minor or patch versions and indeed the feature &lt;a href="https://github.com/dependabot/dependabot-core/issues/2219"&gt;was requested in 2018&lt;/a&gt; and got released a few months ago and now you can ignore SemVer updates of your choice. Check out &lt;a href="https://github.blog/changelog/2021-05-21-dependabot-version-updates-can-now-ignore-major-minor-patch-releases/"&gt;GitHub's blog post&lt;/a&gt; for more.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-auto-assign"&gt;
  &lt;/a&gt;
  2. Auto Assign
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#add-reviewersassignees-to-pull-requests-when-pull-requests-are-opened"&gt;
  &lt;/a&gt;
  &lt;em&gt;Add reviewers/assignees to pull requests when pull requests are opened.&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;So you opened a pull request, you need at least two approvals and you need to add reviewers to your pull request. Every single time.&lt;/p&gt;

&lt;p&gt;Things are pretty obvious, let the bot do it. &lt;/p&gt;

&lt;p&gt;Setting up is easy, go to &lt;a href="https://probot.github.io/apps/auto-assign/"&gt;probot.github.io/apps/auto-assign&lt;/a&gt; hit the Add to Github button and don't ever worry about manually adding reviewers!&lt;br&gt;
Similar to Dependabot, you will end up with a &lt;code&gt;auto_assing.yml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Set to true to add reviewers to pull requests&lt;/span&gt;
&lt;span class="na"&gt;addReviewers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="c1"&gt;# Set to true to add assignees to pull requests&lt;/span&gt;
&lt;span class="na"&gt;addAssignees&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;

&lt;span class="c1"&gt;# A list of reviewers to be added to pull requests (GitHub user name)&lt;/span&gt;
&lt;span class="na"&gt;reviewers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;teammember1&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;teammember2&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;teammember3&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;...&lt;/span&gt;


&lt;span class="c1"&gt;# A number of reviewers added to the pull request&lt;/span&gt;
&lt;span class="c1"&gt;# Set 0 to add all the reviewers (default: 0)&lt;/span&gt;
&lt;span class="na"&gt;numberOfReviewers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c1"&gt;# A list of keywords to be skipped the process that add reviewers if pull requests include it&lt;/span&gt;
&lt;span class="na"&gt;skipKeywords&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;BleedingEdge&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have nothing out of the ordinary here. We are utilizing the &lt;em&gt;skipKeywords&lt;/em&gt; option with the &lt;em&gt;BleedingEdge&lt;/em&gt; keyword that if you remember Dependabot prefixes to each of its pull requests. We handle the pull requests Dependabot opens a little bit differently and don't want to burden all the reviewers with them.&lt;/p&gt;

&lt;p&gt;Once the Pull request is opened the bot kicks in and you see it in the timeline requesting reviews:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6ms0wVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ke3agursj98fenqcs28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6ms0wVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ke3agursj98fenqcs28.png" alt="Auto assign bot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can also try and use the default settings Github provides for Code Review Assignments. Just go to your team page, in the top right hit Settings and you'll find the Code review assignments tab. We tried it but it didn't work out for us.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-merge-freeze"&gt;
  &lt;/a&gt;
  3. Merge Freeze
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#the-code-freeze-tool-to-block-merging-and-deployments"&gt;
  &lt;/a&gt;
  &lt;em&gt;The code freeze tool to block merging and deployments&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;The reason for adding merge freeze originated from a simple question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Can you tell all the developers to stop merging since we are starting regression?&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We could announce it in our team's channel in hopes that everyone reads the message in time. Or we could integrate a tool that allows the QA team to issue a command on Slack that freezes/unfreezes merging to the repository. &lt;a href="https://www.mergefreeze.com/"&gt;Merge Freeze&lt;/a&gt; to the rescue.&lt;/p&gt;

&lt;p&gt;Again, setting up, nothing too complex. What we did find Merge Freeze is missing is the ability to bulk freeze. It worked well when we needed to freeze a couple of repos. But once the number of our repositories increased to over 10, manually entering the command more than 10 times... you get it.&lt;/p&gt;

&lt;p&gt;For this we used &lt;a href="https://slack.com/apps"&gt;Slack Apps&lt;/a&gt; and &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We created a custom Slack App for our workspace called Deployment, that has two Slash commands: &lt;code&gt;/freeze_all&lt;/code&gt; and &lt;code&gt;/unfreeze_all&lt;/code&gt;. Both commands have the Request URL set to our Lambda url, and pass the freeze value as a query parameter: &lt;code&gt;?freeze=true | false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using it on Slack looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uw8rpAUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79wp9ch4ok8h3fn00h6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uw8rpAUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79wp9ch4ok8h3fn00h6o.png" alt="Slack Freeze command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Merge Freeze tool exposes an API endpoint for each repository you add to it, which you can use to freeze or unfreeze it. That makes the Lambda rather simple, it just makes a POST request to each of the endpoints provided by MergeFreeze.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;freezeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFreezeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;freezeValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BOOM! You need to provide a freeze value as a query param, either true or false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baseOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mergefreeze.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Length&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appOneOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/api/branches/your-organization/your-repo/main/?access_token=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;frozen=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;freezeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;user_name=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;baseOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="cm"&gt;/** Removed the rest of declaration to keep the preview short */&lt;/span&gt;


  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;doRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appOneOptions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="nx"&gt;doRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appElevenOptions&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm done with all your promises!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Text that gets return to Slack that is only visible to the person entering the command&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You have such power!!!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEncoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;responseBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;responseBody&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseBody&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFreezeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;freezeQueryString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;freezeQueryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;freezeQueryString&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;freezeQueryString&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;freezeQueryString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyQueryParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bodyQueryParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user_name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Web API&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After entering the command, MergeFreeze lists all the repos that got frozen or unfrozen and you get a confirmation message from Slack, making your work day a bit better!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lOVL_Cj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jwu3j6pjccg1clsw15y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lOVL_Cj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1jwu3j6pjccg1clsw15y.png" alt="Much Power"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the regression is done, everything is pushed to Production and is smoke tested, the lead QA issues the &lt;code&gt;unfreeze_all&lt;/code&gt; command and life goes on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-husky"&gt;
  &lt;/a&gt;
  4. Husky
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#modern-native-git-hooks-made-easy"&gt;
  &lt;/a&gt;
  &lt;em&gt;Modern native Git hooks made easy&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;We use Jira as our work management tool so we have to prepend the ticket ID to our branch names and commit messages in order to utilize both the Development panel when viewing an issue and VSCodes extension GitLens:&lt;/p&gt;

&lt;p&gt;Jira ticket Development panel:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2yKQY8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wgvumpwofinjccdlsak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2yKQY8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wgvumpwofinjccdlsak.png" alt="Jira Development Panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that each time you create a branch you have to remember to include the Jira issue ID, eg: task-&lt;strong&gt;ND-123&lt;/strong&gt;-add-authentication. That alone was not a big deal as it quickly became a habit. But what was a PIA was prepending it to every commit message. The 1st automation round was just setting up the git &lt;code&gt;prepare-commit-message&lt;/code&gt; hook on your local machine, but as the team grew larger we needed a better solution which Husky provided!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://typicode.github.io/husky"&gt;Husky&lt;/a&gt; in combination with &lt;a href="https://github.com/bk201-/jira-prepare-commit-msg"&gt;jira-prepare-commit-msg&lt;/a&gt; is what worked for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"prepare-commit-msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"jira-prepare-commit-msg"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"jira-prepare-commit-msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"messagePattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$J $M"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jiraTicketPattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;w+-&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;w+-&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;d+)"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.3.8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jira-prepare-commit-msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.5.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JIRA ticket ID is taken from a git branch name. Now you could just write &lt;code&gt;commit -m "Fixing a typo"&lt;/code&gt; and you would get a commit message looking like &lt;em&gt;task-ND-123-Fixing a typo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In case you did not name your branch correctly eg: missing Jira ticket ID you would get an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;my-application git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; ✗ git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add authentication methods"&lt;/span&gt;
husky &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; prepare-commit-msg &lt;span class="o"&gt;(&lt;/span&gt;node v14.15.0&lt;span class="o"&gt;)&lt;/span&gt;
JIRA prepare commit msg &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; start
JIRA prepare commit msg &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; Error: The JIRA ticket ID not found
JIRA prepare commit msg &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This came in nicely as everything was set up in &lt;code&gt;package.json&lt;/code&gt; and a new developer would do &lt;code&gt;npm i&lt;/code&gt; and she/he is pretty much set, no need to manually configure hooks.&lt;/p&gt;

&lt;p&gt;But the Jira Ticket ID in the commit message in combination with GitLens is what really made this super useful. &lt;/p&gt;

&lt;p&gt;GitLens with Git blame annotations:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0dUSa_V_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig9br67fr317myzh0sed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dUSa_V_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ig9br67fr317myzh0sed.png" alt="Visual Studio Code and GitLens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There were a lot of times where we had to, for various reasons, open up and read the Jira issue associated with the code change. Having the ticket ID at each mouse click throughout the codebase saved us a lot of time. (opening it in the browser is easy as well, just take the Jira ID and add it after &lt;em&gt;.../browse/&lt;/em&gt; + &lt;em&gt;ND-123&lt;/em&gt; e.g., &lt;a href="https://your-organization.atlassian.net/browse/ND-123"&gt;https://your-organization.atlassian.net/browse/ND-123&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;GitLens is a cool tool which I personally use on a daily basis. It helps you to visualize code authorship at a glance via Git blame annotations and code lens. You can also very easily navigate back in history to see past commits which is useful as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-scheduled-reminders-for-pull-requests"&gt;
  &lt;/a&gt;
  5. Scheduled reminders for Pull Requests
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#scheduled-reminders-help-teams-focus-on-the-most-important-review-requests"&gt;
  &lt;/a&gt;
  &lt;em&gt;Scheduled reminders help teams focus on the most important review requests&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This is something we added not too long ago, just a bit after we moved to Micro Frontend Architecture. One of the reasons for adding it was that the number of repositories increased from 4 to 14 so having a dedicated channel for open pull requests made sense. Prior to this we would post a link of the PR in our team's main channel, or would hope people would see it in their email. This way we moved the noise to a dedicated channel, and the devs know the team will get automatically notified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GFKfRvK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75ike2bcdg4sh4eossx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GFKfRvK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75ike2bcdg4sh4eossx1.png" alt="GitHub Scheduled Reminders"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get notifications on every working day each full hour from 8-16. It ignores approved pull requests (in our case when 2+ ppl approved it) and we also have ignore terms for &lt;em&gt;BleedingEdge&lt;/em&gt; so it ignores pull requests opened by Dependabot.&lt;/p&gt;

&lt;p&gt;Setting up &lt;a href="https://docs.github.com/en/organizations/organizing-members-into-teams/managing-scheduled-reminders-for-your-team"&gt;scheduled reminders&lt;/a&gt; is straightforward and you can find the github docs &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/managing-your-membership-in-organizations/managing-your-scheduled-reminders"&gt;here&lt;/a&gt;. This is how it looks like once its up, in our case it posts messages in a private &lt;em&gt;frontend-pull-requests&lt;/em&gt; channel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSns9fMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i1gnp3rl00oev5yvf6r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSns9fMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3i1gnp3rl00oev5yvf6r.png" alt="FrontEnd Pull Requests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;There are a lot of improvements that we could include on top of what we have, like creating branches directly from Jira would ease up on having to remember the naming convention. Or maybe we could have chosen a merge freeze tool that has bulk freeze built in. But usually we had limited time for investigation, or it was good enough at that time, and later on we just tried to improve the process instead of replacing the tool. &lt;br&gt;
If you have any suggestions, please do post them in the discussion below! &lt;/p&gt;




&lt;p&gt;Feel free to connect 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/pgarzina"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/pgarzina/"&gt;Instagram&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/petar-garzina/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>State of Go / Golang in 2021</title>
      <author>Meat Boy</author>
      <pubDate>Fri, 27 Aug 2021 12:40:10 +0000</pubDate>
      <link>https://dev.to/meatboy/state-of-go-golang-in-2021-34ni</link>
      <guid>https://dev.to/meatboy/state-of-go-golang-in-2021-34ni</guid>
      <description>&lt;p&gt;What is the state of Go in 2021 in your opinion? Is it worth learning or write applications? &lt;/p&gt;

&lt;p&gt;The performance of apps written in Go is great but for many businesses, that's not enough. Crucial is also stability, the potential of maintenance in long therm and so on. What do you think about the ecosystem around Go language?&lt;/p&gt;

</description>
      <category>go</category>
      <category>discuss</category>
      <category>webdev</category>
      <category>backend</category>
    </item>
    <item>
      <title>Firebase Authentication .NET 5</title>
      <author>Ivan Pesenti</author>
      <pubDate>Fri, 27 Aug 2021 12:38:02 +0000</pubDate>
      <link>https://dev.to/ivan_pesenti/firebase-authentication-net-5-29oi</link>
      <guid>https://dev.to/ivan_pesenti/firebase-authentication-net-5-29oi</guid>
      <description>&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt; has always been one of my major concerns when developing applications, especially in web development where our resources can be consumed from everywhere (and potentially from anyone). Be able to restrict the resources' access to only certain people is fundamental.&lt;br&gt;&lt;br&gt;
Nowadays data loss, identity theft and other cyber threats are constantly increasing. So, in order to reduce this probability that could lead (in the worst scenario) to a business failure, we must write &lt;em&gt;secure&lt;/em&gt; and &lt;em&gt;reliable&lt;/em&gt; code in our daily development life.&lt;br&gt;
If all of this is a also for you a concern I strongly encourage u to read carefully this blog post (that will be the first of a series of three).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-big-picture"&gt;
  &lt;/a&gt;
  The big picture 🌍
&lt;/h2&gt;

&lt;p&gt;Throughout this series we're going to build a web api project that supports two authentication providers: &lt;strong&gt;Google Firebase&lt;/strong&gt; and our &lt;strong&gt;web api itself&lt;/strong&gt;. The user, in order to access the web api resource, must be authenticated either against the former or against the latter authentication providers. If this is the case the user will receive a &lt;strong&gt;200&lt;/strong&gt; OK response together with the requested data. Otherwise, it will receive a &lt;strong&gt;401&lt;/strong&gt; Unauthorized response with no data. The authentication mechanism would be the &lt;em&gt;token authentication&lt;/em&gt; in JWT format.&lt;br&gt;&lt;br&gt;
🧐NOTE🧐: if u need to learn more about Google Firebase u can checkout this &lt;a href="https://firebase.google.com/"&gt;link&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
To maintain the blog post leaner I decided to split this building process into three parts. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-first-piece"&gt;
  &lt;/a&gt;
  The first piece
&lt;/h2&gt;

&lt;p&gt;In this blog post we're gonna to create a web api project, create some requests to test it, configure stuff related to Firebase in our web api proj, use the Firebase console to manage our proj and implement the Firebase authentication mechanism in our web api. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#preamble"&gt;
  &lt;/a&gt;
  Preamble
&lt;/h2&gt;

&lt;p&gt;This will be a demo application to show off a way to implement authentication in .NET. U can take away these concepts and adapt them to your real-world requirements.&lt;br&gt;&lt;br&gt;
🔴IMPORTANT❗🔴: I'm not going to follow every best practices to save time but I'll do my best to spot things that are not "real-world ready" to use.&lt;br&gt;&lt;br&gt;
As always, if u get in trouble in following this tutorial u can check the final solution in GitHub at this &lt;a href="https://github.com/ivan-pesenti/auth-series"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start 🚀
&lt;/h2&gt;

&lt;p&gt;After these necessary thoughts we can start the fun part, what everybody are waiting for... the &lt;strong&gt;&lt;em&gt;coding&lt;/em&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;To follow this tutorial u must install on your machine some tools and programs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NET 5 Runtime. U can download from &lt;a href="https://dotnet.microsoft.com/download/dotnet/5.0"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Visual Studio Code (u can use another IDE if u wish). Download can be found &lt;a href="https://code.visualstudio.com/download"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Postman (u can use another program to consume REST-api if u wish). Download can be found &lt;a href="https://www.postman.com/downloads/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Google Firebase project with a user registered.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;⚠️WARNING⚠️: u must be sure that Email/Password Sign-in method is enabled. When u create a Firebase project it's &lt;strong&gt;not enabled&lt;/strong&gt; by default. The correct config is the same as in the below image:  &lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RqEZ2qjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-sign-in-methods.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RqEZ2qjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-sign-in-methods.png%3Fraw%3Dtrue" alt="firebase sign-in methods"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-web-api-proj"&gt;
  &lt;/a&gt;
  Setup web api proj
&lt;/h3&gt;

&lt;p&gt;First, we must create a web api proj. I'll do these kind of stuff from dotnet CLI. So open up a terminal (or use the one integrated in VSCode) and issue:&lt;br&gt;&lt;br&gt;
&lt;code&gt;dotnet new webapi -n "AuthSeries"&lt;/code&gt;&lt;br&gt;&lt;br&gt;
When VSCode will prompt u to restore dependencies give a yes and go ahead.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#test-it"&gt;
  &lt;/a&gt;
  Test it
&lt;/h3&gt;

&lt;p&gt;Now to be sure that everything looks fine before start to edit we're going to give it a first try.&lt;br&gt;&lt;br&gt;
Change directory with &lt;code&gt;cd AuthSeries&lt;/code&gt; and run the web api with the command &lt;code&gt;dotnet run&lt;/code&gt;. By default the web api will be launched on port 5001 for &lt;strong&gt;HTTPS&lt;/strong&gt; protocol.&lt;br&gt;&lt;br&gt;
Open up Postman and create a request with the following params:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTTP method: GET&lt;/li&gt;
&lt;li&gt;URL: &lt;a href="https://localhost:5001/weatherforecast"&gt;https://localhost:5001/weatherforecast&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hit "Send" and u should receive dummy data generated by our web api.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#firebase-stuff"&gt;
  &lt;/a&gt;
  Firebase stuff
&lt;/h2&gt;

&lt;p&gt;Open your Firebase project within the Google Firebase Console.&lt;br&gt;&lt;br&gt;
🧐NOTE🧐: the project's URL should be something like '&lt;a href="https://console.firebase.google.com/u/0/xxxxxxx"&gt;https://console.firebase.google.com/u/0/xxxxxxx&lt;/a&gt;'.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-web-app"&gt;
  &lt;/a&gt;
  Create Web App
&lt;/h3&gt;

&lt;p&gt;Click on the little gear next to "Project overview" and select "Project settings". In "General" tab scroll toward the bottom and click the icon in the following image:&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sgOPRfcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-web-app.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sgOPRfcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-web-app.png%3Fraw%3Dtrue" alt="firebase web app registration"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Give a meaningful name, I choose "auth-series-app" to discriminate from the Firebase proj called "auth-series" and click "Register App". After that select "Continue to console".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-service-account-key"&gt;
  &lt;/a&gt;
  Create Service Account Key
&lt;/h3&gt;

&lt;p&gt;In order to manage programmatically the Firebase proj from the web api codebase through the &lt;strong&gt;Firebase Admin SDK&lt;/strong&gt; we must generate a &lt;strong&gt;secret private key&lt;/strong&gt; that we'll be used to identify our web api into Firebase scope.&lt;br&gt;&lt;br&gt;
Go to "Service accounts", "Firebase Admin Sdk" and click "Create service account".&lt;br&gt;&lt;br&gt;
The following window will appear:&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ChZKECag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-security-warning.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ChZKECag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-security-warning.png%3Fraw%3Dtrue" alt="firebase security warning"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Click "Generate key" and a JSON file will be downloaded on your machine. Keep on hand this file as we're going to use it immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wire-up-firebase-and-web-api-%E2%9B%93"&gt;
  &lt;/a&gt;
  Wire up Firebase and Web Api ⛓
&lt;/h2&gt;

&lt;p&gt;Now, let's connect the dots! We've to create a bridge between Firebase and our web api proj.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firebase-registration-inside-our-web-api"&gt;
  &lt;/a&gt;
  Firebase registration inside our Web Api
&lt;/h3&gt;

&lt;p&gt;Change directory (if you're not already there) with &lt;code&gt;cd AuthSeries&lt;/code&gt; and issue &lt;code&gt;mkdir Firebase&lt;/code&gt;. Copy the JSON file downloaded above into this folder. Issue the following command in CLI to add a NuGet package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet add package FirebaseAdmin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the file Startup.cs and add this &lt;code&gt;using FirebaseAdmin;&lt;/code&gt; below the other using statements.&lt;br&gt;
Finally add the following code to the ConfigureServices() method of Startup.cs class file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;FirebaseApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AppOptions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Credential&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GoogleCredential&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;FromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;@"C:\Projects\SampleProjects\auth-series\auth-series\AuthSeries\Firebase\auth-series-firebase-adminsdk-rk7k4-4dc58434f2.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔵IMPORTANT🔵: u must replace my path with your. In production u &lt;strong&gt;should not hard-coded&lt;/strong&gt; info in this way. U could use environment variable, .NET User Secrets and so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-firebase-authentication-in-ioc-container"&gt;
  &lt;/a&gt;
  Add firebase authentication in IOC container
&lt;/h3&gt;

&lt;p&gt;Up to now, we've only registered the Firebase proj inside our web api.&lt;br&gt;&lt;br&gt;
The next thing is to tell to our web api that we'd like to use Firebase as authentication provider.&lt;br&gt;&lt;br&gt;
To achieve it we must change some files.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#appsettingsjson"&gt;
  &lt;/a&gt;
  appsettings.json
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Jwt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Firebase"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://securetoken.google.com/auth-series"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ValidAudience"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"auth-series"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;⚠️WARNING⚠️: u must replace "auth-series" with the project id u choose for your Firebase project (u can find it in "Project settings &amp;gt; General" in Firebase Console).&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#startupcs"&gt;
  &lt;/a&gt;
  Startup.cs
&lt;/h4&gt;

&lt;p&gt;Before editing this file u have to install two NuGet packages. Issue in the terminal these two commands:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;dotnet add package Microsoft.AspNetCore.Authentication&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that be sure to append these two using statements at the top of the file:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;using Microsoft.IdentityModel.Tokens;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;using Microsoft.AspNetCore.Authentication.JwtBearer;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now u are ready to edit the two methods of the Startup.cs.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#configureservices-method"&gt;
  &lt;/a&gt;
  ConfigureServices method
&lt;/h5&gt;

&lt;p&gt;Under the Firebase app's registration (the code added above) place the following code to set parameters for &lt;strong&gt;JWT token&lt;/strong&gt; provided by Google Firebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// firebase auth&lt;/span&gt;
&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddJwtBearer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authority&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ValidateIssuer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ValidateAudience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ValidateLifetime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ValidateIssuerSigningKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ValidIssuer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="n"&gt;ValidAudience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidAudience"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🔎&lt;strong&gt;HINT&lt;/strong&gt;🔎: in order to make the code type safer u should consider using the &lt;em&gt;options pattern&lt;/em&gt; and bind settings to POCO classes. Moreover u have to place these sensitive data in a more secure place.  &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#configure-method"&gt;
  &lt;/a&gt;
  Configure method
&lt;/h5&gt;

&lt;p&gt;With the following change you're about to add the authentication middleware in the middlewares' pipeline.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseRouting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthentication&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseAuthorization&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#weatherforecastcontrollercs"&gt;
  &lt;/a&gt;
  WeatherForecastController.cs
&lt;/h4&gt;

&lt;p&gt;The final thing to change is the endpoint that will be secured. Add &lt;code&gt;using Microsoft.AspNetCore.Authorization;&lt;/code&gt; at the top of the file.&lt;br&gt;&lt;br&gt;
Above the signature of Get method add &lt;code&gt;[Authorize]&lt;/code&gt; to restrict access to this action only to authenticated users.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-test"&gt;
  &lt;/a&gt;
  Final test
&lt;/h2&gt;

&lt;p&gt;Now, let's test our work. In order to prove that we're right we need of two requests: one to &lt;em&gt;sign-in&lt;/em&gt; a user in Firebase and one to &lt;em&gt;query&lt;/em&gt; our endpoint.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#firebase-request"&gt;
  &lt;/a&gt;
  Firebase request
&lt;/h3&gt;

&lt;p&gt;Before creating the request u must get the &lt;strong&gt;web API key&lt;/strong&gt; from Firebase project. As before, u have to navigate "Project settings &amp;gt; General" and copy the web API key as u can see below:&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yru2v1bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-web-api-key.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yru2v1bW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-one/img/fb-web-api-key.png%3Fraw%3Dtrue" alt="firebase web api key"&gt;&lt;/a&gt;
&lt;/p&gt;  

&lt;p&gt;In postman create a request with the following params:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTTP method: POST&lt;/li&gt;
&lt;li&gt;URL: &lt;a href="https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword"&gt;https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;headers:

&lt;ul&gt;
&lt;li&gt;key: &amp;lt;your secret web API key&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;body:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"test@test.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"returnSecureToken"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Execute the request and copy the &lt;em&gt;idToken&lt;/em&gt; that u get back in the output console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weatherforecast-request"&gt;
  &lt;/a&gt;
  WeatherForecast request
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Reopen the request used above &lt;/li&gt;
&lt;li&gt;Go in "Authorization" tab&lt;/li&gt;
&lt;li&gt;Select "Bearer Token" as type&lt;/li&gt;
&lt;li&gt;Paste in the token copied before&lt;/li&gt;
&lt;li&gt;Hit send and u'll get the requested resource&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Congratulations 🏆! U successfully did the first part of this series. Now you're able to restrict 🔐 access to your resource to only authenticated users. Moreover, u are able to integrate Google Firebase as authentication provider in your web api with a couple of simple steps. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next-%E2%80%8D%F0%9F%8F%8D"&gt;
  &lt;/a&gt;
  What's next 🐱‍🏍
&lt;/h2&gt;

&lt;p&gt;In the next blog post we're going to generate our JWT token directly within our web api instead of using Firebase. We're going to create an endpoint to sign-in users by &lt;strong&gt;issuing&lt;/strong&gt; a JWT token.&lt;br&gt;&lt;br&gt;
If this sounds exciting for you, don't miss it.  &lt;/p&gt;

&lt;p&gt;I hope you enjoy this post and find it useful. If you have any questions or you want to spot me some errors I really appreciate it and I'll make my best to follow up. If you enjoy it and would like to sustain me consider giving a like and sharing on your favorite socials. If u want u can add me on your socials this makes me very very happy!&lt;/p&gt;

&lt;p&gt;Stay safe and see you soon! 😎&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>googlecloud</category>
      <category>vscode</category>
      <category>firebase</category>
    </item>
  </channel>
</rss>
