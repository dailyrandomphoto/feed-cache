<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Where do I code?</title>
      <author>Vicki (she/they)</author>
      <pubDate>Mon, 15 Nov 2021 17:02:49 +0000</pubDate>
      <link>https://dev.to/vickilanger/where-do-i-code-3cb2</link>
      <guid>https://dev.to/vickilanger/where-do-i-code-3cb2</guid>
      <description>&lt;p&gt;Don’t I have to use [insert fancy computer] to code? No way! You can use any computer, tablet, or smartphone, it doesn’t even have to be connected to the internet. Though, some of the best resources are on the internet, for free.&lt;/p&gt;

&lt;p&gt;Fun fact: if you have one, you can even code with a graphing calculator.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okay-cool-but-where-on-my-computer-can-i-code"&gt;
  &lt;/a&gt;
  Okay, Cool, but Where on my computer can I code?
&lt;/h2&gt;

&lt;p&gt;This is a hard question to answer because there are tons of places you can code. Let’s talk about a few different ones.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Free&lt;/th&gt;
&lt;th&gt;Easy to Use&lt;/th&gt;
&lt;th&gt;Visualize&lt;/th&gt;
&lt;th&gt;Can save your work&lt;/th&gt;
&lt;th&gt;Online&lt;/th&gt;
&lt;th&gt;Requires download&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;IDLE&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PythonTutor.com&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Trinket.io&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#idle"&gt;
  &lt;/a&gt;
  IDLE
&lt;/h3&gt;

&lt;p&gt;This is an editor that comes with Python when you download it. (we’ll talk about downloading in a bit). It pretty much looks like a blank document that you can type in. You can type your code in, hit enter, and it will run your code. It looks like this. See the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;? That’s telling you where you can type. For now, you can ignore the first 3 lines of what probably looks like gibberish.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxeX2Ura--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2ku9sn69guiw0mcocz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxeX2Ura--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2ku9sn69guiw0mcocz1.png" alt='Screenshot of Python 3.7.3 Shell. It shows 3 lines of text at the top, then a mostly blank line with "&amp;gt;&amp;gt;&amp;gt;" at the beginning' width="533" height="103"&gt;&lt;/a&gt;&lt;br&gt;
Note: IDLE does require that you download Python, which will require some space on your computer. We’ll cover how to install before we start coding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#python-tutor"&gt;
  &lt;/a&gt;
  Python Tutor
&lt;/h3&gt;

&lt;p&gt;Python Tutor is a free website you can use without logging in. It runs and helps visualize code. As you learn more things, I’ll explain what they should look like in Python Tutor. Personally, my vote is for everyone to start using this or something similar. For now, here is what Python tutor looks like when you go to &lt;a href="https://pythontutor.com/visualize.html#mode=edit"&gt;Python Tutor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don’t have to adjust any of the drop-down menus, the defaults are perfect. You can type where it says &lt;code&gt;1&lt;/code&gt;. This just means you are on line 1 of the code. As you type more, it will number each line of code.&lt;/p&gt;

&lt;p&gt;There are two ways to use Python Tutor. With the first option, you may type all of your code, then click &lt;code&gt;Visualize Execution&lt;/code&gt; which allows you to click the &lt;code&gt;next&lt;/code&gt; button to see what happens at individual steps of your code.&lt;/p&gt;

&lt;p&gt;The other option is to click &lt;code&gt;Live Programming Mode&lt;/code&gt; or go to &lt;a href="https://pythontutor.com/live.html#mode=edit"&gt;Python Tutor Live&lt;/a&gt;. In this mode, your code will run as you type. I find this helpful as it immediately shows you what each step is doing.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q3G5cRhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wv8ialaurx1l3yqmfle.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q3G5cRhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wv8ialaurx1l3yqmfle.png" alt='screenshot of Python Tutor showing the dropdown with the python version, the text box to write in, and the buttons "Visualize Execution" and "Live Programming Mode"' width="630" height="400"&gt;&lt;/a&gt;&lt;br&gt;
Most of the work you do, while learning, will run perfectly on Python Tutor. Though, there are a few projects that will work better with Trinket.io.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trinketio"&gt;
  &lt;/a&gt;
  Trinket.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://Trinket.io"&gt;Trinket.io&lt;/a&gt; is similar to Python Tutor in that it’s free and requires no downloads. It allows us to play with a few modules (already built code) that Python Tutor doesn’t support. You can choose to use Trinket for your projects if you want. Trinket does allow but doesn’t require you, to create an account that will save all of the code you build. If you choose not to create an account, you can use the editor on the Trinket.io webpage. The editor looks like the screenshot below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YIlVq_8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m84d1j30gnm6dqwjsp4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YIlVq_8Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m84d1j30gnm6dqwjsp4d.png" alt="screenshot of Trinket.io editor. Editor shows a Turtle program that draws the trinket.io logo" width="880" height="414"&gt;&lt;/a&gt;&lt;br&gt;
To use the trinket editor, select and clear all of the code on the left. Then you can type in that area. Once you want to run, make your code do it’s thing, your code, click on the play symbol (▶). Once you’ve clicked ▶, the result of your code will show on the right.&lt;/p&gt;

&lt;p&gt;We’ll use Trinket later in the Modules section to play with emojis, date and time, turtle drawing, graphs and charts, and Wikipedia.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-i-already-have-a-code-editor-or-want-one"&gt;
  &lt;/a&gt;
  What if I already have a code editor or want one?
&lt;/h3&gt;

&lt;p&gt;That's great. If you know how, go ahead and use it. Python files end with &lt;code&gt;.py&lt;/code&gt;.  If you don’t know how, I highly suggest using one of the above options. I find it’s easiest to learn just one thing at a time. Learning code and how to use the editor may become a bit stressful and overwhelming.&lt;/p&gt;

&lt;p&gt;If you don't have an editor on your computer and want one, you may choose to install one like Atom from &lt;a href="https://atom.io/"&gt;https://atom.io/&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Either way, most examples will be explained using Python Tutor.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>Azure Key Vault Secrets in GitHub Actions</title>
      <author>James Cook</author>
      <pubDate>Mon, 15 Nov 2021 17:02:39 +0000</pubDate>
      <link>https://dev.to/officialcookj/azure-key-vault-secrets-in-github-actions-1naf</link>
      <guid>https://dev.to/officialcookj/azure-key-vault-secrets-in-github-actions-1naf</guid>
      <description>&lt;p&gt;The fundamental rule to a secret is to not share a secret. Once shared it's more likely going to be shared again and in an unsecure format, but how do we keep a secret a secret?&lt;/p&gt;

&lt;p&gt;When it comes to Cloud technology we can use resources that store our sensitive information in a secure environment. For example, Azure Key Vault allows us to store secrets, certificates and keys where we can set access control using authentication methods like Azure AD.&lt;/p&gt;

&lt;p&gt;But when we add secrets into a secure resource like Key Vault, how do we access them when running deployments?&lt;/p&gt;

&lt;p&gt;In this blog post I will be covering how we get the secrets from an Azure Key Vault for a deployment in GitHub Actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-workflow"&gt;
  &lt;/a&gt;
  GitHub Workflow
&lt;/h2&gt;

&lt;p&gt;We will need login to Azure using the Azure CLI. The first workflow step will be the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure CLI Login&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/login@v1.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;creds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;{"clientId":"${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.AZ_CLIENT_ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}","clientSecret":"${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.AZ_CLIENT_SECRET&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}","subscriptionId":"${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.AZ_SUBID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}","tenantId":"${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.AZ_TENANT_ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}"}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following are GitHub Secret values that need to exists before running the workflow:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AZ_CLIENT_ID&lt;/strong&gt; - Service Principal Client ID&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AZ_CLIENT_SECRET&lt;/strong&gt; - Service Principal Client Secret&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AZ_SUBID&lt;/strong&gt; - The Subscription ID you are connecting to as part of this workflow&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AZ_TENANT_ID&lt;/strong&gt; - The Tenant ID where the Service Principal exists&lt;/p&gt;

&lt;p&gt;Once logged via the Azure CLI, we will utilise the Get Key Vault Secrets GitHub Action where we will specify the Key Vault name and the Secrets we want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure Key Vault Secrets&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azurekeyvault&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/get-keyvault-secrets@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;keyvault&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;MyVaultName"&lt;/span&gt;
          &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;MyFirstSecret,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;MySecondSecret,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;MyThirdSecret'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You would replace the following values with your own:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MyVaultName&lt;/strong&gt; - You would replace this with the name of your Key Vault&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MyFirstSecret, MySecondSecret, My ThirdSecret&lt;/strong&gt; - Replace these with the name of the secrets in your Key Vault (not the values).&lt;/p&gt;

&lt;p&gt;Now when you want to use these secrets in the workflow, you just need to use the following format:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;steps.azurekeyvault.outputs.MyFirstSecret&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Replace the following for your configuration:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;azurekeyvault&lt;/strong&gt; - This would be the id of the Key Vault action&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MyFirstSecret&lt;/strong&gt; - Replace this with one of the secret names you listed to get&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-principal-access"&gt;
  &lt;/a&gt;
  Service Principal Access
&lt;/h2&gt;

&lt;p&gt;The above workflow uses a Service Principal to connect to Azure. It would be used to access the Azure Key Vault and will require access permissions to access the secrets. You can do this within the Key Vault itself, either by using RBAC or Access Control (depending on what authentication method you set for the Key Vault).&lt;/p&gt;

&lt;p&gt;The GitHub Action only gets the secret from Azure Key Vault, meaning you only need to set permissions with the minimum to be able to get the specified secret you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-usage"&gt;
  &lt;/a&gt;
  Example Usage
&lt;/h2&gt;

&lt;p&gt;Below are some examples of using the above Azure Key Vault action to use secrets within other actions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#terraform"&gt;
  &lt;/a&gt;
  Terraform
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Terraform&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hashicorp/setup-terraform@main&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;terraform_version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Init&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;init&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;terraform init&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Terraform Plan&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;plan&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;terraform plan&lt;/span&gt;
        &lt;span class="na"&gt;continue-on-error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;TF_VAR_az_tenant_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZ_TENANT_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;TF_VAR_MyFirstSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.azurekeyvault.outputs.MyFirstSecret }}&lt;/span&gt;
          &lt;span class="na"&gt;TF_VAR_MySecondSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.azurekeyvault.outputs.MySecondSecret }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  Docker
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Docker Login&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/docker-login@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;login-server&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myregistry.azurecr.io&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.azurekeyvault.outputs.MySecondSecret }}&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.azurekeyvault.outputs.MyThirdSecret }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>azure</category>
      <category>security</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>Research methods for a product manager</title>
      <author>Vitalii Ermolaev</author>
      <pubDate>Mon, 15 Nov 2021 17:01:07 +0000</pubDate>
      <link>https://dev.to/vitaliiermolaev/research-methods-for-a-product-manager-5hf0</link>
      <guid>https://dev.to/vitaliiermolaev/research-methods-for-a-product-manager-5hf0</guid>
      <description>&lt;p&gt;One of the most important skills of a product manager is the ability to do research. They help to find out about «what is bothering» the user, to test a hypothesis, or to make a decision to launch a new feature. In this article, I will tell you about the main types of research.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-research"&gt;
  &lt;/a&gt;
  Types of Research
&lt;/h3&gt;

&lt;p&gt;Only three types of research are known: qualitative, quantitative and mixed.&lt;br&gt;
Quantitative research is a kind of numerical value that determines the behavior of people and their attitude to something. Qualitative research works with non-numerical values ​​that were obtained through interviews, for example. Mixed research include the first two types of research.&lt;/p&gt;

&lt;p&gt;Each type of research has a subtype: relationship research and behavioral research. The first research allows you to find out what is important for the user and what he wants. The second studies make it possible to observe how he acts in practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qualitative-research"&gt;
  &lt;/a&gt;
  Qualitative Research
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#interview"&gt;
  &lt;/a&gt;
  Interview
&lt;/h5&gt;

&lt;p&gt;Subtype: Relationship Research, Behavioral Research&lt;/p&gt;

&lt;p&gt;Interviewing is one of the most versatile research methods. It's used to investigate user behavior, identify their «pains» and needs. Interviews can be conducted at all work stages on a product, from forming and testing a hypothesis to maintaining a working service and introducing new functions. The advantage of this method is that it allows you to deeply study user motivation, better understand the target audience and get unexpected insights from it.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#usability-tests%C2%A0"&gt;
  &lt;/a&gt;
  Usability Tests 
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Usability tests are research in which product managers observe how the user uses the service and what features are most important to him. &lt;/p&gt;

&lt;p&gt;Also, a person is given a task that he must complete, for example, setting up ads for certain groups of users. This research method is good because it allows you to quickly immerse yourself in the product, and it is especially useful for those managers who have recently moved to a new company or service.&lt;/p&gt;

&lt;p&gt;Usability tests can be moderated when you are present in the research, communicate with the respondent and observe him, as well as unmoderated for the experiment purity. Thus, you can test your products and those of competitors to understand what the pros and cons are of the current solutions. Another advantage of usability tests is that they are easy to conduct remotely, for example using TeamViewer, and observe what the user is doing.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#focus-groups"&gt;
  &lt;/a&gt;
  Focus Groups
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Focus groups allow you to identify the main problems of the product. The in-depth interview method is used during focus groups, but the product manager does not communicate with one user, but with a group of several people. This research method allows you to reduce the interviewing cost (due to less time consumption) and identify key issues. The disadvantage of focus groups is that group dynamics can shift the bottom line, for example, if a leader appears who will push others to his opinion. Therefore, it's up to the researcher to direct the group discussions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mixed-research"&gt;
  &lt;/a&gt;
  Mixed Research
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#surveys"&gt;
  &lt;/a&gt;
  Surveys
&lt;/h5&gt;

&lt;p&gt;Subtype: Relational Research&lt;/p&gt;

&lt;p&gt;Surveys are flexible user research tools. They can be implemented in a variety of contexts: by posting a simple open survey on a website, through a mailing list, or after testing the usability of the service.&lt;/p&gt;

&lt;p&gt;Surveys can provide quantitative and qualitative data: ratings, percentage of choice of one of the answers to a multiple-choice question, and, in addition, answers to open-ended questions. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#card-sorting"&gt;
  &lt;/a&gt;
  Card Sorting
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Card sorting allows you to form the menu structure or directory by the hands of users. During the research, the names of the objects to be sorted are recorded on cards, and then the respondents sort them based on their ideas about the structure of objects and the relationships between them. The researchers then analyze the results and identify patterns. The already existing hierarchical structure is checked for «reverse» card sorting. Participants are given tasks and asked to find a suitable card, moving through the category tree from the top to the bottom. This test verifies the health of the structure, for example, the location of the sections in the app and the relationships between them.&lt;/p&gt;

&lt;p&gt;This research can be carried out in person and with physical maps, or remotely, for example through the OptimalSort card sorting platform.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#concept-testing-with-mvp"&gt;
  &lt;/a&gt;
  Concept Testing with MVP
&lt;/h5&gt;

&lt;p&gt;Subtype: Relational Research&lt;/p&gt;

&lt;p&gt;An MVP is the simplest working prototype of a service that tests demand before starting full-scale development. This approach insures the company from creating an unclaimed product and helps not to waste resources on design and development in vain. MVP allows you to collect information with minimal effort in order to finalize the product in accordance with the needs of the target audience or completely abandon an unsuccessful idea.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#analysis-of-user-sessions"&gt;
  &lt;/a&gt;
  Analysis of User Sessions
&lt;/h5&gt;

&lt;p&gt;Subtype: Relational Research&lt;/p&gt;

&lt;p&gt;During the research, they analyze the accumulated information about user activity, actions that the user performs while working with the service, such as queries in a search engine or transitions between sections in the app. Using session analysis, you can find out the scenarios of user behavior and simplify the achievement of their goals, for example, by reducing the number of steps required to complete an order.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#eye-tracking-testing"&gt;
  &lt;/a&gt;
  Eye Tracking Testing
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Special equipment is required for eye tracking research, which tracks the movement of the user's gaze along the interface. When 30 or more participants complete the same task on the screen, you can notice patterns and figure out which elements on the page grab the user's attention.&lt;/p&gt;

&lt;p&gt;Eye tracking helps you determine which elements of content you need to focus on and which elements are best distracted from.&lt;/p&gt;

&lt;p&gt;The biggest drawback of eye tracking research is the need to use expensive equipment that can't be used without special training.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quantitative-research"&gt;
  &lt;/a&gt;
  Quantitative Research
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#ab-testing"&gt;
  &lt;/a&gt;
  A/B Testing
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;A/B testing is an integral part of working on any service. You can use it to test a hypothesis about whether the selected product metric will change if you change something in the product, for example, whether a change in the design of the registration page will increase the number of users. The results of the test and control groups of users are compared: the first group is shown a new solution, and the control group is shown an unchanged product.&lt;/p&gt;

&lt;p&gt;And it's important for you to test whether the change will be statistically significant to confirm that the observed difference between the test and control groups is indeed due to product innovation and not an accident.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#clustering-highquality-requests"&gt;
  &lt;/a&gt;
  Clustering High-Quality Requests
&lt;/h5&gt;

&lt;p&gt;Subtype: Relational Research&lt;/p&gt;

&lt;p&gt;Clustering quality requests is a way to translate verbal requests and user feedback into quality data. This method allows using machine learning and natural language processing models to isolate requests that are constantly repeated in feedback.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#web-analytics"&gt;
  &lt;/a&gt;
  Web Analytics
&lt;/h5&gt;

&lt;p&gt;Subtype: Behavioral Research&lt;/p&gt;

&lt;p&gt;Web analytics allows you to identify and prioritize product issues. It will help you find out the number of people who came to your resource, the depth of view (the number of pages viewed by visitors at one time), the conversion in paying or registered users, and so on.&lt;/p&gt;

</description>
      <category>product</category>
      <category>management</category>
    </item>
    <item>
      <title>Introducing Storybook for React Native Web</title>
      <author>Danny</author>
      <pubDate>Mon, 15 Nov 2021 16:51:11 +0000</pubDate>
      <link>https://dev.to/dannyhw/introducing-storybook-for-react-native-web-mn4</link>
      <guid>https://dev.to/dannyhw/introducing-storybook-for-react-native-web-mn4</guid>
      <description>&lt;p&gt;Storybook is a UI development workshop for components and pages. It's used by many teams for all kinds of reasons. You can develop components in isolation, run visual tests and even validate the accessibility of your UI.&lt;/p&gt;

&lt;p&gt;Storybook started off web focused and has expanded to many different platforms since then. One of those platforms is React Native.&lt;/p&gt;

&lt;p&gt;Storybook for React Native is a catalog of all your components and states, that runs inside your iOS or Android app, on your mobile device. This is great for seeing your React Native components in their production setting, but also has some disadvantages when compared to Storybook's web UI.&lt;/p&gt;

&lt;p&gt;That's why I'm excited to announce &lt;a href="https://www.npmjs.com/package/@storybook/addon-react-native-web"&gt;Storybook for React Native Web&lt;/a&gt;, a new complementary approach to developing and sharing React Native components in Storybook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-different-take-on-storybook-for-react-native"&gt;
  &lt;/a&gt;
  A different take on Storybook for React Native
&lt;/h2&gt;

&lt;p&gt;I've been working together with &lt;a href="https://twitter.com/mshilman"&gt;Michael Shilman&lt;/a&gt; on a new approach for React Native Storybook that has all the functionality of Storybook on the web. This is achieved by using an &lt;a href="https://www.npmjs.com/package/@storybook/addon-react-native-web"&gt;addon&lt;/a&gt; we built that uses the react-native-web library to make your components available in the browser. All you have to do is set up the addon in your project.&lt;/p&gt;

&lt;p&gt;In the video below I am interacting with React Native components directly in the browser. The components displayed use features from popular React Native libraries such as the animation library react-native-reanimated, and the common library for handling interactions react-native-gesture-handler.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zv6dKY7hxlc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://618d44792e48fd003a482f88-fgqejyulkb.chromatic.com/?path=/story/libraries-gesture-handler-draggable--basic"&gt;Follow this link to interact with a live version of this in your browser&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-challenge-of-react-native"&gt;
  &lt;/a&gt;
  The challenge of React Native
&lt;/h2&gt;

&lt;p&gt;React Native has its own Storybook implementation at &lt;a href="https://github.com/storybookjs/react-native"&gt;@storybook/react-native&lt;/a&gt;, however it has some limitations. &lt;/p&gt;

&lt;p&gt;Storybook for React Native is built on a different architecture than Storybook for web frameworks (React, Vue, Angular, etc.), and it is built as a separate project. Because of this architectural difference a lot of effort is required to achieve feature parity with Storybook for web.&lt;/p&gt;

&lt;p&gt;Storybook for React Native supports only a small portion of the addons and features that exist for Storybook on the web platform. This also means external tools like visual testing for Storybook need a custom implementation in order to support react native. Unfortunately, this leads to users having an incomplete experience for React Native in comparison with the web&lt;/p&gt;

&lt;p&gt;Ideally, Storybook for React Native should support all popular addons and existing tools used on Storybook for Web. Is this possible?&lt;/p&gt;

&lt;p&gt;Well, if you're here you probably guessed that the answer is yes. There are of course some limitations, however I think that for many use cases it will be worth it. The main use case that comes to mind is UI library maintainers that want to show off their React Native components in an interactive way. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-native-components-on-the-web"&gt;
  &lt;/a&gt;
  React Native components on the Web?
&lt;/h3&gt;

&lt;p&gt;You might be surprised at the number of React Native libraries that already fully support the web platform. Also if you've been following the React Native scene you might know that facebook is putting a strong emphasis on the &lt;a href="https://reactnative.dev/blog/2021/08/26/many-platform-vision"&gt;many platform vision&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These are some of the top downloaded libraries for React Native (based on npm numbers):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react-navigation&lt;/li&gt;
&lt;li&gt;react-native-screens&lt;/li&gt;
&lt;li&gt;react-native-gesture-handler&lt;/li&gt;
&lt;li&gt;react-native-svg&lt;/li&gt;
&lt;li&gt;react-native-reanimated&lt;/li&gt;
&lt;li&gt;react-native-vector-icons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these libraries have support for the web platform in some way. In fact I've tested many of these popular libraries with this new addon and they all worked very well on the web.&lt;/p&gt;

&lt;p&gt;Now, I would like to share with you the project I've been working on, which should help bridge the gap today for React Native and Storybook, allowing you to have full functionality that you know and love from Storybook for web.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-storybookaddonreactnativeweb"&gt;
  &lt;/a&gt;
  Introducing @storybook/addon-react-native-web
&lt;/h2&gt;

&lt;p&gt;This addon provides you with a simple setup for using the ReactJS Storybook in a React Native project. You can run it locally or easily deploy it as a website for others to see. The best part is that since it's running on the web with the ReactJS configuration most addons should work with no changes necessary.&lt;/p&gt;

&lt;p&gt;That means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Much better UI/UX.&lt;/li&gt;
&lt;li&gt;Popular addons such as &lt;a href="https://storybook.js.org/addons/@storybook/addon-docs/"&gt;Docs&lt;/a&gt; supported out of the box.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.chromatic.com/"&gt;Chromatic&lt;/a&gt; and other visual testing tools supported.&lt;/li&gt;
&lt;li&gt;Easily publish your Storybook and share it with stakeholders such as designers and product owners.&lt;/li&gt;
&lt;li&gt;Full support for the latest Storybook features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are however a few drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some libraries won't have web support&lt;/li&gt;
&lt;li&gt;The components may not display exactly as they would on a native device&lt;/li&gt;
&lt;li&gt;Some extra config needed for libraries that aren't transpiled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If those drawbacks aren't dealbreakers, then I think you will be happy with the results. However If you are unable to use this package because you need a native mobile experience then consider using &lt;a href="https://github.com/storybookjs/react-native"&gt;@storybook/react-native&lt;/a&gt;. You could even use both if it makes sense for your use case.&lt;/p&gt;

&lt;p&gt;If you are concerned about components being different on the web please see the &lt;a href="https://github.com/storybookjs/addon-react-native-web/blob/main/FAQ.md"&gt;FAQ&lt;/a&gt; where I have tried to address this.&lt;/p&gt;

&lt;p&gt;I've also provided some example config in &lt;a href="https://github.com/storybookjs/addon-react-native-web#configuring-popular-libraries"&gt;the project readme&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now the fun part!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h3&gt;

&lt;p&gt;Heres the steps to follow if you want to try this out yourself.&lt;/p&gt;

&lt;p&gt;Create your react native project if you haven't already&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx react-native init AwesomeApp &lt;span class="nt"&gt;--template&lt;/span&gt; react-native-template-typescript
&lt;span class="nb"&gt;cd &lt;/span&gt;AwesomeApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize Storybook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx sb init &lt;span class="nt"&gt;--type&lt;/span&gt; react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can delete the example stories if you like (not necessary).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; stories/&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add @storybook/addon-react-native-web and it's dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; react-dom react-native-web babel-plugin-react-native-web @storybook/addon-react-native-web 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open up .storybook/main.js and add the addon to the addons list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* existing config */&lt;/span&gt;
  &lt;span class="na"&gt;addons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="cm"&gt;/*existing addons,*/&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@storybook/addon-react-native-web&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that the setup is done, let's add a React Native component and a story in the stories folder.&lt;/p&gt;

&lt;p&gt;Here's an example of a button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// stories/MyButton.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;button&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;paddingVertical&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;paddingHorizontal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alignSelf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;flexGrow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;buttonContainer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonContainer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TouchableOpacity&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}]}&lt;/span&gt;
      &lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;activeOpacity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;textColor&lt;/span&gt;&lt;span class="p"&gt;}]}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TouchableOpacity&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a story for that component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// stories/MyButton.stories.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ComponentMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ComponentStory&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@storybook/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MyButton&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./MyButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/MyButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;ComponentMeta&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Basic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentStory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyButton&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;Basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the Storybook with &lt;code&gt;yarn storybook&lt;/code&gt; and it should open in your browser.&lt;/p&gt;

&lt;p&gt;You should see something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDXLtViK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3481514/140612591-554d0b2c-d15d-4e07-afa8-087400134d01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDXLtViK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3481514/140612591-554d0b2c-d15d-4e07-afa8-087400134d01.png" alt="image" width="880" height="742"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running on the web without a single div or span in sight! 🎉&lt;/p&gt;

&lt;p&gt;Thanks for reading this far, I would appreciate hearing your thoughts on this! If you want to see an example project showcasing Storybook for React Native and web using libraries such as reanimated and gesture handler, make sure to check this &lt;a href="https://github.com/dannyhw/addon_react_native_web_example"&gt;repository&lt;/a&gt; out.&lt;/p&gt;

&lt;p&gt;I'm one of the maintainers of @storybook/react-native, currently working hard on improving it and preparing a 6.0 release, so keep an eye out! I would love to talk more about my vision for the upcoming release of Storybook for React Native in a future post, so let me know if you're interested!&lt;/p&gt;

&lt;p&gt;You can find me on twitter or discord in the #react-native channel of the Storybook discord server:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/Danny_H_W"&gt;@Danny_H_W&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/dannyhw"&gt;dannyhw&lt;/a&gt;&lt;br&gt;
Storybook discord: &lt;a href="https://discord.gg/sMFvFsG"&gt;Storybook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Big thank you to &lt;a href="https://twitter.com/mshilman"&gt;Michael Shilman&lt;/a&gt; for setting up the repository and helping me figure out all the Storybook config. Also for the time spent and guidance. This wouldn't have been possible without his hard work! &lt;/p&gt;

&lt;p&gt;Thanks to everyone who helped me edit this post and gave feedback.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>storybook</category>
      <category>component</category>
    </item>
    <item>
      <title>5 Popular Frontend Development Tools in 2021</title>
      <author>Esther Agbaje</author>
      <pubDate>Mon, 15 Nov 2021 16:47:33 +0000</pubDate>
      <link>https://dev.to/estheragbaje/5-popular-frontend-development-tools-in-2021-1pg2</link>
      <guid>https://dev.to/estheragbaje/5-popular-frontend-development-tools-in-2021-1pg2</guid>
      <description>&lt;p&gt;As a frontend developer, you'll be building out web designs (usually handed over from a User Interface Designer) with programming languages like HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;However, the increasing number of frontend developer tools out there make it difficult to decide which to pick for your next project.  I've compiled five popular frontend developer tools you should include in your workflow that boost productivity🚀🚀&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A good understanding &lt;em&gt;of what these tools are, their features, tradeoffs, and ease of use can help you decide the right one to use.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We'll explore these popular frontend development tools under the following categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript frameworks&lt;/li&gt;
&lt;li&gt;JAMStack&lt;/li&gt;
&lt;li&gt;UI Component Libraries&lt;/li&gt;
&lt;li&gt;Quality Assurance &amp;amp; Testing&lt;/li&gt;
&lt;li&gt;Low Code Tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-javascript-frameworks"&gt;
  &lt;/a&gt;
  I. JAVASCRIPT FRAMEWORKS
&lt;/h2&gt;

&lt;p&gt;JavaScript frameworks are one of the most preferred platforms to build dynamic web applications. They make complex Javascript processes such as DOM manipulation(Document Object Model), complex state management, routing between pages, form data management, etc., very straightforward.&lt;/p&gt;

&lt;p&gt;One of the most popular JavaScript frameworks is &lt;strong&gt;React.js.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/"&gt;&lt;strong&gt;ReactJS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to a &lt;a href="https://insights.stackoverflow.com/survey/2020"&gt;StackOverflow survey in 2020&lt;/a&gt;, JavaScript continues to be the most used language, with React ranked as the second most popular JavaScript framework. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QTrkIK3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1isqj0zu66a6bunxxg7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QTrkIK3x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1isqj0zu66a6bunxxg7z.png" alt="Popular JavaScript Frameworks" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React is also well-known for its:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vibrant community&lt;/li&gt;
&lt;li&gt;declarative syntax using JSX&lt;/li&gt;
&lt;li&gt;ease of managing and sharing state using hooks &lt;/li&gt;
&lt;li&gt;large ecosystem of packages to solve specific problems&lt;/li&gt;
&lt;li&gt;cross-platform capabilities (React Native, React 3D)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These key features make frontend developers pick React.js over other counterparts like Vue.js and Angular.&lt;br&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ii-jamstack"&gt;
  &lt;/a&gt;
  II. JAMSTACK
&lt;/h2&gt;

&lt;p&gt;JAMStack stands for &lt;strong&gt;JavaScript, APIs, and Markup.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;It's a modern front-end architecture that helps developers build fast, performant, and scalable websites or web apps.&lt;/p&gt;

&lt;p&gt;The top emerging JAMStack frameworks are &lt;a href="https://tsh.io/state-of-frontend/"&gt;Gatsby and Next.js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3-hSfMm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfww644km8a3tac8qtmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3-hSfMm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfww644km8a3tac8qtmj.png" alt="Top JAMStack tools" width="880" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While Gatsby and Next.js have some overlapping features, I personally prefer Next.js and I'll tell you why shortly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next.js is a React framework for developing single-page Javascript applications. It was developed by &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; to abstract the complexities that come with using Reactjs.&lt;/p&gt;

&lt;p&gt;Next.js makes it seamless to create:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;statically rendered sites (like blogs, magazines, corporate websites)&lt;/li&gt;
&lt;li&gt;server-rendered sites (like eCommerce shops, SaaS software, etc.)&lt;/li&gt;
&lt;li&gt;or both, depending on your need&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the features that stand Next.js out are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Image Optimization:&lt;/strong&gt; Images take up to 50% of most web pages. Next.js has built-in image optimization to ensure images don't have a negative impact on your app's load time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data fetching:&lt;/strong&gt; Next.js eliminates the need for loading spinners by making it possible to fetch data at build time or on the server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Routing:&lt;/strong&gt; Creating a route by adding a file to the &lt;code&gt;pages&lt;/code&gt; directory is such a pleasure!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next.js looks promising as a React framework because its unique features improve developer productivity. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iii-ui-component-libraries"&gt;
  &lt;/a&gt;
  III. UI COMPONENT LIBRARIES
&lt;/h2&gt;

&lt;p&gt;When starting a new project, you'll likely face the decision whether to build your UI internally or to buy a ready-made library of UI components. &lt;/p&gt;

&lt;p&gt;In most cases, using an existing UI component library saves you time, increases developer productivity, and helps you ship your product to your customers faster.&lt;/p&gt;

&lt;p&gt;Some popular UI component libraries include Material UI, AntDesign, Radix UI and Chakra UI. After using some of these libraries, I’ve been so consistently impressed with the simplicity, modularity, flexibility and ease of use of Chakra UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chakra-ui.com/"&gt;&lt;strong&gt;Chakra UI&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With over 22,000 Github stars, Chakra UI is blazing hot in the front-end developer community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EK7swn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7jqanc8soq3zq4n4nza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EK7swn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7jqanc8soq3zq4n4nza.png" alt="Chakra UI" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's an open-source React component library (released in 2019) that provides the building blocks you need to create accessible websites and apps.&lt;/p&gt;

&lt;p&gt;Some features that make Chakra UI delightful for frontend developer are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Style props:&lt;/strong&gt; Chakra UI comes with a very intuitive, &lt;a href="https://chakra-ui.com/docs/features/style-props"&gt;prop-based model of styling components&lt;/a&gt;, which makes it easy to use&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accessibility:&lt;/strong&gt; Getting components to have the right color contrast, keyboard, and screen reader accessibility comes for free!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Beautiful and customizable Components:&lt;/strong&gt; &lt;a href="https://chakra-ui.com/docs/getting-started"&gt;All Chakra's components&lt;/a&gt; look stunning by default and come with dark mode support. Who doesn't love dark-mode?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you need to build a React application, I strongly recommend using Chakra UI as the starting point for your UI elements. It's a real time saver! If you're a Vue developer, you'd want to check out &lt;a href="https://vue.chakra-ui.com/"&gt;Chakra UI Vue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iv-quality-assurance-amp-testing"&gt;
  &lt;/a&gt;
  IV. QUALITY ASSURANCE &amp;amp; TESTING
&lt;/h2&gt;

&lt;p&gt;Front-end testing is pivotal in ensuring web apps are stable and reliable. And as a front-end developer, you are responsible for making that happen! &lt;/p&gt;

&lt;p&gt;To achieve this, you need an excellent suite of automated tests to ensure that nothing breaks when your users interact with your app.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://2020.stateofjs.com/en-US/technologies/testing/"&gt;2020 State of JS Testing&lt;/a&gt; ranks Testing Library, Jest and Cypress as one of the popular tools for testing. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xu9stGrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pplsg7fvs3ef3o58talw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xu9stGrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pplsg7fvs3ef3o58talw.png" alt="Testing tools" width="880" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of the popular tools, &lt;strong&gt;Cypress&lt;/strong&gt; is a top pick.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; is a JavaScript end-to-end testing framework that allows front-end developers and QA engineers to write automated tests for their web applications.&lt;/p&gt;

&lt;p&gt;Two features that stand Cypress out are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Automatic waiting:&lt;/strong&gt; Automatic waiting is a mechanism built into Cypress that enables it to wait for elements to appear in the DOM before executing any query or assertion. By default, &lt;a href="https://docs.cypress.io/guides/core-concepts/introduction-to-cypress#When-Elements-Are-Missing"&gt;Cypress waits for 4 seconds&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Real-Time Reload:&lt;/strong&gt; Cypress can detect whenever you save changes to your tests.  Cypress automatically re-runs in the browser without the need to trigger the run manually.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cypress also offers &lt;a href="https://www.cypress.io/features"&gt;more features&lt;/a&gt; such as debuggability, spies, stubs &amp;amp; clocks, and many more. With Cypress, you get to ship better code to production. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#v-low-code-tools"&gt;
  &lt;/a&gt;
  V. LOW CODE TOOLS
&lt;/h2&gt;

&lt;p&gt;As the name implies, low code tools require little to no code to build fully-featured websites and web applications.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://go.forrester.com/blogs/why-you-need-to-know-about-low-code-even-if-youre-not-responsible-for-software-delivery/"&gt;recent article&lt;/a&gt; by John Rymer of Forrester proves that low-code offers the potential to "make software development 10 times faster than traditional methods."&lt;/p&gt;

&lt;p&gt;Common tools in this category are Webflow, Retool and Bubble. &lt;/p&gt;

&lt;p&gt;I've used Retool a few times and I love it. &lt;br&gt;
 &lt;br&gt;
&lt;a href="https://retool.com/"&gt;&lt;strong&gt;Retool&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Retool is a low-code, drag-and-drop software that makes it fast and easy to build internal apps (think dashboards and admin panels).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYZzr2xS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11sodtvp42qa12ojwd69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYZzr2xS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11sodtvp42qa12ojwd69.png" alt="Retool" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A recent survey showed that front-end developers spend over &lt;a href="https://retool.com/blog/state-of-internal-tools-2021/"&gt;30- 45% of their time building internal apps from scratch&lt;/a&gt; which can reduce developer productivity.&lt;/p&gt;

&lt;p&gt;Retool saves you time by providing pre-built components, an easy connection to your datastore, and a clean drag-and-drop interface to visualize data.&lt;/p&gt;

&lt;p&gt;Here's how Retool works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connect your datastores like Postgres, MongoDB, or Firebase&lt;/li&gt;
&lt;li&gt;write queries to select aspects of the database you care about using SQL or Javascript&lt;/li&gt;
&lt;li&gt;connect these queries and logic to the &lt;em&gt;pre-built components&lt;/em&gt; (&lt;a href="https://retool.com/components"&gt;https://retool.com/components&lt;/a&gt;) like Data tables, Charts, Dropdowns, etc.&lt;/li&gt;
&lt;li&gt;organize the components to help you visually display and customize data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When choosing a tool as a front-end developer, the first step is to research to figure out your work process and then pick the most efficient tool that gets the job done.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-devs-what-other-tools-will-you-add-to-this-list-and-why"&gt;
  &lt;/a&gt;
  Frontend Devs, what other tools will you add to this list and why?
&lt;/h3&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Simple tic-tac-toe game for beginners (HTML,CSS,JS)</title>
      <author>Lucifer25x</author>
      <pubDate>Mon, 15 Nov 2021 16:43:29 +0000</pubDate>
      <link>https://dev.to/lucifer25x/simple-tic-tac-toe-game-for-beginners-htmlcssjs-4dii</link>
      <guid>https://dev.to/lucifer25x/simple-tic-tac-toe-game-for-beginners-htmlcssjs-4dii</guid>
      <description>&lt;p&gt;Source code: &lt;a href="https://github.com/Lucifer25x/tic-tac-toe"&gt;https://github.com/Lucifer25x/tic-tac-toe&lt;/a&gt;&lt;br&gt;
Live: &lt;a href="https://lucifer25x.github.io/tic-tac-toe/"&gt;https://lucifer25x.github.io/tic-tac-toe/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>gamedev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🔐 Structure of a single-page Vue 3 (TypeScript) app using JWT authorization requests to the backend</title>
      <author>Vic Shóstak</author>
      <pubDate>Mon, 15 Nov 2021 16:37:49 +0000</pubDate>
      <link>https://dev.to/koddr/structure-of-a-single-page-vue-3-typescript-app-using-jwt-authorization-requests-to-the-backend-2lm0</link>
      <guid>https://dev.to/koddr/structure-of-a-single-page-vue-3-typescript-app-using-jwt-authorization-requests-to-the-backend-2lm0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello, DEV World! 👋&lt;/p&gt;

&lt;p&gt;This weekend I had time to refactor my old projects, where I found an interesting case of working with JWT in a Vue.js web application, which I'll tell you about now.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🔥 &lt;strong&gt;Disclaimer:&lt;/strong&gt; The article is intended primarily for &lt;strong&gt;advanced&lt;/strong&gt; frontend developers, because it does &lt;strong&gt;not&lt;/strong&gt; contain a beginner's description of technologies in use. You should &lt;strong&gt;already&lt;/strong&gt; understand how the &lt;a href="https://v3.vuejs.org/guide/introduction.html"&gt;Vue 3.x&lt;/a&gt; framework and &lt;a href="https://next.vuex.vuejs.org/"&gt;Vuex 4.x&lt;/a&gt; works, and the basics of &lt;a href="https://jwt.io/introduction"&gt;JWT&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK, let's go! 😉&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  📝 Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-lyrical-digression-about-the-backend"&gt;A lyrical digression about the backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-main-component-of-the-vue-app"&gt;The main component of the Vue app&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-structure-of-the-business-logic"&gt;The structure of the business logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#function-for-updating-tokens"&gt;Function for updating tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#function-for-calling-the-background-update-tokens"&gt;Function for calling the background update tokens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-result-we-got"&gt;The result we got&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-lyrical-digression-about-the-backend"&gt;
  &lt;/a&gt;
  A lyrical digression about the backend
&lt;/h2&gt;

&lt;p&gt;I believe that without a description of the backend scheme, it is impossible to understand my implementation in the frontend (&lt;strong&gt;which is the purpose of this article&lt;/strong&gt;). Therefore, I will ask for some of your time to explain the decisions I made.&lt;/p&gt;

&lt;p&gt;OK. So, I developed the backend as microservices, which was divided into the client's authorization micro-backend (since the project has been completely closed to anonymous users), and the REST API micro-backend for interaction with the project afterwards.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📌 &lt;strong&gt;Note:&lt;/strong&gt; Examples of code for these microservices will be at &lt;a href="https://golang.org/doc/"&gt;Go&lt;/a&gt; language and the &lt;a href="https://gofiber.io/"&gt;Fiber&lt;/a&gt; web framework, since that's my main stack (at the moment).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's a simple diagram for a visual representation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOkmNtKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eltsto7h5yf16fkoxh2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOkmNtKi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eltsto7h5yf16fkoxh2b.png" alt="simple diagram 1" width="880" height="530"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here are the specific implementations of tokens update &lt;a href="https://github.com/koddr/auth-komentory/blob/4efc68b6d3d033c55e03c705f7700a9c39419ab4/app/controllers/token_controller.go#L17-L135"&gt;TokenRenew()&lt;/a&gt; and client authorization &lt;a href="https://github.com/koddr/auth-komentory/blob/4efc68b6d3d033c55e03c705f7700a9c39419ab4/app/controllers/user_controller.go#L178-L279"&gt;UserLogin()&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Hey!&lt;/strong&gt; Full examples of micro-backends (auth and API) can be found &lt;a href="https://github.com/koddr/auth-komentory"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/koddr/auth-komentory"&gt;here&lt;/a&gt;. Don't be alarmed that this repository is marked as &lt;code&gt;DEPRECATED&lt;/code&gt; by me. It's just an old version of one of my projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main things to know about the backend in this case study: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Fiber framework has built-in &lt;a href="https://docs.gofiber.io/api/middleware/encryptcookie"&gt;middleware&lt;/a&gt; for encrypting cookies, which will generate an unreadable hash for the &lt;code&gt;refresh_token&lt;/code&gt; each time.&lt;/li&gt;
&lt;li&gt;After successful user authorization (via &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;), the backend sends a JSON response with simple session information (JWT &lt;code&gt;access_token&lt;/code&gt; and &lt;code&gt;expire&lt;/code&gt; timestamp) and a special &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;HttpOnly&lt;/a&gt; Cookie with an encrypted &lt;code&gt;refresh_token&lt;/code&gt; for update JWT.&lt;/li&gt;
&lt;li&gt;As long as the JWT will be valid, for example by expiration time, the client can perform any operations with the private API methods (which require authorization).&lt;/li&gt;
&lt;li&gt;But if the client tries to make a request with an already expired JWT (or no JWT at all), the backend will behave as follows:

&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;refresh_token&lt;/code&gt; in the &lt;code&gt;HttpOnly&lt;/code&gt; Cookie is valid, then the backend will generate a new pair of access and refresh tokens and send it to the client;&lt;/li&gt;
&lt;li&gt;If something went wrong, then the backend will send the HTTP 401 Unauthorized error to the client and skip connection;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;⚡️ &lt;strong&gt;Note:&lt;/strong&gt; This backend schema allows us to securely store the JWT session in web application memory (for example, I use &lt;a href="https://next.vuex.vuejs.org/guide/"&gt;Vuex 4.x&lt;/a&gt; for this).&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;The interesting thing is that the end user will never be “disconnected” as long as he has a valid &lt;code&gt;refresh_token&lt;/code&gt; in his cookies! Furthermore, not to worry that if the user refreshes the page or closes the browser tab, they will need to re-login when they return.&lt;/p&gt;

&lt;p&gt;Endless session for your SPA here and now! 🎉&lt;/p&gt;




&lt;p&gt;Great, I hope you now have a clearer picture of how the backend works, for which we will now write the frontend in Vue.js 3. &lt;em&gt;If anything remains unclear, please write about it in the comments.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-main-component-of-the-vue-app"&gt;
  &lt;/a&gt;
  The main component of the Vue app
&lt;/h2&gt;

&lt;p&gt;And here's the part of the article we're all here for: implementation in a real Vue.js SPA web application. &lt;/p&gt;

&lt;p&gt;From the comments in my previous articles, I realized that the whole code listing is &lt;em&gt;quite difficult&lt;/em&gt; to understand. Therefore, I will break it into logical sections and describe them one by one in plain text format.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 &lt;strong&gt;Hey!&lt;/strong&gt; A full code of this frontend part can be found &lt;a href="https://github.com/koddr/app-komentory"&gt;here&lt;/a&gt; (still no need to worry about the &lt;code&gt;DEPRECATED&lt;/code&gt; phrase).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, this is what the &lt;code&gt;./src/App.vue&lt;/code&gt; component contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ./src/App.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- 1️⃣ --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;router-view&lt;/span&gt; &lt;span class="na"&gt;v-slot=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;{ Component, route }"&amp;gt;
    &lt;span class="c"&gt;&amp;lt;!-- 2️⃣ --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;transition&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fade"&lt;/span&gt; &lt;span class="na"&gt;mode=&lt;/span&gt;&lt;span class="s"&gt;"out-in"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!-- 3️⃣ --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;component&lt;/span&gt; &lt;span class="na"&gt;:is=&lt;/span&gt;&lt;span class="s"&gt;"Component"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"route.path"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/transition&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/router-view&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most common root Vue template for all the views in our application. And what happens in this code snippet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new root element &lt;code&gt;router-view&lt;/code&gt; (read more about it &lt;a href="https://next.router.vuejs.org/api/#router-view-s-v-slot"&gt;here&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;For smoother transitions, added &lt;code&gt;transition&lt;/code&gt; element with &lt;code&gt;fade&lt;/code&gt; effect (read more about it &lt;a href="https://next.router.vuejs.org/guide/advanced/transitions.html#per-route-transition"&gt;here&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;Added the component itself with a unique key, which will be rendered in our view;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's look at the business logic layer of our component. &lt;/p&gt;

&lt;p&gt;I will also divide it into three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The structure of the component;&lt;/li&gt;
&lt;li&gt;Function for updating tokens;&lt;/li&gt;
&lt;li&gt;Function for calling the background update tokens;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-structure-of-the-business-logic"&gt;
  &lt;/a&gt;
  The structure of the business logic
&lt;/h3&gt;

&lt;p&gt;This is where the main magic will happen. Since this component is the main one for the whole SPA, it will have a built-in process for initially getting the token and updating it periodically.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;By the way!&lt;/strong&gt; For imports, I use an alias &lt;code&gt;__/&lt;/code&gt; that matches the settings of my &lt;a href="https://vitejs.dev/config/"&gt;Vite&lt;/a&gt; config (&lt;a href="https://github.com/koddr/app-komentory/blob/82fadc20fbfdfc56cbc207a837aeb050a9e9d8a9/vite.config.ts#L8"&gt;here&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ./src/App.vue --&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onUnmounted&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// 1️⃣&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;UPDATE_JWT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;UPDATE_CURRENT_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__/store-constants&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// 2️⃣&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;TokenDataService&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;TokenResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__/services&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// 3️⃣&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Define needed instances.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// Define needed states from the Vuex store.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expire&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;

    &lt;span class="c1"&gt;// Define function for renew token.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenRenew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ...will be described below...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Define background async setInterval function for renew token.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenRenewTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ...will be described below...&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// 4️⃣&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;expire&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;tokenRenew&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// 5️⃣&lt;/span&gt;
    &lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tokenRenewTimer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="nx"&gt;onUnmounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenRenewTimer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect! Now let's review the important points:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I use a custom Vuex implementation of the state store adapted to TypeScript. So, I import my implementation of the &lt;code&gt;useStore&lt;/code&gt; hook instead of the standard one (you can read more about it &lt;a href="https://next.vuex.vuejs.org/guide/typescript-support.html#simplifying-usestore-usage"&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;For more convenient work with the Vuex store, I applied &lt;a href="https://next.vuex.vuejs.org/guide/mutations.html#using-constants-for-mutation-types"&gt;constants for mutation types&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Since SPA usually has numerous HTTP calls to the API, I usually write some services which are a better wrapper over the &lt;code&gt;axios&lt;/code&gt; &lt;a href="https://github.com/axios/axios#creating-an-instance"&gt;instance&lt;/a&gt; (with additional header settings). This helps simplify code separation for a particular business logic. In this case, for token renew requests (see example &lt;a href="https://github.com/koddr/app-komentory/blob/main/src/services/TokenDataService.ts"&gt;here&lt;/a&gt;). &lt;/li&gt;
&lt;li&gt;If token and expire time not set, try to renew. This condition allows you to run the token update process if a JWT session has been deleted from the application memory (from Vuex store in this case).&lt;/li&gt;
&lt;li&gt;Define needed lifecycle hooks with &lt;code&gt;tokenRenewTimer()&lt;/code&gt; function. Subscribe to the periodic background token renew process when this component has been mounted, and clear timer after unmounted.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-for-updating-tokens"&gt;
  &lt;/a&gt;
  Function for updating tokens
&lt;/h3&gt;

&lt;p&gt;This async function will do the basic work of retrieving the JWT session if the user has a valid &lt;code&gt;refresh_token&lt;/code&gt; cookie.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="c1"&gt;// Define function for renew token.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenRenew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token_response&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;TokenResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renew&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Successful response from Auth server.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 1️⃣&lt;/span&gt;
        &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UPDATE_JWT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UPDATE_CURRENT_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// 2️⃣&lt;/span&gt;
        &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_myapp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Failed response from Auth server.&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;current_route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentRoute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="c1"&gt;// 3️⃣&lt;/span&gt;
        &lt;span class="c1"&gt;// 4️⃣&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current_route&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token_response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 5️⃣&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not complicated, is it? Let's go into more detail:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Save the response data (a new JWT and user info) to the Vuex store.&lt;/li&gt;
&lt;li&gt;Add a random string to the &lt;code&gt;localStorage&lt;/code&gt; to indicate that the user has been authenticated. This marker is only needed to reduce the number of requests to the authorization server if the user has been successfully authorized.&lt;/li&gt;
&lt;li&gt;Get current route name from &lt;code&gt;vue-router&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Skip redirect, if current route name is &lt;code&gt;register&lt;/code&gt;. This is important because it prevents forced redirects to the login page if the user goes through the registration process.&lt;/li&gt;
&lt;li&gt;Show any other errors.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-for-calling-the-background-update-tokens"&gt;
  &lt;/a&gt;
  Function for calling the background update tokens
&lt;/h3&gt;

&lt;p&gt;We got to the heart of a good UX of our app. This is the function that will, in the background, send periodic requests to the authorization server and get a new session (JWT + user info).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="c1"&gt;// Define background async setInterval function for renew token.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenRenewTimer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// get current date&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expire_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expire&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1️⃣&lt;/span&gt;
  &lt;span class="c1"&gt;// 2️⃣&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expire_time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_myapp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;tokenRenew&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;60000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 3️⃣&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's what we're doing here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Subtract 1 minute from JWT &lt;code&gt;expire&lt;/code&gt; field.&lt;/li&gt;
&lt;li&gt;If expire time is less or equal than now, and &lt;code&gt;localStorage&lt;/code&gt; has &lt;code&gt;_myapp&lt;/code&gt; item, then send request to renew token. &lt;/li&gt;
&lt;li&gt;Set 1 minute interval to make the periodic request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result-we-got"&gt;
  &lt;/a&gt;
  The result we got
&lt;/h2&gt;

&lt;p&gt;As a result, we have a stable enough frame to implement any further web application logic. Now, you can make a getter in the store (like &lt;a href="https://github.com/koddr/app-komentory/blob/82fadc20fbfdfc56cbc207a837aeb050a9e9d8a9/src/store.ts#L69-L74"&gt;this&lt;/a&gt; one) to check the actual state of user authorization in your other components.&lt;/p&gt;

&lt;p&gt;Well, the article is in the style of a code review, which is even better than a &lt;em&gt;dry&lt;/em&gt; description of the sequence of actions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What a great thing that happened!&lt;/strong&gt; 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;↑ Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vic Shóstak &lt;a href="https://shostak.dev"&gt;https://shostak.dev&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

&lt;p&gt;And, of course, you can support me by donating at &lt;a href="https://liberapay.com/koddr/donate"&gt;LiberaPay&lt;/a&gt;. &lt;em&gt;Each donation will be used to write new articles and develop non-profit open-source projects for the community.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://liberapay.com/koddr/donate"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrXDZTNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zq8442cqyjq2i1jdeay8.png" alt="Support author at LiberaPay" width="424" height="104"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Reinforcement learning with AWS DeepRacer</title>
      <author>Avinash Kumar</author>
      <pubDate>Mon, 15 Nov 2021 16:31:55 +0000</pubDate>
      <link>https://dev.to/darkxenium/reinforcement-learning-with-aws-deepracer-2pce</link>
      <guid>https://dev.to/darkxenium/reinforcement-learning-with-aws-deepracer-2pce</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-we-are-working-towards"&gt;
  &lt;/a&gt;
  WHAT WE ARE WORKING TOWARDS
&lt;/h3&gt;

&lt;p&gt;AWS Deepracer is a fun way to learn and implement Machine learning with hands on experience. Developers of all skill levels can get hands on with machine learning through a cloud based 3D racing simulator, which they can start using simply by logging into their aws account. AWS DeepRacer is based on the model of reinforcement learning (RL). RL is an advanced machine learning (ML) technique that takes a very different approach to training models than other machine learning methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-aws-deepracer-services-provide"&gt;
  &lt;/a&gt;
  WHAT AWS DEEPRACER SERVICES PROVIDE
&lt;/h3&gt;

&lt;p&gt;The user can now use the AWS DeepRacer 3D racing simulator. Experiment with multiple sensor inputs, the latest reinforcement learning algorithms, neural network configurations and simulation to-real domain transfer methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-begin"&gt;
  &lt;/a&gt;
  HOW TO BEGIN
&lt;/h3&gt;

&lt;p&gt;You will first need to create your own deepracer car by selecting the type of car, the skin you want on it, the track you want it to run on. And finally, you can train your model by setting the time you want it to train for and then testing it! As you progress you can participate in the AWS League.It is a global autonomous racing league, driven by machine learning.There are 3 stages that you can advance to :-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start in the Open Division and win virtual cars&lt;/li&gt;
&lt;li&gt;Advance to the Pro Division and win gear&lt;/li&gt;
&lt;li&gt;Take on the League's best and win a DeepRacer
It is a fun community of many Machine learning Enthusiast and you can meet many new people thorugh the various community driven events.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h3&gt;

&lt;p&gt;Here are some of the official AWS links from their website containing various resources from where you can learn to build your own models and tracks. You can also improve your racing performance.&lt;/p&gt;

&lt;p&gt;That's it, I hope I was able to spark some interest into you. Now it's time to get your hands dirty! All the best!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v8PWpTgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcl9qi4wm1eu2qj50l83.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v8PWpTgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcl9qi4wm1eu2qj50l83.gif" alt="Spongebob meme" width="498" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Picking the Right Tech Stack for Your Startup</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 15 Nov 2021 16:10:40 +0000</pubDate>
      <link>https://dev.to/codesphere/picking-the-right-tech-stack-for-your-startup-hmn</link>
      <guid>https://dev.to/codesphere/picking-the-right-tech-stack-for-your-startup-hmn</guid>
      <description>&lt;p&gt;Written by Dan Parry&lt;/p&gt;




&lt;p&gt;Finding the right tools to build your new start-up is essential. The foundations on which your company will be built need to be reliable, flexible and scalable.&lt;/p&gt;

&lt;p&gt;It can be overwhelming to make the right choice, there seems to be new libraries and frameworks popping up every week, so the right stack now might not be the best stack tomorrow. But there are some key things to consider when getting started choosing your new startup’s tech stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1viO5bj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqumj9k75vk4u6yba95s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1viO5bj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqumj9k75vk4u6yba95s.png" alt="Image description" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Your team will likely be small and made up of a few fullstack developers wearing many hats; Agile teams get products built quickly and time is money in the startup game. So plan smart. Fast, cost effective solutions that can grow with your product are the key.&lt;/p&gt;

&lt;p&gt;Go with what you know. While new technologies can be powerful, having a team of experienced developers using tech they are familiar with can save you a lot of time and cost associated with introducing a new language on day one.&lt;/p&gt;

&lt;p&gt;On the other hand, spending some time researching new solutions can bring new powerful tools, always be on the lookout for new tech but don't use it for the sake of it.&lt;br&gt;
If you can, use the same language on the front and as the backend, this will make your developers lives much easier. At the beginning, try to avoid languages like Go, Rust and C++. While they are efficient, they can be slow to develop and expensive to develop with.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;Your user base will inevitably grow as your platform becomes more popular and your startup begins to take off, so you need to make sure the infrastructure and architecture you choose is able to scale with you.&lt;/p&gt;

&lt;p&gt;Absorbing planned growth is one thing, but the flexibility to keep up with sudden and unexpected scaling is the real test. If your startup becomes an overnight success and your user base triples, you need to be able to take the new traffic on board. Make sure you prioritise scalability in platform architecture and you'll thank yourself later.&lt;/p&gt;

&lt;p&gt;Consider languages like Python and Ruby when planning your architecture, as they are great scaling languages and they have great community support.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;cloud service provider&lt;/strong&gt; you choose to host your platform will also play a huge role in your ability to scale. Make sure that the service you choose is capable of handling reverse proxies, load balancing, multi-tenancy support, and other crucial scaling processes. It should also provide stable uptime - every time your service is down, you stand to lose users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cdh01p-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44vv4zo2xkwy6ppp2g7p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cdh01p-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/44vv4zo2xkwy6ppp2g7p.jpeg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#cost"&gt;
  &lt;/a&gt;
  Cost
&lt;/h3&gt;

&lt;p&gt;Cost efficiency is on the mind of all new startup founders, but technology costs money and development costs are unavoidable. Your best friends here are open-source technologies. Being available to the public means you can use them for free.&lt;/p&gt;

&lt;p&gt;There is much higher availability of developers for hire that can write in a popular, open-source language, so this will reduce the need for specialist skills in your hiring process. More competition in the market can also mean lower wage prices - but hiring cheap isn't always the smart move so this is an area that requires some careful consideration.&lt;/p&gt;

&lt;p&gt;Plan for tomorrow's costs today - Any technology you choose to include in your stack needs to be easily maintainable in the future. A simple and fast solution today can cost you down the line if not properly vetted.&lt;/p&gt;

&lt;p&gt;Free tokens from cloud service providers for example are a great way to get you started, but consider how the invoice might look when the tokens run out. Are your tools sustainable in the long term or are you creating a headache for tomorrow?&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#time"&gt;
  &lt;/a&gt;
  Time
&lt;/h3&gt;

&lt;p&gt;Time is money and money is time. You want to get up and running as quickly as possible and to do that you need to pick tools for your stack that are easy to use, implement and maintain.&lt;/p&gt;

&lt;p&gt;Finding holistic services that can streamline large parts of your development process is a great way to go and can even save you the cost of an extra team member.&lt;/p&gt;

&lt;p&gt;Speed to market is vital to startup endeavours for a number of reasons. Budget limitations are the most obvious of these, when the runway runs out and the money dries up, it's game over, so getting a product generating revenue is make or break.&lt;/p&gt;

&lt;p&gt;Someone may also get there faster. While it's possible you're the only one in your space providing a solution, it's only a matter of time before someone else comes along and does it better, so getting their first is essential.&lt;/p&gt;

&lt;p&gt;Find tools that don't require weeks of configuration and months of continued maintenance.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#common-stacks"&gt;
  &lt;/a&gt;
  Common stacks
&lt;/h3&gt;

&lt;p&gt;With your time and budget needs in mind, you don't need to reinvent the wheel when choosing your tech stack. Here are some common stacks you can look into before starting your project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MEAN - Mongo, Express, Angular &amp;amp; Node&lt;/strong&gt;&lt;br&gt;
Used to build dynamic websites and web based applications. MEAN is also open source, which means if you come across any issues while using it, there is a huge community to lean on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;MERN - Mongo, Express, React &amp;amp; Node&lt;/strong&gt;&lt;br&gt;
Another great open source stack, MERN uses React as the front-end framework, which is a lot more flexible and easy to use than Angular in our opinion. Great for full-stack web applications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;RAD - React Native &amp;amp; Django&lt;/strong&gt;&lt;br&gt;
Commonly regarded as the best stack for Web, Mobile and Desktop development, RAD stack is used by many big name companies. It's scalable, easy to modify and open source.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Choosing the right tools for your tech stack will make or break the development process of your product and ultimately the success of your startup. Find a balance of new technologies and what you know to work. Speed and cost are key elements but don't always take the fastest and cheapest option.&lt;/p&gt;

&lt;p&gt;There is a wealth of options on the market nowadays so put some time into research. Find the tools that will help you build quickly and scale easily.&lt;/p&gt;

&lt;p&gt;PS: If you're looking for a Cloud provider that can save your team the hassle of setting up AWS, Azure, or Heroku, check out &lt;a href="https://link.codesphere.com/FY"&gt;Codesphere&lt;/a&gt;, the most intuitive cloud provider on the market.&lt;/p&gt;

&lt;p&gt;What tech stack do you use? Let us know down below!&lt;/p&gt;

</description>
      <category>startup</category>
      <category>programming</category>
      <category>webdev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Spring Boot application with Apache Kafka</title>
      <author>LehaUchicha</author>
      <pubDate>Mon, 15 Nov 2021 16:07:58 +0000</pubDate>
      <link>https://dev.to/lehauchicha/spring-boot-application-with-apache-kafka-299n</link>
      <guid>https://dev.to/lehauchicha/spring-boot-application-with-apache-kafka-299n</guid>
      <description>

&lt;p&gt;In this article we will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;   Run Zookeeper and kafka locally&lt;/li&gt;
&lt;li&gt;   Write Spring boot application &lt;strong&gt;Kafka-Server&lt;/strong&gt;. It's order service, which will produce and consume messages using &lt;strong&gt;orders&lt;/strong&gt; topic. Also has entrypoint for order creation which will send message to the kafka topic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All examples available on github: &lt;a href="https://github.com/LehaUchicha/Kafka-Example.git"&gt;https://github.com/LehaUchicha/Kafka-Example.git&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-zookeeper-and-kafka"&gt;
  &lt;/a&gt;
  Configure Zookeeper and kafka
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#download-zookeeper-and-kafka"&gt;
  &lt;/a&gt;
  Download Zookeeper and Kafka
&lt;/h3&gt;

&lt;p&gt;Before writing our application we need to run zookeeper and kafka locally.&lt;br&gt;
For that go to official site and download the latest version&lt;/p&gt;

&lt;p&gt;Zookeeper&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://zookeeper.apache.org/releases.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kafka&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://kafka.apache.org/downloads
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;ps:&lt;/em&gt; &lt;em&gt;On the moment of article writing the latest version was 3.0.0, but &lt;br&gt;
this version not worked to me, so I download previous version - 2.8.1, which worked fine&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#run-zookeeper"&gt;
  &lt;/a&gt;
  Run Zookeeper
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the downloaded and extracted zookeeper folder. You will see such folder structure:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1F-RizG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8wmeuqighbm3b0nrezt.png" alt="Zookeeper folder structure" width="793" height="270"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;bin - folder, which contains utilities for zookeeper management&lt;/li&gt;
&lt;li&gt;conf - folder, which contains configuration files for zookeeper. In this folder you can find zoo_sample.cfg - example of zookeeper configuration.&lt;/li&gt;
&lt;li&gt;logs - folder, where zookeeper can write logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First lets go to the conf folder, make a copy of &lt;strong&gt;zoo_sample.cfg&lt;/strong&gt; and rename it to &lt;strong&gt;zoo.cfg&lt;/strong&gt;.&lt;br&gt;
In the &lt;strong&gt;zoo.cfg&lt;/strong&gt; you need to override such value to &lt;strong&gt;dataDir=../logs&lt;/strong&gt; or to any other directory which you like.&lt;br&gt;
From the config file you can find othe important settings, like &lt;strong&gt;clientPort=2181&lt;/strong&gt;, which said for us that zookeper by default run on port 2181.&lt;br&gt;
You can override properties as you wish, but lets left them as is.&lt;/p&gt;

&lt;p&gt;That's it! Now we need to run zookeeper server. For that go to the bin folder and find &lt;strong&gt;zkServer.cmd&lt;/strong&gt; or&lt;br&gt;
&lt;strong&gt;zkServer.sh&lt;/strong&gt;. If you are the Windows user - use &lt;strong&gt;zkServer.cmd&lt;/strong&gt;, otherwise &lt;strong&gt;zkServer.sh&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zkServer.cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result will be:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2WRC1pGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wky4booz1uruheebhbrn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2WRC1pGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wky4booz1uruheebhbrn.png" alt="Image description" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or logs without errors, like here in case if you use &lt;strong&gt;zkServer.sh start&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vi_vgLtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17wx4z879nf1m4urgfrf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vi_vgLtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17wx4z879nf1m4urgfrf.png" alt="Image description" width="570" height="76"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we need to run kafka.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#run-kafka"&gt;
  &lt;/a&gt;
  Run Kafka
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the downloaded and extracted apache kafka folder. You will see such folder structure:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ujBrLpXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tlppc3siibxdyl3c55ef.png" alt="kafka folder Structure" width="822" height="302"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;bin - folder, which contains utilities for kafka management&lt;/li&gt;
&lt;li&gt;config - folder, which contains configuration files for kafka. In this folder you can find &lt;strong&gt;server.properties&lt;/strong&gt; which should be modified&lt;/li&gt;
&lt;li&gt;logs - folder, where kafka can write logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go to the config folder and override &lt;strong&gt;log.dirs=&lt;/strong&gt; property in the file &lt;strong&gt;server.properties&lt;/strong&gt; to the any folder where you want to store logs.&lt;br&gt;
I will use logs folder in the kafka root, so in my case it looks like this: &lt;strong&gt;log.dirs=../logs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now time to run apache kafka. For that go to the bin folder.&lt;br&gt;
For NOT Windows user you need to find &lt;strong&gt;kafka-server-start&lt;/strong&gt; and execute script with the path to the &lt;strong&gt;server.properties&lt;/strong&gt; file as an argument&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./kafka-server-start.sh ../config/server.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows users inside &lt;strong&gt;bin&lt;/strong&gt; folder you can find &lt;strong&gt;windows&lt;/strong&gt; folder which contains the same commands but for windows)&lt;br&gt;
Go to the &lt;strong&gt;windows&lt;/strong&gt; folder and run the same script. Don't forget to specify path to &lt;strong&gt;server.properties&lt;/strong&gt; file as argument&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kafka-server-start.bat ../../config/server.properties
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't see any exceptions in console, it means, that kafka is working!&lt;br&gt;
Now befor start to writing Spring Boot application we need to create &lt;strong&gt;orders&lt;/strong&gt; topic which our applications will use.&lt;br&gt;
For that we need to execute command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kafka-topics.bat &lt;span class="nt"&gt;--create&lt;/span&gt; &lt;span class="nt"&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class="nt"&gt;--replication-factor&lt;/span&gt; 1 &lt;span class="nt"&gt;--partitions&lt;/span&gt; 1 &lt;span class="nt"&gt;--topic&lt;/span&gt; orders
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kafka-topics.sh &lt;span class="nt"&gt;--create&lt;/span&gt; &lt;span class="nt"&gt;--zookeeper&lt;/span&gt; localhost:2181 &lt;span class="nt"&gt;--replication-factor&lt;/span&gt; 1 &lt;span class="nt"&gt;--partitions&lt;/span&gt; 1 &lt;span class="nt"&gt;--topic&lt;/span&gt; orders
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will create topic &lt;strong&gt;orders&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-kafka-server-spring-boot-application"&gt;
  &lt;/a&gt;
  Write Kafka Server Spring Boot application
&lt;/h3&gt;

&lt;p&gt;You can download configured project from start.spring.io by &lt;a href="https://start.spring.io/#!type=maven-project&amp;amp;language=java&amp;amp;platformVersion=2.5.6&amp;amp;packaging=jar&amp;amp;jvmVersion=11&amp;amp;groupId=com.kafka&amp;amp;artifactId=kafka-server&amp;amp;name=kafka-server&amp;amp;description=Demo%20project%20for%20Spring%20Boot&amp;amp;packageName=com.kafka.kafka-server&amp;amp;dependencies=web,kafka,lombok"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or download ready project from github: &lt;a href="https://github.com/LehaUchicha/Kafka-Example.git"&gt;https://github.com/LehaUchicha/Kafka-Example.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here in dependency you need to specify Spring for Apache Kafka for using kafka in our application.&lt;/p&gt;

&lt;p&gt;pom.xml should contain:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.kafka&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-kafka&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;go to the &lt;strong&gt;KafkaServerApplication.java&lt;/strong&gt; file and add &lt;strong&gt;@EnableKafka&lt;/strong&gt; annotation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@EnableKafka
@SpringBootApplication
public class KafkaServerApplication {

    public static void main(String[] args) {
        SpringApplication.run(KafkaServerApplication.class, args);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;go to the &lt;strong&gt;application.properties&lt;/strong&gt; file and specify such properties&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight properties"&gt;&lt;code&gt;&lt;span class="py"&gt;server.port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;9955&lt;/span&gt;

&lt;span class="py"&gt;kafka.server&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;localhost:9092&lt;/span&gt;
&lt;span class="py"&gt;kafka.group.id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;group1&lt;/span&gt;
&lt;span class="py"&gt;kafka.producer.id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;producer1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to create configuration for consumer and producer.&lt;/p&gt;

&lt;p&gt;Consumer configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KafkaConsumerConfiguration&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${kafka.server}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;kafkaServer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${kafka.group.id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;kafkaGroupId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;KafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;batchFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setConsumerFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumerFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBatchListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMessageConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BatchMessagingMessageConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;converter&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;KafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;singleFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
                    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setConsumerFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumerFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setBatchListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMessageConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringJsonMessageConverter&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ConsumerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;consumerFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DefaultKafkaConsumerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;consumerConfigs&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;KafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;kafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ConcurrentKafkaListenerContainerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;consumerConfigs&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kafkaServer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;KEY_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;LongDeserializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VALUE_DESERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;StringDeserializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;GROUP_ID_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kafkaGroupId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ConsumerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ENABLE_AUTO_COMMIT_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;StringJsonMessageConverter&lt;/span&gt; &lt;span class="nf"&gt;converter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;StringJsonMessageConverter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Producer configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;KafkaProducerConfiguration&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

      &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${kafka.server}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;kafkaServer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Value&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"${kafka.producer.id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;kafkaProducerId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;producerConfigs&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProducerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BOOTSTRAP_SERVERS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kafkaServer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProducerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;KEY_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;LongSerializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProducerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;VALUE_SERIALIZER_CLASS_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;JsonSerializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ProducerConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CLIENT_ID_CONFIG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kafkaProducerId&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;props&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;ProducerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;producerOrderFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;DefaultKafkaProducerFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;producerConfigs&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;

      &lt;span class="nd"&gt;@Bean&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;KafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;kafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;KafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;KafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;producerOrderFactory&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setMessageConverter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;StringJsonMessageConverter&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: needs to use &lt;strong&gt;org.springframework.kafka.support.serializer.JsonSerializer;&lt;/strong&gt;, not from Jackson library&lt;/p&gt;

&lt;p&gt;OrderService:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Slf4j&lt;/span&gt;
&lt;span class="nd"&gt;@Service&lt;/span&gt;
&lt;span class="nd"&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderServiceImpl&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;OrderService&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;KafkaTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;kafkaOrderTemplate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;ObjectMapper&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;kafkaOrderTemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"orders"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="nd"&gt;@KafkaListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"OrderId"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"orders"&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="n"&gt;containerFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"singleFactory"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-&amp;gt; consumed {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;objectMapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;JsonProcessingException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error happens during json processing"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error happens during json processing: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and OrderController:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@RestController&lt;/span&gt;
&lt;span class="nd"&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;OrderServiceImpl&lt;/span&gt; &lt;span class="n"&gt;orderService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/order"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;OrderDto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"New Order #: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nanoTime&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Standard description"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;orderService&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when you will run application - entrypoint will be available on the port 9955.&lt;br&gt;
Make POST request using endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nl"&gt;localhost:&lt;/span&gt;&lt;span class="mi"&gt;9955&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Message will be created and sended to the topic &lt;strong&gt;orders&lt;/strong&gt;. After that our application will immediately read this&lt;br&gt;
message through the method with annotation &lt;strong&gt;@KafkaListener&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="nd"&gt;@KafkaListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"OrderId"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"orders"&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="n"&gt;containerFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"singleFactory"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OrderDto&lt;/span&gt; &lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-&amp;gt; consumed {}"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writeValueAsString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dto&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in console you will see such result:&lt;br&gt;
&lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7usx8qslomhtat4bwy6g.png"&gt;console output&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! The code available on github: &lt;a href="https://github.com/LehaUchicha/Kafka-Example.git"&gt;https://github.com/LehaUchicha/Kafka-Example.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a bonus, which not explained in the article - you can find the second Spring boot application &lt;strong&gt;Kafka-Producer&lt;/strong&gt;, which will push a message every 5 seconds after running to the &lt;strong&gt;orders&lt;/strong&gt; topic.&lt;br&gt;
And &lt;strong&gt;Kafka-Server&lt;/strong&gt; application will read this message, which you can find in console. you need just run application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this article we successfully configured apache kafka and understand how to work with kafka wia Spring Boot.&lt;br&gt;
Also figure out how services can communicate with each other wia apache kafka.&lt;/p&gt;

&lt;p&gt;Thank you for reading. If you like an article, you can support me&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/LehaUchicha"&gt;by buying me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a good day!&lt;/p&gt;

</description>
      <category>springboot</category>
      <category>tutorial</category>
      <category>kafka</category>
    </item>
    <item>
      <title>AWS BottleRocket On EKS NodeGroup</title>
      <author>🚀  Vu Dao 🚀 </author>
      <pubDate>Mon, 15 Nov 2021 16:07:47 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-bottlerocket-on-eks-nodegroup-45ec</link>
      <guid>https://dev.to/aws-builders/aws-bottlerocket-on-eks-nodegroup-45ec</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The footprints of Linux are increasing day by day and the latest addition to this is the Bottlerocket. It is a Linux-based operating system built by Amazon Web Services. This open-source OS targets to host and run the containers on virtual machines or bare metal hosts.&lt;/li&gt;
&lt;li&gt;Today, Amazon Elastic Kubernetes Services (Amazon EKS) announces native support for Bottlerocket in managed node groups. Bottlerocket is a Linux-based open-source operating system that is purpose-built by Amazon. It focuses on security and maintainability, and provides a reliable, consistent, and safe platform for container-based workloads&lt;/li&gt;
&lt;li&gt;Every Linux-based OS involves the Linux kernel—which manages hardware resources—and a set of software packages that make up the rest of the operating system. That's why the bottlerocket-OS promises a light-weight to boost up and high security.&lt;/li&gt;
&lt;li&gt;In this post, we will launch a Bottlerocket managed node group with lauch template on EKS cluster. It's not only about setting the nodegroup to use bottlerocket AMI but about the arguments at EKS node startup. Let's find out more&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Why-Should-You-Use-Bottlerocket-OS?"&gt;Why Should You Use Bottlerocket OS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.toCreate-a-lauch-template-for-EKS-nodegroup"&gt;Create a lauch-template for EKS nodegroup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Create-ASG-with-the-launch-template"&gt;Create ASG with the launch template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-should-you-use-bottlerocket-os"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Why Should You Use Bottlerocket OS?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Bottlerocket comes to the rescue when facing the above issues. The Bottlerocket OS tends to mitigate the challenges faced by container-based environments such as security, updates, compute cycles, start-up time, and the integrity of a cluster over time. Most of the components in Bottlerocket are written in Rust, so some of the memory safety issues are eliminated. The following are additional benefits of Bottlerocket:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved uptime: You can apply updates to the Bottlerocket OS all at once, and they can also be rolled back as needed, improving uptime.&lt;/li&gt;
&lt;li&gt;Lower management overhead: You can utilize container orchestration services to automate updates to the Bottlerocket OS, reducing management overhead and operational costs.&lt;/li&gt;
&lt;li&gt;Better security and resource utilization: Contrary to other operating systems, you only have the essential components in Bottlerocket OS to run, creating a smaller attack surface and improving security.&lt;/li&gt;
&lt;li&gt;Optimized performance: Bottlerocket is optimized to run on Amazon EC2 and incorporates built-in support for integrations with AWS services.&lt;/li&gt;
&lt;li&gt;Read-only file system: Bottlerocket uses a read-only file system whose integrity is validated at the time of booting.&lt;/li&gt;
&lt;li&gt;Automated updates: You can automate updates via orchestration services like Amazon EKS. Unlike traditional Linux-based systems that use package-by-package updates, Bottlerocket utilizes image-based updates.&lt;/li&gt;
&lt;li&gt;Open development model: You can create code and design changes to the Bottlerocket OS via code available in Github. It should be noted that the Bottlerocket OS supports images formatted for Docker and OCI (Open Container Initiative).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-a-lauchtemplate-for-eks-nodegroup"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Create a lauch-template for EKS nodegroup&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Pre-requisite: EKS cluster&lt;/li&gt;
&lt;li&gt;Here we will create an Auto scaling group with launch template contains following things

&lt;ul&gt;
&lt;li&gt;Bottlerocket AMI, to get the latest AMI ID align with EKS cluster version and AWS region, use SSM parameters store
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ~ $ aws ssm get-parameter --region ap-northeast-1 --name "/aws/service/bottlerocket/aws-k8s-1.18/x86_64/latest/image_id" --query Parameter.Value --output text
   ami-0a04f060889bcef33
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--45zJXscw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/ami.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--45zJXscw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/ami.png%3Fraw%3Dtrue" width="877" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Key-pair in order to SSH to the node for demonstration purpose&lt;/li&gt;
&lt;li&gt;EKS VPC&lt;/li&gt;
&lt;li&gt;Security group for Pod communications (Check out &lt;a href="https://dev.to/aws-builders/understand-pods-communication-338c"&gt;Understand Pods communication&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8R5MkMV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/network.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8R5MkMV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/network.png%3Fraw%3Dtrue" width="817" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IAM instance profile which has enough permission for node to join EKS cluster, read more &lt;a href="https://dev.to/aws-builders/aws-eks-launch-template-of-node-group-6a4"&gt;AWS EKS - Launch Template Of Node Group&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User data&lt;/strong&gt; (describe laters)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#one-of-important-thing-is-raw-user-data-endraw-which-contains-additional-arguments-to-raw-kubelet-endraw-service-such-as-node-lables-node-taints"&gt;
  &lt;/a&gt;
  One of important thing is &lt;code&gt;user data&lt;/code&gt; which contains additional arguments to &lt;code&gt;kubelet&lt;/code&gt; service such as node lables, node taints.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The user data must be in &lt;a href="https://github.com/toml-lang/toml"&gt;TOML format&lt;/a&gt; and must contains &lt;code&gt;settings.kubernetes.cluster-certificate&lt;/code&gt;, &lt;code&gt;settings.kubernetes.api-server&lt;/code&gt;, and &lt;code&gt;settings.kubernetes.cluster-name&lt;/code&gt; (Read more &lt;a href="https://github.com/bottlerocket-os/bottlerocket#kubernetes-settings"&gt;Kubernetes settings&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Following is &lt;code&gt;user data&lt;/code&gt; example with &lt;code&gt;node-labels&lt;/code&gt; and &lt;code&gt;node-taints&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[settings.kubernetes]
api-server = "https://abc.def.ap-northeast-1.eks.amazonaws.com"
cluster-certificate = "TkQgQ0VSVElGSUNBVEUtLS0tLQo="
cluster-name = "eks-dev"
cluster-dns-ip = "10.100.0.10"

[settings.kubernetes.node-labels]
"lifecycle" = "on-demand"
"role" = "airflow"
"type" = "af-stateful"

[settings.kubernetes.node-taints]
"dedicated" = "airflow:NoSchedule"
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can use &lt;code&gt;eksctl&lt;/code&gt; to generate basic &lt;code&gt;userdata.toml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~ $ eksctl get cluster --region ap-northeast-1 --name eks-dev -o json | jq --raw-output '.[] | "[settings.kubernetes]\napi-server = \"" + .Endpoint + "\"\ncluster-certificate =\"" + .CertificateAuthority.Data + "\"\ncluster-name = \"eks-dev\""' &amp;gt; userdata.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#create-asg-with-the-launch-template"&gt;
  &lt;/a&gt;
  🚀 Create ASG with the launch template &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;After the ASG scales the desired capacity, we can check the bottlerocket nodes&lt;/li&gt;
&lt;li&gt;List the nodes in the EKS cluster which have &lt;code&gt;Bottlerocket OS&lt;/code&gt; and check the Pods are assigned to them
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# kubectl get nodes -o=custom-columns=NODE:.metadata.name,ARCH:.status.nodeInfo.architecture,OS-Image:.status.nodeInfo.osImage,OS:.status.nodeInfo.operatingSystem | grep Bottlerocket
ip-172-10-11-131.ap-northeast-1.compute.internal   amd64   Bottlerocket OS 1.4.0 (aws-k8s-1.18)   linux
ip-172-10-21-64.ap-northeast-1.compute.internal    amd64   Bottlerocket OS 1.4.0 (aws-k8s-1.18)   linux
ip-172-10-31-142.ap-northeast-1.compute.internal   amd64   Bottlerocket OS 1.4.0 (aws-k8s-1.18)   linux

# kubectl get pod -n kube-system -owide | grep ip-172-10-11-131.ap-northeast-1.compute.internal
aws-node-t622b                        1/1     Running   1          3h38m   172.10.11.131   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
aws-node-termination-handler-ql7t2    1/1     Running   0          3h38m   172.10.11.131   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
efs-csi-node-lbhcq                    3/3     Running   0          3h37m   172.10.11.131   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
kube-proxy-j6l48                      1/1     Running   0          3h38m   172.10.11.131   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;

# kubectl get pod -owide -n airflow | grep ip-172-10-11-131.ap-northeast-1.compute.internal
airflow-flower-59774778b4-fpfdm             2/2     Running   0          3h32m   172.10.11.76    ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-scheduler-cdccf9d86-xc4hr           2/2     Running   0          3h32m   172.10.11.113   ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-sync-users-7fd7c7db8-6whhr          2/2     Running   0          3h32m   172.10.11.36    ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
airflow-web-77d59cfcbb-bxsj5                2/2     Running   0          3h32m   172.10.11.61    ip-172-10-11-131.ap-northeast-1.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Start an SSM session. In order to SSH to the node, it needs to run &lt;code&gt;enable-admin-container&lt;/code&gt; (which is disabled by default) from SSM console&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3fDeqsSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/ssm.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3fDeqsSH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-bottlerocket-eks/blob/master/images/ssm.png%3Fraw%3Dtrue" width="776" height="388"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ssm-user@ip-172-10-12-246 /]$ enable-admin-container
Setting admin container to enabled
204 No Content
Committing and applying changes
200 OK
["settings.host-containers.admin.enabled"]
The admin container is now enabled - it should pull and start soon, and then you can SSH in
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;SSH to the node and see the difference from other Linux OS
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  bash-4.2# systemctl status kubelet
  Running in chroot, ignoring request.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bottlerocket is built from the ground up with only the minimum components necessary to run containers installed on the host. Any additional software such EFS CSI driver, monitoring agents, metric collections, etc. must be run as Daemonsets&lt;/li&gt;
&lt;li&gt;In this post, it shows how to use Bottlerocket natively with Amazon EKS managed node groups and how to interact directly with the Bottlerocket cluster nodes. It's interesting that AWS CDK will support bottlerocket managed nodegroup soon (&lt;a href="https://github.com/aws/aws-cdk/pull/17323"&gt;feat(aws-eks): support bottlerocket managed nodegroup&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;References:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://epsagon.com/tools/how-to-get-started-with-bottlerocket-os/"&gt;How to Get Started with Bottlerocket OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/containers/amazon-eks-adds-native-support-for-bottlerocket-in-managed-node-groups/"&gt;Amazon EKS adds native support for Bottlerocket in Managed Node Groups&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;🚀  Vu Dao 🚀 &lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;🚀 AWSome Devops | AWS Community Builder | AWS SA || ☁️ CloudOpz ☁️&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>eks</category>
      <category>cloudopz</category>
      <category>bottlerocket</category>
    </item>
    <item>
      <title>Don't Learn A JS Framework</title>
      <author>Paul Thompson</author>
      <pubDate>Mon, 15 Nov 2021 16:05:04 +0000</pubDate>
      <link>https://dev.to/paritho/dont-learn-a-js-framework-h3m</link>
      <guid>https://dev.to/paritho/dont-learn-a-js-framework-h3m</guid>
      <description>&lt;p&gt;...until you &lt;em&gt;master&lt;/em&gt; JavaScript.&lt;/p&gt;

&lt;p&gt;Now, you don't have to be on the same level as Brendan Eich, Eric Elliott, or &lt;a class="mentioned-user" href="https://dev.to/getify"&gt;@getify&lt;/a&gt;
, but you should endeavor to understand as much about vanilla JavaScript as you can.&lt;/p&gt;

&lt;p&gt;Fan bois, rise up! Jump to the comments to defend the glory of your framework! &lt;/p&gt;

&lt;p&gt;Now that I have your attention, let's have a discussion. Imagine you're at a &lt;a href="https://dev.to/paritho/3-reasons-to-use-var-in-javascript-1hoe"&gt;fun party&lt;/a&gt;. Macarena comes on and a group of people immediately jump up to dance. You stare on, wishing you knew the moves, but you only know how to &lt;a href="https://www.youtube.com/watch?v=T2e1tsnKkiI"&gt;dance dance&lt;/a&gt;. You spent the last year learning to put your feet -- and only your feet -- in the exact spot the game told you. And when the dancers now shift to the electric slide where you have to move your feet &lt;em&gt;and&lt;/em&gt; clap...well, this is the exact kind of situation your mother warned you about.&lt;/p&gt;

&lt;p&gt;If I've spent time learning a JavaScript framework without taking time to understand the language at a deep level, I'm more like our woeful dance-dancer than I'd like to admit. Frameworks are &lt;em&gt;built&lt;/em&gt; on and with JavaScript. So while you can code an app or website with React© or Vue©, you'll inevitably run across a situation where having a deep understanding of JS is necessary to solve a problem. Furthermore, if you &lt;a href="https://brendaneich.com/"&gt;always bet on JavaScript&lt;/a&gt; you'll be able to move from &lt;del&gt;the macarena&lt;/del&gt; React© to &lt;del&gt;the electric slide&lt;/del&gt; Vue© fairly easily. &lt;/p&gt;

&lt;p&gt;Here's a real-world example of where understanding how JS handles object references could trip you up inside a framework.&lt;/p&gt;

&lt;p&gt;Consider this Vue© &lt;a href="https://vuejs.org/v2/guide/single-file-components.html"&gt;SFC&lt;/a&gt;, Books.vue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(book,idx) in processedBooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;idx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFilter&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
             &lt;span class="nx"&gt;processedBooks&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toProcess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;toProcess&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                     &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                     &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasBeenProcessed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                     &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFilter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                 &lt;span class="p"&gt;});&lt;/span&gt;
             &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;books&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="nx"&gt;scoped&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we use this little guy like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Books&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="na"&gt;books&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eric Elliott&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Programming JavaScript Applications&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kyle Simpson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You don't know JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Matt Pagett&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The Best Dance Moves in the World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you were to take a look at the books property inside the Books.vue component, what do you think you'd find? You might expect it to just contain the authors and titles of our book list. However, this is what you'd see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eric Elliott&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PROGRAMMING JAVASCRIPT APPLICATIONS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;hasBeenProcessed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;toFilter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PROGRAMMING JAVASCRIPT APPLICATIONS-Eric Elliott&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kyle Simpson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOU DON'T KNOW JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;hasBeenProcessed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;toFilter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOU DON'T KNOW JS-Kyle Simpson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Matt Pagett&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THE BEST DANCE MOVES IN THE WORLD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;hasBeenProcessed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;toFilter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;THE BEST DANCE MOVES IN THE WORLD-Matt Pagett&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though Vue© won't let us mutate a prop, &lt;em&gt;and&lt;/em&gt; we've copied the data from &lt;code&gt;this.books&lt;/code&gt; into &lt;code&gt;toProcess&lt;/code&gt;, we've still managed to alter the objects in the array. Why? Because JavaScript keeps the reference to the objects in the array throughout the processing. This has nothing to do with Vue© or any other framework, this is the way the language works. If you needed to do something with the original prop data, say POST that data to a DB, we're now working with objects that have more information than we were expecting.&lt;/p&gt;

&lt;p&gt;Could this be avoided by knowing JS at a deep level first? Maybe. At the very least, when the bug of mutated original data crops up, you'd be able to identify how to fix it. If later on you tackle a project in React© or --&lt;em&gt;shudders&lt;/em&gt;-- Angular, you'll be able to avoid similar problems. &lt;/p&gt;

&lt;p&gt;JavaScript frameworks are great. They can make a developer's life easier and they do add value to our projects, especially large complex ones. However, it's very important to understand JS at a deep level before we dive headfirst into the ever-crashing tide of frontend frameworks. &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
