<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding Angular Modules</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Mon, 10 Jan 2022 19:21:25 +0000</pubDate>
      <link>https://dev.to/this-is-angular/understanding-angular-modules-41pb</link>
      <guid>https://dev.to/this-is-angular/understanding-angular-modules-41pb</guid>
      <description>&lt;p&gt;Today we will understand one of the very important topic in Angular - &lt;strong&gt;Angular Modules&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In simple term a module is a logical block or container that holds something.&lt;/p&gt;

&lt;p&gt;If we need to describe module in terms of Angular we can say its a logical block containing &lt;a href="https://dev.to/anubhab5/understanding-angular-component-2bpa"&gt;components&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://dev.to/this-is-angular/custom-directives-in-angular-2cp5"&gt;custom directives&lt;/a&gt;, &lt;a href="https://dev.to/this-is-angular/creating-custom-pipe-in-angular-2pam"&gt;custom pipes&lt;/a&gt; and services (I will talk in detail very soon).&lt;/p&gt;

&lt;p&gt;Once you create a new Angular project the Angular team provided you with a ready to use module called &lt;code&gt;app.module.ts&lt;/code&gt;. Lets see the different parts of &lt;code&gt;Angular Module&lt;/code&gt; -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now few key take away -&lt;br&gt;
1️⃣ A module is a simple typescript class. &lt;/p&gt;

&lt;p&gt;2️⃣ The module is decorated with &lt;code&gt;@NgModule&lt;/code&gt; decorator.&lt;/p&gt;

&lt;p&gt;3️⃣ The NgModule decorator is a function that takes an object. This object is also called &lt;strong&gt;metadata object&lt;/strong&gt; (you should remember this term)&lt;/p&gt;

&lt;p&gt;4️⃣ The metadata has information/ details which helps Angular how to compile and launch the application.&lt;/p&gt;

&lt;p&gt;In the above example you can see only 4 options but in total there are 9 options available. So lets see each one of them and their use (few are advanced options which will be taken in details later).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;declarations&lt;/code&gt; - &lt;br&gt;
It is an Array of classes. &lt;br&gt;
Holds list of all the custom directives, pipes and components user has created.&lt;br&gt;
All the items (directive, pipe, component) you added in this list are all part of this module.&lt;br&gt;
&lt;strong&gt;Note --- A Very Important One&lt;/strong&gt;&lt;br&gt;
You Can add a component/ directive/ pipe class in only one module's declaration array. If you try to add in more than one place you will get a compile error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;imports&lt;/code&gt; - &lt;br&gt;
It is a list of all modules that this current module is dependent on.&lt;br&gt;
In the above example you can see &lt;code&gt;BrowserModule&lt;/code&gt; added. It means the current module is dependent on the BrowserModule to function correctly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;providers&lt;/code&gt; – &lt;br&gt;
It contains the list of dependency injection providers. (Might be a bit hard to digest at this time so in easy term I can say list of services. I will revisit this part when we talk about services)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;exports&lt;/code&gt; - &lt;br&gt;
List of custom components, directives, pipes that the module exposes/ exports so that the other module can use it.&lt;br&gt;
Now try to relate with import... This module will be exporting and some other module will be importing. So the other module should write the name of this module in that module's import array. Easy right???&lt;/p&gt;

&lt;p&gt;&lt;code&gt;entryComponents&lt;/code&gt; - &lt;br&gt;
It is a list of components that should be compiled when this module is defined. &lt;br&gt;
An Angular app always has at least one entry component, root component- &lt;code&gt;AppComponent&lt;/code&gt; by default.&lt;br&gt;
We will learn about dynamic components later. All dynamic components need to be part of EntryComponent list.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; –&lt;br&gt;
List of components that are bootstrapped/ during the start and the listed components will be automatically added to entryComponents.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;schemas&lt;/code&gt; - &lt;br&gt;
List of elements and properties that are neither Angular components or directives (again will talk about it later. It will be discussed in Advanced topic part).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;id&lt;/code&gt; – &lt;br&gt;
The Id used to identify the modules in getModuleFactory. If left undefined, the NgModule will not be registered with getModuleFactory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jit&lt;/code&gt; -&lt;br&gt;
When this is present, the module will be ignored by the AOT compiler. (Again will be covered in the advanced part)&lt;/p&gt;

&lt;p&gt;The main use of module comes to logically group similar items and put all the related items together. &lt;/p&gt;

&lt;p&gt;Suppose you have a feature like dashboard. All the related components will be placed under that module.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading the post.&lt;br&gt;
Coming up next is &lt;strong&gt;Creating custom module in Angular&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you enjoyed reading the post please do like comment subscribe&lt;br&gt;
and share with your friends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>module</category>
    </item>
    <item>
      <title>AtlasHackathon: Explore With Us (A Web App using Django, MongoDB Atlas)</title>
      <author>Nayan Das</author>
      <pubDate>Mon, 10 Jan 2022 19:01:10 +0000</pubDate>
      <link>https://dev.to/mrpalindrome/atlashackathon-explore-with-us-a-web-app-using-django-mongodb-atlas-5bj0</link>
      <guid>https://dev.to/mrpalindrome/atlashackathon-explore-with-us-a-web-app-using-django-mongodb-atlas-5bj0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;Explore With Us is a vacation destination catalog website build with Django, Bootstrap and MongoDB Atlas.&lt;br&gt;
I created this webapp to take part in MongoDB Atlas Hackathon.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#technologies-i-used"&gt;
  &lt;/a&gt;
  Technologies I used:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTML, CSS, JavaScript and Bootstrap 4.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Django&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MongoDB Atlas&lt;/p&gt;
&lt;ul&gt;

&lt;li&gt;I used MongoDB Atlas to store the database by creating a cluster on  &lt;a href="https://www.mongodb.com/cloud/atlas/register"&gt;MongoDB&lt;/a&gt; &lt;/li&gt;

&lt;li&gt;I used the Atlas search feature to implement a fast, relevance-based full-text search for the destinations that I have in my database.&lt;/li&gt;

&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#how-i-used-atlas-search-feature"&gt;
  &lt;/a&gt;
  How I used Atlas Search feature:
&lt;/h4&gt;

&lt;p&gt;I used MongoDB Atlas search to implement the autocomplete feature in my "Search Destination" Search Bar.&lt;br&gt;
First I made a search index for my collection "main_destination"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTQdCFmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ograz5f6ousy32oxa6m5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTQdCFmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ograz5f6ousy32oxa6m5.png" alt="All collections in the database Project_data" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Search Index I used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "mappings": {
    "dynamic": false,
    "fields": {
      "name": [
        {
          "foldDiacritics": false,
          "maxGrams": 7,
          "minGrams": 3,
          "tokenization": "edgeGram",
          "type": "autocomplete"
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And then in backend I created Connect.py in main folder to connect with the cluster for searching the index from views.py search action. using pymongo package built for python to connect with MongoDB, as djongo does not support aggregate function.&lt;/p&gt;

&lt;p&gt;So that once the user starts searching particular destination it will suggest them destinations automatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fYB6L8UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p26cu97lddozwoapa8q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fYB6L8UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p26cu97lddozwoapa8q.gif" alt="Demo Video to Show implementation of Atlas Search" width="680" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;views.py&amp;gt;search :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDAGCZ7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awyquzi6f1upkkcxa4uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDAGCZ7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awyquzi6f1upkkcxa4uz.png" alt="Search action in veiws.py" width="404" height="537"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the function looks like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add_result = collection.aggregate(
           [
               {
                   "$search": {
                       "autocomplete": {
                           "query": address,
                           "path": "name",
                           "fuzzy": {
                               "maxEdits": 2
                           }
                        }
                   }
               }
           ]
      )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function build a pipeline that searches using the address parameter automatically from the collection as defined in MongoDB Atlas search index as I demoed at the top in my demo video.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#how-you-will-see-this-project"&gt;
  &lt;/a&gt;
  How you will see this project
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 1:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Fork the project repository and clone it using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/mr-palindrome/Explore-With-Us.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Django skeleton is look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYpDpaYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3aigepbu37ztwew1hb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYpDpaYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3aigepbu37ztwew1hb5.png" alt="Django Skeleton" width="252" height="704"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 2:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Install virtualenv then create a virtual environment test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install virtualenv
virtualenv test
source test/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Install all the dependencies using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 3:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Create a Django SECRET_KEY using following command in python3 terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3
&amp;gt;&amp;gt;&amp;gt; from django.core.management.utils import get_random_secret_key  
&amp;gt;&amp;gt;&amp;gt; get_random_secret_key()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create a .env file in explore_with_us folder to store all the environment and secret keys, like Django SECRET_KEY, mongoDB connection string.&lt;/p&gt;

&lt;p&gt;But, for demonstration purpose you don't have to create your own cluster, I have provided my own connection string to access all the data present in my Atlas cluster database(AtlasHackathon&amp;gt;Project_data)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GxnW_xCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33u6496w5xufkf63kyiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxnW_xCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33u6496w5xufkf63kyiz.png" alt='My cluster "AtlasHackathon"' width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now store the Django SECRET_KEY and my connection string in .env, it will look like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SECRET_KEY = &amp;lt;django SECRET_KEY&amp;gt;
HOST = mongodb+srv://user_demo:demo123@atlashackathon.nhdkl.mongodb.net/myFirstDatabase?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 4:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Now you can see the website in your localhost:8000 using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manange.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;The category is &lt;strong&gt;"Choose Your Own Adventure"&lt;/strong&gt;. It could be "E-Commerce Creation" but this is not an e-commerce store or any product catalog. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-my-code"&gt;
  &lt;/a&gt;
  Link to my Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mr-palindrome"&gt;
        mr-palindrome
      &lt;/a&gt; / &lt;a href="https://github.com/mr-palindrome/Explore-With-Us"&gt;
        Explore-With-Us
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Explore With Us&lt;/h1&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;Explore With Us is a vacation destination catalog website build with Django, Bootstrap and MongoDB Atlas
I created this website to take part in MongoDB Atlas Hackathon hosted by &lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m" rel="nofollow"&gt;DEV.to&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Tech I used:&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;HTML,CSS,JS and Bootstrap 4&lt;/li&gt;
    &lt;li&gt;Django&lt;/li&gt;
    &lt;li&gt;MongoDB Atlas&lt;ul&gt;
&lt;li&gt;I used MongoDB Atlas to store the database by creating a cluster on  [MongoDB](&lt;a href="https://www.mongodb.com/cloud/atlas/register" rel="nofollow"&gt;https://www.mongodb.com/cloud/atlas/register&lt;/a&gt;) &lt;/li&gt;
&lt;li&gt;I used the Atlas search feature to implement a fast, relevance-based full-text search for the destinations that I have in my database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
How I used Atlas Search feature:&lt;/h3&gt;
&lt;p&gt;I used MongoDB Atlas search to implement the autocomplete feature in my "Search Destination" Search Bar
So that users can easily find their suitable destination within few seconds without scrolling
First I made a search index for my collection "main_destination".
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The Search Index I used:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;{
  "mappings": {
    "dynamic": false
    "fields": {
      "name": [
        {
          "foldDiacritics": false,
          "maxGrams": 7,
          "minGrams": 3,
          "tokenization":&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mr-palindrome/Explore-With-Us"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;This was my first time using MongoDB as the database for a website which was a really great experience of using NoSQL specially MongoDB Atlas, I'm also planning to use it in my future projects.&lt;br&gt;
I learned about &lt;a href="https://pymongo.readthedocs.io/en/stable/"&gt;pymongo package&lt;/a&gt; and &lt;a href="https://www.djongomapper.com/"&gt;djongo&lt;/a&gt; availabe for python. I took help from &lt;a href="https://www.mongodb.com/compatibility/mongodb-and-django"&gt;How to Use Django with MongoDB&lt;/a&gt; document.&lt;br&gt;
Initially I started researching about Atlas search and how to use them using the &lt;a href="https://docs.atlas.mongodb.com/atlas-search/"&gt;Atlas Search Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And another resource that help me to build my frontend was &lt;a href="https://getbootstrap.com/docs/4.0/getting-started/introduction/"&gt;Bootstrap 4&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>django</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Lets Save The World!</title>
      <author>Maarten Engels</author>
      <pubDate>Mon, 10 Jan 2022 18:54:38 +0000</pubDate>
      <link>https://dev.to/maartene/lets-save-the-world-4g5g</link>
      <guid>https://dev.to/maartene/lets-save-the-world-4g5g</guid>
      <description>&lt;p&gt;Will you join me to - dare I say it - Save the World?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;In this web based game/simulation you play as a country. You are able to enact, revoke and upgrade policies that influence your country in various ways and by consequence, also the Earth as a whole. &lt;/p&gt;

&lt;p&gt;There is no win/lose condition per se, but perhaps trying to keep global warming under 1.5 degrees above pre-industrial temperature is a nice goal?&lt;/p&gt;

&lt;p&gt;It's multiplayer, so the more people play, the bigger the impact we can all make!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can play the game here: &lt;a href="https://www.letssavetheworld.club/"&gt;https://www.letssavetheworld.club/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;More instructions in the &lt;a href="https://github.com/maartene/STW/blob/main/README.md"&gt;Readme&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#play-example"&gt;
  &lt;/a&gt;
  Play example
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dNGKFGh7IdM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h4&gt;

&lt;p&gt;November 14 I registered a domain name, more or less on a whim: letssavetheworld.club. It was around the time of the Climate Conference in Glasgow and I remember how disappointed I was about the results. Was it really that difficult to actually start doing something? So I decided I'd create a game/simulation to get a sense of the complexity involved. I researched climate change models and the effects of global warming for humanity. &lt;/p&gt;

&lt;p&gt;Then, this hackathon came along, offering the perfect reason to actually create the game and publish it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/maartene"&gt;
        maartene
      &lt;/a&gt; / &lt;a href="https://github.com/maartene/STW"&gt;
        STW
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      MongoDB+Dev hackathon entry: a game where we - dare I say it - Save The World!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
STW&lt;/h1&gt;
&lt;p&gt;MongoDB+Dev hackathon entry: a game where we - dare I say it - Save The World!&lt;/p&gt;
&lt;h2&gt;
You can play a live build at &lt;a href="https://www.letssavetheworld.club" rel="nofollow"&gt;https://www.letssavetheworld.club&lt;/a&gt;
&lt;/h2&gt;
&lt;h2&gt;
Project setup&lt;/h2&gt;
&lt;p&gt;The application consists of two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API backend: written in Swift using the Vapor framework;&lt;/li&gt;
&lt;li&gt;Web frontend: written in JavaScript using the Vue framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Running the API backend&lt;/h3&gt;
&lt;h4&gt;
Pre-requisites&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You need the Swift toolchain. If you are on macOS, just make sure you have the latest version of Xcode installed. On Linux, you can download Swift from swift.org.&lt;/li&gt;
&lt;li&gt;You need a MongoDB, either local or on a cloud service like Mongo Atlas. Mongo Atlas has a free tier that works quite well for (testing) this project.&lt;/li&gt;
&lt;li&gt;Setting the environment variable &lt;code&gt;STW_BACKEND_DB_URL&lt;/code&gt; to your MongoDB connection string.&lt;/li&gt;
&lt;li&gt;By default, the API backend listens on port 8000. If you want to change this, you can do so by setting the environment variable: &lt;code&gt;STW_BACKEND_PORT&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Linux:&lt;/h4&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/maartene/STW"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#about-the-climate-change-model"&gt;
  &lt;/a&gt;
  About the climate change model
&lt;/h4&gt;

&lt;p&gt;Climate change is a pretty complex concept. The model used in this game is very, VERY basic. It only covers average global temperature and warming based on carbon concentration in the atmosphere. It is not aware of regional differences. The model in itself is flexible though and could be expanded to take more metrics into account.&lt;br&gt;
(exact links to the various data sources for the model can be found in the source code)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-the-tech"&gt;
  &lt;/a&gt;
  About the tech
&lt;/h4&gt;

&lt;p&gt;Lets Save The World is based on two big technologies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;backend uses the &lt;a href="https://vapor.codes"&gt;Vapor framework&lt;/a&gt;: a Server Side Swift framework. I like using Swift and feel that in particular for backend work. Its an opinionated language that somehow seems to help me write better code. That Vapor supports MongoDB out of the box also helps;&lt;/li&gt;
&lt;li&gt;front-end uses the &lt;a href="https://v3.vuejs.org"&gt;Vue.js&lt;/a&gt; framework (with Vuex). I'm no Javascript expert, but find it very easy to use Vue to create a usable front-end. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The runtime version of the game is deployed on the &lt;a href="https://www.digitalocean.com/products/app-platform/"&gt;DigitalOcean App platform&lt;/a&gt;. The front-end as a Static Website (using a free plan), the backend as a Docker image (using the cheapest paid plan. The app platform takes care of all the complex stuff, such as creating TLS/SSL certificates for the website, deployments and the networking/domain stuff.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-the-usage-of-mongodb"&gt;
  &lt;/a&gt;
  About the usage of MongoDB
&lt;/h4&gt;

&lt;p&gt;MongoDB tends to be my database backend of choice for Vapor projects. I like the flexibility its schemaless setup offers. And I like that it uses JSON for most interactions, making bridging to data in the Vapor (Swift) world very easy, because Swift has very simple solutions for briding between JSON and actual Swift data structures. &lt;/p&gt;

&lt;p&gt;I also like using MongoDB Atlas as a database provider. Off course, I could run my own MongoDB instance, but having the admin website in Atlas makes it much easier during development to experiment and quickly change stuff. Need to change a value in a document somewhere? The web interface makes this very easy. Need an extra database or drop a table? Just a few clicks. Finally, the larger (paid) Atlas plans provide stuff like backups out of the box. Something that's always a lot of work when you roll your own. &lt;/p&gt;

&lt;p&gt;These two aspects help developer productivity a lot.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#feedbackimprovements"&gt;
  &lt;/a&gt;
  Feedback/improvements
&lt;/h4&gt;

&lt;p&gt;If you have feedback, please let me know in the comments below. Also, if you have ideas from a game design point of view to make it more engaging, please reach out to me. I'm more of a programmer than a game designer, so can always use help to improve the fun and engagement of a game! &lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>How to Create a Button in JavaScript</title>
      <author>Gaël Thomas</author>
      <pubDate>Mon, 10 Jan 2022 18:53:36 +0000</pubDate>
      <link>https://dev.to/herewecode/how-to-create-a-button-in-javascript-378p</link>
      <guid>https://dev.to/herewecode/how-to-create-a-button-in-javascript-378p</guid>
      <description>&lt;p&gt;Learn how to create a button in JavaScript and add it to your HTML page.&lt;/p&gt;




&lt;p&gt;As a web developer, you should probably create buttons and add them to your HTML page programmatically.&lt;/p&gt;

&lt;p&gt;A typical workflow is to validate some data in your JavaScript code before displaying a button in HTML to your users.&lt;/p&gt;

&lt;p&gt;Before starting, let me show you what you will achieve!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Can you click me?&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPJFdZ6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f3wmdforfzz3du0ju18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPJFdZ6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7f3wmdforfzz3du0ju18.png" alt="HTML button in JS" width="268" height="62"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on the button, your JavaScript code will trigger an alert.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IrwyE6jK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nl6v4nzrnxrpn8o9ejk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IrwyE6jK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nl6v4nzrnxrpn8o9ejk.png" alt="Button in JavaScript with on click Alert" width="852" height="232"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's dive into that tutorial!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-button-using-document-raw-createelement-endraw-"&gt;
  &lt;/a&gt;
  1. Create a button using document &lt;code&gt;createElement&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;To create a button in JavaScript, you must use the &lt;code&gt;createElement&lt;/code&gt; function available by default in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document"&gt;the Document interface&lt;/a&gt; of your web page.&lt;/p&gt;

&lt;p&gt;Then, you will configure the button with a "Can you click me?" text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a button element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Set the button text to 'Can you click me?'&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can you click me?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a side note, you can add a lot of properties to a button when creating it. This tutorial only sets the &lt;code&gt;innerText&lt;/code&gt; because we don't need the other properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-add-an-event-listener-on-your-button"&gt;
  &lt;/a&gt;
  2. Add an event listener on your button
&lt;/h2&gt;

&lt;p&gt;The next step is to create &lt;a href="https://developer.mozilla.org/fr/docs/Web/API/EventTarget/addEventListener"&gt;an event listener&lt;/a&gt; on your button. It will allow you to detect when a user clicks on it.&lt;/p&gt;

&lt;p&gt;Whenever the "click" event is detected, the arrow function (second parameter) is launched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Attach the "click" event to your button&lt;/span&gt;
&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// When there is a "click"&lt;/span&gt;
  &lt;span class="c1"&gt;// it shows an alert in the browser&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oh, you clicked me!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-add-your-js-button-to-your-html"&gt;
  &lt;/a&gt;
  3. Add your JS button to your HTML
&lt;/h2&gt;

&lt;p&gt;The last step is to add your button to the HTML body.&lt;/p&gt;

&lt;p&gt;After that, you will have the same result as the beginning example!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Add the button to your HTML &amp;lt;body&amp;gt; tag&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-code-to-create-a-button-in-js"&gt;
  &lt;/a&gt;
  Full code to create a button in JS 👇
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Create a Button in JavaScript&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Empty &amp;lt;body&amp;gt; HTML (the JavaScript code in &amp;lt;script&amp;gt; will generate a button here)--&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// Create a button element&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="c1"&gt;// Set the button text to 'Can you click me?'&lt;/span&gt;
      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can you click me?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mainButton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

      &lt;span class="c1"&gt;// Attach the "click" event to your button&lt;/span&gt;
      &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// When there is a "click"&lt;/span&gt;
        &lt;span class="c1"&gt;// it shows an alert in the browser&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oh, you clicked me!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What's next?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Congrats! 🎉 Now you know how to programmatically create buttons using JavaScript. You can go a bit further by learning &lt;a href="https://herewecode.io/blog/enable-and-disable-button-javascript/"&gt;how to enable and disable a button in JavaScript&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;➡️ I'm starting to tweet more consistently. If you want to get more tips and resources about web development, developer tips, and my journey as a Full-stack Engineer -&amp;gt; &lt;a href="https://twitter.com/gaelgthomas/"&gt;Find me on my Twitter 🐦&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>E-commerce store with search functionality and filters: Using MongoDB Atlas Search.</title>
      <author>Nourdine Labib</author>
      <pubDate>Mon, 10 Jan 2022 18:46:56 +0000</pubDate>
      <link>https://dev.to/niidark/e-commerce-store-with-search-functionality-and-filters-using-mongodb-atlas-search-e0e</link>
      <guid>https://dev.to/niidark/e-commerce-store-with-search-functionality-and-filters-using-mongodb-atlas-search-e0e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;A fully responsible &lt;strong&gt;e-commerce store&lt;/strong&gt;, with filters, sorting, search functionality and autocomplete.&lt;/p&gt;

&lt;p&gt;🔗 &lt;a href="https://product-listing-alpha.vercel.app/shop"&gt;Live demo&lt;/a&gt;&lt;br&gt;
🔗 &lt;a href="https://github.com/Nourdinedev/product-listing/blob/main/README.md"&gt;README.md&lt;/a&gt;&lt;br&gt;
🔗 &lt;a href="https://github.com/Nourdinedev/product-listing/blob/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Nourdinedev"&gt;
        Nourdinedev
      &lt;/a&gt; / &lt;a href="https://github.com/Nourdinedev/product-listing"&gt;
        product-listing
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;h3&gt;
Install all the dependencies:&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Add the MONGODB_URI to .env file:&lt;/h3&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;MONGODB_URI=(Your connection string)&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Run the development server:&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser.&lt;/p&gt;
&lt;h3&gt;
Add products seeds:&lt;/h3&gt;
&lt;p&gt;To add the seeds you only need to go to &lt;a href="http://localhost:3000/api/products/add-seeds" rel="nofollow"&gt;http://localhost:3000/api/products/add-seeds&lt;/a&gt; (/api/products/add-seeds)&lt;/p&gt;
&lt;p&gt;if the insert was successful, you will receive a response with a (success : true) and the data that was inserted.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/5c209ec60c827acda1769c4cb947304ba4357ea7453dc67c5a9dab1b08e28d22/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646165676f6b7469612f696d6167652f75706c6f61642f76313634313833363632352f646174615f70736b73686c2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/5c209ec60c827acda1769c4cb947304ba4357ea7453dc67c5a9dab1b08e28d22/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646165676f6b7469612f696d6167652f75706c6f61642f76313634313833363632352f646174615f70736b73686c2e706e67" alt="the received response"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Setup MongoDB Atlas Search:&lt;/h3&gt;
&lt;h4&gt;
1 - Create the "category_size" search index&lt;/h4&gt;
&lt;p&gt;make sure you name the index "category_size"&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;Index Name &lt;span class="pl-c1"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;category_size&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Set the index using JSON Editor&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;{
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mappings&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;dynamic&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: false
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fields&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;category&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;type&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;string&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
      },
      &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;options&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fields&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
          &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;options&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: {
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;fields&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Nourdinedev/product-listing"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E4q5giTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1wbnm1zmv123lt06l0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E4q5giTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1wbnm1zmv123lt06l0c.png" alt="Product listing index" width="880" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nt5fpOOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en4sq80mml97qnfpmeyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nt5fpOOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en4sq80mml97qnfpmeyh.png" alt="Product listing search" width="880" height="418"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9TqZTXR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekephl4f8texyhe0nr6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9TqZTXR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekephl4f8texyhe0nr6m.png" alt="Product listing Cart Slider" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0jy9bzJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt2zou2x2qz2cy8gxhyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0jy9bzJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt2zou2x2qz2cy8gxhyg.png" alt="Product overview page" width="880" height="840"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technologies"&gt;
  &lt;/a&gt;
  Technologies:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.mongodb.com"&gt;MongoDB&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.atlas.mongodb.com/atlas-search/"&gt;Atlas Search&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://reactjs.org"&gt;React.js&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://redux.js.org"&gt;redux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-dependencies"&gt;
  &lt;/a&gt;
  Other dependencies:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://mongoosejs.com"&gt;Mongoose&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://react-redux.js.org"&gt;react-redux&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://redux-saga.js.org"&gt;redux-saga&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/rt2zz/redux-persist"&gt;redux-persist&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.npmjs.com/package/redux-logger"&gt;redux-logger&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://headlessui.dev"&gt;headlessui/react&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://heroicons.com"&gt;heroicons/react&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.npmjs.com/package/react-image-gallery"&gt;react-image-gallery&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.npmjs.com/package/rc-pagination"&gt;rc-pagination&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.npmjs.com/package/rc-slider"&gt;rc-slider&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>.NET Developer? You're an IoT Developer Too!</title>
      <author>Rob Lauer</author>
      <pubDate>Mon, 10 Jan 2022 18:41:08 +0000</pubDate>
      <link>https://dev.to/blues/net-developer-youre-an-iot-developer-too-3mgn</link>
      <guid>https://dev.to/blues/net-developer-youre-an-iot-developer-too-3mgn</guid>
      <description>&lt;p&gt;Like many software engineers, I cut my proverbial teeth on the web. Showing off cutting edge ASP.NET web apps with the occasional AJAX request and JavaScript &lt;code&gt;mouseover&lt;/code&gt; effect really got heads spinning back in the early `00's!&lt;/p&gt;

&lt;p&gt;Eventually my career took a new path as I found myself in the embedded space, writing firmware with Arduino and CircuitPython to control tiny devices with microcontrollers. While I'm still a complete noob, I've had the pleasure of building everything from a &lt;a href="https://www.hackster.io/rob-lauer/solar-powered-crypto-mining-with-raspberry-pi-64adee"&gt;solar-powered crypto miner&lt;/a&gt;, to a &lt;a href="https://www.hackster.io/rob-lauer/debugging-a-hot-tub-time-series-machine-92e44f"&gt;hot tub water quality monitor&lt;/a&gt;, to a &lt;a href="https://www.hackster.io/rob-lauer/busted-create-an-ml-powered-speed-trap-b1e5d1"&gt;speed trap powered by machine learning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, I've always lusted after combining my love for C# with the embedded world.&lt;/p&gt;

&lt;p&gt;Lo and behold, I learned about a couple of frameworks geared towards this scenario: &lt;a href="https://www.nanoframework.net/"&gt;.NET nanoFramework&lt;/a&gt; and &lt;a href="https://www.ghielectronics.com/tinyclr/"&gt;TinyCLR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsBqghv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qy0tvkilub7fzg8p32o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsBqghv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qy0tvkilub7fzg8p32o.png" alt="logos for nanoframework and tinyclr os" width="839" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we look more closely at these tiny .NET frameworks, let's take a short step back and better define the concepts of "embedded development" and "IoT".&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-embedded-development-and-the-iot"&gt;What is Embedded Development and the IoT?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tiniest-net-frameworks"&gt;The Tiniest .NET Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-tiny-hardware"&gt;The "Tiny" Hardware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started-with-tinyclr-os"&gt;Getting Started with TinyCLR OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-iot-to-the-mix"&gt;Adding IoT to the Mix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-embedded-development-and-the-iot"&gt;
  &lt;/a&gt;
  What is Embedded Development and the IoT?
&lt;/h2&gt;

&lt;p&gt;Embedded programming is the concept of writing code for incredibly small computers (a.k.a. microcontrollers) that communicate with sensors (e.g. temperature, gas, humidity) or power servo motors that in turn control other devices. In the embedded space, we often talk about programming "firmware", which is essentially semi-permanent software loaded into non-volatile memory on a device (it's not &lt;strong&gt;soft&lt;/strong&gt;ware or &lt;strong&gt;hard&lt;/strong&gt;ware, it's &lt;strong&gt;firm&lt;/strong&gt;ware!).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;An example programmable microcontroller from Blues Wireless, the Feather-compatible &lt;a href="https://blues.io/products/swan/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Swan&lt;/a&gt;:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--halFjMfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpd508xkklclbjalsu3n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--halFjMfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpd508xkklclbjalsu3n.jpg" alt="blues wireless feather-compatible swan mcu" width="880" height="615"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most common languages used to write firmware for embedded devices are C/C++, Arduino (a simpler form of C), and Python derivatives like &lt;a href="https://micropython.org/"&gt;MicroPython&lt;/a&gt; and &lt;a href="https://circuitpython.org/"&gt;CircuitPython&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Embedded development is directly related to the Internet of Things (IoT) as these "things" we are building often need an Internet connection to upload the data they are gathering or the calculations they are creating.&lt;/p&gt;

&lt;p&gt;For instance a smart...belt?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e-8qNt71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6kg0vapnxi36phjqezs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e-8qNt71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6kg0vapnxi36phjqezs.png" alt="smart belt" width="700" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting slightly more practical, think about the following common devices, as they are all IoT projects at their core:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Irrigation systems&lt;/strong&gt; that measure rainfall and only turn on when needed;&lt;/li&gt;
&lt;li&gt;Gas/electric &lt;strong&gt;utility meters&lt;/strong&gt; that can relay home energy usage remotely;&lt;/li&gt;
&lt;li&gt;Home health &lt;strong&gt;monitoring devices&lt;/strong&gt; that provide insights previously only available in a hospital setting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what makes the IoT so fascinating: there are countless applications for the IoT to impact our lives in positive ways.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now let's learn how to build something fun with C#!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tiniest-net-frameworks"&gt;
  &lt;/a&gt;
  The Tiniest .NET Frameworks
&lt;/h2&gt;

&lt;p&gt;Both nanoFramework and TinyCLR are free frameworks for building .NET applications meant for deployment on resource-constrained embedded devices. They make it easy (or at least &lt;em&gt;easier&lt;/em&gt;) to use C# instead of Arduino, C/C++, or a Python derivative when programming firmware on microcontrollers.&lt;/p&gt;

&lt;p&gt;For .NET developers, this opens up an entire new world of embedded development. We can use the tools (Visual Studio) and languages (C#) that we've been using for years, all without worrying about the low-level hardware issues that can easily confound even the most dedicated embedded engineer.&lt;/p&gt;

&lt;p&gt;It does come with a catch though. Neither nanoFramework nor TinyCLR provide access to the full .NET Common Language Runtime (CLR), and they only provide a subset of the .NET base class libraries and APIs. This is primarily because of the memory constraints on these microcontrollers. Specifically for TinyCLR, you can find a &lt;a href="https://docs.ghielectronics.com/software/tinyclr/limitations.html"&gt;list of limitations in their docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What about the differences between nanoFramework and TinyCLR? At a high level they boil down down to the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.NET nanoFramework provides:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for a variety of popular ESP32- and STM32-based microcontrollers.&lt;/li&gt;
&lt;li&gt;A fully open source offering.&lt;/li&gt;
&lt;li&gt;Support from the .NET foundation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TinyCLR provides:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tight integration with specific proprietary microcontrollers.&lt;/li&gt;
&lt;li&gt;A superior getting started experience.&lt;/li&gt;
&lt;li&gt;An easier integrated debugging solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While I did some experimentation with both platforms, as an IoT and embedded engineer noob, I did find the TinyCLR experience preferable (though I know of plenty of folks who are nanoFramework fans!). Therefore, the rest of this article is going to walk through the experience of getting started with .NET on the TinyCLR OS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tiny-hardware"&gt;
  &lt;/a&gt;
  The "Tiny" Hardware
&lt;/h2&gt;

&lt;p&gt;As just mentioned, TinyCLR OS only runs on microcontrollers (MCUs) provided by GHI Electronics. My MCU of choice is for this exercise is the &lt;a href="https://www.ghielectronics.com/sitcore/sbc/"&gt;FEZ Feather&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bdpd9E9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9webp8rxf2ecglrydabz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bdpd9E9t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9webp8rxf2ecglrydabz.png" alt="fez feather mcu" width="650" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;em&gt;Feather&lt;/em&gt; aspect comes from the fact that it is compatible with the &lt;a href="https://learn.adafruit.com/adafruit-feather"&gt;Adafruit Feather specification&lt;/a&gt;. This means you can connect it to virtually any carrier board with header pins meant to accept a Feather-compatible MCU.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-tinyclr-os"&gt;
  &lt;/a&gt;
  Getting Started with TinyCLR OS
&lt;/h2&gt;

&lt;p&gt;Let's walk through some (relatively) simple steps to get the TinyCLR OS loaded onto your FEZ Feather microcontroller and write an embedded program using C#.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-tinyclr-os"&gt;
  &lt;/a&gt;
  Installing the TinyCLR OS
&lt;/h3&gt;

&lt;p&gt;Our first step is to install the latest version of the TinyCLR OS on the device. TinyCLR OS includes the .NET CLR which converts your compiled C# into instructions for the microcontroller. It's also used for interacting with Visual Studio (critical for loading the program onto the device and debugging).&lt;/p&gt;

&lt;p&gt;Connect your FEZ Feather to your Windows PC via a USB-C cable:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3NzCBMNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv64tqhtztajv9mijj1u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3NzCBMNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv64tqhtztajv9mijj1u.jpg" alt="connect fez feather" width="700" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the latest version of &lt;strong&gt;TinyCLR Config&lt;/strong&gt; and &lt;strong&gt;SITCore SC20xxx&lt;/strong&gt; firmware from the &lt;a href="https://docs.ghielectronics.com/software/tinyclr/downloads.html"&gt;GHI electronics download page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open &lt;strong&gt;TinyCLR Config&lt;/strong&gt;, choose the connected device in the &lt;strong&gt;Port&lt;/strong&gt; dropdown, and click &lt;strong&gt;Connect&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U7-TCi4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5op2bljyhyvjursrfspc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U7-TCi4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5op2bljyhyvjursrfspc.png" alt="tinyclr config port" width="496" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update the device firmware, click on the &lt;code&gt;...&lt;/code&gt; button next to the &lt;strong&gt;Update Firmware&lt;/strong&gt; button. A dialog will open allowing you to select the firmware file you previously downloaded and click on &lt;strong&gt;Update Firmware&lt;/strong&gt; to flash your device:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jHbFAZj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amgakpwinvtulqgb4wpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jHbFAZj1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amgakpwinvtulqgb4wpd.png" alt="tinyclr os firmware" width="494" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once it's done, disconnect and reconnect the device and confirm that your firmware was updated:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--liMvMeOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skw3qacua58vtf9fixff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--liMvMeOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skw3qacua58vtf9fixff.png" alt="tinyclr confirm firmware" width="497" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-visual-studio"&gt;
  &lt;/a&gt;
  Setting up Visual Studio
&lt;/h3&gt;

&lt;p&gt;You also need to perform a one-time configuration of Visual Studio (these instructions are compatible with both VS 2019 and 2022 community editions).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP:&lt;/strong&gt; Make sure you've already installed the ".NET Desktop Development" requirements in Visual Studio.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Within Visual Studio, navigate to &lt;strong&gt;Extensions --&amp;gt; Manage Extensions&lt;/strong&gt;. Search for "tinyclr" to find and install the &lt;strong&gt;TinyCLR OS Project System&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFkA-x2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hga0swxs58zhv7w41cid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFkA-x2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hga0swxs58zhv7w41cid.png" alt="tinyclr visual studio extension" width="661" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Restart Visual Studio to enable the installer to complete the installation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-tiny-net-project"&gt;
  &lt;/a&gt;
  Your First "Tiny" .NET Project
&lt;/h3&gt;

&lt;p&gt;Re-open Visual Studio and create a new project, choosing &lt;strong&gt;TinyCLROS&lt;/strong&gt; from the platform dropdown list and selecting the &lt;strong&gt;C# TinyCLR Application&lt;/strong&gt; template:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYiyZR-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s2lwwy2q0ueu84ls600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYiyZR-O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s2lwwy2q0ueu84ls600.png" alt="tinyclr new visual studio project" width="591" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your project will be pre-loaded with some boilerplate code and a &lt;code&gt;Program.cs&lt;/code&gt; file. This will be the starting point of your application.&lt;/p&gt;

&lt;p&gt;Next, we're going to perform the "Hello World!" of embedded programming: blinking an LED!&lt;/p&gt;

&lt;p&gt;Start by replacing &lt;em&gt;everything&lt;/em&gt; in &lt;code&gt;Program.cs&lt;/code&gt; with the following code. Have no fear, we'll walk through what's happening in this code:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using GHIElectronics.TinyCLR.Devices.Gpio;
using GHIElectronics.TinyCLR.Pins;
using System.Threading;

namespace TinyCLRApplication
{
    class Program
    {
        static void Main()
        {
            var LED = GpioController.GetDefault().OpenPin(SC20100.GpioPin.PE11);
            LED.SetDriveMode(GpioPinDriveMode.Output);

            while (true)
            {
                LED.Write(GpioPinValue.High);
                Thread.Sleep(100);

                LED.Write(GpioPinValue.Low);
                Thread.Sleep(100);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;em&gt;So what exactly is happening in this code?&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;code&gt;Main()&lt;/code&gt; method we are creating a reference to the onboard LED.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;LED.SetDriveMode(GpioPinDriveMode.Output)&lt;/code&gt; we are configuring the LED's pin as an &lt;em&gt;output&lt;/em&gt;, meaning it'll be in a state to manage the voltage (i.e. lighting) the LED.&lt;/li&gt;
&lt;li&gt;Next, we get in an infinite loop (don't worry, this is very common in embedded land!) with a &lt;code&gt;while (true)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We set the LED pin to &lt;code&gt;High&lt;/code&gt; (lighting it), wait 100 ms, then set the pin to &lt;code&gt;Low&lt;/code&gt; (turning it off), and waiting another 100ms, forever. This blinks the LED. 💡&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before you deploy the program to your device, you might notice that there are two NuGet packages to be installed first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GHIElectronics.TinyCLR.Devices.Gpio&lt;/li&gt;
&lt;li&gt;GHIElectronics.TinyCLR.Pins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure the device is still plugged into your PC's USB port. Click the &lt;strong&gt;Start&lt;/strong&gt; or &lt;strong&gt;F5&lt;/strong&gt; button in Visual Studio to compile and deploy the program. If everything works (should take 10-20 seconds) an LED on the board will blink until you unplug it or flash a new program:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kWSGdmId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yswtb31fefdykp065lx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kWSGdmId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yswtb31fefdykp065lx.gif" alt="tinyclr blink" width="216" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt; You've literally just used C# code to control a microcontroller. This is huge! 💪&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-iot-to-the-mix"&gt;
  &lt;/a&gt;
  Adding IoT to the Mix
&lt;/h2&gt;

&lt;p&gt;Now that you're (relatively) comfortable with building a simple C# app for deployment on a tiny microcontroller, it's time to take the next step by adding the "I" to your IoT project.&lt;/p&gt;

&lt;p&gt;While some embedded systems can get away with storing data on an SD card for later retrieval, it's far more useful to actively transmit data as it comes in. Wi-Fi, LoRa, and Bluetooth are common technologies used in the IoT, but there is no more ubiquitous global solution for remotely transmitting data than cellular.&lt;/p&gt;

&lt;p&gt;It's also important to consider not only the raw technical ability of communicating over cellular, but also how you then get this data to a cloud endpoint, such as Microsoft Azure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-the-blues-wireless-notecard"&gt;
  &lt;/a&gt;
  Introducing the Blues Wireless Notecard
&lt;/h3&gt;

&lt;p&gt;Cellular has traditionally scared developers due to its archaic AT command syntax (it's an awful developer experience) and likewise businesses have been afraid of the price (per-device monthly plans add up fast). So the key to cellular success lies in a tiny pre-paid device-to-cloud data pump called a &lt;a href="https://blues.io/products/notecard/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urbmLeiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g151zpkr5pqs387k2mg7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urbmLeiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g151zpkr5pqs387k2mg7.png" alt="blues wireless cellular notecard" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With both cellular and GPS capabilities (and 10 years + 500 MB of data included) the Notecard is a no-brainer for when you want to start pushing data to the cloud over LTE-M, NB-IoT, or Cat-1 cellular.&lt;/p&gt;

&lt;p&gt;But what about that strange M.2 edge connector at the bottom of the Notecard? How do you use this with the microcontroller we just programmed? The answer comes in the form of the &lt;a href="https://blues.io/products/notecarrier/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecarrier&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f10o4DaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3c6eg8tvv3fvvmw8vak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f10o4DaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3c6eg8tvv3fvvmw8vak.png" alt="blues wireless notecarrier-al" width="600" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Notecarrier acts as a &lt;em&gt;bridge&lt;/em&gt; between your MCU and the Notecard. It includes an embedded antenna, header connectors, and battery ports to allow you to easily connect it to your prototype.&lt;/p&gt;

&lt;p&gt;Here is the FEZ Feather wired up to a Notecard + Notecarrier, ready to send data to the cloud over cellular!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KT3Ls2OX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qw41casvgort1fw5ni9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KT3Ls2OX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qw41casvgort1fw5ni9.jpg" alt="fez feather and notecard" width="800" height="745"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The white board you see is called a breadboard, and is used to quickly create connections between the MCU and the Notecarrier.&lt;/p&gt;

&lt;p&gt;If you're following along at home, here are the connections being made with those jumper wires:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Supplying power to the Notecarrier from the FEZ via the &lt;code&gt;V+&lt;/code&gt; and &lt;code&gt;GND&lt;/code&gt; pins (the black/blue and orange/red wires).&lt;/li&gt;
&lt;li&gt;Communicating over I2C by connecting the &lt;code&gt;SCL&lt;/code&gt; and &lt;code&gt;SDA&lt;/code&gt; pins (the longer orange and green wires).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#all-json-all-the-time"&gt;
  &lt;/a&gt;
  All JSON, All the Time
&lt;/h3&gt;

&lt;p&gt;To me, the real beauty of the Notecard comes from its developer experience. Every command to (and every request from) the Notecard is JSON.&lt;/p&gt;

&lt;p&gt;For example, here is an API command that will tell you the current GPS location of a Notecard:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"req": "card.location"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;And an example response from the Notecard:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "status": "GPS updated (58 sec, 41dB SNR, 9 sats) {gps-active}
            {gps-signal} {gps-sats} {gps}",
  "mode":   "periodic",
  "lat":    42.577600,
  "lon":    -70.871340,
  "time":   1598554399,
  "max":    25
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#adding-wireless-capabilities"&gt;
  &lt;/a&gt;
  Adding Wireless Capabilities
&lt;/h3&gt;

&lt;p&gt;Knowing all of this, let's see how easy it can be to send a small packet of data, over cellular, to the cloud.&lt;/p&gt;

&lt;p&gt;Once again, you can remove everything in your &lt;code&gt;Program.cs&lt;/code&gt; file and replace it with the following:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using Bytewizer.TinyCLR.Drivers.Blues.Notecard;
using GHIElectronics.TinyCLR.Devices.I2c;
using GHIElectronics.TinyCLR.Pins;
using System.Diagnostics;

namespace TinyCLRApplication
{
    class Program
    {
        static void Main()
        {
            // setup I2C bus for Fez Feather
            var controller = I2cController.FromName(SC20100.I2cBus.I2c1);
            var notecard = new NotecardController(controller);

            // associate this Notecard with a Notehub.io project
            var request1 = new JsonRequest("hub.set");
            request1.Add("product", "com.blues.me:some_project"); // replace this with your product uid!

            var results1 = notecard.Request(request1);
            if (results1.IsSuccess)
                Debug.WriteLine(results1.Response);

            // create a mock JSON body object
            var body = new JsonObject();
            body.Add("temp", 35.5);
            body.Add("humid", 56.23);

            // create a "note" with the JSON body from above
            var request2 = new JsonRequest("note.add");
            request2.Add("body", body);
            request2.Add("sync", true);

            var results2 = notecard.Request(request2);

            if (results2.IsSuccess)
                Debug.WriteLine(results2.Response);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If you look carefully, you can see that to program the Notecard, we are simply building JSON objects that correlate to commands available in the &lt;a href="https://dev.blues.io/reference/notecard-api/introduction/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecard API&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://dev.blues.io/reference/notecard-api/hub-requests/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot#hub-set"&gt;hub.set&lt;/a&gt; request associates the Notecard with a project on Notehub.io (more on &lt;a href="https://blues.io/services/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notehub&lt;/a&gt; in the next section!).&lt;/li&gt;
&lt;li&gt;We are creating a JSON object that stores some mock temperature and humidity data.&lt;/li&gt;
&lt;li&gt;We are sending this data (a &lt;a href="https://dev.blues.io/reference/glossary/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot#note"&gt;Note&lt;/a&gt; in Blues Wireless speak) to the cloud with a &lt;a href="https://dev.blues.io/reference/notecard-api/note-requests/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot#note-add"&gt;note.add&lt;/a&gt; request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before running this program, there is one more NuGet package to include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bytewizer.TinyCLR.Drivers.Blues.Notecard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go ahead and click &lt;strong&gt;Start&lt;/strong&gt; or hit &lt;strong&gt;F5&lt;/strong&gt; in VS to build and deploy your cellular-connected IoT project!&lt;/p&gt;

&lt;p&gt;In the debug output, you should see &lt;code&gt;{"total":1}&lt;/code&gt; which is the Notecard telling you that there is a single event being sent to the cloud.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-the-cloud"&gt;
  &lt;/a&gt;
  To the Cloud
&lt;/h3&gt;

&lt;p&gt;Yes, I got ahead of myself. We started pushing data to the cloud without fully understanding &lt;em&gt;where&lt;/em&gt; in the cloud the data was going!&lt;/p&gt;

&lt;p&gt;We first need to understand that a &lt;strong&gt;key benefit of the Notecard is security&lt;/strong&gt;. The device itself lives off of the public Internet. It's a cellular data pump, meaning it needs to connect to &lt;em&gt;secure proxy&lt;/em&gt; to deliver data over the Internet.&lt;/p&gt;

&lt;p&gt;This is where &lt;a href="https://blues.io/services/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notehub&lt;/a&gt; comes into play. Notehub is a thin cloud service that securely receives and syncs data with virtually any cloud (think AWS, Azure, Google Cloud, or even your own custom MQTT or RESTful endpoint).&lt;/p&gt;

&lt;p&gt;To start, we can simply see this mock data appear in Notehub, ready to be routed to its final home on a big cloud ☁️:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5d4T_Ev5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6inym981ws4gmxoslug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5d4T_Ev5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6inym981ws4gmxoslug.png" alt="our mock data in notehub" width="829" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#routing-data-to-azure"&gt;
  &lt;/a&gt;
  Routing Data to Azure
&lt;/h3&gt;

&lt;p&gt;Since Notehub is not the final resting place of our data, naturally we will want to automatically sync this data with a big cloud such as &lt;a href="https://azure.microsoft.com/"&gt;Azure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7A4ljfst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bf47vxkhka29vr27z8wz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7A4ljfst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bf47vxkhka29vr27z8wz.png" alt="notecard data in microsoft azure" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do so, you can follow the &lt;a href="https://dev.blues.io/guides-and-tutorials/routing-data-to-cloud/azure/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;in-depth routing tutorial for Azure&lt;/a&gt; that walks through building your own cloud-based dashboard using data delivered with the Notecard.&lt;/p&gt;

&lt;p&gt;Finally, while it's outside the scope of this article, as data is being passed to Azure you can &lt;a href="https://dev.blues.io/notecard/notecard-guides/jsonata-1-2-3/?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;alter and optimize your JSON payloads with JSONata&lt;/a&gt; on-the-fly. Using JSONata you can write server-side functions that can alter data to conform to whatever structures your endpoint is expecting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;If this has piqued your curiosity, I highly recommend taking the following steps in your C# IoT journey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read more about what the &lt;a href="https://www.nanoframework.net/"&gt;.NET nanoFramework&lt;/a&gt; and &lt;a href="https://www.ghielectronics.com/tinyclr/"&gt;TinyCLR&lt;/a&gt; have to offer to .NET developers.&lt;/li&gt;
&lt;li&gt;If you want to follow this tutorial, grab your own &lt;a href="https://www.ghielectronics.com/sitcore/sbc/"&gt;FEZ Feather&lt;/a&gt;, &lt;a href="https://shop.blues.io/collections/notecard/products/note-nbgl-500?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecard&lt;/a&gt;, and &lt;a href="https://shop.blues.io/products/carr-al?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Notecarrier-AL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you want to tinker with cloud connectivity with Python on a Raspberry Pi or by writing some Arduino, check out the &lt;a href="https://shop.blues.io/collections/development-kits?utm_source=devto&amp;amp;utm_medium=web&amp;amp;utm_content=dotnetiot"&gt;Blues Wireless starter kits&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy hacking with C# and the IoT! 👩‍💻&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>iot</category>
      <category>azure</category>
    </item>
    <item>
      <title>MovieFlixer 🚀</title>
      <author>Rohit Dhas</author>
      <pubDate>Mon, 10 Jan 2022 18:34:33 +0000</pubDate>
      <link>https://dev.to/rohitdhas/movieflixer-al0</link>
      <guid>https://dev.to/rohitdhas/movieflixer-al0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;MovieFlixer is a web app where you can search 🔍 for your favorite movies and shows, you can Buy 💲 those movies and also rate ⭐ them out of 10.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rohitdhas"&gt;
        rohitdhas
      &lt;/a&gt; / &lt;a href="https://github.com/rohitdhas/Dev-Hackathon"&gt;
        Dev-Hackathon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      MovieFlixer🚀 - Search🔍, Buy💲 and rate👍🏻 your favorite movies and shows
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
   &lt;br&gt;
   &lt;a href="https://movieflixer.vercel.app/" rel="nofollow"&gt;&lt;img width="150px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqPUjvUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/rohitdhas/Dev-Hackathon./frontend/public/logo.png"&gt;&lt;/a&gt;
   &lt;/p&gt;
&lt;h3&gt;
Movie Flixer&lt;/h3&gt;
   &lt;p&gt;Search 🔍 and Rate ⭐ your Favorite Movies and shows!&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b7395b00d152dc8f19cec61f582369bd580e31b8ed93d34646ec43aa675baa7c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6578742d626c61636b3f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/b7395b00d152dc8f19cec61f582369bd580e31b8ed93d34646ec43aa675baa7c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6578742d626c61636b3f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465" alt="Next JS"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e9b080a6541e5355827ea91b6a0302cbbc54af4705b0c6b0f1561a0957ced2fb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5461696c77696e645f4353532d3338423241433f7374796c653d666f722d7468652d6261646765266c6f676f3d7461696c77696e642d637373266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/e9b080a6541e5355827ea91b6a0302cbbc54af4705b0c6b0f1561a0957ced2fb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5461696c77696e645f4353532d3338423241433f7374796c653d666f722d7468652d6261646765266c6f676f3d7461696c77696e642d637373266c6f676f436f6c6f723d7768697465" alt="Tailwind CSS"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8286a45a106e1a3c07489f83a38159981d888518a740b59c807ffc1b7b1e2f7b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f657870726573732e6a732d2532333430346435392e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d65787072657373266c6f676f436f6c6f723d253233363144414642"&gt;&lt;img src="https://camo.githubusercontent.com/8286a45a106e1a3c07489f83a38159981d888518a740b59c807ffc1b7b1e2f7b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f657870726573732e6a732d2532333430346435392e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d65787072657373266c6f676f436f6c6f723d253233363144414642" alt="Express.js"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7d7b100e379663ee40a20989e6c61737e6396c1dafc3a7c6d2ada8d4447eb0e4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652e6a732d3644413535463f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f64652e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/7d7b100e379663ee40a20989e6c61737e6396c1dafc3a7c6d2ada8d4447eb0e4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652e6a732d3644413535463f7374796c653d666f722d7468652d6261646765266c6f676f3d6e6f64652e6a73266c6f676f436f6c6f723d7768697465" alt="NodeJS"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c839570bc71901106b11b8411d9277a6a8356a9431e4a16d6c26db82caab7d62/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6f6e676f44422d2532333465613934622e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6d6f6e676f6462266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/c839570bc71901106b11b8411d9277a6a8356a9431e4a16d6c26db82caab7d62/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6f6e676f44422d2532333465613934622e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d6d6f6e676f6462266c6f676f436f6c6f723d7768697465" alt="MongoDB"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/22547aa007860433c23771dfd59d184297d9433adcf3082be8515a28a16cd875/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657263656c2d2532333030303030302e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d76657263656c266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/22547aa007860433c23771dfd59d184297d9433adcf3082be8515a28a16cd875/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657263656c2d2532333030303030302e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d76657263656c266c6f676f436f6c6f723d7768697465" alt="Vercel"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js v14.18.2^&lt;/li&gt;
&lt;li&gt;NPM v6.14.0^&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/rohitdhas/Dev-Hackathon.git

&lt;span class="pl-c1"&gt;cd&lt;/span&gt; frontend
npm install

&lt;span class="pl-c1"&gt;cd&lt;/span&gt; backend
npm install&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
NOTE&lt;/h3&gt;
&lt;p&gt;You'll need a &lt;code&gt;.env&lt;/code&gt; file in the &lt;code&gt;backend&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;It looks like this -&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;PORT = 8080

MONGO_URI = Database connection String

EMAIL = Your Email

PASSWORD = Your Password&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Starting the application&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; frontend

npm run dev&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; backend

node server.js&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/rohitdhas/Dev-Hackathon"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;I built the &lt;code&gt;frontend&lt;/code&gt; of this app with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next JS (TypeScript)&lt;/li&gt;
&lt;li&gt;Tailwind CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the &lt;code&gt;Backend&lt;/code&gt; with&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node JS&lt;/li&gt;
&lt;li&gt;Express JS&lt;/li&gt;
&lt;li&gt;Nodemailer&lt;/li&gt;
&lt;li&gt;Stripe&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#how-i-built-this-web-app"&gt;
  &lt;/a&gt;
  How I built this Web App
&lt;/h3&gt;

&lt;p&gt;First of all I created a database and imported some free sample data provided by &lt;code&gt;mongodb&lt;/code&gt; to build my application.&lt;/p&gt;

&lt;p&gt;Then I built an &lt;strong&gt;Express Server&lt;/strong&gt; and created few API routes, so that I can simply make API calls from frontend to perform CRUD operations on the data in the database.&lt;/p&gt;

&lt;p&gt;And lastly, built the frontend with &lt;code&gt;Next JS&lt;/code&gt; and &lt;code&gt;Tailwind CSS&lt;/code&gt; to present data coming from DB neatly to user.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#key-features-of-this-web-app"&gt;
  &lt;/a&gt;
  Key Features of this Web App 💡
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#1-search-autocomplete"&gt;
  &lt;/a&gt;
  1. Search Autocomplete 🔍
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Implemented using Atlas Search&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w44Yqzpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcmzw6gmyro11s4qkqzl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w44Yqzpi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcmzw6gmyro11s4qkqzl.gif" alt="movieflixer autocomplete gif" width="600" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Autocomplete is pretty handy because it predicts whatever you want to type even if you make silly typos 😄 like here I typed &lt;u&gt;&lt;em&gt;kong fu pa&lt;/em&gt;&lt;/u&gt; and it guessed correct movie name.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h5&gt;

&lt;p&gt;Whenever you start typing in the input field it makes a request to an API endpoint along with the input string.&lt;/p&gt;

&lt;p&gt;That API endpoint aggregates data based on input string using an Aggregation Pipeline with &lt;code&gt;search&lt;/code&gt; stage, and then sends the results in response.&lt;/p&gt;

&lt;p&gt;And finally, those search results are being used to render autocomplete list on frontend.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#2-mailing-system"&gt;
  &lt;/a&gt;
  2. Mailing System 📧
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Implemented using Realm Triggers &amp;amp; Function&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this web application you receive an email on rating ⭐ a movie or on successfully purchasing 💲 a movie. For both the cases the logic is almost same.&lt;/p&gt;

&lt;p&gt;To achieve this, I am making use of Database triggers which automatically responds based on certain events.&lt;/p&gt;

&lt;p&gt;So, When you rate a movie it inserts a document in &lt;code&gt;ratings&lt;/code&gt; collection. On this insert operation the trigger fires and executes a &lt;code&gt;Realm Function&lt;/code&gt; which is making an API call telling the server to send an email to the given mail address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hQ05Nhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc81hy5fkv4v79h04tjq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hQ05Nhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc81hy5fkv4v79h04tjq.gif" alt="Rating Gif" width="800" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should receive an email like this after rating a movie&lt;/em&gt; 👇🏻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPjPRaAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95jmti6a9xp7i23uiaoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPjPRaAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95jmti6a9xp7i23uiaoa.png" alt="Email Screenshot" width="573" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, when you click on &lt;strong&gt;&lt;em&gt;Proceed to Purchase&lt;/em&gt;&lt;/strong&gt; button it inserts a document in &lt;code&gt;purchases&lt;/code&gt; collection, and then after your checkout session is successfully completed it updates the corresponding document in DB. Now, on this update operation the trigger fires and executes a &lt;code&gt;Realm Function&lt;/code&gt; which helps the app to send an email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jwCWTxjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r9g8tva6w5ot05wlefk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jwCWTxjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r9g8tva6w5ot05wlefk.gif" alt="Movie Purchase Gif" width="800" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should receive an email like this after buying a movie&lt;/em&gt; 👇🏻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KK86zdNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipwhkwyb6at3z2980p4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KK86zdNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipwhkwyb6at3z2980p4d.png" alt="Purchase Screenshot" width="880" height="299"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now here's the link to my project. Go ahead and explore rest of the application 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://movieflixer.vercel.app/"&gt;MovieFlixer URL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And please let me know your thoughts on it below 👇🏻&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>CRUD API with Fastify, Postgres, Docker</title>
      <author>Francesco Ciulla</author>
      <pubDate>Mon, 10 Jan 2022 18:25:41 +0000</pubDate>
      <link>https://dev.to/francescoxx/crud-api-with-fastify-postgres-docker-1df3</link>
      <guid>https://dev.to/francescoxx/crud-api-with-fastify-postgres-docker-1df3</guid>
      <description>&lt;p&gt;Hi I am Francesco. You can find me on Twitter here &lt;a href="https://twitter.com/FrancescoCiull4"&gt;https://twitter.com/FrancescoCiull4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating Content in Public&lt;br&gt;
All this Content has been created during 2 livestreams from scratch&lt;/p&gt;

&lt;p&gt;Here is the link if you wanna take a look on how I created this content (Even this article as it's part of the content itself!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-1"&gt;
  &lt;/a&gt;
  Part 1
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RU9SkhLGDP0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aJ36Sdq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619119216152/dQSU9c7Yv.png" alt="IMAGE ALT TEXT HERE" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-2"&gt;
  &lt;/a&gt;
  Part 2
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=8SGchw0OQE4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OEfEnI2M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619119500665/1DVo3aNBQ.png" alt="IMAGE ALT TEXT HERE" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will set some CRUD API using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js (JavaScript Runtime Engine)&lt;/li&gt;
&lt;li&gt;Fastify (Fast and low overhead web framework, for Node.js )&lt;/li&gt;
&lt;li&gt;Postgres (PostgreSQL) is a free open-source relational database, very popular and stable)&lt;/li&gt;
&lt;li&gt;Docker (Platform to deploy applications using containers)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub Repository: &lt;a href="https://github.com/FrancescoXX/study-with-me-fastify-docker"&gt;https://github.com/FrancescoXX/study-with-me-fastify-docker&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#node"&gt;
  &lt;/a&gt;
  NODE
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D2Qio5hl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610518922566/jNlJ0QU14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2Qio5hl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610518922566/jNlJ0QU14.png" alt="image.png" width="773" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node is a back-end JavaScript runtime environment, which means briefly that can execute JavaScript code on a computer, for example, yours or the one where Node is installed. The good thing is that, by having Docker, you DON't actually need to install it, because we will use the Node image, and so we can also avoid versioning between my version of Node installed on my machine and yours &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fastify"&gt;
  &lt;/a&gt;
  FASTIFY
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6xpFPcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619114165119/7mF7PgTq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6xpFPcm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619114165119/7mF7PgTq9.png" alt="image.png" width="880" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fastify is a web framework focused on performance. It is inspired by Hapi and Express and it's for sure one of the fastest web frameworks in town.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#postgres"&gt;
  &lt;/a&gt;
  POSTGRES
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVr_DxOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610518964662/u3zeruAUg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVr_DxOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610518964662/u3zeruAUg.png" alt="image.png" width="781" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Postgres (PostgreSQL) is a free open-source relational database, very popular and stable&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  DOCKER
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--knKF1BKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610521677853/SGKWuYsvU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knKF1BKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610521677853/SGKWuYsvU.png" alt="image.png" width="776" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is a platform to build run and share application using the idea of containers. If you want a brief introduction, here is a short video&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=eN_O4zd4D9o"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lotuI2Ga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610522007247/lu2KkUl9j.png" alt="IMAGE ALT TEXT HERE" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-by-step"&gt;
  &lt;/a&gt;
  Step by Step
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder named fastify-postgres-docker and enter into it
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;fastify-postgres-docker &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;fastify-postgres-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Initialize node application using npm
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install the dependencies
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;fastify fastify-postgres pg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create the app folder and enter into it
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;From inside the src folder, create a server.js file and a route.js file&lt;/p&gt;

&lt;p&gt;The folder structure should look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nLOJSwp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619115034772/u4_ENUj0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nLOJSwp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619115034772/u4_ENUj0x.png" alt="image.png" width="619" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's write the server.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fastify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt; &lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-postgres&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`postgres://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POSTGRES_SERVICE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POSTGRES_PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Run the server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.0.0.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fastify uses the idea of plugins, you can check more about this here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/docs/master/Plugins/"&gt;https://www.fastify.io/docs/master/Plugins/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's write the first part of the routes.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Testing route&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#docker"&gt;
  &lt;/a&gt;
  DOCKER
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t612rvV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610519742765/3YdQTSrfX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t612rvV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610519742765/3YdQTSrfX.png" alt="image.png" width="785" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the Docker Part!&lt;/p&gt;

&lt;p&gt;In the main folder, create 3 files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;li&gt;docker-compose.yml&lt;/li&gt;
&lt;li&gt;.dockerignore (it starts with a dot)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the .dockerignore file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
.gitignore
.env
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the Dockerfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;FROM node:14

EXPOSE 3000

&lt;span class="c"&gt;# Use latest version of npm&lt;/span&gt;
RUN npm &lt;span class="nb"&gt;install &lt;/span&gt;npm@latest &lt;span class="nt"&gt;-g&lt;/span&gt;

COPY package.json package-lock.json&lt;span class="k"&gt;*&lt;/span&gt; ./

RUN npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--no-optional&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm cache clean &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="c"&gt;# copy in our source code last, as it changes the most&lt;/span&gt;
WORKDIR /usr

COPY &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;

CMD &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"node"&lt;/span&gt;, &lt;span class="s2"&gt;"app/server.js"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The docker-compose.yml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;fastify_backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;fastify_backend&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;francescoxx/fastify_backend:0.0.1&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3000:3000'&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;

  &lt;span class="na"&gt;postgres&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="na"&gt;hostname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;postgres:13'&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;5432:5432'&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;always&lt;/span&gt;
    &lt;span class="na"&gt;env_file&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.env&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;fastify_volume:/var/lib/postgres/data&lt;/span&gt;

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;fastify_volume&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;replace the image "francescoxx/fastify_backend:0.0.1" with an image name of your choice!&lt;/p&gt;

&lt;p&gt;Before running our services, we need to create a .env file, to store our environment variables, and populate it with all the environment variables we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POSTGRES_USER=francesco
POSTGRES_PASSWORD=dbpassword
POSTGRES_DB=fastifydb
POSTGRES_SERVICE=postgres
POSTGRES_PORT=5432
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The End file should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwNGec_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619116469996/3yE2BTOTF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwNGec_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619116469996/3yE2BTOTF.png" alt="image.png" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can change them accordingly on your needings!&lt;/p&gt;

&lt;p&gt;Let's start the postgres service:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt; postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we should have a Postgres DB up and running!&lt;/p&gt;

&lt;p&gt;let's check what is inside the DB:&lt;br&gt;
From another Terminal, type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; postgres psql &lt;span class="nt"&gt;-U&lt;/span&gt; francesco fastifydb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and once we are inside the container &lt;br&gt;
(you can verify this by checking the postgres=# terminal)&lt;/p&gt;

&lt;p&gt;connect to the fastifydb database&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="se"&gt;\c&lt;/span&gt; fastifydb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this means that a database named "fastifydb" has been created by postgres using the environment variable we have passed at the beginning&lt;/p&gt;

&lt;p&gt;and then:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="se"&gt;\d&lt;/span&gt;t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you should get the message:&lt;/p&gt;

&lt;p&gt;"Did not find any relations."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOR1d7QL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619115911960/MyaJyDwIu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOR1d7QL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619115911960/MyaJyDwIu.png" alt="image.png" width="529" height="117"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is because we have created the database, using the environment variable, but we haven't created any table or relationship yet&lt;/p&gt;

&lt;p&gt;Type 'exit' to exit from this terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you are again at your terminal&lt;/p&gt;

&lt;p&gt;Time to build our image!&lt;/p&gt;

&lt;p&gt;from the folder where the docker-compose.yml file is located, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fBzbJ2kZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619116090183/XNXOtpDhY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fBzbJ2kZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619116090183/XNXOtpDhY.png" alt="image.png" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it's time to run our node application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt; fastify_backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;WE can verify if both the containers are running, by using the 'docker ps -a' command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qu8SvUXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619116178560/B151Ti1Gg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qu8SvUXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619116178560/B151Ti1Gg.png" alt="image.png" width="880" height="68"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add an endpoint to init the DB. (This could be done in other better ways!)&lt;/p&gt;

&lt;p&gt;In the route.js file, let's add a simple endpoint that will create the users table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// INIT TABLE. Launch just once to create the table&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/initDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CREATE TABLE IF NOT EXISTS "users" ("id" SERIAL PRIMARY KEY,"name" varchar(30),"description" varchar(30),"tweets" integer);&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#adding-api-endpoints"&gt;
  &lt;/a&gt;
  ADDING API ENDPOINTS
&lt;/h2&gt;

&lt;p&gt;Let's add other 5 endpoints:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#endpoint-to-get-all-the-users"&gt;
  &lt;/a&gt;
  Endpoint to GET all the Users:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;//GET AL USERS&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * from users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#endpoint-to-get-one-user"&gt;
  &lt;/a&gt;
  Endpoint to get one User
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;//GET ONE USER if exists&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`SELECT * from users where id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#endpoint-to-create-one-user"&gt;
  &lt;/a&gt;
  Endpoint to create one user
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;//UPDATE ONE USER fields&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldUserReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`SELECT * from users where id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldUserReq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s2"&gt;`UPDATE users SET(name,description,tweets) = ('&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;oldUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;', &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
            &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;oldUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tweets&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)
      WHERE id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;`Updated: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#endpoint-to-delete-one-user"&gt;
  &lt;/a&gt;
  Endpoint to Delete one user:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;//DELETE ONE USER if exists&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`DELETE FROM users WHERE id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;`Deleted: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final routes.js file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Testing route&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// INIT TABLE. Launch just once to create the table&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/initDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CREATE TABLE IF NOT EXISTS "users" ("id" SERIAL PRIMARY KEY,"name" varchar(30),"description" varchar(30),"tweets" integer);&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//GET AL USERS&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SELECT * from users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//GET ONE USER if exists&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`SELECT * from users where id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//Create users&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s2"&gt;`INSERT into users (name,description,tweets) VALUES('&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;','&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;',&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//UPDATE ONE USER fields&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldUserReq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`SELECT * from users where id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldUserReq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s2"&gt;`UPDATE users SET(name,description,tweets) = ('&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;oldUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;', &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
            &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;oldUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tweets&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)
      WHERE id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;`Updated: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//DELETE ONE USER if exists&lt;/span&gt;
  &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fastify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`DELETE FROM users WHERE id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;`Deleted: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's test these APIs!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#postman"&gt;
  &lt;/a&gt;
  POSTMAN
&lt;/h2&gt;

&lt;p&gt;Important! you need to specify localhost and not 127.0.0.1 in the first part of the url, otherwise it doesn't work!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7UQr-GR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610520716792/GJbRXRnQT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7UQr-GR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610520716792/GJbRXRnQT.png" alt="image.png" width="771" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use Postman, but you can use a whenever tool you want&lt;/p&gt;

&lt;p&gt;First of all, we need to create the user table. We will trigger it by hitting with a GET this url:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET http://localhost:3000/initDB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgWvjLnC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619117564220/11SC_c4RR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgWvjLnC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619117564220/11SC_c4RR.png" alt="image.png" width="880" height="556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we get this answer, it means that our 'users' table has been created!&lt;/p&gt;

&lt;p&gt;Now let's check all the users with another GET :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET http://localhost:3000/users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4Y6zJLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619117697966/bCWIo0Nyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4Y6zJLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619117697966/bCWIo0Nyb.png" alt="image.png" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if we get the empty array answer, [], it means that we actually have the users table, in our DB, but the are no users. This is perfectly fine!&lt;/p&gt;

&lt;p&gt;Let's create some users. We will do this by making a POST request at the same endpoint, adding the values in a json &lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Adrian"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Kangaroo Fighter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"tweets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12000&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tbITIuak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619117854527/cxQKPVumP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbITIuak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619117854527/cxQKPVumP.png" alt="image.png" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please notice that we don't need to add an 'id' , as it is automatically incremented at each new user&lt;/p&gt;

&lt;p&gt;LEt's add another one&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oC_Czy2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619117958298/YEA1tf6Lm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oC_Czy2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619117958298/YEA1tf6Lm.png" alt="image.png" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and another one &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1n45-uO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118004049/-10dEx4rH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1n45-uO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118004049/-10dEx4rH.png" alt="image.png" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's check again all the users:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wpgty4JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118048586/PrCJTG2mU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wpgty4JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118048586/PrCJTG2mU.png" alt="image.png" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we see that this time we have 3 users!&lt;/p&gt;

&lt;p&gt;We can get one single users by adding the id of the user at the end of the previous url path. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET http://localhost:3000/users/2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the user with the id = 2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4t3GHWQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118145497/3C4P8QpQ6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4t3GHWQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118145497/3C4P8QpQ6.png" alt="image.png" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To delete an user, you can make a DELETE request at the same endpoint you use to get one user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE http://localhost:3000/users/2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlxoy2vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118240845/-X63IzZqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlxoy2vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118240845/-X63IzZqb.png" alt="image.png" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, to Update the user, you make  a PUT request, passing the new values inside a json, like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Adrian2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"SuperKANGAROO"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you also need to pass the id of the user you wanna update in the url request, like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUT http://localhost:3000/users/3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtkimr-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118521762/29t2ZIE89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtkimr-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118521762/29t2ZIE89.png" alt="image.png" width="880" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To check if the user has been really updated, you can make another GET Request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlinqEkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118558192/kTvzlVLJ-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlinqEkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619118558192/kTvzlVLJ-.png" alt="image.png" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the name and the description of the user has changed, but not the tweets.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you have tried to follow this article, I would like to know if you have encountered any problem. Thanks!&lt;/p&gt;

&lt;p&gt;GitHub Repository:&lt;br&gt;
&lt;a href="https://github.com/FrancescoXX/study-with-me-fastify-docker"&gt;https://github.com/FrancescoXX/study-with-me-fastify-docker&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>postgres</category>
      <category>docker</category>
      <category>programming</category>
    </item>
    <item>
      <title>SQL vs NoSQL Database – A Complete Comparison</title>
      <author>Backendless</author>
      <pubDate>Mon, 10 Jan 2022 18:18:42 +0000</pubDate>
      <link>https://dev.to/backendless/sql-vs-nosql-database-a-complete-comparison-55pi</link>
      <guid>https://dev.to/backendless/sql-vs-nosql-database-a-complete-comparison-55pi</guid>
      <description>&lt;p&gt;There are two main categories of database in use in the development world today, commonly referred to as SQL and NoSQL. In this article, we will compare an SQL vs. NoSQL database based on their pros and cons.&lt;/p&gt;

&lt;p&gt;SQL, or Structured Query Language, is the universally known query language for relational databases. &lt;a href="https://backendless.com/features/backendless-core/backendless-database/#sql-driven-search"&gt;SQL databases&lt;/a&gt; make it simpler to work with structured data in a database through CRUD operations. CRUD stands for create, retrieve (or read), update, and delete – the primary operations for manipulating data.&lt;/p&gt;

&lt;p&gt;SQL databases are commonly referred to as relational database management systems (RDBMS). Traditional RDBMS uses SQL syntax as these systems utilize row-based database structures that connect related data objects between tables. Examples of RDBMS SQL databases include Backendless, Microsoft Access, MySQL, Microsoft SQL Server, SQLite, Oracle Database, IBM DB2, etc.&lt;/p&gt;

&lt;p&gt;NoSQL databases, on the other hand, are databases without any structured tables fixed for holding data. Technically, all non-relational databases can be called NoSQL databases. Because a NoSQL database is not a relational database, it can be set up very quickly and with minimal pre-planning. Examples of NoSQL databases include MongoDB, DynamoDB, SimpleDB, CouchDB, CouchBase, Orient DB, Infinite Graph, Neo4j, FlockDB, Cassandra, HBase, etc.&lt;/p&gt;

&lt;p&gt;As of May 2021, five of the top six database systems &lt;a href="https://db-engines.com/en/ranking"&gt;according to the DB-Engines ranking&lt;/a&gt; are relational databases, including the top four – Oracle, MySQL, Microsoft SQL Server, and PostgreSQL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jxBNubo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/12/DB-Engine-May-2021-Ranking.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jxBNubo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/12/DB-Engine-May-2021-Ranking.png" alt="DB-Engine May 2021 Ranking" width="796" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will take a deep dive into the pros and cons of SQL and NoSQL databases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#sql-pros"&gt;1. SQL Pros&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#sql-cons"&gt;2. SQL Cons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#nosql-pros"&gt;3. NoSQL Pros&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#nosql-cons"&gt;4. NoSQL Cons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#conclusion"&gt;5. Conclusion&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sql-pros"&gt;
  &lt;/a&gt;
  &lt;a id="sql-pros"&gt;&lt;/a&gt;SQL pros
&lt;/h2&gt;

&lt;p&gt;Broadly speaking, SQL databases require more advance preparation and planning of the relational model, but the benefit is that your data will be consistent and clean. The relational model represents how data is stored in the database, such as how each table is structured and related to other tables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#standardized-schema"&gt;
  &lt;/a&gt;
  Standardized schema
&lt;/h3&gt;

&lt;p&gt;Although SQL databases with standardized schema and relational databases are typically more rigid and difficult to modify, they still have many benefits. Every data object added to the database must conform to the recognized schema of linked tables (comprising rows and columns). While some could find this restrictive, it is essential for data compliance, integrity, consistency, and security.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-large-number-of-users"&gt;
  &lt;/a&gt;
  A large number of users
&lt;/h3&gt;

&lt;p&gt;SQL is an established programming language that is very widely used. It has a large user community comprising countless experts vast in well-established best practices. Developing a strong working knowledge of SQL can give application developers numerous opportunities to consult, collaborate and sharpen their skills.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#acid-compliance"&gt;
  &lt;/a&gt;
  ACID compliance
&lt;/h3&gt;

&lt;p&gt;SQL databases are ACID compliant (described in detail below) thanks to how relational database tables are precisely structured. This helps ensure that tables are in-sync and transactions are valid. It is the best choice when running applications with no room for error. An SQL database supports a high data integrity level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qfqZhsM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/12/SQL-database-ACID-600x600.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qfqZhsM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/12/SQL-database-ACID-600x600.png" alt="SQL database ACID" width="600" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ACID properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Atomicity:&lt;/strong&gt; All data and transactional changes are completely executed as a single operation. No changes are performed if that is not possible.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Consistency:&lt;/strong&gt; Data must be consistent and valid at the beginning and completion of a transaction.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Isolation:&lt;/strong&gt; Transactions run synchronously, without any competition. They act as though they are happening consecutively.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Durability:&lt;/strong&gt; Once a transaction is complete, its connected data is permanent and cannot be altered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at an inventory management system as an example. For such a system, it is important that items be removed from inventory as soon as they are purchased so as to prevent overstock or understock issues. When an order is placed, the inventory can be updated, a new shipment data object can be created, payment information can be updated, and the customer information can be updated. All of these related tables will be updated in unison in order for the transaction to complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://backendless.com/relational-data-and-custom-codeless-apis/"&gt;Learn more about relational database management with Backendless using our Shipping and Tracking app blueprint.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requires-little-to-no-code"&gt;
  &lt;/a&gt;
  Requires little to no code
&lt;/h3&gt;

&lt;p&gt;SQL is a developer-friendly language. It uses plain English, making it easy to learn to manage and query any relational database while using only simple keywords without coding.&lt;/p&gt;

&lt;p&gt;Backendless Database queries, for example, can be written using SQL. Additionally, SQL terminology is used to craft precise API calls to access and modify data. &lt;a href="https://backendless.com/database-view-designer/"&gt;Using Database Views&lt;/a&gt;, you can create these queries visually, making it even easier for those without a background in writing SQL queries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sql-cons"&gt;
  &lt;/a&gt;
  &lt;a id="sql-cons"&gt;&lt;/a&gt;SQL cons
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#hardware"&gt;
  &lt;/a&gt;
  Hardware
&lt;/h3&gt;

&lt;p&gt;SQL databases have historically required that you &lt;a href="https://backendless.com/what-is-app-scaling-and-why-it-matters/"&gt;scale up&lt;/a&gt; vertically. This meant you could only expand capacity by increasing capabilities, such as CPU, SSD, and RAM, on the existing server or by purchasing a larger, costlier one.&lt;/p&gt;

&lt;p&gt;As your data continues to grow, you’ll invariably need to constantly increase hard drive space and require faster and more efficient machines to run newer and more advanced technologies. With this, hardware can quickly become obsolete.&lt;/p&gt;

&lt;p&gt;Modern SQL databases may use a process called sharding. Sharding allows for horizontal scaling by separating, or partitioning, data among multiple data tables with identical schemas. Rather than storing 100,000 objects in one table, for example, sharding creates two tables with identical schemas that each store 50,000 objects, with no duplication between the tables.&lt;/p&gt;

&lt;p&gt;Of course, utilizing a &lt;a href="https://backendless.com/what-is-serverless-computing/"&gt;serverless hosting service&lt;/a&gt; such as Backendless can alleviate the scaling concern. The Backendless system is designed to manage scaling automatically for you, so that you don’t have to worry about physical server management while achieving database efficiency at scale.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rigidity"&gt;
  &lt;/a&gt;
  Rigidity
&lt;/h3&gt;

&lt;p&gt;A traditional &lt;a href="https://backendless.com/feature/backendless-database/#schema-management"&gt;relational model, or schema,&lt;/a&gt; of a SQL database has to be defined before use. Once this is done, they become inflexible, and any adjustment can become resource-intensive and difficult. Due to this, significant time should be invested in planning before putting the database into production.&lt;/p&gt;

&lt;p&gt;With Backendless, however, developers can always modify schema even after their app is launched. New tables and columns can be added, relations established, etc., providing greater flexibility than a traditional SQL database. This makes the Backendless system well suited for early product development as you are not locked into a schema at the beginning of the development process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-normalization"&gt;
  &lt;/a&gt;
  Data Normalization
&lt;/h3&gt;

&lt;p&gt;The goal behind the development of relational databases is to negate data duplication. There is different information for each table, and this information can be queried and connected using common values. But, when SQL databases become large, the joins and lookups needed between several tables can slow things down considerably.&lt;/p&gt;

&lt;p&gt;To put more simply, relational databases commonly store related data in different tables. The more tables storing data needed for a single query, the more processing power is needed to complete that query without the system slowing down significantly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traditionally-resourceintensive-upgrade-and-scaling"&gt;
  &lt;/a&gt;
  Traditionally resource-intensive upgrade and scaling
&lt;/h3&gt;

&lt;p&gt;As previously mentioned, vertical scaling-up of SQL databases is done by expanding hardware investment. This is costly and time-consuming to do on your own. Some organizations try to scale up horizontally through partitioning. However, this further complexity increases the resources and time expended. It will likely involve coding and require highly-skilled, well-paid developers.&lt;/p&gt;

&lt;p&gt;Systems like Backendless, however, are &lt;a href="https://backendless.com/what-is-app-scaling-and-why-it-matters/"&gt;designed to manage the scaling process for you automatically&lt;/a&gt;. This is often referred to as infrastructure as a service, or IaaS, and is far less expensive than managing infrastructure yourself. IaaS providers handle the difficult tasks of server maintenance and resource allocation for you so that you can focus on building a great product without worrying about what will happen when your database grows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nosql-pros"&gt;
  &lt;/a&gt;
  &lt;a id="nosql-pros"&gt;&lt;/a&gt;NoSQL pros
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#query-speed"&gt;
  &lt;/a&gt;
  Query speed
&lt;/h3&gt;

&lt;p&gt;NoSQL queries are denormalized. Therefore, with no fear of data duplication, all the needed information for a specific query is often stored together. This means that joins are not required. As a result, lookups are easier when dealing with large volumes of data. NoSQL is very fast for simple queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#continuous-availability"&gt;
  &lt;/a&gt;
  Continuous availability
&lt;/h3&gt;

&lt;p&gt;For a NoSQL database, data is distributed across different regions and multiple servers, implying no single failure point. This makes NoSQL databases more resilient and stable, with zero downtime and continuous availability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#agility"&gt;
  &lt;/a&gt;
  Agility
&lt;/h3&gt;

&lt;p&gt;This database gives developers enough flexibility to help improve their productivity and creativity. They are not bound by rows and columns, and their schemas do not have to be predefined. They are dynamic such that they can handle all data types, including polymorphic, semi-structured, structured, and unstructured.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redis.com/nosql/what-is-nosql/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUgDJicV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backendless.com/wp-content/uploads/2021/12/SQL-vs-NoSQL-database-flexibility-1200x266.png" alt="SQL vs NoSQL database flexibility" width="880" height="195"&gt;&lt;/a&gt;&lt;a href="https://redis.com/nosql/what-is-nosql/"&gt;&lt;em&gt;Image source&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Application developers can just come in and start building a database without needing to spend effort and time on planning upfront. It allows for quick modifications when there are changes in requirements or a new data type needs to be added. This flexibility makes this database a perfect fit for companies with varying data types and constantly changing features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lowcost-scaling"&gt;
  &lt;/a&gt;
  Low-cost scaling
&lt;/h3&gt;

&lt;p&gt;It is cost-effective to expand the capacity as a NoSQL database scales up horizontally. Instead of upgrading costly hardware, the difference with this database is that you can expand cheaply by simply adding cloud instances or commodity servers. Also, many open-source NoSQL databases offer cheap options for many companies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nosql-cons"&gt;
  &lt;/a&gt;
  &lt;a id="nosql-cons"&gt;&lt;/a&gt;NoSQL cons
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#no-standardized-language"&gt;
  &lt;/a&gt;
  No standardized language
&lt;/h3&gt;

&lt;p&gt;There is no fixed language for conducting NoSQL queries. There is variation in the syntax used in querying data for different NoSQL database types. Unlike SQL, where there is only one language to learn, NoSQL has a higher learning curve. Similarly, it can be more difficult to find experienced developers with knowledge of the NoSQL system that you have implemented. Thus, it is more likely that you will need to train new hires, increasing onboarding time and cost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inefficiency-in-conducting-complex-queries"&gt;
  &lt;/a&gt;
  Inefficiency in conducting complex queries
&lt;/h3&gt;

&lt;p&gt;Querying isn’t very efficient due to the numerous data structures present in NoSQL databases. There is no standard interface to perform complex queries. Conducting simple NoSQL queries might even require programming skills due to the structure of your data. As a result, costlier and more technical staff might be needed to perform the queries. This is one of the major NoSQL limitations, particularly for less technical (i.e. no-code) developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-smaller-number-of-users"&gt;
  &lt;/a&gt;
  A smaller number of users
&lt;/h3&gt;

&lt;p&gt;Developers are now starting to use NoSQL databases more and more and are quickly becoming a growing community. However, it is still not as mature as the SQL community. Also, with fewer experts and consultants, it could be more difficult to solve undocumented issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inconsistency-in-data-retrieval"&gt;
  &lt;/a&gt;
  Inconsistency in data retrieval
&lt;/h3&gt;

&lt;p&gt;Data is quickly available thanks to the distributed nature of the database. However, it could also be harder to ensure that the data is always consistent. Sometimes, queries might not return updated data or accurate information. The distributed approach makes it possible for the database to return different values consecutively, depending on the queried server.&lt;/p&gt;

&lt;p&gt;This is a major reason why NoSQL is not ACID-level compliant. “C” – Consistency implies that data must be consistent and valid at the beginning and completion of a transaction. Rather, many NoSQL databases are BASE compliant, where “E” signifies Eventual Consistency. NoSQL places importance on availability and speed over consistency. Inconsistency in data retrieval is one of the major drawbacks of NoSQL databases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-considering-your-options"&gt;
  &lt;/a&gt;
  &lt;a id="conclusion"&gt;&lt;/a&gt;Conclusion – Considering your options
&lt;/h2&gt;

&lt;p&gt;Both SQL and NoSQL databases are used in meeting specific needs. Depending on the goals and data environment of an organization, their specific pros and cons could be amplified.&lt;/p&gt;

&lt;p&gt;A common misconception is that it is bad to use both technologies together; as a matter of fact, you can use both together, such that each database type play to its strengths. Many companies use both databases within their cloud architecture. Some even use it within the same application.&lt;/p&gt;

&lt;p&gt;In the end, it is all about weighing your options and going with the preferred choice that best suits your needs.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and Happy Codeless Coding!&lt;/p&gt;

</description>
      <category>sql</category>
      <category>database</category>
      <category>architecture</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>How To Add Attractive Share Buttons To Your Website Or Blog</title>
      <author>Code_Jedi</author>
      <pubDate>Mon, 10 Jan 2022 18:00:25 +0000</pubDate>
      <link>https://dev.to/code_jedi/how-to-add-attractive-share-buttons-to-your-website-or-blog-59bm</link>
      <guid>https://dev.to/code_jedi/how-to-add-attractive-share-buttons-to-your-website-or-blog-59bm</guid>
      <description>&lt;p&gt;Today, I’ll be demonstrating and explaining how you can make simple, functional and good looking share buttons for your website or blog.&lt;/p&gt;

&lt;p&gt;First of all, why should you add share buttons to your website or blog, and why is it an important part of web development?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They are really beneficial for SEO and help your website gain backlinks, which will in turn make your website/blog rank higher on search engines like Google.&lt;/li&gt;
&lt;li&gt;Shares and backlinks are the main currency of social media. the more shares you get on your website or blog, the more people will visit it and in-turn share it with more people. And if you’re not adding share buttons to your website or blog, you’re not giving people the opportunity to share your content.&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let’s get started!
&lt;/h2&gt;

&lt;p&gt;First, let’s add the basic layout of our webpage and add a link to the stylesheet containing the social media icons we’ll be using for our share buttons:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Share this!&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
      &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton reddit"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Reddit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-reddit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton fb"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Facebook"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-facebook-f"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton twitt"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton linked"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
      &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we’ve defined the share buttons for Reddit, Twitter, Facebook and Linkedin, as well as gave them their corresponding classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; the classes referenced in the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements will be used for setting background colors and margins, while the classes defined in the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; elements will be used for displaying the actual social media icons and will be referenced from &lt;a href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.8.2/css/all.css"&gt;here&lt;/a&gt;, the link which we included earlier. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#now-lets-add-some-style-to-the-share-buttons"&gt;
  &lt;/a&gt;
  Now let’s add some style to the share buttons
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;38px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton.reddit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;darkorange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton.twitt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#03A9F4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton.fb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3F51B5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;180px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nc"&gt;.sbutton.linked&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;224&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;260px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let’s break this down piece by piece:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We define the &lt;code&gt;sbutton&lt;/code&gt; class which will contain our share buttons and give them the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A width and height of 60px.&lt;/li&gt;
&lt;li&gt;A fixed position attribute (this will make the icons unscrollable thus making them stay in the user’s view even if they scroll down) and a position 2% away from the left side of the screen.&lt;/li&gt;
&lt;li&gt;A border-radius of 25% to turn the icon backgrounds into squares with soft edges. You can change this attribute to 50% to make your icon background look less like squares:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bP-Ropdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hmw9jp46dondpprbjz8.png" alt="Squares" width="84" height="330"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more like circles:&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cd3SE3GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px9lvk7kjy349ejrc7yz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cd3SE3GA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/px9lvk7kjy349ejrc7yz.png" alt="Circles" width="85" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;text-align: center;&lt;/code&gt; attribute to align the icons in the center of their corresponding background elements.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;margin-top: 20px;&lt;/code&gt; attribute to position the upper-most icon 20px down from the top of the &lt;code&gt;sbutton&lt;/code&gt; container. &lt;/li&gt;
&lt;li&gt;Finally, a &lt;code&gt;cursor: pointer&lt;/code&gt; attribute to turn the user’s cursor into a pointer when they hover over one of the icons.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We style the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; elements within the &lt;code&gt;sbutton&lt;/code&gt; container to inherit a font-size of 38px.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We define the background of the first icon(Reddit) to have a dark-orange background.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We then define the background of the second icon(Twitter) to have a background color of the #03A9F4 hexadecimal and position it 100px down from the &lt;code&gt;sbutton&lt;/code&gt; container’s top position.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We do the same for the next icons but increment their &lt;code&gt;margin-top&lt;/code&gt; attribute by 80px.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;At this point you should have basic, embeddable share button widgets:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matveynikon/embed/mdmNEjP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One last but very important thing!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, the href attributes within our share buttons have no effect!&lt;br&gt;
Let's take &lt;a href="https://dev.to/code_jedi"&gt;https://dev.to/code_jedi&lt;/a&gt; as a sample link that's going to be shared through the share buttons.&lt;br&gt;
Let’s give our icons’ href attributes URLs to their respective social media platforms' post pages, as well as make them include our sample link in a new post:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.reddit.com/submit?url=https://dev.to/code_jedi"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton reddit"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Reddit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-reddit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.facebook.com/sharer/sharer.php?u=https://dev.to/code_jedi"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton fb"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Facebook"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-facebook-f"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com/share?url=https://dev.to/code_jedi"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton twitt"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.linkedin.com/sharing/share-offsite/?url=https://dev.to/code_jedi"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sbutton linked"&lt;/span&gt; &lt;span class="na"&gt;tooltip=&lt;/span&gt;&lt;span class="s"&gt;"Linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fab fa-linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s what a visitor will see when clicking on these share buttons:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reddit:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k5Ihib1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4euet7ruqhj2ybsiql6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k5Ihib1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4euet7ruqhj2ybsiql6.png" alt="Reddit" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Facebook:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZGQCfYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4k6jebjh1y6t8of8erz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZGQCfYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4k6jebjh1y6t8of8erz.png" alt="Facebook" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHv5UHtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y6wmaop0jd2yv8c6esi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHv5UHtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y6wmaop0jd2yv8c6esi.png" alt="Twitter" width="880" height="473"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linkedin:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oKLDcbSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnfu2pomn5860mw83cs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKLDcbSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnfu2pomn5860mw83cs.png" alt="Linkedin" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Here’s what your functional share buttons should look like:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/matveynikon/embed/jOGvZjB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-now-add-them-to-your-blog-or-website"&gt;
  &lt;/a&gt;
  You can now add them to your blog or website:
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matveynikon/embed/jOGvzLY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;That’s it for this blog post, hope you found it useful! &lt;br&gt;
Make sure to follow for more development blogs if you did.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Byeeee👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 10 VS code keyboard shortcuts to boost your productivity</title>
      <author>Amrin</author>
      <pubDate>Mon, 10 Jan 2022 17:58:49 +0000</pubDate>
      <link>https://dev.to/coderamrin/top-10-vs-code-keyboard-shortcuts-to-boost-your-productivity-kb</link>
      <guid>https://dev.to/coderamrin/top-10-vs-code-keyboard-shortcuts-to-boost-your-productivity-kb</guid>
      <description>&lt;p&gt;So, you use VS code. &lt;br&gt;
&lt;strong&gt;Are you using it properly?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are doing most of the tasks by clicking the mouse I think you are not using it properly. &lt;/p&gt;

&lt;p&gt;Using a mouse doesn't seem like a time waste but, in reality, if you are using the mouse all the time you are wasting a ton of time. &lt;/p&gt;

&lt;p&gt;To use the full potential of VS code you need to use keyboard shortcuts. Shortcuts will save you a ton of time when you code for hours. 🕵️&lt;/p&gt;

&lt;p&gt;So, Today I’ll share the top ten vs code keyboard shortcuts that will boost your productivity. &lt;/p&gt;

&lt;p&gt;let’s get started: &lt;/p&gt;

&lt;p&gt;Note: if you prefer video, check it out here. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vQ9ItpzWG1M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-ctrl-x"&gt;
  &lt;/a&gt;
  #1. Ctrl + X
&lt;/h3&gt;

&lt;p&gt;With this shortcut, you can cut a line of code without selecting. &lt;/p&gt;

&lt;p&gt;And then you can paste it anywhere with Ctrl + V. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-shift-alt-down-arrow"&gt;
  &lt;/a&gt;
  #2. shift + Alt + Down Arrow
&lt;/h3&gt;

&lt;p&gt;You can duplicate a line without selecting it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-shift-up-or-down-arrow"&gt;
  &lt;/a&gt;
  #3. shift + up or down arrow
&lt;/h3&gt;

&lt;p&gt;With this shortcut, you can select a big block of text or code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-alt-up-or-down-arrow"&gt;
  &lt;/a&gt;
  #4. Alt + up or down arrow
&lt;/h3&gt;

&lt;p&gt;With this shortcut, you can move a line-up or down without selecting. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-ctrl-p"&gt;
  &lt;/a&gt;
  #5. Ctrl + p
&lt;/h3&gt;

&lt;p&gt;It opens up the search bar, from there you can easily open any files from your project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-ctrl-g"&gt;
  &lt;/a&gt;
  #6. Ctrl + G
&lt;/h3&gt;

&lt;p&gt;It opens up a search bar where you can type a line number then, you’ll go to that specific line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-ctrl-shift-p"&gt;
  &lt;/a&gt;
  #7. Ctrl + Shift + p
&lt;/h3&gt;

&lt;p&gt;It opens up the command pallet, from there you can go to settings and many more. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-ctrl-"&gt;
  &lt;/a&gt;
  #8. Ctrl + `
&lt;/h3&gt;

&lt;p&gt;You can easily open up the terminal with this command. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-ctrl-b"&gt;
  &lt;/a&gt;
  #9. CTRL + B
&lt;/h3&gt;

&lt;p&gt;With this shortcut you can easily toggle the sidebar, you won’t need to close it manually. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-ctrl-tab"&gt;
  &lt;/a&gt;
  #10. CTRL + Tab
&lt;/h3&gt;

&lt;p&gt;With shortcuts, you can easily toggle between tabs. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are the shortcuts, I use all the time. &lt;br&gt;
What's your favourite VS code shortcut? &lt;br&gt;
Let me know in the comment below. &lt;/p&gt;

&lt;p&gt;If you are still lurking here 😃&lt;/p&gt;

&lt;p&gt;check out my  &lt;a href="https://www.getrevue.co/profile/coderamrin"&gt;newsletter &lt;/a&gt; where I share 5 web development resources each Saturday.&lt;br&gt;&lt;br&gt;
Are you on Twitter? let’s connect &lt;a href="https://twitter.com/CoderAmrin"&gt;coderamrin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>tips</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Write Atomic CSS like Facebook with Stylify</title>
      <author>Vladimír Macháček</author>
      <pubDate>Mon, 10 Jan 2022 17:57:23 +0000</pubDate>
      <link>https://dev.to/machy8/write-atomic-css-like-facebook-with-stylify-2074</link>
      <guid>https://dev.to/machy8/write-atomic-css-like-facebook-with-stylify-2074</guid>
      <description>&lt;p&gt;Pixel perfect webdesign, atomic CSS, mangled selectors and minimalistic output? Yes 🤩!&lt;/p&gt;




&lt;p&gt;Some time ago during a coffee ☕ break I have been digging through the Facebook CSS. I checked multiple pages, downloaded the CSS from them and got an idea on a tool that could simplify the way I write the CSS.&lt;/p&gt;

&lt;p&gt;Laziness is a great thing. It leads people to simplify their work so in the end they have to do nothing. It also led me to create the &lt;a href="https://stylify.dev"&gt;https://stylify.dev&lt;/a&gt; 💎.&lt;/p&gt;

&lt;p&gt;When I have been digging through the Facebook code, I found the following.&lt;/p&gt;

&lt;p&gt;Html:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---hvQgFns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stylify.dev/images/blog/stylify-facebook/fb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---hvQgFns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stylify.dev/images/blog/stylify-facebook/fb.jpg" width="818" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VdiDDwTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stylify.dev/images/blog/stylify-facebook/fb2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VdiDDwTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stylify.dev/images/blog/stylify-facebook/fb2.jpg" width="433" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you take a closer look, you can see, that they are using atomic CSS and they mangle selectors.&lt;/p&gt;

&lt;p&gt;I have also found an article &lt;a href="https://engineering.fb.com/2020/05/08/web/facebook-redesign/"&gt;Rebuilding our tech stack for the new Facebook.com&lt;/a&gt; from Facebook itself in which they explain what have they changed for the new Facebook version. What the article also says is that they have been loading over 400 kB of compressed CSS and before switching to Atomic CSS.&lt;/p&gt;

&lt;p&gt;From my experience, writting CSS manually is just slow and time consuming. Component frameworks are great until you start transforming every component. The Tailwind's JIT is close enough, but I don't like when I have to remember or search for the selector I want to use. I also need smaller chunks and integrate it into existing projects without increasing their size.&lt;/p&gt;

&lt;p&gt;So the objective was clear. Create a tool that will be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate CSS separately according to content&lt;/li&gt;
&lt;li&gt;Mangle selectors&lt;/li&gt;
&lt;li&gt;Generate CSS on demand&lt;/li&gt;
&lt;li&gt;Use native CSS &lt;code&gt;properties:values&lt;/code&gt; as selectors by default&lt;/li&gt;
&lt;li&gt;Work on its own without bundlers, frameworks and post/preprocessors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#atomic-css-with-stylify"&gt;
  &lt;/a&gt;
  Atomic CSS with Stylify
&lt;/h2&gt;

&lt;p&gt;Stylify ships with the &lt;a href="https://stylify.dev/docs/stylify/native-preset"&gt;native preset&lt;/a&gt; in which the selectors are the same like CSS &lt;code&gt;property:value&lt;/code&gt;. Thanks to that it is not necessary to remember or search for selectors. The Native Preset is optional and you can define your own selectors. Stylify also provides the following features (not all are listed):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Small chunks&lt;/strong&gt;: it can generate CSS for each file, component, layout separately&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No pregenerated CSS&lt;/strong&gt;: the CSS is generated only if a component or selector is found in the content&lt;/li&gt;
&lt;li&gt;Internaly combines and reuses selectors as much as possible to keep the CSS small&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Macros&lt;/strong&gt;: can be used to define custom selectors like &lt;code&gt;m:20px&lt;/code&gt; for margin&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Logical operands for screens&lt;/strong&gt;: like &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operands for screens combination: &lt;code&gt;sm&amp;amp;&amp;amp;tolg:font-size:24px&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Selectors mangling&lt;/strong&gt;: from long &lt;code&gt;font-weight:bold&lt;/code&gt; to short &lt;code&gt;_ab&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;No preprocessor, postprocessor or bundler is required&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;On demand generated CSS&lt;/strong&gt;: the CSS can be bundled on demand, for example during a request&lt;/li&gt;
&lt;li&gt;Because it can generates CSS separately and doesn't bring any CSS by default, it &lt;strong&gt;can be easily integrated into an existing project without increasing its size globally&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#write-html-get-css-mangle-selectors-all-automagically"&gt;
  &lt;/a&gt;
  Write HTML. Get CSS. Mangle selectors. All automagically.
&lt;/h2&gt;

&lt;p&gt;The example bellow and all its code can be found and edited on the &lt;a href="https://stackblitz.com/edit/expressjs-bvexzl?file=index.html"&gt;StackBlitz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the example bellow there is a code for simple gallery image:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
    display:inline-flex
    position:relative
    margin:24px
    overflow:hidden
    box-shadow:0__2px__8px__#000
    width:300px
    md:margin:48px
    md:width:600px
"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"width:100% object-fit:cover height:auto"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://stylify.dev/images/blog/stylify-facebook/mountains.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
        font-family:arial
        font-weight:bold
        font-size:18px
        position:absolute
        bottom:0
        left:0
        padding:24px
        background:rgba(0,0,0,0.7)
        color:#fff
        md:font-size:32px
    "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Zakopané (Poland)
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result of the code above will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;br&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N04IEKFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stylify.dev/images/blog/stylify-facebook/stylify-facebook-result.jpg" alt="" width="702" height="577"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code above would look almost the same if it would be written in pure CSS. Only the &lt;code&gt;box-shadow&lt;/code&gt; uses the &lt;code&gt;__&lt;/code&gt; (two underscores) instead of a space.&lt;/p&gt;

&lt;p&gt;Because of the maintainability and the fact that code above could be used on multiple places, it is necessary to make it more reusable. So let's define some components, macros and variables!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cleanup-and-configuration"&gt;
  &lt;/a&gt;
  Cleanup and Configuration
&lt;/h3&gt;

&lt;p&gt;For the example above, I am using the following initialization that can be found on the &lt;a href="https://stackblitz.com/edit/expressjs-bvexzl?file=index.html"&gt;StackBlitz&lt;/a&gt; (It is in the index.js and it is slightly changed in order to work in that environment):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Compiler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nativePreset&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stylify/stylify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Compiler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nativePreset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;compilationResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compilationResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generateCss&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mangledContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rewriteSelectors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;compilationResult&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add the shadow variable first into the compiler config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;nativePreset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 2px 8px #000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the variable is defined, we can use it like this: &lt;code&gt;box-shadow:$shadow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Native Preset is not required. You can define your own selectors. For example for the margin it would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;nativePreset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;macros&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;m:(&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;S+?)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;macroMatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cssProperties&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cssProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;margin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;macroMatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the macro is defined, it can be used with custom values like &lt;code&gt;m:24px&lt;/code&gt; and &lt;code&gt;md:m:48px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If multiple and the same selectors should be used on multiple places, it is a good practice to define a component for them in order to simplify the maintainability and readability:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;nativePreset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;components&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gallery-image__wrapper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        display:inline-flex
        position:relative
        m:24px
        md:m:48px
        overflow:hidden
        box-shadow:$shadow
        width:300px
        md:width:600px
    `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gallery-image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;width:100% object-fit:cover height:auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gallery-image__label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
        font-family:arial
        font-weight:bold
        font-size:18px
        position:absolute
        bottom:0
        left:0
        padding:24px
        background:rgba(0,0,0,0.7)
        color:#fff
        md:font-size:32px
    `&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is also a good practice to add the &lt;code&gt;box-sizing:border-box&lt;/code&gt; to prevent the wtf moments somewhere in the future:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;nativePreset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plainSelectors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;box-sizing:border-box&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all the enhancements above, the finall code is a way smaller:&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"gallery-image__wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"gallery-image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://stylify.dev/images/blog/stylify-facebook/mountains.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"gallery-image__label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Zakopané (Poland)
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#minification-and-optimization"&gt;
  &lt;/a&gt;
  Minification and Optimization
&lt;/h2&gt;

&lt;p&gt;Under the hood the Stylify optimizes the CSS in the following ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The selectors and components are generated only when found in the content&lt;/li&gt;
&lt;li&gt;It tries to reuse the selectors as much as possible&lt;/li&gt;
&lt;li&gt;It transforms the long selectors like &lt;code&gt;font-weight:bold&lt;/code&gt; into the short ones &lt;code&gt;_ab12&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bellow is an image from StackBlitz with the processed and optimized output. The css (without new lines and spaces) has only &lt;strong&gt;0.78kb&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZI25cSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stylify.dev/images/blog/stylify-facebook/processed-html.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZI25cSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stylify.dev/images/blog/stylify-facebook/processed-html.jpg" alt="" width="856" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-me-know-what-you-think"&gt;
  &lt;/a&gt;
  Let me know what you think!
&lt;/h2&gt;

&lt;p&gt;Stylify took a year of development and the first release was published a month ago.&lt;br&gt;
I will be very happy for any feedback, issue or an idea! 😊.&lt;/p&gt;




&lt;p&gt;Stay in touch:&lt;br&gt;
👉 &lt;a href="https://twitter.com/8machy"&gt;8machy&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://dev.to/machy8"&gt;dev.to/machy8&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://medium.com/@8machy"&gt;medium.com/@8machy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
