<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Story time with Treblle: The curious case of password reset</title>
      <author>Vedran Cindriƒá</author>
      <pubDate>Thu, 12 Aug 2021 09:47:53 +0000</pubDate>
      <link>https://dev.to/treblle/story-time-with-treblle-the-curious-case-of-password-reset-e1a</link>
      <guid>https://dev.to/treblle/story-time-with-treblle-the-curious-case-of-password-reset-e1a</guid>
      <description>&lt;p&gt;While working in our previous development company we were developing a new platform for a dear client. Our role was to develop the entire back-end with an API for mobile apps. Another development company, on a different side of the planet, was tasked to develop the mobile apps. At the beginning we had a lot of common challenges like communication, syncing time zones, documentation questions and others. I asked the client if we could add Treblle on the API side so we would eliminate some of these problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As soon as we added Treblle and made a few calls to the API it was 100x easier.&lt;/strong&gt; The documentation was auto generated and updated, the mobile devs saw what they were doing. More importantly we also saw what they were doing so it was easier to understand how they were using the API and what problems they were facing. &lt;strong&gt;Interestingly enough our client also got into APIs and started to learn what we're doing, when we're working and when not üòé.&lt;/strong&gt; He was also a huge fan of the fact he could see the API response time because he felt like the app was slow and thought it was on the back-end side. Turns out it wasn't. Anyway‚Ä¶&lt;/p&gt;

&lt;p&gt;The app we were working on was already on the App store and the mobile team was preparing to do a new important update. When you are sending apps to the App Store if your app requires a login you HAVE to provide Apple with a login combination. We knew that, so we provided the credentials since day one and never changed them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The mobile team uploaded the new build, sent the app for review and after 2-3 days the build was rejected.&lt;/strong&gt; The reason Apple specified was "Login credentials were incorrect". Our client called me and was super irritated by the fact that the app got rejected. He started asking me why we changed the login data and explaining how he needed the update live ASAP. Now when something like this happens there aren‚Äôt a lot of options you have as a developer.&lt;/p&gt;

&lt;p&gt;One option is to investigate what happened by trying to login and reporting back to the client if it worked. What's even crazier is - if it works then why couldn't Apple login?! If it doesn‚Äôt work then you have to investigate your own team and the mobile apps team to see who changed the credentials and how. Finally you have to come back to your client and tell him xyz happened, we know what it was, we fixed it and 100% it won‚Äôt happen again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first thing I thought was let's use Treblle to see all the login attempts in the last 24 hours.&lt;/strong&gt; With Treblle you can view all requests between the API and apps including location and device data. Immediately I saw a request that happened a few hours ago, from an iOS device from Sunnyvale, California (Apple HQ). I also saw that they did in fact use the phone number we provided them for login, and that the API did return an error message saying that the login credentials were incorrect?!&lt;/p&gt;

&lt;p&gt;This is where it got interesting. With Treblle you can click on any request and find "More requests like this". Treblle will then go and find all requests made to the API from the same user. Taking into account things like IP, location and even the user ID. &lt;strong&gt;Because I could see requests in chronological order, as they were made by the Apple testers, I saw that the first thing they did was made a call to an API endpoint that resets the password&lt;/strong&gt; ü§£ I was shocked. I triple checked and realized exactly what happened. The app had a password reset option on the login screen. Apple testers clicked on reset password first. That sent an SMS with the new password. Since we used a made up phone number they didn‚Äôt get the SMS and didn‚Äôt think it would change the password.&lt;/p&gt;

&lt;p&gt;At that point I sent my client a link to the request on Treblle and explained to him what happened and what they did. We made a fix which wouldn‚Äôt change the password straight away but rather send a reset link in the SMS first. Not something my client wanted but got the job done. We sent the app for review and it got approved the next dayüòé And yes, the first thing Apple did was the tried to reset the password üöÄ.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If we didn't have Treblle I can guarantee you we would have never known what happened.&lt;/strong&gt; More importantly without Treblle we would have never been able to ‚Äúprove‚Äù to the client what exactly happened. No other tool could help us figure this out that fast and easy. With Treblle it was clear as day to us, to him and to the mobile team. Since then the client always asked if Treblle was added to the API üí™üèª&lt;/p&gt;

</description>
      <category>tooling</category>
      <category>api</category>
      <category>ios</category>
      <category>startup</category>
    </item>
    <item>
      <title>GitHub 10 Repos for JavaScript Developer</title>
      <author>Suprabha</author>
      <pubDate>Thu, 12 Aug 2021 09:22:51 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/github-10-repo-for-javascript-developer-23a9</link>
      <guid>https://dev.to/suprabhasupi/github-10-repo-for-javascript-developer-23a9</guid>
      <description>&lt;p&gt;I've included 10 amazing GitHub repos which will help you to become a better JavaScript Developer. These repository will clear your all doubts in Javascript, also you can practise more problems using the below repos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-javascript-algorithms"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~116k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UyJUVF51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UhCNtkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UyJUVF51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/UhCNtkl.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.

Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-javascript-questions"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/lydiahallie/javascript-questions"&gt; JavaScript Questions&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~37k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgYhqmQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DmCQnR7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgYhqmQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DmCQnR7.png" alt="JavaScript Questions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
This repository contains a long list of (advanced) JavaScript questions along with their explanations and gets frequently updated
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-clean-code-javascript"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~56k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7A0Onwm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jihs1hw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7A0Onwm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jihs1hw.png" alt="Clean Code JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
This repository consists of the software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. It's a guide for producing readable, reusable, and refactored software in JavaScript.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-awesome-javascript"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/sorrycc/awesome-javascript"&gt;Awesome JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jzHf1xC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CfIRLyn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jzHf1xC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/CfIRLyn.png" alt="Awesome JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~25k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt; A collection of awesome browser-side JavaScript libraries and resources. This repository contains a list of variety of frameworks, template engines, articles and post, documentations, reactive and functional programming 
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-30-seconds-of-code"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~82k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VB3Rx000--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nUdPeX9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VB3Rx000--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nUdPeX9.png" alt="30 seconds of Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repository contains a huge collection of short JavaScript code snippets which can be super useful while working on your JavaScript projects thus increasing your efficiency and knowledge.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-you-dont-know-js"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You don't know JS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~143k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jj4_V46k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Cw7SIHY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jj4_V46k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Cw7SIHY.png" alt="You don't know JS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repo is a series of books on core mechanisms of the Javascript language. The 2nd edition of the series is currently in progress, while the first edition is available and is entirely free to read online!
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-js-interviews"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://github.com/kdn251/interviews"&gt;JS Interviews&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~53k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VLiWs6TK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ggWI35r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLiWs6TK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ggWI35r.png" alt="Awesome Interviews"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Your personal guide to Software Engineering technical interviews.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-frontend-checklist"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;Front-End Checklist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~55k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PM5_dpGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwqNb28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PM5_dpGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwqNb28.png" alt="Front-End Checklist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a million things to take care of when you launch a website. So how do you ensure you have taken care of things that can break your product when it goes into production. Enter Front-end Checklist.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-front-end-interview-handbook"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://github.com/yangshun/front-end-interview-handbook"&gt; Front End interview handbook&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~31k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G6xGTJ1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qojLPd1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G6xGTJ1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qojLPd1.png" alt=" Front End interview handbook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This repo promises to make you go from zero to front-end interview hero even if you don't have prior interview experience. And, from the number of stargazers it has, it looks like it delivers on that promise.
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-airbnb-javascript"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://github.com/airbnb/javascript"&gt;Airbnb JavaScript&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Star:&lt;/strong&gt; ~113k ‚≠êÔ∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1HbjgIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SSJGliq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1HbjgIe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SSJGliq.png" alt="Airbnb JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A mostly reasonable approach to JavaScript
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Thanks for reading the article ‚ù§Ô∏è&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        üåü &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        üìö &lt;a href="https://gum.co/css-pseudo-class-elements"&gt; Ebooks&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        üåü &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>github</category>
    </item>
    <item>
      <title>Deploying our code at Feather</title>
      <author>vincent Audoire</author>
      <pubDate>Thu, 12 Aug 2021 09:01:04 +0000</pubDate>
      <link>https://dev.to/feather-insurance/deploying-our-code-at-feather-1h6a</link>
      <guid>https://dev.to/feather-insurance/deploying-our-code-at-feather-1h6a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is part of our internal documentation at Feather. We build our product in the open and share our learnings with the community. We're always looking for talents to join our team &lt;a href="https://feather-insurance.com/careers"&gt;check out our careers page&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;At Feather, we love simple and efficient solutions. We firmly believe in continuous development and continuous integration with the shortest iteration cycle. Our workflows need to be designed so that if we need to deploy to productions &lt;em&gt;hundreds&lt;/em&gt; of times a day, we are be able to do so. &lt;/p&gt;

&lt;p&gt;We have been invested in automated tests from the start: we practice unit testing, integration testing, end to end tests, and more. We feel confident that we aren't breaking anything while developing. &lt;/p&gt;

&lt;p&gt;We use a branching policy inspired by &lt;a href="https://trunkbaseddevelopment.com"&gt;Trunk Based Development&lt;/a&gt; with the use of &lt;a href="https://martinfowler.com/articles/feature-toggles.html"&gt;Features Toggles&lt;/a&gt; in order to keep our velocity as high as possible. For version control, we're using GitHub and our continuous integration and continuous development runs on &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. To learn more about this, check out our article on the &lt;a href="https://dev.to/feather-insurance/branching-policy-at-feather-3jjh"&gt;Branching policy at Feather&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article describes our release and deployment policy. We have found a way to keep everyone on the team updated on important changes and have integrated it into our development workflow.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-our-code"&gt;
  &lt;/a&gt;
  Deploying our code
&lt;/h1&gt;

&lt;p&gt;Every commit pushed to the &lt;em&gt;main&lt;/em&gt; branch will trigger a staging build. In addition to this, every commit pushed to the &lt;em&gt;main&lt;/em&gt; branch will draft a new release on GitHub with the help of the &lt;a href="https://github.com/release-drafter/release-drafter"&gt;release drafter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The drafted release will contain all the commits added since the previous release and a suggested new version for the (soon to be) new release. The suggested new version is following the &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt; rules.&lt;/p&gt;

&lt;p&gt;In order to deploy our code to production, we simply need to click on the "Publish release" button on GitHub. From there, a GitHub action will take over and take care of the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy the code to production.&lt;/li&gt;
&lt;li&gt;Notify the team (on Slack) about a new release being deployed and let them know what's changed.&lt;/li&gt;
&lt;li&gt;Bump &lt;code&gt;package.json&lt;/code&gt; version to one of the drafted releases and push the changes to GitHub.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#checklist-for-releasing"&gt;
  &lt;/a&gt;
  Checklist for releasing ‚úÖ
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jAYZUacn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yir3xgvd6ijkhsu62fc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jAYZUacn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yir3xgvd6ijkhsu62fc9.png" alt="draft-release-detail-view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to publish a release we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check that the SemVer is correct&lt;/li&gt;
&lt;li&gt;Check that the "Raw changelog" section contains the changes we wish to deploy&lt;/li&gt;
&lt;li&gt;Check that the "What‚Äôs changed" section is descriptive enough. This will be read by non-techies¬†ü§ì&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If everything is correct ‚úÖ, click on (4) "Publish release". The version will shortly go live and the changelog will be sent to the whole team.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#release-notes"&gt;
  &lt;/a&gt;
  Release notes
&lt;/h1&gt;

&lt;p&gt;Everyone on the team is following our release notes, so they have to be easy to read. That's why we've split the notes into two sections: a high-level summary that is added by the person publishing the release and the raw changelog that's compiled of all the commit messages.&lt;/p&gt;

&lt;p&gt;You can use our release drafter template in your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;name-template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'app:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;v$RESOLVED_VERSION'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;tag-template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'v$RESOLVED_VERSION'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;template:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;What‚Äôs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Changed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ü§©&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;_Please&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;human&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;readable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;based&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog_&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;changelog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;üìÉ&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;$CHANGES&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks like this in our Slack:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pa1eCiv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny7iuiegqdimv3otlr6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pa1eCiv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ny7iuiegqdimv3otlr6x.png" alt="release-note-slack"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>githubaction</category>
      <category>ci</category>
      <category>cd</category>
    </item>
    <item>
      <title>Cost reduction techniques: Lesson for travel app development</title>
      <author>Adamo Digital</author>
      <pubDate>Thu, 12 Aug 2021 08:15:59 +0000</pubDate>
      <link>https://dev.to/adamodigitalco/cost-reduction-techniques-lesson-for-travel-app-development-22f3</link>
      <guid>https://dev.to/adamodigitalco/cost-reduction-techniques-lesson-for-travel-app-development-22f3</guid>
      <description>&lt;p&gt;&lt;em&gt;Apparently, the &lt;a href="https://adamodigital.com/travel-hospitality-software-development"&gt;travel software development&lt;/a&gt; market becomes more competitive, which leads to small companies or startups demanding cost reduction techniques to maximize their profits&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Indeed, applying &lt;strong&gt;IT cost reduction strategies&lt;/strong&gt; is now an essential requirement when travel startup demand to set foot in this competitive market. These cost reduction methods can support small businesses in managing their budget more effectively and avoiding the redundant cost that is unnecessary. From that, a business can minimize their development cost, focus on what is vital in the development process, where to hire a dedicated development company, which area they should spend. Therefore, cost-cutting strategies for companies are now needed more than ever. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-applying-costcutting-techniques"&gt;
  &lt;/a&gt;
  Advantages of applying cost-cutting techniques
&lt;/h2&gt;

&lt;p&gt;By applying effective types of cost reduction techniques in &lt;a href="https://adamodigital.com/"&gt;software development&lt;/a&gt;, a business can spend their money to enhance other activities, including marketing, customer services, and employee support.&lt;/p&gt;

&lt;p&gt;As the profit is increased, management may spend more on providing amenities to workers. It will ensure more productivity at work and more cordial relationships between management and workers; also reduce the labor turnover. &lt;/p&gt;

&lt;p&gt;With the money spending on the essential sector, the travel business can create competitive advantages over competitors. Travel app publishers can deliver different practical functions to users and continuously search for improvement based on user feedback. Also, the quality of the app can also be enhanced to reduce the concerns of bugs and lags from mobile travel users. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#factors-affecting-travel-app-development-cost"&gt;
  &lt;/a&gt;
  Factors affecting travel app development cost
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsr4WYsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dug2cqqg9kdbc0u6jpem.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsr4WYsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dug2cqqg9kdbc0u6jpem.jpg" alt="Cost reduction technique"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;1. The number and complexity of features:&lt;/strong&gt; Definitely, the number of features and their complexity is one of the critical factors that affect &lt;a href="https://adamodigital.com/travel-portal-development"&gt;travel app development&lt;/a&gt; cost. The less time and effort to build the software, the lower the price will be.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Operating systems:&lt;/strong&gt; The travel app development cost depends on the type and number of operating systems, such as IOS, Android, Windows, Linux, etc. For example, developing a native &lt;a href="https://adamodigital.com/our-services"&gt;software solution&lt;/a&gt; for IOS only will be less costly than for IOS and Android. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. UI and UX design:&lt;/strong&gt; UI and UX design is a critical development stage that businesses should focus on. Design size and complexity affect the budget for developing a &lt;a href="https://adamodigital.com/our-portfolio"&gt;software project&lt;/a&gt;. More screens, pages, handcrafted elements, complex animations will lead to more cost of this stage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Quality assurance:&lt;/strong&gt; In this process, QA engineers will check the system for bugs, errors, and compliance with the project specification. Also, they have to ensure the software provides a consistent user experience on all devices and platforms. Glitches, maintenance, bugs are the problems of the increase in final price.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Third-party API integration:&lt;/strong&gt; In the &lt;a href="https://adamodigital.com/about-us"&gt;software development&lt;/a&gt; process, third-party service integration is necessary to enable functionality. With API integration, engineers are able to save time and effort. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cost-reduction-methods-for-travel-app-publishers"&gt;
  &lt;/a&gt;
  Cost reduction methods for travel app publishers
&lt;/h3&gt;

&lt;p&gt;Most new businesses, when starting developing travel apps, usually pay for services that not necessary. They mostly pay for their tools, vehicles, applications, services, and even excessive fees. That‚Äôs why travel app businesses need cost reduction consultants to ensure they are following the correct methods. Bellow are most effective IT cost reduction strategies:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-should-start-with-evaluating-your-business-expenses"&gt;
  &lt;/a&gt;
  You should start with evaluating your business expenses
&lt;/h4&gt;

&lt;p&gt;Among cost-saving methods in a company, evaluating the expenses is the most effective one. Travel app publishers can cut down unused services and products, vendors that are bugging down. Businesses need carefully considering which elements are crucial should be invested in &lt;a href="https://adamodigital.com/booking-engines"&gt;travel app development&lt;/a&gt;. The money from redundant services should be spent on organizational growth campaigns to increase business efficiency quickly. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#understand-target-market"&gt;
  &lt;/a&gt;
  Understand target market
&lt;/h4&gt;

&lt;p&gt;Defining a target market is a massive priority for reducing costs. In the tourism industry, rather than spending money to create an app similar to competitors, businesses should focus on finding answers to solve traveler‚Äôs problems. From that, businesses can avoid marketing costs, advertisement costs as users have to install the unique app to get the solution. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hire-remote-contractors-and-freelancers"&gt;
  &lt;/a&gt;
  Hire remote contractors and freelancers
&lt;/h4&gt;

&lt;p&gt;Of course, hiring a freelancer can be a very effective cost reduction strategy for your business. Businesses can avoid the cost of renting office space and co-working offices. Additionally, companies don‚Äôt need to provide benefits to freelancers because they are often self-employed. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automate-as-much-as-possible"&gt;
  &lt;/a&gt;
  Automate as much as possible
&lt;/h4&gt;

&lt;p&gt;Automation is about replacing humans with computers to smaller timeframes for production, meaning fewer person hours and consequently reduced costs. Additionally, applying automation in &lt;a href="https://adamodigital.com/travel-hospitality-software-development"&gt;travel app development&lt;/a&gt; can enable developers to avoid time-consuming tasks and spend more time on other important ones. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#partnering-with-experts"&gt;
  &lt;/a&gt;
  Partnering with experts
&lt;/h4&gt;

&lt;p&gt;Definitely, partnering with &lt;a href="https://adamodigital.com/dedicated-software-development-team"&gt;offshore software development teams&lt;/a&gt; can be a valuable strategy for reducing the cost. These outsourcing software development teams can be highly competitive in pricing, especially in countries like Vietnam. Adamo Digital - a professional &lt;a href="https://adamodigital.com/"&gt;software development company&lt;/a&gt;, will provide full-cycle services in software development, especially in the travel industry with the best price on the market. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-a-minimum-viable-product"&gt;
  &lt;/a&gt;
  Build a minimum viable product
&lt;/h4&gt;

&lt;p&gt;In those types of cost reduction techniques, MVP development is a valuable method to reduce the cost of developing a software project and faster receive a working solution. This method is widely used to test ideas, attract investors, and better time-to-market.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where to develop a mobile app for travel?&lt;/strong&gt; &lt;em&gt;As mentioned above, Vietnam is the ideal place for travel startups who want to develop a mobile or web application due to its competitive price.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>startup</category>
      <category>costreduction</category>
      <category>strategies</category>
    </item>
    <item>
      <title>These habits will make you a better developer</title>
      <author>Benjamin Kalungi</author>
      <pubDate>Thu, 12 Aug 2021 08:08:06 +0000</pubDate>
      <link>https://dev.to/bk_973/these-habits-will-make-you-a-better-developer-4gl7</link>
      <guid>https://dev.to/bk_973/these-habits-will-make-you-a-better-developer-4gl7</guid>
      <description>&lt;p&gt;Learning how to code isn't the end of the journey for a software developer; it's just the beginning of a new journey. Developers need to open up their minds to learning new stuff at anytime. This would lead to growth and improvement of skill and these improvements would lead to career success thereafter.&lt;/p&gt;

&lt;p&gt;The Software Industry is indeed fast-paced with lots of new technologies poping up quite often. This kind of race leads to an ever-increasing demand for top talent. What that means for developers is that they have to be willing to keep up with the pace in order to stay relevant to potential employers or clients.&lt;/p&gt;

&lt;p&gt;But keeping up with this flashy pace is easier said than done and staying relevant requires some serious hardwork and consistency. In this article I'll share with you seven proven habits that will make you a better developer. These habits worked for me and if you are willing to put in the work, they will work for you as too.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read other people's code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Exposure to expert work will most likely make you an expert too, atleast in some way. You will be able to learn way too much from other people's code e.g new concepts, tricks, best practices, etc. Continually doing this will inspire your own ideas and insights when writing your own code. It's easy; Go to github.com, fork some repositories and do some deep reading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be clear about what you know and what you don't yet know&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's a good trait to let go of your geeky ego and accept what you don't yet know. It'll really be a great way for you to learn. It's such a wonderful habit that comes with multiple benefits for you as a developer eg. You will have clear guidance on the specificity of the questions that you want to seek answers to, Your focus will be put to the areas where you need it most, You'll get quality answers to your questions since your questions will be to the point, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Share your knowlege and skill&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;No developer is an island; Just the way you need support from other devs, it's the same way that they need your support. However little the contribution might seem, it'll make a bigger difference in the long run and the community will be proud you. So whichever opportunity that you get to giveout something, never hesitate. These contributions can be made in multiple forms eg. answering a question on stackoverflow.com, a reply to a tweet, publishing an article, a comment on someone else's article, contribution to opensource, etc. Just share something whenever you get a chance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be social&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Oh God I just can't believe I have to mention this! Don't forget to be human my friend whether it's online or offline. Making this a habit will open up so many doors for you as a developer eg.&lt;/p&gt;

&lt;p&gt;On the humanity side of things; you wont suck and many people will love to be around you, engaging with you, etc. You'll be able to impact the world in a naturally appealing way.&lt;/p&gt;

&lt;p&gt;And on the developer side of things; you'll become a wonderful colleague to work with and your team members, your manager, your boss, your clients, will easily love you. It's absolute that work naturally becomes a breeze when engaging with a team-member who's socially welcoming and easy to approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build with other people&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although it's sometimes cool to build stuff alone, building with other people is much more awsome and the benefits will be clear. The active support you'll get from team members is priceless. These folks will help alot in clarifying your key strengths and weakness. The benefits are obvious; getting to know the areas where you strive will enable you to use your energy effiently and save time. You will also learn faster with a team than when you're solo since you'll be getting guidance from other members.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Utilize your perspective&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your perspective is so important, it's what makes you standout from others. So undermining your own views and insights is quite unfair. It's important to count on your own thoughts too whenever you're faced with a challenge in code. Instead of always coping code from elsewhere, first try your best to take on the challenge using your own perspective.&lt;/p&gt;

&lt;p&gt;How's that beneficial to a dev who's seeking to be on top of the game?&lt;/p&gt;

&lt;p&gt;You'll be able to discover a lot about your own thoughts. Piquing your thoughts will lead to magical things in your day-to-day life as a developer.The process will you teach you good problem solving techniques and as a developer, this is what matters most in the world.&lt;/p&gt;

&lt;p&gt;The other thing is that you'll learn to reason about computer programs quite so well. This is a no-brainer! To a developer, the merits of this are self-explanatory. Every dev strives to be able to understand code and if you learn this habit, it'll get you there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice Practice, Repeat&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using your newly found knowledge to build stuff is useful too. Without practice your knowledge will not stick and your skill wont improve. So after going through the boring learning process and finally grasping that cool technique, make sure you craft stuff with it. Do it always, whether it's out of curiosity or expression of your ideas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Habits aren't that easy to get used to but a little bit of work will get us there day by day. If you found the above points valuable, make them part of your daily routine you'll ultimately become a better developer. If you think I forgot to include some relevant info, please share it with me in the comments below.&lt;/p&gt;

&lt;p&gt;Thanks for stopping by.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>GitHub's In-Built New Feature: Quickly Open Any Repository In Visual Studio Code</title>
      <author>Yogesh Chavan</author>
      <pubDate>Thu, 12 Aug 2021 08:07:38 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/github-s-in-built-new-feature-quickly-open-any-repository-in-visual-studio-code-4fkc</link>
      <guid>https://dev.to/myogeshchavan97/github-s-in-built-new-feature-quickly-open-any-repository-in-visual-studio-code-4fkc</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;GitHub has added in-built support to easily open your repository in Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Previously, we either need to use &lt;a href="https://levelup.gitconnected.com/how-to-browse-project-files-on-github-as-if-you-are-browsing-in-your-ide-1022f153af42?source=friends_link&amp;amp;sk=259b3aea4a293b09a21e8871234dfa20"&gt;octotree&lt;/a&gt; extension to browse files or use &lt;a href="https://github.com/conwnet/github1s"&gt;github1s&lt;/a&gt; to view in Visual Studio Code.&lt;/p&gt;

&lt;p&gt;But github1s was opening just a read-only editor where you can't make any modifications to files.&lt;/p&gt;

&lt;p&gt;Now, with GitHub's in-built support, you can quickly open any GitHub repository in Visual Studio Code and get the look and feels of it. &lt;/p&gt;

&lt;p&gt;Almost all the features of Visual Studio Code you can explore in this feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-open-repository-in-visual-studio-code"&gt;
  &lt;/a&gt;
  How to Open Repository in Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;Just press . (dot) on your keyboard when browsing any GitHub repository and it will be opened in Visual Studio Code on the browser.&lt;/p&gt;

&lt;p&gt;For example, Suppose, you're on &lt;a href="https://github.com/myogeshchavan97/spotify-music-search-app"&gt;Spotify Music Search App Repository&lt;/a&gt; and you press . (dot), then you'll be redirected to Visual Studio Code with your repository opened in it as shown below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mII50cepKg4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's so cool üòç.&lt;/p&gt;

&lt;p&gt;Currently, you can't open a terminal to execute the code. But you get the full power and feel of Visual Studio Code and you can even edit the code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For now, If you want to execute the code in the repository, you can replace the github with githubbox in your GitHub repository URL and it will open CodeSandbox where you can see your code and execute it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, the URL &lt;a href="https://github.com/myogeshchavan97/spotify-music-search-app"&gt;https://github.com/myogeshchavan97/spotify-music-search-app&lt;/a&gt; will become &lt;a href="https://githubbox.com/myogeshchavan97/spotify-music-search-app"&gt;https://githubbox.com/myogeshchavan97/spotify-music-search-app&lt;/a&gt; after replacing github with githubbox.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To learn more about the Visual Studio Code Web editor, check out &lt;a href="https://github.com/features/codespaces"&gt;this link&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Check out my recently published &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;

&lt;p&gt;In this course, you will build 3 apps along with food ordering app and you'll learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic and advanced Redux&lt;/li&gt;
&lt;li&gt;How to manage the complex state of array and objects&lt;/li&gt;
&lt;li&gt;How to use multiple reducers to manage complex redux state&lt;/li&gt;
&lt;li&gt;How to debug Redux application&lt;/li&gt;
&lt;li&gt;How to use Redux in React using react-redux library to make your app reactive.&lt;/li&gt;
&lt;li&gt;How to use redux-thunk library to handle async API calls and much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and then finally we'll build a complete &lt;a href="https://www.youtube.com/watch?v=2zaPDfCKAvM"&gt;food ordering app&lt;/a&gt; from scratch with stripe integration for accepting payments and deploy it to the production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/myogeshchavan97"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xG4nnUnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-yellow.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 7, Making Python modules</title>
      <author>Aatmaj</author>
      <pubDate>Thu, 12 Aug 2021 07:36:45 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-7-making-python-modules-kmf</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-7-making-python-modules-kmf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#we-have-learnt-how-to-use-predefined-python-modules-today-we-will-create-our-very-own-python-module-so-put-your-seatbelts-on-for-this-thrilling-python-journey"&gt;
  &lt;/a&gt;
  We have learnt how to use predefined python modules. Today we will create our very own Python module. ü§© So put your seatbelts on for this thrilling Python journeyüöÄ
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#modules-in-python"&gt;
  &lt;/a&gt;
  Modules in Python
&lt;/h3&gt;

&lt;p&gt;Creating a module in Python is a very easy task. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMscObLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gimh5787334irbtozlp6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMscObLU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gimh5787334irbtozlp6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step I&lt;/strong&gt; Make a python file named mymodule.py &lt;em&gt;(or any other name ending with &lt;code&gt;.py&lt;/code&gt;)&lt;/em&gt; which contains various functions. Do this in Python IDLE or any other IDE.
Here is a sample file-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hi"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step II&lt;/strong&gt; Save the python file (or copy-paste the file) in the Lib (not libs) folder of the Python source code.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8SAzllr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0h2lhupyhf1kvi16htj.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qRxyq5qW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lch7es61p6z5h4omr62o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRxyq5qW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lch7es61p6z5h4omr62o.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Step III&lt;/strong&gt; In the file in which you want to use the module, write &lt;code&gt;import mymodule&lt;/code&gt; &lt;em&gt;(import the relevant module name)&lt;/em&gt; After that, just use the functions in the module as predefined functions. Simple !!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the program which uses the functions in our module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt;
&lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Welcome to Python intermediate course!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now save it in a file named 'mymoduletester' and run it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yRZj_8FW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38ckjf3y6kcdx9tiiuhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yRZj_8FW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38ckjf3y6kcdx9tiiuhs.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After we run the file, an output is generated in a command line window.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRr-Dqkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nyx30dz7bw9ptrzucz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRr-Dqkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nyx30dz7bw9ptrzucz9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OUTPUT-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Python 3.10.0a2 (tags/v3.10.0a2:114ee5d, Nov  3 2020, 00:37:42) [MSC v.1927 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
&amp;gt;&amp;gt;&amp;gt; 
= RESTART: C:/Users/aatma/AppData/Local/Programs/Python/Python310/Lib/mymoduletester.py
Welcome to Python intermediate course!
5
hello

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! We have successfully made our own module and used it in our code!ü§ì Cool!üòé&lt;/p&gt;

&lt;p&gt;I have used the IDLE for Python over here, but you are free to use any editor you want. We can have the same effect by using the online GDB compiler as shown below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWojobPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/175gnpj0k8xzvqi8kct2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWojobPq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/175gnpj0k8xzvqi8kct2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;‚úåÔ∏èSo friends that's all for now. üòä Hope you all are having fun.üòé Please let me know in the comment section below üëá. And don't forget to like the post if you did. üòç I am open to any suggestions or doubts. ü§† Just post in the comments below or gmail me. üòâ&lt;br&gt;
Thank you allüëç&lt;/p&gt;

&lt;p&gt;Also please visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt; made especially for this course and don't forget to star it too&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>SQL Series : DataTypes</title>
      <author>Uday Yadav</author>
      <pubDate>Thu, 12 Aug 2021 07:34:20 +0000</pubDate>
      <link>https://dev.to/dev117uday/sql-series-datatypes-13pc</link>
      <guid>https://dev.to/dev117uday/sql-series-datatypes-13pc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#boolean-data"&gt;
  &lt;/a&gt;
  Boolean Data
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TRUE&lt;/li&gt;
&lt;li&gt;FALSE&lt;/li&gt;
&lt;li&gt;NULL&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;TRUE&lt;/th&gt;
&lt;th&gt;FALSE&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TRUE&lt;/td&gt;
&lt;td&gt;FALSE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'true'&lt;/td&gt;
&lt;td&gt;'false'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'t'&lt;/td&gt;
&lt;td&gt;'f'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'yes'&lt;/td&gt;
&lt;td&gt;'no'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'y'&lt;/td&gt;
&lt;td&gt;'n'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;'1'&lt;/td&gt;
&lt;td&gt;'0'&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;booltable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;is_enable&lt;/span&gt; &lt;span class="nb"&gt;BOOLEAN&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;booltable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_enable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'yes'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'t'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;booltable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_enable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'false'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'no'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'f'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;booltable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;booltable&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;is_enable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;booltable&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="n"&gt;is_enable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#character-data"&gt;
  &lt;/a&gt;
  Character Data
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Character Type&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CHARACTER (N), CHAR (N)&lt;/td&gt;
&lt;td&gt;fixed-length, blank padded&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CHARACTER VARYING (N), VARCHAR(N)&lt;/td&gt;
&lt;td&gt;variable length with length limit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TEXT, VARCHAR&lt;/td&gt;
&lt;td&gt;variable unlimited length, max 1GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;n is default to 1
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- INPUT&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CAST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Uday'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- OUTPUT&lt;/span&gt;
&lt;span class="nv"&gt;"Uday      "&lt;/span&gt;

&lt;span class="c1"&gt;-- INPUT&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;'Uday'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- OUTPUT&lt;/span&gt;
&lt;span class="nv"&gt;"Uday      "&lt;/span&gt;

&lt;span class="c1"&gt;-- INPUT&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;'uday'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;-- OUTPUT&lt;/span&gt;
&lt;span class="nv"&gt;"uday"&lt;/span&gt;

&lt;span class="c1"&gt;-- INPUT&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="s1"&gt;'lorem ipsum'&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;-- OUTPUT&lt;/span&gt;
&lt;span class="nv"&gt;"lorem ipsum"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numeric-data"&gt;
  &lt;/a&gt;
  Numeric Data
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Types&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Integers&lt;/td&gt;
&lt;td&gt;whole number, +ve and -ve&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fixed-point, floating point&lt;/td&gt;
&lt;td&gt;for fractions of whole nu&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;size (bytes)&lt;/th&gt;
&lt;th&gt;min&lt;/th&gt;
&lt;th&gt;max&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;smallint&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-32678&lt;/td&gt;
&lt;td&gt;32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-2,147,483,648&lt;/td&gt;
&lt;td&gt;2,147,483,647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bigint&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;-9223372036854775808&lt;/td&gt;
&lt;td&gt;9223372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;size&lt;/th&gt;
&lt;th&gt;range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;smallserial&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1 to 32767&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;serial&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1 to 2147483647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bigserial&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;1 to 9223372036854775807&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#fixed-point-data"&gt;
  &lt;/a&gt;
  Fixed Point Data
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;numeric ( precision , scale ) | decimal ( precision , scale )&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;precision : max number of digits to the left and right of the decimal point&lt;/li&gt;
&lt;li&gt;scale : number of digits allowable on the right of the decimal point&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#floating-point-data"&gt;
  &lt;/a&gt;
  Floating Point Data
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Real&lt;/td&gt;
&lt;td&gt;allows precision to six decimal digits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Double precision&lt;/td&gt;
&lt;td&gt;allows precision to 15 digits points of precision&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;size&lt;/th&gt;
&lt;th&gt;storage type&lt;/th&gt;
&lt;th&gt;Range&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;numeric, decimal&lt;/td&gt;
&lt;td&gt;variable&lt;/td&gt;
&lt;td&gt;fixed point&lt;/td&gt;
&lt;td&gt;131072 digits before decimal point and 16383 digits after the decimal point&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;real&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;floating point&lt;/td&gt;
&lt;td&gt;6 decimal digits precision&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double precision&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;floating point&lt;/td&gt;
&lt;td&gt;15 decimal digits precision&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;table_numbers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;col_numeric&lt;/span&gt; &lt;span class="nb"&gt;numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;col_real&lt;/span&gt; &lt;span class="nb"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;col_double&lt;/span&gt; &lt;span class="nb"&gt;double&lt;/span&gt; &lt;span class="nb"&gt;precision&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;table_numbers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col_numeric&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col_real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;col_double&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;34675&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;34675&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;34675&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2345678910&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2345678910&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2345678910&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- OUTPUT&lt;/span&gt;
&lt;span class="n"&gt;learning&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;table_numbers&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;col_numeric&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;col_real&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;col_double&lt;/span&gt;  
&lt;span class="c1"&gt;------------------+----------+-------------&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;90000&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
     &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;34675&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;34675&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;34675&lt;/span&gt;
     &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;23457&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;234568&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;234567891&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Hierarchical order to SELECT best type : numeric &amp;gt; decimal &amp;gt; float&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#date-time-data"&gt;
  &lt;/a&gt;
  Date Time Data
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;type&lt;/th&gt;
&lt;th&gt;stores&lt;/th&gt;
&lt;th&gt;low&lt;/th&gt;
&lt;th&gt;high&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;date only&lt;/td&gt;
&lt;td&gt;4713 BC&lt;/td&gt;
&lt;td&gt;294276 AD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Time&lt;/td&gt;
&lt;td&gt;time only&lt;/td&gt;
&lt;td&gt;4713 BC&lt;/td&gt;
&lt;td&gt;5874897 AD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Timestamp&lt;/td&gt;
&lt;td&gt;date and time&lt;/td&gt;
&lt;td&gt;4713 BC&lt;/td&gt;
&lt;td&gt;294276 AD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Timestampz&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;date, time and timezone&lt;/td&gt;
&lt;td&gt;4713 BC&lt;/td&gt;
&lt;td&gt;294276 AD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interval&lt;/td&gt;
&lt;td&gt;difference btw time&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#date-type"&gt;
  &lt;/a&gt;
  Date type
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;table_dates&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;employee_name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;hire_date&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;add_date&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_DATE&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;table_dates&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;employee_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hire_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'uday'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'2020-02-02'&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;'another uday'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'2020-02-01'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_dates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;NOW&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#time-type"&gt;
  &lt;/a&gt;
  Time type
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;table_time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;serial&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;class_name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;start_time&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;table_time&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'maths'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'08:00:00'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'08:55:00'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'chemistry'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'08:55:00'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'09:00:00'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_time&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- OUTPUT&lt;/span&gt;

 &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;class_name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt; 
&lt;span class="c1"&gt;---------+------------+------------+----------&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;maths&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;chemistry&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;current_time&lt;/span&gt;    
&lt;span class="c1"&gt;-------------------------&lt;/span&gt;
 &lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;163354&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;current_time&lt;/span&gt;  
&lt;span class="c1"&gt;---------------------&lt;/span&gt;
 &lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;LOCALTIME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;localtime&lt;/span&gt;    
&lt;span class="c1"&gt;----------------------&lt;/span&gt;
 &lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;717509&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="s1"&gt;'12:10'&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="s1"&gt;'04:30'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;RESULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;result&lt;/span&gt;  
&lt;span class="c1"&gt;---------------&lt;/span&gt;
 &lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;-- format : interval 'n type'&lt;/span&gt;
&lt;span class="c1"&gt;-- n = number&lt;/span&gt;
&lt;span class="c1"&gt;-- type : second, minute, hours, day, month, year ....&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIME&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;CURRENT_TIME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;INTERVAL&lt;/span&gt; &lt;span class="s1"&gt;'2 hours'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;RESULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;current_time&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="k"&gt;result&lt;/span&gt;       
&lt;span class="c1"&gt;-------------------------+--------------------&lt;/span&gt;
 &lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;241919&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;09&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;241919&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIME&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;CURRENT_TIME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;INTERVAL&lt;/span&gt; &lt;span class="s1"&gt;'-2 hours'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;RESULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;current_time&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="k"&gt;result&lt;/span&gt;       
&lt;span class="c1"&gt;-------------------------+--------------------&lt;/span&gt;
 &lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;644727&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;644727&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#timestamp-and-timezone"&gt;
  &lt;/a&gt;
  Timestamp and Timezone
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;timestamp&lt;/code&gt; : stores time without time zone&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;timestamptz&lt;/code&gt; : timestamp with time zone , stored using UTC format&lt;/li&gt;
&lt;li&gt;adding timestamp to timestamptz without mentioning the zone will result in server automatically assumes timezone to system's timezone&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Internally, PostgreSQL will store the timezoneaccurately but then OUTPUTting the data, will it be converted according to your timezone&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;pg_timezone_names&lt;/span&gt; 
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'posix/Asia/Calcutta'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;TIMEZONE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Asia/Calcutta'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;NOW&lt;/span&gt;&lt;span class="p"&gt;()::&lt;/span&gt;&lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;now&lt;/span&gt;             
&lt;span class="c1"&gt;---------------------------------&lt;/span&gt;
 &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;971433&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;table_time_tz&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="nb"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;tstz&lt;/span&gt; &lt;span class="n"&gt;timestamptz&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;table_time_tz&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tstz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2020-12-22 10:10:10'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'2020-12-22 10:10:10.009+05:30'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_time_tz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

         &lt;span class="n"&gt;ts&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="n"&gt;tstz&lt;/span&gt;              
&lt;span class="c1"&gt;--------------------------+-------------------------------&lt;/span&gt;
 &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;009&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;current_timestamp&lt;/span&gt;        
&lt;span class="c1"&gt;--------------------------------------&lt;/span&gt;
 &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;54762&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Asia/Singapore'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'2020-01-01 00:00:00'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;timezone&lt;/span&gt;       
&lt;span class="c1"&gt;--------------------------&lt;/span&gt;
 &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#uuid"&gt;
  &lt;/a&gt;
  UUID
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;UUID : Universal Unique Identifier&lt;/li&gt;
&lt;li&gt;PostgreSQL doesn't provide internal function to generate UUID's, use &lt;code&gt;uuid-ossp&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;EXTENSION&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="nv"&gt;"uuid-ossp"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;uuid_generate_v1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

           &lt;span class="n"&gt;uuid_generate_v1&lt;/span&gt;           
&lt;span class="c1"&gt;-------------------------------------------&lt;/span&gt;
 &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;d459e0c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fb3e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="n"&gt;eb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a638&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0242&lt;/span&gt;&lt;span class="n"&gt;ac110002&lt;/span&gt;


&lt;span class="c1"&gt;-- pure randomness&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;uuid_generate_v4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

           &lt;span class="n"&gt;uuid_generate_v4&lt;/span&gt;           
&lt;span class="c1"&gt;-------------------------------------------&lt;/span&gt;
 &lt;span class="mi"&gt;418&lt;/span&gt;&lt;span class="n"&gt;f39e5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;a46&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;da2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="n"&gt;cea&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;884904&lt;/span&gt;&lt;span class="n"&gt;f45d6f&lt;/span&gt;


&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;products_uuid&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;uuid_generate_v1&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;product_name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;products_uuid&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ice cream'&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;'cake'&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;'candies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products_uuid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                  &lt;span class="n"&gt;id&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;product_name&lt;/span&gt; 
&lt;span class="c1"&gt;-------------------------------------------+--------------&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cf1dbe0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fb3e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="n"&gt;eb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a638&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0242&lt;/span&gt;&lt;span class="n"&gt;ac110002&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ice&lt;/span&gt; &lt;span class="n"&gt;cream&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cf1df28&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fb3e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="n"&gt;eb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a638&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0242&lt;/span&gt;&lt;span class="n"&gt;ac110002&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cake&lt;/span&gt;
 &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;cf1df46&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fb3e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="n"&gt;eb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a638&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0242&lt;/span&gt;&lt;span class="n"&gt;ac110002&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;candies&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;products_uuid_v4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;uuid_generate_v4&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;product_name&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;products_uuid_v4&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ice cream'&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;'cake'&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;'candies'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products_uuid_v4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;learning&lt;/span&gt;&lt;span class="o"&gt;=#&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products_uuid_v4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                  &lt;span class="n"&gt;id&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;product_name&lt;/span&gt; 
&lt;span class="c1"&gt;-------------------------------------------+--------------&lt;/span&gt;
 &lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="n"&gt;b74bed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;cf8&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;e26&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="n"&gt;b0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c7c7b2e5f3e7&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ice&lt;/span&gt; &lt;span class="n"&gt;cream&lt;/span&gt;
 &lt;span class="n"&gt;ac563251&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;a95&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;408&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;966&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ed5ecc1f228d&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cake&lt;/span&gt;
 &lt;span class="mi"&gt;1079&lt;/span&gt;&lt;span class="n"&gt;f6d3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b0c3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="n"&gt;ef&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bd2e&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;da4467b63432&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;candies&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hstore"&gt;
  &lt;/a&gt;
  HSTORE
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;stores data in key-value pairs&lt;/li&gt;
&lt;li&gt;key and VALUES are text string only
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;EXTENSION&lt;/span&gt; &lt;span class="n"&gt;IF&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;EXISTS&lt;/span&gt; &lt;span class="n"&gt;hstore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;table_hstore&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;book_info&lt;/span&gt; &lt;span class="n"&gt;hstore&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;table_hstore&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;book_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'Title 1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' "publisher" =&amp;gt; "ABC publisher" , 
    "paper_cost" =&amp;gt; "100" , "e_cost" =&amp;gt; "5.85" '&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_hstore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;title&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;book_info&lt;/span&gt;                              

  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;"e_cost"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;"5.85"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"publisher"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;"ABC publisher"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"paper_cost"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;"100"&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;book_info&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'publisher'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;publisher&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_hstore&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="n"&gt;publisher&lt;/span&gt;   
&lt;span class="c1"&gt;--------------------&lt;/span&gt;
 &lt;span class="n"&gt;ABC&lt;/span&gt; &lt;span class="n"&gt;publisher&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  Json
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;PostgreSQL supports both 

&lt;ul&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;BSON or JSONB ( Binary JSON )&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;JSONB has full support for indexing
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;table_json&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;docs&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;table_json&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'[1,2,3,4,5,6]'&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="s1"&gt;'{"key":"value"}'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;table_json&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'[{"key":"value"},{"key2":"value2"}]'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                &lt;span class="n"&gt;docs&lt;/span&gt;                 
&lt;span class="c1"&gt;---------+-------------------------------------&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;"value"&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;"key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;"value"&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;"key2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;"value2"&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;table_json&lt;/span&gt; &lt;span class="k"&gt;alter&lt;/span&gt; &lt;span class="k"&gt;column&lt;/span&gt; &lt;span class="n"&gt;docs&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;jsonb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_json&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;docs&lt;/span&gt; &lt;span class="o"&gt;@&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'2'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="n"&gt;docs&lt;/span&gt;        
&lt;span class="c1"&gt;---------+--------------------&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;index&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;table_json&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;GIN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt; &lt;span class="n"&gt;jsonb_path_ops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#network-address-data-types"&gt;
  &lt;/a&gt;
  Network Address Data Types
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Storage Size&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cidr&lt;/td&gt;
&lt;td&gt;7 or 19 bytes&lt;/td&gt;
&lt;td&gt;IPv4 and IPv6 networks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inet&lt;/td&gt;
&lt;td&gt;7 or 19 bytes&lt;/td&gt;
&lt;td&gt;IPv4 and IPv6 hosts and networks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macaddr&lt;/td&gt;
&lt;td&gt;6 bytes&lt;/td&gt;
&lt;td&gt;MAC addresses&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macaddr8&lt;/td&gt;
&lt;td&gt;8 bytes&lt;/td&gt;
&lt;td&gt;MAC addresses ( EUI 64-bit )&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;It is better to use these types instead of plain text types of store network address, because  these types offer input error checking and specialised operators and functions&lt;/li&gt;
&lt;li&gt;Supports indexing and advance operations
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;table_netaddr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;inet&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;table_netaddr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'148.77.50.74'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'110.158.172.66'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'176.103.251.175'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'84.84.14.58'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'141.122.225.161'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'78.44.113.33'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'81.236.254.9'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'82.116.85.21'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'54.64.79.223'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'162.240.78.253'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table_netaddr&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;       &lt;span class="n"&gt;ip&lt;/span&gt;        
&lt;span class="c1"&gt;---------+-----------------&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;158&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;176&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;103&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;251&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;175&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;58&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;141&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;122&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;225&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;161&lt;/span&gt;


&lt;span class="k"&gt;SELECT&lt;/span&gt; 
       &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;set_masklen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;inet_24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="n"&gt;set_masklen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cidr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cidr_24&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;set_masklen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cidr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cidr_27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="n"&gt;set_masklen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cidr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cidr_28&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; 
     &lt;span class="n"&gt;table_netaddr&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;inet_24&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cidr_24&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cidr_27&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cidr_28&lt;/span&gt; 

 &lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;74&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;77&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;
 &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;158&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;158&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;158&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;158&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;158&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>database</category>
      <category>postgres</category>
      <category>programming</category>
    </item>
    <item>
      <title>What You Need to Know About VPS Hosting 2021</title>
      <author>Brand Soft Tech</author>
      <pubDate>Thu, 12 Aug 2021 07:26:32 +0000</pubDate>
      <link>https://dev.to/brandsofttech/what-you-need-to-know-about-vps-hosting-3171</link>
      <guid>https://dev.to/brandsofttech/what-you-need-to-know-about-vps-hosting-3171</guid>
      <description>&lt;p&gt;There is no doubt that VPS Hosting 2021 or Virtual Private Server is one of the newest forms of web hosting which has emerged in recent years. In a nutshell, VPS is a type of bridge between dedicated and shared hosting services. As you may know, VPS provide excellent features such as: flexibility, isolation, high level of isolation, dedicated server architecture, separate disk space and bandwidth and easy management. Furthermore, you can get a free VPS today and use it for a reasonable period.&lt;/p&gt;

&lt;p&gt;When it comes to hosting facilities, VPS are very much similar to shared hosting but with added security and privacy. In other words, you can enjoy the benefits of a dedicated hosting but with better features at a lower cost. In simple terms, as a VPS host you can enjoy dedicated resources, separate from other users on the same physical machine. So, in short, you will enjoy more flexibility, separate space and bandwidth as compared with shared hosting.&lt;/p&gt;

&lt;p&gt;Now, as you are aware of all these advantages of VPS hosting, you must be curious to know how VPS will benefit you and your website. To understand the exact benefits, let us have a look at how VPS can improve website performance. &lt;br&gt;
The main reason why VPS hosting is popular among web developers and website owners is because it offers them a great deal of security and reliability. As you might know, VPS offers a lot of advantages over physical dedicated servers. Below you will find some of the most important benefits that VPS hosting provides:&lt;/p&gt;

&lt;p&gt;Flexibility is the main advantage offered by VPS server hosting plans. As already mentioned above, you can easily and affordably separate physical hardware devices such as CPU and RAM from other users on the same server. In other words, you can use as much storage space as you want and you will not be bothered about using up all the available storage space. In this way, you can save a lot of money for expanding your business.&lt;/p&gt;

&lt;p&gt;Another great advantage offered by VPS server hosting is that it provides a great level of isolation and durability &lt;a href="https://www.rfdtv.com/story/44438648/which-vps-technologies-can-be-used-for-transmission&amp;lt;br&amp;gt;%0A"&gt;&lt;/a&gt;&lt;a href="https://www.rfdtv.com/story/44438648/which-vps-technologies-can-be-used-for-transmission"&gt;https://www.rfdtv.com/story/44438648/which-vps-technologies-can-be-used-for-transmission&lt;/a&gt;&lt;br&gt;
. Each individual subscriber can install and configure his own application and websites. Moreover, he can even install or remove third party applications. &lt;/p&gt;

&lt;p&gt;Thus, you do not need to take care of various compatibility issues when it comes to different operating systems, software and storage space. Since you have complete control over everything, you can improve your website loading speed and fix several technical problems that visitors often encounter.&lt;/p&gt;

&lt;p&gt;With VPS hosting, you get the benefits of managed support, which allows you to avail of professional technical assistance at the most affordable price. When it comes to dedicated hosting, you often need to spend a large amount of money just to obtain excellent level of managed support. However, thanks to managed support provided by VPS hosting providers, you do not have to spend such large sums of money anymore.&lt;/p&gt;

&lt;p&gt;When it comes to shared hosting, you are sharing the same physical server with many other users. This will limit your storage space and bandwidth &lt;a href="https://www.ktvn.com/story/44452960/how-does-the-streaming-transmission-technology-works&amp;lt;br&amp;gt;%0A"&gt;&lt;/a&gt;&lt;a href="https://www.ktvn.com/story/44452960/how-does-the-streaming-transmission-technology-works"&gt;https://www.ktvn.com/story/44452960/how-does-the-streaming-transmission-technology-works&lt;/a&gt;&lt;br&gt;
. And so, you will need a huge amount of money to upgrade to a better hosting package. But in VPS, there is no need for upgrading. You can enjoy excellent level of web performance hosting and also enjoy unlimited resources provided by a powerful VPS server.&lt;/p&gt;

&lt;p&gt;Finally, VPS hosting also provides you with virtual private servers. With virtual private servers, you can separate your data from other users in your VPS. And because each computer in your VPS is utilizing its own resource, you can enjoy superior level of internet connectivity. &lt;/p&gt;

&lt;p&gt;Final Words&lt;/p&gt;

&lt;p&gt;Thus, you can increase your website performance hosting and fix multiple technical problems that visitors often encounter. Therefore, it's really a smart choice if you need a reliable web hosting service and if you want to enhance your website's features. To get an idea about different hosting options, you can always search on the Internet.&lt;/p&gt;

</description>
      <category>vpshosting</category>
      <category>vpstechnologies</category>
      <category>vpshost</category>
    </item>
    <item>
      <title>How Does React Work? Brief History - PART 1</title>
      <author>Adam P≈Ç√≥cieniak</author>
      <pubDate>Thu, 12 Aug 2021 07:19:16 +0000</pubDate>
      <link>https://dev.to/hotjar/how-does-react-work-brief-history-part-1-1d12</link>
      <guid>https://dev.to/hotjar/how-does-react-work-brief-history-part-1-1d12</guid>
      <description>&lt;p&gt;&lt;em&gt;The article‚Äôs goal is to shed some light on the framework internals and historical insights standing behind the implementation decision made by the React Team at the time. I assume you are already aware of basic JavaScript / React and JSX concepts. So let‚Äôs kick off with some history first.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs&lt;/strong&gt; &lt;strong&gt;2013&lt;/strong&gt;. The React framework is born (version &lt;a href="https://github.com/facebook/react/blob/master/CHANGELOG.md#030-may-29-2013"&gt;0.3.0&lt;/a&gt; is rolled out to the public) and it‚Äôs immediately loved by the community. It stands out with its simplicity, one-way-data-binding, and - what‚Äôs obvious - declarative API powered by original, attractive to the community syntax extension, JSX.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9sl4Fsoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22vfqxaoii2y7eh2l978.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sl4Fsoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22vfqxaoii2y7eh2l978.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;React‚Äôs JSX representation of an example app&lt;/em&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;The following months and years bring new releases; bugs are fixed, features and improvements are added. The community grows, the tooling ecosystem supporting its development flourishes. &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt; is embraced by mobile native developers, which brings even more popularity to the framework. But there is one thing around the framework that does not change at all. Its internal logic (so-called &lt;strong&gt;Reconciliation Algorithm&lt;/strong&gt;) is responsible for all of the ‚Äúmagic‚Äù - starting from when an application's state changes until direct DOM updates are performed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcDjyfWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl95fqs7tlego1qjyhzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcDjyfWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sl95fqs7tlego1qjyhzp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;Input and output of the Reconciliation algorithm&lt;/em&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Briefly, here‚Äôs how it works:&lt;/p&gt;

&lt;p&gt;(1) Every state change (e.g., clicking ‚ÄúBuy product‚Äù from the &lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u95tpve85arsv6ic2ulh.png"&gt;example application&lt;/a&gt;) forces building a so-called &lt;a href="https://reactjs.org/docs/faq-internals.html#what-is-the-virtual-dom"&gt;Virtual DOM&lt;/a&gt;, representing the current state of the application. It's a structure of components.&lt;/p&gt;

&lt;p&gt;(2) Then, the newly created Virtual DOM tree is compared with a previously generated Virtual DOM tree representing the application‚Äôs state already displayed to a user. Discrepancies between those Virtual DOM structures are simple information, what we should change, e.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;update attribute X for A element,&lt;/li&gt;
&lt;li&gt;remove element B,&lt;/li&gt;
&lt;li&gt;or append element C as a child of element A.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) The information is utilized by separate modules - renderers (for browsers, it‚Äôs react-dom) which applies the minimal set of changes necessary to update UI (the DOM nodes for browsers). &lt;/p&gt;

&lt;p&gt;And that‚Äôs how React works, briefly.&lt;/p&gt;

&lt;p&gt;But how is the Virtual DOM built? If we had to write the function responsible for that on our own, it might look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XuB6s4jG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4pz63acgu3wik90ehko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XuB6s4jG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4pz63acgu3wik90ehko.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;High-Level Pseudocode of React‚Äôs Reconciliation Algorithm&lt;/em&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;The &lt;code&gt;render&lt;/code&gt; function drills down through the entire &lt;strong&gt;React Elements&lt;/strong&gt; structure (Virtual DOM) and &lt;strong&gt;reconciles&lt;/strong&gt; (or works on) every element.&lt;/p&gt;

&lt;p&gt;Let‚Äôs stop for a moment here. What is a React Element? A React Element is a simple building block for our application. It‚Äôs what we return from our components, like &lt;code&gt;&amp;lt;Loader /&amp;gt;&lt;/code&gt; in our &lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u95tpve85arsv6ic2ulh.png"&gt;example application&lt;/a&gt;. It‚Äôs worth mentioning that React Elements are not DOM Elements. Whenever I refer to an ‚Äúelement‚Äù below in the article, I mean React Element. If we talk about DOM elements, I will explicitly use the ‚ÄúDOM‚Äù to avoid misunderstanding. &lt;/p&gt;

&lt;p&gt;Back to the &lt;strong&gt;reconciliation&lt;/strong&gt;. Reconciling here means doing some element-related work. For component elements, it includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Invoking the &lt;code&gt;render()&lt;/code&gt; method (for class-based components) or calling functional component‚Äôs function reference with given props,&lt;/li&gt;
&lt;li&gt;managing internal state,&lt;/li&gt;
&lt;li&gt;invoking Lifecycle Methods (e.g., &lt;code&gt;getDerrivedState&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;marking changes that need to be applied later on,&lt;/li&gt;
&lt;li&gt;and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By calling &lt;code&gt;render(&amp;lt;App /&amp;gt;)&lt;/code&gt; (I recommend getting familiar with our &lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u95tpve85arsv6ic2ulh.png"&gt;example application&lt;/a&gt; specified above, we will use this structure later on), we re-create the tree structure from top to bottom, using &lt;code&gt;render&lt;/code&gt; function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting from &lt;code&gt;render(App)&lt;/code&gt;, we work on the &lt;code&gt;App&lt;/code&gt; component,&lt;/li&gt;
&lt;li&gt;then we have some work to do with its child (&lt;code&gt;Content&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;then with its child‚Äôs children: &lt;code&gt;Loader&lt;/code&gt;, &lt;code&gt;Product&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;and so on, until we reach the last leaf of the structure of the elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs 2016&lt;/strong&gt;. Everyone is celebrating the framework's 3rd birthday (version &lt;a href="https://github.com/facebook/react/blob/master/CHANGELOG.md#1500-april-7-2016"&gt;15.0.0&lt;/a&gt; is released), but its parents (&lt;a href="https://reactjs.org/community/team.html"&gt;React Core Team&lt;/a&gt; with its lead, &lt;a href="https://reactjs.org/community/team.html#sebastian-markbage"&gt;Sebastian Markb√•ge&lt;/a&gt; - we will talk about him later in the article) are slightly worried about the future of the framework. But is there a reason to be concerned?&lt;/p&gt;

&lt;p&gt;It appears that the React has some ‚Äúinnate heart disease‚Äù, which limits its organic growth. Let‚Äôs have a brief look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XuB6s4jG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4pz63acgu3wik90ehko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XuB6s4jG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4pz63acgu3wik90ehko.png" alt="image"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3b7tF5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh50bbazr5smdhhhob7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3b7tF5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh50bbazr5smdhhhob7c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;High-Level pseudocode of React‚Äôs core algorithm function vs. Fibonacci function&lt;/em&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;What‚Äôs common among &lt;code&gt;render()&lt;/code&gt; and &lt;code&gt;fib()&lt;/code&gt; functions?&lt;/p&gt;

&lt;p&gt;You‚Äôre right. It's a &lt;strong&gt;recursion&lt;/strong&gt;. The heart of the React framework relies strongly on recursion. But is it a problem at all?&lt;/p&gt;

&lt;p&gt;Web browsers are equipped with a single thread. We can do one operation at a time, so React operates in a limited environment. Although computing &lt;code&gt;fib(4)&lt;/code&gt; is not a challenge at all, computing &lt;code&gt;fib(4000)&lt;/code&gt; definitely is. Same for the Reconciliation Algorithm - building a Virtual DOM based on a thousand elements is a real challenge. Synchronous code execution blocks the main thread, so JavaScript‚Äôs event loop has to wait until the end of execution. During that time, none of the following activities can be performed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User input (e.g., handling user click event callback)&lt;/li&gt;
&lt;li&gt;Animations, layout calculations, repaints&lt;/li&gt;
&lt;li&gt;Handle incoming data (HTTP, WebSocket)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a brilliant talk about event loop &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;here&lt;/a&gt;, so if you are not familiar with it or need a refresher, it‚Äôs definitely worth watching.&lt;/p&gt;

&lt;p&gt;Let‚Äôs talk now about the JS Stack; how does it look for both the &lt;code&gt;fib&lt;/code&gt; and &lt;code&gt;render&lt;/code&gt; functions?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2svvgCbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnzfdehu9062vzyhc7rf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2svvgCbb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnzfdehu9062vzyhc7rf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;Fibonacci function stack frames vs. Render function stack frames&lt;/em&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;The JS Stack grows as we move deeper in the structure, so the process simply can‚Äôt be paused because there is no straightforward way to do that in a recursion. &lt;strong&gt;We reconcile all of the elements in one shot or none at all&lt;/strong&gt;. What‚Äôs more, React's computation output is pushed onto the JS stack, so it's ditched immediately after the &lt;code&gt;render&lt;/code&gt; function returns. There is no way to reuse this work later on if it‚Äôs needed.&lt;/p&gt;

&lt;p&gt;Imagine a case of a heavy application with a massive number of components. We are in the middle of the Reconciliation Algorithm, and a user clicks a button. Such action is critical from a UX standpoint and should be handled immediately. But what happens?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clicking dispatches a DOM event. &lt;/li&gt;
&lt;li&gt;The event callback lands in a queue and waits (until the JS Stack is empty) to be processed.&lt;/li&gt;
&lt;li&gt;But the JS stack is ‚Äúoverwhelmed‚Äù by heavy React-related work, so the event callback waits‚Ä¶, waits, and waits for its turn until the Reconciliation Algorithm is done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/QBd2kLB5qDmysEXre9/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QBd2kLB5qDmysEXre9/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;(&lt;a href="https://i.giphy.com/media/QBd2kLB5qDmysEXre9/giphy.gif"&gt;source&lt;/a&gt;)&lt;/em&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;There is an excellent &lt;a href="https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle"&gt;Sierpinski triangle&lt;/a&gt; example &lt;a href="https://github.com/adasq/react-fiber-vs-stack-demo"&gt;application&lt;/a&gt; on Github. It is a more tangible showcase of the problem. Keep in mind that it‚Äôs 2016, so the application is built on top of React 15.x. Here is how the application looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NxNKbvVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw9vj90yygensayk763p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NxNKbvVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aw9vj90yygensayk763p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;Sierpinski triangle example application view&lt;/em&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Each dot is a component displaying a number. Among state updates, there are a lot of other computations, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;animations (layout computations, painting), &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/claudiopro/react-fiber-vs-stack-demo/blob/master/stack.html#L93-L99"&gt;deliberate delays&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;a whole bunch of artificial and pointless &lt;a href="https://github.com/claudiopro/react-fiber-vs-stack-demo/blob/master/stack.html#L134-L139"&gt;state changes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these simulate a heavy application. And &lt;a href="https://claudiopro.github.io/react-fiber-vs-stack-demo/stack.html"&gt;here&lt;/a&gt; is the application. Pretty sluggish, huh? Here‚Äôs how the top of the JS Stack looks like (I recommend watching this &lt;a href="https://youtu.be/Jb4X4hyaUCs"&gt;short video&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5gCncPgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wijrareaznmkbphhtapp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gCncPgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wijrareaznmkbphhtapp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;React 15.x JS Stack&lt;/em&gt;&lt;/center&gt;
&lt;img src="https://i.giphy.com/media/KSJ8UkuKHLmvK/giphy.gif" alt=""&gt;&lt;center&gt;&lt;em&gt;(&lt;a href="https://i.giphy.com/media/KSJ8UkuKHLmvK/giphy.gif"&gt;source&lt;/a&gt;)&lt;/em&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;A synchronous and time-consuming function (in the Sierpinski‚Äôs triangle example, for my equipment, each ‚ÄúTask‚Äù takes ~300ms) reconciles the entire application from the top to the bottom of the elements tree, no matter what. &lt;/p&gt;

&lt;p&gt;The framework here is relentless. It overwhelms the main thread, which can‚Äôt perform any other types of work (animations, user‚Äôs input). It introduces a significant impact on the browser‚Äôs performance. It‚Äôs hard to build on the top of such architecture, isn‚Äôt it?&lt;/p&gt;

&lt;p&gt;And this is a huge limitation for the React Team. &lt;/p&gt;

&lt;p&gt;Of course, this is an example application built to show the problem. But we can quickly observe such pitfalls when the number of components grows in our real-world applications. Long and heavy lists are a perfect example here. It‚Äôs also why the helper libraries, like &lt;a href="https://github.com/bvaughn/react-virtualized"&gt;react-virtualized&lt;/a&gt; (or its lightweight version, &lt;a href="https://github.com/bvaughn/react-window"&gt;react-window&lt;/a&gt;), emerged and gained noticeable popularity by supporting the framework. Those libraries are &lt;a href="https://reactjs.org/docs/optimizing-performance.html#virtualize-long-lists"&gt;officially recommended&lt;/a&gt; on React docs pages.&lt;/p&gt;

&lt;p&gt;It‚Äôs also worth noticing that React is clever enough, and implements caching, exposes the keys API, introduces some trade-offs to reinforce performance which is a real deal, but still - it‚Äôs not enough to move forward (If you are interested in in-depth details of the algorithm, visit official docs &lt;a href="https://reactjs.org/docs/implementation-notes.html"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In the next part, I will explain what approach the React Team took to address those limitations.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>fiber</category>
    </item>
    <item>
      <title>Astro recipe collection website - Part 1 Setup collections</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 12 Aug 2021 07:03:59 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/astro-recipe-collection-website-part-1-setup-collections-245k</link>
      <guid>https://dev.to/dailydevtips1/astro-recipe-collection-website-part-1-setup-collections-245k</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Note: Update 12-08-2021: Rewrite collections to Astro dynamic routing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My wife is a &lt;a href="https://www.chefnicoleshort.com/"&gt;chef&lt;/a&gt; for those who don't know, so she has many recipes.&lt;br&gt;
I thought it would be cool to convert these to a digital cookbook.&lt;/p&gt;

&lt;p&gt;And what better to use than Astro?&lt;/p&gt;

&lt;p&gt;What we'll learn today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dynamic routing in Astro&lt;/li&gt;
&lt;li&gt;Pagination collections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the end of the article, we will have a functional website that doesn't look pretty yet, but we know how the dynamic routes in Astro work.&lt;/p&gt;

&lt;p&gt;In another article, we'll work on the following extra elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Latest five recipes on the homepage&lt;/li&gt;
&lt;li&gt;Category filtered pages&lt;/li&gt;
&lt;li&gt;Styling our recipe website&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-data-set"&gt;
  &lt;/a&gt;
  Setting up the data set
&lt;/h2&gt;

&lt;p&gt;Let's start by setting up a new Astro project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;astro-recipe &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
npm init astro@next
npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: This article uses the next version of Astro as this will be the new way of using collections. This article will be updated once this is merged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we'll go ahead and create our sets of data.&lt;/p&gt;

&lt;p&gt;Before we create anything, let me explain the architecture and routing of Astro. By default, Astro will render all pages inside the &lt;code&gt;pages&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;We always have an &lt;code&gt;index.astro&lt;/code&gt; file as our starting homepage in our default installation.&lt;/p&gt;

&lt;p&gt;What we want to add next are single recipe pages. In my case, I want them to have the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;domain.com/recipe/recipe-slug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To achieve this structure, we need to place a &lt;code&gt;recipe&lt;/code&gt; folder inside the &lt;code&gt;pages&lt;/code&gt; folder in Astro.&lt;/p&gt;

&lt;p&gt;Inside that folder, we can create our recipe markdown files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDvraFiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628754991888/IANxJKhL7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDvraFiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628754991888/IANxJKhL7.png" alt="Astro dynamic routing structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Markdown files can have Frontmatter keys. This is a special set of data that sits on the top of your file in &lt;code&gt;---&lt;/code&gt; instances.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can see the &lt;code&gt;---&lt;/code&gt; as a code fence, which can evaluate the code inside&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An example of a recipe will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---
layout: '../../layouts/recipe.astro'
title: Classic Roast Chicken
meal_type: Dinner
course: Roast
diet: Healthy
main_ingredient: Meat and chicken
date: 2021-08-05
image: /images/classic-roast-chicken.jpg
---

# Markdown flavored recipe content
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you see all the content between the three dashes? This is what defines our variables.&lt;br&gt;
This will be useful later on.&lt;/p&gt;

&lt;p&gt;In our case, we defined some types to later filter on and an image to make it more appealing.&lt;/p&gt;

&lt;p&gt;Another important thing to note is that we defined the layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../layouts/recipe.astro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Astro what file to render this markdown in.&lt;/p&gt;

&lt;p&gt;We can create the &lt;code&gt;recipe.astro&lt;/code&gt; in a &lt;code&gt;layout&lt;/code&gt; folder.&lt;br&gt;
The file will have the following content.&lt;/p&gt;

&lt;p&gt;Below you will see the part where we can retrieve the content from the Astro props.&lt;br&gt;
This is Astro's way of parsing data from the markdown file to the layout file we associated it with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!--&lt;/span&gt;&lt;span class="na"&gt;HTML&lt;/span&gt; &lt;span class="na"&gt;Content&lt;/span&gt;&lt;span class="err"&gt;--&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"500px"&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"article"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"posts"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/recipes"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;All Recipes&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A super basic rendering, as it will show the title, an image, and the content.&lt;/p&gt;

&lt;p&gt;Now we can run Astro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and visit your URL, which looks similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://localhost:3000/recipe/classic-roast-chicken
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will render the following view:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BY6a9o89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628162264577/lum4jP5tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BY6a9o89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628162264577/lum4jP5tj.png" alt="Astro collection single page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-main-recipe-collection-page"&gt;
  &lt;/a&gt;
  Creating the main recipe collection page
&lt;/h2&gt;

&lt;p&gt;It's pretty cool that we have individual pages, but we have no way to show them on one big overview page.&lt;/p&gt;

&lt;p&gt;Let's go ahead and create such an overview page.&lt;br&gt;
We'll use a pagination collection, where our page shows five recipes per page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Click here for more information on the &lt;a href="https://astro-docs-git-wip-fbr-pikapkg.vercel.app/core-concepts/routing#dynamic-routes"&gt;Astro Dynamic Routing&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To create a collection page in Astro, we must create a file that's wrapped in brackets. Since our collection should be &lt;code&gt;recipes&lt;/code&gt;, we must first make a &lt;code&gt;recipes&lt;/code&gt; folder in our &lt;code&gt;pages&lt;/code&gt; folder.&lt;br&gt;
Inside that we can create a &lt;code&gt;[...page].astro&lt;/code&gt; folder.&lt;br&gt;
The three dots will make sure we can use the blank URL and paginated URLs.&lt;/p&gt;

&lt;p&gt;Let's start by making this file a collection of our recipe files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticPaths&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allRecipes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./../recipe/*.md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localeCompare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allRecipes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the bare minimum. We need to have a pagination recipe overview.&lt;br&gt;
We use the &lt;code&gt;getStaticPaths&lt;/code&gt; as this is the default export function for dynamic routing in Astro.&lt;br&gt;
Inside this function, we define all our recipes sorted by date.&lt;/p&gt;

&lt;p&gt;Then we return a paginate object containing these recipes and the amount per page.&lt;br&gt;
Astro will now take care of the logic and page creation for us.&lt;/p&gt;

&lt;p&gt;To render these recipes, we can use the following HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Pagination Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;All recipes&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    {page.data.map((recipe) =&amp;gt; (
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{recipe.url}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{recipe.title}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    ))}
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will render the following screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OzSGJ5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628163425639/A8VqRMQ-9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OzSGJ5K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628163425639/A8VqRMQ-9.png" alt="Astro collection render"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty good, but how do we now get to the following page with five more recipes?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Page {page.current} / {page.last}&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"prev"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{page.url.prev&lt;/span&gt; &lt;span class="err"&gt;||&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;#&lt;/span&gt;&lt;span class="err"&gt;'}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Prev&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
     |
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{page.url.next&lt;/span&gt; &lt;span class="err"&gt;||&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="na"&gt;#&lt;/span&gt;&lt;span class="err"&gt;'}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Next&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes! The Astro dynamic routing keeps track of all the logic for us, using several amazing properties on our collection.&lt;/p&gt;

&lt;p&gt;We want to show which page the user is on now and the total page count. And display navigation links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VpuglFRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628163599739/mvRYJd-qF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VpuglFRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628163599739/mvRYJd-qF.png" alt="Astro pagination"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it for today's article. In the following article, we start working on how to show the last five recipes on our homepage.&lt;/p&gt;

&lt;p&gt;If you want to check out today's code, you can find that on the following &lt;a href="https://github.com/rebelchris/astro-recipe-website/tree/part-1-setup"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>astro</category>
    </item>
    <item>
      <title>The Developers Guide To Scaling Rails Apps</title>
      <author>DevGraph</author>
      <pubDate>Thu, 12 Aug 2021 06:27:05 +0000</pubDate>
      <link>https://dev.to/devgraph/the-developers-guide-to-scaling-rails-apps-3kln</link>
      <guid>https://dev.to/devgraph/the-developers-guide-to-scaling-rails-apps-3kln</guid>
      <description>&lt;p&gt;By Ravi Duddukuru&lt;/p&gt;

&lt;p&gt;From Airbnb to Zendesk, a ton of really great apps were built using the Ruby programming language and the Rails web framework. Albeit a less popular option than other front-end frameworks such as React, Angular, and Vuejs, Rails still holds substantial merit in modern software development.&lt;/p&gt;

&lt;p&gt;Ruby on Rails (RoR) is open-source, well-documented, fiercely maintained, and constantly extended with new Gems ‚Äî community-created open-source libraries, serving as ‚Äúshortcuts‚Äù for standardized configuration and distribution of Ruby code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rubygems.org/gems/rails/versions/4.2.6"&gt;Rails&lt;/a&gt; is arguably the biggest RoR gem of them all ‚Äî a full-stack server-side web application framework that is easy to customize and scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-rails-a-quick-refresher"&gt;
  &lt;/a&gt;
  What is Rails? A Quick Refresher
&lt;/h2&gt;

&lt;p&gt;Rails was built on the premises of Model-View-Controller (MVC) architecture.&lt;/p&gt;

&lt;p&gt;This means each Rails app has three interconnected layers, accountable for a respective set of actions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model: A data layer, housing the business logic of the app&lt;/li&gt;
&lt;li&gt;Controller: The ‚Äúbrain center‚Äù, handling application functions&lt;/li&gt;
&lt;li&gt;View: Defines graphical user interfaces (GUIs) and UI performance&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In essence, the model layer establishes the required data structure and contains codes needed to process the incoming data in HTML, PDF, XML, RSS, and other formats. The model layer then communicates updates to the View, which updates the GUI. The controller, in turn, interacts both with models and views. For instance, when receiving an update from a view, it notifies the model on how to process it. At the same time, it can update the view too on how to display the result for the user.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kjKoSZDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53rjyu4frzxjplxyegp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kjKoSZDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53rjyu4frzxjplxyegp7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
(Basic Rails app architecture. Image source: &lt;a href="https://medium.com/the-renaissance-developer/ruby-on-rails-http-mvc-and-routes-f02215a46a84"&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The underlying MVC architecture lends several important advantages to Rails:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Parallel development capabilities ‚Äî one developer can work on View, while others handle the model subsystem. The above also makes Ruby on Rails a popular choice for rapid application development (RAD) methodology.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Reusable code components ‚Äî controllers, views, and models can be packaged to share and reuse across several features with relative ease. When done right, this results in cleaner, more readable code, as well as faster development timelines. Also, Ruby on Rails is built on the DRY principle (don‚Äôt repeat yourself), prompting more frequent code reuse for monotonous functions. &lt;/p&gt;

&lt;p&gt;‚Ä¢ Top security ‚Äî the framework has a host of built-in security-centric features such as protection against SQL injections and XSS attacks, among others. Moreover, there‚Äôs plenty of community-shipped gems addressing an array of common and emerging cybersecurity threats.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Strong scalability potential ‚Äî there‚Äôs a good reason why jumbo-sized web apps such as GitHub, Twitch, and Fiverr are built on Rails. Because it scales well when the overall app architecture and deployment strategy are done right. In fact, one of the oldest Rails apps, Shopify, scales to &lt;a href="https://shopify.engineering/write-fast-code-ruby-rails"&gt;processing millions of requests per minute&lt;/a&gt; (RPM).&lt;/p&gt;

&lt;p&gt;In spite of this, many Rails guides still make the arbitrary claim that &lt;a href="https://blog.engineyard.com/5-tips-to-scale-your-ruby-on-rails-application?__hstc=246083099.02435147c8312a5a70348baf53225dcd.1624856368348.1628688292983.1628744259081.56&amp;amp;__hssc=246083099.2.1628744259081&amp;amp;__hsfp=1414547400"&gt;Rails apps are hard to scale&lt;/a&gt;. Are these true? Not entirely, as this post will showcase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-common-problems-with-scaling-rails-apps"&gt;
  &lt;/a&gt;
  3 Common Problems With Scaling Rails Apps
&lt;/h2&gt;

&lt;p&gt;The legacy lore once told that scaling Rails apps is like passing a camel through the eye of a needle ‚Äî exasperating and exhausting. &lt;/p&gt;

&lt;p&gt;To better understand where these concerns are coming from, let‚Äôs first recap what scalability is for web apps. &lt;/p&gt;

&lt;p&gt;Scalability indicates the application‚Äôs architectural capability to handle more user requests per minute (RPM) in the future. &lt;/p&gt;

&lt;p&gt;The keyword here is ‚Äúarchitecture‚Äù, as your choices of infrastructure configuration, connectivity, and overall layout are determinants to the entire system‚Äôs ability to scale. The framework(s) or programming languages you use will only have a marginal (if any) impact on the scalability. &lt;/p&gt;

&lt;p&gt;In the case of RoR, developers, in fact, get a slight advantage as the framework promotes clean, modular code that is easy to integrate with more database management systems. Moreover, adding &lt;a href="https://www.devgraph.com/2020/10/09/what-is-a-load-balancer-definition-explanation/?utm_source=EngineYard"&gt;load balancers&lt;/a&gt; for processing a higher number of requests is relatively easy too. &lt;/p&gt;

&lt;p&gt;Yet, the above doesn‚Äôt fully eradicate scaling issues on Rails. Let‚Äôs keep it real: any app is hard to scale when the underlying infrastructure is subpar.  &lt;/p&gt;

&lt;p&gt;Specifically, Ruby scaling issues often pop up due to:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Poor database querying&lt;br&gt;
‚Ä¢ Inefficient indexing&lt;br&gt;
‚Ä¢ Lack of logging and monitoring &lt;br&gt;
‚Ä¢ Subpar database engine selection &lt;br&gt;
‚Ä¢ Sluggish caching&lt;br&gt;
‚Ä¢ Overly complex and spaghetti code&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overengineered-app-architecture"&gt;
  &lt;/a&gt;
  Over-Engineered App Architecture
&lt;/h3&gt;

&lt;p&gt;RoR supports multi-threading. This means the Rails framework can handle concurrent processing of different parts of code. &lt;/p&gt;

&lt;p&gt;On the one hand, multi-threading is an advance since it enables you to use CPU time wiser and ship high-performance apps. &lt;/p&gt;

&lt;p&gt;At the same time, however, the cost of context switching between different threads in highly complex apps can get high. Respectively, performance starts lagging at some point.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-cope"&gt;
  &lt;/a&gt;
  &lt;em&gt;How to Cope&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;By default, Ruby on Rails prioritizes clean, reusable code. Making your Rails app architecture overly complex (think too custom) indeed can lead to performance and scalability issues. &lt;/p&gt;

&lt;p&gt;This was the case with Twitter circa 2007. &lt;/p&gt;

&lt;p&gt;The team developed a Twitter UI prototype on Rails and then decided to further code the back-end on Rails too. And they decided to build a fully custom, novel back-end from scratch rather than modifying some tested components. Unsurprisingly, their product behaved weirdly and times and scaling it was challenging, as the team admitted in a &lt;a href="https://www.slideshare.net/Blaine/scaling-twitter/6-Its_Easy_Really1_Realize_Your"&gt;presentation&lt;/a&gt;. They ended up with a ton of issues when partitioning databases because their code was overly complex and bloated.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXrMvpnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evmeehohyzs8phfezsi9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXrMvpnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evmeehohyzs8phfezsi9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Image Source: &lt;a href="https://www.slideshare.net/Blaine/scaling-twitter/28-MemCache"&gt;SlideShare&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interestingly, at the same time, another high-traffic Rails web app called Penny Arcade was doing just fine. Why? Because it had no funky overly-custom code, had clearly mapped dependencies, and hailed well with connected databases. &lt;/p&gt;

&lt;p&gt;Remember: Ruby supports multi-processing within apps. In some cases, &lt;a href="https://naturaily.com/blog/multiprocessing-in-ruby"&gt;multi-process apps&lt;/a&gt; can perform better than multi-thread ones. But the trick with processes is that they consume more memory and have more complex dependencies. If you inadvertently kill a parent process, children processes will not get informed about the termination and thus, turn into sluggish ‚Äúzombie‚Äù processes. This means they‚Äôll keep running and consume resources. So watch out for those!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suboptimal-database-setup"&gt;
  &lt;/a&gt;
  Suboptimal Database Setup
&lt;/h3&gt;

&lt;p&gt;In the early days, Twitter had intensive write workloads and poorly organized read patterns, which were non-compatible with database sharding. &lt;/p&gt;

&lt;p&gt;At present, a lot of Rails developers are still skimming on coding proper database indexes and triple-checking all queries for redundant requests. Slow database queries, lack of caching, and tangled database indexes can throw any good Rails app off the rails (pun intended).&lt;/p&gt;

&lt;p&gt;Sometimes, complex database design is also part of deliberate decisions, as was the case with one of &lt;a href="https://resources.engineyard.com/penny-pop-case-study?__hstc=246083099.02435147c8312a5a70348baf53225dcd.1624856368348.1628688292983.1628744259081.56&amp;amp;__hssc=246083099.2.1628744259081&amp;amp;__hsfp=1414547400"&gt;our clients, PennyPop&lt;/a&gt;. To store app data, the team set up an API request to the Rails application. The app itself then stores the data inside DynamoDB and sends a response back to the app. Instead of ActiveRecord, the team created their own data storage layer to enable communication between the app and DynamoDB. &lt;/p&gt;

&lt;p&gt;But the issue they ran into is that DynamoDB has limits on how much information can be stored in one key. This was a technical deal-breaker, but the dev team came up with an interesting workaround ‚Äî compressing the value of the key to a payload of base64 encoded data. Doing so has allowed the team to exchange bigger records between the app and the database without compromising the user experience or app performance. &lt;/p&gt;

&lt;p&gt;Sure, the above operation requires more CPU. But since they are using &lt;a href="https://www.engineyard.com/?__hstc=246083099.02435147c8312a5a70348baf53225dcd.1624856368348.1628688292983.1628744259081.56&amp;amp;__hssc=246083099.2.1628744259081&amp;amp;__hsfp=1414547400"&gt;Engine Yard&lt;/a&gt; to help manage and optimize other infrastructure, these costs remain manageable.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-cope"&gt;
  &lt;/a&gt;
  &lt;em&gt;How to Cope&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Granted, there are many approaches to improving Rails database performance. Deliberate caching and database partitioning (sharding) is one of the common routes as your app grows more complex. &lt;/p&gt;

&lt;p&gt;What‚Äôs even better is that you have a ton of great solutions for resolving RoR database issues, such as:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Redis ‚Äî an open-source in-memory data structure store for Rails apps.&lt;/p&gt;

&lt;p&gt;‚Ä¢ ActiveRecord ‚Äî a database querying tool standardizing access to popular databases with built-in caching capabilities.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Memcached ‚Äî distributed memory caching system for Ruby on Rails.&lt;/p&gt;

&lt;p&gt;The above three tools can help you sufficiently shape up your databases to tolerate extra-high loads. &lt;/p&gt;

&lt;p&gt;Moreover, you can:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Switch to UUIDs over standard IDs for principle keys as your databases grow more complex. &lt;/p&gt;

&lt;p&gt;‚Ä¢ Try other ORM alternatives to ActiveRecord when your DBs get extra-large. Some good ones include Sequel, DataMapper, and ORM Adapter. &lt;/p&gt;

&lt;p&gt;‚Ä¢ Use database profiling gems to diagnose and detect speed and performance issues early on. Popular ones are rack-mini-profiler, bullet, rails_panel, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#insufficient-server-bandwidth"&gt;
  &lt;/a&gt;
  Insufficient Server Bandwidth
&lt;/h3&gt;

&lt;p&gt;The last problem is basic but still pervasive. You can‚Äôt accelerate your Rails apps to millions of RPMs if you lack resources.&lt;/p&gt;

&lt;p&gt;Granted, with cloud computing, provisioning extra instances is a matter of several clicks. Yet, you still need to understand and account for:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Specific apps/subsystems requirements for extra resources&lt;/p&gt;

&lt;p&gt;‚Ä¢ &lt;a href="https://www.devgraph.com/2021/05/26/cloud-cost-optimization-10-lessons-learned-from-scanning-45k-aws-accounts/"&gt;Cloud computing costs&lt;/a&gt; (aka the monetary tradeoff for speed)&lt;/p&gt;

&lt;p&gt;Ideally, you need tools to constantly scan your systems and identify cases of slow performance, resources under (and over)-provisioning, as well as overall performance benchmarks for different apps. &lt;/p&gt;

&lt;p&gt;Not having such is like driving without a speedometer: You rely on a hunch to determine if you are going too slow or deadly fast.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-cope"&gt;
  &lt;/a&gt;
  &lt;em&gt;How to Cope&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;One of the &lt;a href="https://blog.engineyard.com/10-lessons-learned-from-building-engine-yards-container-platform-on-kubernetes?__hstc=246083099.02435147c8312a5a70348baf53225dcd.1624856368348.1628688292983.1628744259081.56&amp;amp;__hssc=246083099.2.1628744259081&amp;amp;__hsfp=1414547400"&gt;lessons we learned when building and scaling Engine Yard&lt;/a&gt; on Kubernetes was that the container platform sets no default resource limits for hosted containers. Respectively, your apps can consume unlimited CPU and memory, which can create ‚Äúnoisy neighbor‚Äù situations, where some apps rack up too many resources and drag down the performance of others. &lt;/p&gt;

&lt;p&gt;The solution: Orchestrate your containers from the get-go. Use Kubernetes Scheduler to right-size nodes for the pods, limit maximum resource allocation, plus define pod preemption behavior. &lt;/p&gt;

&lt;p&gt;Moreover, if you are running containers, always set up your own logging and monitoring since there are no out-of-the-box solutions available. Adding Log Aggregation to Kubernetes provides extra visibility into your apps‚Äô behavior. &lt;/p&gt;

&lt;p&gt;In our case, we use:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Fluent Bit for distributed log collection&lt;/p&gt;

&lt;p&gt;‚Ä¢ Kibana + Elasticsearch for log analysis&lt;/p&gt;

&lt;p&gt;‚Ä¢ Prometheus + Grafana for metrics alerting and visualization&lt;/p&gt;

&lt;p&gt;To sum up: The key to ensuring scalability is weeding out the lagging modules and optimizing different infrastructure and architecture elements individually for a greater cumulative good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scaling-rails-apps-two-main-approaches"&gt;
  &lt;/a&gt;
  Scaling Rails Apps: Two Main Approaches
&lt;/h2&gt;

&lt;p&gt;Similar to others, Rails apps scale in two ways ‚Äî vertically and horizontally. &lt;/p&gt;

&lt;p&gt;Both approaches have their merit in respective cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vertical-scaling"&gt;
  &lt;/a&gt;
  Vertical Scaling
&lt;/h3&gt;

&lt;p&gt;Vertical scaling, i.e., provisioning more server resources to an app, can increase the number of RPMs. The baseline premises are the same as for other frameworks. You add extra processors, RAM, etc., until it is technically feasible and makes financial sense. Understandably, vertical scaling is a temp ‚Äúpatch‚Äù solution. &lt;/p&gt;

&lt;p&gt;Scaling Rails apps vertically makes sense to accommodate linear or predictable growth since cost control will be easy too. Also, vertical scaling is a good option for upgrading database servers. After all, slow databases can be majorly accelerated when placed on better hardware. &lt;/p&gt;

&lt;p&gt;Hardware is the obvious limitation to vertical scaling. But even if you are using cloud resources, still scaling Rails apps vertically can be challenging. &lt;/p&gt;

&lt;p&gt;For example, if you plan to implement Vertical Pod Autoscaling (VPA) on Kubernetes, it accounts for several limitations. &lt;/p&gt;

&lt;p&gt;During our experiments with scaling Ruby apps, we found that: &lt;/p&gt;

&lt;p&gt;‚Ä¢ VPA is a rather disruptive method since it busts the original pod and then recreates its vertically scaled version. This can cause much havoc.&lt;/p&gt;

&lt;p&gt;‚Ä¢ You cannot pair VPA with Horizontal Pod Autoscaling.&lt;/p&gt;

&lt;p&gt;So it‚Äôs best to prioritize horizontal scaling whenever you can.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#horizontal-scaling"&gt;
  &lt;/a&gt;
  Horizontal Scaling
&lt;/h3&gt;

&lt;p&gt;Horizontal scaling, i.e., redistributing your workloads across multiple servers, is a more future-proof approach to scaling Rails apps. &lt;/p&gt;

&lt;p&gt;In essence, you convert your apps in a three-tier architecture featuring:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Web server and load balancer for connected apps &lt;br&gt;
‚Ä¢ Rails app instances (on-premises or in the cloud)&lt;br&gt;
‚Ä¢ Database instances (also local or cloud-based)&lt;/p&gt;

&lt;p&gt;The main idea is to distribute loads across different machines to obtain optimal performance equitably. &lt;/p&gt;

&lt;p&gt;To effectively reroute Rails processes across server instances, you must select the optimal web server and load balancing solution. Then right-size instances to the newly decoupled workloads. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#load-balancing"&gt;
  &lt;/a&gt;
  &lt;em&gt;Load balancing&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Load balancers are the key structural element for scale-out architecture. Essentially, they perform a routing function and help optimally distribute incoming traffic across connected instances. &lt;/p&gt;

&lt;p&gt;Most cloud computing services come with native software load balancing solutions (think &lt;a href="https://aws.amazon.com/elasticloadbalancing/"&gt;Elastic Load Balancing&lt;/a&gt; on AWS). Such solutions also support dynamic host port mapping. This helps establish a seamless pairing between registered web balancers and container instances.  &lt;/p&gt;

&lt;p&gt;When it comes to Rails apps, the two most common options are using a combo of web servers and app servers (or a fusion service) to ensure optimal performance.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Web servers transfer the user request to your website and then pass it to a Rails app (if applicable). Essentially, they filter out unnecessary requests for CSS, SSL, or JavaScript components (which the server can handle itself), thus reducing the number of requests to the Rails app to bare essentials. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Examples of Rails web servers: Ngnix and Apache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Ä¢ App servers are programs that maintain your app in memory. So that when an incoming request from a web server apps appears, it gets routed straight to the app for handling. Then the response is bounced back to the web server and, subsequently, the user. When paired with a web server in production, such a setup lets you render requests to multiple apps faster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Examples of app servers for Rails: Unicorn, Puma, Thin, Rainbows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, there are also ‚Äúfusion‚Äù services such as Passenger App (Phusion Passenger). This service integrates with popular web servers (Ngnix and Apache) and brings in an app server layer ‚Äî available for standalone and combo use with web servers. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RRKfru4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hut91n76xb1v9ba7drtv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RRKfru4c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hut91n76xb1v9ba7drtv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Image Source: &lt;a href="https://www.phusionpassenger.com/library/indepth/integration_modes.html"&gt;Phusion Passenger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Passenger is an excellent choice if you want to roll out unified app server settings for a bunch of apps in one go without fiddling with a separate app server setup for each.&lt;/p&gt;

&lt;p&gt;In a nutshell, the main idea behind using web and app servers is to span different rails processes optimally across different instances. &lt;/p&gt;

&lt;p&gt;Pro tip: What we found when building our product is that AWS Elastic Load Balancer often doesn‚Äôt suffice. A major drawback is that ELB can‚Äôt handle multiple vhosts.&lt;/p&gt;

&lt;p&gt;In our case, we went on with configuring an NGINX-based load balancer and configured auto-scaling on it to support ELB. As an alternative, you can also try HAProxy.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#app-instances"&gt;
  &lt;/a&gt;
  &lt;em&gt;App Instances&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;The next step of scale-out architecture is configuring communication between different app instances, where your Rails workloads will be allocated. &lt;/p&gt;

&lt;p&gt;App servers (Unicorn, Puma, etc.) help ensure proper communication between web servers and subsequently increase the throughput of requests processed per second. On Rails, you can allocate an app server to handle multiple app instances, which in turn can have separate ‚Äúworker‚Äù processes or threads (depending on which type of app server service you are using).  &lt;/p&gt;

&lt;p&gt;It‚Äôs important, however, to ensure that different app servers can communicate well with the webserver. Rack interface comes in handy here as it helps homogenize communication standards between standalone app servers. &lt;/p&gt;

&lt;p&gt;When it comes to configuring the right instances for containers, keep in mind the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have four variables to min/max CPU and min/max memory to regulate pod size
&lt;/li&gt;
&lt;li&gt;Limit the resources using [minimum requirement + 20%] formula &lt;/li&gt;
&lt;li&gt;Use average CPU utilization and average memory utilization as scaling metrics &lt;/li&gt;
&lt;li&gt;Mind the timing. Pods and clusters take 4 to 12 minutes to scale up on Kubernetes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;P.S. If you don‚Äôt want to do the above guesswork every time you are building a new pod/cluster, Engine Yard comes with a predictive cluster scaling feature, which helps you scale your infrastructure just-in-time without ballooning the costs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database-scaling"&gt;
  &lt;/a&gt;
  &lt;em&gt;Database Scaling&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Transferring databases to a separate server, used by all app instances, is one of the sleekest moves you can do to &lt;a href="https://blog.engineyard.com/5-tips-to-scale-your-ruby-on-rails-application?utm_source=EngineYard&amp;amp;utm_medium=Interlink"&gt;scale Rails apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all, this can be a nice exercise in segregating your data and implementing database replication for improving business continuity. Secondly, doing so can reduce the querying time since the request will not have to travel through multiple database instances where different bits of data are stored. Instead, it will go straight to a consolidated repository. &lt;/p&gt;

&lt;p&gt;Thus, consider setting up a dedicated MySQL or PostgreSQL server for your relational databases. Then scrub them clean and ensure optimal instance size to save costs. &lt;/p&gt;

&lt;p&gt;For example, AWS RDC lets you select among 18 types of database instances and codify fine-grain provisioning. Choosing to host your data in a cheaper cloud region can drive substantial cost savings (up to 40% at times!). &lt;/p&gt;

&lt;p&gt;Here‚Äôs how on-demand hourly costs differ across AWS regions:&lt;/p&gt;

&lt;p&gt;US East (Ohio)&lt;/p&gt;

&lt;p&gt;‚Ä¢ db.t3.small ‚Äî $0.034 per hour&lt;br&gt;
‚Ä¢ db.t3.xlarge ‚Äî $0.272 per hour&lt;br&gt;
‚Ä¢ db.t3.2xlarge ‚Äî $0.544 per hour&lt;/p&gt;

&lt;p&gt;US West (LA)&lt;/p&gt;

&lt;p&gt;‚Ä¢ db.t3.small ‚Äî $0.0408 per hour&lt;br&gt;
‚Ä¢ db.t3.xlarge ‚Äî$0.3264 per hour&lt;br&gt;
‚Ä¢ db.t3.2xlarge ‚Äî $0.6528 per hour&lt;/p&gt;

&lt;p&gt;Europe (Frankfurt)&lt;/p&gt;

&lt;p&gt;‚Ä¢ db.t3.small ‚Äî $0.04 per hour&lt;br&gt;
‚Ä¢ db.t3.large ‚Äî $0.16 per hour&lt;br&gt;
‚Ä¢ db.t3.2xlarge ‚Äî $0.64 per hour&lt;/p&gt;

&lt;p&gt;Asia Pacific (Seoul) &lt;/p&gt;

&lt;p&gt;‚Ä¢ db.t3.small ‚Äî$0.052 per hour&lt;br&gt;
‚Ä¢ db.t3.large ‚Äî $0.208 per hour&lt;br&gt;
‚Ä¢ db.t3.2xlarge ‚Äî $0.832 per hour&lt;/p&gt;

&lt;p&gt;Another pro tip: opt for reserved instances over on-demand when you can to further slash the hourly costs.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#caching"&gt;
  &lt;/a&gt;
  &lt;em&gt;Caching&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Database caching implementation is another core step to accelerating your Rails apps, especially when it comes to database performance. Given the fact that RoR comes with a native query caching feature that caches the result set returned by each query, it‚Äôs a shame not to profit from this! &lt;br&gt;
Caching can help you speed up those slow queries. But prior to implementing, investigate! Once you‚Äôve found the ‚Äúoffenders‚Äù, consider trying out &lt;a href="https://guides.rubyonrails.org/caching_with_rails.html"&gt;different strategies&lt;/a&gt; such as:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Low-level caching ‚Äî works best for any type of caching to retrieve database queries. &lt;br&gt;
‚Ä¢ Redis cache store ‚Äî lets you store keys and value pairs up to 512 MB in memory, plus provides native data replication. &lt;br&gt;
‚Ä¢ Memcache store ‚Äî another easy-to-implement in-memory datastore with values limited at 1 MB. Supports multi-thread architecture, unlike Redis.&lt;/p&gt;

&lt;p&gt;Ultimately, caching improves data availability and, by proxy, your application‚Äôs querying speed and performance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database-sharding"&gt;
  &lt;/a&gt;
  &lt;em&gt;Database sharding&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;Lastly, at some point in your database scaling journey, you‚Äôll inevitably face the decision to shard your relational databases. &lt;/p&gt;

&lt;p&gt;Data sharding means slicing your DB records horizontally or vertically into smaller chunks (shards) and storing them on a cluster of database nodes. The definitive advantage is that querying should now happen faster since a large database gets split in two and has twice more memory, I/O, and CPU to run. &lt;/p&gt;

&lt;p&gt;The tradeoff, however, is that sharding can significantly affect your app‚Äôs logic. The scope of each query is now limited to either DB 1 or DB 2 ‚Äî there‚Äôs no commingling. Respectively, when adding new app functions, you need to carefully consider how to access data across shards, how sharing relates to the infrastructure, and what‚Äôs the best way to scale out the supporting infrastructure without affecting the app‚Äôs logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-conclude-is-there-an-easier-solution-to-scaling-rails-apps"&gt;
  &lt;/a&gt;
  To Conclude: Is There An Easier Solution to Scaling Rails Apps?
&lt;/h2&gt;

&lt;p&gt;Scaling Rails apps is a careful balancing act of ensuring optimal instance allocation, timely resource, provisioning, and careful container orchestration. Keeping tabs on all the relevant metrics across a portfolio of apps and sub-services isn‚Äôt an easy task when done manually. And it shouldn‚Äôt be.&lt;/p&gt;

&lt;p&gt;You can try Engine Yard Kontainers (EYK) ‚Äî our &lt;a href="https://support.cloud.engineyard.com/hc/en-us/articles/360058885853-Introduction-to-Engine-Yard-Kontainers"&gt;NoOps PaaS autoscaling services&lt;/a&gt; for containerized apps. In essence, we act as your invisible DevOps team. You code your apps and deploy them to EYK, and we take over auto-scaling implementation, container orchestration, and other infrastructure right-sizing tasks from there.&lt;/p&gt;

&lt;p&gt;Learn more about &lt;a href="https://www.engineyard.com/"&gt;Engine Yard&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>database</category>
    </item>
  </channel>
</rss>
