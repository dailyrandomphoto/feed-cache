<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Solution: Construct Target Array With Multiple Sums</title>
      <author>seanpgallivan</author>
      <pubDate>Sun, 09 May 2021 09:39:57 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-construct-target-array-with-multiple-sums-24d4</link>
      <guid>https://dev.to/seanpgallivan/solution-construct-target-array-with-multiple-sums-24d4</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/construct-target-array-with-multiple-sums/discuss/1199223"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1354-hard-construct-target-array-with-multiple-sums"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/construct-target-array-with-multiple-sums/"&gt;Leetcode Problem #1354 (&lt;em&gt;Hard&lt;/em&gt;): Construct Target Array With Multiple Sums&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;target&lt;/code&gt;. From a starting array, &lt;code&gt;A&lt;/code&gt; consisting of all &lt;code&gt;1&lt;/code&gt;'s, you may perform the following procedure :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; let &lt;code&gt;x&lt;/code&gt; be the sum of all elements currently in your array.&lt;/li&gt;
&lt;li&gt; choose index &lt;code&gt;i&lt;/code&gt;, such that &lt;code&gt;0 &amp;lt;= i &amp;lt; target.size&lt;/code&gt; and set the value of &lt;code&gt;A&lt;/code&gt; at index &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; You may repeat this procedure as many times as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Return &lt;code&gt;True&lt;/code&gt; if it is possible to construct the &lt;code&gt;target&lt;/code&gt; array from &lt;code&gt;A&lt;/code&gt; otherwise return &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [9,3,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Start with [1, 1, 1]&lt;br&gt;[1, 1, 1], sum = 3 choose index 1&lt;br&gt;[1, 3, 1], sum = 5 choose index 2&lt;br&gt;[1, 3, 5], sum = 9 choose index 0&lt;br&gt;[9, 3, 5] Done&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [1,1,1,2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;Impossible to create target array from [1,1,1,1].&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;target = [8,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N == target.length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target.length &amp;lt;= 5 * 10^4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= target[i] &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;One thing we can notice right away: The sum of the elements in &lt;strong&gt;A&lt;/strong&gt; will always be larger than any single element of &lt;strong&gt;A&lt;/strong&gt;, since &lt;strong&gt;A&lt;/strong&gt; starts off with all positive numbers. Therefore, the sum will only ever go up as we iterate through the solution process. This means that we will only ever have one attempt to place a given number in its correct spot.&lt;/p&gt;

&lt;p&gt;It also means that the &lt;em&gt;last&lt;/em&gt; step will always be to settle the highest value of the target array, which means we can reconstruct the nature of &lt;strong&gt;A&lt;/strong&gt; right before the last step as well. From there, we'll have to keep dealing with the largest remaining value, on and on, working backwards until we either succeed or fail.&lt;/p&gt;

&lt;p&gt;Since we are going to have to deal with the target values in descending value order, it stands to reason that we should use a &lt;strong&gt;max priority queue&lt;/strong&gt; or &lt;strong&gt;max-heap&lt;/strong&gt; structure to keep track of the target values, especially since we don't care about the values' indices.&lt;/p&gt;

&lt;p&gt;Once we have all the &lt;strong&gt;target&lt;/strong&gt; values inserted into the priority queue (&lt;strong&gt;pq/heap&lt;/strong&gt;) and the &lt;strong&gt;sum&lt;/strong&gt; calculated, we can proceed to deal with the values in order. At each step, we should remove the max value, compute its replacement's value, then reinsert that replacement back into &lt;strong&gt;pq&lt;/strong&gt;. If, at the start of an iteration, we see that the max value in &lt;strong&gt;pq&lt;/strong&gt; is a &lt;strong&gt;1&lt;/strong&gt;, then that means that all values in &lt;strong&gt;pq&lt;/strong&gt; are &lt;strong&gt;1&lt;/strong&gt;s, and we should &lt;strong&gt;return true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, if we find ourselves about to insert a number less than &lt;strong&gt;1&lt;/strong&gt; into &lt;strong&gt;pq&lt;/strong&gt;, we know we've failed and should &lt;strong&gt;return false&lt;/strong&gt;, as we will have passed the prescribed starting position.&lt;/p&gt;

&lt;p&gt;But at this point, we'll still obtain a &lt;strong&gt;TLE&lt;/strong&gt; result and will need to optimize some more. Consider the situation in which we process the max value only to find that we're about to reinsert a number that is &lt;em&gt;still&lt;/em&gt; the max value. In some edge cases, it could take thousands of iterations to fully process this value so that we can move on to another, when all that processing can be done more simply in one step.&lt;/p&gt;

&lt;p&gt;Take, for example, &lt;strong&gt;target = [3,5,33]&lt;/strong&gt;. Normally, we'd remove the &lt;strong&gt;33&lt;/strong&gt; and compute its replacement to be &lt;strong&gt;25&lt;/strong&gt;, then from &lt;strong&gt;25&lt;/strong&gt; to &lt;strong&gt;17&lt;/strong&gt;, then &lt;strong&gt;17&lt;/strong&gt; to &lt;strong&gt;9&lt;/strong&gt;, then finally &lt;strong&gt;9&lt;/strong&gt; to &lt;strong&gt;1&lt;/strong&gt;. Each time, we're removing the sum of all the remaining values (&lt;strong&gt;3 + 5 = 8&lt;/strong&gt;) from the current number. In any valid target array, as we noted at the very beginning, the max value &lt;em&gt;must&lt;/em&gt; be larger than the sum of the remaining elements, since it came from that sum plus the value that was replaced.&lt;/p&gt;

&lt;p&gt;That means that we should be able to remove the remaining sum (&lt;strong&gt;8&lt;/strong&gt;) from our current max value (&lt;strong&gt;33&lt;/strong&gt;) as many times as we possibly can, since only the remainder will bring us below that sum. This we can achieve quite easily with the &lt;strong&gt;mod operator&lt;/strong&gt; which will result in our replacement value (&lt;strong&gt;33 % 8 = 1&lt;/strong&gt;) without the need to iterate through every step.&lt;/p&gt;

&lt;p&gt;As noted recently, if we find that the max value is actually less than the remaining sum, then the array must not be valid, and we can &lt;strong&gt;return false&lt;/strong&gt;.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Implementation:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Javascript's &lt;strong&gt;MaxPriorityQueue()&lt;/strong&gt; npm is convenient, but not terribly efficient. A custom &lt;strong&gt;max-heap&lt;/strong&gt; implementation is more performant. Both options are included below.&lt;/p&gt;

&lt;p&gt;Python defaults to a &lt;strong&gt;min-heap&lt;/strong&gt;, so we can simulate a &lt;strong&gt;max-heap&lt;/strong&gt; by changing the sign on each element when it is inserted and removed from the heap.&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#w-maxpriorityqueue"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ MaxPriorityQueue():&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isPossible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MaxPriorityQueue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;front&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;
        &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#w-maxheap"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;w/ Max-Heap:&lt;/em&gt;&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isPossible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[,],&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
        &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;par&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isPossible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
            &lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isPossible&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PriorityQueue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;peek&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;isPossible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;priority_queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Learn python the effective way from anywhere</title>
      <author>vishwasnarayanre</author>
      <pubDate>Sun, 09 May 2021 09:32:34 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/learn-python-the-effective-way-from-anywhere-24pi</link>
      <guid>https://dev.to/vishwasnarayan5/learn-python-the-effective-way-from-anywhere-24pi</guid>
      <description>&lt;p&gt;Learn how to use Python professionally, like Python 2 and Python 3!&lt;br&gt;
Python can be used to create games such as Tic Tac Toe and Blackjack!&lt;br&gt;
Discover advanced Python features such as the collections module and working with timestamps!&lt;/p&gt;

&lt;p&gt;Classes will teach you how to use Object Oriented Programming!&lt;br&gt;
Understand diverse subjects, such as decorators.&lt;/p&gt;

&lt;p&gt;Learn how to use Jupyter Notebook and how to create.py scripts.&lt;br&gt;
Learn how to build graphical user interfaces (GUIs) in the Jupyter Notebook framework!&lt;br&gt;
Develop a thorough understanding of Python from the ground up!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-python"&gt;
  &lt;/a&gt;
  Why python?
&lt;/h1&gt;

&lt;p&gt;Python is a dynamically semantic object-oriented and high-level programming language.&lt;br&gt;
It has high-level data structures, dynamic typing, dynamic linking, and other functionality that make it useful for developing complex applications.&lt;br&gt;
Although Guido Van Rossum created Python in the late 1980s, its implementation began in December 1989.&lt;br&gt;
It is an open-source language that has achieved popularity.It is an open-source language that has recently gained attention due to its use in data science.&lt;/p&gt;

&lt;p&gt;It provides a plethora of well-equipped libraries and frameworks that allow developers to easily create concrete applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-use-python"&gt;
  &lt;/a&gt;
  Why use python?
&lt;/h1&gt;

&lt;p&gt;Python is used to create desktop graphical user interface (GUI) programmes, blogs, and web applications.&lt;/p&gt;

&lt;p&gt;It frees up programmers' time to work on the application's core features by handling routine programming activities.&lt;/p&gt;

&lt;p&gt;It has been the most sought-after programming language for developers operating in the fields of Artificial Intelligence, Data Science, Machine Learning, Software Development, and Data Mining. It is also used as a scripting language for web applications.&lt;/p&gt;

&lt;p&gt;Python is used by many programmers for a variety of projects, like designing learning algorithms, constructing websites, refining data algorithms, and locating data analytics solutions.&lt;/p&gt;

&lt;p&gt;Needless to mention, if you are a developer, Python must be available to you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-as-a-sole-warrior"&gt;
  &lt;/a&gt;
  Learn as a sole warrior
&lt;/h1&gt;

&lt;p&gt;Start learning alone,Understanding the fundamentals of Python would help you in the long run.&lt;br&gt;
It would be easier for you to grasp more complex ideas if you have a stronger understanding of the basics.&lt;br&gt;
If you've mastered the fundamentals of Python, you'll be able to confidently move on to learning data structures and algorithms.About the fact that Python is a high-level language that allows you to perform complicated functions, it is simple to learn and understand.&lt;br&gt;
It has a simple syntax and is therefore appropriate for both novice and advanced programmers.&lt;/p&gt;

&lt;p&gt;Python will seem difficult at first if you are a complete novice. All you have to remember is that everybody begins at the same moment.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-can-do-it-if-you-are-careful"&gt;
  &lt;/a&gt;
  You can do it if you are careful!.
&lt;/h1&gt;

&lt;p&gt;Since you have a clear grasp of the basics of Python, the next step is to PRACTICE!&lt;/p&gt;

&lt;p&gt;It is important to code every day in order to learn Python.It will ensure continuity and will assist you in becoming acquainted with Python.&lt;/p&gt;

&lt;p&gt;Learning Python is all about being able to solve a programming challenge with a computer as the solution.&lt;/p&gt;

&lt;p&gt;Training can introduce you to a variety of challenges and applications while still honing your problem-solving abilities.&lt;/p&gt;

&lt;p&gt;To learn Python programming, there are various online tools available, such as tutorials.&lt;/p&gt;

&lt;p&gt;For so many options online, it can be daunting for a novice to find a good tutorial.&lt;/p&gt;

&lt;p&gt;So, how are you going to choose the resource?&lt;/p&gt;

&lt;p&gt;So... Choose the one that piques your curiosity and is highly recommended by the programming community.&lt;/p&gt;

&lt;p&gt;You can also look at different books and projects that are available online, as well as participate in others.&lt;/p&gt;

&lt;p&gt;Contributing to open-source code is an excellent way to gain useful knowledge.&lt;/p&gt;

&lt;p&gt;The source code of software is made freely accessible through the open-source model, and everyone can contribute to it.&lt;/p&gt;

&lt;p&gt;It is also a perfect way to engage with people who have common interests and to teach new concepts to the programming world.&lt;/p&gt;

&lt;p&gt;Interacting and collaborating with others on a common forum would also allow you to learn new ideas from those involved.&lt;/p&gt;

&lt;p&gt;When you examine the source code, you will study how things work, draw your own conclusions, and experiment by analyzing the codes of others.&lt;/p&gt;

&lt;p&gt;also, my tip is to run the learning is try seeing some bugs which was reported in the repository that I have listed below.&lt;/p&gt;

&lt;p&gt;Also try doing a project and then the only key note is to practice a lot ,do a lot of practice for the development and tinker woth the other frameworks by looking at their documentation.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What I learned after 10 years of development</title>
      <author>Adrian Twarog</author>
      <pubDate>Sun, 09 May 2021 09:16:07 +0000</pubDate>
      <link>https://dev.to/adriantwarog/what-i-learned-after-10-years-of-development-3an</link>
      <guid>https://dev.to/adriantwarog/what-i-learned-after-10-years-of-development-3an</guid>
      <description>&lt;p&gt;I've been coding for a long time, over 10 years&lt;/p&gt;

&lt;p&gt;During all that website development of JavaScript, HTML, CSS, I learned a few things they don't teach in class...&lt;/p&gt;

&lt;p&gt;Things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always improve&lt;/li&gt;
&lt;li&gt;Learn with projects&lt;/li&gt;
&lt;li&gt;Stay healthy&lt;/li&gt;
&lt;li&gt;Apply yourself&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;li&gt;Don't Burnout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zhTVcA8fuRI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;center&gt;
&lt;a href="https://youtu.be/zhTVcA8fuRI%20"&gt;&lt;/a&gt;&lt;a href="https://youtu.be/zhTVcA8fuRI"&gt;https://youtu.be/zhTVcA8fuRI&lt;/a&gt; &lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#always-improve"&gt;
  &lt;/a&gt;
  Always improve
&lt;/h2&gt;

&lt;p&gt;The first thing is to always keep learning early on when I started development, I really didn't take this very seriously. So this meant that while I was tinkering with lots of different projects, I never learned how to use a proper language or framework in full. The game changed for me a lot. &lt;/p&gt;

&lt;p&gt;When I actually picked one thing that I wanted to learn, which was react, I decided that I wanted to know it inside and out. So I took out a course and I completed it from start to end. This opened up lots of possibilities for me.&lt;/p&gt;

&lt;p&gt;I was finally able to build some of the projects I've always wanted to, and people at work started to realise this too, and came to me when they had different ideas and opportunities, always keep learning is essentially now a motto that I like to keep. And that's why it's first on this list. &lt;/p&gt;

&lt;p&gt;After learning react, I decided to continue on I learned WordPress and bootstrap and lots lots more. Once I learned something the journey wasn't over, though, I often had to relearn it over and over even react pretty much changes every couple of years where you'll need to learn how to do hooks, and who knows what the next thing is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-with-projects"&gt;
  &lt;/a&gt;
  Learn with projects
&lt;/h2&gt;

&lt;p&gt;Find a project that you're truly interested in and use that as a medium to continue to learn these go hand in hand because the fact that you will always have ideas and projects that you want to build. &lt;/p&gt;

&lt;p&gt;But the problem is learning on its own is hard, you can feel like you're overwhelmed. And sometimes there's just too much to know, there have been so many times in my life where I've just given up on learning a language simply because it just felt too difficult. &lt;/p&gt;

&lt;p&gt;I just didn't have the endurance to keep on going. The difference a project makes is that if you're doing something you're truly interested in, then the learning is a byproduct of completing the project. &lt;/p&gt;

&lt;p&gt;It took me two years to try and figure out PHP just learning it by itself. But once I had a project where I had to build out a VPN using PHP, I learned it old in three months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stay-healthy"&gt;
  &lt;/a&gt;
  Stay healthy
&lt;/h2&gt;

&lt;p&gt;I know that for a long period, when I was in development, I sort of let myself go in the terms that I just ate whatever it was that had, I'd get takeout and I would just get fast food. And this really wasn't very good for my body. &lt;/p&gt;

&lt;p&gt;Taking your health into consideration means making sure that you're eating good fruit and good vegetables, making sure that you're sitting properly, all of these things can add up in the long run. So whatever you do, make sure that you take care of yourself. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-yourself"&gt;
  &lt;/a&gt;
  Apply yourself
&lt;/h2&gt;

&lt;p&gt;Apply yourself, this can come in so many different formats. The first is obviously that whenever you do any piece of work, put your heart and soul into it, you'll learn a lot more by doing so and you'll constantly be improving. &lt;/p&gt;

&lt;p&gt;The other aspect is that even when you do get a job or a piece of work, always look for the horizon, look for what else you can do, keep applying for better jobs or looking how you can earn more money. And if you keep doing this, the result will be that you will end up achieving those goals. &lt;/p&gt;

&lt;p&gt;My goal has always been to give myself a bit more free time to enjoy myself and do the things that I like, this didn't happen immediately. It took me about 10 years to get to where I am now. And for a lot of time, I just spend that time working really hard on all the things that I wanted to. But now that I have, I've got the opportunity to spend a bit more time with the things that are important to me, such as my son, my family, and working on the kinds of projects that I really enjoy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h2&gt;

&lt;p&gt;Build your network. &lt;/p&gt;

&lt;p&gt;This isn't just having people that you know, it's actually making friends with them and collaborating with them on different types of projects. When I was starting out as developer, I didn't really try to collaborate with other people, I tried to do most projects by myself. &lt;/p&gt;

&lt;p&gt;This meant that when I got stuck, I could be stuck for an entire week trying to solve a problem. After being forced to work with other people in a startup, I actually found that I quite liked it. &lt;/p&gt;

&lt;p&gt;Some of my closest friends even talked to me about creating a startup which we built, and it was successful and other people I knew put me in touch with their friends. And they helped me get my very first job in web development to which I'm still working to this day. The power of networking and connections and just friends in general cannot be understated in whatever field you are in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-burnout"&gt;
  &lt;/a&gt;
  Don't Burnout
&lt;/h2&gt;

&lt;p&gt;Burnout is the next item on our list here. And it's a real thing that happens to a lot of developers. burnout for developers might not always be easy to recognise because we get so into the projects that we do. And when we're in that zone. Sometimes it's hard to know when we're pushing ourselves over the limit. &lt;/p&gt;

&lt;p&gt;It's important to have checks and balances. I know that sometimes we can be really passionate about a project. But if we don't sleep enough, or if we drink too much coffee, or even if we just work too hard at it, we might lose the inspiration and motivation that gets a project over the line. And trust me I know what it's like having hundreds of projects unfinished, simply because I lost that motivation. When I worked myself too hard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-and-support-me"&gt;
  &lt;/a&gt;
  Follow and support me:
&lt;/h2&gt;

&lt;p&gt;Special thanks if you subscribe to my channel :)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCvM5YYWwfLwpcQgbRr68JLQ?sub_confirmation=1"&gt;🎞️ Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/adrian_twarog"&gt;🐦 Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#want-to-see-more"&gt;
  &lt;/a&gt;
  Want to see more:
&lt;/h2&gt;

&lt;p&gt;I will try to post new great content every day. Here are the latest items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/adriantwarog/vs-code-in-virtual-reality-4ja2"&gt;VS Code in Virtual Reality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/adriantwarog/vs-code-on-my-phone-how-i-did-it-1fme"&gt;VS Code on my Phone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/adriantwarog/40-amazing-developers-you-should-follow-on-youtube-5bhh"&gt;40 Amazing Developers You Should Follow On Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/adriantwarog/enhancing-ui-design-for-developers-3peg"&gt;Enhance UI - Design for Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Tools you need for making your own Linux distribution.</title>
      <author>vishwasnarayanre</author>
      <pubDate>Sun, 09 May 2021 09:09:32 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/tools-you-need-for-making-your-own-linux-distribution-23eg</link>
      <guid>https://dev.to/vishwasnarayan5/tools-you-need-for-making-your-own-linux-distribution-23eg</guid>
      <description>&lt;p&gt;You need have your own Linux Distibution then know these tools so that you can build your own Linux Distibution for your own purpose that you need example hacking,pentesting and so on.&lt;/p&gt;

&lt;p&gt;Thus, you can use these following tools.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#virtual-box"&gt;
  &lt;/a&gt;
  Virtual Box
&lt;/h1&gt;

&lt;p&gt;You can install an Virtual box and then go and get the OS installed on to the virtual box as a OVA file and also change it and then publish as your own Custom OS which is one of the best technique that you can adopt to build your own distribution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TbFhYooY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv5lqrb043og3jogsea3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TbFhYooY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vv5lqrb043og3jogsea3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linux-respin"&gt;
  &lt;/a&gt;
  Linux Respin:
&lt;/h1&gt;

&lt;p&gt;Linux Respin is an offshoot of the now-defunct Remastersys. Remastersys was once one of the most common tools for creating your own Linux distro and/or a backup of your operating system. Linux Respin does not deliver as much as Remastersys used to, but it still does a fine job if you choose a distro for which it is available, Linux Respin is only available for Debian, Mint, and Trisquel, which limits its appeal. What I don't like about this tool is that it has almost no documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lu0njhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9mcxskcz6ofk5l2ib76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lu0njhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9mcxskcz6ofk5l2ib76.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linux-live-kit"&gt;
  &lt;/a&gt;
  Linux Live Kit:
&lt;/h1&gt;

&lt;p&gt;The Linux Live Kit is a tool for creating your own distros and backing up your system. It prefers Debian, but it can run on other distributions as well, as long as they support the aufs and squashfs kernel modules. The Linux Live Kit has a very simple wizard for building a distro – just follow the steps and you're done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQNWhYjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtl65l6g0j8e4znojgvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQNWhYjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtl65l6g0j8e4znojgvt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#linux-from-scratch"&gt;
  &lt;/a&gt;
  Linux from Scratch:
&lt;/h1&gt;

&lt;p&gt;Linux from Scratch is a project that teaches Linux from the ground up. LFS has extensive documentation and is an excellent resource for learning about Linux in general, not just how to create your own distro. Linux from Scratch allows you to create your own customized Linux system from scratch. LFS is not a tool like the others on this list, but it can be used for the same purpose – to create your own Linux distro (and to test it).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pl1-vQDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6xta5jvn76wwb85z8oc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pl1-vQDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6xta5jvn76wwb85z8oc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#live-magic"&gt;
  &lt;/a&gt;
  Live Magic:
&lt;/h1&gt;

&lt;p&gt;Live Magic is yet another Debian tool for creating distributions. It can burn CDs, USB drives, and netboot images. It is much easier to use than some of the other apps on this list, such as Remastersys, but it does not build the image using your running system. Instead, use a wizard to guide you through the process of configuring your system. The programme will download the packages from your repositories and install them in your system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xu7PLZ_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o57q260a7eqsz8qtrf1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xu7PLZ_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o57q260a7eqsz8qtrf1x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#revisor"&gt;
  &lt;/a&gt;
  Revisor:
&lt;/h1&gt;

&lt;p&gt;Revisor supports the creation of Installation Media for permanent installation of the distribution on a computer, live media for booting and using the distribution without making permanent changes to the computer, virtualization media for use in virtual guests in Xen or KVM, and utility media for data recovery or dealing with problems in the operating system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dSby8acB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0znd8fqds78rh9lpd9ou.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dSby8acB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0znd8fqds78rh9lpd9ou.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#customizer"&gt;
  &lt;/a&gt;
  Customizer:
&lt;/h1&gt;

&lt;p&gt;Customizer is no longer in active development, but that is because its developer considers it stable. It is yet another tool for remixing Ubuntu, but it also supports its various flavours, such as Xubuntu and Kubuntu.&lt;/p&gt;

&lt;p&gt;The host system under which you are using it, however, must have the same release number and architecture as the guest system you are remixing.&lt;/p&gt;

&lt;p&gt;These tools for making your own custom Linux distribution should be useful. Their level of complexity (and power) varies, but we've tried to include both simple apps and apps with more power. See our guides on how to repair a corrupted USB drive in Linux and how to instal for more Linux tips. Arch Linux uses deb packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBnhS-6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbxuh9hsnq5ge4rkuz5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBnhS-6A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sbxuh9hsnq5ge4rkuz5x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ubuntu-imager"&gt;
  &lt;/a&gt;
  Ubuntu Imager:
&lt;/h1&gt;

&lt;p&gt;Ubuntu Imager is a useful tool for creating your own Ubuntu-based distribution. It's not the only such app for Ubuntu, but because it's a good one, I've included it on this list. I'm not going to go over it in detail because we already have a very detailed how-to with installation and operation instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTpKq_SD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv9uvjk1cs9hgoe3ut0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTpKq_SD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv9uvjk1cs9hgoe3ut0c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus these are the list of the tools that we can use for making your own Linux image ,do just try making them by using these software's if you have any doubts do connect with me through my twitter thus we can work on the queries on using these tools and building os.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>cybersecurity</category>
      <category>computerscience</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Removing extraneous NPM packages</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Sun, 09 May 2021 08:47:04 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/removing-extraneous-npm-packages-43n4</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/removing-extraneous-npm-packages-43n4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#synopsis"&gt;
  &lt;/a&gt;
  Synopsis
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm prune [[&amp;lt;@scope&amp;gt;/]&amp;lt;pkg&amp;gt;...] [--production] [--dry-run] [--json]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h1&gt;

&lt;p&gt;This command removes "extraneous" packages. If a package name is provided, then only packages matching one of the supplied names are removed.&lt;/p&gt;

&lt;p&gt;Extraneous packages are those present in the &lt;code&gt;node_modules&lt;/code&gt; folder that are not listed as any package's dependency list.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;--production&lt;/code&gt; flag is specified or the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable is set to production, this command will remove the packages specified in your &lt;code&gt;devDependencies&lt;/code&gt;. Setting &lt;code&gt;--no-production&lt;/code&gt; will negate &lt;code&gt;NODE_ENV&lt;/code&gt; being set to production.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;--dry-run&lt;/code&gt; flag is used then no changes will actually be made.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;--json&lt;/code&gt; flag is used, then the changes npm prune made (or would have made with &lt;code&gt;--dry-run&lt;/code&gt;) are printed as a JSON object.&lt;/p&gt;

&lt;p&gt;In normal operation, extraneous modules are pruned automatically, so you'll only need this command with the &lt;code&gt;--production&lt;/code&gt; flag. However, in the real world, operation is not always "normal". When crashes or mistakes happen, this command can help clean up any resulting garbage.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;To remove extraneous packages (packages that are installed but not in dependency list) run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm prune
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To remove all dev packages add &lt;code&gt;--production&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm prune --production
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Best Udemy Courses To Level Up Your Web Development Skills</title>
      <author>Thinkpader</author>
      <pubDate>Sun, 09 May 2021 08:39:04 +0000</pubDate>
      <link>https://dev.to/thinkpader/best-udemy-courses-to-level-up-your-web-development-skills-37fe</link>
      <guid>https://dev.to/thinkpader/best-udemy-courses-to-level-up-your-web-development-skills-37fe</guid>
      <description>&lt;p&gt;Are you a beginner developer and want to level up your dev game and progress faster than your competition? Read on and I’ll give you honest reviews of some of the courses I’ve taken on Udemy.&lt;/p&gt;

&lt;p&gt;These are courses that I’ve paid for (using my hard earned money) and this article is in no way sponsored by Udemy. There are no affiliate links so you can be doubly sure that I’m not putting any course here just to earn some extra bucks. If you wish to purchase any of these courses then make sure you wait for a sale (Udemy has them on a bi-monthly basis).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#for-absolute-beginners"&gt;
  &lt;/a&gt;
  For Absolute Beginners
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#the-web-developer-bootcamp-2021-by-colt-steele"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;The Web Developer Bootcamp 2021 by Colt Steele&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_78yzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3sgxh22slf2g6ihpci2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_78yzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3sgxh22slf2g6ihpci2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the new version of Colt’s The Web Developer Bootcamp, Udemy’s most popular web development course. This course has been completely overhauled to prepare students for the 2021 job market, and has over 60 hours of brand new content. Some of the highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The instructor, Colt Steele, is extremely knowledgable and witty. He makes the tricky stuff a lot less tricky, his explanations are spot on and his cat and dog jokes make you chuckle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The course everything a beginner web developer needs to know — from HTML, CSS, Bootstrap, JavaScript all the way to Node.js, Express and MongoDB.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It follows a logical structure so that the student (you!) is not overwhelmed or confused.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are a lot of mini exercises to re-enforce what you are learning and make it stick.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You make a BIG project towards the end and learn Node.js, Express and MongoDB in the process.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall, this a great intro to the world of web development for beginners and you can’t go wrong with this one. Get the course  &lt;a href="https://www.udemy.com/course/the-web-developer-bootcamp/"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#levelling-up-your-css-and-javascript"&gt;
  &lt;/a&gt;
  Levelling Up Your CSS and JavaScript
&lt;/h1&gt;

&lt;p&gt;Although Colt’s course covers the basics of CSS and JavaScript, I think spending some time to brush up what you’ve just learnt and more importantly why is does what it does will go a long way in making you a better developer. And the next two courses are perfect for that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-css-and-sass-flexbox-grid-animations-and-more-by-jonas-schmedtmann"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/advanced-css-and-sass/"&gt;Advanced CSS and Sass: Flexbox, Grid, Animations and More by Jonas Schmedtmann&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlhRrfWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y0xpshtgusbjyxsg8ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlhRrfWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9y0xpshtgusbjyxsg8ts.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the perfect course to level up your CSS skills and getting a better understanding of CSS and even SaaS. Some highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understand how CSS works behind the scenes. Learn about the cascade, specificity, inheritance, value processing, the visual formatting model, the box model, box types, positioning schemes and stacking contexts etc.&lt;/li&gt;
&lt;li&gt;Learn about CSS architecture.
*Learn about Flexbox and Grid layout.&lt;/li&gt;
&lt;li&gt;Introduction to Sass.&lt;/li&gt;
&lt;li&gt;Lots of cool and real world projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/advanced-css-and-sass/"&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-modern-javascript-bootcamp-course-2021-by-colt-steele-and-stephen-grider"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/javascript-beginners-complete-tutorial/"&gt;The Modern Javascript Bootcamp Course (2021) by Colt Steele and Stephen Grider&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kb94jMIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oseq8jkb221zu606ykqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kb94jMIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oseq8jkb221zu606ykqu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the best courses to get an in depth understanding of JavaScript by two of Udemy’s best instructors — Colt Steele and Stephen Grider.&lt;/p&gt;

&lt;p&gt;The first half of the course is mostly theory and mini exercises and is taught by Colt. The second half will have you build a lot of cool and interesting projects that you can use in your portfolio. Some of the cool things you’ll build in the course:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fetch and manage information from third-party API’s.&lt;/li&gt;
&lt;li&gt;Build command line tools from scratch using Node JS.&lt;/li&gt;
&lt;li&gt;Build a fully-featured E-Commerce application from scratch — including production-grade authentication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/javascript-beginners-complete-tutorial/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-react-the-hottest-javascript-framework"&gt;
  &lt;/a&gt;
  Learning React — the HOTTEST JavaScript Framework
&lt;/h1&gt;

&lt;p&gt;Frameworks make your life easier by doing a lot of the heavy lifting for you. So once you’ve learnt enough JavaScript it’s time to learn React. React was created by Facebook and is the most widely used JavaScript framework.&lt;/p&gt;

&lt;p&gt;It’s also in a lot of demand in the job market. So learning React with increase your employability and increase your chances of getting a job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-tutorial-and-projects-course-by-john-smilga"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.udemy.com/course/react-tutorial-and-projects-course/"&gt;React Tutorial and Projects Course by John Smilga&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7iru71zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ni006govfxnh357x0x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iru71zY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ni006govfxnh357x0x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although this course is by a lesser known Udemy instructor, it does not disappoint. The instructor makes React concepts easy to understand. The course uses the latest method of declaring functional components. Some of the highlights of the course are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start from the very basics of React.&lt;/li&gt;
&lt;li&gt;Learn about functional components.&lt;/li&gt;
&lt;li&gt;Learn the various hooks such as useState, useEffect etc.&lt;/li&gt;
&lt;li&gt;Make a lot of projects to practice what you’ve learnt.&lt;/li&gt;
&lt;li&gt;Lots of repetition to make sure what you learn sticks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get the course  &lt;a href="https://www.udemy.com/course/react-tutorial-and-projects-course/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluding-thoughts"&gt;
  &lt;/a&gt;
  Concluding Thoughts
&lt;/h1&gt;

&lt;p&gt;The courses given above are a great starting point for someone looking to dive into the world of web development. As I’ve already said in &lt;a href="https://dev.to/thinkpader/my-journey-from-a-code-newbie-to-advanced-beginner-5cp1"&gt;my first blog post&lt;/a&gt; the secret to becoming a successful web developer are:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Practice what you learn — make your own mini projects to solidify your knowledge.&lt;/li&gt;
&lt;li&gt;Be consistent — take out time to practice coding everyday.&lt;/li&gt;
&lt;li&gt;Focus — pick a language or technology and stick with it. Don’t hop from one thing to another.&lt;/li&gt;
&lt;li&gt;Avoid distractions — switch off your phone or keep it in airplane mode.&lt;/li&gt;
&lt;li&gt;Take your time — don’t compare your progress with others.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that’s it from me for today. I hope you’ll benefit from the courses that I’ve outlined above. See you guys soon.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Node.js : How to get a basic HTTPS web server up and running!</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Sun, 09 May 2021 08:32:08 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/node-js-how-to-get-a-basic-https-web-server-up-and-running-9ke</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/node-js-how-to-get-a-basic-https-web-server-up-and-running-9ke</guid>
      <description>&lt;p&gt;Once you have node.js installed on your system, you can just follow the procedure below to get a basic web server running with support for both HTTP and HTTPS!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-build-a-certificate-authority"&gt;
  &lt;/a&gt;
  Step 1 : Build a Certificate Authority
&lt;/h1&gt;

&lt;p&gt;1.1. create the folder where you want to store your key &amp;amp; certificate :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.2. go to that directory :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd conf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.3. grab this ca.cnf file to use as a configuration shortcut :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget https://raw.githubusercontent.com/anders94/https-authorized-clients/master/keys/ca.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.4. create a new certificate authority using this configuration :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl req -new -x509 -days 9999 -config ca.cnf -keyout ca-key.pem -out ca-cert.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.5. now that we have our certificate authority in ca-key.pem and ca-cert.pem, let's generate a private key for the server :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl genrsa -out key.pem 4096
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.6. grab this server.cnf file to use as a configuration shortcut:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget https://raw.githubusercontent.com/anders94/https-authorized-clients/master/keys/server.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.7. generate the certificate signing request using this configuration :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl req -new -config server.cnf -key key.pem -out csr.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;1.8. sign the request :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;openssl x509 -req -extfile server.cnf -days 999 -passin "pass:password" -in csr.pem -CA cacert.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-install-your-certificate-as-a-root-certificate"&gt;
  &lt;/a&gt;
  Step 2 : Install your certificate as a root certificate
&lt;/h1&gt;

&lt;p&gt;2.1. copy your certificate to your root certificates' folder :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo cp ca-crt.pem /usr/local/share/ca-certificates/ca-crt.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.2. update CA store :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo update-ca-certificates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-starting-your-node-server"&gt;
  &lt;/a&gt;
  Step 3 : Starting your node server
&lt;/h1&gt;

&lt;p&gt;First, you want to create a server.js file that contains your actual server code. The minimal setup for an HTTPS server in Node.js would be something like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var https = require('https');
var fs = require('fs');
var httpsOptions = {
 key: fs.readFileSync('path/to/server-key.pem'),
 cert: fs.readFileSync('path/to/server-crt.pem')
};
var app = function (req, res) {
 res.writeHead(200);
 res.end("hello world\n");
}
https.createServer(httpsOptions, app).listen(4433);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you also want to support http requests, you need to make just this small modification :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var http = require('http');
var https = require('https');
var fs = require('fs');
var httpsOptions = {
 key: fs.readFileSync('path/to/server-key.pem'),
 cert: fs.readFileSync('path/to/server-crt.pem')
};
var app = function (req, res) {
 res.writeHead(200);
 res.end("hello world\n");
}
http.createServer(app).listen(8888);
https.createServer(httpsOptions, app).listen(4433);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.1. go to the directory where your server.js is located :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd /path/to
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.2. run server.js :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>devops</category>
      <category>developer</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything I use daily as a Senior Frontend Engineer</title>
      <author>Jordi Enric</author>
      <pubDate>Sun, 09 May 2021 08:30:22 +0000</pubDate>
      <link>https://dev.to/jordienr/everything-i-use-daily-as-a-senior-frontend-engineer-4pa4</link>
      <guid>https://dev.to/jordienr/everything-i-use-daily-as-a-senior-frontend-engineer-4pa4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#vscode"&gt;
  &lt;/a&gt;
  VSCode
&lt;/h1&gt;

&lt;p&gt;I use these extensions:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilities"&gt;
  &lt;/a&gt;
  Utilities
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Auto Close Tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text&lt;/li&gt;
&lt;li&gt;Auto Rename Tag: Auto rename paired HTML/XML tag&lt;/li&gt;
&lt;li&gt;Better Comments: Improve your code commenting by annotating with alert, informational, TODOs, and more!&lt;/li&gt;
&lt;li&gt;Better TOML: Better TOML Language support&lt;/li&gt;
&lt;li&gt;Bracket Pair Colorizer: A customizable extension for colorizing matching brackets&lt;/li&gt;
&lt;li&gt;DotENV: Support for dotenv file syntax&lt;/li&gt;
&lt;li&gt;ESLint: Integrates ESLint JavaScript into VS Code.&lt;/li&gt;
&lt;li&gt;Firebase: Firestore Security Rules syntax highlighting&lt;/li&gt;
&lt;li&gt;GitLens: Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more&lt;/li&gt;
&lt;li&gt;Gremlins Tracker: Reveals some characters that can be harmful because they are invisible or looking like legitimate ones. Inspired by Sublime Gremlins.&lt;/li&gt;
&lt;li&gt;Import Cost: Display import/require package size in the editor&lt;/li&gt;
&lt;li&gt;Intellisense for CSS class names in HTML: CSS class name completion for the HTML class attribute based on the definitions found in your workspace.&lt;/li&gt;
&lt;li&gt;Jest: Use Facebook's Jest With Pleasure.&lt;/li&gt;
&lt;li&gt;Jest Test Explorer: Run your Jest tests in the Sidebar of Visual Studio Code&lt;/li&gt;
&lt;li&gt;Markdown Preview Enhanced: Markdown Preview Enhanced ported to vscode&lt;/li&gt;
&lt;li&gt;markdownlint: Markdown linting and style checking for Visual Studio Code&lt;/li&gt;
&lt;li&gt;Material Design icons Intellisense&lt;/li&gt;
&lt;li&gt;npm Intellisense&lt;/li&gt;
&lt;li&gt;Path Intellisense&lt;/li&gt;
&lt;li&gt;Prettier&lt;/li&gt;
&lt;li&gt;Project Manager: Easily switch between projects&lt;/li&gt;
&lt;li&gt;Rainbow CSV: Highlight CSV and TSV files, Run SQL-like queries&lt;/li&gt;
&lt;li&gt;Random Everything: Generate random ints, floats, strings, words, etc.&lt;/li&gt;
&lt;li&gt;SCSS Intellisense: Advanced autocompletion and refactoring support for SCSS&lt;/li&gt;
&lt;li&gt;Todo Tree: Show TODO, FIXME, etc. comment tags in a tree view&lt;/li&gt;
&lt;li&gt;TS QuickFixes: Quick fixes for typescript&lt;/li&gt;
&lt;li&gt;TS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#look-amp-feel"&gt;
  &lt;/a&gt;
  Look &amp;amp; feel
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fluent Icons: Fluent product icons for Visual Studio Code&lt;/li&gt;
&lt;li&gt;GlassIt-VSC: VS Code Extension to set window to transparent on Windows and Linux platforms.&lt;/li&gt;
&lt;li&gt;Peacock: Subtly change the workspace color of your workspace. Ideal when you have multiple VS Code instances, and you want to quickly identify which is which.&lt;/li&gt;
&lt;li&gt;Yi Dark &amp;amp; Yi Light Themes&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#git-bash-terminal"&gt;
  &lt;/a&gt;
  Git Bash Terminal
&lt;/h1&gt;

&lt;p&gt;I use it to CRUD between folders &amp;amp; files. Open projects in VS Code, manage Git in projects, use VIM, etc.&lt;/p&gt;

&lt;p&gt;I recommend you set up some aliases for the most common commands you type.&lt;/p&gt;

&lt;p&gt;For example, I have aliases to quickly move to folders like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias cdhp="cd h:/projects"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or run npm commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;alias nr="npm run"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#screen-to-gif"&gt;
  &lt;/a&gt;
  Screen to GIF
&lt;/h1&gt;

&lt;p&gt;I'm a frontend developer, so most of my work can be screenshotted or screengiffed (I made this word up) which is really useful when working remotely. I use Screen to GIF to quickly create GIFs of parts of the UI to show how it's going or working. This tool is really helpful to have better async conversations with different teams.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#todoist"&gt;
  &lt;/a&gt;
  Todoist
&lt;/h1&gt;

&lt;p&gt;Even tho at work I use Azure I like to keep a personal to-do list to keep track of tasks I'm working on. I pay the todoist subscription which is pretty reasonable to have everything in one place. There are other free alternatives like trello, notion and more.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#notion"&gt;
  &lt;/a&gt;
  Notion
&lt;/h1&gt;

&lt;p&gt;I use Notion only for documentation and taking notes. I find it pretty slow but haven't found any alternatives that I like. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#figma"&gt;
  &lt;/a&gt;
  Figma
&lt;/h1&gt;

&lt;p&gt;Even tho I usually don't participate in design processes Figma is really useful to create graphics for documentation. I used to do freelance UI Design, so I'm pretty comfortable with the tool. I'd recommend anyone who is working in Frontend development to get comfortable with Figma.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;These are all the tools I use on a daily basis. Only with these I can do my job 100% no problem. I believe that having more tools adds complexity to your day, so I try to keep it simple. I'd recommend you don't have too many tools in your belt and have a clear goal for each. &lt;/p&gt;

&lt;p&gt;I could keep track of tasks in Notion, but I prefer to use Notion only for documentation so that it doesn't get too messy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-what-are-your-tools-leave-a-comment-and-share-them"&gt;
  &lt;/a&gt;
  So, what are your tools? Leave a comment and share them!
&lt;/h1&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/jordienr"&gt;Twitter&lt;/a&gt; for more.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Docker for the frontend and backend development -just for local testing not for the deployment.</title>
      <author>vishwasnarayanre</author>
      <pubDate>Sun, 09 May 2021 08:16:28 +0000</pubDate>
      <link>https://dev.to/vishwasnarayan5/docker-for-the-frontend-and-backend-development-just-for-local-testing-not-for-the-deployment-1470</link>
      <guid>https://dev.to/vishwasnarayan5/docker-for-the-frontend-and-backend-development-just-for-local-testing-not-for-the-deployment-1470</guid>
      <description>&lt;p&gt;We now have a frontend and backend that work flawlessly on our local computer. Although you can get more out of this guide if you have finished the previous pieces, it can also be useful in general. The aim of this section is to ready our web applications for modern deployment.&lt;/p&gt;

&lt;p&gt;We want to be able to easily run our frontend and backend on every computer and scale the framework if necessary. There are several ways to do that, just as there are numerous ways to do something else. We'll use Docker for this series since it's been very successful in recent years. This guide is broken down into four sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Docker?&lt;/li&gt;
&lt;li&gt;Dockerizing the frontend&lt;/li&gt;
&lt;li&gt;Dockerizing the backend&lt;/li&gt;
&lt;li&gt;Running it all at once
#what is docker?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a great many clarifications on what docker is everywhere on the web. I need to contact the main parts however I will not go into subtleties here. My primary concerns were taken from this video. &lt;/p&gt;

&lt;p&gt;Lets say we fabricated our backend as container document and tried it locally. Presently we need to discover a spot in the cloud to run it. The primary test that we experience presently is that we can not ensure that our backend runs in the cloud actually as it does locally. Just if the cloud climate is equivalent to our neighborhood climate, we could make such a guarantee. To get the hole between our neighborhood and the cloud climate as little as conceivable we need to tell our cloud-supplier what we need. Nonetheless, as a cloud supplier you can not have 1,000,000 designers reveal to you how their individual cloud arrangement should resemble. That is the reason cloud-suppliers offer various bundles. They fluctuate between giving a (virtual) machine and giving us a static climate to run our application in. If there should arise an occurrence of an individual machine it is presently dependent upon us, the designer, to ensure the machine carries on as our nearby machine. That is too expensive time and is additionally costly as we don't actually require a whole machine. We simply need a spot to run our container record. If there should arise an occurrence of furnishing us with a static climate we would now need to ensure that our neighborhood climate acts something very similar. This isn't valuable all things considered. Precisely here becomes docker helpful. &lt;/p&gt;

&lt;p&gt;Docker gives a shared conviction and is in a real sense tantamount with genuine steel trailers. A banana-organization just stresses over how to get their bananas into the compartment. Whenever it is shut it does't make any difference what is in there. It is fundamentally dealt with like each and every other compartment and the delivery organizations realize how to function with it. Docker gives a standard that is adequately adaptable yet additionally ensures the product runs in the cloud a similar way it does locally. &lt;/p&gt;

&lt;p&gt;We use docker to make a docker-picture of our application. Simply picture we would copy it on a Compact disc. That picture is assemble utilizing a dockerfile that characterizes how the docker-picture ought to be constructed. That picture would then be able to be utilized inside a docker-compartment. &lt;/p&gt;

&lt;p&gt;Docker is an amazing asset and gives more valuable highlights (for example scaling). Anyway this isn't as important here.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#docker-for-the-frontend"&gt;
  &lt;/a&gt;
  Docker for the frontend
&lt;/h1&gt;

&lt;p&gt;Please ensure that you have docker configured before attempting to dockerize the frontend. In addition, in config.nuxt.js, we must examine our base url. Since, if we deploy our app in the cloud as is, it would still believe that our backend is accessible at localhost:8080. That is why we must remove every environment-specific element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extracting-environment-specific-variables"&gt;
  &lt;/a&gt;
  Extracting environment specific variables
&lt;/h2&gt;

&lt;p&gt;Please ensure that you have docker configured before you attempt to dockerize the frontend. Furthermore, in our frontend, we only have one environment variable, which is the URL of our backend.&lt;/p&gt;

&lt;p&gt;You will remember that in the &lt;code&gt;nuxt.config.js&lt;/code&gt; package, we used the proxy module. All that remains is to include the environment variables.&lt;/p&gt;

&lt;p&gt;If no value is available, we set it to the default value (&lt;a href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;), and we must check our base url in config.nuxt.js. Since, if we deploy our app in the cloud as is, it would still believe our backend is accessible at localhost:8080. As a result, we must remove any environment-specific variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROXY_API&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:8080/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, in our frontend folder, we'll make a dockerfile called frontend.dockerfile. The code in our docker file is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine3.12&lt;/span&gt;

&lt;span class="c"&gt;# Create an application directory&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /app

&lt;span class="c"&gt;# The /app directory should act as the main application directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Copy the app package and package-lock.json file&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; frontend/package*.json ./&lt;/span&gt;

&lt;span class="c"&gt;# Install node packages&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;# Copy or project directory (locally) in the current directory of our docker image (/app)&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; frontend/ .&lt;/span&gt;

&lt;span class="c"&gt;# Build the app&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm run build

&lt;span class="c"&gt;# Expose $PORT on container.&lt;/span&gt;
&lt;span class="c"&gt;# We use a varibale here as the port is something that can differ on the environment.&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; $PORT&lt;/span&gt;

&lt;span class="c"&gt;# Set host to localhost / the docker image&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NUXT_HOST=0.0.0.0&lt;/span&gt;

&lt;span class="c"&gt;# Set app port&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NUXT_PORT=$PORT&lt;/span&gt;

&lt;span class="c"&gt;# Set the base url&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PROXY_API=$PROXY_API&lt;/span&gt;

&lt;span class="c"&gt;# Set the browser base url&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; PROXY_LOGIN=$PROXY_LOGIN&lt;/span&gt;

&lt;span class="c"&gt;# Start the app&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "npm", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The remarks and comments on each line should hopefully clarify what's going on. To create the picture, simply type this command into the terminal. Be sure to run it from the root directory of your project!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build --file=frontend/frontend.dockerfile  -t playground-web-frontend .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;. : Full stop is very important&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;—file&lt;/code&gt; → The file to use for the build&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; → To identify our image we tag it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.&lt;/code&gt;→ The location of the build context (the app). In our case the current directory, referenced as.&lt;/p&gt;

&lt;p&gt;Until we can dockerize or backend, we must remove every environment-specific attribute, just as we did for our frontend.In our backend, we have two environment-specific variables. The address of our frontend and the address of our servers.&lt;/p&gt;

&lt;p&gt;The programme configures all environment-specific variables.&lt;/p&gt;

&lt;p&gt;The assets file is located in the resources folder. Each line includes a key and a value. For the value, we'll use an environment variable (provided by docker) or the default value. Put in the following code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;spring.data.mongodb.uri=${MONGODB_URI:mongodb://localhost:27017/todo}server.port=${PORT:8080}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may be wondering why we haven't already set the URI for mogoDB. That's because spring thought by default that the &lt;strong&gt;mongoDB&lt;/strong&gt; will be found at that URI. That will change once we put it in place. That's why we're extracting it. Heroku can use the server port in the following section of the tutorial.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; openjdk:15&lt;/span&gt;

&lt;span class="c"&gt;# Create an application directory&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /app

&lt;span class="c"&gt;# The /app directory should act as the main application directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="c"&gt;# Copy or project directory (locally) in the current directory of our docker image (/app)&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; backend/build/libs/*.jar ./app.jar&lt;/span&gt;

&lt;span class="c"&gt;# Expose $PORT on container.&lt;/span&gt;
&lt;span class="c"&gt;# We use a varibale here as the port is something that can differ on the environment.&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; $PORT&lt;/span&gt;

&lt;span class="c"&gt;# Start the app&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "java", "-jar", "./app.jar" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The remarks/comments on each line should hopefully clarify what's going on with the dockerfile.&lt;/p&gt;

&lt;p&gt;There is a significant disparity between the frontend- and backend-dockerfiles. The former holds the application's code. If we make improvements to the backend, we must first construct it with this command.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gradle build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To create the picture, simply type this command into the terminal. Again, make sure to run it from the root directory of your project!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker build --file=backend/backend.dockerfile  -t playground-web-backend .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;—file&lt;/code&gt; → The file to use for the build&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; → To identify our image we tag it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.&lt;/code&gt;→ The location of the build context (the app). In our case the current directory, referenced as.&lt;/p&gt;

&lt;p&gt;We'll use docker-compose to start it up now that we have everything we need. The docker compose command instructs Docker to launch the services (and which images) to use, as well as to set the environment variables. In the root folder of your project, create a new file called &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;playground-web-db&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongo:4.4&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;MONGO_INITDB_DATABASE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground-web&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;27017:27017&lt;/span&gt;
  &lt;span class="na"&gt;playground-web-frontend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground-web-frontend:latest&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;PORT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
      &lt;span class="na"&gt;PROXY_API&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http://playground-web-backend:8080/&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;3000:3000&lt;/span&gt;
  &lt;span class="na"&gt;playground-web-backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;playground-web-backend:latest&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;MONGODB_URI&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongodb://playground-web-db:27017/playground-web&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;8080:8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the app execute:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker-compose -f docker-compose.yml up&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thus you will have your application up and running.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>database</category>
      <category>html</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Data storage patterns, versioning and partitions</title>
      <author>Karun Japhet</author>
      <pubDate>Sun, 09 May 2021 08:07:10 +0000</pubDate>
      <link>https://dev.to/javatarz/data-storage-patterns-versioning-and-partitions-2han</link>
      <guid>https://dev.to/javatarz/data-storage-patterns-versioning-and-partitions-2han</guid>
      <description>&lt;p&gt;When you have large volumes of data, storing it logically helps users discover information and makes understanding the information easier. In this post, we talk about some of the techniques we use to do so in our application.&lt;/p&gt;

&lt;p&gt;In this post, we are going to use the terminology of AWS S3 buckets to store information. The same techniques can be applied on other cloud, non cloud providers and bare metal servers. Most setups will include a high bandwidth low latency network attached storage with proximity to the processing cluster or disks on HDFS if the entire platform uses HDFS. Your mileage may vary based on your team’s setup and use case. We are also going to talk about techniques which have allowed us to efficiently process this information using Apache Spark as our processing engine. Similar techniques are available for other data processing engines.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#managing-storage-on-disk"&gt;
  &lt;/a&gt;
  Managing storage on disk
&lt;/h1&gt;

&lt;p&gt;When you have large volumes of data, we have found it useful to separate data that comes in from the upstream providers (if any) from any insights we process and produce. This allows us to segregate access (different parts have different PII classifications) and apply different retention policies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/data-seggregation-using-buckets.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1e5krhrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/data-seggregation-using-buckets-622x422.png" alt="Data processing pipeline between various buckets and the operations performed when data moves from one bucket to the other"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would separate each of these datasets so it’s clear where each came from. When setting up the location to store your data, refer to local laws (like GDPR) for details on data residency requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provider-buckets"&gt;
  &lt;/a&gt;
  Provider buckets
&lt;/h2&gt;

&lt;p&gt;Providers tend to make their own directories to send us data. This allows them to have access over how long they want to retain data or if they need to modify information. Data is rarely modified but when it is, a heads up is given to re-process information.&lt;/p&gt;

&lt;p&gt;If this was an event driven system, we would have different event types suggesting that the data from an earlier date was modified. Since the volume of data is large and the batch nature of data transfer on our platform, verbal/written communication is preferred by our data providers which allows us to re-trigger our data pipelines for the affected days.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/provider-buckets-data-layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OjC53nV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/provider-buckets-data-layout-650x373.png" alt="The preferred layout of provider buckets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#landing-bucket"&gt;
  &lt;/a&gt;
  Landing bucket
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/landing-bucket-data-layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lSZXiQkj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/landing-bucket-data-layout-650x537.png" alt="Landing bucket data layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most data platforms either procure data or produce it internally. The usual mechanism is for a provider to write data into its own bucket and give its consumers (our platform) access. We copy the data into a landing bucket. This data is a full replica of what the provider gives us without any processing. Keeping data we received from the provider separate from data we process and insights we derive allows us to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure that we don’t accidentally share raw data with others (we are contractually obligated not to share source data)&lt;/li&gt;
&lt;li&gt;Apply different access policies to raw data when it contains any PII&lt;/li&gt;
&lt;li&gt;Preserve an untouched copy of the source if we ever have to re-process the data (providers delete data from their bucket within a month or so)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#core-bucket"&gt;
  &lt;/a&gt;
  Core bucket
&lt;/h2&gt;

&lt;p&gt;The data in the landing bucket might be in a format sub optimal for processing (like CSV). The data might also be dirty. We take this opportunity to clean up the data and change the format to something more suitable for processing. For our use case, a downstream pipeline usually consumes a part of what the upstream pipeline produces. Since only a subset of the data is read downstream by a single job, using a file format that allows optimized columnar reads helped us boost performance and thus we use formats like ORC and parquet in our system. The output after this cleanup and transformation is written to the core bucket (since this data is clean input that’s optimised for further processing and thus core to the functioning of the platform).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/core-bucket-data-layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HYM-B7Kc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/core-bucket-data-layout-650x757.png" alt="Core bucket data layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While landing has an exact replica of what the data provider gave us, core’s raw data just transforms it to a more appropriate format (parquet/ORC for our use case) and processing applies some data cleanup strategies, adds meta-data and a few processed columns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#derived-bucket"&gt;
  &lt;/a&gt;
  Derived bucket
&lt;/h2&gt;

&lt;p&gt;Your data platform probably has multiple models running on top of the core data that produce multiple insights. We write the output for each of these into its own directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.karun.me/assets/images/uploads/derived-bucket-data-layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-yrTcV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.karun.me/assets/images/uploads/derived-bucket-data-layout-650x1312.png" alt="Derived bucket data layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-data-segregation"&gt;
  &lt;/a&gt;
  Advantages of data segregation
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Separating the data makes it easier to find the data. When you have terabytes or petabytes of information across your organisation with multiple teams working on this data platform, it becomes easy to lose track of the information that is already available and it can be hard to find it if they are stored in different places. Having some way to find information is helpful. For us, separating the data by whether we get it from an upstream system, we produce it or we send it out to a downstream system helps teams find information easily.&lt;/li&gt;
&lt;li&gt;Different rules apply to different datasets. You might be obligated to delete data from raw information you have purchased under certain conditions (like when they have PII). Rules for retaining derived data are different if it does not contain any PII.&lt;/li&gt;
&lt;li&gt;Most platforms allow archiving of data. Separating the dataset makes it easier to archive different datasets. (we’ll talk about other aspects of archiving during data partitioning)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#data-partitioning"&gt;
  &lt;/a&gt;
  Data partitioning
&lt;/h1&gt;

&lt;p&gt;Partitioning is a technique that allows your processing engine (like Spark) to read data more efficiently thus making the program more efficient. The most optimal way to partition data is based on the way it is read, written and/or processed. Since most data is written once and read multiple times, optimising a dataset for reads makes sense.&lt;/p&gt;

&lt;p&gt;We create a core bucket for each region we operate in (based on data residency laws of the area). For example, since the EU data cannot leave the EU, we create a derived-bucket in one of the regions in the EU. Under this bucket, we separate the data based on the country, the model that’s producing the data, a version of the data (based on its schema) and the date partition based on which the data was created.&lt;/p&gt;

&lt;p&gt;Reading data from a path like &lt;code&gt;derived-bucket/country=uk/model=alpha/version=1.0&lt;/code&gt; will give you a data set with columns year, month and day. This is useful when you are looking for data across different dates. When filtering the data based on a certain month, frameworks like spark allow the use of &lt;a href="https://medium.com/inspiredbrilliance/spark-optimization-techniques-a192e8f7d1e4"&gt;push down predicates&lt;/a&gt; making reads more efficient.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#data-versioning"&gt;
  &lt;/a&gt;
  Data versioning
&lt;/h1&gt;

&lt;p&gt;We change the version of the data every time there is a breaking change. Our versioning strategy is similar to the one talked about in the book for &lt;a href="https://www.databaserefactoring.com/"&gt;Database Refactoring&lt;/a&gt; with a few changes for scale. The book talks about many types of refactoring and the &lt;a href="http://www.agiledata.org/essays/renameColumn.html"&gt;column rename&lt;/a&gt; is a common and interesting use case.&lt;/p&gt;

&lt;p&gt;Since the data volume is comparatively low in databases (megabytes to gigabytes), migrating everything to the latest schema is (comparatively) inexpensive. It is important to make sure the application is usable at all points and that there is no point at which the application is not usable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#versioning-on-large-data-sets"&gt;
  &lt;/a&gt;
  Versioning on large data sets
&lt;/h2&gt;

&lt;p&gt;When the data volume is high (think terabytes to petabytes), running migrations like this is a very expensive process in terms of the time and resources taken. Also, the application downtime during the migration is large or there’s 2 copies of the dataset created (which makes storage more expensive).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#non-breaking-schema-changes"&gt;
  &lt;/a&gt;
  Non breaking schema changes
&lt;/h3&gt;

&lt;p&gt;Let’s say you have a dataset that maps the real names to superhero names that you have written to &lt;code&gt;model=superhero-identities/year=2021/month=05/day=01&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+--------------+-----------------+
|  real_name   | superhero_name  |
+--------------+-----------------+
| Tony Stark   | Iron Man        |
| Steve Rogers | Captain America |
+--------------+-----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next day, if you would like to add their home location, you can write the following data set to the directory &lt;code&gt;day=02&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+------------------+----------------+--------------------------+
|    real_name     | superhero_name |      home_location       |
+------------------+----------------+--------------------------+
| Bruce Banner     | Hulk           | Dayton, Ohio             |
| Natasha Romanoff | Black Widow    | Stalingrad, Soviet Union |
+------------------+----------------+--------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Soon after, you realize that storing the real name is too risky. The data you have already published was public knowledge but moving forward, you would like to stop publishing real names. Thus on &lt;code&gt;day=03&lt;/code&gt;, you remove the &lt;code&gt;real_name&lt;/code&gt; column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------------+---------------------------+
| superhero_name |       home_location       |
+----------------+---------------------------+
| Spider-Man     | Queens, New York          |
| Ant-Man        | San Francisco, California |
+----------------+---------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you read &lt;code&gt;derived-bucket/country=uk/model=superhero-identities/&lt;/code&gt; using spark, the framework will read the first schema and use it to read the entire dataset. As a result, you do not see the new &lt;code&gt;home_location&lt;/code&gt; column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scala&amp;gt; spark.read.
  parquet("model=superhero-identities").
  show()
+----------------+---------------+----+-----+---+
|       real_name| superhero_name|year|month|day|
+----------------+---------------+----+-----+---+
|Natasha Romanoff|    Black Widow|2021|    5|  2|
|    Bruce Banner|           Hulk|2021|    5|  2|
|            null|        Ant-Man|2021|    5|  3|
|            null|     Spider-Man|2021|    5|  3|
|    Steve Rogers|Captain America|2021|    5|  1|
|      Tony Stark|       Iron Man|2021|    5|  1|
+----------------+---------------+----+-----+---+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Asking Spark to merge the schema for you shows all columns (with missing values shown as &lt;code&gt;null&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;scala&amp;gt; spark.read.option("mergeSchema", "true").
  parquet("model=superhero-identities").
  show()
+----------------+---------------+--------------------+----+-----+---+
|       real_name| superhero_name|       home_location|year|month|day|
+----------------+---------------+--------------------+----+-----+---+
|Natasha Romanoff|    Black Widow|Stalingrad, Sovie...|2021|    5|  2|
|    Bruce Banner|           Hulk|        Dayton, Ohio|2021|    5|  2|
|            null|        Ant-Man|San Francisco, Ca...|2021|    5|  3|
|            null|     Spider-Man|    Queens, New York|2021|    5|  3|
|    Steve Rogers|Captain America|                null|2021|    5|  1|
|      Tony Stark|       Iron Man|                null|2021|    5|  1|
+----------------+---------------+--------------------+----+-----+---+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As your model’s schema evolves, using features like merge schema allows you to read the available data across various partitions and then process it. While we have showcased spark’s abilities to merge schemas for parquet files, such capabilities are also available with other file formats.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breaking-changes-or-parallel-runs"&gt;
  &lt;/a&gt;
  Breaking changes or parallel runs
&lt;/h3&gt;

&lt;p&gt;Sometimes, you evolve and improve your model. It is useful to do &lt;a href="https://en.wikipedia.org/wiki/Parallel_running"&gt;parallel runs&lt;/a&gt; and compare the result to verify that it is indeed better before the business switches to use the newer version.&lt;/p&gt;

&lt;p&gt;In such cases we bump up the version of the solution. Let’s assume job alpha v1.0.36 writes to the directory &lt;code&gt;derived-bucket/country=uk/model=alpha/version=1.0&lt;/code&gt;. When we have a newer version of the model (that either has a very different schema or has to be run in parallel), we bump the version of the job (and the location it writes to) to 2.0 making the job alpha v2.0.0 and it’s output directory &lt;code&gt;derived-bucket/country=uk/model=alpha/version=2.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If this change was made and deployed on 1st of Feb and this job runs daily, the latest date partition under &lt;code&gt;model=alpha/version=1.0&lt;/code&gt; will be &lt;code&gt;year=2020/month=01/day=31&lt;/code&gt;. From the 1st of Feb, all data will be written to the &lt;code&gt;model=alpha/version=2.0&lt;/code&gt; directory. If the data in version 2.0 is not sufficient for the business on 1st Feb, we either run backfill jobs to get more data under this partition or we run both version 1 and 2 until version 2’s data is ready to be used by the business.&lt;/p&gt;

&lt;p&gt;The version on disk represents the version of the schema and can be matched up with the versioning of the artifact when using &lt;a href="https://semver.org"&gt;Semantic Versioning&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Each version partition on disk has the same schema (making reads easier)&lt;/li&gt;
&lt;li&gt;Downstream systems can choose when to migrate from one version to another&lt;/li&gt;
&lt;li&gt;A new version can be tested out without affecting the existing data pipeline chain&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;Applications, system architecture and your data &lt;a href="https://evolutionaryarchitecture.com/"&gt;always evolve&lt;/a&gt;. Your decisions in how you store and access your data affect your system’s ability to evolve. Using techniques like versioning and partitioning helps your system continue to evolve with minimal overhead cost. Thus, we recommend integrating these techniques into your product at its inception so the team has a strong foundation to build upon.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href="https://www.linkedin.com/in/sanjoyb/"&gt;Sanjoy&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/anaynayak/"&gt;Anay&lt;/a&gt; &lt;a href="https://www.linkedin.com/in/sathishmandapaka/"&gt;Sathish&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/jayant-p/"&gt;Jayant&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/priyaaank/"&gt;Priyank&lt;/a&gt; for their draft reviews and early feedback. Thanks to &lt;a href="https://www.linkedin.com/in/nikita-oliver/"&gt;Niki&lt;/a&gt; for using her artwork wizardry skills.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>bigdata</category>
      <category>spark</category>
      <category>s3</category>
    </item>
    <item>
      <title>Rust CI with GitHub Actions</title>
      <author>Candy</author>
      <pubDate>Sun, 09 May 2021 07:38:20 +0000</pubDate>
      <link>https://dev.to/bampeers/rust-ci-with-github-actions-1ne9</link>
      <guid>https://dev.to/bampeers/rust-ci-with-github-actions-1ne9</guid>
      <description>&lt;p&gt;CI(Continuous Integration) is a concept that would interest most developers in a collaborative environment. CI automates the post-coding process of building and testing rather than doing it manually.&lt;/p&gt;

&lt;p&gt;Through CI, developers can smoothly integrate their code with other people’s code. This allows developers to focus on coding without wasting their time on integration, which in turn increases productivity.&lt;/p&gt;

&lt;p&gt;However, setting up CI can be troublesome and time-consuming, so developers have to decide the extent their CI process will cover.&lt;/p&gt;

&lt;p&gt;In our case, we implemented a CI workflow for the Rust projects on GitHub Actions which includes linting, testing, code coverage reporting on CodeCov, and building for release.&lt;/p&gt;

&lt;p&gt;Through this article, we hope you can have an easier time implementing CI for your Rust projects. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#related-resources"&gt;
  &lt;/a&gt;
  Related Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;: A feature on GitHub that allows users to &lt;em&gt;act(run a script)&lt;/em&gt; on event triggers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/actions-rs"&gt;action-rs&lt;/a&gt;: A collection of commonly used GitHub Actions for Rust projects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codecov.io"&gt;CodeCov&lt;/a&gt;: A service that visualizes code coverage reports&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h1&gt;

&lt;p&gt;Example project using the workflow is uploaded in: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BamPeers"&gt;
        BamPeers
      &lt;/a&gt; / &lt;a href="https://github.com/BamPeers/rust-ci-github-actions-workflow"&gt;
        rust-ci-github-actions-workflow
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Rust project template with CI workflow in GitHub Actions
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#root-directory"&gt;
  &lt;/a&gt;
  Root Directory
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;.gitignore: A list of files for git to ignore&lt;/li&gt;
&lt;li&gt;Cargo.toml: The manifest file for this cargo package&lt;/li&gt;
&lt;li&gt;README.md: The project manual&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#githubworkflows"&gt;
  &lt;/a&gt;
  .github/workflows/
&lt;/h2&gt;

&lt;p&gt;This directory contains the workflow files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;check-and-lint.yaml : Workflow for linting the code by running cargo check, fmt, and clippy&lt;/li&gt;
&lt;li&gt;release-packaging.yaml : Workflow for building the file and uploading the result as a downloadable artifact&lt;/li&gt;
&lt;li&gt;test.yaml : Workflow for running tests, measuring code coverage, and uploading respective results to GitHub and CodeCov&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#src"&gt;
  &lt;/a&gt;
  src/
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;lib.rs : A stub library file that includes an example function and test code&lt;/li&gt;
&lt;li&gt;main.rs : The main executable that runs and prints the result of the function in lib.rs&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#workflows"&gt;
  &lt;/a&gt;
  Workflows
&lt;/h1&gt;

&lt;p&gt;The following is a simple explanation of the included workflows. Check out our project &lt;a href="https://github.com/BamPeers/rust-ci-github-actions-workflow"&gt;README&lt;/a&gt; for a more detailed explanation.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Check and Lint&lt;/strong&gt; and &lt;strong&gt;Test with Code Coverage&lt;/strong&gt; workflows run on pull requests and on pushing to the main branch. The &lt;strong&gt;Release Packaging&lt;/strong&gt; workflow runs on pushing to the main branch.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-and-lint-checkandlintyaml"&gt;
  &lt;/a&gt;
  Check and Lint (check-and-lint.yaml)
&lt;/h2&gt;

&lt;p&gt;This workflow checks for compiler errors and code style inconsistencies.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Check job&lt;/strong&gt; runs &lt;code&gt;cargo check&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Rustfmt job&lt;/strong&gt; runs &lt;code&gt;cargo fmt --check&lt;/code&gt;. You can add a &lt;code&gt;rustfmt.toml&lt;/code&gt; or &lt;code&gt;.rustfmt.toml&lt;/code&gt; to configure the code style.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Clippy job&lt;/strong&gt; runs &lt;a href="https://github.com/rust-lang/rust-clippy"&gt;clippy&lt;/a&gt; through &lt;a href="https://github.com/actions-rs/clippy-check"&gt;actions-rs/clippy-check@v1&lt;/a&gt;.&lt;br&gt;
You can add a &lt;code&gt;clippy.toml&lt;/code&gt; or &lt;code&gt;.clippy.toml&lt;/code&gt; to configure the style.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#test-with-code-coverage-testyaml"&gt;
  &lt;/a&gt;
  Test with Code Coverage (test.yaml)
&lt;/h2&gt;

&lt;p&gt;This workflow runs tests, outputs test results, and publishes code coverage results on &lt;a href="https://codecov.io/"&gt;CodeCov&lt;/a&gt;.&lt;br&gt;
Publishing test results and code coverage data is done in one job to avoid running the tests twice.&lt;/p&gt;

&lt;p&gt;The environment variables for the job are set as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;PROJECT_NAME_UNDERSCORE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;rust_ci_github_actions_workflow&lt;/span&gt;
    &lt;span class="na"&gt;CARGO_INCREMENTAL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="na"&gt;RUSTFLAGS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort&lt;/span&gt;
    &lt;span class="na"&gt;RUSTDOCFLAGS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;-Cpanic=abort&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;PROJECT_NAME_UNDERSCORE&lt;/code&gt; environment variable should be replaced with your project name with - as _. Other environment variables are for code coverage.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Test job&lt;/strong&gt;, first, looks for a cache of the dependencies based on the hash of &lt;code&gt;Cargo.lock&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, it runs &lt;code&gt;cargo test&lt;/code&gt; on nightly Rust and uses &lt;code&gt;cargo2junit&lt;/code&gt; to generate a JUnit format test result. And, it runs &lt;code&gt;grcov&lt;/code&gt; and &lt;code&gt;rust-covfix&lt;/code&gt; to generate proper code coverage data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate test result and coverage report&lt;/span&gt;
    &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;cargo install cargo2junit grcov rust-covfix;&lt;/span&gt;
        &lt;span class="s"&gt;cargo test --features coverage $CARGO_OPTIONS -- -Z unstable-options --format json | cargo2junit &amp;gt; results.xml;&lt;/span&gt;
        &lt;span class="s"&gt;zip -0 ccov.zip `find . \( -name "$PROJECT_NAME_UNDERSCORE*.gc*" \) -print`;&lt;/span&gt;
        &lt;span class="s"&gt;grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" --ignore "tests/*" -o lcov.info;&lt;/span&gt;
        &lt;span class="s"&gt;rust-covfix -o lcov_correct.info lcov.info;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test results are uploaded through &lt;a href="https://github.com/EnricoMi/publish-unit-test-result-action"&gt;EnricoMi/publish-unit-test-result-action@v1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Code coverage results are uploaded to CodeCov through &lt;a href="https://github.com/codecov/codecov-action"&gt;codecov/codecov-action@v1&lt;/a&gt;. For private repositories, add your token from CodeCov repository setting to GitHub Secrets and uncomment the line: &lt;code&gt;token: ${{ secrets.CODECOV_TOKEN }}&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#release-packaging-releasepackagingyaml"&gt;
  &lt;/a&gt;
  Release Packaging (release-packaging.yaml)
&lt;/h2&gt;

&lt;p&gt;This workflow builds the package in release mode and uploads the resulting file as a GitHub artifact.&lt;/p&gt;

&lt;p&gt;The included job uploads the project binary in &lt;code&gt;target/release&lt;/code&gt; as an artifact through &lt;a href="https://github.com/actions/upload-artifact"&gt;actions/upload-artifact@v2&lt;/a&gt;.&lt;br&gt;
You can configure which files to upload.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outcome"&gt;
  &lt;/a&gt;
  Outcome
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/BamPeers/rust-ci-github-actions-workflow/pull/1"&gt;Example pull request&lt;/a&gt; with a failing test and clippy warning can be found in our repository. &lt;br&gt;
Any failing job will block merging&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clippy"&gt;
  &lt;/a&gt;
  Clippy
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The action outputs result (&lt;strong&gt;Clippy Output&lt;/strong&gt; added to a random workflow).
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWvpoMEU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmtp0h9an82orf366f5a.png" alt="Screen Shot 2021-05-01 at 6.06.28 PM"&gt;
&lt;/li&gt;
&lt;li&gt;For pull requests, it adds annotations on the diff.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GF9GbfAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7ym1xfiibdqeob3otv.png" alt="Screen Shot 2021-05-01 at 7.43.44 PM"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#test-result"&gt;
  &lt;/a&gt;
  Test Result
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The action outputs the test result (&lt;strong&gt;Test Results&lt;/strong&gt; added to a random workflow).
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WhuNMdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e65gc2awy7pc5m9u7rm5.png" alt="Screen Shot 2021-05-01 at 6.05.25 PM"&gt;
&lt;/li&gt;
&lt;li&gt;For pull requests, the action adds a comment containing the test results.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wz08rclb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk2baz1fakm8exu1pqcr.png" alt="Screen Shot 2021-05-01 at 7.00.21 PM"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-coverage"&gt;
  &lt;/a&gt;
  Code coverage
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Code coverage results can be seen on your CodeCov repository.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hkcrWqv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byh4punhp9vzvo45uj78.png" alt="Screen Shot 2021-05-01 at 6.56.49 PM"&gt;
&lt;/li&gt;
&lt;li&gt;For pull requests, the action adds a comment containing the code coverage report.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NAyWPGst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2rwexgtiw5eala1hu0b.png" alt="Screen Shot 2021-05-01 at 7.00.33 PM"&gt;
&lt;/li&gt;
&lt;li&gt;You can also add a CodeCov badge on your README to display the coverage percentage like we did on ours. It can be found in the &lt;code&gt;Setting &amp;gt; Badge&lt;/code&gt; section of your CodeCov repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#release-packaging"&gt;
  &lt;/a&gt;
  Release Packaging
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Artifacts can be downloaded from the Summary tab of the workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#github-pull-request-checks"&gt;
  &lt;/a&gt;
  GitHub Pull Request Checks
&lt;/h2&gt;

&lt;p&gt;You can set status checks as required for merging in &lt;code&gt;Settings &amp;gt; Branches &amp;gt; Branch protection rules&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a0DZVLC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06j2mfk60rpz142jn70c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a0DZVLC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06j2mfk60rpz142jn70c.png" alt="Screen Shot 2021-05-01 at 7.47.38 PM"&gt;&lt;/a&gt;&lt;br&gt;
When one or more jobs fail, the PR merge box will look something like below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2mJ7IDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hhkf0batw7un4pbpzzh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2mJ7IDM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hhkf0batw7un4pbpzzh.png" alt="Screen Shot 2021-05-01 at 7.46.21 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We introduced CI for our Rust project through GitHub Actions. With this, the lint-build-test(+code coverage) process starts automatically when we push our code. &lt;/p&gt;

&lt;p&gt;Questions and suggestions are welcome in the comment section.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>githubactions</category>
      <category>ci</category>
      <category>devops</category>
    </item>
    <item>
      <title>Working with Go Embed</title>
      <author>Aditya</author>
      <pubDate>Sun, 09 May 2021 07:26:53 +0000</pubDate>
      <link>https://dev.to/adi73/working-with-go-embed-2mh7</link>
      <guid>https://dev.to/adi73/working-with-go-embed-2mh7</guid>
      <description>&lt;p&gt;With the release of Go-1.16, Go released a core package called &lt;em&gt;embed&lt;/em&gt;. This post will cover the various ways we can use Go Embed and build applications with ease.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building a Web Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Golang being a versatile language, it is very much capable of being used to write server for web applications.&lt;br&gt;
We would be using React as the front-end for this and expose the full scale web application from a single Golang binary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App Structure&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4cbY1Hki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6z9ozfev5nauk58klr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4cbY1Hki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6z9ozfev5nauk58klr5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Project root, we maintain the server in the root and expose the client from within the client folder.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt; --&amp;gt; main driver of the application from which the server is started and the client is exposed statically&lt;/p&gt;

&lt;p&gt;&lt;code&gt;main.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//go:embed client/build
var content embed.FS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Golang 1.16 comes with the go:embed directive.&lt;br&gt;
We just specify the target folder which we want to map to our server.&lt;/p&gt;

&lt;p&gt;Exposing the app on the root of your running server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mux.HandleFunc("/", rootHandler)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a function called &lt;code&gt;rootHandler&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;rootHandler&lt;/code&gt; exposes the static content onto the &lt;code&gt;/&lt;/code&gt; endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func rootHandler(w http.ResponseWriter, req *http.Request) {
    upath := req.URL.Path
    if !strings.HasPrefix(upath, "/") {
        upath = "/" + upath
        req.URL.Path = upath
    }
    upath = path.Clean(upath)
    fsys := fs.FS(content)
    contentStatic, _ := fs.Sub(fsys, "client/build")
    if _, err := contentStatic.Open(strings.TrimLeft(upath, "/")); err != nil {
        req.URL.Path = "/"
    }
    http.FileServer(http.FS(contentStatic)).ServeHTTP(w, req)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is enough for exposing the static build of the react app via a Golang server.&lt;/p&gt;

&lt;p&gt;Building the Golang Binary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GOOS=linux go build -o server main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the server binary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now once this is tested on a localhost, we can build a Docker Image for this WebApp.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM golang:1.16.3 As build-env

ENV GO111MODULE=on

ADD server /opt/app/

WORKDIR /opt/app/

RUN ls -lrt

EXPOSE 9191

CMD ["./server"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Docker Build and Run Command&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t server:v1.0 .
docker run -d -p 9000:9191 server:v1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to use the golang:1.16.3 image as the embed feature is available post the Golang 1.16 release.&lt;/p&gt;

&lt;p&gt;Overall we can say that introduction of go:embed has made some previous complicated tasks much simpler. We can now expose a full fledged web application with a single golang binary and expose it on any platform.&lt;/p&gt;

&lt;p&gt;To read more about go:emebed use the following references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/go1.16#library-embed"&gt;Golang Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/go1.16#embed"&gt;Go-Embed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>react</category>
    </item>
  </channel>
</rss>
