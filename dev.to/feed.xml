<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Comment fonctionne le Async / Await en javascript ?</title>
      <author> Eric Le Codeur</author>
      <pubDate>Fri, 25 Jun 2021 13:58:01 +0000</pubDate>
      <link>https://dev.to/ericlecodeur/comment-fonctionne-le-async-await-en-javascript-3kf9</link>
      <guid>https://dev.to/ericlecodeur/comment-fonctionne-le-async-await-en-javascript-3kf9</guid>
      <description>&lt;h2&gt;Synchrone vs Asynchrone&lt;/h2&gt;

&lt;p&gt;Le code &lt;b&gt;synchrone&lt;/b&gt; est exécuté ligne par ligne. Chaque ligne de code attend toujours la fin de la ligne précédente avant d'exécuter la suivante. Alors évidemment, le problème est qu'une opération longue durée bloquera l'exécution du code.&lt;/p&gt;

&lt;p&gt;Le code &lt;b&gt;asynchrone&lt;/b&gt; quant à lui n'est pas bloquant, alors il n'attend pas la fin d'une autre tâche.&lt;/p&gt;

&lt;p&gt;Un exemple d'asynchrone en javascript est la fonction fetch() Fetch) permet d'obtenir des données (généralement en format JSON) à un serveur web de manière dynamique (sans bloqué l'exécution du code et sans recharger la page)&lt;/p&gt;

&lt;p&gt;Une fonction asynchrone moderne comme fetch() renvoie une promesse. aka, un conteneur/espace réservé pour un résultat futur. Le futur résultat/valeur est la réponse de l'appel fetch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Exemple d'une fonction fetch() renvoyant une promesse&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://example.com/api/cats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Retourne une promesse&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Promise {&amp;lt;pending&amp;gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Une promesse est en attente jusqu'à ce qu'elle soit réglée (terminé). Il peut avoir deux statuts réglés : accompli (succès) ou rejeté (erreur).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Exemple d'une fonction fetch() renvoyant une promesse&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCatsImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// La fonction fetch() renvoie une promesse&lt;/span&gt;
  &lt;span class="c1"&gt;// Lorsque la promesse est remplie, la fonction s'exécute&lt;/span&gt;
  &lt;span class="c1"&gt;// Le résultat est contenu dans le paramètre data&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://example.com/api/cats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;loadCatImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Gestion des erreurs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCatsImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// La fonction fetch() renvoie une promesse&lt;/span&gt;
  &lt;span class="c1"&gt;// Lorsque la promesse est remplie, la fonction s'exécute&lt;/span&gt;
  &lt;span class="c1"&gt;// Le résultat est contenu dans le paramètre data&lt;/span&gt;
  &lt;span class="c1"&gt;// Si y il a erreur la fonction catch() va s'éxécuter&lt;/span&gt;
  &lt;span class="c1"&gt;// La fonction finally() s'éxécute dans tous les cas&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://example.com/api/cats&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;loadCatImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Run after both&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Créer une promesse&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wait over&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// wait over&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Async / Await&lt;/em&gt;&lt;br&gt;
La fonction async et le mot-clé await ont été introduits comme une extension des promesses. Ils ont été introduits pour rendre la programmation asynchrone basée sur des promesses plus lisible. Async/await simplifie simplement la syntaxe utilisée pour consommer une promesse.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Async exécute la fonction en mode asynchrone&lt;/span&gt;
&lt;span class="c1"&gt;// et retourne une promesse&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Await met en pause le bloc de fonction asynchrone du code&lt;/span&gt;
  &lt;span class="c1"&gt;// jusqu'à ce que la promesse retourne un résultat&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wait over&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Catch error in async/await&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wait over&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// You can also throw error up to calling parent&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Le mot-clé await ne peut être utilisé que dans une fonction Async. Donc, pour utiliser await dans le module principal, vous devez créer un IIFE (fonction immédiatement invoquée)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getCats&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Même concept mais avec l'opérateur then()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;getCats&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cats&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cats&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exécuter des promesses en parallèle&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// const cats = await getCats()&lt;/span&gt;
  &lt;span class="c1"&gt;// const dogs = await getDogs()&lt;/span&gt;
  &lt;span class="c1"&gt;// utiliser Promise.all pour exécution en parallèle&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;getCats&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;getDogs&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// Promise.All returne un tableau&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;//cats&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;//dogs&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>french</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 25th June 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 25 Jun 2021 13:39:49 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-25th-june-2021-4lfk</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-25th-june-2021-4lfk</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-typestat"&gt;
  &lt;/a&gt;
  1. TypeStat
&lt;/h3&gt;

&lt;p&gt;Converts JavaScript to TypeScript and TypeScript to better TypeScript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/JoshuaKGoldberg"&gt;
        JoshuaKGoldberg
      &lt;/a&gt; / &lt;a href="https://github.com/JoshuaKGoldberg/TypeStat"&gt;
        TypeStat
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Converts JavaScript to TypeScript and TypeScript to better TypeScript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
TypeStat&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c75d761946b6f116c0d2d187d94c121bb7a099b5bf730e5240b34f18e24a19d2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d3134636332312e737667"&gt;&lt;img src="https://camo.githubusercontent.com/c75d761946b6f116c0d2d187d94c121bb7a099b5bf730e5240b34f18e24a19d2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d3134636332312e737667" alt="Code Style: Prettier"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/853846df44bcf2e897655825c0fa0ed8ab6729830d3482884dd93cb7ac991a5a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747970657363726970742d7374726963742d696e666f726d6174696f6e616c2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/853846df44bcf2e897655825c0fa0ed8ab6729830d3482884dd93cb7ac991a5a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747970657363726970742d7374726963742d696e666f726d6174696f6e616c2e737667" alt="TypeScript: Strict"&gt;&lt;/a&gt;
&lt;a href="https://circleci.com/gh/JoshuaKGoldberg/TypeStat" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/71aa48a0132caf1a58aac06cc5070e388bec431f004e0188698a771fe3eba85f/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f6275696c642f6769746875622f4a6f736875614b476f6c64626572672f54797065537461742e737667" alt="Circle CI"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/TypeStat/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/73ea8764491961dea961749a112e5f48bd06a37f2095e1755943e998efedc9cb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d6769747465722d696e666f726d6174696f6e616c2e737667" alt="Join the chat at https://gitter.im/TypeStat/community"&gt;&lt;/a&gt;
&lt;a href="http://badge.fury.io/js/typestat" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d7cbdef4773981647330614efd3afc1910006dd1980305b186a7da5024f45b2c/68747470733a2f2f62616467652e667572792e696f2f6a732f74797065737461742e737667" alt="NPM version"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Converts JavaScript to TypeScript&lt;/strong&gt; &lt;em&gt;and TypeScript to better TypeScript.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;TypeStat is a CLI utility that modifies TypeScript types in existing code
The built-in mutators will only ever add or remove types and will never change your runtime behavior
TypeStat can:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;
✨ Convert JavaScript files to TypeScript in a single bound!&lt;/li&gt;
    &lt;li&gt;
✨ Add TypeScript types on files freshly converted from JavaScript to TypeScript!&lt;/li&gt;
    &lt;li&gt;
✨ Infer types to fix &lt;code&gt;--noImplicitAny&lt;/code&gt; and &lt;code&gt;--noImplicitThis&lt;/code&gt; violations!&lt;/li&gt;
    &lt;li&gt;
✨ Annotate missing &lt;code&gt;null&lt;/code&gt;s and &lt;code&gt;undefined&lt;/code&gt;s to get you started with &lt;code&gt;--strictNullChecks&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⚡ To start, the &lt;code&gt;typestat&lt;/code&gt; command will launch an interactive guide to setting up a configuration file. ⚡&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npx typestat&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;👋 Welcome to TypeStat&lt;span class="pl-k"&gt;!&lt;/span&gt; 👋
This will create a new typestat.json &lt;span class="pl-k"&gt;for&lt;/span&gt; you.
...&lt;/pre&gt;

&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;After, use &lt;strong&gt;&lt;code&gt;typestat --config typestat.json&lt;/code&gt;&lt;/strong&gt; to convert your files.&lt;/p&gt;
&lt;h3&gt;
Configuration&lt;/h3&gt;
&lt;p&gt;To get a deeper understanding of TypeStat, read the following docs pages in order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/JoshuaKGoldberg/TypeStat/main/./docs/Usage.md"&gt;Usage.md&lt;/a&gt;&lt;/strong&gt; for an…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/JoshuaKGoldberg/TypeStat"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-package-phobia"&gt;
  &lt;/a&gt;
  2. Package Phobia
&lt;/h3&gt;

&lt;p&gt;Find the cost of adding a new dependency to your project. Package Phobia reports the size of an npm package before you install it.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/styfle"&gt;
        styfle
      &lt;/a&gt; / &lt;a href="https://github.com/styfle/packagephobia"&gt;
        packagephobia
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ⚖️ Find the cost of adding a new dependency to your project
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0991393ef82069525894307741b8ad89080137c60d9a07c11bdd8c1346b4ba02/68747470733a2f2f7061636b61676570686f6269612e636f6d2f6c6f676f2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/0991393ef82069525894307741b8ad89080137c60d9a07c11bdd8c1346b4ba02/68747470733a2f2f7061636b61676570686f6269612e636f6d2f6c6f676f2e737667" width="40" height="40"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Package Phobia&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/styfle/packagephobia/actions?workflow=Tests"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dOBHt_84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/styfle/packagephobia/workflows/Tests/badge.svg" alt="tests"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/220e0920e0cf995086391a2fbb86456139f589c66b917efd56507a693cfd1802/68747470733a2f2f62616467656e2e6e65742f757074696d652d726f626f742f7765656b2f6d3738333930383936382d653638616631653838666539643033333039393131623733"&gt;&lt;img src="https://camo.githubusercontent.com/220e0920e0cf995086391a2fbb86456139f589c66b917efd56507a693cfd1802/68747470733a2f2f62616467656e2e6e65742f757074696d652d726f626f742f7765656b2f6d3738333930383936382d653638616631653838666539643033333039393131623733" alt="uptime"&gt;&lt;/a&gt;
&lt;a href="https://lgtm.com/projects/g/styfle/packagephobia/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2893a19772817d9c0b41130ab39508d92d71a09ec0152d21801ce941e2796f8f/68747470733a2f2f62616467656e2e6e65742f6c67746d2f67726164652f6a6176617363726970742f672f737479666c652f7061636b61676570686f6269613f6c6162656c3d7175616c697479" alt="lgtm"&gt;&lt;/a&gt;
&lt;a href="https://github.com/prettier/prettier"&gt;&lt;img src="https://camo.githubusercontent.com/97699b17a26c275f5ca5c17ad861961b2efb93c04bdb7829f9c9bf210466ac28/68747470733a2f2f62616467656e2e6e65742f62616467652f7374796c652f70726574746965722f666636396234" alt="style: prettier"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://turnoff.us/geek/npm-install/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7bb0b231ecd235d78ca695019c2d3937f32ec39d93e304ffef20ae43b7ef8dca/68747470733a2f2f7475726e6f66662e75732f696d6167652f656e2f6e706d2d696e7374616c6c2e706e67" width="300" height="400"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
⚖️ Find the cost of adding a new dependency to your project&lt;/li&gt;
&lt;li&gt;
🕗 Save yourself time and disk space with this web app&lt;/li&gt;
&lt;li&gt;
📈 Detect javascript bloat over time with a chart&lt;/li&gt;
&lt;li&gt;
🛡️ Get a badge/shield for your README&lt;/li&gt;
&lt;li&gt;
📡 Fetch size from json API to integrate into any tool&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;...as seen on &lt;a href="https://medium.com/npm-inc/87f3bd77529#1883" rel="nofollow"&gt;npm weekly&lt;/a&gt; and &lt;a href="https://ponyfoo.com/weekly/111/how-css-works-integration-testing-angular-6-optimizing-react-and-the-future-of-javascript" rel="nofollow"&gt;ponyfoo weekly&lt;/a&gt; and &lt;a href="https://habr.com/company/zfort/blog/354060/" rel="nofollow"&gt;habr&lt;/a&gt; and &lt;a href="https://www.rwpod.com/posts/2018/04/23/podcast-06-16.html" rel="nofollow"&gt;rwpod&lt;/a&gt; and &lt;a href="https://michael-wolfenden.github.io/2018/04/20/april-20th-2018/" rel="nofollow"&gt;wolf report&lt;/a&gt; and &lt;a href="https://changelog.com/news/find-the-cost-of-adding-a-new-dependency-to-your-project-gbj6" rel="nofollow"&gt;the changelog&lt;/a&gt; and all over twitter&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
What is the purpose?&lt;/h2&gt;
&lt;p&gt;Package Phobia reports the size of an npm package &lt;em&gt;before&lt;/em&gt; you install it.&lt;/p&gt;
&lt;p&gt;This is useful for inspecting potential &lt;code&gt;dependencies&lt;/code&gt; or &lt;code&gt;devDependencies&lt;/code&gt; without using up precious disk space or waiting minutes for &lt;code&gt;npm install&lt;/code&gt;. Ain't nobody got time for dat.&lt;/p&gt;
&lt;p&gt;Results are saved so the first person might wait a bit to view package size, but everyone else gets to see the results instantly!&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://packagephobia.com" rel="nofollow"&gt;Demo&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;A good use case might be…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/styfle/packagephobia"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-denodb"&gt;
  &lt;/a&gt;
  3. DenoDB
&lt;/h3&gt;

&lt;p&gt;MySQL, SQLite, MariaDB, PostgreSQL and MongoDB ORM for Deno. Simple, typed API&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/eveningkid"&gt;
        eveningkid
      &lt;/a&gt; / &lt;a href="https://github.com/eveningkid/denodb"&gt;
        denodb
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      MySQL, SQLite, MariaDB, PostgreSQL and MongoDB ORM for Deno
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/eveningkid/denodb/master/./design/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQWrvIbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/eveningkid/denodb/master/./design/logo.png" height="150"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
DenoDB&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
🗣Supports PostgreSQL, MySQL, MariaDB, SQLite and MongoDB&lt;/li&gt;
&lt;li&gt;
🔥Simple, typed API&lt;/li&gt;
&lt;li&gt;
🦕Deno-ready&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eveningkid.github.io/denodb-docs" rel="nofollow"&gt;Read the documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-ts position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-smi"&gt;DataTypes&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-smi"&gt;Database&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-smi"&gt;Model&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-smi"&gt;PostgresConnector&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'https://deno.land/x/denodb/mod.ts'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;connection&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-smi"&gt;PostgresConnector&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;host&lt;/span&gt;: &lt;span class="pl-s"&gt;'...'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;username&lt;/span&gt;: &lt;span class="pl-s"&gt;'user'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;password&lt;/span&gt;: &lt;span class="pl-s"&gt;'password'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;database&lt;/span&gt;: &lt;span class="pl-s"&gt;'airlines'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;db&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-smi"&gt;Database&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;connection&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-smi"&gt;Flight&lt;/span&gt; &lt;span class="pl-k"&gt;extends&lt;/span&gt; &lt;span class="pl-smi"&gt;Model&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-c1"&gt;table&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s"&gt;'flights'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-c1"&gt;timestamps&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-c1"&gt;fields&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;id&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;primaryKey&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c1"&gt;autoIncrement&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;departure&lt;/span&gt;: &lt;span class="pl-smi"&gt;DataTypes&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;STRING&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;destination&lt;/span&gt;: &lt;span class="pl-smi"&gt;DataTypes&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;STRING&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;flightDuration&lt;/span&gt;: &lt;span class="pl-smi"&gt;DataTypes&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;FLOAT&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

  &lt;span class="pl-k"&gt;static&lt;/span&gt; &lt;span class="pl-c1"&gt;defaults&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;flightDuration&lt;/span&gt;: &lt;span class="pl-c1"&gt;2.5&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;

&lt;span class="pl-s1"&gt;db&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;link&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-smi"&gt;Flight&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;await&lt;/span&gt; &lt;span class="pl-s1"&gt;db&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;sync&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;drop&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;await&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/eveningkid/denodb"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-size-limit"&gt;
  &lt;/a&gt;
  4. Size Limit
&lt;/h3&gt;

&lt;p&gt;Calculate the real cost to run your JS app or lib to keep good performance. Show error in pull request if the cost exceeds the limit.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ai"&gt;
        ai
      &lt;/a&gt; / &lt;a href="https://github.com/ai/size-limit"&gt;
        size-limit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Calculate the real cost to run your JS app or lib to keep good performance. Show error in pull request if the cost exceeds the limit.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Size Limit &lt;a href="http://cultofmartians.com/tasks/size-limit-config.html" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1096cbef605f5e835f4fb7d98461e27e595dec7647ff3acfa06c1fc0b174b8cc/687474703a2f2f63756c746f666d61727469616e732e636f6d2f6173736574732f6261646765732f62616467652e737667" alt="Cult Of Martians"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/1a4603ab9faf244c245c8fe4d1bd348240ec9f40989d3fb59333ea1b9119d011/68747470733a2f2f61692e6769746875622e696f2f73697a652d6c696d69742f6c6f676f2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/1a4603ab9faf244c245c8fe4d1bd348240ec9f40989d3fb59333ea1b9119d011/68747470733a2f2f61692e6769746875622e696f2f73697a652d6c696d69742f6c6f676f2e737667" alt="Size Limit logo by Anton Lovchikov" width="120" height="178"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Size Limit is a performance budget tool for JavaScript. It checks every commit
on CI, calculates the real cost of your JS for end-users and throws an error
if the cost exceeds the limit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;ES modules&lt;/strong&gt; and &lt;strong&gt;tree-shaking&lt;/strong&gt; support.&lt;/li&gt;
&lt;li&gt;Add Size Limit to &lt;strong&gt;Travis CI&lt;/strong&gt;, &lt;strong&gt;Circle CI&lt;/strong&gt;, &lt;strong&gt;GitHub Actions&lt;/strong&gt;
or another CI system to know if a pull request adds a massive dependency.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modular&lt;/strong&gt; to fit different use cases: big JS applications
that use their own bundler or small npm libraries with many files.&lt;/li&gt;
&lt;li&gt;Can calculate &lt;strong&gt;the time&lt;/strong&gt; it would take a browser
to download and &lt;strong&gt;execute&lt;/strong&gt; your JS. Time is a much more accurate
and understandable metric compared to the size in bytes.&lt;/li&gt;
&lt;li&gt;Calculations include &lt;strong&gt;all dependencies and polyfills&lt;/strong&gt;
used in your JS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ai/size-limit/main/./img/example.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1dHNpvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ai/size-limit/main/./img/example.png" alt="Size Limit CLI" width="738"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;&lt;a href="https://github.com/andresz1/size-limit-action"&gt;GitHub action&lt;/a&gt;&lt;/strong&gt; Size Limit will post bundle size changes as a comment
in pull request discussion.&lt;/p&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/andresz1/size-limit-action/master/assets/pr.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--daWu0sWX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/andresz1/size-limit-action/master/assets/pr.png" alt="Size Limit comment in pull request about bundle size changes" width="686" height="289"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;--why&lt;/code&gt;, Size Limit…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ai/size-limit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#5-holmes"&gt;
  &lt;/a&gt;
  5. Holmes
&lt;/h3&gt;

&lt;p&gt;Fast and easy searching inside a page. Holmes filters a list of elements based on the value of a input in just ~2KB.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Haroenv"&gt;
        Haroenv
      &lt;/a&gt; / &lt;a href="https://github.com/Haroenv/holmes"&gt;
        holmes
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fast and easy searching inside a page
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;a href="https://www.npmjs.com/package/holmes.js" rel="nofollow"&gt;&lt;img alt="Holmes.js" src="https://camo.githubusercontent.com/20215d7f4ab898cbc4b1321182ba0a23a6f3318043dc12cc27635ae08fe8af60/68747470733a2f2f6861726f656e2e6d652f686f6c6d65732f696d616765732f6c6f676f2e706e67" height="50px"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Fast and easy searching inside a page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/Haroenv/holmes" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2cbc660c5db3220c6a0bb847b448c391baefc3ddad8c0a60fb55689cf35f72ae/68747470733a2f2f7472617669732d63692e6f72672f4861726f656e762f686f6c6d65732e7376673f6272616e63683d67682d7061676573" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/Haroenv/holmes" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/094f63fa36113195a1caa5cce568a6276c3fb8a560e65ad535619d299b15ddc9/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f4861726f656e762f686f6c6d65732f62616467652e737667" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="https://yarnpkg.com/en/package/holmes.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4a8f44f33ab50991123ff1ca1df788f75de8b8102e08159bfae7e555ba46823f/68747470733a2f2f62616467652e667572792e696f2f6a732f686f6c6d65732e6a732e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://badge.fury.io/bo/holmes.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8e89459ed64dd53e4a24a4b2940f0a7751b0b6cd7def75d80619d5f374e1d7fb/68747470733a2f2f62616467652e667572792e696f2f626f2f686f6c6d65732e6a732e737667" alt="Bower version"&gt;&lt;/a&gt;
&lt;a href="https://cdnjs.com/libraries/holmes.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7e94edb6529abb71da9808c45ee3f43246ad8e71d0f221b1678a5645dfc7a802/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f686f6c6d65732e6a732e7376673f636f6c6f72423d677265656e" alt="CDNJS version"&gt;&lt;/a&gt;
&lt;a href="https://gitter.im/Haroenv/holmes?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e7497d435cb1a40de9648ebc1bb70a80520df5395b568ed0eae7392c0399248a/68747470733a2f2f6261646765732e6769747465722e696d2f4861726f656e762f686f6c6d65732e737667" alt="Join the chat at https://gitter.im/Haroenv/holmes"&gt;&lt;/a&gt;
&lt;a href="https://unpkg.com/holmes.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3cce3fd359d96eaef5df0989dad252d29d19421b0e398baa013177c3c92c00f3/687474703a2f2f696d672e626164676573697a652e696f2f68747470733a2f2f756e706b672e636f6d2f686f6c6d65732e6a732f6a732f686f6c6d65732e6a733f636f6d7072657373696f6e3d677a6970" alt="gzipped size"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Holmes filters a list of elements based on the value of a &lt;code&gt;input&lt;/code&gt; in just ~2KB.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;You can install Holmes with either &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;bower&lt;/code&gt; under the package name &lt;code&gt;holmes.js&lt;/code&gt;. For &lt;code&gt;npm&lt;/code&gt; that looks like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;$ yarn add holmes.js &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or via npm&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;After which you can add it in your page with i.e. webpack, rollup, browserify or loading the module in a different script tag.&lt;/p&gt;
&lt;p&gt;You have to make sure that you have a &lt;code&gt;css&lt;/code&gt; rule for the class &lt;code&gt;.hidden&lt;/code&gt; that hides elements however you want. One option is to have this:&lt;/p&gt;
&lt;div class="highlight highlight-source-css position-relative js-code-highlight"&gt;
&lt;pre&gt;.&lt;span class="pl-c1"&gt;hidden&lt;/span&gt; {
  &lt;span class="pl-c1"&gt;display&lt;/span&gt;&lt;span class="pl-kos"&gt;:&lt;/span&gt; none
}&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;but this could be any &lt;code&gt;css&lt;/code&gt; you want.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://haroen.me/holmes/" rel="nofollow"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
When should I use it?&lt;/h3&gt;
&lt;p&gt;You should use Holmes when&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you have a limited amount of items&lt;/li&gt;
&lt;li&gt;you don't need typo-tolerance&lt;/li&gt;
&lt;li&gt;you only want to add a really small library&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Haroenv/holmes"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#6-reactheadroom"&gt;
  &lt;/a&gt;
  6. react-headroom
&lt;/h3&gt;

&lt;p&gt;Hide your header until you need it.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/KyleAMathews"&gt;
        KyleAMathews
      &lt;/a&gt; / &lt;a href="https://github.com/KyleAMathews/react-headroom"&gt;
        react-headroom
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Hide your header until you need it
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
react-headroom&lt;/h1&gt;
&lt;p&gt;Hide your header until you need it.&lt;/p&gt;
&lt;h2&gt;
Demo&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://kyleamathews.github.io/react-headroom" rel="nofollow"&gt;http://kyleamathews.github.io/react-headroom&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;npm install react-headroom&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;A simple example, &lt;a href="http://kyleamathews.github.io/react-headroom/" rel="nofollow"&gt;see the docs site&lt;/a&gt;
for more examples and documentation.&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Headroom&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;h1&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;You can put anything you'd like inside the Headroom Component&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;h1&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;Headroom&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/KyleAMathews/react-headroom"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#7-react-interview-questions-amp-answers"&gt;
  &lt;/a&gt;
  7. React Interview Questions &amp;amp; Answers
&lt;/h3&gt;

&lt;p&gt;List of top 500 ReactJS Interview Questions &amp;amp; Answers. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sudheerj"&gt;
        sudheerj
      &lt;/a&gt; / &lt;a href="https://github.com/sudheerj/reactjs-interview-questions"&gt;
        reactjs-interview-questions
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      List of top 500 ReactJS Interview Questions &amp;amp; Answers....Coding exercise questions are coming soon!!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React Interview Questions &amp;amp; Answers&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Click ⭐if you like the project. Pull Request are highly appreciated. Follow me &lt;a href="https://twitter.com/SudheerJonna" rel="nofollow"&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
        &lt;a href="https://www.fullstack.cafe/?utm_source=github&amp;amp;utm_medium=sud" rel="nofollow"&gt;
            3600 Tech Interview Questions. &lt;b&gt;Answered&lt;/b&gt;
            &lt;div&gt;
                &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4xC4Pdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/13550565/76382460-cc784d80-6393-11ea-8837-2b89265ac853.png" width="150" alt="FullStack.Cafe"&gt;
            &lt;/div&gt;
        &lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
Learn to code and get hired with &lt;a href="https://zerotomastery.io/?utm_source=github&amp;amp;utm_medium=sponsor&amp;amp;utm_campaign=reactjs-interview-questions" rel="nofollow"&gt;Zero To Mastery:&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;This &lt;a href="https://links.zerotomastery.io/react_sudheer" rel="nofollow"&gt;React course&lt;/a&gt; is good if you’re struggling to learn React beyond the basics&lt;/li&gt;
&lt;li&gt;This &lt;a href="http://links.zerotomastery.io/mci_sudheer" rel="nofollow"&gt;coding interview bootcamp&lt;/a&gt; is helpful if you’re serious about getting hired as a developer&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repository is specific to ReactJS. Please check &lt;a href="https://github.com/sudheerj/javascript-interview-questions"&gt;Javascript Interview questions&lt;/a&gt; for core javascript questions.&lt;/p&gt;
&lt;h2&gt;
Downloading PDF/Epub formats&lt;/h2&gt;
&lt;p&gt;You can download the PDF and Epub version of this repository from the latest run on the &lt;a href="https://github.com/sudheerj/reactjs-interview-questions/actions"&gt;actions tab&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Table of Contents&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Questions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Core React&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react"&gt;What is React?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-major-features-of-react"&gt;What are the major features of React?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jsx"&gt;What is JSX?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-element-and-component"&gt;What is the difference between Element and Component?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-components-in-react"&gt;How to create components in React?&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;a href="https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-to-use-a-class-component-over-a-function-component"&gt;When to use&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sudheerj/reactjs-interview-questions"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#8-introjs"&gt;
  &lt;/a&gt;
  8. Intro.js
&lt;/h3&gt;

&lt;p&gt;Lightweight, user-friendly onboarding tour library&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/usablica"&gt;
        usablica
      &lt;/a&gt; / &lt;a href="https://github.com/usablica/intro.js"&gt;
        intro.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Lightweight, user-friendly onboarding tour library
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Intro.js&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/usablica/intro.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/251efe1914b903d8e342e8b7517e0246ee8dad9030d8c80d20a38df9f0b7fa3a/68747470733a2f2f7472617669732d63692e6f72672f757361626c6963612f696e74726f2e6a732e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://www.jsdelivr.com/package/npm/intro.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fb816aae9d954721ddfab638dabdd43435ab17b572877eb4e26bcd42c820052b/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f696e74726f2e6a732f6261646765" alt=""&gt;&lt;/a&gt;
&lt;a href="https://www.jsdelivr.com/package/npm/intro.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1a8043af76e3c074733f609a39711f9a0a4ff9f1f035e702186c0aff64302471/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f696e74726f2e6a73" alt="npm"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lightweight, user-friendly onboarding tour library&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/usablica/intro.js/gh-pages/img/introjs-demo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9lUjgjJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/usablica/intro.js/gh-pages/img/introjs-demo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Where to get&lt;/h2&gt;
&lt;p&gt;You can obtain your local copy of Intro.js from:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; This github repository, using &lt;code&gt;git clone https://github.com/usablica/intro.js.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; Using bower &lt;code&gt;bower install intro.js --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; Using npm &lt;code&gt;npm install intro.js --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4)&lt;/strong&gt; Download it from CDN (&lt;a href="http://www.jsdelivr.com/projects/intro.js" rel="nofollow"&gt;1&lt;/a&gt;, &lt;a href="https://cdnjs.com/libraries/intro.js" rel="nofollow"&gt;2&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;
How to use&lt;/h2&gt;
&lt;p&gt;Intro.js can be added to your site in three simple steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Include &lt;code&gt;intro.js&lt;/code&gt; and &lt;code&gt;introjs.css&lt;/code&gt; (or the minified version for production) in your page. Use &lt;code&gt;introjs-rtl.min.css&lt;/code&gt; for Right-to-Left language support.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CDN hosted files are available at &lt;a href="http://www.jsdelivr.com/projects/intro.js" rel="nofollow"&gt;jsDelivr&lt;/a&gt; (click Show More) &amp;amp; &lt;a href="https://cdnjs.com/libraries/intro.js" rel="nofollow"&gt;cdnjs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; Add &lt;code&gt;data-intro&lt;/code&gt; and &lt;code&gt;data-step&lt;/code&gt; to your HTML elements. To add hints you should use &lt;code&gt;data-hint&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;a&lt;/span&gt; &lt;span class="pl-c1"&gt;href&lt;/span&gt;='&lt;span class="pl-s"&gt;http://google.com/&lt;/span&gt;' &lt;span class="pl-c1"&gt;data-intro&lt;/span&gt;='&lt;span class="pl-s"&gt;Hello step one!&lt;/span&gt;'&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;a&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;See all attributes &lt;a href="https://introjs.com/docs/intro/attributes/" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; Call this JavaScript function:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-en"&gt;introJs&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;start&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/usablica/intro.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-clipboardjs"&gt;
  &lt;/a&gt;
  9. clipboard.js
&lt;/h3&gt;

&lt;p&gt;Modern copy to clipboard. No Flash. Just 3kb gzipped.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zenorocha"&gt;
        zenorocha
      &lt;/a&gt; / &lt;a href="https://github.com/zenorocha/clipboard.js"&gt;
        clipboard.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ✂️ Modern copy to clipboard. No Flash. Just 3kb gzipped 📋
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
clipboard.js&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/zenorocha/clipboard.js/workflows/build/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2biRUVio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/zenorocha/clipboard.js/workflows/build/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/1f5d5876eaf35711a403f40550d6ae77c268dd0bfef7234bec96c4bc16e831c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6b696c6c696e672d666c6173682d627269676874677265656e2e7376673f7374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/1f5d5876eaf35711a403f40550d6ae77c268dd0bfef7234bec96c4bc16e831c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6b696c6c696e672d666c6173682d627269676874677265656e2e7376673f7374796c653d666c6174" alt="Killing Flash"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Modern copy to clipboard. No Flash. Just 3kb gzipped.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://clipboardjs.com/" rel="nofollow"&gt;&lt;img width="728" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZsYvBkW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cloud.githubusercontent.com/assets/398893/16165747/a0f6fc46-349a-11e6-8c9b-c5fd58d9099c.png" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Why&lt;/h2&gt;
&lt;p&gt;Copying text to the clipboard shouldn't be hard. It shouldn't require dozens of steps to configure or hundreds of KBs to load. But most of all, it shouldn't depend on Flash or any bloated framework.&lt;/p&gt;
&lt;p&gt;That's why clipboard.js exists.&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;You can get it on npm.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;npm install clipboard --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or if you're not into package management, just &lt;a href="https://github.com/zenorocha/clipboard.js/archive/master.zip"&gt;download a ZIP&lt;/a&gt; file.&lt;/p&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;p&gt;First, include the script located on the &lt;code&gt;dist&lt;/code&gt; folder or load it from &lt;a href="https://github.com/zenorocha/clipboard.js/wiki/CDN-Providers"&gt;a third-party CDN provider&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;dist/clipboard.min.js&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now, you need to instantiate it by &lt;a href="https://github.com/zenorocha/clipboard.js/blob/master/demo/constructor-selector.html#L18"&gt;passing a DOM selector&lt;/a&gt;, &lt;a href="https://github.com/zenorocha/clipboard.js/blob/master/demo/constructor-node.html#L16-L17"&gt;HTML element&lt;/a&gt;, or &lt;a href="https://github.com/zenorocha/clipboard.js/blob/master/demo/constructor-nodelist.html#L18-L19"&gt;list of HTML elements&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-v"&gt;ClipboardJS&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'.btn'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Internally, we need to fetch all elements that matches with your selector and attach event listeners for each one. But guess…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zenorocha/clipboard.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#10-nextsitemap"&gt;
  &lt;/a&gt;
  10. next-sitemap
&lt;/h3&gt;

&lt;p&gt;Sitemap generator for next.js. Generate sitemap(s) and robots.txt for all static/pre-rendered/dynamic/server-side pages.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iamvishnusankar"&gt;
        iamvishnusankar
      &lt;/a&gt; / &lt;a href="https://github.com/iamvishnusankar/next-sitemap"&gt;
        next-sitemap
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Sitemap generator for next.js. Generate sitemap(s) and robots.txt for all static/pre-rendered/dynamic/server-side pages.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
next-sitemap&lt;/h1&gt;
&lt;p&gt;Sitemap generator for next.js. Generate sitemap(s) and robots.txt for all static/pre-rendered/dynamic/server-side pages.&lt;/p&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Getting started
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamvishnusankar/next-sitemap/master/#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamvishnusankar/next-sitemap/master/#create-config-file"&gt;Create config file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamvishnusankar/next-sitemap/master/#building-sitemaps"&gt;Building sitemaps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamvishnusankar/next-sitemap/master/#splitting-large-sitemap-into-multiple-files"&gt;Splitting large sitemap into multiple files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamvishnusankar/next-sitemap/master/#configuration-options"&gt;Configuration Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamvishnusankar/next-sitemap/master/#custom-transformation-function"&gt;Custom transformation function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamvishnusankar/next-sitemap/master/#full-configuration-example"&gt;Full configuration example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/iamvishnusankar/next-sitemap/master/#generating-dynamicserver-side-sitemaps"&gt;Generating dynamic/server-side sitemaps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting started&lt;/h2&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add next-sitemap -D&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Create config file&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;next-sitemap&lt;/code&gt; requires a basic config file (&lt;code&gt;next-sitemap.js&lt;/code&gt;) under your project root&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;✅ &lt;code&gt;next-sitemap&lt;/code&gt; now loads environment variables from &lt;code&gt;.env&lt;/code&gt; files by default.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-smi"&gt;module&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;exports&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;siteUrl&lt;/span&gt;: &lt;span class="pl-s1"&gt;process&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;env&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;SITE_URL&lt;/span&gt; &lt;span class="pl-c1"&gt;||&lt;/span&gt; &lt;span class="pl-s"&gt;'https://example.com'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;generateRobotsTxt&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-c"&gt;// (optional)&lt;/span&gt;
  &lt;span class="pl-c"&gt;// ...other options&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Building sitemaps&lt;/h3&gt;
&lt;p&gt;Add next-sitemap as your postbuild script&lt;/p&gt;
&lt;div class="highlight highlight-source-json position-relative js-code-highlight"&gt;
&lt;pre&gt;{
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;build&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;next build&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;postbuild&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;next-sitemap&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
}&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Having &lt;code&gt;next-sitemap&lt;/code&gt; command &amp;amp; &lt;code&gt;next-sitemap.js&lt;/code&gt; file may result in file opening instead of building sitemaps in windows machines. &lt;a href="https://github.com/iamvishnusankar/next-sitemap/issues/61#issuecomment-725999452"&gt;Please read more about the issue&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/iamvishnusankar/next-sitemap"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  Top risers over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/maaslalani/slides"&gt;Slides&lt;/a&gt; +1,056 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +908 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/algorithm-visualizer/algorithm-visualizer"&gt;Algorithm Visualizer&lt;/a&gt; +884 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +864 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tailwindlabs/tailwindcss"&gt;Tailwindcss&lt;/a&gt; +791 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 7 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/maaslalani/slides"&gt;Slides&lt;/a&gt; +41%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nanostores/nanostores"&gt;Nano Stores&lt;/a&gt; +34%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wellyshen/react-cool-virtual"&gt;React Virtual Cool&lt;/a&gt; +27%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/millionjs/million"&gt;Million&lt;/a&gt; +17%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/naver/egjs-flicking"&gt;Flicking&lt;/a&gt; +17%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  Top risers over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; +11,825 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +7,051 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +5,253 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/slidevjs/slidev"&gt;Slidev&lt;/a&gt; +4,050 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/trekhleb/javascript-algorithms"&gt;JavaScript Algorithms&lt;/a&gt; +3,029 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  Top growth(%) over last 30 days
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/withfig/autocomplete"&gt;Fig&lt;/a&gt; +74%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/epicmaxco/vuestic-ui"&gt;Vuestic UI&lt;/a&gt; +59%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/joe-bell/plaiceholder"&gt;Plaiceholder&lt;/a&gt; +50%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/naver/egjs-flicking"&gt;Flicking&lt;/a&gt; +41%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/slidevjs/slidev"&gt;Slidev&lt;/a&gt; +39%&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://www.iainfreestone.com"&gt;www.iainfreestone.com&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/iain_freestone"&gt;follow me&lt;/a&gt; on Twitter where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tools for Web Developers To Work Smarter and not Harder</title>
      <author>Victor Ikechukwu</author>
      <pubDate>Fri, 25 Jun 2021 13:30:23 +0000</pubDate>
      <link>https://dev.to/mr_victor/tools-for-web-developers-to-work-smarter-and-not-harder-3c0</link>
      <guid>https://dev.to/mr_victor/tools-for-web-developers-to-work-smarter-and-not-harder-3c0</guid>
      <description>&lt;blockquote&gt;
     "A man is only as good as his tools" &lt;br&gt;
        &lt;span&gt; -Emmert Wolf&lt;/span&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the software development industry. This would closely mean &lt;code&gt;A Developer is only as good as his tools&lt;/code&gt;. As the difference in the productivity levels of two developers with the same technical knowledge is sometimes based on their toolset.&lt;/p&gt;

&lt;p&gt;Hello There 👋, Beautiful Coder on the internet. Welcome back to my blog. In this blog, I write articles about tech, programming, and my life as a teenage developer. In this article, I'm going to round up some of the most interesting front-end developer tools of 2021. Which you will definitely find useful for your own development workflow.&lt;/p&gt;

&lt;p&gt;The key to being a productive developer is to work smarter and not harder. using tools that speed up most of the tasks that you do. Making you more productive and simplify your work.&lt;/p&gt;

&lt;p&gt;These development tools aren't really the most popular or hottest in 2021 👉👈, but they do come in handy for me, simplifying my work and making me more productive. As am sure they will too for you 😏. Already excited, let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-developer"&gt;
  &lt;/a&gt;
  ⚙️ Web Developer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QrsLOuJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612731404/SSf1J7EqO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QrsLOuJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612731404/SSf1J7EqO.png" alt="chrispederick.com_work_web-developer_ (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First up, &lt;a href=""&gt;Web Developer&lt;/a&gt;. This is definitely my favorite tool in the list, hence it comes first 😄. The &lt;a href="https://chrispederick.com/work/web-developer/"&gt;Web Developer&lt;/a&gt; is a browser extension that comes bundled with various &lt;strong&gt;web developer tools&lt;/strong&gt;.  Web Developer extension adds various web developer tools to a browser. Add it to your web browser and take development to the next level. The extension is available for Chrome, Firefox, and Opera.&lt;/p&gt;

&lt;p&gt;Once installed. you can open a panel like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zseYAdHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612685949/eBEbhkMYS.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zseYAdHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612685949/eBEbhkMYS.webp" alt="menu-600.webp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That gives you access to lot of amazing commands like, Toggle CSS and JavaScript for a site on or off, view the semantic structure of a site, inspect how it looks on various screen sizes, disable images to see if the have alt text. The list is endless 😄. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quokkajs"&gt;
  &lt;/a&gt;
  QUOKKA.JS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HnMqRHAS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624613505289/wMtE2-GM-.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HnMqRHAS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624613505289/wMtE2-GM-.webp" alt="QUOKKA.JS"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;RAPID JAVASCRIPT PROTOTYPING IN YOUR EDITOR&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quokkajs.com/"&gt;Quokka&lt;/a&gt; is a developer productivity tool, That helps developers to rapidly prototype JavaScript or Typescript Code right in their code editor. Quokka makes &lt;strong&gt;prototyping&lt;/strong&gt;,&lt;strong&gt;learning&lt;/strong&gt; and &lt;strong&gt;testing&lt;/strong&gt; JavaScript and Typescript code &lt;strong&gt;blazingly fast&lt;/strong&gt;. With Quokka, there are no configurations required by default. All you need to do is simply start up a JavaScript/Typescript file and you are ready to go 👍. &lt;/p&gt;

&lt;p&gt;To get started using Quokka, you can install it as an extension in your code editor. Head over to their website and get the version for your code editor and directions on how to set it up. Quokka has two editions, The &lt;strong&gt;Community&lt;/strong&gt; edition which is free for everyone but has a few limitations, &lt;code&gt;bear this in mind 👀&lt;/code&gt;. And a commercial &lt;strong&gt;Pro&lt;/strong&gt; edition that provides some additional features but you have to pay for it.&lt;/p&gt;

&lt;p&gt;Here's a sneak peek of it in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yl7QXEPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624611653071/IQrIHNHvN.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yl7QXEPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624611653071/IQrIHNHvN.gif" alt="vsc-live.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-lighthouse"&gt;
  &lt;/a&gt;
  Google Lighthouse
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfPHG5dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612660170/pxznS8mUJ.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfPHG5dc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612660170/pxznS8mUJ.webp" alt="Google Lighthouse"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Coding is a very demanding task. And as such, it is common to make mistakes, decrease the overall quality of your site. And that's where Google Lighthouse comes in.&lt;br&gt;
&lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;Google Lighthouse&lt;/a&gt; is an open-source, automated development tool for testing/improving the quality of your web pages. &lt;/p&gt;

&lt;p&gt;Google Lighthouse lets you audit(examine) your web applications based on several parameters, including performance, accessibility, mobile compatibility, Progressive Web App (PWA) implementations, SEO, and more. All you have to do is run it on a page or pass it a URL, sit back and get a very elaborate report with amazing feedback on how to improve the quality and performance of your site. All  in just a few clicks. &lt;/p&gt;

&lt;p&gt;You can get started with Google Lighthouse if you have the &lt;a href="https://www.google.com/chrome/browser/desktop/?"&gt;Google Chrome for Desktop&lt;/a&gt; Browser. Or If you are a fan of the Command-Line, then you can use the &lt;a href="https://www.npmjs.com/package/lighthouse?&amp;amp;url=151?&amp;amp;url=85"&gt;Lighthouse NPM package &lt;/a&gt; and its CLI.&lt;/p&gt;

&lt;p&gt;See this article on &lt;a href="https://flexiple.com/developers/using-google-lighthouse-to-audit-your-web-application/"&gt;using Google Lighthouse &lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#grammerly"&gt;
  &lt;/a&gt;
  Grammerly
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ivPE6q68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612455290/b5wNLimow.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ivPE6q68--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612455290/b5wNLimow.webp" alt="grammarly"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;Say Goodbye to Textfails&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One for the Technical writers. &lt;a href="https://www.grammarly.com/"&gt;Grammerly&lt;/a&gt; is a writing assistant that puts your writing at its best. Grammerly scans what you write for common grammatical mistakes (like misused commas) and complex ones (like misplaced modifiers). Personally, as a technical writer. Grammerly has really helped me improve my writing skills and confidence in blogging, which has lead to better typo-free quality articles. As am sure it will for you 🙌.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webflow"&gt;
  &lt;/a&gt;
  Webflow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7UMh0-n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624611874913/s18KYlOot.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7UMh0-n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624611874913/s18KYlOot.webp" alt="webflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.webflow.com/"&gt;Web flow&lt;/a&gt; provides a modern way for pretty much anyone (even non-technical people) to design and build for the web. It is a free low-code platform for rapidly building custom responsive web apps in a visual canvas with no code. It automatically generates Html, CSS, and JavaScript codes from your designs. That your team can quickly import and plugin into the site's codebase.&lt;/p&gt;

&lt;p&gt;With the help of Webflow, designing and building responsive web apps becomes as easy as drag and drop the UI components you need. There is no need to spend days or even months making UI/UX decisions, fighting with state management, setting up access control, or re-inventing the wheel. Saving everyone the stress of &lt;strong&gt;repetitively coding everything from scratch&lt;/strong&gt; 😍. This is especially helpful if you freelance. Designing and launching web pages would only take a matter of days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tabnine"&gt;
  &lt;/a&gt;
  Tabnine
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KGxtTnVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612177967/t4F_xCv-k.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KGxtTnVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612177967/t4F_xCv-k.webp" alt="Tabnine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everyone's favorite AI code autocompletion tool 😄. Trusted by over 1 million developers in all programming languages. &lt;a href="https://www.tabnine.com/"&gt;Tabnine&lt;/a&gt; helps developers write code with some magics. It's based on a system of deep learning to help developers &lt;strong&gt;code faster, reduce mistakes, and discover best coding practices&lt;/strong&gt; using Machine Learning. It removes the burden of having to remember code syntax and lets you actually focus on writing &lt;strong&gt;good&lt;/strong&gt; code. And writing it faster, which is the whole point of writing this article, right? 😏. start using Tabnine today to 10X your workflow 😎, by installing it as an extension in your code editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css"&gt;
  &lt;/a&gt;
  Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1FhLn5Qx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612126087/j9ZW6jaV3.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1FhLn5Qx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624612126087/j9ZW6jaV3.webp" alt="Tailwind CSS "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; is a utility-first framework for rapidly building custom user interface (UI) components. This means that, unlike other CSS libraries, it doesn’t provide pre-styled components and classes that’ll have all your projects looking the same (insert Bootstrap). Instead, it provides low-level utility classes for styling virtually every single CSS property like padding (e.g. pt-10), flex (e.g. justify-between), color (e.g. blue-600), and so on. This way, you get to build &lt;strong&gt;unique custom interfaces&lt;/strong&gt;, &lt;strong&gt;make better design decisions&lt;/strong&gt; because it limits your choices via limited class variations. You’ll also never have to worry about naming CSS classes anymore. In fact, With Tailwind CSS. you may almost never need to &lt;strong&gt;write CSS again&lt;/strong&gt;. Awesome, right? 😃&lt;/p&gt;

&lt;p&gt;If you want to start using Tailwind CSS for your project, see this article on &lt;a href="https://blog.logrocket.com/tailwind-css-is-it-tomorrows-bootstrap-ebe560f9d00b/"&gt;getting started with Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dailydev"&gt;
  &lt;/a&gt;
  Daily.dev
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://daily.dev/"&gt;Daily.dev&lt;/a&gt; is a news aggregator, especially for software developers. to help them stay up to date with the latest news in tech. With daily.dev, you will stay updated with the best articles from the best tech publications on any topic. Get all the content you love in one place -- CSS-Tricks, Smashing Magazine, web.dev, hashnode, and +350 sources.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And that's it guys, I hope you are excited to start using these tools, cause I am too 😁, There are a ton more tools out there, but these are my top picks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-know-more"&gt;
  &lt;/a&gt;
  Do you know more?
&lt;/h3&gt;

&lt;p&gt;Also, if there’s any other amazing tool you’ve been using that has improved your workflow somehow, The ones you are getting excited to try out yet. Drop them in the comments!. Your Feedbacks are greatly appreciated! 🙌. I too, would love to expand my stash 😄. Have an amazing day!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enjoyed reading this as much as i enjoyed writing it for you? 😍&lt;/strong&gt; . support me 😃&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/molipa"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJz-zci7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520Coffee%2520%25E2%2598%2595%2520%26emoji%3D%25F0%259F%258D%25A6%26slug%3Dmolipa%26button_colour%3D40DCA5%26font_colour%3Dffffff%26font_family%3DComic%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;there's nothing more I would like than we become friends on &lt;a href="https://twitter.com/VectorIkechukwu"&gt;Twitter&lt;/a&gt; 💖&lt;/p&gt;

&lt;p&gt;If you found this article helpful, please like and share it: really motivates me to publish more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks so much for reading! 💖 And keep on coding! 👨‍💻.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>frontenddevelopment</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Use Case of JavaScript in today's industry.</title>
      <author>bhat sumair</author>
      <pubDate>Fri, 25 Jun 2021 12:54:40 +0000</pubDate>
      <link>https://dev.to/bhatsumair/use-case-of-javascript-in-today-s-industry-53f1</link>
      <guid>https://dev.to/bhatsumair/use-case-of-javascript-in-today-s-industry-53f1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Uber and javascript&lt;/strong&gt;&lt;br&gt;
Uber needs to handle loads of data in real time. They have millions of requests coming in continuously, and that’s not just hits on a page. Uber needs to track driver locations, rider locations, and incoming ride requests. It has to seamlessly sort that data and match riders as fast as possible.&lt;/p&gt;

&lt;p&gt;All of that plays to NodeJS’s and JavaScript’s strengths. Node is designed to handle requests and hand off data quickly. It’s asynchronous capabilities are a huge part of that. Node is central to Uber’s user facing stack for just that reason.&lt;/p&gt;

&lt;p&gt;Uber’s core trip execution engine was originally written in Node.js because of its asynchronous primitives and simple, single-threaded processing. (In fact, we were one of the first two companies to deploy Node.js in production.) Node.js gives us the ability to manage large quantities of concurrent connections. We’ve now written many services in Go, and this number continues to increase. We like Go for its concurrency, efficiency, and type-safe operations.&lt;br&gt;
The frontline API for our mobile apps consists of over 600 stateless endpoints that join together multiple services. It routes incoming requests from our mobile clients to other APIs or services. It’s all written in Node.js&lt;br&gt;
&lt;strong&gt;Highly Available, Self-Healing, Persistent&lt;/strong&gt;&lt;br&gt;
Having to support the highest availability demands, the Marketplace stack must receive and execute in real time. Even brief interruptions in this area have major consequences for our users and our business. Much of Marketplace’s stack was built by and for Marketplace engineers first.&lt;br&gt;
Ringpop, a library for building cooperative distributed systems, solved some of Marketplace’s problems before its adoption in other teams at Uber and beyond. It gives the high-availability, partition-tolerant properties of distributed databases like DynamoDB or Riak to developers at the application level.&lt;br&gt;
The systems that handle pings from riders and drivers in real-time and then match them are written in Node.js and Go. These teams use Ringpop and Sevnup for cooperation and shifting of object ownership when a node in a hashring goes down, or when another node takes ownership of the keyspace. Riak is their distributed database. Redis provides caching.&lt;br&gt;
&lt;strong&gt;Seeing and Using Data&lt;/strong&gt;&lt;br&gt;
A group within Marketplace turns Marketplace data into useful visualizations to help the team understand and observe the state of the world. We use JavaScript for web front-end applications. React+Flux, D3, and Mapbox are the libraries and frameworks behind this group. For the back end, it’s the same Node.js server used by Uber’s web engineers.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How we make Flutter work with CallKit Call Directory</title>
      <author>Irina Maximova</author>
      <pubDate>Fri, 25 Jun 2021 12:53:56 +0000</pubDate>
      <link>https://dev.to/imaximova/how-we-make-flutter-work-with-callkit-call-directory-5334</link>
      <guid>https://dev.to/imaximova/how-we-make-flutter-work-with-callkit-call-directory-5334</guid>
      <description>&lt;p&gt;Disclaimer: This will be a long read that my colleague wrote for &lt;a href="https://habr.com/ru/company/Voximplant/blog/553422/"&gt;Habr.ru&lt;/a&gt; and I decided to translate it to share with you guys!&lt;/p&gt;

&lt;p&gt;Stock up on snacks, make yourself comfortable, and let’s begin!&lt;/p&gt;




&lt;p&gt;In this long read, I will tell you how we (at &lt;a href="https://voximplant.com/?utm_source=habr&amp;amp;utm_medium=techarticle&amp;amp;utm_campaign=vox_flutter"&gt;Voximplant&lt;/a&gt;) decided to create our own Flutter plugin to use &lt;a href="https://developer.apple.com/documentation/callkit"&gt;CallKit&lt;/a&gt; in a Flutter app. And appeared to be the first who made call blocking &amp;amp; identification work for Flutter using &lt;a href="https://developer.apple.com/documentation/callkit/cxcalldirectoryextensioncontext"&gt;Call Directory&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-callkit"&gt;
  &lt;/a&gt;
  What is CallKit?
&lt;/h2&gt;

&lt;p&gt;Apple CallKit is a framework used for integration calls from 3rd party apps to the system.&lt;/p&gt;

&lt;p&gt;If a call from a 3rd party app is displayed as native, it means that CallKit is used here. If a call from a 3rd party app is in the list of system application calls (Phone) – it is also CallKit. Third-party applications that act as a caller ID – CallKit. Calls from third-party apps that can't get through Do Not Disturb mode – well, you get the idea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CQ9-61i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5vx5uuh7au4si5vymhk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CQ9-61i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5vx5uuh7au4si5vymhk.jpeg" alt="CallKit is"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;CallKit provides third-party developers with a system UI for displaying calls&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-with-callkit-on-flutter"&gt;
  &lt;/a&gt;
  What’s with CallKit on Flutter?
&lt;/h2&gt;

&lt;p&gt;CallKit is a part of iOS SDK, but it can be accessed from Flutter by interacting with native code. To use the framework’s functionality, you need to connect a third-party plugin that encapsulates the Flutter interaction with iOS. Or you can implement everything yourself, for example, this way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lEn5_0PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q58upx1nmphg6ct0k6mg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lEn5_0PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q58upx1nmphg6ct0k6mg.jpeg" alt="Scheme"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;An example of CallKit service implementation for Flutter, where iOS application code (platform code) connects Flutter application to the system&lt;/em&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#readymade-callkit-flutter-solutions"&gt;
  &lt;/a&gt;
  Ready-made CallKit Flutter solutions
&lt;/h3&gt;

&lt;p&gt;So, we needed to integrate our Flutter application for VoIP calls with the system. First, we looked through most of the existing third-party solutions and chose one of them to use for a while. However, this and the rest of the available options had their problems.&lt;/p&gt;

&lt;p&gt;Existing plugins partially or completely wrap the CallKit API in their own high-level API. Because of that flexibility is lost and some features are unavailable. Due to their implementation of architecture and interfaces, such plugins contained their bugs. The documentation was incomplete or absent, and the authors of some of them stopped supporting almost immediately, which is especially dangerous on the fast-growing Flutter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-we-came-up-with-our-solution"&gt;
  &lt;/a&gt;
  How we came up with our solution
&lt;/h3&gt;

&lt;p&gt;For simple scenarios, this worked at first, but a specific case gave us some trouble. We had to study the source code to find out how this particular plugin interacted with CallKit. In the end, we discovered that we wouldn't be able to implement what we wanted because of the high-level API limitations.&lt;/p&gt;

&lt;p&gt;We thought about implementing our solution with those disadvantages in mind.&lt;/p&gt;

&lt;p&gt;We wanted to preserve the architecture and interfaces of CallKit. This way we would give users all the flexibility and the ability to use the original documentation, and we could protect them from potential bugs in our implementation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#our-implementation"&gt;
  &lt;/a&gt;
  Our implementation
&lt;/h2&gt;

&lt;p&gt;We managed to move the entire CallKit API to Dart, preserving the hierarchy of classes and mechanisms of interaction with them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tbgBKWUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu3ez5kumg6we3a4th7j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbgBKWUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cu3ez5kumg6we3a4th7j.jpeg" alt="Plugin scheme"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;Our plugin covers all work with the platform and provides an identical interface&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The communication between Flutter and iOS is asynchronous, so it took us a while to implement some of the details. The main difficulty was the functionality that required synchronous communication on one side or the other.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;CXProviderDelegate.provider(_:execute:)&lt;/code&gt; native CallKit API requires synchronously returning a Bool value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;optional&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CXProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="nv"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CXTransaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is called every time a new &lt;code&gt;CXTransaction&lt;/code&gt; needs to be processed. You can return &lt;code&gt;true&lt;/code&gt; to process the transaction yourself and notify the system about it. If you return &lt;code&gt;false&lt;/code&gt; (default behavior), the corresponding handler method in &lt;code&gt;CXProviderDelegate&lt;/code&gt; is called for each &lt;code&gt;CXAction&lt;/code&gt; contained in the transaction.&lt;/p&gt;

&lt;p&gt;To use this API in the plugin, we needed to declare it in Dart code so that the user could control this behavior despite the asynchronous nature of data exchange between the platforms. By returning &lt;code&gt;true&lt;/code&gt; in native code, we managed to move transaction control to Dart code, where we perform manual or automatic &lt;code&gt;CXTransaction&lt;/code&gt; processing depending on the value received from the user.&lt;/p&gt;

&lt;p&gt;Problems with asynchrony arise in the native part as well. For example, there is the PushKit iOS framework that is not part of CallKit but they are often used together, so it was necessary to integrate it. When you receive a VoIP push, you need to immediately notify CallKit of an incoming call in native code, otherwise the application will crash. To handle this we decided to allow reporting incoming calls directly to CallKit from native code without an asynchronous "hook" in the form of Flutter. As a result, for this integration, we implemented several helpers in the native part of the plugin (available via the &lt;code&gt;FlutterCallkitPlugin&lt;/code&gt; iOS class) and several on the Flutter side (available via the &lt;code&gt;FCXPlugin&lt;/code&gt; Dart class).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We declared additional features of the plugin in its class to separate the plugin interface from the CallKit interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
  How to report an incoming call directly to CallKit
  &lt;p&gt;When a VoIP push is received, one of the &lt;code&gt;PKPushRegistryDelegate.pushRegistry(_: didReceiveIncomingPushWith:)&lt;/code&gt; methods is called. Here you need to create a &lt;code&gt;CXProvider&lt;/code&gt; instance and call &lt;code&gt;reportNewIncomingCall&lt;/code&gt; to notify CallKit of the call. Since the same provider instance is required to further handle the call, we added the &lt;code&gt;FlutterCallkitPlugin.reportNewIncomingCallWithUUID&lt;/code&gt; method from the native side of the plugin. When the method is called, the plugin reports the call to the &lt;code&gt;CXProvider&lt;/code&gt; and also executes &lt;code&gt;FCXPlugin.didDisplayIncomingCall&lt;/code&gt; on the Dart side to continue working with the call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;pushRegistry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PKPushRegistry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;didReceiveIncomingPushWith&lt;/span&gt; &lt;span class="nv"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PKPushPayload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PKPushType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Retrieve the necessary data from the push&lt;/span&gt;
    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uuidString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"UUID"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;uuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;uuidString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uuidString&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;localizedName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"identifier"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;callUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXCallUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;callUpdate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localizedCallerName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;localizedName&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;configuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXProviderConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;localizedName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"ExampleLocalizedName"&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Report the call to the plugin and it will report it to CallKit&lt;/span&gt;
    &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reportNewIncomingCall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;callUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;callUpdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;providerConfiguration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nv"&gt;pushProcessingCompletion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;completion&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;To sum up: the main feature of our plugin is that using it on Flutter is almost the same as using the native CallKit on iOS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-more-thing"&gt;
  &lt;/a&gt;
  One more thing
&lt;/h3&gt;

&lt;p&gt;But there still is one thing about Apple CallKit that we haven't implemented (and no one has implemented in available third-party solutions). It's the Call Directory App Extension support.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#call-directory-is"&gt;
  &lt;/a&gt;
  Call Directory is
&lt;/h2&gt;

&lt;p&gt;CallKit can block and identify calls. Developers can access these features using a special system extension – Call Directory. Read more about iOS app extensions in the &lt;a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214"&gt;App Extension Programming Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2kVqz9wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kejbqm007zd4t7n5rqt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2kVqz9wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1kejbqm007zd4t7n5rqt.jpeg" alt="Call Directory"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;Call Directory app extension allows you to block and/or identify numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In short, it is a separate iOS app target that runs independently of the main application at the request of the system.&lt;/p&gt;

&lt;p&gt;For example, when receiving an incoming call, iOS tries to identify or find the caller in the list of blocked by standard means. If the number is not found, the system can request data from available Call Directory extensions to somehow handle the call. At this point, the extension has to "retrieve" these numbers from storage. The application itself can add numbers from its databases in there at any time. Thus there is no interaction between the extension and the application, the data is exchanged through the shared storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tAAu0P5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfeet9nq3n7yduyqzsss.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tAAu0P5R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfeet9nq3n7yduyqzsss.jpeg" alt="Call Directory implementation"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;An example of how one can implement a Call Directory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Read more about iOS App Extensions: &lt;a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214"&gt;App Extension Programming Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#call-directory-extension-in-flutter"&gt;
  &lt;/a&gt;
  Call Directory Extension in Flutter
&lt;/h2&gt;

&lt;p&gt;Not so long ago a user asked if we can add Call Directory support. We started to study the possibility of implementing this feature and found out that it won’t be able to provide a Flutter API without making the users write native code. The problem is that the Call Directory works in the extension. It is launched by the system, runs for a very short time, and does not depend on the application (including Flutter). Thus, to support this functionality, the user of the plugin will need to create an app extension and data storage on his own eventually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQkiuPlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cpueoh2ut2br0lk3phg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQkiuPlb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cpueoh2ut2br0lk3phg.jpeg" alt="Call Directory in Flutter"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;An example of working with Call Directory in Flutter application&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#decision-we-made"&gt;
  &lt;/a&gt;
  Decision we made
&lt;/h3&gt;

&lt;p&gt;Despite the difficulties with the native code, we were determined to make using Call Directory as convenient as possible for our framework's users.&lt;/p&gt;

&lt;p&gt;Having tested the ability of such an extension to work with a Flutter app, we started designing it. The solution had to retain all the Call Directory Manager APIs, require the user to write a minimum of native code, and be easy to interact with via Flutter.&lt;/p&gt;

&lt;p&gt;This is how we created version 1.2.0 with Call Directory Extension support.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-we-implemented-call-directory-for-flutter"&gt;
  &lt;/a&gt;
  How we implemented Call Directory for Flutter
&lt;/h2&gt;

&lt;p&gt;To implement this functionality, we had to consider several aspects. We needed to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transfer the interface of CXCallDirectoryManager class (CallKit object that allows managing Call Directory);&lt;/li&gt;
&lt;li&gt;Decide what to do with the app extension and its numbers storage;&lt;/li&gt;
&lt;li&gt;Create a convenient way to transfer data from Dart code to the native code and back to manage the list of numbers from the Flutter app.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#transfer-cxcalldirectorymanager-interfaces-to-flutter"&gt;
  &lt;/a&gt;
  Transfer CXCallDirectoryManager interfaces to Flutter
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code presented in this article was simplified on purpose to make it easy to perceive. Find the full version of the code following the links at the end of the article. We used Objective-C to implement the plugin since it was chosen as the main language in our project earlier. The CallKit interfaces are written in Swift for simplicity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  Interface
&lt;/h3&gt;

&lt;p&gt;First of all, let's see what exactly needs to be transferred:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;EnabledStatus&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;disabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;reloadExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;withIdentifier&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;completionHandler&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;getEnabledStatusForExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;withIdentifier&lt;/span&gt; &lt;span class="nv"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;completionHandler&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;EnabledStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;openSettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;completionHandler&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;)?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's recreate the equivalent of the &lt;code&gt;CXCallDirectoryManager.EnabledStatus&lt;/code&gt; enum with Dart:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="kt"&gt;FCXCallDirectoryManagerEnabledStatus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;enabled&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can declare the class and methods. There is no need for &lt;code&gt;sharedInstance&lt;/code&gt; in our interface, so let's make a regular Dart class with static methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;FCXCallDirectoryManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;reloadExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryManagerEnabledStatus&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getEnabledStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;openSettings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Preserving the API is important, but it is just as important to consider the platform and language code style so that the interface is clear and convenient for plugin users.&lt;br&gt;
For the API in Dart, we used a shorter name (the long name was from objective-C) and replaced the completion block with Future. Future is the standard mechanism used to get the result of asynchronous methods in Dart. We also return Future from most Dart plugin methods because communication with native code is asynchronous.&lt;br&gt;
Before – &lt;code&gt;getEnabledStatusForExtension(withIdentifier:completionHandler:)&lt;/code&gt;&lt;br&gt;
After – &lt;code&gt;Future getEnabledStatus(extensionIdentifier)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;To make communication between Flutter and iOS possible, we use &lt;code&gt;FlutterMethodChannel&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Read more about the features of this communication channel &lt;a href="https://flutter.dev/docs/development/platform-integration/platform-channels"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;MethodChannel&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MethodChannel&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MethodChannel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'plugins.voximplant.com/flutter_callkit'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The first thing we do is subscribe the iOS plugin class to the &lt;code&gt;FlutterPlugin&lt;/code&gt; protocol to interact with Flutter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@interface&lt;/span&gt; &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FlutterPlugin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When initializing the plugin, create a &lt;code&gt;FlutterMethodChannel&lt;/code&gt; with the same identifier we used above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;registerWithRegistrar&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FlutterPluginRegistrar&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;FlutterMethodChannel&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;FlutterMethodChannel&lt;/span&gt; 
          &lt;span class="nv"&gt;methodChannelWithName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"plugins.voximplant.com/flutter_callkit"&lt;/span&gt;
          &lt;span class="nv"&gt;binaryMessenger&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="n"&gt;messenger&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; 
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt; &lt;span class="nv"&gt;sharedPluginWithRegistrar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;registrar&lt;/span&gt; &lt;span class="nv"&gt;addMethodCallDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="nv"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can use this channel to call iOS methods from Flutter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's take a closer look at the implementation of Dart methods and the native part of the plugin using the &lt;code&gt;getEnabledStatus&lt;/code&gt; example.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Dart implementation will be as simple as possible. We will call MethodChannel.invokeMethod with the necessary arguments and process the result of that call.&lt;/p&gt;

&lt;p&gt;
  About MethodChannel
  &lt;code&gt;MethodChannel&lt;/code&gt; API allows us to asynchronously get the result of a call from native code using &lt;code&gt;Future&lt;/code&gt; but imposes restrictions on the data types that we pass. 

&lt;/p&gt;

&lt;p&gt;We pass the method name (we'll use it in the native code to identify the call) and the &lt;code&gt;extensionIdentifier&lt;/code&gt; argument to &lt;code&gt;MethodChannel.invokeMethod&lt;/code&gt; and then convert the result from the int type to &lt;code&gt;FCXCallDirectoryManagerEnabledStatus&lt;/code&gt;. We should also handle &lt;code&gt;PlatformException&lt;/code&gt; in case of an error in the native code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryManagerEnabledStatus&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getEnabledStatus&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Use MethodChannel with extensionIdentifier&lt;/span&gt;
    &lt;span class="c1"&gt;// as an argument to call the corresponding &lt;/span&gt;
    &lt;span class="c1"&gt;// method in the platform code&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invokeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.getEnabledStatus'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Convert the result to the&lt;/span&gt;
    &lt;span class="c1"&gt;// FCXCallDirectoryManagerEnabledStatus enum&lt;/span&gt;
    &lt;span class="c1"&gt;// and return its value to the user&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;FCXCallDirectoryManagerEnabledStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// If we get an error, we pass it to FCXException&lt;/span&gt;
    &lt;span class="c1"&gt;// and then return it to the user in special type&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Pay attention to the method identifier that we used:&lt;br&gt;
&lt;code&gt;Plugin.getEnabledStatus&lt;/code&gt;&lt;br&gt;
The word before the dot is used to define the module responsible for a particular method.&lt;br&gt;
&lt;code&gt;getEnabledStatus&lt;/code&gt; is equal to the name of the method in Flutter, not in iOS (or Android).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now we move to the platform code and implement the backend for this method.&lt;/p&gt;

&lt;p&gt;Calls through &lt;code&gt;FlutterMethodChannel&lt;/code&gt; go straight to the &lt;code&gt;handleMethodCall:result:&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Using the previously passed identifier, we can determine what method was called, get the arguments from it and execute the main part of the code. Detailed information is in the comments here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;handleMethodCall&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;FlutterMethodCall&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;
                  &lt;span class="nv"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;FlutterResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Calls from Flutter can be initiated by name,&lt;/span&gt;
    &lt;span class="c1"&gt;// which is passed to `FlutterMethodCall.method` property&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.getEnabledStatus"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// When passing arguments with MethodChannel, &lt;/span&gt;
        &lt;span class="c1"&gt;// they are packed to `FlutterMethodCall.arguments`.&lt;/span&gt;
        &lt;span class="c1"&gt;// Extract extensionIdentifier, which we passed &lt;/span&gt;
        &lt;span class="c1"&gt;// from the Flutter code earlier&lt;/span&gt;
        &lt;span class="kt"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// If the arguments are invalid, return an error&lt;/span&gt;
            &lt;span class="c1"&gt;// using the `result` handler.&lt;/span&gt;
            &lt;span class="c1"&gt;// The error should be packed to `FlutterError`.&lt;/span&gt;
            &lt;span class="c1"&gt;// It’ll be thrown as PlatformException in Dart code&lt;/span&gt;
            &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorInvalidArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"extensionIdentifier must not be null"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// When the method is detected and the arguments&lt;/span&gt;
        &lt;span class="c1"&gt;// are extracted and validated,&lt;/span&gt;
        &lt;span class="c1"&gt;// we can write the logic&lt;/span&gt;

        &lt;span class="c1"&gt;// To interact with this CallKit functionality&lt;/span&gt;
    &lt;span class="c1"&gt;// we need the CallDirectoryManager instance&lt;/span&gt;
        &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Call the CallDirectoryManager method&lt;/span&gt;
        &lt;span class="c1"&gt;// and wait for the result&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
            &lt;span class="nv"&gt;getEnabledStatusForExtensionWithIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;
            &lt;span class="nv"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CXCallDirectoryEnabledStatus&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                           &lt;span class="kt"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="c1"&gt;// completion handler (containing the result of &lt;/span&gt;
            &lt;span class="c1"&gt;// the CallDirectoryManager method) is executed, &lt;/span&gt;
            &lt;span class="c1"&gt;// now we need to pass the result to Dart&lt;/span&gt;
            &lt;span class="c1"&gt;// But first we convert it to the в suitable type, &lt;/span&gt;
            &lt;span class="c1"&gt;// because only certain data types can be passed &lt;/span&gt;
            &lt;span class="c1"&gt;// through  MethodChannel&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="c1"&gt;// Our errors are packed to `FlutterError`&lt;/span&gt;
                &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorFromCallKitError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="c1"&gt;// Numbers are packed to `NSNumber`&lt;/span&gt;
                &lt;span class="c1"&gt;// This enum is `NSInteger`, so we&lt;/span&gt;
                &lt;span class="c1"&gt;// make the required conversion&lt;/span&gt;
                &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="nv"&gt;convertEnableStatusToNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;enabledStatus&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Implement the two remaining &lt;code&gt;FCXCallDirectoryManager&lt;/code&gt; methods in the same way&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;reloadExtension&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Set an identifier, pass the argument, &lt;/span&gt;
    &lt;span class="c1"&gt;// and call the platform method&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invokeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.reloadExtension'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;openSettings&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// This method does not accept arguments&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invokeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.openSettings'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.reloadExtension"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorInvalidArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"extensionIdentifier must not be null"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
        &lt;span class="nv"&gt;reloadExtensionWithIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extensionIdentifier&lt;/span&gt;
        &lt;span class="nv"&gt;completionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorFromCallKitError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.openSettings"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;@available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;13.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt; 
            &lt;span class="nv"&gt;openSettingsWithCompletionHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;NSError&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Nullable&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorFromCallKitError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorLowiOSVersionWithMinimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"13.4"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it! CallDirectoryManager is implemented and ready to be used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flutter.dev/docs/development/platform-integration/platform-channels"&gt;Learn more about Platform-Flutter interaction&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#app-extension-and-number-storage"&gt;
  &lt;/a&gt;
  App Extension and number storage
&lt;/h2&gt;

&lt;p&gt;Since, due to the presence of the Call Directory in the iOS extension, we will not be able to provide its implementation with the plugin and working with platform code is usually unfamiliar for Flutter developers, we will try to help them as much as possible providing ... Documentation!&lt;/p&gt;

&lt;p&gt;Let's create a complete app extension and storage samples and connect them to the example app of our plugin.&lt;/p&gt;

&lt;p&gt;As the simplest version of the storage, we will use &lt;code&gt;UserDefaults&lt;/code&gt;, which we will wrap in &lt;code&gt;propertyWrapper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how the interface of our storage looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Access to the storage from the iOS app&lt;/span&gt;
&lt;span class="kd"&gt;@UIApplicationMain&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;AppDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FlutterAppDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blockedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;blockedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BlockableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"identifiedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Access to the storage from the app extension&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;CallDirectoryHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CXCallDirectoryProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"blockedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;blockedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BlockableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"identifiedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;@NullableUserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"lastUpdate"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;lastUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Storage implementation code: &lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/Runner/UserDefault.swift"&gt;UserDefaults&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOS app code: &lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/Runner/AppDelegate.swift"&gt;iOS App Delegate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iOS extension code: &lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/CallDirectoryExtensionExample/CallDirectoryHandler.swift"&gt;iOS App Extension&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the storage and extension samples are not part of the plugin, but rather part of the example application that comes with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pass-numbers-from-flutter-to-ios-and-vice-versa"&gt;
  &lt;/a&gt;
  Pass numbers from Flutter to iOS and vice versa
&lt;/h2&gt;

&lt;p&gt;So, the app extension is configured and connected to the storage, the necessary methods of CallDirectoryManager are implemented, the last detail – to learn how to take numbers from Flutter and put them in the platform storage or, conversely, request them from the platform storage.&lt;/p&gt;

&lt;p&gt;The easiest way as it may seem is to make the user of the plugin deal with the data. He'll have to set up his own MethodChannel or use other third-party storage management solutions. It will certainly suit some people! :) And for the rest, we will make a simple API to pass numbers directly through our framework. This functionality will be optional so we don’t limit those who are more comfortable using their ways of transferring data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interface"&gt;
  &lt;/a&gt;
  Interface
&lt;/h3&gt;

&lt;p&gt;Let’s see which interfaces we need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add blocked/identifiable numbers to the storage&lt;/li&gt;
&lt;li&gt;Delete blocked/identifiable numbers from the repository&lt;/li&gt;
&lt;li&gt;Request blocked/identifiable numbers from the repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We previously decided to use the &lt;code&gt;FCXPlugin&lt;/code&gt; (Flutter) and &lt;code&gt;FlutterCallkitPlugin&lt;/code&gt; (iOS) classes for the helpers. However, Call Directory is a highly specialized functionality that is not used in every project. That's why I want to put it in a separate file but leave the access through the &lt;code&gt;FCXPlugin&lt;/code&gt; class object. The extension will do this work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin_CallDirectoryExtension&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getBlockedPhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addBlockedPhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;removeBlockedPhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;removeAllBlockedPhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;removeIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;removeAllIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To let Flutter access numbers that are in storage on the iOS side, the user of the plugin needs to somehow connect his database of numbers and the plugin. Let’s give him the interface to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@interface&lt;/span&gt; &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FlutterPlugin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;getBlockedPhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didAddBlockedPhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didRemoveBlockedPhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didRemoveAllBlockedPhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didAddIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didRemoveIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXCallDirectoryPhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nonatomic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;void&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;didRemoveAllIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each type of interaction with the repository has its handler. It is called by our framework every time the corresponding helper is called from the Flutter side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Handlers are optional which allows you to use only some part of this functionality or use your own solution instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;p&gt;Now let's implement the communication between the declared helper methods in Flutter and the handlers in iOS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a lot of methods but they all work almost the same. That’s why we will focus on two of them, the ones with the opposite direction of data movement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#get-identifiable-numbers"&gt;
  &lt;/a&gt;
  Get identifiable numbers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// Call the platform method and save the result    List&amp;lt;dynamic&amp;gt; numbers = await _methodChannel.invokeMethod(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.getIdentifiablePhoneNumbers'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Type the result and return it to the user&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'number'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nl"&gt;label:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'label'&lt;/span&gt;&lt;span class="o"&gt;]))&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.getIdentifiablePhoneNumbers"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Check if the handler exists,&lt;/span&gt;
        &lt;span class="c1"&gt;// if not, return an error&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorHandlerIsNotRegistered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"getIdentifiablePhoneNumbers"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Using the handler, request numbers from a user&lt;/span&gt;
    &lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;NSMutableArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;phoneNumbers&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;NSMutableArray&lt;/span&gt; &lt;span class="nv"&gt;arrayWithCapacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Wrap each number in the dictionary type &lt;/span&gt;
    &lt;span class="c1"&gt;// so we could pass them via MethodChannel &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;identifiableNumber&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;NSMutableDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;NSMutableDictionary&lt;/span&gt; &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"number"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;NSNumber&lt;/span&gt; &lt;span class="nv"&gt;numberWithLongLong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;identifiableNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"label"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;identifiableNumber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;phoneNumbers&lt;/span&gt; &lt;span class="nv"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Pass the numbers to Flutter&lt;/span&gt;
    &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phoneNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-identifiable-numbers"&gt;
  &lt;/a&gt;
  Add identifiable numbers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Prepare the numbers to be passed via MethodChannel&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;_toMap&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Pass the numbers to the native code&lt;/span&gt;
    &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_methodChannel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;invokeMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;'Plugin.addIdentifiablePhoneNumbers'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;arguments&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;PlatformException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;FCXException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;@"Plugin.addIdentifiablePhoneNumbers"&lt;/span&gt; &lt;span class="nv"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;didAddIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Check if the handler exists,&lt;/span&gt;
        &lt;span class="c1"&gt;// if not, return an error&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorHandlerIsNotRegistered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"didAddIdentifiablePhoneNumbers"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Get the numbers passed as arguments&lt;/span&gt;
    &lt;span class="kt"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;isNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Check if they’re valid&lt;/span&gt;
        &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;FlutterError&lt;/span&gt; &lt;span class="nv"&gt;errorInvalidArguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@"numbers must not be null"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;NSMutableArray&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;
        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Type the numbers&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;NSNumber&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"number"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;__auto_type&lt;/span&gt; &lt;span class="n"&gt;identifiableNumber&lt;/span&gt;
            &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nv"&gt;initWithNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;longLongValue&lt;/span&gt;
                                                                                     &lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;@"label"&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt; &lt;span class="nv"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;identifiableNumber&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Pass the typed numbers to the handler&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;didAddIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifiableNumbers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Tell Flutter about the end of operation&lt;/span&gt;
    &lt;span class="nf"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rest of the methods are implemented the same way, here is the full code for Flutter and iOS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/lib/src/call_directory/call_directory_extension.dart"&gt;Flutter side&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/ios/Classes/FlutterCallkitPlugin.m"&gt;iOS side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#usage-samples"&gt;
  &lt;/a&gt;
  Usage samples
&lt;/h2&gt;

&lt;p&gt;Now we move to the user side of the plugin and see how our user can use our interfaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reload-extension"&gt;
  &lt;/a&gt;
  Reload extension
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;reloadExtension(withIdentifier:completionHandler:)&lt;/code&gt; method is used to reload the Call Directory extension. You may need it, for example, after adding new numbers to the storage so that they get into CallKit.&lt;/p&gt;

&lt;p&gt;Use it the same way you use native CallKit API: call &lt;code&gt;FCXCallDirectoryManager&lt;/code&gt; and request reload by the given &lt;code&gt;extensionIdentifier&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;_extensionID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="s"&gt;'com.voximplant.flutterCallkit.example.CallDirectoryExtension'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;reloadExtension&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;FCXCallDirectoryManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;reloadExtension&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_extensionID&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-identified-numbers"&gt;
  &lt;/a&gt;
  Get identified numbers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We request a list of identifiable numbers using our plugin class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt; &lt;span class="n"&gt;_plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getIdentifiedNumbers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;getIdentifiablePhoneNumbers&lt;/code&gt; handler, which the plugin uses to pass the specified numbers to Flutter. We will use it to pass the numbers from our &lt;code&gt;identifiedNumbers&lt;/code&gt; storage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;callKitPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;

&lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"identifiedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Add a phone number request event handler&lt;/span&gt;
&lt;span class="n"&gt;callKitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getIdentifiablePhoneNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Return the numbers from the storage to the handler&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the numbers from the user storage will go to the handler and then to Flutter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-identified-numbers"&gt;
  &lt;/a&gt;
  Add identified numbers
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On the Flutter side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We pass the numbers that we want to identify to the plugin object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt; &lt;span class="n"&gt;_plugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FCXPlugin&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;addIdentifiedNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FCXIdentifiablePhoneNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;num&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;label:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addIdentifiablePhoneNumbers&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;On the iOS side&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;didAddIdentifiablePhoneNumbers&lt;/code&gt; handler, which the plugin uses to notify the platform code about receiving new numbers from Flutter. In the handler, we save the received numbers to the number storage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;callKitPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;FlutterCallkitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sharedInstance&lt;/span&gt;

&lt;span class="kd"&gt;@UserDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"identifiedNumbers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;// Add an event handler for adding numbers&lt;/span&gt;
&lt;span class="n"&gt;callKitPlugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;didAddIdentifiablePhoneNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
    &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Save the numbers to the storage &lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nv"&gt;contentsOf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;IdentifiableNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;identifiableNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// The numbers in Call Directory must be sorted&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;identifiedNumbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now numbers from Flutter go to the plugin, then to the event handler, and eventually to the user's number storage. Next time you reload the Call Directory extension, they will be available for CallKit for call identification.&lt;/p&gt;

&lt;p&gt;Full code samples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/Runner/AppDelegate.swift"&gt;iOS Example App Delegate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/ios/CallDirectoryExtensionExample/CallDirectoryHandler.swift"&gt;iOS Example App Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/example/lib/call_service.dart"&gt;Flutter Example Call Service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-sum-it-up"&gt;
  &lt;/a&gt;
  To sum it up
&lt;/h2&gt;

&lt;p&gt;We managed to make an opportunity to use the CallKit Call Directory from Flutter!&lt;/p&gt;

&lt;p&gt;The details of platform communications are still hidden in the depths of the plugin, the native API is preserved, and the custom iOS implementation is well documented.&lt;/p&gt;

&lt;p&gt;Now it is relatively easy to block and/or identify numbers using the native Call Directory in Flutter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--177SDEih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvgo4kjurcqpd2xwwvto.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--177SDEih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvgo4kjurcqpd2xwwvto.png" alt="Final scheme"&gt;&lt;/a&gt; &lt;br&gt;
&lt;em&gt;An example of working with Call Directory in Flutter application using flutter_callkit_voximplant&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Results:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Completely moved CallDirectoryManager interface &lt;/li&gt;
&lt;li&gt;Created an easy way to pass the numbers from Flutter code to iOS, leaving the option to use your data transfer solutions&lt;/li&gt;
&lt;li&gt;Described the architecture of the solution in the README with visual diagrams for better understanding&lt;/li&gt;
&lt;li&gt;Added a full-fledged working example app that uses all Call Directory functionality and implements platform modules samples (iOS extension and data storage)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/voximplant/flutter_callkit"&gt;flutter_callkit code on GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/tree/master/example"&gt;Example app code on GitHub&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/voximplant/flutter_callkit/blob/master/doc/call_directory/README.md"&gt;Full docs on usage Call Directory with flutter_callkit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.apple.com/documentation/callkit?language=objc"&gt;CallKit Framework Documentation by Apple&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214"&gt;App Extension Programming Guide by Apple&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://flutter.dev/docs/development/platform-integration/platform-channels"&gt;Writing custom platform-specific code by Flutter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>flutter</category>
      <category>ios</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Page Speed Insights (Lighthouse) went through an upgrade on 1st June 2021 - what changed and how will it affect you? </title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 25 Jun 2021 12:40:20 +0000</pubDate>
      <link>https://dev.to/inhuofficial/page-speed-insights-went-through-an-upgrade-on-1st-june-2021-what-changed-and-how-will-it-affect-you-3n8g</link>
      <guid>https://dev.to/inhuofficial/page-speed-insights-went-through-an-upgrade-on-1st-june-2021-what-changed-and-how-will-it-affect-you-3n8g</guid>
      <description>&lt;p&gt;Page Speed Insights is now running Lighthouse 8.0 and let me tell you, the changes that have been made to the scoring are going to really ruin some of your scores!&lt;/p&gt;

&lt;p&gt;With that being said, if you aren't building a site with JavaScript in the browser you will probably actually benefit!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a nutshell:&lt;/strong&gt; It is time to ditch those heavy front-end frameworks for sites that you want to rank well!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-this-post-for"&gt;
  &lt;/a&gt;
  Who is this post for?
&lt;/h2&gt;

&lt;p&gt;People building websites that need to rank well in Google.&lt;/p&gt;

&lt;p&gt;With the upcoming &lt;a href="https://developers.google.com/search/blog/2021/04/more-details-page-experience"&gt;Web Vitals update to Google Search Algorithm starting to be rolled out&lt;/a&gt;, and being rolled out fully by the end of August, it is &lt;strong&gt;essential&lt;/strong&gt; you start working on fixing these things now if you rely on SEO for traffic.&lt;/p&gt;

&lt;p&gt;And unlike other articles on the subject I am going to assume you have at least heard of and used Page Speed Insights or a similar speed checking service before.&lt;/p&gt;

&lt;p&gt;With that being said I will refer to all of these services under the term "Lighthouse" so I better give you a super quick bit of info:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lighthouse-in-20-seconds"&gt;
  &lt;/a&gt;
  Lighthouse in 20 seconds
&lt;/h2&gt;

&lt;p&gt;For those of you who don't know, &lt;a href="https://github.com/GoogleChrome/lighthouse"&gt;Lighthouse&lt;/a&gt; is the engine that powers &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;page speed insights&lt;/a&gt;, &lt;a href="https://web.dev/measure/"&gt;web.dev/measure&lt;/a&gt;, &lt;a href="https://gtmetrix.com/"&gt;GT Metrix&lt;/a&gt; etc. &lt;/p&gt;

&lt;p&gt;It is probably the most widely used testing utility for website load speed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-so-what-have-they-changed-this-time"&gt;
  &lt;/a&gt;
  OK so what have they changed this time?
&lt;/h2&gt;

&lt;p&gt;The score weightings have been updated once again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#v6-v7-scoring"&gt;
  &lt;/a&gt;
  V6 / V7 scoring
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;First Contentful Paint        15%
Speed Index                   15%
Largest Contentful Paint      25%
Time to Interactive           15%
Total Blocking Time           25%
Cumulative Layout Shift        5%
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#v8-scoring-new-scoring"&gt;
  &lt;/a&gt;
  V8 scoring (new scoring)
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;First Contentful Paint        10% -
Speed Index                   10% -
Largest Contentful Paint      25% 
Time to Interactive           10% -
Total Blocking Time           30% +
Cumulative Layout Shift       15% +
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;metric&lt;/th&gt;
&lt;th&gt;v6 + v7 weight&lt;/th&gt;
&lt;th&gt;v8 weight&lt;/th&gt;
&lt;th&gt;change&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;First Contentful Paint (FCP)&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Speed Index (SI)&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Largest Contentful Paint (LCP)&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Time To Interactive (TTI)&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;-5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total Blocking Time (TBT)&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cumulative Layout Shift (CLS)&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#in-english-please-these-metrics-mean-nothing-to-me"&gt;
  &lt;/a&gt;
  In English please, these metrics mean nothing to me!
&lt;/h2&gt;

&lt;p&gt;In short, the focus has shifted to when the page is actually ready to use, rather than when things first start appearing.&lt;/p&gt;

&lt;p&gt;It is actually a little more complex than that and is beyond the scope of this post but here is a summary of what you need to know:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-heavy-sites-are-going-to-take-a-hit"&gt;
  &lt;/a&gt;
  JavaScript heavy sites are going to take a hit.
&lt;/h3&gt;

&lt;p&gt;If you are downloading 100kb of JS just to render the above the fold content (the initial content you can see without scrolling) then your score is likely going to go down (again! It is time to take the hint! Stop using React for brochure sites unless you know how to tree shake and code split!).&lt;/p&gt;

&lt;p&gt;This is linked to the "Total Blocking Time (TBT)" metric. It measures how many tasks within your JS take longer than 50ms, then it adds up any tasks that take longer minus the original 50ms allowance.&lt;/p&gt;

&lt;p&gt;To make that more clear:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Task A: 30ms (less than 50ms so 0ms added to TBT)&lt;/li&gt;
&lt;li&gt;Task B: 55ms (55ms - 50ms, so 5ms added to TBT)&lt;/li&gt;
&lt;li&gt;Task C: 10ms (less than 50ms again so TBT is still 5ms)&lt;/li&gt;
&lt;li&gt;Task D: 95ms (95ms - 50ms, so 45ms added making TBT 50ms total).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the TBT would be 50ms in the above scenario.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; This may seem super easy to pass, but consider that "mobile first" is Google's policy. So when you run a report on Page Speed Insights, the Lighthouse tab in Chrome etc. look at the &lt;strong&gt;mobile scores.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;For mobile there is throttling applied to simulate a mid-tier mobile phone (a 4x CPU slowdown) and a slow 4G connection.&lt;/p&gt;

&lt;p&gt;You can find out &lt;a href="https://github.com/GoogleChrome/lighthouse/blob/master/docs/throttling.md"&gt;more info about throttling in Lighthouse here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is why I do not recommend looking at pingdom.com and GT Metrix (unless you have a PRO account), they both monitor desktop speeds and it is really easy to get a decent score there.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#inlining-critical-css-is-even-more-important"&gt;
  &lt;/a&gt;
  Inlining critical CSS is even more important
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.smashingmagazine.com/2015/08/understanding-critical-css/"&gt;critical CSS&lt;/a&gt; is all the CSS required to render the above the fold content.&lt;/p&gt;

&lt;p&gt;You need to inline this in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag within the document so that the page can load and display the page without needing a second network request to have completed.&lt;/p&gt;

&lt;p&gt;This helps improve Largest Contentful Paint and minimise Layout Shifts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#make-sure-you-stop-layout-shifts"&gt;
  &lt;/a&gt;
  Make sure you stop layout shifts
&lt;/h3&gt;

&lt;p&gt;People tend to get confused by this one. Basically if you see something load on the page, it should not move, get larger or smaller, unless it is a direct result of pressing a button etc.&lt;/p&gt;

&lt;p&gt;For this reason I would suggest you read this post on how to stop images causing a Layout Shift:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/quick-tips-how-to-fix-image-elements-do-not-have-explicit-width-and-height-in-page-speed-insights-lighthouse-3776" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Quick Tips: How to fix "Image elements do not have explicit width and height" in Page Speed Insights / Lighthouse&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Jun 6 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;If you are using JS to fetch data then make sure you have a correctly sized placeholder for it...but if you are doing that for above the fold content you are already in trouble, as for the fastest rendering all above the fold content should be served within the initial HTML.&lt;/p&gt;

&lt;p&gt;In fact the above the fold content should fit into 14kb for insane speeds, 42kb for super fast speeds or 98kb for good speeds (kind of). It is all to do with how TCP works and something called &lt;a href="https://en.wikipedia.org/wiki/TCP_congestion_control#:~:text=TCP%20uses%20a%20mechanism%20called,size%20(MSS)%20in%20size."&gt;TCP slow start&lt;/a&gt;...but that is for another post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-still-need-to-ensure-your-largest-contentful-paint-is-good"&gt;
  &lt;/a&gt;
  You still need to ensure your Largest Contentful Paint is good
&lt;/h3&gt;

&lt;p&gt;Largest Contentful Paint (LCP) is actually quite straight forward. &lt;/p&gt;

&lt;p&gt;Say you have a page with 4 elements that appear above the fold. If one of those elements takes up 40% of the space (element A) and the other 3 each take up 20% (elements B,C and D) then element A would be the element that is the Largest Paint element.&lt;/p&gt;

&lt;p&gt;The score is based on how quickly that element is rendered to the page. The quicker that element appears the better your score.&lt;/p&gt;

&lt;p&gt;Now we have covered inlining critical CSS within the HTML so we don't need to wait for an additional network request before we can render the page, but what if that element is an image?&lt;/p&gt;

&lt;p&gt;One technique is to use a &lt;a href="https://www.robinosborne.co.uk/2018/01/05/image-placeholders-do-it-right-or-dont-do-it-at-all-please/"&gt;Low Quality Image Placeholder (LQIP)&lt;/a&gt;. Yet again the detail of how to do that is for another post but in essence you use a small very low quality image (say 32px by 18px for a 16:9 aspect ratio) and then inline that using a data URI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src= &lt;/span&gt;&lt;span class="s"&gt;"data:image/jpg;base64,[data encoded with base64]"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"your alt"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"1600"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"900"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You then swap in the actual image using JS once the core page content has loaded.&lt;/p&gt;

&lt;p&gt;There are loads of different ways to achieve this and so it deserves its own post as I said, the idea of this post is to give you things to research yourself and suggestions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-that-dont-affect-your-score-but-to-be-mindful-of"&gt;
  &lt;/a&gt;
  Things that don't affect your score but to be mindful of
&lt;/h2&gt;

&lt;p&gt;Nearly every major update that has been released in the last few months has had an update to do with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;Content Security Policies (CSP)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This update is no exception. &lt;/p&gt;

&lt;p&gt;They have introduced an audit called "csp-xss" under "Best practices" (which isn't on Page Speed Insights but is available in Lighthouse in developer tools etc.). &lt;/p&gt;

&lt;p&gt;This still has no scoring weight associated with it but you should start thinking about it now as they keep putting more and more effort into this.&lt;/p&gt;

&lt;p&gt;If you want to see the state of your sites security headers may I suggest using &lt;a href="https://observatory.mozilla.org/"&gt;https://observatory.mozilla.org/&lt;/a&gt; to test your site and start learning about headers that protect your clients from malicious actions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The idea of this post was not to tell you how to fix everything, but rather to let you know what has changed and what it means for you, even if you don't understand everything about Page Speed Insights.&lt;/p&gt;

&lt;p&gt;Lighthouse is trying to steer you away from using heavy JS frameworks for brochure sites or even e-commerce sites where page speed is essential and search rankings are important.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?url=https://dev.to/inhuofficial/page-speed-insights-went-through-an-upgrade-on-1st-june-2021-what-changed-and-how-will-it-affect-you-3n8g&amp;amp;text=%22Lighthouse%20is%20trying%20to%20steer%20you%20away%20from%20using%20heavy%20JS%20frameworks%20for%20brochure%20sites%20or%20even%20e-commerce%20sites%20where%20page%20speed%20is%20essential%20and%20search%20rankings%20are%20important.%22%20-%20@InHuOfficial%20"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pMHpmDTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coo4rtxyay0orh7gmnin.jpg" alt='Click to Tweet: "Lighthouse is trying to steer you away from using heavy JS frameworks for brochure sites or even e-commerce sites where page speed is essential and search rankings are important."'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need help with a &lt;strong&gt;specific&lt;/strong&gt; issue on your site then let me know in the comments.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>5 GitHub Projects to make you a better DevOps Engineer ⚡</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Fri, 25 Jun 2021 12:32:37 +0000</pubDate>
      <link>https://dev.to/ankit01oss/5-github-projects-to-make-you-a-better-devops-engineer-2fkl</link>
      <guid>https://dev.to/ankit01oss/5-github-projects-to-make-you-a-better-devops-engineer-2fkl</guid>
      <description>&lt;p&gt;DevOps is one of the most challenging fields to be in, and to stay relevant you need to learn constantly.&lt;/p&gt;

&lt;p&gt;So today, I want to share 5 amazing GitHub projects which will help you become a better DevOps engineer. These 5 Github projects can come in handy for anyone looking to learn and want good resources to dive in. 🏊‍♀️&lt;/p&gt;

&lt;p&gt;So let's get started👊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-book-of-secret-knowledge"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;The book of secret knowledge&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 42k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repository is a collection of various materials and tools aimed towards System and Network administrators, DevOps, Pentesters, and Security Researchers.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trimstray"&gt;
        trimstray
      &lt;/a&gt; / &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;
        the-book-of-secret-knowledge
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools and more.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7cZbHG7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/trimstray/the-book-of-secret-knowledge/raw/master/static/img/the-book-of-secret-knowledge-preview.png" alt="Master"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;"&lt;i&gt;Knowledge is powerful, be careful how you use it!&lt;/i&gt;"&lt;/p&gt;

&lt;h4&gt;
A collection of inspiring lists, manuals, cheatsheets, blogs, hacks, one-liners, cli/web tools, and more.&lt;/h4&gt;



&lt;p&gt;
  &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge/pulls"&gt;
    &lt;img src="https://camo.githubusercontent.com/d29d75f2930f80fe8a37354d3d3d44518d4e6b4a31f8b646b90c56e7e0d1e463/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f6c6f6e6743616368653d74727565" alt="Pull Requests"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/trimstray/the-book-of-secret-knowledge/master/LICENSE.md"&gt;
    &lt;img src="https://camo.githubusercontent.com/2ee5364f0e08ac47e00119204cf1ab24dd21ec87b4fb81bb657feae43ec88ed4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d6c69676874677265792e7376673f6c6f6e6743616368653d74727565" alt="MIT License"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://twitter.com/trimstray" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/c43b110bed909475c271c4eeb9255d8aa76e2e14be650239653f02cdab85ae4c/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f7472696d73747261792e7376673f6c6f676f3d74776974746572"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;div&gt;
  Created by
  &lt;a href="https://twitter.com/trimstray" rel="nofollow"&gt;trimstray&lt;/a&gt; and
  &lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge/graphs/contributors"&gt;contributors&lt;/a&gt;

&lt;/div&gt;




&lt;h2&gt;
📔  What is it?&lt;/h2&gt;
&lt;p&gt;This repository is a collection of various materials and tools that I use every day in my work. It contains a lot of useful information gathered in one piece. It is an invaluable source of knowledge for me that I often look back on.&lt;/p&gt;
&lt;h2&gt;
🚻  For whom?&lt;/h2&gt;
&lt;p&gt;For everyone, really. Here everyone can find their favourite tastes. But to be perfectly honest, it is aimed towards System and Network administrators, DevOps, Pentesters, and Security Researchers.&lt;/p&gt;
&lt;h2&gt;
ℹ️  Contributing&lt;/h2&gt;
&lt;p&gt;If you find something which doesn't make sense, or something doesn't seem right, please make a pull request and please add valid and well-reasoned explanations about your changes or comments.&lt;/p&gt;
&lt;p&gt;A few simple rules for this project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inviting and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#2-awesome-scalability"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://github.com/binhnguyennus/awesome-scalability"&gt;Awesome Scalability&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 32.5k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo has an organized reading list for illustrating the patterns of scalable, reliable, and performant large-scale systems. This is one of the best resources on scalability with real examples from large organizations.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/binhnguyennus"&gt;
        binhnguyennus
      &lt;/a&gt; / &lt;a href="https://github.com/binhnguyennus/awesome-scalability"&gt;
        awesome-scalability
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Patterns of Scalable, Reliable, and Performant Large-Scale Systems
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="http://awesome-scalability.com/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6a8pgi6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/logo.png" alt="Logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An updated and organized reading list for illustrating the patterns of scalable, reliable, and performant large-scale systems. Concepts are explained in the articles of prominent engineers and credible references. Case studies are taken from battle-tested systems that serve millions to billions of users.&lt;/p&gt;
&lt;h4&gt;
If your system goes slow&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Understand your problems: scalability problem (fast for a single user but slow under heavy load) or performance problem (slow for a single user) by reviewing some &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#principle"&gt;design principles&lt;/a&gt; and checking how &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#scalability"&gt;scalability&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#performance"&gt;performance&lt;/a&gt; problems are solved at tech companies. The section of &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#intelligence"&gt;intelligence&lt;/a&gt; are created for those who work with data and machine learning at big (data) and deep (learning) scale.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
If your system goes down&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;"Even if you lose all one day, you can build all over again if you retain your calm!" - Thuan Pham, former CTO of Uber. So, keep calm and mind the &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#availability"&gt;availability&lt;/a&gt; and &lt;a href="https://raw.githubusercontent.com/binhnguyennus/awesome-scalability/master/#stability"&gt;stability&lt;/a&gt; matters!&lt;/p&gt;
&lt;/blockquote&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/binhnguyennus/awesome-scalability"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-devops-exercises"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://github.com/bregman-arie/devops-exercises"&gt;DevOps Exercises&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 8.6k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo contains questions and exercises on technical topics related to DevOps and SRE.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bregman-arie"&gt;
        bregman-arie
      &lt;/a&gt; / &lt;a href="https://github.com/bregman-arie/devops-exercises"&gt;
        devops-exercises
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Linux, Jenkins, AWS, SRE, Prometheus, Docker, Python, Ansible, Git, Kubernetes, Terraform, OpenStack, SQL, NoSQL, Azure, GCP, DNS, Elastic, Network, Virtualization. DevOps Interview Questions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/devops_exercises.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb09dzMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/devops_exercises.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ℹ️  This repo contains questions and exercises on various technical topics, sometimes related to DevOps and SRE :)&lt;/p&gt;
&lt;p&gt;📊  There are currently &lt;strong&gt;1553&lt;/strong&gt; questions&lt;/p&gt;
&lt;p&gt;📚  To learn more about DevOps and SRE, check the resources in &lt;a href="https://github.com/bregman-arie/devops-resources"&gt;devops-resources&lt;/a&gt; repository&lt;/p&gt;
&lt;p&gt;⚠️  You can use these for preparing for an interview but most of the questions and exercises don't represent an actual interview. Please read &lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/common-qa.md"&gt;Q&amp;amp;A&lt;/a&gt; for more details&lt;/p&gt;
&lt;p&gt;👥  &lt;a href="https://www.facebook.com/groups/538897960007080" rel="nofollow"&gt;Join&lt;/a&gt; our &lt;a href="https://www.facebook.com/groups/538897960007080" rel="nofollow"&gt;DevOps community&lt;/a&gt; where we have discussions and resources on DevOps&lt;/p&gt;
&lt;p&gt;📝  You can add more questions and exercises by submitting pull requests :) Read about contribution guidelines &lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/CONTRIBUTING.md"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#devops"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNtHkNqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/devops.png" width="70px;" height="75px;" alt="DevOps"&gt;&lt;br&gt;&lt;b&gt;DevOps&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#jenkins"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dg5AdRYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/jenkins.png" width="85px;" height="85px;" alt="Jenkins"&gt;&lt;br&gt;&lt;b&gt;Jenkins&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#git"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uUlFk_8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/git.png" width="80px;" height="75px;" alt="Git"&gt;&lt;br&gt;&lt;b&gt;Git&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#ansible"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5deOUih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/ansible.png" width="75px;" height="75px;" alt="ansible"&gt;&lt;br&gt;&lt;b&gt;Ansible&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#Network"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4jbLqGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/network.png" width="80x;" height="75px;" alt="Network"&gt;&lt;br&gt;&lt;b&gt;Network&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#linux"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4gBbxA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/linux.png" width="75x;" height="75px;" alt="Linux"&gt;&lt;br&gt;&lt;b&gt;Linux&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#terraform"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXcBiZVI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/terraform.png" width="70px;" height="75px;" alt="Terraform"&gt;&lt;br&gt;&lt;b&gt;Terraform&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#programming"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6nD1n1xQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/programming.png" width="75px;" height="75px;" alt="programming"&gt;&lt;br&gt;&lt;b&gt;Programming&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#python"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2C1IOISE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/python.png" width="80px;" height="75px;" alt="Python"&gt;&lt;br&gt;&lt;b&gt;Python&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#go"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLtC_nLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/Go.png" width="75px;" height="75px;" alt="go"&gt;&lt;br&gt;&lt;b&gt;Go&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#shell-scripting"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L0AbH1mo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/bash.png" width="70px;" height="75px;" alt="Bash"&gt;&lt;br&gt;&lt;b&gt;Shell Scripting&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#kubernetes"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZcVsYx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/kubernetes.png" width="75px;" height="75px;" alt="kubernetes"&gt;&lt;br&gt;&lt;b&gt;Kubernetes&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#prometheus"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9oLro69O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/prometheus.png" width="75px;" height="75px;" alt="Prometheus"&gt;&lt;br&gt;&lt;b&gt;Prometheus&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#mongo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCxBdvkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/mongo.png" width="75px;" height="75px;" alt="Mongo"&gt;&lt;br&gt;&lt;b&gt;Mongo&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#cloud"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V6offB----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/cloud.png" width="110px;" height="75px;" alt="Cloud"&gt;&lt;br&gt;&lt;b&gt;Cloud&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#aws"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoSnHdDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/aws.png" width="75px;" height="75px;" alt="aws"&gt;&lt;br&gt;&lt;b&gt;AWS&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#azure"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpgkvCC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/azure.png" width="75px;" height="75px;" alt="azure"&gt;&lt;br&gt;&lt;b&gt;Azure&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#gcp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKYaZXFX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/googlecloud.png" width="80px;" height="75px;" alt="Google Cloud Platform"&gt;&lt;br&gt;&lt;b&gt;Google Cloud Platform&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#openstack"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Sy93A5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/openstack.png" width="75px;" height="75px;" alt="openstack"&gt;&lt;br&gt;&lt;b&gt;OpenStack&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#security"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxLpQsn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/security.png" width="75px;" height="75px;" alt="security"&gt;&lt;br&gt;&lt;b&gt;Security&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#puppet"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKdgDjIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/puppet.png" width="75px;" height="75px;" alt="puppet"&gt;&lt;br&gt;&lt;b&gt;Puppet&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#monitoring"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfbkjAzS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/monitoring.png" width="75px;" height="75px;" alt="Monitoring"&gt;&lt;br&gt;&lt;b&gt;Monitoring&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#elastic"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4WrKgy75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/elastic.png" width="110px;" height="75px;" alt="Elastic"&gt;&lt;br&gt;&lt;b&gt;Elastic&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#virtualization"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3s6DIgIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/virtualization.png" width="75px;" height="75px;" alt="Virtualization"&gt;&lt;br&gt;&lt;b&gt;Virtualization&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#dns"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oDa-4tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/dns.png" width="75px;" height="75px;" alt="DNS"&gt;&lt;br&gt;&lt;b&gt;DNS&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#operating-system"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xR1YZDBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/os.png" width="75px;" height="75px;" alt="Operating System"&gt;&lt;br&gt;&lt;b&gt;Operating System&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#distributed"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vz7c0jRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/distributed.png" width="110px;" height="75px;" alt="Distributed"&gt;&lt;br&gt;&lt;b&gt;Distributed&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#general"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mMmBNbCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/general.png" width="110px;" height="75px;" alt="General"&gt;&lt;br&gt;&lt;b&gt;General&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#testing"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0X0X3mgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/testing.png" width="75px;" height="75px;" alt="Testing"&gt;&lt;br&gt;&lt;b&gt;Testing&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#databases"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3imgOYm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/databases.png" width="75px;" height="75px;" alt="Databases"&gt;&lt;br&gt;&lt;b&gt;Databases&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#regex"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJDAwVtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/regex.png" width="75ph;" height="75px;" alt="RegEx"&gt;&lt;br&gt;&lt;b&gt;Regex&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#system-design"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JiQuC29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/design.png" width="110px;" height="75px;" alt="Design"&gt;&lt;br&gt;&lt;b&gt;System Design&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#hardware"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXLHGsIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/hardware.png" width="110px;" height="75px;" alt="Hardware"&gt;&lt;br&gt;&lt;b&gt;Hardware&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#big-data"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_yNlL3qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/big-data.png" width="110px;" height="75px;" alt="Big Data"&gt;&lt;br&gt;&lt;b&gt;Big Data&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#questions-you-ask"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CAarJQgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/you.png" width="110px;" height="75px;" alt="you"&gt;&lt;br&gt;&lt;b&gt;Questions you ask&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#certificates"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYoAbZam--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/certificates.png" width="75px;" height="75px;" alt="Certificates"&gt;&lt;br&gt;&lt;b&gt;Certificates&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#containers"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--piwJpywR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/containers.png" width="70px;" height="75px;" alt="Containers"&gt;&lt;br&gt;&lt;b&gt;Containers&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#sql"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cso8Jjt_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/sql.png" width="75px;" height="75px;" alt="sql"&gt;&lt;br&gt;&lt;b&gt;SQL&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#openshift"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQI81TUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/openshift.png" width="75px;" height="75px;" alt="OpenShift"&gt;&lt;br&gt;&lt;b&gt;OpenShift&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#storage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lK7GzMc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/storage.png" width="75px;" height="75px;" alt="Storage"&gt;&lt;br&gt;&lt;b&gt;Storage&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#HR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYZxXM2y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/HR.png" width="110px;" height="75px;" alt="HR"&gt;&lt;br&gt;&lt;b&gt;HR&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td&gt;&lt;a href="https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/#exercises"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rciNPz3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/bregman-arie/devops-exercises/master/images/exercises.png" width="110px;" height="75px;" alt="Exercises"&gt;&lt;br&gt;&lt;b&gt;Exercises&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
DevOps&lt;/h2&gt;

What is…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/bregman-arie/devops-exercises"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-test-your-sysadmin-skills"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills"&gt;Test your sysadmin skills&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 7.2k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This project contains test questions and answers that can be asked during an interview/exam for positions such as Linux System Administrator.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trimstray"&gt;
        trimstray
      &lt;/a&gt; / &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills"&gt;
        test-your-sysadmin-skills
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collection of Linux Sysadmin Test Questions and Answers. Test your knowledge and skills in different fields with these Q/A.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZLA4kAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/trimstray/test-your-sysadmin-skills/raw/master/static/img/sysadmin_preview.png" alt="Master"&gt;
  &lt;/a&gt;
&lt;/p&gt;



&lt;p&gt;⭐&lt;/p&gt;

&lt;p&gt;"&lt;i&gt;A great Admin doesn't need to know everything, but they should be able to come up with amazing solutions to impossible projects.&lt;/i&gt;" - cwheeler33 (ServerFault)&lt;/p&gt;

&lt;p&gt;⭐&lt;/p&gt;

&lt;p&gt;"&lt;i&gt;My skills are making things work, not knowing a billion facts. [...] If I need to fix a system I’ll identify the problem, check the logs and look up the errors. If I need to implement a solution I’ll research the right solution, implement and document it, the later on only really have a general idea of how it works unless I interact with it frequently... it’s why it’s documented.&lt;/i&gt;" - Sparcrypt (Reddit)&lt;/p&gt;



&lt;p&gt;
  &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills/pulls"&gt;
    &lt;img src="https://camo.githubusercontent.com/d29d75f2930f80fe8a37354d3d3d44518d4e6b4a31f8b646b90c56e7e0d1e463/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f6c6f6e6743616368653d74727565" alt="Pull Requests"&gt;
  &lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/trimstray/test-your-sysadmin-skills/master/LICENSE.md"&gt;
    &lt;img src="https://camo.githubusercontent.com/2ee5364f0e08ac47e00119204cf1ab24dd21ec87b4fb81bb657feae43ec88ed4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d6c69676874677265792e7376673f6c6f6e6743616368653d74727565" alt="MIT License"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://twitter.com/trimstray" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/c43b110bed909475c271c4eeb9255d8aa76e2e14be650239653f02cdab85ae4c/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f7472696d73747261792e7376673f6c6f676f3d74776974746572"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;div&gt;
  Created by
  &lt;a href="https://twitter.com/trimstray" rel="nofollow"&gt;trimstray&lt;/a&gt; and
  &lt;a href="https://github.com/trimstray/test-your-sysadmin-skills/graphs/contributors"&gt;contributors&lt;/a&gt;

&lt;/div&gt;



&lt;br&gt;
&lt;br&gt;

&lt;p&gt;ℹ️  This project contains &lt;strong&gt;284&lt;/strong&gt; test questions and answers that can be used as a test your knowledge or during an interview/exam for position such as &lt;strong&gt;Linux (*nix) System Administrator&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;✔️  The answers are only &lt;strong&gt;examples&lt;/strong&gt; and do not exhaust…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trimstray/test-your-sysadmin-skills"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#5-how-they-sre"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://github.com/upgundecha/howtheysre"&gt;How they SRE&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;⭐ Github stars: 4.8k&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This repo is a curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE)&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/upgundecha"&gt;
        upgundecha
      &lt;/a&gt; / &lt;a href="https://github.com/upgundecha/howtheysre"&gt;
        howtheysre
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE)
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
How they SRE&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;img src="https://camo.githubusercontent.com/0ff11ed110cfa69f703ef0dcca3cee6141c0a8ef465e8237221ae245de3deb3d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5052732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265" alt="PRs Welcome"&gt;&lt;/a&gt; &lt;a href="https://github.com/upgundecha/howtheysre/actions/workflows/workflow.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXEhLQc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/upgundecha/howtheysre/actions/workflows/workflow.yml/badge.svg" alt="CI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/upgundecha/howtheysre/main/banner.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9DMdVtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/upgundecha/howtheysre/main/banner.png" alt="Alt" title="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How They SRE&lt;/strong&gt; is a curated knowledge repository of best practices, tools, techniques, and culture of SRE adopted by the leading technology or tech-savvy organizations.&lt;/p&gt;
&lt;p&gt;Many organizations regularly come forward and share their best practices, tools, techniques and offer an insight into engineering culture on various public platforms like engineering blogs, conferences &amp;amp; meetups. The content is curated from these avenues and shared in this repository.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note to readers: This list refers to some of the articles, posts, videos, tools, and techniques published before 2015. Please use such material with caution as there may be recent advances in technology and practices which offer better alternatives and perspectives.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
Topics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Site Reliability Engineering&lt;/li&gt;
&lt;li&gt;Hiring and Building SRE teams&lt;/li&gt;
&lt;li&gt;SRE Culture&lt;/li&gt;
&lt;li&gt;DevOps&lt;/li&gt;
&lt;li&gt;Monitoring &amp;amp; Observability&lt;/li&gt;
&lt;li&gt;Alerting&lt;/li&gt;
&lt;li&gt;Incident Response…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/upgundecha/howtheysre"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;I hope you enjoyed this list. I will be coming up with more such amazing resources soon. So, stay tuned! 🙂&lt;/p&gt;




&lt;p&gt;Currently building &lt;a href="https://bit.ly/3h6mOMc"&gt;Signoz&lt;/a&gt; - an open-source APM and observability tool. 💙&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. It is an open-source alternative to DataDog, New Relic, etc.👇&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;

&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;

&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
👇 Features:&lt;/h3&gt;


&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>devops</category>
      <category>github</category>
      <category>cloud</category>
      <category>docker</category>
    </item>
    <item>
      <title>Cloud Computing- An Overview</title>
      <author>Neha Soni</author>
      <pubDate>Fri, 25 Jun 2021 12:00:36 +0000</pubDate>
      <link>https://dev.to/nehasoni__/cloud-computing-an-overview-4ib3</link>
      <guid>https://dev.to/nehasoni__/cloud-computing-an-overview-4ib3</guid>
      <description>&lt;p&gt;Hi everyone 👋🏻,&lt;br&gt;&lt;br&gt;
In this blog post, I am going to give you an overview of cloud computing. We will look at the examples of cloud computing and the old way of doing things. After that, I will also discuss the service models for cloud computing. &lt;br&gt;&lt;br&gt;
&lt;em&gt;Let's get started&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#traditional-computing"&gt;
  &lt;/a&gt;
  Traditional Computing
&lt;/h1&gt;

&lt;p&gt;It is a computing environment historically used for hosting services, applications, and data that are owned, managed, and controlled by the same organization. In this computing, the user can have access to data only on the system in which data is stored. It is a possess of using physical &lt;strong&gt;data centers&lt;/strong&gt; for storing digital assets and running complete networking systems for daily operations. Now, &lt;br&gt;&lt;em&gt;What is a data center?&lt;/em&gt; &lt;br&gt;In a layman language, the data center is a building somewhere and in that building, we have routers, switches, firewalls, storage systems, servers, and application delivery controllers. And a data center is not really a cheap thing to build and maintain. For maintaining a data center there must be special air conditioning systems, redundant power supplies, redundant network connectivity, and lots of infrastructures to make sure that your services run &lt;strong&gt;24/7&lt;/strong&gt;. So there is a lot of headache in maintaining data centers. That's why many companies say goodbye to traditional IT and move to &lt;strong&gt;cloud computing&lt;/strong&gt;. But it doesn't mean it has gone away. It's still used in some companies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HL-KXqaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618019386/Th2NNlJdd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HL-KXqaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618019386/Th2NNlJdd.jpeg" alt="traditional it.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-cloud-computing"&gt;
  &lt;/a&gt;
  What is Cloud Computing?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;"Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go pricing. Instead of buying, owning, and maintaining physical data centers and servers, you can access technology services, such as computing power, storage, and databases, on an as-needed basis from a cloud provider."&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_HXCj_W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618174731/dmV3tgDq7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_HXCj_W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618174731/dmV3tgDq7.png" alt="cloud.png"&gt;&lt;/a&gt;&lt;br&gt;
There are many cloud service providers in the market, some of these are:-&lt;br&gt;
1.) Amazon Web services&lt;br&gt;
2.) Microsoft Azure&lt;br&gt;
3.) Google Cloud&lt;br&gt;
4.) Alibaba Cloud&lt;br&gt;
5.) IBM Cloud&lt;br&gt;
6.) Oracle Cloud&lt;br&gt;
7.) Cloud Sigma&lt;br&gt;
8.) SAP&lt;br&gt;
....and many more&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloud-computing-examples"&gt;
  &lt;/a&gt;
  Cloud computing examples
&lt;/h1&gt;

&lt;p&gt;Let's take examples of some services or applications that use cloud services to understand what cloud computing is.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TwD1yyso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618329205/2-AQFQfPuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TwD1yyso--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624618329205/2-AQFQfPuo.png" alt="examples.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;1.) Gmail, Dropbox, Facebook&lt;/strong&gt;:- These all are examples of cloud storage providers and the number of cloud storage providers is increasing day by day.&lt;br&gt;
&lt;strong&gt;Gmail&lt;/strong&gt; is one of Google’s most important email service providers that provide unlimited storage on the cloud. It is used by billions of people. Gmail is a consumer service as well as it comes as a business package too.&lt;br&gt;
&lt;strong&gt;Dropbox&lt;/strong&gt; is established in 2008 and right now is a true leader in cloud storage. It is a storage service to offers up to 1 TB of storage space for free and allows users to access files on any device through its website.&lt;br&gt;
&lt;strong&gt;Facebook&lt;/strong&gt; is the largest social media platform globally with 2.6 billion monthly active users worldwide. It can store a large amount of information, images, videos on your profile.&lt;br&gt;
&lt;strong&gt;2.) Microsoft Office 365&lt;/strong&gt;:-  Microsoft office 365 is cloud-based product access by lots of users through the internet. With the help of Office 365, you can work from anywhere and share the work documents with your colleagues worldwide. There are number of benefits of office 365 like it improves user productivity, provides 1 TB storage with OneDrive. You can easily recover data from the cloud if you lose your computer or it crashes etc.&lt;br&gt;
&lt;strong&gt;3.) Dell’s Secure Healthcare Cloud&lt;/strong&gt;:- Dell is one of the most used cloud service providers in Healthcare. It allows nurses, physicians, and administrators to share information quickly from anywhere and patients can access it remotely without any delay. It ensures patients receive the best possible care without unnecessary delay.&lt;br&gt;
There are many more examples of cloud computing in different areas like in education there is AWS(Amazon web services),  SlideRocket, Ratatype. For the government, there are IT consolidation, shared services, citizen services, etc.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cloud-computing-deployment-models"&gt;
  &lt;/a&gt;
  Cloud Computing Deployment Models
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;"A cloud deployment model is defined according to where the infrastructure for the deployment resides and who has control over that infrastructure."&lt;/strong&gt; There are four deployment models associated with cloud computing:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KuXi_4vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624602777282/iiOCcHU8p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KuXi_4vf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624602777282/iiOCcHU8p.jpeg" alt="Cloud-Computing-types-Cloud-1.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-public-cloud"&gt;
  &lt;/a&gt;
  a.) Public cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4pY7zrq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605300408/H8PO0gs55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pY7zrq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605300408/H8PO0gs55.png" alt="publiccloud.png"&gt;&lt;/a&gt;&lt;br&gt;
Amazon, Google, Microsoft are examples of public cloud. These companies support all users who want to make use of a computing resource and provide both services as well as the infrastructure on a subscription basis. The main advantage of a public cloud is its &lt;strong&gt;versatility&lt;/strong&gt; and &lt;strong&gt;pay as you go&lt;/strong&gt; structure that allows customers to provide more capacity on demand. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#b-private-cloud"&gt;
  &lt;/a&gt;
  b.) Private cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LoUnV7zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605468764/_ulsM30YK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LoUnV7zE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605468764/_ulsM30YK.png" alt="download.png"&gt;&lt;/a&gt;&lt;br&gt;
Private cloud usually resides behind the firewall and is used exclusively by a single business or organization. It may be physically located on the company’s on-site data center or sometimes companies also pay third-party service providers to host their private cloud. Private clouds are more expensive than public clouds due to the capital expenditure involved in acquiring and maintaining them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-hybrid-cloud"&gt;
  &lt;/a&gt;
  c.) Hybrid Cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbowYK6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605954231/phQaBrZGe.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbowYK6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624605954231/phQaBrZGe.webp" alt="hybrid-cloud-diagram.webp"&gt;&lt;/a&gt;&lt;br&gt;
Hybrid cloud combines public cloud with private cloud. They are designed to allow the two platforms to interact seamlessly. Many organizations make use of this deployment model to scale up their IT infrastructure rapidly. It’s the perfect solution for organizations that needs a little bit of both options, usually dependent upon industry and size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#d-community-cloud"&gt;
  &lt;/a&gt;
  d.) Community Cloud
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPhcm-rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624606449839/3F4ikKpib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPhcm-rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624606449839/3F4ikKpib.png" alt="community-cloud.png"&gt;&lt;/a&gt;&lt;br&gt;
This deployment model supports multiple organizations sharing computing resources that are part of a community. The users are typically operating within the same industry or field and share common concerns in terms of security, compliance, and performance. It is not commonly used as the other three models. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#benefits-of-cloud-computing-over-traditional-it"&gt;
  &lt;/a&gt;
  Benefits of Cloud Computing over Traditional IT
&lt;/h1&gt;

&lt;p&gt;Let's discuss some benefits of cloud computing over Traditional IT and understands why companies choose to say goodbye to traditional IT.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Traditional IT infrastructure&lt;/th&gt;
&lt;th&gt;Cloud computing&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;hardware&lt;/td&gt;
&lt;td&gt;organizations will have to acquire a large number of servers, routers, switches, firewalls, storage systems with proper security&lt;/td&gt;
&lt;td&gt;All the hardware, networking, storage, and everything is provided by cloud service provider&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maintenance&lt;/td&gt;
&lt;td&gt;organizations will have to do regular checkups of their hardware and also have to ensure software being used are regularly updated&lt;/td&gt;
&lt;td&gt;Regular maintenance of hardware is handled by cloud service providers and they also handle software updates for services managed by service provider&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;disaster recovery&lt;/td&gt;
&lt;td&gt;organizations will have to do necessary backups of data and setup so in case of disaster the users don’t face any downtimes&lt;/td&gt;
&lt;td&gt;cloud service providers have a global infrastructure with multiple data centers within one region, so in case of any disaster, services are uninterrupted.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IT staff&lt;/td&gt;
&lt;td&gt;a team of trained IT professionals had to be hired to monitor the entire infrastructure&lt;/td&gt;
&lt;td&gt;cloud service providers have highly trained IT staff that works 24/7 to ensure best services&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;flexibility and scaling&lt;/td&gt;
&lt;td&gt;to handle increasing workloads, more powerful hardware have to be set up so the user doesn’t feel any lag in services&lt;/td&gt;
&lt;td&gt;Cloud hosting offers an enhanced level of flexibility and scalability. Cloud servers can scale up or down depending on the level of traffic your website receives.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;automation&lt;/td&gt;
&lt;td&gt;most of the processes of scaling up or down, backups, monitoring, etc. are manual and time-consuming&lt;/td&gt;
&lt;td&gt;from deploying the infrastructure, monitoring, backups to customers, and taking necessary actions in case of failures, all the things are automated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;running cost&lt;/td&gt;
&lt;td&gt;you will need to purchase equipment and additional server space upfront to adapt to business growth&lt;/td&gt;
&lt;td&gt;cloud service providers charge for the time resources are used or the amount of storage is being used.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#types-of-cloud-computing-services"&gt;
  &lt;/a&gt;
  Types of cloud computing services
&lt;/h1&gt;

&lt;p&gt;A lot of different types of cloud services fall under the overall category of cloud computing. The NIST(The National Institute of Standards and Technology) cloud computing definition identifies three cloud service models: software as a service (SaaS), platform as a service (PaaS), and infrastructure as a service (IaaS).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLjE1KMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624613119966/Xo49fqqRL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLjE1KMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624613119966/Xo49fqqRL.png" alt="spi4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saas"&gt;
  &lt;/a&gt;
  SaaS
&lt;/h3&gt;

&lt;p&gt;SaaS(Software as a Service) provides clients with the ability to use software applications on a remote basis via an internet web browser. Examples of SaaS include Google Applications and internet-based email applications like Mail, Hotmail, and Gmail. The most popular among online retailers, allows merchants to run direct sales applications such as shopping carts in the cloud without their customers having to download or install programs to make a purchase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paas"&gt;
  &lt;/a&gt;
  PaaS
&lt;/h3&gt;

&lt;p&gt;PaaS(Platform as a Service) provides clients with the ability to develop and publish customized applications in a hosted environment via the web. It represents a new model for software development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iaas"&gt;
  &lt;/a&gt;
  IaaS
&lt;/h3&gt;

&lt;p&gt;IaaS(Infrastructure as a Service) allows clients to remotely use IT hardware and resources on a "pay-as-you-go" basis. It is also referred to as HaaS(Hardware as service). Major IaaS players include companies like IBM, Google, and Amazon. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#future-of-cloud-computing"&gt;
  &lt;/a&gt;
  Future of cloud computing
&lt;/h1&gt;

&lt;p&gt;Cloud computing is the future of enterprise applications and solutions. The International Data Corporation (IDC) estimates that already in 2018 at least half of IT spending is cloud-based. It has many benefits that it provides to its users and businesses. There are no standards or regulations worldwide that provided data through cloud computing. &lt;/p&gt;

&lt;p&gt;If you enjoyed learning and find it useful please do like and share so that, it reaches others as well 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 😃
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know in the comment section if you have any doubts or feedback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You should definitely check out my other Blogs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/how-to-build-a-strong-professional-network-online-b7k"&gt;How to Build a Strong Professional Network Online&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/plasma-donation-website-using-mern-stack-26f5"&gt;Plasma Donation Website&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/random-quote-generator-using-html-css-and-javascript-3gbp"&gt;Random Quote Generator Using HTML, CSS, and JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-javascript-basics-g6n"&gt;Introduction to JavaScript: Basics&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/playing-with-javascript-objects-k4h"&gt;Playing with JavaScript Objects&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nehasoni__/7-javascript-data-structures-you-must-know-57ah"&gt;7 JavaScript Data Structures you must know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/digital-clock-using-javascript-2648"&gt;Digital Clock using JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://dev.to/nehasoni__/introduction-to-reactjs-3553"&gt;Introduction to ReactJS
&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>aws</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>AWS SSM Agent - Connection Error</title>
      <author>Vu Dao</author>
      <pubDate>Fri, 25 Jun 2021 11:49:21 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/aws-ssm-agent-connection-error-3kn9</link>
      <guid>https://dev.to/awscommunity-asean/aws-ssm-agent-connection-error-3kn9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#when-trying-to-access-ec2-instance-using-aws-ssm-cli-or-ssm-connect-manager-and-get-error-raw-plugin-with-name-standardstream-not-found-step-name-standardstream-endraw-no-worry-this-post-shows-you-how-to-trouble-shoot"&gt;
  &lt;/a&gt;
  &lt;strong&gt;When trying to access EC2 instance using AWS ssm cli or SSM connect manager and get error &lt;code&gt;Plugin with name Standard_Stream not found. Step name: Standard_Stream&lt;/code&gt;. No worry, this post shows you how to trouble shoot&lt;/strong&gt;
&lt;/h2&gt;



&lt;h2&gt;
  &lt;a href="#whats-in-this-document"&gt;
  &lt;/a&gt;
  What’s In This Document
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#-What-is-the-error"&gt;What is the error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Investigate-and-Apply-solution"&gt;Investigate and Apply solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#what-is-the-error"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-What-is-the-error"&gt;What is the error&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We got error when trying access EC2 instance using SSM agent and AWS CLI
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⚡ $ aws ssm start-session --target i-123abc456efd789xx --region ap-northeast-2

Starting session with SessionId: userdev-004f77465f262084d


SessionId: userdev-004f77465f262084d : Plugin with name Standard_Stream not found. Step name: Standard_Stream
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Event from console&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90uRWFGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ssm-agent/blob/master/troubleshoot/img/error.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90uRWFGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/ssm-agent/blob/master/troubleshoot/img/error.png%3Fraw%3Dtrue" alt="Alt-text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do we need to install Session Manager plugin? It's optional but not the rootcause yet
&lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html"&gt;(Optional) Install the Session Manager plugin for the AWS CLI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#investigate-and-apply-solution"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Investigate-and-Apply-solution"&gt;Investigate and Apply solution&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;So far you need to access the EC2 using SSH with key-pem to debug (ask you admin)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Running &lt;code&gt;tail -f&lt;/code&gt; got issue&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tail: inotify resources exhausted
tail: inotify cannot be used, reverting to polling
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Restart ssm-agent service also got issue &lt;code&gt;No space left on device&lt;/code&gt; but it's not about disk space&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[root@env-test ec2-user]# systemctl restart amazon-ssm-agent.service
Error: No space left on device

[root@env-test ec2-user]# df -h |grep dev
devtmpfs         32G     0   32G   0% /dev
tmpfs            32G     0   32G   0% /dev/shm
/dev/nvme0n1p1  100G   82G   18G  83% /
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So the error itself means that system is getting low on inotify watches, that enable programs to monitor file/dirs changes. To see the currently set limit (including output on my machine)&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⚡ $ cat /proc/sys/fs/inotify/max_user_watches
8192
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check which processes using &lt;code&gt;inotify&lt;/code&gt; to improve your apps or increase &lt;code&gt;max_user_watches&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# for foo in /proc/*/fd/*; do readlink -f $foo; done | grep inotify | sort | uniq -c | sort -nr
      5 /proc/1/fd/anon_inode:inotify
      2 /proc/7126/fd/anon_inode:inotify
      2 /proc/5130/fd/anon_inode:inotify
      1 /proc/4497/fd/anon_inode:inotify
      1 /proc/4437/fd/anon_inode:inotify
      1 /proc/4151/fd/anon_inode:inotify
      1 /proc/4147/fd/anon_inode:inotify
      1 /proc/4028/fd/anon_inode:inotify
      1 /proc/3913/fd/anon_inode:inotify
      1 /proc/3841/fd/anon_inode:inotify
      1 /proc/31146/fd/anon_inode:inotify
      1 /proc/2829/fd/anon_inode:inotify
      1 /proc/21259/fd/anon_inode:inotify
      1 /proc/1934/fd/anon_inode:inotify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Notice that the above &lt;code&gt;inotify&lt;/code&gt; list include PID of ssm-agent processes, it explains why we got issue with SSM when &lt;code&gt;max_user_watches&lt;/code&gt; reached limit
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ps -ef |grep ssm-ag
root      3841     1  0 00:02 ?        00:00:05 /usr/bin/amazon-ssm-agent
root      4497  3841  0 00:02 ?        00:00:33 /usr/bin/ssm-agent-worker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;- Final Solution:&lt;/strong&gt; Permanent solution (preserved across restarts)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "fs.inotify.max_user_watches=1048576" &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Verify:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;⚡ $ aws ssm start-session --target i-123abc456efd789xx --region ap-northeast-2

Starting session with SessionId: userdev-03ccb1a04a6345bf5
sh-4.2$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This issue comes from EC2 instance not about SSM agent&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://dev.to/vumdao/understand-amazon-ssm-agent-in-2-minutes-1363"&gt;🔗&lt;/a&gt; to undestanding SSM agent in 2 minutes.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="https://dev.to/vumdao"&gt;🌠 Blog&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://github.com/vumdao/aws-eks-the-hard-way/blob/master/autoscaling"&gt;Github&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://stackoverflow.com/users/11430272/vumdao"&gt;stackoverflow&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/in/vu-dao-9280ab43/"&gt;Linkedin&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.linkedin.com/groups/12488649/"&gt;Group&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://www.facebook.com/CloudOpz-104917804863956"&gt;Page&lt;/a&gt;
  &lt;span&gt; · &lt;/span&gt;
  &lt;a href="https://twitter.com/VuDao81124667"&gt;Twitter 🌠&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>ssm</category>
      <category>ec2</category>
      <category>cloudopz</category>
    </item>
    <item>
      <title>My opinion on Lua</title>
      <author>JavaCode7</author>
      <pubDate>Fri, 25 Jun 2021 11:47:37 +0000</pubDate>
      <link>https://dev.to/javacode7/my-opinion-on-lua-4d39</link>
      <guid>https://dev.to/javacode7/my-opinion-on-lua-4d39</guid>
      <description>&lt;p&gt;Lua is my fifth favourite programming language and for good reason. I like its speed, its syntax and the fact that it is so simple. Lua is written in C and can be used for gamedev, webdev and sometimes even appdev.&lt;/p&gt;

&lt;p&gt;My first time using lua was in my thulium esolang. I used it in the lexer and found it nice and I was able to use it to do what I needed with minimal setup.&lt;/p&gt;

&lt;p&gt;I didn't touch lua again until I made chromium about a month later. I copied a lot of the code from thulium and in the end I got it done.&lt;/p&gt;

&lt;p&gt;I would say that lua is a language good for beginners but not the best for framework programming (excluding gamedev). The syntax is at least somewhat intuitive and thanks to its small size it is quite fast. It is also good in scripting.&lt;/p&gt;

&lt;p&gt;I like it mostly because of its applications in scripting (because I am not a framework dev) but its main weakness is the fact that it is... well... &lt;em&gt;weak&lt;/em&gt;. It doesn't have much functionality in the world of webdev and appdevs usually favour languages like JS and Python as opposed to Lua.&lt;/p&gt;

</description>
      <category>lua</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>The Ultimate CSS Selectors Cheat Sheet You Must Know</title>
      <author>Harish Rajora</author>
      <pubDate>Fri, 25 Jun 2021 11:34:54 +0000</pubDate>
      <link>https://dev.to/harishrajora12/the-ultimate-css-selectors-cheat-sheet-you-must-know-1m1f</link>
      <guid>https://dev.to/harishrajora12/the-ultimate-css-selectors-cheat-sheet-you-must-know-1m1f</guid>
      <description>&lt;p&gt;As a front-end developer, there are many times when you say, “What’s that property that takes child elements and applies CSS?” or something on the same thoughts. CSS is endless when you start to learn it.&lt;/p&gt;

&lt;p&gt;Selectors are among the first things you’ll need to know when you start using CSS. Once you dig deep into the CSS selectors, you’ll discover a lot more to CSS selectors than you initially assumed. Whether you’re an experienced web developer or just a novice, the CSS selectors cheat sheet will always come in handy to create &lt;a href="https://www.lambdatest.com/blog/how-to-make-a-cross-browser-compatible-website/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-25062021&amp;amp;utm_term=Harish"&gt;cross browser compatible websites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the ultimate CSS selectors cheat sheet, you’ll learn sophisticated highly functional CSS selectors that will save your significant amount of manual coding by allowing you to control and manipulate multiple elements based on their properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-css-selectors"&gt;
  &lt;/a&gt;
  What are CSS Selectors?
&lt;/h2&gt;

&lt;p&gt;CSS selectors are a part of the CSS rule set that selects the element we want to style. They are used in the CSS file or inside the “style” tag while declaring the CSS. CSS selectors play an essential role in applying the style to multiple elements at once. We can use the inline CSS using the “style” attribute.&lt;/p&gt;

&lt;p&gt;But what if we want to apply the same CSS to 15 elements, we have to do that 15 times. What if something needs to be changed? We have to do that edition again 15 times. A smart choice is to use the selector, group elements using the identifier and apply CSS in a single place. An example of a selector is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p, h1, #my_id {

       font-weight: bold;
       text-decoration: underline;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS selectors are not a unique subject to learn. They are just an enhancement to regular simple CSS styling, allowing us to select multiple elements at once. From this point onwards, we will start with the basic selectors and move our way upwards toward more complex ones.&lt;/p&gt;

&lt;p&gt;In this post, we will look at CSS selectors cheat sheet that will guide you in your &lt;a href="https://www.lambdatest.com/blog/20-elements-of-modern-web-design/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-25062021&amp;amp;utm_term=Harish"&gt;web designing&lt;/a&gt; career and improve the methods you already use for selecting elements.&lt;/p&gt;

&lt;p&gt;Let’s begin with our CSS Selectors list!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-simple-selectors"&gt;
  &lt;/a&gt;
  CSS Simple Selectors
&lt;/h2&gt;

&lt;p&gt;The first in our list of CSS selectors cheat sheet is the Simple selectors. Simple selectors in CSS do not include any hierarchical wraps or too much logic in the CSS. CSS simple selectors just locate the element through the identifier and implement the style.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-tag-selector"&gt;
  &lt;/a&gt;
  CSS Tag Selector
&lt;/h3&gt;

&lt;p&gt;The easiest CSS selector to apply is to catch the “tag” from the HTML and implement the styling on it. “Tags” are the predefined HTML tags, and with CSS selectors, you can catch them all with just a single line. In the following example, we selected the tag “H1” from the HTML code and fixed its text color as red and font size as 50px.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    h1 {
            color: red;
            font-size: 50px;
          }

  &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a web developer, you would find using the CSS simple selectors a lot of the time because the team sometimes settles on a few things such as the style of all the headings or how the paragraph looks. CSS simple selectors can catch all of them and help you stylize them in no time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-id-selector"&gt;
  &lt;/a&gt;
  CSS ID Selector
&lt;/h3&gt;

&lt;p&gt;This one is the most popular CSS selector in our CSS selectors cheat sheet which is used in styling the web page. The “id” selector determines the “id” of the element which helps in the styling. IDs are a great way to tag along with various elements and then use CSS selectors or JavaScript to select those elements and perform a few operations. For example, if you want a different color for a section or page, you can use the same id for all the elements and implement the functions.&lt;/p&gt;

&lt;p&gt;CSS Selector used with IDs starts with the symbol “#” followed by the styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    #my_id {
            color: red;
            font-size: 50px;
          }

&amp;lt;/style&amp;gt;
 &amp;lt;p id = "my_id"&amp;gt;CSS Selector&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will change the color and font size of all the elements tagged with the id name “my_id”.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-class-selector"&gt;
  &lt;/a&gt;
  CSS Class Selector
&lt;/h3&gt;

&lt;p&gt;Similar to the CSS ID selector, the CSS class selector selects all the elements with a particular class name. If there is at least one element with the defined class name, the styling is applied. Similar to the IDs, class names are also a great way to select multiple elements by giving them the same class.&lt;/p&gt;

&lt;p&gt;In addition, while using some framework such as Bootstrap, we get pre-defined classes for specific elements such as “large buttons”. We can just apply CSS via class selector, and all the large buttons will be changed to the defined setting. In such cases, the CSS class selector becomes faster than the CSS ID selectors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    .my_class {
            color: red;
            font-size: 50px;
          }

    &amp;lt;/style&amp;gt;
&amp;lt;p class = "my_class"&amp;gt;CSS Class Selector&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As shown in the above example of our CSS selectors cheat sheet, the “.” symbol represents a class name in CSS. In the above code, the class “my_class” is used to select the elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-the-css-selectors"&gt;
  &lt;/a&gt;
  Grouping the CSS Selectors
&lt;/h3&gt;

&lt;p&gt;A lot of the time, multiple elements will have the same styling configurations on a web page. So, instead of copy-pasting the same configuration multiple times for different IDs or classes, we can group them and let the web page know that these elements will share some common styling.&lt;/p&gt;

&lt;p&gt;In the following example in our CSS selectors cheat sheet, my_id and p are combined to color them red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
    #my_id, p {
            color: red;
          }

    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;center&amp;gt;
        &amp;lt;h1 id = "my_id"&amp;gt;I am a heading&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;I am a paragraph&amp;lt;/p&amp;gt;
    &amp;lt;/center&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiqzqg11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/unnamed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiqzqg11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/unnamed.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To group multiple selectors, just separate them with a comma as shown in the above code. The output above is taken out with the help of the &lt;a href="http://www.lambdatest.com?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-25062021&amp;amp;utm_term=Harish"&gt;LambdaTest&lt;/a&gt; a cloud testing platform that has 2000+ browsers and browser versions which helps you perform browser compatibility testing at scale, without worrying about the local infrastructure,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-universal-selector"&gt;
  &lt;/a&gt;
  CSS Universal Selector
&lt;/h3&gt;

&lt;p&gt;A website becomes unique by its unique features and signature style. An important part of establishing a signature, as an example, is the font type. Websites use unique and different font types as users often remember the website with these small features. When they see the same font anywhere else, that reminds them of your website. Hence, mission accomplished!&lt;/p&gt;

&lt;p&gt;Such ambitious thinking involves changing the font type (or any other property) of the complete website. We cannot implement the property everywhere on the web page. Anyways, we try to reduce the repetitive behaviour with CSS Selector and not increase them. Therefore, CSS developers have thought about a wonderful property called universal selector that selects everything on the web page, i.e. it is universal. This has made its place in our CSS selectors cheat sheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    * {
            color: red;
          }

 &amp;lt;/style&amp;gt;
&amp;lt;h1 id = "my_id"&amp;gt;I am a heading&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;I am a paragraph&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above selector in our CSS selectors cheat sheet selects every element and colors it red on the web page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-specific-class-selector"&gt;
  &lt;/a&gt;
  CSS Specific Class Selector
&lt;/h3&gt;

&lt;p&gt;The CSS class selector has a specific selector property to satisfy the use case requirement when the developer needs to select only a particular element rather than all with the same class. For example, I just want my “p” tag to be coloured red, but I have other elements too with the same class name and tag name defined. In such situations, we can use a specific class selector that uses specific elements of the same class.&lt;/p&gt;

&lt;p&gt;In the following example, all the elements are tagged with the class name “my_class”, but only the H1 will be coloured red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    h1.my_class {
            color: red;
          }

    &amp;lt;/style&amp;gt;
&amp;lt;h1 class = "my_class"&amp;gt;I am a heading&amp;lt;/h1&amp;gt;
 &amp;lt;p class = "my_class"&amp;gt;I am a paragraph&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the above code to observe the output on your browser screen.&lt;/p&gt;

&lt;p&gt;This brings us to the end of simple CSS selectors in our CSS selectors cheat sheet. The next section is dedicated to techniques that enable us to use a mix of different elements to target specific elements only.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-combinator-selectors"&gt;
  &lt;/a&gt;
  CSS Combinator Selectors
&lt;/h2&gt;

&lt;p&gt;The next type of selectors in our CSS selectors cheat sheet is CSS combinator selectors. As the name suggests, the CSS combinator selectors are a combination of more than one selector or, in general, more than one simple selector that is described in the above section. With the CSS combinator selectors, we can define relationships between two simple selectors and select only the elements that satisfy the relationship.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-descendant-selector"&gt;
  &lt;/a&gt;
  CSS Descendant Selector
&lt;/h3&gt;

&lt;p&gt;The first one in this CSS selectors list is CSS descendant selector works on the descendants of the specified element. The descendant selector is written by separating two elements with space where the second element is required to be the descendant of the first element. The relationship “descendant” symbolises that the element should be inside another element (before the first element tag has been closed). When such a relationship is found, the defined style is applied to the descendant element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    div p {
            color: red;
          }
    &amp;lt;/style&amp;gt;

  &amp;lt;div&amp;gt;
          &amp;lt;h1&amp;gt;I am a heading&amp;lt;/h1&amp;gt;
          &amp;lt;p&amp;gt;I am a paragraph&amp;lt;/p&amp;gt;
   &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, only the content inside the “p” tag will turn red since it is a descendant of the “div” tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-child-selector"&gt;
  &lt;/a&gt;
  CSS Child Selector
&lt;/h3&gt;

&lt;p&gt;The CSS child selector is another selector in our CSS selectors cheat sheet which is a little bit similar to the CSS descendant selector but with this selector to work, the second element should be a child of the first element. The child selector is defined with the “&amp;gt;” symbol which symbolizes that the second element is the child of the first element. So, what is the difference between being a descendant and being a child? The following example in our CSS selectors list will help you understand both the concept:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
    div &amp;gt; h3 {
            color: red;
          }

    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;center&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h3&amp;gt;I am a child&amp;lt;/h3&amp;gt;
          &amp;lt;h3&amp;gt;I am a child&amp;lt;/h3&amp;gt;
          &amp;lt;span&amp;gt;&amp;lt;h3&amp;gt;I am a descendant&amp;lt;/h3&amp;gt;&amp;lt;/span&amp;gt;
          &amp;lt;h3&amp;gt;I am a child&amp;lt;/h3&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/center&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pgyQOKcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pgyQOKcC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The third “p” tag is inside the “div” tag but not directly (as it is inside the span tag). Therefore, the third “p” is not a child of the “div” tag, whereas it is a child of the span tag. Hence the third “p” tag does not get the red colour.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-adjacent-sibling-selector"&gt;
  &lt;/a&gt;
  CSS Adjacent Sibling Selector
&lt;/h3&gt;

&lt;p&gt;The next selector in our CSS selectors list is the CSS adjacent sibling selector. The CSS adjacent sibling selector selects the element, which is directly followed by the first element. &lt;strong&gt;All the other elements sequences are ignored, and only the directly followed element is considered&lt;/strong&gt;. Note that the element has to be “followed” and not be “inside” the element. The CSS adjacent sibling selector is symbolized by the symbol “+”. In the following example, we check for the adjacent “h3” tag inside the “div” tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    div + h3 {
            color: red;
          }
&amp;lt;/style&amp;gt;
&amp;lt;div&amp;gt;
          &amp;lt;h3&amp;gt;I am not adjacent&amp;lt;/h3&amp;gt;
          &amp;lt;h3&amp;gt;Me neither&amp;lt;/h3&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;h3&amp;gt;I am adjacent&amp;lt;/h3&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the above code and observe which one of the H3 content gets red in the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-general-sibling-selector"&gt;
  &lt;/a&gt;
  CSS General Sibling Selector
&lt;/h3&gt;

&lt;p&gt;The CSS general sibling selector selects all the siblings, i.e. whenever the element is followed instead of the first sibling which happens in the CSS adjacent sibling selector. The CSS general sibling selector is just the generalised form of the adjacent sibling selector in CSS. The following code uses the same snippet as above, tweaking its selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
    div ~ h3 {
            color: red;
          }

    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;center&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;h3&amp;gt;I Am Not Adjacent&amp;lt;/h3&amp;gt;
          &amp;lt;h3&amp;gt;Me Neither&amp;lt;/h3&amp;gt;
        &amp;lt;/div&amp;gt;
          &amp;lt;h3&amp;gt;I am adjacent&amp;lt;/h3&amp;gt;
          &amp;lt;h3&amp;gt;Me Too&amp;lt;/h3&amp;gt;
    &amp;lt;/center&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1fJsrpkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1fJsrpkE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As seen in the above image, all the siblings of the “div” tag named “p” are colored red. Note that sibling, children and descendant here references the document object model of the webpage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-pseudoclass-selectors"&gt;
  &lt;/a&gt;
  CSS Pseudo-Class Selectors
&lt;/h2&gt;

&lt;p&gt;CSS pseudo-class selectors are popular ones in our CSS selectors cheat sheet used while styling the components with conditions. Pseudo-classes get hold of the elements on particular states rather than without any condition as done by the CSS simple selectors. For example, the pseudo-class hover selects the elements only when the mouse is moved over to the element. Pseudo-classes give us more control and enable us to style elements quickly without taking any help from JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-link-pseudo-class-selector"&gt;
  &lt;/a&gt;
  CSS Link Pseudo Class Selector
&lt;/h3&gt;

&lt;p&gt;The first pseudo-class in our CSS pseudo-class selector list is the link selector. The link selector applies the styling to the unvisited link of the element we attach this class to. To use the link pseudo-class selector, the “link” keyword is used along with the pseudo-class symbol “:”. The following example uses the link pseudo-class selector on the anchor tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    a:link {
            color: red;
          }

    &amp;lt;/style&amp;gt;
  &amp;lt;a href = "www.google.com"&amp;gt;This is an unvisited link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above link will appear red until visited. Note that the “href” attribute plays a vital role in the link pseudo-class. Even though the anchor tag is used for the link will not be recognized without the “href” tag. Hence, the pseudo-class selector will not work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-visited-pseudo-class-selector"&gt;
  &lt;/a&gt;
  CSS Visited Pseudo Class Selector
&lt;/h3&gt;

&lt;p&gt;The link pseudo-class selector works on the unvisited links. When we click the same link, the visited flag is turned on with respect to that link so the user can know that he has already visited it. The visited pseudo-class selector applies the styling to the visited links. The keyword used here is “visited”, along with the “:” symbol for pseudo-class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    a:visited {
            color: red;
          }

    &amp;lt;/style&amp;gt;
&amp;lt;a href = "https://www.google.com" target="_blank"&amp;gt;This is a link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The link will turn red after the user has clicked it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-hover-pseudo-class-selector"&gt;
  &lt;/a&gt;
  CSS Hover Pseudo Class Selector
&lt;/h3&gt;

&lt;p&gt;The hover pseudo-class selector works when the mouse is hovered over to the element to which the selector is attached. CSS hover pseudo-class brings out some unique styling elements such as changing the background colour etc. The hover pseudo-class is identified by the keyword “hover” and the “:” symbol for pseudo-class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
    .my_div {
      background-color: blue;
      width: 300px;
      height: 300px;
    }
    .my_div:hover {
          background-color: red;
      }
    &amp;lt;/style&amp;gt;

  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;center&amp;gt;
        &amp;lt;div class="my_div"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/center&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vzcFggx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/2021-04-26_17-24-26.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vzcFggx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/2021-04-26_17-24-26.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the above example of our CSS selectors cheat sheet, the div box uses the hover tag to change its background from blue to red on a mouse hover.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-active-pseudoclass-selector"&gt;
  &lt;/a&gt;
  CSS Active Pseudo-Class Selector
&lt;/h3&gt;

&lt;p&gt;Next in our CSS selectors list is the CSS active pseudo-class selector. The active pseudo-class selector selects the element when selecting the element with the mouse (the mouse-click). The active pseudo-class selector is identified with the “active” keyword along with the pseudo-class symbol “:”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    .my_div {
      background-color: blue;
      width: 300px;
      height: 300px;
    }
    .my_div:active {
          background-color: red;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;div class="my_div"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the above-tweaked code to notice the difference between the hover and active pseudo-classes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-checked-pseudoclass-selector"&gt;
  &lt;/a&gt;
  CSS Checked Pseudo-Class Selector
&lt;/h3&gt;

&lt;p&gt;Another pseudo-class selector in the CSS selectors cheat sheet is the CSS checked selector. The checked selector selects the element when it is in the “checked” state. Since a “checked” state is required, it works on the checkbox and radio buttons only. The keyword used is “checked” along with the “:” symbol. The following code changes the colour of the text when the checkbox is checked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
      input[type = checkbox]:checked + label{
        color: red;
      }
      &amp;lt;/style&amp;gt;
  &amp;lt;input type="checkbox" class="my_button" value="Radio Button"&amp;gt;
   &amp;lt;label for = "check_button"&amp;gt;Radio Button&amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above code uses the CSS attribute selector, which will be discussed in the next section.&lt;/p&gt;

&lt;p&gt;The code changes the text colour from black to red. A popular use case of using the CSS checked selector is for building up the image gallery with thumbnails that can be viewed only when the user checks the thumbnail. Such examples can be seen on e-Commerce websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-firstchild-pseudoclass"&gt;
  &lt;/a&gt;
  CSS First-Child Pseudo-Class
&lt;/h3&gt;

&lt;p&gt;The first-child CSS class selector selects the first child among all the occurrences of the element. The first-child pseudo-class is identified by the term “first-child” along with the “:” symbol. In the following example of our CSS selectors cheat sheet, notice how the first “p” child gets selected on the web page with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
      p:first-child{
        color: red;
      }
      &amp;lt;/style&amp;gt;

    &amp;lt;p&amp;gt;This is the first child&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;This isn't&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUWRZXXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/first_child_pseudo_class.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUWRZXXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/first_child_pseudo_class.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first child is selected and turned red in the above example. A more clearer picture can be drawn by looking at the following example that uses CSS selector groups and the first-child pseudo-class together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
      &amp;lt;style&amp;gt;
      ul li:first-child{
        color: red;
      }
      &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;I am the first-child&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;Am I?&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;Am I?&amp;lt;/li&amp;gt;
          &amp;lt;li&amp;gt;
            &amp;lt;ul&amp;gt;
              &amp;lt;li&amp;gt;I am the first-child&amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;Am I?&amp;lt;/li&amp;gt;
              &amp;lt;li&amp;gt;Am I?&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
          &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kKTkiaT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/unnamed-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKTkiaT6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/unnamed-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice how two “li” tags get the red colour as they both are the first “li” after a “ul” tag. Hence, they both are first-child. These operations are good for heading related purposes and scenarios where the first element denotes what is being followed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-popular-css-pseudo-classes"&gt;
  &lt;/a&gt;
  Other Popular CSS Pseudo Classes
&lt;/h3&gt;

&lt;p&gt;The following table denotes some of the more common pseudo-classes in our CSS selectors list. You can try them and mix them to make colourful and logical web pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fxekIoom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/6512e683-0873-4407-922f-9f9b4ebcbff7/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fxekIoom--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/6512e683-0873-4407-922f-9f9b4ebcbff7/" alt="Capture.PNG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#combining-pseudoclasses-with-css-classes"&gt;
  &lt;/a&gt;
  Combining Pseudo-Classes with CSS Classes
&lt;/h3&gt;

&lt;p&gt;In addition to our list of pseudo-classes and ultimately our CSS selectors list, we can combine them with the CSS classes to narrow down our selections and make our selectors work less in finding the elements. We can select the specific classes tagged along with the HTML tags and use pseudo-class selectors on them with this combination. In the example below, I have assigned a class to one of the div tags to select later using the selectors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
      &amp;lt;style&amp;gt;
      div {
        background-color: blue;
        width: 300px;
        height: 300px;
      }

      div.my_div:hover{
        background-color: red;
      }
      &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
      &amp;lt;center&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;div class="my_div"&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/center&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcCMarF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pseudo_class_combined_css_class.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcCMarF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pseudo_class_combined_css_class.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s easier and convenient than applying multiple classes and multiple selectors to achieve our objectives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-pseudo-element-selectors"&gt;
  &lt;/a&gt;
  CSS Pseudo Element Selectors
&lt;/h2&gt;

&lt;p&gt;Similar to the pseudo-classes, our CSS selectors list contains another similar property called pseudo-element selectors. With pseudo-classes, we select the complete element and apply the styling to it. In pseudo-elements, instead of the complete element, we grab a specific part of the element and apply the styling on only those parts. They are accommodating in certain situations, such as inserting some element before a particular tag etc.&lt;/p&gt;

&lt;p&gt;Pseudo element selectors are identified by double colon instead of one as we used in pseudo-class. This notation was introduced in the CSS specification Level 3 to distinguish pseudo-elements from pseudo-classes. Before CSS 3, both of them used single colon notification. Let’s see some important pseudo-elements used in CSS selectors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-firstline-pseudoelement-selector"&gt;
  &lt;/a&gt;
  CSS First-Line Pseudo-Element Selector
&lt;/h3&gt;

&lt;p&gt;The first and one of the most commonly used pseudo-element selector in our CSS selectors list is the “first-line” selector. There is no science involved in decoding what this selector does. When we need to style the first line of the element, we use the “first-line” selector. The keyword used is “first-line” along with the “::” symbol of pseudo-element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    h2::first-line{
      color: green;
    }
      &amp;lt;/style&amp;gt;
&amp;lt;h2&amp;gt;Your Text&amp;lt;/h2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will turn the first line’s colour into green. Note that the “first-line” pseudo-element is applicable only on the block-level elements on the web page. As a developer, you can make use of the following HTML or CSS properties while working with the “first-line”:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;font properties&lt;/li&gt;
&lt;li&gt;color properties&lt;/li&gt;
&lt;li&gt;background properties&lt;/li&gt;
&lt;li&gt;word-spacing&lt;/li&gt;
&lt;li&gt;letter-spacing&lt;/li&gt;
&lt;li&gt;text-decoration&lt;/li&gt;
&lt;li&gt;vertical-align&lt;/li&gt;
&lt;li&gt;text-transform&lt;/li&gt;
&lt;li&gt;line-height&lt;/li&gt;
&lt;li&gt;clear&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-firstletter-pseudoelement-selector"&gt;
  &lt;/a&gt;
  CSS First-Letter Pseudo-Element Selector
&lt;/h3&gt;

&lt;p&gt;Next in our CSS selectors cheat sheet is The “first-letter” pseudo-element CSS selector which selects the first letter of the element we tag it to. The first-letter element then applies the defined styling to that letter. The “first-letter” pseudo-selector is very common in article writing. We often see the first letter being bigger and bolder with a different colour or any other such styling. This can be achieved through the keyword “first-letter” along with the pseudo-element symbol “::”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
      &amp;lt;style&amp;gt;
    h2::first-letter{
      color: green;
      font-size: 50px;
    }
      &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
      &amp;lt;center&amp;gt;
        &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;h2&amp;gt;Text&amp;lt;/h2&amp;gt;
      &amp;lt;/center&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNs0IO1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-6-1024x372.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNs0IO1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-6-1024x372.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code magnifies the first element and changes its colour.&lt;/p&gt;

&lt;p&gt;Like the “first-line” pseudo-element, the “first-letter” element can also be applied only to the block-level elements. As a web developer, the following properties can be used along with the “first-letter” pseudo-element:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;font properties&lt;/li&gt;
&lt;li&gt;color properties &lt;/li&gt;
&lt;li&gt;background properties&lt;/li&gt;
&lt;li&gt;margin properties&lt;/li&gt;
&lt;li&gt;padding properties&lt;/li&gt;
&lt;li&gt;border properties&lt;/li&gt;
&lt;li&gt;text-decoration&lt;/li&gt;
&lt;li&gt;vertical-align (only if “float” is “none”)&lt;/li&gt;
&lt;li&gt;text-transform&lt;/li&gt;
&lt;li&gt;line-height&lt;/li&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;clear&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#css-before-pseudo-element-selector"&gt;
  &lt;/a&gt;
  CSS Before Pseudo Element Selector
&lt;/h3&gt;

&lt;p&gt;The CSS, “before” pseudo-element selector, adds up the content before the target element. The content can be as per the UI styling approved by the team. An example can be to use the inverted commas before starting the heading in HTML. A similar thing can be noticed with the below example in our CSS selectors cheat sheet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
    p::before{
      content: "««";
      font-size: 25px;
    }
 &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will insert «« before the start of every paragraph.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-after-pseudo-element-selector"&gt;
  &lt;/a&gt;
  CSS After Pseudo Element Selector
&lt;/h3&gt;

&lt;p&gt;As the CSS “before” element works placing the content before the target element, the CSS after pseudo-element places the content after the target element. The following code demonstrates the before and after pseudo-element used in a paragraph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBYD4u3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/Pseudo-Element-Selector-1024x407.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBYD4u3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/Pseudo-Element-Selector-1024x407.png" alt="Pseudo Element Selector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code uses some styling elements for a start and the end of a paragraph. CSS “before” and “after” pseudo-elements are very common and very subtle in their usage. Often, you will see the elements but won’t notice anything special because it’s used too commonly today.&lt;/p&gt;

&lt;p&gt;Adding an image before the start of an element or some design elements or even applying inverted commas all work great with the after and before CSS pseudo-element. There are hundreds of use cases for the “before” and “after” pseudo-elements in CSS. If you have used something unique, we call for such designs in the comment section that are unique and help other people think creatively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-marker-pseudo-element-selector"&gt;
  &lt;/a&gt;
  CSS Marker Pseudo Element Selector
&lt;/h3&gt;

&lt;p&gt;Next in our CSS selectors cheat sheet is the CSS marker pseudo-element that selects the marker element from the web page and applies the defined styling onto it. The marker elements are the bullet points, numbered points or any other “li” element. The following code will mark the markers into the red colour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
      ul li::marker{
        color: red;
      }
      &amp;lt;/style&amp;gt;
&amp;lt;ul&amp;gt;
        &amp;lt;li&amp;gt;The first element&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;The second element&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;The third element&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will turn the bullet points into a red colour. Since we are constrained to use the marker only on a selected few elements, we are also constrained to the things we can do with the marker elements. The below-given list will enlighten you with the properties that can be used with the marker CSS pseudo-element.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The font-properties.&lt;/li&gt;
&lt;li&gt;The color properties.&lt;/li&gt;
&lt;li&gt;Direction, unicode-bidi and text-combine-upright properties.&lt;/li&gt;
&lt;li&gt;The white-space property.&lt;/li&gt;
&lt;li&gt;The content property.&lt;/li&gt;
&lt;li&gt;All animation and transition properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The marker property was also introduced in the CSS level 3 specification. If you are working with CSS level 1 or 2 (which is not recommended), this property might give you a bit of trouble.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-selection-pseudoelement-selector"&gt;
  &lt;/a&gt;
  CSS Selection Pseudo-Element Selector
&lt;/h3&gt;

&lt;p&gt;The CSS selection pseudo-element selector applies the styling to that part of the target element that has been selected by the user. They are a good candidate when there is too much content to let the user focus on a few words while reading. Thus making it an important addition to our CSS selectors cheat sheet list. The following code will colour the selected text improving the text readability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
      &amp;lt;style&amp;gt;
      p{
        font-size: 30px;
      }
      p::selection{
        color: red;
        font-size: 50px;
      }
      &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;p&amp;gt;Your Text&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhXCg8V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/selected_pseudo_element-1024x385.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhXCg8V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/selected_pseudo_element-1024x385.gif" alt="selected_pseudo_element"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above code turns the selected text to red. As you can see, the selection CSS pseudo-element selector works with the text; there are very few properties that can support this selector. The properties that can be used with the selection CSS pseudo-element are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;text-decoration property.&lt;/li&gt;
&lt;li&gt;text-shadow property.&lt;/li&gt;
&lt;li&gt;All the color properties including background-color.&lt;/li&gt;
&lt;li&gt;stroke-color, fill-color and stroke-width.&lt;/li&gt;
&lt;li&gt;cursor properties.&lt;/li&gt;
&lt;li&gt;outline properties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While working with the colours in the selection pseudo-element, keep in mind the accessibility and W3C guidelines on contrasts. Since many devices are associated with the internet, &lt;a href="https://www.lambdatest.com/feature?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-25062021&amp;amp;utm_term=Harish"&gt;browser compatibility testing&lt;/a&gt; and maintaining a well-constructed page is an add-on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#combining-pseudoelements-with-css-classes"&gt;
  &lt;/a&gt;
  Combining Pseudo-Elements with CSS classes
&lt;/h3&gt;

&lt;p&gt;Pseudo-elements in CSS can also be combined with the CSS classes similar to the pseudo-classes discussed above. This gives more control to the developers on the element and a little more flexibility. With this combination, you can go all creative and bring out a unique design on the web page.&lt;/p&gt;

&lt;p&gt;The following code combines a pseudo-element with the CSS class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
      &amp;lt;style&amp;gt;
      p{
        font-size: 30px;
      }
      p.my_class::first-line{
        color: red;
        font-size: 50px;
      }
      &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;p&amp;gt;Your Text&amp;lt;/p&amp;gt;
  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;p class="my_class"&amp;gt;Your Text&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I5NggPqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/unnamed-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I5NggPqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/unnamed-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only the “p” tag with the defined class is selected and coloured red in the above code.&lt;/p&gt;

&lt;p&gt;Note that you can also use multiple pseudo-elements targets to the same element like first-letter and first-line etc. Multiple elements work with pseudo-elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-attribute-selectors"&gt;
  &lt;/a&gt;
  CSS Attribute Selectors
&lt;/h2&gt;

&lt;p&gt;Next is the CSS Attribute Selectors in our CSS selectors cheat sheet. Web developers are quite familiar with the attributes used during the construction of a web page. Attributes help us provide specific instructions to the web elements and mould their working accordingly.&lt;/p&gt;

&lt;p&gt;Attributes also give us more options to play with the element and more control to handle these elements through JavaScript or CSS. CSS developers have thought about the similar composition and included the attributes in their selector library. These selectors that work with the attributes are called CSS attribute selectors, and in this section, we shall see a few of them with examples and demonstrations.&lt;/p&gt;

&lt;p&gt;The general syntax of using the CSS attribute selectors is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element [attribute] {
//styling
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-attribute-selector"&gt;
  &lt;/a&gt;
  CSS [attribute] Selector
&lt;/h3&gt;

&lt;p&gt;The first in our CSS selectors list of attribute selectors is the CSS [attribute] selector. This is the simplest of all the selectors and requires just the attribute name in the parameters. All the elements in the web page that contains this attribute name will be selected to apply the styling.&lt;/p&gt;

&lt;p&gt;The following code performs CSS styling on the “p” elements that have the “lang” attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; p[lang]{
        color: red;
        font-size: 20px;
      }
&amp;lt;p lang = “en”&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Your Text&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the above code in any browser to see the difference in styling in both “p” tags.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-attribute-value-selector"&gt;
  &lt;/a&gt;
  CSS [Attribute = Value] Selector
&lt;/h3&gt;

&lt;p&gt;The developer can also target an attribute with a specific value to narrow down their selection of elements. Rest everything remains the same as CSS [attribute] selector. The syntax for the same is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;element [attribute = “value”]
{
//styling 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can tweak the above code to target only the paragraphs written in the “en” language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
      &amp;lt;style&amp;gt;
      p[lang = "hi"]{
        color: red;
        font-size: 20px;
      }
      &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;p lang="en"&amp;gt;Your Text&amp;lt;/p&amp;gt;
    &amp;lt;p lang = "hi"&amp;gt;Your Text&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-xRLfy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-8-1024x379.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-xRLfy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-8-1024x379.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As expected, only the attribute “lang” with a value “hi” is selected, and the specified styling is applied to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-attribute-value-selector"&gt;
  &lt;/a&gt;
  CSS [Attribute ~= “Value”] Selector
&lt;/h3&gt;

&lt;p&gt;Next one in our CSS selectors cheat sheet is the CSS [Attribute ~= “value”] is an enhancement to the CSS [Attribute = “Value”] with a small added capability. The CSS [Attribute ~= “value”] can select the element if it includes the word “value” in the attribute specified. For example, the following code looks for the value “shirt” in the attribute “title”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
      p[title ~= "shirt"]{
        color: red;
        font-size: 20px;
      }
      &amp;lt;/style&amp;gt;
&amp;lt;p title="blue shirt"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title="red shirt"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title="hoodie"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code selects the first two paragraphs since they have a shirt in their title, which is the target attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-attribute-value-selector"&gt;
  &lt;/a&gt;
  CSS [attribute |= “value”] Selector
&lt;/h3&gt;

&lt;p&gt;The CSS[attribute |= “value”] selector selects all those attribute values that start with the word “value”. The following code demonstrates the selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
      p[title |= "shirt"]{
        color: red;
        font-size: 20px;
      }
      &amp;lt;/style&amp;gt;
&amp;lt;p title="shirt-blue"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title = "shirt-red"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title = "hoodie"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code colours the first two paragraphs into red colour. Note that CSS[attribute |= “value”] selector works only when the value is either a single word in the attribute such as only “shirt” or is hyphenated as “shirt-blue”. White space in between will not be selected by the CSS for styling. The value has to be one word. For example, the following code will only select the middle paragraph:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p title="shirt blue"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title = "shirt-red"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title = "hoodie"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be cautious before using this CSS selector in your CSS sheet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-attribute-value-selector"&gt;
  &lt;/a&gt;
  CSS [attribute ^= “value”] Selector
&lt;/h3&gt;

&lt;p&gt;The shortcoming of CSS[attribute |= “value”] is fulfilled by the CSS[attribute ^= “value”] selector. With this selector, the attribute value need not be a whole word (single or hyphenated). Any value that starts with the word “value” will be selected for styling. The following code demonstrates the working of the CSS [attribute ^= “value”] selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" dir="ltr"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;title&amp;gt;Web Template&amp;lt;/title&amp;gt;
      &amp;lt;style&amp;gt;
      p[title ^= "shirt"]{
        color: red;
        font-size: 20px;
      }
      &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
        &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;p title="shirt-blue"&amp;gt;Your Text.&amp;lt;/p&amp;gt;
    &amp;lt;p title = "shirt red"&amp;gt;Your Text.&amp;lt;/p&amp;gt;
    &amp;lt;p title = "hoodie"&amp;gt;Your Text.&amp;lt;/p&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tgi6Lk8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-9-1024x386.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgi6Lk8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/05/pasted-image-0-9-1024x386.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As seen in the above screenshot, the first two paragraphs are coloured red even though one of the attribute values is a two word but starts from the word “shirt”.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-attribute-value-selector"&gt;
  &lt;/a&gt;
  CSS [attribute $= “value”] Selector
&lt;/h3&gt;

&lt;p&gt;The CSS[attribute $= “value”] selector works just opposite to the CSS[attribute ^= “value”] selector. While the ^ attribute selector finds the beginning with the word “value”, the $ attribute selector finds the ending with the word “value”. The following code demonstrates the working of CSS [attribute $= “value”] selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
      p[title $= "shirt"]{
        color: red;
        font-size: 20px;
      }
      &amp;lt;/style&amp;gt;
&amp;lt;p title="blue shirt"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title = "shirt red"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title = "hoodie"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code colours the first paragraph into red colour. Note that the CSS [attribute $= “value”] selector does not ask for a single or hyphenated word (one word). The attribute values with multiple attributes are selected until they end with the word “value”.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-attribute-value-selector"&gt;
  &lt;/a&gt;
  CSS [attribute *= “value”] Selector
&lt;/h3&gt;

&lt;p&gt;The CSS [attribute *= “value”] selector works like the regular expression checker which selects every element with the target attribute having value composed of “value”. The value need not be a whole word. The selector works even if the “value” is a part of the attribute value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
      p[title *= "rt"]{
        color: red;
        font-size: 20px;
      }
      &amp;lt;/style&amp;gt;
&amp;lt;p title="blue shirt"&amp;gt;Your Text.&amp;lt;/p&amp;gt;
&amp;lt;p title = "shirt red"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&amp;lt;p title = "hoodie"&amp;gt;Your Text&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code selects the first two paragraphs and color them red.&lt;/p&gt;

&lt;p&gt;CSS attribute selectors are vital components of our CSS selectors cheat sheet as they provide an easy way for developers to to target a lot of elements (generally input elements) and style them according to the attributes. Another important use case in CSS attribute selectors is while using the forms and other input-based elements. They can also be combined using the class, ID or selector as demonstrated in pseudo-elements and pseudo-classes. This one can be a good exercise for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The CSS selectors are an essential part of the specification that gets many new additions with every release. Not only does it bring down the redundant code from the HTML file, but it also improves efficiency and helps us stylize the web page more freely.&lt;/p&gt;

&lt;p&gt;While all the advanced CSS Selectors offer high cross-browser compatibility, a developer always needs to perform browser compatibility testing to ensure no &lt;a href="https://www.lambdatest.com/blog/10-ways-to-avoid-cross-browser-compatibility-issues/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-25062021&amp;amp;utm_term=Harish"&gt;browser compatibility issues&lt;/a&gt; occur. LambdaTest can be a go-to option while testing CSS Selectors implementation. You can perform browser compatibility testing of your websites and web apps once across 2000+ browsers and OS combinations.&lt;/p&gt;

&lt;p&gt;I hope this CSS selectors cheat sheet helps you ahead in your professional career and if there are any suggestions, feel free to comment them down to help us refine the post for good.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Parallelize Processing a Large AWS S3 File</title>
      <author>Idris Rampurawala</author>
      <pubDate>Fri, 25 Jun 2021 11:15:54 +0000</pubDate>
      <link>https://dev.to/idrisrampurawala/parallelize-processing-a-large-aws-s3-file-8eh</link>
      <guid>https://dev.to/idrisrampurawala/parallelize-processing-a-large-aws-s3-file-8eh</guid>
      <description>&lt;p&gt;In my &lt;a href="https://dev.to/idrisrampurawala/efficiently-streaming-a-large-aws-s3-file-via-s3-select-4on"&gt;last post&lt;/a&gt;, we discussed achieving the efficiency in processing a large AWS S3 file via S3 select. The processing was kind of sequential and it might take ages for a large file. So how do we parallelize the processing across multiple units? 🤔 Well, in this post we gonna implement it and see it working!&lt;/p&gt;

&lt;p&gt;📝 &lt;em&gt;I highly recommend checking out my last post on &lt;a href="https://dev.to/idrisrampurawala/efficiently-streaming-a-large-aws-s3-file-via-s3-select-4on"&gt;streaming S3 file via S3-Select&lt;/a&gt; to set the context for this post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I always like to break down a problem into the smaller pieces necessary to solve it (analytical approach). Let's try to solve this in 3 simple steps:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-find-the-total-bytes-of-the-s3-file"&gt;
  &lt;/a&gt;
  1. Find the total bytes of the S3 file
&lt;/h3&gt;

&lt;p&gt;Very similar to the 1st step of our last post, here as well we try to find file size first.&lt;br&gt;
The following code snippet showcases the function that will perform a HEAD request on our S3 file and determines the file size in bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/utils.py
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_s3_file_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Gets the file size of S3 object by a HEAD request

    Args:
        bucket (str): S3 bucket
        key (str): S3 object path

    Returns:
        int: File size in bytes. Defaults to 0 if any error.
    """&lt;/span&gt;
    &lt;span class="n"&gt;aws_profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'AWS_PROFILE_NAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s3_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;aws_profile&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ResponseMetadata'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'HTTPHeaders'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'content-length'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ClientError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Client error reading S3 file &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-create-a-celery-task-to-process-a-chunk"&gt;
  &lt;/a&gt;
  2. Create a celery task to process a chunk
&lt;/h3&gt;

&lt;p&gt;Here, we would define a celery task to process a file chunk (which will be executed in parallel later). The overall processing here will look like this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receive the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end bytes&lt;/code&gt; of this chunk as an argument&lt;/li&gt;
&lt;li&gt;Fetch this part of the S3 file via S3-Select and store it locally in a temporary file (as CSV in this example)&lt;/li&gt;
&lt;li&gt;Read this temporary file and perform any processing required&lt;/li&gt;
&lt;li&gt;Delete this temporary file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📝 I term this task as a file chunk processor. It processes a chunk from a file. Running multiple of these tasks completes the processing of the whole file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/tasks.py
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'core.tasks.chunk_file_processor'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chunk_file_processor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" Creates and process a single file chunk based on S3 Select ScanRange start and end bytes
    """&lt;/span&gt;
    &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bucket'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;start_byte_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'start_byte_range'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;end_byte_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'end_byte_range'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;header_row_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'header_row_str'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'.&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;start_byte_range&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BASE_DIR'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;'temp'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Processing &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; chunk range &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;start_byte_range&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;end_byte_range&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 1. fetch data from S3 and store it in a file
&lt;/span&gt;        &lt;span class="n"&gt;store_scrm_file_s3_content_in_local_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start_byte_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;end_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;end_byte_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_DELIMITER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header_row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header_row_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 2. Process the chunk file in temp folder
&lt;/span&gt;        &lt;span class="n"&gt;id_set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_DELIMITER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# perform any other processing here
&lt;/span&gt;                &lt;span class="n"&gt;id_set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; --&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 3. delete local file
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Error in file processor: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-execute-multiple-celery-tasks-in-parallel"&gt;
  &lt;/a&gt;
  3. Execute multiple celery tasks in parallel
&lt;/h3&gt;

&lt;p&gt;This is the most interesting step in this flow. We will create multiple celery tasks to run in parallel via &lt;a href="https://docs.celeryproject.org/en/stable/userguide/canvas.html#groups"&gt;Celery Group&lt;/a&gt;.&lt;br&gt;
Once we know the total bytes of a file in S3 (from step 1), we calculate &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end bytes&lt;/code&gt; for the chunk and call the task we created in step 2 via the celery group. The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end bytes&lt;/code&gt; range is a continuous range of file size. Optionally, we can also call a callback (result) task once all our processing tasks get completed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/tasks.py
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'core.tasks.s3_parallel_file_processing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;s3_parallel_file_processing_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" Creates celery tasks to process chunks of file in parallel
    """&lt;/span&gt;
    &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'bucket'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
        &lt;span class="c1"&gt;# 1. Check file headers for validity -&amp;gt; if failed, stop processing
&lt;/span&gt;        &lt;span class="n"&gt;desired_row_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'latitude'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'longitude'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'monthly_income'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'experienced'&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;is_headers_valid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header_row_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validate_scrm_file_headers_via_s3_select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_DELIMITER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;desired_headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;desired_row_headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;is_headers_valid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; file headers validation failed'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; file headers validation successful'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 2. fetch file size via S3 HEAD
&lt;/span&gt;        &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_s3_file_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; file size invalid &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'We are processing &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; file about &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; bytes :-o'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# 2. Create celery group tasks for chunk of this file size for parallel processing
&lt;/span&gt;        &lt;span class="n"&gt;start_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;end_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_PROCESSING_CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;chunk_file_processor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="s"&gt;'bucket'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'start_byte_range'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'end_byte_range'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;'header_row_str'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;header_row_str&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;start_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;
            &lt;span class="n"&gt;end_range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3_FILE_PROCESSING_CHUNK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_size&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;chunk_file_processor_callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'filename'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply_async&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Error processing file: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'core.tasks.chunk_file_processor_callback'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ignore_result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chunk_file_processor_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" Callback task called post chunk_file_processor()
    """&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Callback called'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# core/utils.py
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_scrm_file_s3_content_in_local_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                             &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header_row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Retrieves S3 file content via S3 Select ScanRange and store it in a local file.
       Make sure the header validation is done before calling this.

    Args:
        bucket (str): S3 bucket
        key (str): S3 key
        file_path (str): Local file path to store the contents
        start_range (int): Start range of ScanRange parameter of S3 Select
        end_range (int): End range of ScanRange parameter of S3 Select
        delimiter (str): S3 file delimiter
        header_row (str): Header row of the local file. This will be inserted as first line in local file.
    """&lt;/span&gt;
    &lt;span class="n"&gt;aws_profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'AWS_PROFILE_NAME'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s3_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;profile_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;aws_profile&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'SELECT * FROM S3Object'&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select_object_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ExpressionType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'SQL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;InputSerialization&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'CSV'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;'FileHeaderInfo'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'USE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'FieldDelimiter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'RecordDelimiter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;OutputSerialization&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'CSV'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;'FieldDelimiter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'RecordDelimiter'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="n"&gt;ScanRange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;'Start'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start_range&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;'End'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end_range&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="s"&gt;"""
        select_object_content() response is an event stream that can be looped to concatenate the overall result set
        """&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'wb'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# we receive data in bytes and hence opening file in bytes
&lt;/span&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;header_row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Payload'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;records&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Records'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;records&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Payload'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ClientError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Client error reading S3 file &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Error reading S3 file &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; : &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it! 😎 Now, instead of streaming the S3 file bytes by bytes, we parallelize the processing by concurrently processing the chunks. It wasn't that tough, isn't it? 😅&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#mag-comparing-the-processing-time"&gt;
  &lt;/a&gt;
  🔍 Comparing the processing time
&lt;/h3&gt;

&lt;p&gt;If we compare the processing time of the same file we processed in our last post with this approach, the processing runs approximately &lt;strong&gt;68% faster&lt;/strong&gt; (with the same hardware and config). 😆&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Streaming S3 File&lt;/th&gt;
&lt;th&gt;Parallel Processing S3 File&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;File size&lt;/th&gt;
&lt;td&gt;4.8MB&lt;/td&gt;
&lt;td&gt;4.8MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Processing time&lt;/th&gt;
&lt;td&gt;~37 seconds&lt;/td&gt;
&lt;td&gt;~12 seconds&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DArdG87O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/idr/image/upload/v1624113337/dev.to/s3-select-demo/s3-select-file-streaming-sequential-output_je6hqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DArdG87O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/idr/image/upload/v1624113337/dev.to/s3-select-demo/s3-select-file-streaming-sequential-output_je6hqa.png" alt="Sequential processing terminal output"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G5HwLUcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/idr/image/upload/v1624113340/dev.to/s3-select-demo/s3-select-file-streaming-parallel-output_f3rx04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G5HwLUcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/idr/image/upload/v1624113340/dev.to/s3-select-demo/s3-select-file-streaming-parallel-output_f3rx04.png" alt="Parallel processing terminal output"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#heavycheckmark-benefits-of-this-approach"&gt;
  &lt;/a&gt;
  ✔️ Benefits of this approach
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A very large file containing millions of records can be processed within minutes. I have been using this approach in the production environment for a while, and it's very blissful&lt;/li&gt;
&lt;li&gt;Computing and processing is distributed among distributed workers&lt;/li&gt;
&lt;li&gt;Processing speed can be tweaked by the availability of worker pools&lt;/li&gt;
&lt;li&gt;No more memory issues&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;📌 You can check out my GitHub repository for a complete working example of this approach 👇&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/idris-rampurawala"&gt;
        idris-rampurawala
      &lt;/a&gt; / &lt;a href="https://github.com/idris-rampurawala/s3-select-demo"&gt;
        s3-select-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This project showcases the rich AWS S3 Select feature to stream a large data file in a paginated style.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
AWS S3 Select Demo&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/idris-rampurawala/s3-select-demo/main/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/808ccc68602d230e5c22372310fa34f0e8ca851adf0b094860005ccf122787d3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="The MIT License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This project showcases the rich &lt;code&gt;AWS S3 Select&lt;/code&gt; feature to stream a large data file in a &lt;code&gt;paginated style&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Currently, &lt;code&gt;S3 Select&lt;/code&gt; does not support &lt;code&gt;OFFSET&lt;/code&gt; and hence we cannot paginate the results of the query. Hence, we use &lt;code&gt;scanrange&lt;/code&gt; feature to stream the contents of the S3 file.&lt;/p&gt;
&lt;h1&gt;
Background&lt;/h1&gt;
&lt;p&gt;Importing (reading) a large file leads &lt;code&gt;Out of Memory&lt;/code&gt; error. It can also lead to a system crash event. There are libraries viz. Pandas, Dask, etc. which are very good at processing large files but again the file is to be present locally i.e. we will have to import it from S3 to our local machine. But what if we do not want to fetch and store the whole S3 file locally at once? 🤔&lt;/p&gt;
&lt;p&gt;Well, we can make use of &lt;code&gt;AWS S3 Select&lt;/code&gt; to stream a large file via it's &lt;code&gt;ScanRange&lt;/code&gt; parameter. This approach…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/idris-rampurawala/s3-select-demo"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#bookmarktabs-resources"&gt;
  &lt;/a&gt;
  📑 Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/idris-rampurawala/s3-select-demo"&gt;My GitHub repository demonstrating the above approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.select_object_content"&gt;AWS S3 Select boto3 reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/selecting-content-from-objects.html"&gt;AWS S3 Select userguide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;






&lt;center&gt;See ya! until my next post 😋&lt;/center&gt;

</description>
      <category>aws</category>
      <category>python</category>
      <category>showdev</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
