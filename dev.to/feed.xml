<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Is Particles.js still good in 2021?</title>
      <author>Matteo Bruni</author>
      <pubDate>Sat, 24 Jul 2021 21:06:19 +0000</pubDate>
      <link>https://dev.to/matteobruni/is-particles-js-still-good-in-2021-3oag</link>
      <guid>https://dev.to/matteobruni/is-particles-js-still-good-in-2021-3oag</guid>
      <description>&lt;h1&gt;
  &lt;a href="#particles-animations-yeeeeeeh"&gt;
  &lt;/a&gt;
  Particles animations yeeeeeeh 🎉
&lt;/h1&gt;

&lt;p&gt;I've seen a lot of developers use particles.js in their projects. Everyone likes particles effects, but why keep using particles.js?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-particlesjs-is-no-more-the-best-choice"&gt;
  &lt;/a&gt;
  Why particles.js is no more the best choice
&lt;/h2&gt;

&lt;p&gt;Particles.js was a good library for particles animations but when I tried it in late 2019 I've noticed some bugs after some hours, not just particles bouncing themself weirdly, an error in my console.&lt;/p&gt;

&lt;p&gt;Particles broke everything when I tried to disable particles movement. Is this bug fixed now? No.&lt;/p&gt;

&lt;p&gt;Particles.js is an abandoned project, no one is maintaining it, and some developers are trying to code workarounds themself.&lt;/p&gt;

&lt;p&gt;Nice, but I think everyone is already busy enough with their own project and &lt;u&gt;wasting time fixing bugs of 3rd party libraries is not worth it&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;But every library has bugs, true. Particles.js has &lt;strong&gt;280&lt;/strong&gt; open issues, the older one was opened in November 2014.&lt;/p&gt;

&lt;p&gt;Some issues aren't that good, just people asking help, true but some of those issues are already fixed by other developers that submitted their PR, but &lt;strong&gt;51&lt;/strong&gt; PRs are still waiting to be merged, some of them are really good. The oldest unmerged PR? January 2016.&lt;/p&gt;

&lt;p&gt;This library started having issues with Firefox in 2014, but who uses Firefox in 2021? Chrome is the best! Browsers and the web is going fast, and browsers don't care if a library will broke with the new update. Who wants a broken website when there's a valid alternative.&lt;/p&gt;

&lt;p&gt;Another big unsolved issue with Particles.js is mobile devices, yes Particles.js supports (not completely) retina displays but not the touch events and it's not responsive at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#these-are-a-lot-of-issues-and-thats-how-to-solve-them"&gt;
  &lt;/a&gt;
  These are a lot of issues, and that's how to solve them
&lt;/h2&gt;

&lt;p&gt;When I started trying Particles.js in 2019 (yeah I know, I already said that) I wanted a working website so I started making changes to the library and fixed the disabled movement error that was breaking my website. Then I looked for other issues and fixed them, some with merging the good PR I found in the repository.&lt;/p&gt;

&lt;p&gt;This gave me a good particles library but I can't update the original one since the author has disappeared so I decided to start a new project.&lt;/p&gt;

&lt;p&gt;I was learning TypeScript in that period so I decided to covert the library to TypeScript but having a JavaScript output so everyone can use it without issues.&lt;/p&gt;

&lt;p&gt;So TypeScript Particles were born, but &lt;code&gt;particles.ts&lt;/code&gt; was already a thing on NPM, another abandoned version of particles.js converted in TypeScript but without a lot of features that I've added and I don't know if the fix to the disabled movement was done.&lt;/p&gt;

&lt;p&gt;So I decided to move the &lt;code&gt;ts&lt;/code&gt; at the beginning and &lt;code&gt;tsParticles&lt;/code&gt; were published in the first months of &lt;code&gt;2020&lt;/code&gt; just before Italy will be in lockdown due the COVID-19 Pandemic. The pandemic gave me time to focus on this side project since all my free time with friends was gone.&lt;/p&gt;

&lt;p&gt;Now tsParticles reached version &lt;code&gt;1.32.0&lt;/code&gt; with a lot of new features and it's still compatible with particles.js 100%, but particles.js don't have a lot of those new features so the new config won't work backward.&lt;/p&gt;

&lt;p&gt;What are the added features to &lt;code&gt;tsParticles&lt;/code&gt;?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;u&gt;Fixed the still particles configuration error&lt;/u&gt;: Particles movement options can be disabled without any error&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;FPS limiter&lt;/strong&gt;: the FPS can be reduced so the animations can use less resources on every client, this can be good with some light configurations so they're not much affected&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Background Masking&lt;/strong&gt;: this feature is one of the oldest but it's still cool. Activating this will make the canvas of a specified color and particles will unveil everything under the canvas or the canvas background. &lt;a href="https://codepen.io/matteobruni/pen/yLNvqxG"&gt;A working sample can be seen here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;New shapes&lt;/strong&gt;: The following shapes are added, the existing ones are still working (&lt;code&gt;circle&lt;/code&gt;, &lt;code&gt;edge&lt;/code&gt;, &lt;code&gt;polygon&lt;/code&gt;, &lt;code&gt;triangle&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;images&lt;/code&gt; (multiple images, particles.js can have only one)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;square&lt;/code&gt; is replacing &lt;code&gt;edge&lt;/code&gt; since it's more clear&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text&lt;/code&gt; (any font, including font awesome and similar fonts), including emojis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;triangle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bubble&lt;/code&gt; (plugin)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;heart&lt;/code&gt; (plugin)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;multiline text&lt;/code&gt; (plugin)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rounded rect&lt;/code&gt; (plugin)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;spiral&lt;/code&gt; (plugin)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SVG Path Mask&lt;/strong&gt;: An SVG path, or multiple can be specified to be used to place particles&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;New mouse interactions&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attract&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bounce&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bubble&lt;/code&gt; (this is not new, but can change also particles color)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connect&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;light&lt;/code&gt; (plugin)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trail&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTML interaction&lt;/strong&gt;: Particles can now interact also with HTML elements like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Particles rotation&lt;/strong&gt;: Each particle can have its own rotation, animated or not&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Gradient Links&lt;/strong&gt;: Particles links can be set to have a gradient color made from the two particles colors (if different)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Confetti 🎊&lt;/strong&gt;: There are some settings that creates confetti animations with every kind of particles (text particles too, so emojis can be used too)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Emitters&lt;/strong&gt;: Some particles emitting area can be configured, and the particles can be destroyed too when they are out of canvas&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Absorbers&lt;/strong&gt;: Some particles absorbing areas, like black holes, can be configured, and they can just reset the particle instead of totally destroying it&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Particles life settings&lt;/strong&gt;: Particles can have a duration and a number of lives so when they are destroyed they have a respawn count&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Twinkle twinkle little star&lt;/strong&gt;: Twinkling particles are a thing, there are options to set a color based on a frequency so it's possible to configure some twinkling stars in a starry sky configuration&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vibration&lt;/strong&gt;: Particles have a vibration configuration too&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Noise&lt;/strong&gt;: Particles can also have a noise path set instead of a linear one, this can create some cool effects of particles acting differently each time&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Duration&lt;/strong&gt;: A duration settings was recently added, to the particles animation will stop after a specified amount of time, this can be useful with confetti animations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it enough? No? You're right, there are a lot of other customizations that I forgot to write about but everyone is welcome to discover, and since it's not an abandoned project everyone will receive help.&lt;/p&gt;

&lt;p&gt;What about React, Vue.js, Angular or other cool frameworks? It's not needed an external library since this project supports with official components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;Vue.js 2&lt;/li&gt;
&lt;li&gt;Vue.js 3&lt;/li&gt;
&lt;li&gt;Angular&lt;/li&gt;
&lt;li&gt;Svelte&lt;/li&gt;
&lt;li&gt;jQuery&lt;/li&gt;
&lt;li&gt;Riot.js&lt;/li&gt;
&lt;li&gt;Solid.js&lt;/li&gt;
&lt;li&gt;Preact&lt;/li&gt;
&lt;li&gt;Inferno&lt;/li&gt;
&lt;li&gt;Web Components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If these aren't good reasons to migrate from Particles.js to tsParticles I don't know which are.&lt;/p&gt;

&lt;p&gt;Any cool idea about this? Any suggestion? Comment or reach me on GitHub.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Remember to leave a star ⭐️, it's free 😏&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Python Basics, Python 101</title>
      <author>EstherWanjiru</author>
      <pubDate>Sat, 24 Jul 2021 20:35:21 +0000</pubDate>
      <link>https://dev.to/estherwanjiru/python-basics-python-101-4a43</link>
      <guid>https://dev.to/estherwanjiru/python-basics-python-101-4a43</guid>
      <description>&lt;h1&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h1&gt;

&lt;p&gt;"Hello World!! Would be a perfect way to usher the world in to the now well known programming language," Guido van Rossum thought to himself in the 90's. &lt;/p&gt;

&lt;p&gt;And in 1991, Python was created as a simple, straight-forward yet a high-level language that is dynamically typed and targets on readability of code It's main purpose is to let you work quickly and integrate systems effectively. Python involves essential and object-oriented programming with wide-ranging and great typical library that has regular memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-python"&gt;
  &lt;/a&gt;
  Advantages of Python
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Easy to Read, Learn and Write&lt;/strong&gt;&lt;br&gt;
Python has an English-like syntax. This makes it easier to read and understand the code. It is really easy to pick up and learn, that is why a lot of people recommend Python to beginners. You need less lines of code to perform the same task as compared to other major languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Improved Productivity&lt;/strong&gt;&lt;br&gt;
Python is a very productive language. Due to the simplicity of Python, developers can focus on solving the problem. You only write less code and get more things done.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Interpreted Language&lt;/strong&gt;&lt;br&gt;
Python is an interpreted language which means that it directly executes the code line by line. In case of any error, it stops further execution and reports back the error which has occurred.&lt;/p&gt;

&lt;p&gt;Python shows only one error even if the program has multiple errors. This makes debugging easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Dynamically Typed&lt;/strong&gt;&lt;br&gt;
Python doesn’t know the type of variable until we run the code. It automatically assigns the data type during execution. The programmer doesn’t need to worry about declaring variables and their data types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Free and Open-Source&lt;/strong&gt;&lt;br&gt;
Python comes under the OSI approved open-source license. This makes it free to use and distribute. You can download the source code, modify it and even distribute your version of Python. This is useful for organizations that want to modify some specific behavior and use their version for development.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Download the latest version of Python for your operating system here: &lt;a href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;. You can read more about setting up a python development using VS Code from this tutorial: &lt;a href="https://www.pythontutorial.net/getting-started/setup-visual-studio-code-for-python/"&gt;https://www.pythontutorial.net/getting-started/setup-visual-studio-code-for-python/&lt;/a&gt; by pythontutorial.net.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get Started!
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a folder ie name it &lt;strong&gt;First Python Project&lt;/strong&gt; where all python files will be saved. Then launch the file in Visual Studio Code by using Git Bash by simply right-clicking on the folder and select Git Bash Here. &lt;strong&gt;In Git Bash, type code .&lt;/strong&gt;, it redirects the folder to Visual Studio Code which is the editor of choice in this case. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a python file. A python program has an extension of &lt;strong&gt;.py&lt;/strong&gt; For example you have index as the name of the python file, you will save it as index.py. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In our file, let's write our first line of code ie. &lt;strong&gt;"Hello World."&lt;/strong&gt;. We will write&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The print() is a built-in function that displays a message on the screen. In this case, it’ll show the message "Hello, World!".&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#execution"&gt;
  &lt;/a&gt;
  Execution
&lt;/h2&gt;

&lt;p&gt;When running the file in the terminal, you have to start by writing the python version on your computer which you can quickly confirm by writing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and it will display it below. Now that we have the version, in my case it's Python3, so I'll write Python3 file_name(in my case it's index).py ie.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;Comments can be used to explain Python code. Comments can be used to make the code more readable. Comments can be used to prevent execution when testing code. Comments starts with a #, and Python will ignore them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# single line comment
&lt;/span&gt;
&lt;span class="s"&gt;'''
multi line comment
multi line comment
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#aritmetic-operators"&gt;
  &lt;/a&gt;
  Aritmetic Operators
&lt;/h2&gt;

&lt;p&gt;Operators are used to perform operations on variables and values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 4 (addition)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1 (subtraction)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 9 (multiplication)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 4 (division)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 256 (exponent)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1 (remainder of the division)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 5 (floor division)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Variables are containers for storing data values. Python has no command for declaring a variable. A variable is created the moment you first assign a value to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Ess"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; Variables do not need to be declared with any particular type, and can even change type after they have been set.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h2&gt;

&lt;p&gt;Reference: &lt;a href="https://bit.ly/3iC9JuA"&gt;https://bit.ly/3iC9JuA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In programming, a data type is an important concept. Variables can store data of different types, and different types can do different things. Python has the following data types built-in by default, in these categories:&lt;/p&gt;

&lt;p&gt;Text Type:       str&lt;br&gt;
Numeric Types:       int, float, complex&lt;br&gt;
Sequence Types:      list, tuple, range&lt;br&gt;
Mapping Type:        dict&lt;br&gt;
Set Types:       set, frozenset&lt;br&gt;
Boolean Type:        bool&lt;br&gt;
Binary Types:        bytes, bytearray, memoryview&lt;/p&gt;

&lt;p&gt;You can get the data type of any object by using the type() function:&lt;br&gt;
&lt;strong&gt;Example&lt;/strong&gt;&lt;br&gt;
Print the data type of the variable x:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#strings"&gt;
  &lt;/a&gt;
  Strings
&lt;/h2&gt;

&lt;p&gt;Strings in python are surrounded by either single quotation marks, or double quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;'my love'&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="s"&gt;"my love"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can display a string literal with the print() function:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  Lists
&lt;/h2&gt;

&lt;p&gt;Lists are used to store multiple items in a single variable. A list is one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage. They are ordered, changeable, and allow duplicate values.&lt;/p&gt;

&lt;p&gt;List items are indexed, the first item has index [0], the second item has index [1] etc.&lt;br&gt;
Lists are created using square brackets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Example
#Create a List:
&lt;/span&gt;
&lt;span class="n"&gt;this_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"banana"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cherry"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tuples"&gt;
  &lt;/a&gt;
  Tuples
&lt;/h2&gt;

&lt;p&gt;Tuples are used to store multiple items in a single variable. A tuple is also one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage.&lt;/p&gt;

&lt;p&gt;A tuple is a collection which is ordered and unchangeable.&lt;/p&gt;

&lt;p&gt;Tuples are written with round brackets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Example
#Create a Tuple:
&lt;/span&gt;
&lt;span class="n"&gt;simple_outfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"polo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"jeans"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sneakers"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;simple_outfit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tuple items are indexed, the first item has index [0], the second item has index [1] etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dictionaries"&gt;
  &lt;/a&gt;
  Dictionaries
&lt;/h2&gt;

&lt;p&gt;Dictionaries are used to store data values in key:value pairs.&lt;br&gt;
A dictionary is a collection which is ordered*, changeable and does not allow duplicates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Example
#Create and print a dictionary:
&lt;/span&gt;
&lt;span class="n"&gt;accessory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Watch"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"model"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Fjord"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"year"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sets"&gt;
  &lt;/a&gt;
  Sets
&lt;/h2&gt;

&lt;p&gt;Sets store multiple items in a single variable. A set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.&lt;/p&gt;

&lt;p&gt;A set is a collection which is both unordered and unindexed. Sets are written with curly brackets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Example&lt;/span&gt;
&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;thisset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"denim"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"poncho"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"barret"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#booleans"&gt;
  &lt;/a&gt;
  Booleans
&lt;/h2&gt;

&lt;p&gt;Booleans represent one of two values: True or False.&lt;br&gt;
When you compare two values, the expression is evaluated and Python returns the Boolean answer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Example&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1992&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1991&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1992&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1991&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1992&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1991&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h2&gt;

&lt;p&gt;An array is a special variable, which can hold more than one value at a time.&lt;/p&gt;

&lt;p&gt;If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Ford"&lt;/span&gt;
&lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Volvo"&lt;/span&gt;
&lt;span class="n"&gt;car3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"BMW"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?&lt;/p&gt;

&lt;p&gt;The solution is an array!&lt;/p&gt;

&lt;p&gt;An array can hold many values under a single name, and you can access the values by referring to an index number.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. The function then returns data as a result.&lt;br&gt;
In Python a function is defined using the def keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Example&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello from a function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;p&gt;To create a class, use the keyword class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Example&lt;/span&gt;
&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;named&lt;/span&gt; &lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To understand the meaning of classes and use them in real life applications, we have to understand the built-in &lt;strong&gt;init&lt;/strong&gt;() function.&lt;/p&gt;

&lt;p&gt;All classes have a function called &lt;strong&gt;init&lt;/strong&gt;(), which is always executed when the class is being initiated.&lt;/p&gt;

&lt;p&gt;Use the &lt;strong&gt;init&lt;/strong&gt;() function to assign values to object properties, or other operations that are necessary to do when the object is being created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;Example&lt;/span&gt;
&lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;named&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;

&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ess"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I find &lt;strong&gt;w3schools&lt;/strong&gt; very easy to explain and follow through, therefore i looped in a few definitions and examples from there to make it easy following through. I highly recommend this: &lt;a href="https://www.w3schools.com/python/default.asp"&gt;https://www.w3schools.com/python/default.asp&lt;/a&gt; to study a concept or two. &lt;/p&gt;

&lt;p&gt;It would be awesome getting feedback from a reader or three &lt;strong&gt;;)&lt;/strong&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Integrate a Stripe Payment with React</title>
      <author>Hajar | هاجر</author>
      <pubDate>Sat, 24 Jul 2021 20:14:09 +0000</pubDate>
      <link>https://dev.to/hajarnasr/integrate-a-stripe-payment-with-react-1f9h</link>
      <guid>https://dev.to/hajarnasr/integrate-a-stripe-payment-with-react-1f9h</guid>
      <description>&lt;p&gt;&lt;em&gt;I have recently implemented the frontend side of an online payment system, and surprisingly it was not as complicated as I had thought. I confess Stripe handled most of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Forntend Side&lt;/strong&gt;&lt;br&gt;
So, let's create a React app and install the necessary dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in a terminal&lt;/span&gt;
&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt;
&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;stripe&lt;/span&gt;&lt;span class="sr"&gt;/stripe-js @stripe/&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to create a &lt;a href="https://stripe.com/"&gt;Stripe account&lt;/a&gt; to get the publishable key that we’ll use to integrate Stripe into our project.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;strong&gt;Note&lt;/strong&gt;: Stripe has two modes, a test mode for development and a live mode for production. Each mode has its secret and publishable keys. Secret keys are for the backend code and should always be private. Publishable ones are for the frontend code, and they are not as sacred as the secret ones.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Now, to configure Stripe, we need &lt;code&gt;loadStripe&lt;/code&gt; from &lt;code&gt;@stripe/stripe-js&lt;/code&gt;, &lt;code&gt;Elements&lt;/code&gt; from &lt;code&gt;@stripe/react-stripe-js&lt;/code&gt;, and a &lt;code&gt;PaymentForm&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Elements&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PaymentForm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./PaymentForm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// not implemented yet&lt;/span&gt;

&lt;span class="c1"&gt;// when you toggle to live mode, you should add the live publishale key.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_PK_TEST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Elements is the provider that lets us access the Stripe object. 
         It takes the promise that is returned from loadStripe*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Elements&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stripePromise&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PaymentForm&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; 
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Elements&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In its simplest form, &lt;code&gt;PaymentForm&lt;/code&gt; can be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// PaymentForm.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PaymentForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// stripe code here&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;BUY&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PaymentForm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need to use Stripe to submit our form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//PaymentForm.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CardElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStripe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useElements&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PaymentForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStripe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useElements&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Stripe.js has not loaded yet. Make sure to disable&lt;/span&gt;
      &lt;span class="c1"&gt;// form submission until Stripe.js has loaded.&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Get a reference to a mounted CardElement. Elements knows how&lt;/span&gt;
    &lt;span class="c1"&gt;// to find your CardElement because there can only ever be one of&lt;/span&gt;
    &lt;span class="c1"&gt;// each type of element.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cardElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// use stripe.createToken to get a unique token for the card&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cardElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Backend is not implemented yet, but once there isn’t any errors,&lt;/span&gt;
      &lt;span class="c1"&gt;// you can pass the token and payment data to the backend to complete&lt;/span&gt;
      &lt;span class="c1"&gt;// the charge&lt;/span&gt;
      &lt;span class="nx"&gt;axios&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:5000/api/stripe/charge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;EGP&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// or 10 pounds (10*100). Stripe charges with the smallest price unit allowed&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your payment was successful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;PAY&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PaymentForm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt;: I used &lt;code&gt;&amp;lt;CardElement/&amp;gt;&lt;/code&gt; here but you can use &lt;code&gt;&amp;lt;CardNumberElement/&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;CardExpiryElement/&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;CardCvcElement/&amp;gt;&lt;/code&gt; and then use &lt;code&gt;elements.getElement(CardNumberElement)&lt;/code&gt; to access the card number element.&lt;br&gt;
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Backend Side&lt;/strong&gt;&lt;br&gt;
For the backend, Stripe supports many languages, but here I'm using Node.js.&lt;/p&gt;

&lt;p&gt;Move the React code into a &lt;code&gt;client&lt;/code&gt; directory inside &lt;code&gt;stripe-react&lt;/code&gt;. Run &lt;code&gt;yarn init&lt;/code&gt; so that the outer directory can have the &lt;code&gt;package.json&lt;/code&gt; for the backend code and then create &lt;code&gt;server.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The project directory should look something like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;react-stripe

&lt;ul&gt;
&lt;li&gt;client (holds all React files).&lt;/li&gt;
&lt;li&gt;.gitignore&lt;/li&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;li&gt;server.js&lt;/li&gt;
&lt;li&gt;yarn.lock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install the necessary dependencies for the backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt;
 &lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt; &lt;span class="nx"&gt;concurrently&lt;/span&gt; &lt;span class="nx"&gt;nodmon&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add to the outer &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cd client &amp;amp;&amp;amp; yarn start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodemon server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;concurrently --kill-others-on-fail &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;yarn server&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;yarn client&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in &lt;code&gt;server.js&lt;/code&gt;, create the post api/route that will recieve the payment data and Stripe token from the FE to complete the charge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stripe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_SECRET_KEY_TEST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// same api we used in the frondend&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/stripe/charge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;charge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;charges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;charge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;charge unsuccessful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running on port: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, run &lt;code&gt;yarn dev&lt;/code&gt; and use one of &lt;a href="https://stripe.com/docs/testing"&gt;these test cards&lt;/a&gt; to test the integration. &lt;br&gt;
You should see all the payments under Payments on your Stripe dashboard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://stripe.com/docs/stripe-js/react"&gt;Stripe docs&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://stripe.com/docs/api/charges/object"&gt;Stripe charges&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://blog.logrocket.com/building-payments-system-react-stripe/"&gt;A more detailed tutorial&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Array FlatMap</title>
      <author>Suprabha</author>
      <pubDate>Sat, 24 Jul 2021 20:12:52 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/array-flatmap-4cn7</link>
      <guid>https://dev.to/suprabhasupi/array-flatmap-4cn7</guid>
      <description>&lt;p&gt;&lt;span&gt;F&lt;/span&gt;latMap is a single method which can be usable for flat and map methods.&lt;/p&gt;

&lt;p&gt;As you know &lt;code&gt;flat()&lt;/code&gt;, flattening the 1-level deep and &lt;code&gt;map()&lt;/code&gt; to loop into an array.&lt;/p&gt;

&lt;p&gt;If we include both, we called &lt;code&gt;flatMap()&lt;/code&gt; 😉 &lt;/p&gt;

&lt;p&gt;So, instead if calling two methods &lt;code&gt;flat()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt;, you can use single method called &lt;code&gt;flatMap()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;plants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;💐&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌲&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌻&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// ❌ map + flat&lt;/span&gt;
&lt;span class="nx"&gt;plants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plant&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;plant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🍁&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Output&lt;/span&gt;
&lt;span class="c1"&gt;//["💐", "🍁", "🌲", "🍁", "🌻", "🍁", "🌹", "🍁"]&lt;/span&gt;

&lt;span class="c1"&gt;// ✅ flatMap&lt;/span&gt;
&lt;span class="nx"&gt;plants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plant&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;plant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🍁&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// Output&lt;/span&gt;
&lt;span class="c1"&gt;// ["💐", "🍁", "🌲", "🍁", "🌻", "🍁", "🌹", "🍁"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-flatmap-works"&gt;
  &lt;/a&gt;
  How flatMap() works?
&lt;/h3&gt;

&lt;p&gt;📝 FlatMap() always do first map() and then it flat().&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;flat()&lt;/code&gt;, we use to pass arguments where you set the depth, arguments define how deep a nested array should be flattened.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;plants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌻&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]]];&lt;/span&gt;
&lt;span class="nx"&gt;plants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ["🌻", "🌹"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-flatmap-endraw-do-only-1-level-deep-flattening"&gt;
  &lt;/a&gt;
  &lt;code&gt;flatMap()&lt;/code&gt; do only 1 level deep flattening.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;plants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌻&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;🌹&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]]];&lt;/span&gt;
&lt;span class="nx"&gt;plants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plant&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;plant&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// [["🌻", "🌹"]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filter-using-flatmap"&gt;
  &lt;/a&gt;
  Filter using flatMap 😉
&lt;/h3&gt;

&lt;p&gt;Yes, You can also do filter here using &lt;code&gt;flatMap()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// [5, 4, 20, 18]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap"&gt;MDN Docs of FlatMap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary-%E2%88%91"&gt;
  &lt;/a&gt;
  Summary ∑
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;flatMap()&lt;/code&gt; method always helps if you want to use map and flat methods both together.&lt;/p&gt;

&lt;p&gt;Thanks for reading the article ❤️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is Windows 365?</title>
      <author>Cento</author>
      <pubDate>Sat, 24 Jul 2021 19:28:00 +0000</pubDate>
      <link>https://dev.to/cento/what-is-windows-365-4mbm</link>
      <guid>https://dev.to/cento/what-is-windows-365-4mbm</guid>
      <description>&lt;p&gt;Microsoft just introduced &lt;strong&gt;Windows 365&lt;/strong&gt;, a new service that let company cut partners out of the money marking loop by providing virtual PCs to all they customers.&lt;/p&gt;

&lt;p&gt;Windows 365 will only be available for businesses when it launches on August 2nd, with a pre-user monthly subscription cost. Microsoft is not detailing exact pricing details until the launches next month, but Windows 365 is designed for one-person businesses all the way up to enterprises with thousand of employees. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c4Tw8xV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yopvmsfg4n82nbh5ck2p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c4Tw8xV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yopvmsfg4n82nbh5ck2p.jpg" alt="Windows 11"&gt;&lt;/a&gt;&lt;br&gt;
And, there will be two editions of Windows 365: Business and Enterprise. Both are powered by Azure Virtual Desktop and can be config as a individual Could PCs with a single CPU, 2GB of RAM, and 64Gb of storage at the &lt;em&gt;low-end&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While Windows 365 seems perfectly timed for businesses looking to tackle the complexities of remote work, Microsoft has been working on the service for years. the OS group at Microsoft had been working on a project codenamed "&lt;em&gt;Arcadia&lt;/em&gt;", a service to stream video games from the cloud. Arcadia dates all the way back to Microsoft demonstrating Halo running on a Windows Phone in 2013. This early virtualization work eventually led to Windows 365 and a focus on making it &lt;em&gt;consumer-friendly&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;"When we built this team, we brought in a couple of leaders who had experience with virtualization, but for the most part we brought in people who had experience with Windows and experience with consumer experiences because that was the bar we wanted to set,” says Scott Manchester, director of program management for Windows 365.&lt;/p&gt;

&lt;p&gt;Also because of the pandemic, the work on Windows 365 and Microsoft's broader focus on hybrid has been accelerated. Microsoft has steadily improving Microsoft Team over the past year and laying out it vision for the future of meeting, remote work, and so much more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KauoW1kM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru12vqoatalvx4ui6byd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KauoW1kM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ru12vqoatalvx4ui6byd.jpg" alt="Covid-19"&gt;&lt;/a&gt;&lt;br&gt;
While Windows 364 has the potential to dramatically change how computing takes place in commercial settings, there's nothing inevitable about it. many will object to ceding the privacy of a local box to the servers of Microsoft. Windows 365 might just be the first significant step toward a future where you don't need a dedicated Windows PC to use Windows.&lt;/p&gt;

</description>
      <category>news</category>
      <category>cloud</category>
      <category>azure</category>
    </item>
    <item>
      <title>Google has a Machine Learning Course. It's free</title>
      <author>Muhammad Abdulaziz</author>
      <pubDate>Sat, 24 Jul 2021 19:11:20 +0000</pubDate>
      <link>https://dev.to/aianalyst/google-has-a-machine-learning-course-it-s-free-jkl</link>
      <guid>https://dev.to/aianalyst/google-has-a-machine-learning-course-it-s-free-jkl</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello,&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a Machine Learning Crash Course with TensorFlow APIs&lt;br&gt;
&lt;a href="https://developers.google.com/machine-learning/crash-course"&gt;https://developers.google.com/machine-learning/crash-course&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prework"&gt;
  &lt;/a&gt;
  Prework:
&lt;/h3&gt;

&lt;p&gt;Before beginning Machine Learning Crash Course, do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you're new to machine learning, take &lt;a href="https://developers.google.com/machine-learning/problem-framing"&gt;Introduction to Machine Learning Problem Framing&lt;/a&gt;. This one-hour self-study course teaches you how to identify appropriate problems for machine learning.&lt;/li&gt;
&lt;li&gt;If you are new to &lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt;, do the &lt;a href="https://colab.research.google.com/github/google/eng-edu/blob/main/ml/cc/exercises/numpy_ultraquick_tutorial.ipynb?utm_source=mlcc&amp;amp;utm_campaign=colab-external&amp;amp;utm_medium=referral&amp;amp;utm_content=mlcc-prework&amp;amp;hl=en"&gt;NumPy Ultraquick Tutorial&lt;/a&gt; Colab exercise, which provides all the NumPy information you need for this course.&lt;/li&gt;
&lt;li&gt;If you are new to &lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;, do the &lt;a href="https://colab.research.google.com/github/google/eng-edu/blob/main/ml/cc/exercises/pandas_dataframe_ultraquick_tutorial.ipynb?utm_source=mlcc&amp;amp;utm_campaign=colab-external&amp;amp;utm_medium=referral&amp;amp;utm_content=mlcc-prework&amp;amp;hl=en"&gt;pandas UltraQuick Tutorial&lt;/a&gt; Colab exercise, which provides all the pandas information you need for this course.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h3&gt;

&lt;p&gt;Machine Learning Crash Course does not presume or require any prior knowledge in machine learning. However, to understand the concepts presented and complete the exercises, we recommend that students meet the following prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You must be comfortable with variables, linear equations, graphs of functions, histograms, and statistical means.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should be a good programmer. Ideally, you should have some experience programming in Python because the programming exercises are in Python. However, experienced programmers without Python experience can usually complete the programming exercises anyway.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For further information:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://developers.google.com/machine-learning/crash-course/prereqs-and-prework"&gt;https://developers.google.com/machine-learning/crash-course/prereqs-and-prework&lt;/a&gt; &lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>tensorflow</category>
      <category>pandas</category>
      <category>numpy</category>
    </item>
    <item>
      <title>Substring and stuff with JavaScript</title>
      <author>Vishwa.R</author>
      <pubDate>Sat, 24 Jul 2021 18:28:08 +0000</pubDate>
      <link>https://dev.to/codereaper08/substring-and-stuff-with-javascript-ham</link>
      <guid>https://dev.to/codereaper08/substring-and-stuff-with-javascript-ham</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Bffk0L6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvx6usqx5b9mbtdtdb2a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Bffk0L6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvx6usqx5b9mbtdtdb2a.png" alt="Sub-string-example"&gt;&lt;/a&gt;&lt;/p&gt;
Image source: Wikipedia



&lt;h2&gt;
  &lt;a href="#what-is-a-string"&gt;
  &lt;/a&gt;
  What is a string?
&lt;/h2&gt;

&lt;p&gt;A string is a thin wire, you used to hang your clothes to dry. &lt;strong&gt;Just kidding !&lt;/strong&gt; &lt;br&gt;
A string in computer terms is a sequence of characters, we use strings to represent words or a sequence of characters in programming. Here's an example for a string,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#so-what-is-a-substring-then"&gt;
  &lt;/a&gt;
  So, What is a substring, then?
&lt;/h2&gt;

&lt;p&gt;A substring is nothing but a string inside a string. But remember, substrings are contiguous!. If it isn't clear, don't worry, we'll get it right. Have a look at the below gist.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#bonus-insight"&gt;
  &lt;/a&gt;
  Bonus insight
&lt;/h3&gt;

&lt;p&gt;Let a given string has a length of 5, let us take it as a variable &lt;code&gt;n&lt;/code&gt;, then the total number of possible substrings is given by,&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Total possible substrings = n*(n+1)/2&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;for example, let us take &lt;code&gt;n&lt;/code&gt; as 5 as we assumed above, then&lt;/p&gt;

&lt;p&gt;&lt;code&gt;5*(5+1)/2&lt;/code&gt; which turns into &lt;code&gt;(5*6)/2&lt;/code&gt;, eventually yields the value of &lt;code&gt;15&lt;/code&gt; (which is the total number of possible substrings for a string of length 5). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;⚡Note:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Notice that the substrings are contiguous, notice how &lt;code&gt;wa&lt;/code&gt; or &lt;code&gt;wd&lt;/code&gt; are not substrings of &lt;code&gt;wsad&lt;/code&gt;. Only adjoining sequence characters are taken from the string, and are called as substrings.&lt;/p&gt;

&lt;p&gt;Now take a deep breath, we are going to dive into the JavaScript ocean🥽&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#javascript-code-for-slicing-substrings"&gt;
  &lt;/a&gt;
  JavaScript code for slicing substrings
&lt;/h2&gt;

&lt;p&gt;So, let us look at the JavaScript code step-by-step for printing (I mean console logging) all the substrings for a given string.&lt;br&gt;
Let us start by initializing the input string and the length of the input string.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
These two will be passed to a function called &lt;code&gt;FindSubstring&lt;/code&gt;, which contains 3 nested &lt;code&gt;for&lt;/code&gt; loops. The first &lt;code&gt;for&lt;/code&gt; loop is to identify the starting point of the string passed to the function. We use iterator &lt;code&gt;i&lt;/code&gt; looping from &lt;em&gt;0 to &amp;lt;n&lt;/em&gt;.&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
After this, we move on to the second &lt;code&gt;for&lt;/code&gt; loop, where we iterate using iterator &lt;code&gt;j&lt;/code&gt; from &lt;em&gt;i to &amp;lt;n&lt;/em&gt;. Using this second &lt;code&gt;for&lt;/code&gt; loop, we determine the ending point. Take a look at the below gist,&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, after determining the starting and ending point of the input string, we use a third &lt;code&gt;for&lt;/code&gt; loop to &lt;code&gt;console log&lt;/code&gt; the sequence of characters from starting point to ending point. For that, we loop using iterator &lt;code&gt;k&lt;/code&gt; from &lt;em&gt;i to &amp;lt;j+1&lt;/em&gt;. Inside the loop we &lt;code&gt;console log&lt;/code&gt; the sequence of characters as follows,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We use &lt;code&gt;charAt&lt;/code&gt; method above to pass in the string index, i.e &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-think-its-over"&gt;
  &lt;/a&gt;
  Do you think it's over?
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#no"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NO!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Not until we call our &lt;code&gt;FindSubstring&lt;/code&gt; function and pass it both &lt;code&gt;inpstring&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; values. Let us do that to wrap it up,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#awesome-weve-done-it"&gt;
  &lt;/a&gt;
  Awesome ✨🎉, we've done it.
&lt;/h2&gt;

&lt;p&gt;You can also take a look at this &lt;a href="https://jsfiddle.net/Vishwa_R/z81e7h32/"&gt;JSFiddle&lt;/a&gt; to change input strings to your wish.&lt;/p&gt;

&lt;p&gt;Feel free to correct me if I am wrong, give a 💖 if you like the content. Thanks for reading and have a nice day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements:
&lt;/h3&gt;

&lt;p&gt;Cover image : Photo by &lt;a href="https://unsplash.com/@timothymuza?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Timothy Muza&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/piece?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Functional Programming in JAVASCRIPT</title>
      <author>Pranav Bhat</author>
      <pubDate>Sat, 24 Jul 2021 18:17:58 +0000</pubDate>
      <link>https://dev.to/pranavbhats/functional-programming-in-javascript-295b</link>
      <guid>https://dev.to/pranavbhats/functional-programming-in-javascript-295b</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is functional programming?&lt;/strong&gt;&lt;br&gt;
In simple words, functional programming means which separates data and functions (separates data and behavior).&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#fp-principles"&gt;
  &lt;/a&gt;
  FP Principles:
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;No side effects.&lt;/li&gt;
&lt;li&gt;For the same input always function should return the same output.&lt;/li&gt;
&lt;li&gt;Function should have a single task.&lt;/li&gt;
&lt;li&gt;Function should be pure.&lt;/li&gt;
&lt;li&gt;No shared state.&lt;/li&gt;
&lt;li&gt;Immutable state.&lt;/li&gt;
&lt;li&gt;Composability.&lt;/li&gt;
&lt;li&gt;Predictable result.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;
  &lt;a href="#when-to-use-functional-programming"&gt;
  &lt;/a&gt;
  When to use functional programming?
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Data processing.  2. Inside Concurrent System.  3.High criticality Systems.  4. Serverless applications.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;let's discuss some main terminologies used in functional programming:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-pure-functions"&gt;
  &lt;/a&gt;
  1. Pure functions
&lt;/h4&gt;

&lt;p&gt;Pure Function is a function(a block of code) that always returns the same result if the same arguments are passed. It always depends  on input argument, for same input always it returns same output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multiply = (a, b) =&amp;gt; a * b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-idempotent"&gt;
  &lt;/a&gt;
  2. Idempotent
&lt;/h4&gt;

&lt;p&gt;A function is said to be idempotent if it returns the same output for the same input or does what we expect it to do. &lt;br&gt;
Idempotent is different from pure function as it allows side effects. An example could be calling an API with an input and returning the same output no matter how many times it has been called.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#3-imperative-and-declarative"&gt;
  &lt;/a&gt;
  3. Imperative and Declarative
&lt;/h4&gt;

&lt;p&gt;Imperative it will tell what to do and how to do task. Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(let i = 0; i &amp;lt; 5; i++)  {
   console.log(i);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above for loop we are explicitly telling variable initialization, condition check and incrementing.&lt;/p&gt;

&lt;p&gt;Declarative tells whats to do and what should happen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1,2,3,4,5].forEach(i=&amp;gt;console.log(i))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally in functional programming we are using declarative code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-immutability"&gt;
  &lt;/a&gt;
  4. Immutability
&lt;/h4&gt;

&lt;p&gt;Immutable data cannot change its structure or the data in it.&lt;br&gt;
In the FP, we create data or objects by initializing them. When we are using those, we do not change their values or their state. If we need, we'll create a new one, but we do not modify the existing object's state. Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const obj ={name:"Pranav"} 
function clone(obj) { return {...obj} }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time creating new object(copy) it's difficult if that object is heavy. For this we can use &amp;gt; &lt;em&gt;structural sharing&lt;/em&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-referential-transferency"&gt;
  &lt;/a&gt;
  5. Referential Transferency
&lt;/h4&gt;

&lt;p&gt;Referential Transparency is the property that lets you replace an expression with its value, and not change the results of whatever you were doing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-higher-order-functionshof"&gt;
  &lt;/a&gt;
  6. Higher Order functions(HOF)
&lt;/h4&gt;

&lt;p&gt;HOF are functions that can take functions as params or return functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const logger = function (val) {
  console.log(val);
};

function caller(fn, value) {
  fn(value);// it returns function as return value
}
caller(logger,"hello");// caller taking logger function as param
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#7-closure"&gt;
  &lt;/a&gt;
  7. Closure
&lt;/h4&gt;

&lt;p&gt;A closure is the combination of a function bundled together (enclosed) with references to its surrounding state(the lexical environment). &lt;br&gt;
In other words, a closure gives you access to an outer function’s scope from an inner function. &lt;br&gt;
In JavaScript, closures are created every time a function is created, at function creation time.&lt;br&gt;
Features of closures:&lt;br&gt;
     1. Memory efficient&lt;br&gt;
     2. Encapsulation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// * Memory efficient
function heavyDuty(index) {
  const bigArray = new Array(7000).fill("😃");// 
  console.log("every time new values assigned to bigArray....");
  return bigArray[index];
}
function heavyDutyHelper() {
  const bigArray = new Array(7000).fill("😃");
  console.log("creating  array at once...");
  return function (index) {
    return bigArray[index];
  };
}
console.log(heavyDuty(10));
console.log(heavyDuty(10));
let getHeavyDuty = heavyDutyHelper();
console.log(getHeavyDuty(10));
console.log(getHeavyDuty(10));


// 2. Encapsulation
const makeNuclearButton = () =&amp;gt; {
  let timeWithoutDestruction = 0;
  const launch = () =&amp;gt; {
    timeWithoutDestruction = -1;
    return "🧨";
  };
  const totalPeaceTime = () =&amp;gt; timeWithoutDestruction;
  const passTime = () =&amp;gt; {
    timeWithoutDestruction++;
  };
  setInterval(passTime, 1000);

  return {
    totalPeaceTime,
    //launch
  };
};

const ohno = makeNuclearButton()
console.log(ohno.totalPeaceTime());// ohno.launch() this is encapsulated.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#8-currying"&gt;
  &lt;/a&gt;
  8. Currying
&lt;/h4&gt;

&lt;p&gt;Currying is a technique to translate the evaluation of a function that takes multiple arguments into evaluating sequence of function each with single argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; //Normal Function
 const multiply = (a, b) =&amp;gt; {
    return a * b;
 }
//Using curry
const curriedMultiply = (a) =&amp;gt; (b) =&amp;gt; a * b;

/**Using curriedMultiply function we can create multiple utility functions. For example */

const multiplyByTwo = curriedMultiply(2);
const multiplyByFive = curriedMultiply(5);
console.log(multiplyByTwo(3),multiplyByFive(3))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#9-partial-application"&gt;
  &lt;/a&gt;
  9. Partial application
&lt;/h4&gt;

&lt;p&gt;Partial application process of producing fun using smaller number of parameters.&lt;br&gt;
The difference between curry and partial application is in curry it expect one argument at a time, But in partial application on second call it expect all arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multiply=(a,b,c)=&amp;gt;a*b*c;
const partialMultiplyBy5 = multiply.bind(null,5);
console.log(partialMultiplyBy5(2,10))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#10-memoization"&gt;
  &lt;/a&gt;
  10. Memoization
&lt;/h4&gt;

&lt;p&gt;Memoization is a specific form of caching that involves caching the return value of a function based on its parameters.&lt;br&gt;
Basic Memoization ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTo10(n) {
    console.log('long time')
    return n + 10;
}
let cache = {};
function memoizeAddTo10(n) {
    if (n in cache) return cache[n];
    cache[n] = addTo10(n);
    return cache[n];
}
console.log(memoizeAddTo10(5))
console.log(memoizeAddTo10(5))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example cache is global variable we can improve this by using closures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function memoizeAddTo10() {
    let cache = {};
    return function (n) {
          if (n in cache) return cache[n]
          cache[n] = addTo10(n);
          return cache[n];
    }
}
let memoize = memoizeAddTo10()

console.log(memoize(5))
console.log(memoize(6))
console.log(memoize(5))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#11-composition"&gt;
  &lt;/a&gt;
  11. Composition
&lt;/h4&gt;

&lt;p&gt;Composition is about creating small functions and creating bigger and more complete functions with them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
     name: "pranav",
     active: true,
     cart: [],
     purchases: []
}
const compose = (f, g) =&amp;gt; (...args) =&amp;gt; f(g(...args))
const purchase = purchaseItem(emptyCart, buyItem, applyTaxToItems, addItemToCart)(user, { name: "laptop", price: 200 });


function purchaseItem(...fns) { return fns.reduce(compose) }

function addItemToCart(user, item) {
     const updatedCart = user.cart.concat(item)
     return Object.assign({}, user, { cart: updatedCart })
}

function applyTaxToItems(user) {
     const { cart } = user;
     const taxRate = 1.3;
     const updatedCart = cart.map(({ name, price }) =&amp;gt; {
          return { name, price: price * taxRate }
     })
     return Object.assign({}, user, { cart: updatedCart })
}

function buyItem(user) {
     return Object.assign({}, user, { purchases: user.cart })
}

function emptyCart(user) {
     return Object.assign({}, user, { cart: [] })
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#12-arity"&gt;
  &lt;/a&gt;
  12. Arity
&lt;/h4&gt;

&lt;p&gt;The term arity refers simply to the number of parameters in the definition of a function. This is casually expressed as how many arguments a function takes.&lt;/p&gt;

&lt;p&gt;..................................................................&lt;br&gt;
That's it for this post. In my next posts I'll try to explain all the above 12 concepts in depth.&lt;/p&gt;

&lt;p&gt;Thank You&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Things I learned doing my Portfolio</title>
      <author>Silvia España Gil</author>
      <pubDate>Sat, 24 Jul 2021 17:53:03 +0000</pubDate>
      <link>https://dev.to/silviaespanagil/things-i-learned-doing-my-portfolio-1he6</link>
      <guid>https://dev.to/silviaespanagil/things-i-learned-doing-my-portfolio-1he6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hola-mundo"&gt;
  &lt;/a&gt;
  &lt;h1&gt; Hola Mundo! &lt;/h1&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;br&gt;
It's me, fresh out of bootcamp Silvia and I'm ready to create my Portfolio👩🏻‍💻. Well actually, as  I'm writing these lines, my Portfolio is already done, or so I say (because I've said this before and I keep changing it 🤦🏻).&lt;/p&gt;

&lt;p&gt;So, your Portfolio &lt;strong&gt;is&lt;/strong&gt; important❗. It allows you to show  your knowledge, projects you have worked with and of course, to show your personality off, because we are more than our resumé, we are soul, fire, and whole persona and &lt;strong&gt;THAT&lt;/strong&gt; must  be shown💗.&lt;/p&gt;

&lt;p&gt;I'm gonna share with you some things I learned as I created my portfolio which may help you.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#one-me-job"&gt;
  &lt;/a&gt;
  ONE: Me job🙋🏻
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
This is about &lt;strong&gt;you&lt;/strong&gt;. So a previous "me job" is necessary. So sit, invite yourself a coffee or the beverage of  your preference ☕🧉🍺🧃 and do some introspective work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What I'm good at?&lt;/li&gt;
&lt;li&gt;What do I want to do?&lt;/li&gt;
&lt;li&gt;What do I want to show?&lt;/li&gt;
&lt;li&gt;Which trait of my personality I want to highlight⭐...and how?&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#two-research-work"&gt;
  &lt;/a&gt;
  TWO: Research work 🔬
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
I don't know about you, but I'm sure I am not a designer. So, research work helped me to be faster because I had an idea which things I wanted to have in my layout and in my content.&lt;/p&gt;

&lt;p&gt;So, don't be afraid and explore the limitless space of Internet🔎.See other people portfolios to get inspired, take notes of things you like -and things you don't, obviously-. &lt;/p&gt;

&lt;p&gt;Look up for sites filled with inspiration like &lt;a href="https://dribbble.com/"&gt;Dribble&lt;/a&gt; with lots of layout ideas, find a color palette🌈 that resonates within you 🌈in &lt;a href="https://color.adobe.com/es/explore"&gt;Color Adobe&lt;/a&gt; or &lt;a href="https://colorhunt.co/"&gt;Color Hunt&lt;/a&gt; and allow yourself to imagine how good you want your portfolio to look like.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#three-schedulize"&gt;
  &lt;/a&gt;
  THREE: Schedulize 📝
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
Look at your Portfolio as a formal project (because duh! it is!). If you use Git, my recommendation is to &lt;strong&gt;use Git Projects&lt;/strong&gt;. This will save you LOTS of time ⏱️.&lt;/p&gt;

&lt;p&gt;You can do this, the way it fits the best for you. For me the best way was to do a simple Kanban with a "To do", "Doing" and "Done" column. I also add an "Information" space for notes I wanted to save for later.  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3aM5nHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zww6w8p4feq0rscia1xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3aM5nHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zww6w8p4feq0rscia1xd.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Create as many task you think are necessary and remember your Kanban is alive, it  may change, it will grow and eventually it's going to get done.&lt;/p&gt;

&lt;p&gt;I also created some labels I thought were usefull to identify each task such as "Funcionality", "Structure","Improvements", "Styles" etc to help me prioritize 🎯 each task.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5eIGf-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su5morm5c6dn9rq4yqlo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5eIGf-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su5morm5c6dn9rq4yqlo.png" alt="labels"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#four-code-time"&gt;
  &lt;/a&gt;
  FOUR: Code time!⌨️
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
Looks like everything is set up, so let the magic begin✨. Choose your favorite technology and start coding. &lt;/p&gt;

&lt;p&gt;Remember  when I said this is a project? Be a good but a tough client. Aim for using the best practices, write a clean code and let your portfolio speak for yourself; not only about you but also about the kind of developer you are. &lt;/p&gt;

&lt;p&gt;So, if you are fond with a methodology, apply it. If there's a good practice, use it. This is for you, so be your best version because you deserve the best 💗.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#five-me-time"&gt;
  &lt;/a&gt;
  FIVE: Me time🙋🏻
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
Remember what I said in the first part?. This is a reminder: your Portfolio should show your skills, for sure; yet, the most important thing is that it must show YOURSELF.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#six-ask-for-help"&gt;
  &lt;/a&gt;
  SIX: Ask for help🆘
&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;
As more eyes see more, don't be afraid to show your Portfolio to other people so they can give you feedback👀. &lt;/p&gt;

&lt;p&gt;Show it to your peers so  they can give you a tip or critic about something you did not see by yourself before. &lt;/p&gt;

&lt;p&gt;You can also show it to your parents, bestfriend or sibling so they can let you know if your personality is shining ✨through. &lt;/p&gt;

&lt;p&gt;Be humble  about the feedback and don't take anything to heart💚. Learn from  the things they have to say and apply the feedbacks you think are valuable.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#seven-show-it-to-the-world"&gt;
  &lt;/a&gt;
  SEVEN: Show it to the world 🗺️
&lt;/h3&gt;

&lt;p&gt; &lt;br&gt;
It may not be perfect, but nothing really is. Surely you will continue to make some changes or keep thinking about ways to improve it but don't get stuck there, if  it's done, &lt;strong&gt;SHARE IT!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So this is my world debut, you can &lt;a href="https://silviaespanagil.github.io/portfolio/"&gt;take a look to my Portfolio here&lt;/a&gt;. Right now is in Spanish but hey! English translation will come up soon.&lt;/p&gt;

&lt;p&gt;If you want to, show the world your portfolio in the comment section, remember sharing, is caring 💞&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>codenewbie</category>
      <category>womenintech</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Hugo+Netlify Setup</title>
      <author>James D.</author>
      <pubDate>Sat, 24 Jul 2021 17:40:16 +0000</pubDate>
      <link>https://dev.to/jamesatintegrationio/my-hugo-netlify-setup-1b7p</link>
      <guid>https://dev.to/jamesatintegrationio/my-hugo-netlify-setup-1b7p</guid>
      <description>&lt;p&gt;So here is how I got my blog all set up. It was a lot of back and forth on how I set this up. So this post is for those that read it. But also for me. It was a lot of work and I want to capture what I did so I can reproduce it later.&lt;/p&gt;

&lt;p&gt;This is by no means a complete set of instructions that you can iterate through. But more of a flow. I try to call out the things that were pain points for me directly though.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-hugo"&gt;
  &lt;/a&gt;
  Setting up Hugo
&lt;/h2&gt;

&lt;p&gt;First thing I did was install hugo. You can find instructions for it &lt;a href="https://gohugo.io/getting-started/installing/"&gt;here&lt;/a&gt;. After I had it installed I used &lt;code&gt;hugo new site ${siteName}&lt;/code&gt; to create my site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#version-control-is-key"&gt;
  &lt;/a&gt;
  Version Control is Key
&lt;/h2&gt;

&lt;p&gt;After that I wanted to have git setup so that I had solid version control incase I broke anything. &lt;code&gt;git init&lt;/code&gt; solved that really quickly. Then I created my repo on &lt;a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/creating-a-new-repository"&gt;Github&lt;/a&gt;. After you do that it will give you instructions on how to create your first commit and change your origin for the remote and push your code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gotta-make-it-pretty"&gt;
  &lt;/a&gt;
  Gotta Make it Pretty
&lt;/h2&gt;

&lt;p&gt;Next up is adding the theme. You can find a lot of them on the &lt;a href="https://themes.gohugo.io/"&gt;Hugo site&lt;/a&gt;. Use &lt;code&gt;git submodule add ${url to theme repo} themes/{theme-name}&lt;/code&gt; to put it in place.&lt;/p&gt;

&lt;p&gt;After you get your theme in place you will need to update your config.yaml to actually use it. You would do this by adding a line like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;anubis"&lt;/span&gt; &lt;span class="c1"&gt;# This is the name of the folder in the themes directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-it"&gt;
  &lt;/a&gt;
  Deploy It
&lt;/h2&gt;

&lt;p&gt;Now I have everything installed. Lets see it run. To run it locally to make sure everything works you can use &lt;code&gt;hugo serve&lt;/code&gt;. But if you really want to get going then you will need to deploy it somewhere online. I put mine on netlify as I knew the name already and the process was simple enough. &lt;/p&gt;

&lt;p&gt;Create your account on &lt;a href="https://app.netlify.com/signup"&gt;netlify&lt;/a&gt;. After your account is created you can create a new site with this magic button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kVINQb9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp5ipj1nl7gd0sr4r4rk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kVINQb9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp5ipj1nl7gd0sr4r4rk.png" alt="new site button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this you will go through some steps to connect it to your github repository and a deploy should be triggered. When its all said and done you should have your new site up and ready to go.&lt;/p&gt;

&lt;p&gt;This includes setting up your &lt;code&gt;netlify.toml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[build]&lt;/span&gt;
&lt;span class="py"&gt;publish&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"public"&lt;/span&gt;
&lt;span class="py"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hugo --gc --minify"&lt;/span&gt;

&lt;span class="nn"&gt;[context.production.environment]&lt;/span&gt;
&lt;span class="py"&gt;HUGO_VERSION&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.85.0"&lt;/span&gt;
&lt;span class="py"&gt;HUGO_ENV&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"production"&lt;/span&gt;
&lt;span class="py"&gt;HUGO_ENABLEGITINFO&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"true"&lt;/span&gt;

&lt;span class="nn"&gt;[context.split1]&lt;/span&gt;
&lt;span class="py"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hugo --gc --minify --enableGitInfo"&lt;/span&gt;

&lt;span class="nn"&gt;[context.split1.environment]&lt;/span&gt;
&lt;span class="py"&gt;HUGO_VERSION&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.85.0"&lt;/span&gt;
&lt;span class="py"&gt;HUGO_ENV&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"production"&lt;/span&gt;

&lt;span class="nn"&gt;[context.deploy-preview]&lt;/span&gt;
&lt;span class="py"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hugo --gc --minify --buildDrafts --buildFuture -b $DEPLOY_PRIME_URL"&lt;/span&gt;

&lt;span class="nn"&gt;[context.deploy-preview.environment]&lt;/span&gt;
&lt;span class="py"&gt;HUGO_VERSION&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.85.0"&lt;/span&gt;

&lt;span class="nn"&gt;[context.branch-deploy]&lt;/span&gt;
&lt;span class="py"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hugo --gc --minify --buildDrafts --buildFuture -b $DEPLOY_PRIME_URL"&lt;/span&gt;

&lt;span class="nn"&gt;[context.branch-deploy.environment]&lt;/span&gt;
&lt;span class="py"&gt;HUGO_VERSION&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.85.0"&lt;/span&gt;

&lt;span class="nn"&gt;[context.next.environment]&lt;/span&gt;
&lt;span class="py"&gt;HUGO_ENABLEGITINFO&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"true"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-netlify-cms"&gt;
  &lt;/a&gt;
  Adding Netlify CMS
&lt;/h2&gt;

&lt;p&gt;You can find the getting started documentation &lt;a href="https://www.netlifycms.org/docs/intro/"&gt;here&lt;/a&gt;. You'll notice we didn't use the Hugo Template that they offer. That thing is outdated and I was unable to get it to work well with a theme for local development. It was much easier to add it to an &lt;a href="https://www.netlifycms.org/docs/add-to-your-site/"&gt;existing site&lt;/a&gt;. Read that doc. It will answer most of your questions. But here is my config.yml (make sure you use &lt;code&gt;.yml&lt;/code&gt; and not &lt;code&gt;.yaml&lt;/code&gt;. It only looks for the one).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git-gateway&lt;/span&gt;
  &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
  &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jamesattensure/integratn-io&lt;/span&gt;

&lt;span class="na"&gt;publish_mode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;editorial_workflow&lt;/span&gt;
&lt;span class="na"&gt;media_folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;static/images"&lt;/span&gt;
&lt;span class="na"&gt;public_folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/images"&lt;/span&gt;

&lt;span class="na"&gt;collections&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;posts"&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Posts"&lt;/span&gt;
    &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;content/posts"&lt;/span&gt;
    &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;{{year}}-{{month}}-{{day}}-{{slug}}"&lt;/span&gt;
    &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Draft"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;draft&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;boolean"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Layout"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;layout"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;hidden"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;post"&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Title"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;title"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;string"&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Publish&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Date"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;date"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;datetime"&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Categories"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;categories"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;list"&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Tags"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;tags"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;list"&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Series"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;series&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;list"&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;No&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Comment"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;nocomment"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;boolean"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;false&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Body"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;body"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;widget&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;markdown"&lt;/span&gt;&lt;span class="pi"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your collections are built based on your hugo &lt;a href="https://gohugo.io/content-management/archetypes/"&gt;archetypes&lt;/a&gt;. There are a couple extra widgets that I don't use. Those can be found in the &lt;a href="https://www.netlifycms.org/docs/widgets"&gt;widget doc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure you get through the whole doc and complete the authentication steps or anyone will be able to access the cms features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-things-to-setup"&gt;
  &lt;/a&gt;
  Additional Things to Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#analytics"&gt;
  &lt;/a&gt;
  Analytics
&lt;/h3&gt;

&lt;p&gt;Pay for netlify analytics or add &lt;a href="https://analytics.google.com/"&gt;Google analytics&lt;/a&gt;. Most themes have Google analytics baked in and you just have to add the params to your &lt;code&gt;config.yaml&lt;/code&gt; to connect it. Here are the two posts I followed to get it setup. &lt;a href="http://cloudywithachanceofdevops.com/posts/2018/05/17/setting-up-google-analytics-on-hugo/"&gt;cloudywithachanceofdevops.com&lt;/a&gt; and &lt;a href="https://gideonwolfe.com/posts/sysadmin/hugo/hugogoogleanalytics/"&gt;gideonwolfe.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Make sure you filter out your connections to your site so that you don't skew your own analytics. This blog post from &lt;a href="https://www.daniloaz.com/en/5-ways-to-exclude-your-own-visits-from-google-analytics/"&gt;daniloaz.com&lt;/a&gt; really helped get me through it. I went with the second method of filtering out my public IP as internal traffic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h3&gt;

&lt;p&gt;After you have Google analytics setup. You can setup &lt;a href="https://search.google.com/search-console"&gt;Google Search&lt;/a&gt; to the same property that you setup in google analytics. It helps to have a sitemap.xml to add. The easiest way I found to do that was to use the &lt;a href="https://github.com/netlify-labs/netlify-plugin-sitemap#readme"&gt;sitemap netlify plugin&lt;/a&gt; I recommend just installing it from the plugins tab on your Netlify site. Much easier to manage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-plugins"&gt;
  &lt;/a&gt;
  Additional Plugins
&lt;/h3&gt;

&lt;p&gt;Here are a couple other plugins I installed. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cdeleeuwe/netlify-plugin-hugo-cache-resources#readme"&gt;Hugo cache resources&lt;/a&gt;:&lt;br&gt;
This plugin caches the resources folder after build. If you are processing many images, this would improve build duration significantly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cdeleeuwe/netlify-plugin-submit-sitemap#readme"&gt;Submit sitemap&lt;/a&gt;:&lt;br&gt;
This plugin will notify the search engines after every production build about your latest sitemap. The plugin can be used without any configuration if using the defaults.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;There is a lot to learn when getting started with blogging. At the time of posting this I've only been at it a couple weeks. I spent most of that time bouncing through various starters and trying different things out to figure out what worked and what didn't. Hell, a week of that was probably just trying to pick a theme that I could live with until I understand enough to build my own theme. I hope this helped get you up and running. Enjoy and happy blogging.&lt;/p&gt;

</description>
      <category>netlify</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is RESTful Service?</title>
      <author>Mohan Murali</author>
      <pubDate>Sat, 24 Jul 2021 17:28:35 +0000</pubDate>
      <link>https://dev.to/_mohanmurali/what-is-restful-service-5ai5</link>
      <guid>https://dev.to/_mohanmurali/what-is-restful-service-5ai5</guid>
      <description>&lt;p&gt;Web is a place where there are tons of computers talking to each other. As the web grew, it became clear that we needed a common and secure way to allow others to interact with our application. This need gave rise to Representational State Transfer Architecture or more commonly known as REST architecture. REST defines a set of constraints for how the web should behave.&lt;br&gt;
REST defines a &lt;em&gt;client-server communication model&lt;/em&gt;. The device making the request is called the &lt;em&gt;Client&lt;/em&gt; and the device which is listening for the requests is called a &lt;em&gt;Server&lt;/em&gt; The server is in charge of the resources. A resource can be anything like a HTML file, a JSON object, an image file or event a JavaScript file. The client-server communication happens with HTTP/HTTPS protocols. The actual logic for fetching the resource is abstracted behind the server and the client has no idea about what happens in the server. The resource might be fetched from the server the client requested or it can be fetched from some other server. The only thing client is concerned is that if they are getting the resource or not, and if they don't receive the resource, what is the reason for that? REST is also &lt;em&gt;Stateless&lt;/em&gt;, which means that the server has no idea about the previous calls from the client. The server does not hold on to information's for the client. A web service that obeys the REST constraints is called a &lt;strong&gt;RESTful service&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gF1vmXGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jirtblkzi0qcc48yemmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gF1vmXGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jirtblkzi0qcc48yemmu.png" alt="Client-Server"&gt;&lt;/a&gt;&lt;br&gt;
The Client calls the server using http methods and gets a http response code and http response status along with the resource as the response. The most commonly used HTTP methods are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt;: This the the most widely used request method. When the client makes a GET request, it means that the client is asking for the resource mentioned in the URI. Multiple GET request for the same resource will result in same response from the server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt;: The second most common request method. A POST request from the client comes with a request body that contains a structure of the resource itself. POST request is used to create the resource enclosed in the request body of a POST request. Every time we make a POST request, the server will create a new request even if the body of the request doesn't change.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PUT&lt;/strong&gt;: A PUT request, just like the POST request contains a structure of the resource in its request body. A PUT request tries to find of the resource is already present and if its present then update the resource and if its not present it will create the resource. Hence PUT request will always give same response for same request.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DELETE&lt;/strong&gt;: A DELETE request from the client means the client wants to delete resource. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The response codes from the server are in the following categories&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Successful responses&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
When we get the expected response from the server. This includes the following status codes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;200 OK&lt;/strong&gt;: This means that the request was success. This can be the result for any HTTP methods.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;201 Created&lt;/strong&gt;: This means that the resource was created. This will be the response for either PUT or POST request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Client error responses&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
When there is something wrong with the request made by the client we get one of the client error response.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;400 Bad Request&lt;/strong&gt;: The server was not able to understand the request due to as the structure of the resource in request body is not same as the one server expects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;401 Unauthorized&lt;/strong&gt;: The client is not recognized by the server and this is a resource only for recognized clients.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;403 Forbidden&lt;/strong&gt;: The client does not have access to the resource. Unlike 401, here the server is aware of the client but the client does not have access to the resource.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;404 Not Found&lt;/strong&gt;: The server cannot find the requested resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Server error responses&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
When there is something wrong with the server, then we get one of the server error response.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;500 Internal Server Error&lt;/strong&gt;: The server encountered a situation it doesn't know how to handle.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;501 Not Implemented&lt;/strong&gt;: The request method is not supported by the server.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;503 Service Unavailable&lt;/strong&gt;: The server is not available to handle the request. This might be due to the server being down for maintenance.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>backend</category>
      <category>codenewbie</category>
      <category>rest</category>
    </item>
    <item>
      <title>Python Basics, Pythons 101!
</title>
      <author>Morris Mulitu</author>
      <pubDate>Sat, 24 Jul 2021 17:10:26 +0000</pubDate>
      <link>https://dev.to/mulitu/python-basics-pythons-101-45dp</link>
      <guid>https://dev.to/mulitu/python-basics-pythons-101-45dp</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction: What is Python?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Python is a general-purpose, high level, interpreted language with easy syntax and dynamic semantics. The development of python started as a hobby for its creator Guido Van Rossum in 1989. He wanted to make a language that was beautiful to look at and easy for everyone to read. To do this he used indentation instead of curly braces to basically describe the various blocks of code. The language did not receive so much ‘love’ initially because it was slower than other languages at the time. With the rise of machine learning and artificial intelligence, python has come into the spotlight. It makes the tasks much more useful and easy to implement. With the increased computing power available currently, the focus has shifted to increased productivity even if there shall be some extra time taken when python is used.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is Python popular?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python is the best language to learn as a first-time programmer. Its easy syntax and high-level features make it the best. It is the language for everybody. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python is an open-source language meaning it is free for anybody to use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python can be used to make almost anything. Python can be used in GY applications, web applications, mobile applications, server-side coding, artificial intelligence, machine learning and many more. Python always finds a way to do that which you need to be done. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python has a huge library or modules support. There is a big community that comes together to make the libraries or modules that can be used to obtain any solutions. For example, machine learning algorithms are already available and you can use them to obtain better solutions. You will hence end up having higher productivity and much less coding in this case. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Features of Python&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Simplicity&lt;/em&gt;. This makes python fun. It makes you think more of your solution rather than the syntax.&lt;br&gt;
Portability. Python code can be shared among different people and devices and its working remains identical holding all other factors constant. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Interpretation&lt;/em&gt;. Python is an interpreted language because it goes through an interpreter, which turns the code into the language understood by your computer’s processor. This makes the management of CPU, memory and debugging much simpler. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;em&gt;huge library support&lt;/em&gt; will help you to obtain solutions to your problems easier. You can get started off with data science, web development and others on the go with python. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Object orientation&lt;/em&gt;. You may have questions about how developers make apps that are tuned to a specific domain. This is due to the Object-Oriented Programming concepts. Python supports OOP meaning you can model a real-world problem into your code. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Where is Python used in the industry?&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.google.com"&gt;Google&lt;/a&gt; - Google uses python to provide better search results based on the ranking of websites and much more. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.dropbox.com"&gt;Dropbox&lt;/a&gt;-This cloud storage platform uses python in its server and client applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.netflix.com"&gt;Netflix&lt;/a&gt;-Netflix uses machine learning with python to cluster users based on their interest in shows and tailor them such that watchers stick around longer. &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.nsa.gov/"&gt;NSA&lt;/a&gt;-NSA uses python for cybersecurity analysis, encryption and decryption. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bittorrent.com/"&gt;BitTorrent&lt;/a&gt;-It started as a simple python file. Uses python to transfer files in a peer to peer scenario. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, &lt;a href="https://www.python.org/downloads/"&gt;download the latest version of Python&lt;/a&gt; from the download page.Check the documentation and installation manual provided there ans ensure all system requirements are met prior to installation. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your "Hello World!"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new folder. You might as well name it &lt;em&gt;helloworld&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Launch &lt;a href="https://code.visualstudio.com/"&gt;VS code&lt;/a&gt; or any other source-code editor of your choice and open the &lt;em&gt;helloworld&lt;/em&gt; folder. &lt;/p&gt;

&lt;p&gt;Create a new .py file such as &lt;em&gt;helloworld.py&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enter the following line of code;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello, World!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The print() is an inbuilt function to display screen messages. In this case, &lt;strong&gt;Hello, World!&lt;/strong&gt; message will be shown. &lt;/p&gt;

&lt;p&gt;To execute the helloworld.py file,launch the Command Prompt if on Windows or the Terminal on macOS or Linux. VS code also has an inbuilt one. &lt;/p&gt;

&lt;p&gt;Navigate tyo the folder where the .py file is saved and type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 helloworld.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to display&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have written your first python, welcome to the world of &lt;a href="https://docs.python.org/3/tutorial/"&gt;python programming&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>programming</category>
      <category>datascience</category>
    </item>
  </channel>
</rss>
