<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Announcing Vite 2.0</title>
      <author>Evan You</author>
      <pubDate>Tue, 16 Feb 2021 22:54:28 +0000</pubDate>
      <link>https://dev.to/yyx990803/announcing-vite-2-0-2f0a</link>
      <guid>https://dev.to/yyx990803/announcing-vite-2-0-2f0a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bp9HIjTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ripvyhwi6xl0gqkvj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bp9HIjTK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77ripvyhwi6xl0gqkvj9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I'm excited to announce the official release of Vite 2.0!&lt;/p&gt;

&lt;p&gt;Vite (French word for "fast", pronounced &lt;code&gt;/vit/&lt;/code&gt;) is a new kind of build tool for frontend web development. Think a pre-configured dev server + bundler combo, but leaner and faster. It leverages browser's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;native ES modules&lt;/a&gt; support and tools written in compile-to-native languages like &lt;a href="https://esbuild.github.io/"&gt;esbuild&lt;/a&gt; to deliver a snappy and modern development experience.&lt;/p&gt;

&lt;p&gt;To get a sense of how fast Vite is, here's a video comparison of booting up a React application on Repl.it using Vite vs. &lt;code&gt;create-react-app&lt;/code&gt; (CRA):&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DXDC4out--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1355379294113947652/pu/img/D3Eo9gZZVEfjC3in.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3DYT45P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1292621994534477825/QAhPUcZb_normal.jpg" alt="Amjad Masad ⠕ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Amjad Masad ⠕
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/amasad"&gt;@amasad&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Create React App vs Vite React on &lt;a href="https://twitter.com/replit"&gt;@replit&lt;/a&gt;. &lt;br&gt;&lt;br&gt;Vite ran before the container could even boot CRA files. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:57 AM - 30 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1355379680275128321" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1355379680275128321" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1355379680275128321" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;If you've never heard of Vite before and would love to learn more about it, check out &lt;a href="https://vitejs.dev/guide/why.html"&gt;the rationale behind the project&lt;/a&gt;. If you are interested in how Vite differs from other similar tools, check out the &lt;a href="https://vitejs.dev/guide/comparisons.html"&gt;comparisons&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new-in-20" class="anchor"&gt;
  &lt;/a&gt;
  What's New in 2.0
&lt;/h2&gt;

&lt;p&gt;Since we decided to completely refactor the internals before 1.0 got out of RC, this is in fact the first stable release of Vite. That said, Vite 2.0 brings about many big improvements over its previous incarnation:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#framework-agnostic-core" class="anchor"&gt;
  &lt;/a&gt;
  Framework Agnostic Core
&lt;/h3&gt;

&lt;p&gt;The original idea of Vite started as a &lt;a href="https://github.com/vuejs/vue-dev-server"&gt;hacky prototype that serves Vue single-file components over native ESM&lt;/a&gt;. Vite 1 was a continuation of that idea with HMR implemented on top.&lt;/p&gt;

&lt;p&gt;Vite 2.0 takes what we learned along the way and is redesigned from scratch with a more robust internal architecture. It is now completely framework agnostic, and all framework-specific support is delegated to plugins. There are now &lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-app"&gt;official templates for Vue, React, Preact, Lit Element&lt;/a&gt;, and ongoing community efforts for Svelte integration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-plugin-format-and-api" class="anchor"&gt;
  &lt;/a&gt;
  New Plugin Format and API
&lt;/h3&gt;

&lt;p&gt;Inspired by &lt;a href="https://github.com/preactjs/wmr"&gt;WMR&lt;/a&gt;, the new plugin system extends Rollup's plugin interface and is &lt;a href="https://vite-rollup-plugins.patak.dev/"&gt;compatible with many Rollup plugins&lt;/a&gt; out of the box. Plugins can use Rollup-compatible hooks, with additional Vite-specific hooks and properties to adjust Vite-only behavior (e.g. differentiating dev vs. build or custom handling of HMR).&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://vitejs.dev/guide/api-javascript.html"&gt;programmatic API&lt;/a&gt; has also been greatly improved to facilitate higher level tools / frameworks built on top of Vite.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#esbuild-powered-dep-prebundling" class="anchor"&gt;
  &lt;/a&gt;
  esbuild Powered Dep Pre-Bundling
&lt;/h3&gt;

&lt;p&gt;Since Vite is a native ESM dev server, it pre-bundles dependencies to reduce the number browser requests and handle CommonJS to ESM conversion. Previously Vite did this using Rollup, and in 2.0 it now uses &lt;code&gt;esbuild&lt;/code&gt; which results in 10-100x faster dependency pre-bundling. As a reference, cold-booting a test app with heavy dependencies like React Meterial UI previously took 28 seconds on an M1-powered Macbook Pro and now takes ~1.5 seconds. Expect similar improvements if you are switching from a traditional bundler based setup.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firstclass-css-support" class="anchor"&gt;
  &lt;/a&gt;
  First-class CSS Support
&lt;/h3&gt;

&lt;p&gt;Vite treats CSS as a first-class citizen of the module graph and supports the following out of the box:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Resolver enhancement&lt;/strong&gt;: &lt;code&gt;@import&lt;/code&gt; and &lt;code&gt;url()&lt;/code&gt; paths in CSS are enhanced with Vite's resolver to respect aliases and npm dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;URL rebasing&lt;/strong&gt;: &lt;code&gt;url()&lt;/code&gt; paths are automatically rebased regardless of where the file is imported from.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS code splitting&lt;/strong&gt;: a code-split JS chunk also emits a corresponding CSS file, which is automatically loaded in parallel with the JS chunk when requested.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#serverside-rendering-ssr-support" class="anchor"&gt;
  &lt;/a&gt;
  Server-Side Rendering (SSR) Support
&lt;/h3&gt;

&lt;p&gt;Vite 2.0 ships with &lt;a href="https://vitejs.dev/guide/ssr.html"&gt;experimental SSR support&lt;/a&gt;. Vite provides APIs to to efficiently load and update ESM-based source code in Node.js during development (almost like server-side HMR), and automatically externalizes CommonJS-compatible dependencies to improve development and SSR build speed. The production server can be completely decoupled from Vite, and the same setup can be easily adapted to perform pre-rendering / SSG.&lt;/p&gt;

&lt;p&gt;Vite SSR is provided as a low-level feature and we are expecting to see higher level frameworks leveraging it under the hood.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optin-legacy-browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Opt-in Legacy Browser Support
&lt;/h3&gt;

&lt;p&gt;Vite targets modern browsers with native ESM support by default, but you can also opt-in to support legacy browers via the official &lt;a href="https://github.com/vitejs/vite/tree/main/packages/plugin-legacy"&gt;@vitejs/plugin-legacy&lt;/a&gt;. The plugin automatically generates dual modern/legacy bundles, and delivers the right bundle based on browser feature detection, ensuring more efficient code in modern browsers that support them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-it-a-try" class="anchor"&gt;
  &lt;/a&gt;
  Give it a Try!
&lt;/h2&gt;

&lt;p&gt;That was a lot of features, but getting started with Vite is simple! You can spin up a Vite-powered app literally in a minute, starting with the following command (make sure you have Node.js &amp;gt;=12):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init @vitejs/app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, check out &lt;a href="https://vitejs.dev/guide/"&gt;the guide&lt;/a&gt; to see what Vite provides out of the box. You can also check out the source code on &lt;a href="https://github.com/vitejs/vite"&gt;GitHub&lt;/a&gt;, follow updates on &lt;a href="https://twitter.com/vite_js"&gt;Twitter&lt;/a&gt;, or join discussions with other Vite users on our &lt;a href="http://chat.vitejs.dev/"&gt;Discord chat server&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vite</category>
    </item>
    <item>
      <title>Web Application Security Checklist (2021)</title>
      <author>Teo Selenius</author>
      <pubDate>Tue, 16 Feb 2021 19:10:59 +0000</pubDate>
      <link>https://dev.to/appsecmonkey/web-application-security-checklist-2021-5266</link>
      <guid>https://dev.to/appsecmonkey/web-application-security-checklist-2021-5266</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;It's scary out there for developers! One mistake in the code, one vulnerability in a dependency, one compromised developer workstation, and your database is in Pastebin and you're on the news.&lt;/p&gt;

&lt;p&gt;So where to look for guidance? &lt;a href="https://owasp.org/www-project-top-ten/"&gt;OWASP's top 10 list&lt;/a&gt; is just too short and focuses more on listing vulnerabilities than defenses. Whereas the &lt;a href="https://owasp.org/www-project-application-security-verification-standard/"&gt;ASVS&lt;/a&gt; list is rather cryptic and vague for practical purposes.&lt;/p&gt;

&lt;p&gt;This article is an attempt at the golden mean. We'll go through some practical steps that you can take to secure your web application from all angles. Let's begin!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-the-browser-side"&gt;Defending Threats On The Browser Side&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#use-https-and-only-https-to-protect-your-users-from-network-attacks"&gt;Use HTTPS and only HTTPS to protect your users from network attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-hsts-and-preloading-to-protect-your-users-from-ssl-stripping-attacks"&gt;Use HSTS and preloading to protect your users from SSL stripping attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-cookies-with-the-secure-attribute-to-protect-your-user-from-network-attacks"&gt;Serve cookies with the 'Secure' attribute to protect your user from network attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#generate-html-safely-to-avoid-xss-vulnerabilities"&gt;Generate HTML safely to avoid XSS vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-javascript-safely-to-avoid-xss-vulnerabilities"&gt;Use JavaScript safely to avoid XSS vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sanitize-and-sandbox-untrusted-content-to-avoid-xss-vulnerabilities"&gt;Sanitize and sandbox untrusted content to avoid XSS vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#implement-an-effective-content-security-policy-to-protect-your-users-from-xss-and-other-vulnerabilities"&gt;Implement an effective Content Security Policy to protect your users from XSS and other vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-cookies-with-the-httponly-attribute-to-protect-them-from-xss-attacks"&gt;Serve cookies with the HttpOnly attribute to protect them from XSS attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-downloads-with-a-proper-content-disposition-header-to-avoid-xss-vulnerabilities"&gt;Serve downloads with a proper Content-Disposition header to avoid XSS vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-api-responses-with-a-proper-content-disposition-header-to-avoid-reflected-download-vulnerabilities"&gt;Serve API responses with a proper Content-Disposition header to avoid reflected download vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-your-platforms-anti-csrf-mechanism-to-avoid-csrf-vulnerabilities"&gt;Use your platform's anti-CSRF mechanism to avoid CSRF vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#validate-the-oauthoidc-state-parameter-to-avoid-csrf-vulnerabilities"&gt;Validate the OAuth/OIDC state parameter to avoid CSRF vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-http-verbs-properly-to-avoid-csrf-vulnerabilities"&gt;Use HTTP verbs properly to avoid CSRF vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-cookies-with-the-samesite-attribute-to-protect-your-users-from-csrf-vulnerabilities-and-optionally-defend-xss-as-well"&gt;Serve cookies with the SameSite attribute to protect your users from CSRF vulnerabilities and optionally defend XSS as well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-fresh-session-id-on-login-to-protect-against-session-fixation-attacks"&gt;Create a fresh session ID on login to protect against session fixation attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#name-your-cookies-right-to-protect-against-session-fixation-attacks"&gt;Name your cookies right to protect against session fixation attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serve-proper-cache-control-headers-to-protect-your-users-data-from-subsequent-computer-users"&gt;Serve proper Cache-Control headers to protect your user's data from subsequent computer users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-serve-a-clear-site-data-header-upon-log-out-to-protect-your-users-data-from-subsequent-computer-users"&gt;Serve a Clear-Site-Data header upon log out to protect your user's data from subsequent computer users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#log-your-users-out-properly-to-protect-their-data-from-subsequent-computer-users"&gt;Log your users out properly to protect their data from subsequent computer users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-sessionstorage-for-javascript-secrets-to-protect-your-users-data-from-subsequent-computer-users"&gt;Use SessionStorage for JavaScript secrets to protect your user's data from subsequent computer users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-transmit-sensitive-data-in-the-url-because-urls-are-not-designed-to-be-secret"&gt;Don't transmit sensitive data in the URL because URLs are not designed to be secret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-use-a-referrer-policy-to-prevent-url-addresses-from-leaking-to-other-websites"&gt;Use a referrer policy to prevent URL addresses from leaking to other websites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-a-unique-domain-name-for-your-application-to-protect-it-from-other-applications-under-the-same-origin-and-vice-versa"&gt;Use a unique domain name for your application to protect it from other applications under the same origin (and vice versa)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-use-cors-unless-you-have-to-and-if-you-have-to-be-careful-with-it"&gt;Don't use CORS unless you have to, and if you have to, be careful with it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-websockets-properly-to-avoid-csrf-and-other-vulnerabilities"&gt;Use WebSockets properly to avoid CSRF and other vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-u2f-tokens-or-client-certificates-to-protect-your-critical-users-from-phishing-attacks"&gt;Use U2F tokens or client certificates to protect your critical users from phishing attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---application"&gt;Defending Threats On Server Side - Application&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#validate-input-properly-to-protect-your-application-from-so-many-vulnerabilities"&gt;Validate input properly to protect your application from... so many vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#catch-exceptions-gracefully-to-avoid-leaking-technical-details"&gt;Catch exceptions gracefully to avoid leaking technical details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-do-authentication-yourself"&gt;Don't do authentication yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authenticate-everything-to-reduce-the-attack-surface"&gt;Authenticate everything to reduce the attack surface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-mfa-in-your-application-to-break-the-trust-relationship-to-the-identity-provider"&gt;Use MFA in your application to break the trust relationship to the identity provider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-strict-access-controls-to-prevent-unauthorized-access-to-data-or-functionality"&gt;Use strict access controls to prevent unauthorized access to data or functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-proper-tools-and-techniques-to-avoid-injection-vulnerabilities"&gt;Use proper tools and techniques to avoid injection vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#construct-database-queries-safely-to-avoid-sql-injection-vulnerabilities"&gt;Construct database queries safely to avoid SQL injection vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#if-you-must-run-os-commands-do-it-right-to-avoid-command-injection-and-related-vulnerabilities"&gt;If you must run OS commands, do it right to avoid command injection and related vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avoid-xml-vulnerabilities-by-configuring-your-parsers-properly"&gt;Avoid XML vulnerabilities by configuring your parsers properly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avoid-url-injection-vulnerabilities-by-using-proper-class-for-url-construction"&gt;Avoid URL injection vulnerabilities by using proper class for URL construction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#avoid-path-traversal-vulnerabilities-by-using-a-proper-class-to-construct-the-paths"&gt;Avoid path traversal vulnerabilities by using a proper class to construct the paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-use-the-filesystem-for-untrusted-content-eg-uploads-if-you-can-avoid-it"&gt;Don't use the filesystem for untrusted content (e.g. uploads) if you can avoid it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-execute-dynamic-code-to-avoid-remote-code-execution-vulnerabilities"&gt;Don't execute dynamic code to avoid remote code execution vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-serialization-carefully-to-avoid-deserialization-vulnerabilities"&gt;Use serialization carefully to avoid deserialization vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---infrastructure"&gt;Defending Threats On Server Side - Infrastructure&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#use-a-waf"&gt;Use a WAF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configure-your-web-server-carefully-to-avoid-http-desync-attacks"&gt;Configure your web server carefully to avoid HTTP desync attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-containers"&gt;Use containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-selinuxapparmor"&gt;Use SELinux/AppArmor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-service-accounts-with-minimum-privileges"&gt;Use service accounts with minimum privileges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#restrict-egress-network-connections"&gt;Restrict egress network connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keep-track-of-your-dns-records-to-prevent-subdomain-takeovers"&gt;Keep track of your DNS records to prevent subdomain takeovers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---architecture"&gt;Defending Threats On Server Side - Architecture&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-an-internal-api-for-accessing-data-sources-to-get-rid-of-dangerous-trust-boundaries"&gt;Create an internal API for accessing data sources to get rid of dangerous trust boundaries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encrypt-and-authenticate-all-connections"&gt;Encrypt and authenticate all connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manage-secrets-centrally"&gt;Manage secrets centrally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---monitoring"&gt;Defending Threats On Server Side - Monitoring&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#collect-analyze-alert"&gt;Collect, analyze, alert&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-application-security-events"&gt;Collect application security events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-runtime-security-logs"&gt;Collect runtime security logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-selinuxapparmor-logs"&gt;Collect SELinux/AppArmor logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-webserver-events"&gt;Collect webserver events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#collect-waf-logs"&gt;Collect WAF logs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#defending-threats-on-server-side---incident-response"&gt;Defending Threats On Server Side - Incident Response&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#have-a-plan"&gt;Have a plan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#secure-development-considerations"&gt;Secure Development Considerations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#threat-model"&gt;Threat model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#force-peer-review-in-source-control"&gt;Force peer review in source control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automate-the-ci-pipeline-and-restrict-mere-mortal-access-to-it"&gt;Automate the CI pipeline and restrict mere mortal access to it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sign-the-build-artifacts"&gt;Sign the build artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-a-static-application-security-scanner-as-part-of-the-ci-pipeline"&gt;Run a static application security scanner as part of the CI pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verify-dependencies-on-build-and-keep-them-at-a-minimum"&gt;Verify dependencies on build and keep them at a minimum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-a-dependency-security-scanner-as-part-of-the-ci-pipeline"&gt;Run a dependency security scanner as part of the CI pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-a-container-image-security-scanner-as-part-of-the-ci-pipeline"&gt;Run a container image security scanner as part of the CI pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automate-deployments-and-validate-signatures"&gt;Automate deployments and validate signatures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#have-a-security-champion"&gt;Have a security champion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-the-browser-side" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On The Browser Side
&lt;/h2&gt;

&lt;p&gt;There are a couple of threats on the end user's side that you as a developer can help mitigate. They include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Attacks through malicious websites/links in the user's browser.&lt;/li&gt;
&lt;li&gt;Attacks on the user's local network.&lt;/li&gt;
&lt;li&gt;Attacks where someone accesses a shared web browser before or after the user (for example if sensitive information is left in the browser cache then subsequent computer users will be able to retrieve it even if the previous user has logged out).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#use-https-and-only-https-to-protect-your-users-from-network-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use HTTPS and only HTTPS to protect your users from network attacks
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-eNzeRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixaiyyw75i5dq7rg3biy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-eNzeRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixaiyyw75i5dq7rg3biy.png" alt="https"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one you probably already knew. Encrypt &lt;strong&gt;all&lt;/strong&gt; connections between your user's web browser and your web server. Doesn't hurt to also disable some of the older cipher suites and protocols.&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;not&lt;/strong&gt; enough to encrypt the "sensitive" portions of a website. A single unencrypted HTTP request anywhere under the &lt;em&gt;domain&lt;/em&gt; can be intercepted by an attacker on the network, who can then forge a response from the server with malicious content in it.&lt;/p&gt;

&lt;p&gt;Luckily HTTPS is easy these days, you can get both the certificate (LetsEncrypt) and tools for automatic certificate creation/management (CertBot) free of charge.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ssl.com/guide/ssl-best-practices/"&gt;SSL/TLS Best Practices for 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://letsencrypt.org/"&gt;LetsEncrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://certbot.eff.org/"&gt;CertBot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-hsts-and-preloading-to-protect-your-users-from-ssl-stripping-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use HSTS and preloading to protect your users from SSL stripping attacks
&lt;/h3&gt;

&lt;p&gt;HSTS or &lt;code&gt;Strict-Transport-Security&lt;/code&gt; is a header that can be used to tell web browsers that &lt;em&gt;from here on always use an encrypted connection (HTTPS) when connecting to this domain&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This will prevent so-called &lt;em&gt;SSL stripping&lt;/em&gt; attacks where an attacker on the network intercepts the very first HTTP request made by a browser (which is often unencrypted), and forges a reply to that unencrypted HTTP request right away, pretending to be the server and downgrading the connection to intercepted plaintext HTTP from then on.&lt;/p&gt;

&lt;p&gt;One caveat is that HSTS will only protect an application if the user has already successfully visited it before. To overcome this limitation you should submit your site to &lt;a href="https://hstspreload.org"&gt;https://hstspreload.org&lt;/a&gt; so browser vendors can hard code your domain to the HSTS list.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Strict-Transport-Security&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;max-age=63072000; includeSubDomains; preload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#warning" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-exclamation-triangle"&gt;&lt;/i&gt; Warning
&lt;/h4&gt;

&lt;p&gt;Be mindful when implementing HSTS. It &lt;em&gt;will&lt;/em&gt; force encrypted traffic to your website and if you still have plain text your website could break. So start with a small &lt;code&gt;max-age&lt;/code&gt; and ramp it up once you're confident that everything still functions properly. And leave preloading as the last step because it's painful to cancel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hstspreload.org"&gt;hstspreload.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tools.kali.org/information-gathering/sslstrip"&gt;sslstrip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-cookies-with-the-secure-attribute-to-protect-your-user-from-network-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve cookies with the 'Secure' attribute to protect your user from network attacks
&lt;/h3&gt;

&lt;p&gt;Configure your cookies with the &lt;code&gt;Secure&lt;/code&gt; attribute. This will prevent them from being leaked over an (accidental or forced) unencrypted connection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo=bar; ...other options... Secure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies"&gt;Secure Cookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#generate-html-safely-to-avoid-xss-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Generate HTML safely to avoid XSS vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To avoid XSS (Cross-Site Scripting) vulnerabilities, use one of the following: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Completely static websites (e.g. JavaScript SPA + backend API). The most effective way to avoid problems with generating HTML is not to generate HTML at all.&lt;/li&gt;
&lt;li&gt;A template engine. If you have a traditional web application where HTML is generated and parameterized on the backend server, &lt;strong&gt;do not&lt;/strong&gt; craft HTML through string concatenation. Instead use a template engine such as &lt;code&gt;Twig&lt;/code&gt; for PHP, &lt;code&gt;Thymeleaf&lt;/code&gt; for Java, &lt;code&gt;Jinja2&lt;/code&gt; for Python, and so on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you use a template engine, ensure it's configured correctly to automatically encode parameters properly, and don't use any "insecure" functions that bypass the automatic encoding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/twigphp/Twig"&gt;Twig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thymeleaf.org/"&gt;Thymeleaf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jinja2docs.readthedocs.io/en/stable/"&gt;Jinja2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-javascript-safely-to-avoid-xss-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use JavaScript safely to avoid XSS vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To avoid XSS (Cross-Site Scripting) vulnerabilities on the JavaScript side, don't pass any untrusted data into functions or properties that could end up executing code. You have to use common sense here but some of the usual suspects are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;innerHTML&lt;/code&gt;, React's &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onClick&lt;/code&gt;, &lt;code&gt;onMouseEnter&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;href&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;location&lt;/code&gt;, &lt;code&gt;location.href&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://portswigger.net/web-security/cross-site-scripting/dom-based"&gt;DOM-based XSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#sanitize-and-sandbox-untrusted-content-to-avoid-xss-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Sanitize and sandbox untrusted content to avoid XSS vulnerabilities
&lt;/h3&gt;

&lt;p&gt;It's best to just avoid untrusted content. But sometimes you have to retrieve raw HTML from e.g. a remote source and then render it on your website. Or maybe you have to allow your users to write posts with a WYSIWYG editor. There are many use cases.&lt;/p&gt;

&lt;p&gt;To avoid XSS (Cross-Site Scripting) vulnerabilities in these scenarios, sanitize the content first with &lt;code&gt;DOMPurify&lt;/code&gt; and then render it inside a sandboxed frame.&lt;/p&gt;

&lt;p&gt;Even if your WYSIWYG library claims to remove evilness from the HTML, you can break this trust relationship &lt;em&gt;"I trust my WYSIWYG library to sanitize the content"&lt;/em&gt; by re-purifying and sandboxing the content nevertheless. The more trust relationships you break the more secure your application gets.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cure53/DOMPurify"&gt;DOMPurify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox"&gt;Sandboxed Frames&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#implement-an-effective-content-security-policy-to-protect-your-users-from-xss-and-other-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Implement an effective Content Security Policy to protect your users from XSS and other vulnerabilities
&lt;/h3&gt;

&lt;p&gt;A Content Security Policy (CSP) serves as excellent protection against XSS (Cross-Site Scripting) attacks. It also protects against clickjacking attacks among other things.&lt;/p&gt;

&lt;p&gt;So make sure to use it! CSP by default prevents pretty much everything so the fewer things you put in it the better. For example, the following is a good policy to start with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Content-Security-Policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default-src 'self'; form-action 'self'; object-src 'none'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It allows loading scripts, styles, images, fonts, etc. from the web application's origin but nothing else. Most notably it will prevent inline scripts (&lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt;), which makes exploiting XSS vulnerabilities difficult.&lt;/p&gt;

&lt;p&gt;Additionally, the &lt;code&gt;form-action: 'self'&lt;/code&gt; directive prevents creating malicious HTML forms on the website (think "Your session has expired please enter your password here") and submitting them to the attacker's server.&lt;/p&gt;

&lt;p&gt;Whatever you do, do not specify  &lt;strong&gt;script-src: unsafe-inline&lt;/strong&gt; because then your CSP will lose its mojo.&lt;/p&gt;

&lt;p&gt;And finally, if you have concerns about CSP breaking something in production you can first deploy in &lt;code&gt;Report-Only&lt;/code&gt; mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Content-Security-Policy-Report-Only&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default-src 'self'; form-action 'self'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Clickjacking"&gt;Clickjacking Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-cookies-with-the-httponly-attribute-to-protect-them-from-xss-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve cookies with the HttpOnly attribute to protect them from XSS attacks
&lt;/h3&gt;

&lt;p&gt;Configure your cookies with the &lt;code&gt;HttpOnly&lt;/code&gt; attribute. This will prevent them from being accessed by JavaScript code, which in turn makes them harder for an attacker to steal in the event of a successful XSS (Cross-Site Scripting) attack. Of course for the cookies that need to be accessed by JavaScript, you cannot do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo=bar; ...other options... HttpOnly&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies"&gt;HttpOnly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-downloads-with-a-proper-contentdisposition-header-to-avoid-xss-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve downloads with a proper Content-Disposition header to avoid XSS vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To avoid XSS (Cross-Site Scripting) vulnerabilities when serving downloads to your users, send them with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition"&gt;Content-Disposition&lt;/a&gt; header that indicates an attachment. This way the file won't render in the end user's browser directly, which could result in an XSS vulnerability in the case of e.g. HTML or SVG files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Content-Disposition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;attachment; filename="document.pdf"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you &lt;em&gt;want&lt;/em&gt; some specific files to open in the browser (like perhaps PDF documents for usability reasons), and you know that it's safe to do so, you can omit the header or change &lt;code&gt;attachment&lt;/code&gt; to &lt;code&gt;inline&lt;/code&gt; for that particular file extension/extensions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/xss-attack-and-prevention/"&gt;XSS Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition"&gt;Content-Disposition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-api-responses-with-a-proper-contentdisposition-header-to-avoid-reflected-download-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve API responses with a proper Content-Disposition header to avoid reflected download vulnerabilities
&lt;/h3&gt;

&lt;p&gt;There is an attack called reflected file download (RFD) which works by crafting an URL that downloads as a malicious file extension from your API, reflecting a malicious payload inside it.&lt;/p&gt;

&lt;p&gt;You can prevent this attack by returning a &lt;code&gt;Content-Disposition&lt;/code&gt; header with a safe &lt;code&gt;filename&lt;/code&gt; in your API HTTP responses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Content-Disposition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;attachment; filename="api.json"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@Johne_Jacob/rfd-reflected-file-download-what-how-6d0e6fdbe331"&gt;Reflected File Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition"&gt;Content-Disposition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-your-platforms-anticsrf-mechanism-to-avoid-csrf-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use your platform's anti-CSRF mechanism to avoid CSRF vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To protect against &lt;a href="https://owasp.org/www-community/attacks/csrf"&gt;Cross-Site Request Forgery&lt;/a&gt; (CSRF) vulnerabilities, ensure that your platform's anti-CSRF mechanism is enabled and working as intended.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/csrf-attack-and-prevention/"&gt;CSRF Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#validate-the-oauthoidc-state-parameter-to-avoid-csrf-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Validate the OAuth/OIDC state parameter to avoid CSRF vulnerabilities
&lt;/h3&gt;

&lt;p&gt;There is a kind of CSRF attack related to OAuth/OIDC where the attacker unwittingly logs the user in with the attacker's account. If you are using OAuth/OIDC, avoid this by ensuring that you are using a properly configured and reliable software library for handling the authentication flow so that the &lt;code&gt;state&lt;/code&gt; parameter gets validated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.ietf.org/html/rfc6819#section-4.4.2.5"&gt;state CSRF in OAuth threat model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-http-verbs-properly-to-avoid-csrf-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use HTTP verbs properly to avoid CSRF vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Never use anything except for &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; for making &lt;em&gt;any&lt;/em&gt; changes. &lt;code&gt;GET&lt;/code&gt; requests for example are usually not covered by anti-CSRF mechanisms.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/csrf-attack-and-prevention/"&gt;CSRF Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-cookies-with-the-samesite-attribute-to-protect-your-users-from-csrf-vulnerabilities-and-optionally-defend-xss-as-well" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve cookies with the SameSite attribute to protect your users from CSRF vulnerabilities and optionally defend XSS as well
&lt;/h3&gt;

&lt;p&gt;Configure your cookies with the &lt;code&gt;SameSite&lt;/code&gt; attribute. This will prevent most CSRF (Cross-Site Request Forgery) vulnerabilities, where a malicious website submits e.g. a form on behalf of your unwitting user, from being successfully exploited by an attacker. There are two modes, &lt;code&gt;Lax&lt;/code&gt; and &lt;code&gt;Strict&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Lax&lt;/code&gt; mode (with the exception of Lax+Post mitigation, see link below) is just fine for preventing most CSRF attacks, except GET-based CSRF vulnerabilities where you make the mistake of making changes (e.g. modifying some database record) in a GET request handler. The &lt;code&gt;Strict&lt;/code&gt; mode prevents that sort of blunders from being exploited as well.&lt;/p&gt;

&lt;p&gt;However the &lt;code&gt;Strict&lt;/code&gt; mode has another powerful side effect, it makes reflected XSS (Cross-Site Scripting) vulnerabilities practically impossible to exploit as well.&lt;/p&gt;

&lt;p&gt;With that said, the &lt;code&gt;Strict&lt;/code&gt; mode is not well suited for most applications because it breaks authenticated links, that is, if your user is logged in and opens a link on another website to the application then in the tab/window that opens the user will not be logged in (because the session cookie was not sent along with the request due to the strict mode).&lt;/p&gt;

&lt;p&gt;But at least implement &lt;code&gt;SameSite&lt;/code&gt; in &lt;code&gt;Lax&lt;/code&gt; mode, there's no harm in doing that and it serves as a fantastic safeguard in case a CSRF vulnerability creeps into your codebase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo=bar; ...other options... SameSite=Lax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...or:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo=bar; ...other options... SameSite=Strict&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/csrf-attack-and-prevention/"&gt;CSRF Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite"&gt;SameSite cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chromium.org/updates/same-site/faq"&gt;Lax + Post mitigation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#create-a-fresh-session-id-on-login-to-protect-against-session-fixation-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Create a fresh session ID on login to protect against session fixation attacks
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An attacker sneaks a cookie, say, &lt;code&gt;JSESSIONID=ABC123&lt;/code&gt; into your user's browser. There are many ways the attacker can go about this.&lt;/li&gt;
&lt;li&gt;Your user logs in with their credentials, submitting the attacker's chosen &lt;code&gt;JSESSIONID=ABC123&lt;/code&gt; cookie in the login request.&lt;/li&gt;
&lt;li&gt;Your application authenticates the cookie, and the user will be logged on from that point onwards.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The attacker who also has the cookie, is also logged on as the user from that point onwards&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So to prevent this, create a fresh, authenticated session ID and return that to the user, instead of authenticating the existing cookie which might have been compromised.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Session_fixation"&gt;Session Fixation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#name-your-cookies-right-to-protect-against-session-fixation-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Name your cookies right to protect against session fixation attacks
&lt;/h3&gt;

&lt;p&gt;This is not very widely known, but when it comes to cookies, name matters! Name your cookies &lt;code&gt;__Host-Something&lt;/code&gt; and web browsers will...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not allow for the cookie to be set over an unencrypted connection which protects against session fixation attacks and other threats related to an attacker forcing a cookie into the user's browser.&lt;/li&gt;
&lt;li&gt;Not allow for subdomains to overwrite the cookie, which protects against similar attacks from compromised/malicious subdomains.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;__Host-foo=bar ...options...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#cookie_prefixes"&gt;Cookie Prefixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Session_fixation"&gt;Session Fixation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-proper-cachecontrol-headers-to-protect-your-users-data-from-subsequent-computer-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Serve proper Cache-Control headers to protect your user's data from subsequent computer users
&lt;/h3&gt;

&lt;p&gt;By default web browsers cache everything they see to speed up page loads and save network bandwidth.&lt;/p&gt;

&lt;p&gt;Caching is a synonym for &lt;em&gt;storing visited websites and downloaded files on disk unencrypted until someone manually deletes them&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Your application users should be able to trust that once they hit "log out" then subsequent computer users will no longer be able to access their information (think shared library computers, friend's pc, etc).&lt;/p&gt;

&lt;p&gt;For this reason, there is a header called &lt;code&gt;Cache-Control&lt;/code&gt; which you should return appropriately in all HTTP responses that contain non-public/non-static content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Cache-Control&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;no-store, max-age=0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control"&gt;Cache-Control&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#serve-a-clearsitedata-header-upon-log-out-to-protect-your-users-data-from-subsequent-computer-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt;  Serve a Clear-Site-Data header upon log out to protect your user's data from subsequent computer users
&lt;/h3&gt;

&lt;p&gt;Another useful header for ensuring that user data is cleared upon logout is the new &lt;code&gt;Clear-Site-Data&lt;/code&gt; header. You can send it in an HTTP response when the user logs out, and the browser will clear the cache, cookies, storage, and execution contexts (JavaScript variables, etc. probably by refreshing all relevant tabs, this has not yet been implemented at the time of this writing) for the domain. Most browsers support it, Safari notably still doesn't.&lt;/p&gt;

&lt;p&gt;You can send it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Clear-Site-Data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Clear-Site-Data"&gt;Clear-Site-Data&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#log-your-users-out-properly-to-protect-their-data-from-subsequent-computer-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Log your users out properly to protect their data from subsequent computer users
&lt;/h3&gt;

&lt;p&gt;Ensure that logging out invalidates the access token/session identifier so that when it later leaks to an attacker from browsing history/cache/memory/etc. it will no longer be usable.&lt;/p&gt;

&lt;p&gt;Additionally, if there is an SSO then don't forget to call the single logout endpoint properly, otherwise logging out would be in vain since merely clicking the "log in" button would automatically log the user back in as the SSO session is still active.&lt;/p&gt;

&lt;p&gt;Finally clear any cookies, HTML5 storage, etc. that you might have stored the user's information in. The &lt;code&gt;Clear-Site-Data&lt;/code&gt; mentioned above is not yet supported by Safari for example so you will have to clear the data manually as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-sessionstorage-for-javascript-secrets-to-protect-your-users-data-from-subsequent-computer-users" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use SessionStorage for JavaScript secrets to protect your user's data from subsequent computer users
&lt;/h3&gt;

&lt;p&gt;It's like LocalStorage but unique for each tab and clears after the browser/tab is closed. So there's a chance of user data leaking to the next computer user.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
If you want to have your user be authenticated in multiple tabs of your application without having to log in again, you will have to use events to sync the sessionStorage between the tabs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"&gt;Session Storage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dont-transmit-sensitive-data-in-the-url-because-urls-are-not-designed-to-be-secret" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't transmit sensitive data in the URL because URLs are not designed to be secret
&lt;/h3&gt;

&lt;p&gt;URL addresses are not designed to be secret. They are for example displayed on the screen, saved to browsing history, leaked with referrer-headers, and saved on server logs. So don't put secrets in there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-referrer-policy-to-prevent-url-addresses-from-leaking-to-other-websites" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt;  Use a referrer policy to prevent URL addresses from leaking to other websites
&lt;/h3&gt;

&lt;p&gt;By default when you link to a website from your application, and a user clicks the link, web browsers will send a &lt;code&gt;Referrer&lt;/code&gt; header along with the request to tell the website which website linked to it. This header includes the entire URL which can be a privacy issue at the least.&lt;/p&gt;

&lt;p&gt;You can disable this behavior by specifying a &lt;code&gt;Referrer-Policy&lt;/code&gt; header in your HTTP responses:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Referrer-Policy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;no-referrer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"&gt;Referrer-Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-a-unique-domain-name-for-your-application-to-protect-it-from-other-applications-under-the-same-origin-and-vice-versa" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use a unique domain name for your application to protect it from other applications under the same origin (and vice versa)
&lt;/h3&gt;

&lt;p&gt;It is dangerous to host applications like this: &lt;code&gt;https://www.example.com/app1/&lt;/code&gt; and &lt;code&gt;https://www.example.com/app2/&lt;/code&gt;. This is because browsers consider both of them to be of the same &lt;code&gt;origin&lt;/code&gt; (same host, port, and scheme), which means that they will have full access to each other and as such any vulnerabilities/malicious content affecting app1 would then also put app2 into danger.&lt;/p&gt;

&lt;p&gt;For this reason, give each application an origin of their own. So the solution could be &lt;code&gt;https://app1.example.com/&lt;/code&gt; and &lt;code&gt;https://app2.example.com/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
 Subdomains that share a parent can still &lt;em&gt;set&lt;/em&gt; cookies for the entire domain. For example, &lt;code&gt;app1.example.com&lt;/code&gt; can set a cookie on &lt;code&gt;example.com&lt;/code&gt; which will then also be sent to &lt;code&gt;app2.example.com&lt;/code&gt;. This can make certain session fixation vulnerabilities possible.&lt;/p&gt;

&lt;p&gt;And if you are now wondering if all applications under &lt;em&gt;.herokuapp.com are vulnerable, the answer is no because of the public suffix list. Also, cookies can be protected from getting overwritten by subdomains by naming your cookies `__Host-&lt;/em&gt;`. This mechanism is described later in this article.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;Same Origin Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#cookie_prefixes"&gt;Cookie Prefixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Session_fixation"&gt;Session Fixation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://publicsuffix.org/learn/"&gt;Public Suffix List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#dont-use-cors-unless-you-have-to-and-if-you-have-to-be-careful-with-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't use CORS unless you have to, and if you have to, be careful with it
&lt;/h3&gt;

&lt;p&gt;The web browser's security model is largely based on the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;Same Origin Policy&lt;/a&gt; which prevents &lt;code&gt;evil.example.com&lt;/code&gt; from reading your emails but still allows you to use jQuery from &lt;code&gt;code.jquery.com&lt;/code&gt;. CORS or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross Origin Resource Sharing&lt;/a&gt; is a means by which you can allow another website to violate that policy.&lt;/p&gt;

&lt;p&gt;So if you decide that you need it, make sure you know what you are doing.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#validate-the-origin" class="anchor"&gt;
  &lt;/a&gt;
  Validate the origin
&lt;/h4&gt;

&lt;p&gt;If you have &lt;code&gt;api.example.com&lt;/code&gt; that needs to be accessed by GET requests from &lt;code&gt;www.example.com&lt;/code&gt; then you can specify the following header on &lt;code&gt;api.example.com&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://www.example.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have a public API (let's say a calculator that you want the entire Internet to use from client-side JavaScript) then you can specify a wildcard origin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have multiple domains that you want to allow but not all (say you want to allow only Google and Facebook to access your API) then you will have to read the &lt;code&gt;Origin&lt;/code&gt; header from the request, compare it to a list of allowed domains and then return a header as appropriate. It is recommended to use a well-vetted library for this instead of messing with the headers manually because a lot could go wrong.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#be-mindful-about-the-allow-credentials-option" class="anchor"&gt;
  &lt;/a&gt;
  Be mindful about the "allow credentials" option
&lt;/h4&gt;

&lt;p&gt;CORS by default does not allow &lt;em&gt;credentialed&lt;/em&gt; requests, that is, requests that carry the user's (session) cookies. But this can be allowed by the webserver by specifying headers such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://www.example.com&lt;/span&gt;
&lt;span class="na"&gt;Access-Control-Allow-Credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is dangerous as it would allow &lt;code&gt;https://www.example.com&lt;/code&gt; to fully access the website that specified the header just as the logged-in user would. So if you have to use it be very careful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#validate-the-method" class="anchor"&gt;
  &lt;/a&gt;
  Validate the method
&lt;/h4&gt;

&lt;p&gt;It's a good practice to minimize the attack surface and only allow the HTTP methods that you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GET&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note" class="anchor"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't need CORS then just don't use it, by default it's not enabled.&lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross-Origin Resource Sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"&gt;Same Origin Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-websockets-properly-to-avoid-csrf-and-other-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use WebSockets properly to avoid CSRF and other vulnerabilities
&lt;/h3&gt;

&lt;p&gt;WebSockets are still pretty new, a bit scarcely documented and there are dangers involved when using them. So read the following carefully.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-encrypt-the-connection" class="anchor"&gt;
  &lt;/a&gt;
  1. Encrypt the connection
&lt;/h4&gt;

&lt;p&gt;Just like you should use &lt;code&gt;https://&lt;/code&gt; instead of &lt;code&gt;http://&lt;/code&gt;, use &lt;code&gt;wss://&lt;/code&gt; instead of &lt;code&gt;ws:///&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HSTS also affects WebSockets and will automatically upgrade unencrypted WebSocket connections to &lt;code&gt;wss://&lt;/code&gt;! Hail HSTS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#2-authenticate-the-connection" class="anchor"&gt;
  &lt;/a&gt;
  2. Authenticate the connection
&lt;/h4&gt;

&lt;p&gt;If you use cookie-based authentication and the WebSocket server is on the same domain as the application, you can keep using the existing session for the WebSocket connection as well. &lt;strong&gt;Just heed the next section about origin validation or you will be screwed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If not then you could create a ticket in the application, that is, a single-use, time-limited authentication token bound to the user's IP address that can be used to authenticate the WebSocket connection.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-verify-the-origin-of-the-connection" class="anchor"&gt;
  &lt;/a&gt;
  3. Verify the origin of the connection
&lt;/h4&gt;

&lt;p&gt;A crucial thing to understand about WebSockets is that they are not bound by the Same Origin Policy. This means that any website out there can open a WebSocket connection to your application, and if you use cookie-based authentication, access the logged-in user's information.&lt;/p&gt;

&lt;p&gt;For this reason, you must verify the origin of the connection in the WebSocket handshake. You can do this by validating the &lt;code&gt;Origin&lt;/code&gt; request header.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want double security, throw in a CSRF token as a URL parameter but create a single-use unique token for the job, do not use the CSRF token that you use to secure the rest of the application (because sending something in the URL can leak in many places).&lt;/p&gt;

&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://datatracker.ietf.org/doc/rfc6455/?include_text=1"&gt;WebSockets Specification (check section 10)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-u2f-tokens-or-client-certificates-to-protect-your-critical-users-from-phishing-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use U2F tokens or client certificates to protect your critical users from phishing attacks
&lt;/h3&gt;

&lt;p&gt;If your threat model includes phishing attacks, that is, &lt;strong&gt;"what if an attacker creates a fake website that steals the username, password and the MFA code from our administrator/CEO/etc"&lt;/strong&gt;, then you should protect against such attacks with &lt;a href="https://www.yubico.com/authentication-standards/fido-u2f/"&gt;U2F tokens&lt;/a&gt; or client certificates, neither of which can be forged even if the attacker has the username, the password, and the MFA code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
Enforcing phishing protection is usually overkill for regular users, although there is nothing wrong with offering the &lt;em&gt;possibility&lt;/em&gt; for the end-users to use e.g. their YubiKeys with the service if they so choose. What you can always do though is show the users a general heads up about phishing attacks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;br&gt;
&lt;a href="https://www.yubico.com/blog/creating-unphishable-security-key/"&gt;Creating the Unphishable Security Key&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-application" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#validate-input-properly-to-protect-your-application-from-so-many-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Validate input properly to protect your application from... so many vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Validate all input as strictly as you can. This will make many vulnerabilities difficult to find and exploit for attackers. Reject invalid input, do not sanitize it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use restrictive data types. DateTime for dates, Integer for numbers, and so on. Use Enums for lists of possible values. Avoid using String when you can.&lt;/li&gt;
&lt;li&gt;When you do have to use String, put a length limit to it if you can.&lt;/li&gt;
&lt;li&gt;When you do have to use String, restrict the character set to the minimum.&lt;/li&gt;
&lt;li&gt;If you process JSON, use a JSON schema.&lt;/li&gt;
&lt;li&gt;If you process XML, use an XML schema.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#catch-exceptions-gracefully-to-avoid-leaking-technical-details" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Catch exceptions gracefully to avoid leaking technical details
&lt;/h3&gt;

&lt;p&gt;Never show stack traces or similar debugging information to end-users. Have a global exception handler ready that catches otherwise unhandled exceptions and displays a generic error message to the browser. This will make it more difficult for an attacker to find and exploit vulnerabilities in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-do-authentication-yourself" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't do authentication yourself
&lt;/h3&gt;

&lt;p&gt;There are just too many things that can go wrong when authenticating users. Defending against different kinds of password guessing and user enumeration attacks, managing password resets, storing the credentials, etc. is not easy. It's almost like with cryptography: mere mortals shouldn't do it by themselves.&lt;/p&gt;

&lt;p&gt;Instead use an identity provider such as &lt;code&gt;auth0&lt;/code&gt; for authenticating the users and implement the protocol (usually &lt;code&gt;OpenID connect&lt;/code&gt;) in your application using widely used and secure software components. If you don't want to use a third party IDP like auth0 then you can self-host something like &lt;code&gt;KeyCloak&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://auth0.com/"&gt;auth0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openid.net/connect/"&gt;OpenID connect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.keycloak.org/"&gt;KeyCloak&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#authenticate-everything-to-reduce-the-attack-surface" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Authenticate everything to reduce the attack surface
&lt;/h3&gt;

&lt;p&gt;Configure your application so that &lt;strong&gt;everything&lt;/strong&gt; is authenticated by default. Then create the necessary exceptions for static assets and perhaps some endpoints like a landing page or a "signed out" page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-mfa-in-your-application-to-break-the-trust-relationship-to-the-identity-provider" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use MFA in your application to break the trust relationship to the identity provider
&lt;/h3&gt;

&lt;p&gt;If you want to include &lt;em&gt;"what if someone fully compromises the IDP (Identity Provider)?"&lt;/em&gt; into your threat model, use some form of MFA (Multi-Factor Authentication) &lt;em&gt;in your application&lt;/em&gt;. This way even if the IDP gets hacked and the attacker can authenticate as anyone there, the attacker will still not know the user's MFA secrets for the application itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-strict-access-controls-to-prevent-unauthorized-access-to-data-or-functionality" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use strict access controls to prevent unauthorized access to data or functionality
&lt;/h3&gt;

&lt;p&gt;Access control is not always easy but it can be done right. Just be centralized about it so that you won't end up with an IDOR (Insecure Direct Object Reference) vulnerability because you forgot to check the user's access in some individual controller function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prevent access to all controller methods (or equivalent) by default.&lt;/li&gt;
&lt;li&gt;Allow access to individual controllers by role.&lt;/li&gt;
&lt;li&gt;Use method level security to also restrict access to e.g. service functions.&lt;/li&gt;
&lt;li&gt;Use a centralized permission evaluator to prevent unauthorized access to individual records.&lt;/li&gt;
&lt;li&gt;Use a centralized permission evaluator to filter objects returned to the client.&lt;/li&gt;
&lt;li&gt;Use an architecture with e.g. a frontend web app and a backend API then implement the same access controls in every app/API, not just the Internet-facing parts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To clarify the permission evaluator approach a little bit, here's the crux of it: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your data records extend a class that has some property that you use for access control. For example &lt;code&gt;int ownerId&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Your authenticated user has an ID.&lt;/li&gt;
&lt;li&gt;You have a permission evaluator class, which knows that users can have access to objects if the object's &lt;code&gt;ownerId&lt;/code&gt; equals the user's &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You then plug that permission evaluator into your application platform's access control system, such as Spring Security's PreAuthorize, PostAuthorize, PreFilter, PostFilter, etc.&lt;/li&gt;
&lt;li&gt;If you need more complex access control than &lt;code&gt;ownerId&lt;/code&gt; or similar, then you can setup (for example) a full ACL system.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html"&gt;Insecure Direct Object References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/spring-deny-access"&gt;Deny access by default (Spring Security))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/spring-security-method-security#3-using-preauthorize-and-postauthorize-annotations"&gt;PreAuthorize &amp;amp; PostAuthorize (Spring Security)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.baeldung.com/spring-security-prefilter-postfilter#writing-security-rules"&gt;PreFilter &amp;amp; PostFilter (Spring Security)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-proper-tools-and-techniques-to-avoid-injection-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use proper tools and techniques to avoid injection vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Multiple vulnerabilities fall under the category "injection" and they're all alike. These include SQL injection, HTML injection (a form of XSS), XML injection, XPath injection, LDAP injection, command injection, template injection, SMTP injection, response header injection... there are so many "different" vulnerabilities that are in reality the same issue with the same remedy: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Issue: Using string concatenation/formatting to construct a parameterized message of protocol X.&lt;/li&gt;
&lt;li&gt;Solution: Use a proper, well (security) tested software library for the job and use it properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We won't go through each of the injection vulnerabilities in this article since the list would be infinite, so just remember this rule whatever protocol you're constructing. We'll cover some of the more prevalent/interesting ones though, such as SQL injection which is next on our list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#construct-database-queries-safely-to-avoid-sql-injection-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Construct database queries safely to avoid SQL injection vulnerabilities
&lt;/h3&gt;

&lt;p&gt;To avoid SQL Injection vulnerabilities, never construct SQL queries by string concatenation. Use an ORM (Object Relational Mapper) if you can, this will make development quicker and the application more secure.&lt;/p&gt;

&lt;p&gt;If you want to have granular control over your queries, use a low-level ORM (often referred to as a query builder).&lt;/p&gt;

&lt;p&gt;If you cannot for any reason use an ORM then go for prepared statements, but be careful as they are far more prone to human error than an ORM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#warning" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-exclamation-triangle"&gt;&lt;/i&gt; Warning
&lt;/h4&gt;

&lt;p&gt;ORM frameworks are not a silver bullet in two senses.&lt;/p&gt;

&lt;p&gt;First is that they still have functionality for supporting raw SQL queries/parts of queries. Just don't use those features and you're golden.&lt;/p&gt;

&lt;p&gt;The second is that ORM frameworks have vulnerabilities from time to time, just like any other software package. So follow other good practices: validate all input, use a WAF and keep your packages up to date, and you're golden.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.appsecmonkey.com/blog/sql-injection-attack-and-prevention"&gt;SQL Injection Attacks &amp;amp; Prevention&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#if-you-must-run-os-commands-do-it-right-to-avoid-command-injection-and-related-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; If you must run OS commands, do it right to avoid command injection and related vulnerabilities
&lt;/h3&gt;

&lt;p&gt;If you can avoid it, don't execute OS commands at all. It's always a bit dodgy.&lt;/p&gt;

&lt;p&gt;If you have to do it, you can avoid command injection vulnerabilities and related issues by following these guidelines: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a proper library/function to construct and parameterize the command. The parameters should be of the &lt;code&gt;list&lt;/code&gt; datatype. Never create the command as a single string.&lt;/li&gt;
&lt;li&gt;Do not use a shell to invoke the command.&lt;/li&gt;
&lt;li&gt;Predetermine the parameters that you feed into the command. Using &lt;code&gt;curl&lt;/code&gt; as an example, by allowing the user to specify the &lt;code&gt;-o&lt;/code&gt; parameter you would allow the attacker to write to the local filesystem.&lt;/li&gt;
&lt;li&gt;Understand what the program does and validate the parameters appropriately. Again using &lt;code&gt;curl&lt;/code&gt; as the example, you might want to allow the user to retrieve websites such as &lt;code&gt;https://www.appsecmonkey.com/&lt;/code&gt; but what if the attacker retrieves &lt;code&gt;file:///etc/passwd&lt;/code&gt; instead?&lt;/li&gt;
&lt;li&gt;Think through. Even if you validate that the parameter starts with &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;, would you like for the attacker to access &lt;code&gt;http://192.168.0.1/internal_sensitive_service/admin&lt;/code&gt; or do a port scan of the internal network?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Really&lt;/strong&gt; think through. Even if you validate that the parameter is a valid DNS hostname that doesn't contain e.g. &lt;code&gt;yourcompany.local&lt;/code&gt;, is there anything preventing the attacker from creating a public DNS record that points &lt;code&gt;www.example.com&lt;/code&gt; to &lt;code&gt;192.168.0.1&lt;/code&gt;? The answer is... no. It can be done.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Command_Injection"&gt;Command Injection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#avoid-xml-vulnerabilities-by-configuring-your-parsers-properly" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Avoid XML vulnerabilities by configuring your parsers properly
&lt;/h3&gt;

&lt;p&gt;XML is a dangerous markup language that contains features for accessing system resources, and some implementations of XSLT even support embedded code. For this reason, you must be extremely cautious when processing it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoid accepting XML/XSLT from untrusted sources if you can.&lt;/li&gt;
&lt;li&gt;If you parameterize XML, XSLT, or XPath expressions, use a proper software component for doing so. This is to avoid injection vulnerabilities. Don't use string concatenation/formatting/etc.&lt;/li&gt;
&lt;li&gt;Use a well known and thoroughly (security) tested software component for parsing XML/XSLT. This is crucial. &lt;strong&gt;Do not&lt;/strong&gt; use a bad library or your code for handling XML. Furthermore, under any circumstances do not attempt to create a custom implementation for handling XML signatures (such as SAML), because there are so many things that can go wrong.&lt;/li&gt;
&lt;li&gt;Configure your parser properly. Disable &lt;code&gt;document&lt;/code&gt; for XSLT. Disable &lt;code&gt;xinclude&lt;/code&gt;. Disable document type definitions. Disable external entities. Enable DOS protection. The specific options will vary on the implementation, do some research on your chosen parser.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bugcrowd.com/blog/advice-from-a-bug-hunter-xxe/"&gt;Hunting XXE For Fun And Profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ws-attacks.org/Web_Service_Attacks_By_Category"&gt;WS Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#avoid-url-injection-vulnerabilities-by-using-proper-class-for-url-construction" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Avoid URL injection vulnerabilities by using proper class for URL construction
&lt;/h3&gt;

&lt;p&gt;URL injections happen when you have something like this: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;python&lt;br&gt;
flavour = request.getParam("flavour");&lt;br&gt;
url = "https:/api.local/pizzas/" + flavour + "/";&lt;br&gt;
return get(url).json();&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And someone enters a value like this: &lt;br&gt;
&lt;code&gt;&lt;br&gt;
../admin/all-the-sensitive-things/&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This results in the API call returning a response for &lt;code&gt;https://api.local/admin/all-the-sensitive-things/&lt;/code&gt; instead of the pizza endpoint like the developer intended.&lt;/p&gt;

&lt;p&gt;And the solution, as always, is to use a proper URL construction library to parameterize the URL so that the values get properly encoded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-path-traversal-vulnerabilities-by-using-a-proper-class-to-construct-the-paths" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Avoid path traversal vulnerabilities by using a proper class to construct the paths
&lt;/h3&gt;

&lt;p&gt;Just like URL addresses, file paths can also end up pointing to unwanted locations if an attacker manages to sneak a &lt;code&gt;../../../&lt;/code&gt; sequence somewhere in the path. To avoid this, create a class that constructs the path safely and validates that the final path is in the intended directory. Avoid using untrusted data in the file path, or better yet, avoid using the filesystem altogether and prefer e.g. cloud storage instead.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-community/attacks/Path_Traversal"&gt;Path Traversal Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#dont-use-the-filesystem-for-untrusted-content-eg-uploads-if-you-can-avoid-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't use the filesystem for untrusted content (e.g. uploads) if you can avoid it
&lt;/h3&gt;

&lt;p&gt;There is an infinite list of things that can go wrong when allowing your users to write the server's filesystem. Use cloud storage instead, or if that doesn't work for you, use binary blobs in a database.&lt;/p&gt;

&lt;p&gt;If you absolutely must access the disk, these guidelines could help you be safe: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Be very careful not to allow any untrusted data to affect any part of the internal file path.&lt;/li&gt;
&lt;li&gt;Keep the files in an isolated directory far from e.g. the webroot.&lt;/li&gt;
&lt;li&gt;Validate that the file contents match the expected format before writing to disk.&lt;/li&gt;
&lt;li&gt;Set your filesystem permissions properly to prevent writing to unwanted locations.&lt;/li&gt;
&lt;li&gt;Don't extract compressed (e.g. ZIP) archives, as they can contain any files including symlinks and paths to anywhere on the system.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#dont-execute-dynamic-code-to-avoid-remote-code-execution-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Don't execute dynamic code to avoid remote code execution vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Don't use &lt;code&gt;eval&lt;/code&gt; or equivalent functions. Find a way to achieve your goals without them. Otherwise, there will be a risk that untrusted data reaches the function call and someone will execute arbitrary code on your server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-serialization-carefully-to-avoid-deserialization-vulnerabilities" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use serialization carefully to avoid deserialization vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Deserialization of untrusted data is a dangerous operation and can easily lead to remote code execution.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Don't use serialization if you can avoid it.&lt;/li&gt;
&lt;li&gt;If you can serialize the objects on the server-side, then sign them digitally. And when it's time to deserialize them again, validate the signature before proceeding with deserialization.&lt;/li&gt;
&lt;li&gt;Use a well-known software component for the job and keep it rigorously up to date. Vulnerabilities are discovered in many deserialization libraries all the time. &lt;a href="https://github.com/google/gson"&gt;GSon&lt;/a&gt; is not a bad choice.&lt;/li&gt;
&lt;li&gt;Use a simple text format such as JSON instead of binary formats. Also, problematic formats like XML should be avoided because then you have XML vulnerabilities to worry about in addition to deserialization ones.&lt;/li&gt;
&lt;li&gt;Validate the serialized object before processing it. For example in the case of JSON, validate the JSON document against a strict JSON schema before proceeding with deserialization.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"&gt;OWASP deserialization cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-infrastructure" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Infrastructure
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#use-a-waf" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use a WAF
&lt;/h3&gt;

&lt;p&gt;Put a web application firewall product in front of your application. This will make many vulnerabilities significantly harder to find and exploit. ModSecurity is a good open-source option.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://modsecurity.org/rules.html"&gt;ModSecurity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#configure-your-web-server-carefully-to-avoid-http-desync-attacks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Configure your web server carefully to avoid HTTP desync attacks
&lt;/h3&gt;

&lt;p&gt;There is an attack called "HTTP Desync" or "Request Smuggling", which could allow for an attacker to do all sorts of nasty things, such as steal HTTP requests of random users collecting to the web application, if the following conditions are true: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is a frontend web server, such as a load balancer/any reverse proxy, that accepts requests with &lt;em&gt;both&lt;/em&gt;, &lt;code&gt;Content-Length&lt;/code&gt; and &lt;code&gt;Transfer-Encoding&lt;/code&gt; headers, and passes them on without normalizing the request.&lt;/li&gt;
&lt;li&gt;The next web server on the line, such as an application web server, uses, or can be tricked to use, a different mechanism than the frontend webserver to determine where the HTTP request begins and where it ends, e.g. the frontend would use &lt;code&gt;Content-Length&lt;/code&gt; whereas the application server would use &lt;code&gt;Transfer-Encoding&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The front-end web server reuses the connection to the backend web server.&lt;/li&gt;
&lt;li&gt;The frontend web server uses HTTP/1 (instead of HTTP/2) in the backend server connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So how to protect yourself? Depends on the product but in general: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Consult the documentation/vendor of the e.g. reverse proxy products that you are using and ensure that they are actively defending against the attack.&lt;/li&gt;
&lt;li&gt;Configure the front-end webserver to use HTTP/2 in backend connections.&lt;/li&gt;
&lt;li&gt;Configure the front-end webserver to prevent aggregation of HTTP requests from separate client-side TCP streams into the same server-side connection.&lt;/li&gt;
&lt;li&gt;Use a WAF (Web Application Firewall) and ensure it has a module for thwarting request smuggling attempts&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn"&gt;HTTP Desync Attacks: Request Smuggling Reborn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-containers" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use containers
&lt;/h3&gt;

&lt;p&gt;Run your application in isolation so that in the event of a breach the attacker will not have unnecessary access to unwanted file-, system-, or network resources. So preferably use something like Kubernetes or a cloud serverless stack for deploying your application. If you are for any reason forced to use a bare server then manually run e.g. Docker to constrain the application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/101-tutorial"&gt;Docker 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-selinuxapparmor" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use SELinux/AppArmor
&lt;/h3&gt;

&lt;p&gt;Even if you run your application in a container, it's worthwhile to further constrain it with an SELinux or AppArmor policy. This will make exploiting container escape vulnerabilities very difficult, among other benefits.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mairin/selinux-coloring-book"&gt;SELinux Coloring Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.ubuntu.com/AppArmor"&gt;AppArmor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-service-accounts-with-minimum-privileges" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Use service accounts with minimum privileges
&lt;/h3&gt;

&lt;p&gt;This will usually limit damage when something goes wrong. Again an exhaustive list is impossible, but here are a couple of examples to get the idea: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even if you use Docker, and even if you use SELinux/AppArmor, do not run the application as root. This will make container escape/kernel vulnerabilities and other nasty tricks harder for an attacker to exploit. Create a specific user for the application with minimal permissions.&lt;/li&gt;
&lt;li&gt;If you have databases, ensure the application's database user has minimum access to tables, columns and dbms functionality.&lt;/li&gt;
&lt;li&gt;If you integrate with API's, ensure the application has minimum permissions to access the API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#restrict-egress-network-connections" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Restrict egress network connections
&lt;/h3&gt;

&lt;p&gt;An attacker often needs some kind of reverse communication channel to establish a command &amp;amp; control channel and/or to exfiltrate data. Also, several vulnerabilities require an egress network connection to be discovered and exploited.&lt;/p&gt;

&lt;p&gt;For this reason, you should not allow arbitrary connections from your application to the outside world, and this includes DNS. If you can run &lt;code&gt;nslookup www.example.com&lt;/code&gt; successfully from your server then you haven't restricted egress properly.&lt;/p&gt;

&lt;p&gt;How you would go about this depends on your infrastructure.&lt;/p&gt;

&lt;p&gt;Egress TCP/UDP/ICMP can usually be disabled with one or more of the following:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A gateway level firewall if you have one.&lt;/li&gt;
&lt;li&gt;Local firewall (e.g. iptables or Windows Firewall) if you have a old-fashioned server.&lt;/li&gt;
&lt;li&gt;iptables if you run Docker on your server.&lt;/li&gt;
&lt;li&gt;NetworkPolicy definitions if you use Kubernetes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DNS is a bit more tricky since often times it is required to allow it for some hosts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you can get away with a local hosts-file then perfect, this is a simple solution and you can disable DNS completely (with any of the techniques in the previous list).&lt;/li&gt;
&lt;li&gt;If not, then you have to configure a private zone in your upstream DNS and limit access on network level to that DNS server only. The zone should only resolve a predetermined list of hostnames.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#keep-track-of-your-dns-records-to-prevent-subdomain-takeovers" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Keep track of your DNS records to prevent subdomain takeovers
&lt;/h3&gt;

&lt;p&gt;Subdomain takeovers happen like this: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You have a domain &lt;code&gt;example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You buy another domain &lt;code&gt;www.my-cool-campaign.com&lt;/code&gt; for a campaign and you create a &lt;code&gt;CNAME&lt;/code&gt; from &lt;code&gt;campaign.example.com&lt;/code&gt; to &lt;code&gt;www.my-campaign.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Your campaign ends, and eventually &lt;code&gt;www.my-cool-campaign.com&lt;/code&gt; expires.&lt;/li&gt;
&lt;li&gt;You still have the &lt;code&gt;CNAME&lt;/code&gt; pointing &lt;code&gt;campaign.example.com&lt;/code&gt; to the expired domain.&lt;/li&gt;
&lt;li&gt;An attacker buys the expired domain, and now there is a DNS record under &lt;em&gt;your&lt;/em&gt; domain (&lt;code&gt;campaign.example.com&lt;/code&gt;) which is pointing to an attacker controlled domain.&lt;/li&gt;
&lt;li&gt;The attacker hosts malicious content under &lt;code&gt;www.my-cool-campaign.com&lt;/code&gt; which will be accessible from &lt;code&gt;https://campaign.example.com&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So be mindful about your DNS records. If you have to deal with lots of domain names like this, an automated solution for monitoring is highly recommended.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subdomain_takeovers"&gt;Subdomain Takeovers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Architecture
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-an-internal-api-for-accessing-data-sources-to-get-rid-of-dangerous-trust-boundaries" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Create an internal API for accessing data sources to get rid of dangerous trust boundaries
&lt;/h3&gt;

&lt;p&gt;You shouldn't put too much trust in your Internet-facing web application. For example, it shouldn't have direct access to a database. Otherwise, when someone breaks into the Internet-facing application your entire database will be lost.&lt;/p&gt;

&lt;p&gt;Instead separate your architecture into multiple components, for example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your web application on &lt;code&gt;www.example.com&lt;/code&gt; will authenticate your users on &lt;code&gt;auth0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Your web application on &lt;code&gt;www.example.com&lt;/code&gt; is allowed to connect to the internal API &lt;code&gt;api.example.local&lt;/code&gt; with the authenticated user's &lt;code&gt;access-token&lt;/code&gt; (obtained from &lt;code&gt;auth0&lt;/code&gt;) which will then be passed as the &lt;code&gt;Authorization&lt;/code&gt; header when making calls to the internal API.&lt;/li&gt;
&lt;li&gt;Your API on &lt;code&gt;api.example.local&lt;/code&gt; will enforce access controls based on the (end user's) access token and read/write the database appropriately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if an attacker fully compromises your &lt;code&gt;www.example.com&lt;/code&gt; application, the attacker will not have full access to the entire database, but only individual user's data whose access tokens happen to be in the memory at the time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#encrypt-and-authenticate-all-connections" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Encrypt and authenticate all connections
&lt;/h3&gt;

&lt;p&gt;Do not trust your internal network to be secure, there are many ways in which it could be compromised. Encrypt all system-to-system connections with TLS (that is, use HTTPS) and authenticate the connections preferably on both, network and application-level: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Web App -&amp;gt;&lt;/strong&gt; API: &lt;em&gt;This is my client certificate. It's signed by the CA that we trust, and it says "CN=WebApp".&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Web App &lt;strong&gt;&amp;lt;- API&lt;/strong&gt;: &lt;em&gt;And this is my server certificate. It's signed by the CA that we trust, and it says "CN=API"&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web App -&amp;gt;&lt;/strong&gt; API: &lt;em&gt;This is my access token that is signed by the IDP that we trust, I got it with OAuth2 client credentials grant flow.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web App -&amp;gt;&lt;/strong&gt; API: &lt;em&gt;...and this is the access token of the logged-in user "John Doe" on whose behalf I'm making this request that was also signed by the IDP that we trust.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web App -&amp;gt;&lt;/strong&gt; API: &lt;em&gt;...so could you give me John Doe's information, please?&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Web App &lt;strong&gt;&amp;lt;- API&lt;/strong&gt;: &lt;em&gt;Gladly. Since this is an encrypted and mutually authenticated connection network level, and because you seem to be "Web App" on the application level, and because you seem to be operating with the permissions of "John Doe".&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#manage-secrets-centrally" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Manage secrets centrally
&lt;/h3&gt;

&lt;p&gt;Without a proper secrets management solution it is not easy to keep credentials short-lived, audit-logged, and not to expose them to human eyes. For this reason (and many others) it is recommended to use a tool such as HashiCorp vault to centrally manage integration secrets, encryption keys, and the like.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.vaultproject.io/"&gt;HashiCorp Vault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-monitoring" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#collect-analyze-alert" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect, analyze, alert
&lt;/h3&gt;

&lt;p&gt;Collect logs centrally to a system, such as a SIEM (Security Information and Event Monitoring), where you can trigger alerts for specific events that indicate a vulnerability or an attack. Configure alert channels so that the relevant people will know immediately when a significant threat occurs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collect-application-security-events" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect application security events
&lt;/h3&gt;

&lt;p&gt;Probably the most important log source is your application itself. You should raise exceptions when suspicious behavior happens, log the events and possibly even automatically lock out users/IP addresses that seem to be causing trouble.&lt;/p&gt;

&lt;p&gt;Such events can be (these are just examples, the specific cases depend heavily on your application): &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input validation errors (e.g. trying to give values for parameters that shouldn't have been possible through the UI).&lt;/li&gt;
&lt;li&gt;Access control errors (e.g. trying to access a record which shouldn't have been possible through the UI).&lt;/li&gt;
&lt;li&gt;Database syntax errors indicate that someone has discovered a SQL injection vulnerability and you need to move fast.&lt;/li&gt;
&lt;li&gt;XML errors indicate that someone has discovered an XML injection vulnerability or possibly is trying to find/exploit an XXE (XML External Entities) vulnerability.&lt;/li&gt;
&lt;li&gt;Bad request errors that indicate the end user sent something which was rejected by the application. Spring framework's RequestRejectedException is an example of this.&lt;/li&gt;
&lt;li&gt;CSRF token validation errors usually mean that someone is looking for vulnerabilities in your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collect-runtime-security-logs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect runtime security logs
&lt;/h3&gt;

&lt;p&gt;Use a runtime security monitoring tool such as Falco to detect anomalous system calls. Falco is especially useful if you happen to use Kubernetes. Remotely collect and monitor these logs as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://falco.org/"&gt;Falco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#collect-selinuxapparmor-logs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect SELinux/AppArmor logs
&lt;/h3&gt;

&lt;p&gt;If you have an SELinux policy that prevents outgoing connections, and your application suddenly tries to make an HTTP request to e.g. &lt;code&gt;burpcollaborator.net&lt;/code&gt;, it would be very useful to know about it right away. Or perhaps your application tries to access &lt;code&gt;/etc/passwd&lt;/code&gt;. Both of these would indicate that someone has already found a serious vulnerability in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collect-webserver-events" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect webserver events
&lt;/h3&gt;

&lt;p&gt;Collect at least access logs and error logs from your web server software and send them to the central logging server as well. This will help in mapping the timeline in incident response.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collect-waf-logs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Collect WAF logs
&lt;/h3&gt;

&lt;p&gt;If you use a WAF like recommended above, collect those logs as well. But don't necessary trigger alerts from them because generally WAF products get bombarded with all sorts of crap from the Internet that most of the time you won't have to worry about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defending-threats-on-server-side-incident-response" class="anchor"&gt;
  &lt;/a&gt;
  Defending Threats On Server Side - Incident Response
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#have-a-plan" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Have a plan
&lt;/h3&gt;

&lt;p&gt;Once you have your monitoring and hardening in place, vulnerabilities will not be easy for attackers to find, vulnerabilities will be slow to successfully exploit, and you will know about the attempts quickly. Good place to be.&lt;/p&gt;

&lt;p&gt;But knowing about attacks and slowing down attackers is not enough, you still have to do something about them. So have the people, tools, and processes ready for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quickly analyzing the logs and understanding what is happening and what needs to be done&lt;/li&gt;
&lt;li&gt;Quickly restricting individual URL addresses or parameters in e.g. an application firewall product&lt;/li&gt;
&lt;li&gt;Quickly shutting down the application if needed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#secure-development-considerations" class="anchor"&gt;
  &lt;/a&gt;
  Secure Development Considerations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#threat-model" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Threat model
&lt;/h3&gt;

&lt;p&gt;Go through a process of thinking "what could go wrong" and then do something about it. Preferably do this from the get-go when you start designing a system, but it's never too late to begin, and at any rate you should re-visit this process when you introduce changes into the system.&lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: What if an attacker breaches the Internet facing web server?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: Well then we'd be royally screwed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: Okay so we have a trust relationship there, we trust that the Internet facing web server will not be pwned. Can we really trust that?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: Well no, there are a gazillion things that could result in that thing getting hacked, for example vulnerabilities in our own code, or vulnerabilities in a dependency that we use, or perhaps vulnerabilities in our web server software.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: Right. So let's break that trust relationship. But how?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: Let's break the monolith and create an internal API that does the actual database access. Then the frontend web server will not have access to everything at once.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: Great idea. So what else could go wrong?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: Well what if an attacker breaches our internal network?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jim: All would be lost, the server-to-server connections are all unencrypted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bob: ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is threat modeling and it doesn't have to be complex or scary. Use it to discover dangerous trust relationships and then break those relationships.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#force-peer-review-in-source-control" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Force peer review in source control
&lt;/h3&gt;

&lt;p&gt;Implement a technical control that prevents code from entering the repository without at least one or two other developers approving it. This is the basis of your secure development lifecycle because now two things happen: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If an attacker compromises the workstation of a developer, or the developer goes rogue, it will not be possible to directly push malicious code into the repository.&lt;/li&gt;
&lt;li&gt;If a developer makes a mistake and tries to introduce vulnerable code into the repository, there is a good chance that the other developers reviewing the code will catch the error before it gets merged.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/ee/user/project/merge_requests/merge_request_approvals.html#required-approvals"&gt;GitLab - Required Approvals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://confluence.atlassian.com/bitbucketserver/checks-for-merging-pull-requests-776640039.html"&gt;BitBucket - Checks for merging pull requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops"&gt;Azure DevOps - Improve code quality with branch policies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#automate-the-ci-pipeline-and-restrict-mere-mortal-access-to-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Automate the CI pipeline and restrict mere mortal access to it
&lt;/h3&gt;

&lt;p&gt;Individual developers should be able to trigger e.g. a Jenkins build, but Jenkins should be configured to allow that and nothing else. Individual developers should not be able to introduce arbitrary code into the build phase. You can however keep the Jenkinsfile in source control as long as the peer review process is technically forced like recommended above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sign-the-build-artifacts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Sign the build artifacts
&lt;/h3&gt;

&lt;p&gt;Sign the artifacts. For example, if you are building a container image, sign the image as part of the build. Store the signing keys safely. The build phase needs to access the keys but they &lt;strong&gt;shouldn't&lt;/strong&gt; be stored in version control with the Jenkinsfile. Preferably keep the keys in e.g. HashiCorp vault and pull them at build time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/security/trust/trust_automation/"&gt;Automation with Content Trust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plugins.jenkins.io/hashicorp-vault-plugin/"&gt;Jenkins - HashiCorp Vault Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#run-a-static-application-security-scanner-as-part-of-the-ci-pipeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Run a static application security scanner as part of the CI pipeline
&lt;/h3&gt;

&lt;p&gt;Run a tool such as SpotBugs + FindSecBugs (or a similar tool applicable to your technology of choice) in your CI pipeline. This will help you spot some known vulnerabilities in your code before deploying it.&lt;/p&gt;

&lt;p&gt;You can additionally run these tools on the developer's workstation (as an IDE plugin for example) to catch issues even before checking them to version control.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spotbugs.github.io/"&gt;SpotBugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://find-sec-bugs.github.io/"&gt;Find-Sec-Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#verify-dependencies-on-build-and-keep-them-at-a-minimum" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Verify dependencies on build and keep them at a minimum
&lt;/h3&gt;

&lt;p&gt;Every software package that you depend on is a risk. You are pulling code from someone elses' repository and executing it on your application server. So be mindful about what and how you depend on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keep the dependencies at a minimum.&lt;/li&gt;
&lt;li&gt;Only use dependencies that you trust. They should all be widely used and reputable.&lt;/li&gt;
&lt;li&gt;Use a build framework that supports dependency verification, and make sure the verification is enabled.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As additional hardening restrict egress connections from your application server (described earlier in this article) to prevent any backdoors from "calling home".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.gradle.org/current/userguide/dependency_verification.html"&gt;Gradle Dependency Verification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#run-a-dependency-security-scanner-as-part-of-the-ci-pipeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Run a dependency security scanner as part of the CI pipeline
&lt;/h3&gt;

&lt;p&gt;Run a tool such as OWASP DependencyCheck as part of your CI pipeline to catch some dependencies you might be using that have known security issues in them.&lt;/p&gt;

&lt;p&gt;You run these tools on the developer's workstation as well (but also run them in the CI pipeline that's the most important thing).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owasp.org/www-project-dependency-check/"&gt;OWASP DependencyCheck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#run-a-container-image-security-scanner-as-part-of-the-ci-pipeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Run a container image security scanner as part of the CI pipeline
&lt;/h3&gt;

&lt;p&gt;If you use containers, use a tool such as Trivy to scan the created container image for known vulnerabilities.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aquasecurity/trivy"&gt;Trivy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#automate-deployments-and-validate-signatures" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Automate deployments and validate signatures
&lt;/h3&gt;

&lt;p&gt;Individual developers could well have the right to deploy to production, but only the specific images built and signed in the previous stages should be deployable. Access to production secrets or direct access to the servers should not be possible. Validate signature of the deployment image, for example, if you are using Kubernetes then validate the container signature via e.g. Notary and Open Policy Agent.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/security/trust/"&gt;Docker Content Trust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://siegert-maximilian.medium.com/ensure-content-trust-on-kubernetes-using-notary-and-open-policy-agent-485ab3a9423c"&gt;Ensure Content Trust on Kubernetes using Notary and Open Policy Agent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#have-a-security-champion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;i class="fa fa-check"&gt;&lt;/i&gt; Have a security champion
&lt;/h3&gt;

&lt;p&gt;There is a limit to how much a single person can obsess about. You cannot expect every developer to be a masterful penetration tester or security engineer. Just as you can't expect all security professionals to be outstanding developers.&lt;/p&gt;

&lt;p&gt;So it's generally a great idea to introduce people to your team with a security focus, for sparring with developers, architects etc. and helping to secure your applications and spread security awareness within the team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSVut7eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vtdk9kdl5h3qdbawwfk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSVut7eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vtdk9kdl5h3qdbawwfk.png" alt="security champion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;i class="fa fa-book"&gt;&lt;/i&gt; Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://resources.infosecinstitute.com/topic/what-is-a-security-champion-definition-necessity-and-employee-empowerment/"&gt;What is a security champion?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is much more to securing your application than avoiding vulnerabilities. To summarize some of the main ideas: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use up to date, modern, well-known software components for performing risky operations such as authentication, access control, cryptography, accessing a database, or parsing XML. And make sure you have configured those components properly, for example by disabling external entities in your XML parser.&lt;/li&gt;
&lt;li&gt;Use the security controls offered by your platform, for example, CSRF protection.&lt;/li&gt;
&lt;li&gt;Use the security controls offered by web browsers, such as HSTS, SameSite cookies, and Content Security Policy.&lt;/li&gt;
&lt;li&gt;Centralize your security controls, especially authentication and access control, to avoid vulnerabilities where you "forget to add security" to some controller function, etc.&lt;/li&gt;
&lt;li&gt;Use a web application firewall to make finding and exploiting many classes of vulnerabilities in your application difficult.&lt;/li&gt;
&lt;li&gt;Contain your application by restricting its access to file-, network-, and system resources.&lt;/li&gt;
&lt;li&gt;Threat model to discover any dangerous trust relationships in your architecture, then break them. This could include for example source control policies to break the trust relationship to the integrity of each developer's workstation, and a clever architecture to break the full trust in frontend webserver not getting compromised.&lt;/li&gt;
&lt;li&gt;Monitor vigorously and have a plan when something goes south.&lt;/li&gt;
&lt;li&gt;Use code/image/dependency vulnerability scanners in both development environments and the CI pipeline.&lt;/li&gt;
&lt;li&gt;Educate developers, architects, etc. about security and have a security champion on the team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#appsec-adventure-awaits" class="anchor"&gt;
  &lt;/a&gt;
  AppSec adventure awaits!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://eepurl.com/hqAGt5"&gt;Subscribe&lt;/a&gt; to the AppSec monkey mailing list and be among the first to get fresh content.&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>4 ways to accelerate JSON processing with Rails and PostgreSQL</title>
      <author>Kevin Gilpin</author>
      <pubDate>Tue, 16 Feb 2021 18:18:57 +0000</pubDate>
      <link>https://dev.to/kgilpin/4-ways-to-accelerate-json-processing-with-rails-and-postgresql-nfa</link>
      <guid>https://dev.to/kgilpin/4-ways-to-accelerate-json-processing-with-rails-and-postgresql-nfa</guid>
      <description>&lt;p&gt;&lt;a href="https://appland.org"&gt;AppLand&lt;/a&gt; is an open source framework that developers can use to record, analyze, and optimize end-to-end code and data flows. The framework provides client agents for Ruby, Java and Python (beta) that record running code and generate JSON files called AppMaps. Users can view and analyze AppMaps locally using the &lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;AppMap extension for VS Code&lt;/a&gt;, and also push AppMaps to the AppLand server for analytics, sharing, discussion etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdOg08vL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlknh6trb3qk3edsqrdh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdOg08vL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlknh6trb3qk3edsqrdh.gif" alt="AppMap for VS Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AppLand server is built to ingest and process large AppMap JSON files. Our stack is vanilla Rails and PostgreSQL. Naturally, we use the powerful JSONB data type to store the JSON data in the database. In the initial development period of AppLand, AppMap files typically ranged from a few KB up to a few hundred KB. But before long, AppLand users started to record some very large apps, including monolithic Java and Ruby repos with up to 1 million lines of code. As hundreds, and then thousands of JSON files were generated from these large repos and pushed into AppLand, our server became stressed and we had to dig in and optimize. In this post, I’m describing some of the ways that we scaled up our architecture to handle these large JSON files. &lt;/p&gt;

&lt;p&gt;So, without further ado, here are four ways to accelerate JSON processing with Rails and PostgreSQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-skip-rails-json-parsing-on-post" class="anchor"&gt;
  &lt;/a&gt;
  1. Skip Rails JSON parsing on POST
&lt;/h2&gt;

&lt;p&gt;When AppMap data is received by the AppLand server, we want to get it into PostgreSQL as fast as possible. When Rails receives an HTTP request with content type &lt;code&gt;application/json&lt;/code&gt;, it parses the request JSON into Ruby objects and then passes this data, as &lt;code&gt;params&lt;/code&gt;, to the controller. Since all we want to do is insert the data into PostgreSQL, and PostgreSQL can parse the JSON itself, we don’t need Rails to do any parsing. So, we disable Rails JSON parsing behavior by sending content type &lt;code&gt;multipart/mixed&lt;/code&gt; instead of &lt;code&gt;application/json&lt;/code&gt;. In this way, we minimize the amount of request processing that’s performed in the application tier. The JSON data is loaded efficiently into PostgreSQL, without having to sacrifice all the benefits provided by the Rails framework.&lt;/p&gt;

&lt;p&gt;Here’s an example of our &lt;a href="https://github.com/applandinc/appland-cli/blob/446b6d78c5242c9f8ba3b2a230be2b46a191f35e/internal/appland/client.go#L236"&gt;Go client code sending &lt;code&gt;multipart/mixed&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-pay-attention-to-algorithm-design" class="anchor"&gt;
  &lt;/a&gt;
  2. Pay attention to algorithm design
&lt;/h2&gt;

&lt;p&gt;With a few hundred KB of data, most simple algorithms will perform about the same. But as the data grows to dozens of MB and beyond, algorithm design becomes very important. We discovered that one of our AppMap post-processing algorithms had an &lt;a href="https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/#on-1"&gt;O(n²) running time&lt;/a&gt;. We were able to rewrite this algorithm as O(n). Here’s what that difference looks like in a graph of time and memory vs data size:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qLNDSKN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2ztrfo9xqdiywn3vsu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qLNDSKN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2ztrfo9xqdiywn3vsu0.png" alt="Performance optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep those computer science fundamentals in mind, especially as the data gets bigger! There’s no point in trying to optimize a poor algorithm by writing faster code. This algorithm performs just fine in plain Ruby now that it’s inherently efficient. It’s doing in 22 seconds what used to take 3 minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-use-indexes-and-generated-columns-to-speed-up-access-to-big-json-objects" class="anchor"&gt;
  &lt;/a&gt;
  3. Use indexes and generated columns to speed up access to big JSON objects
&lt;/h2&gt;

&lt;p&gt;The beauty of JSONB is that you don’t have to choose between the flexibility of “schema less” JSON and the power of SQL and relations. &lt;/p&gt;

&lt;p&gt;As I describe earlier, the AppMap data is written directly into the database by the controller. Later, we want to make this data easily to query and retrieve.  Two PostgreSQL techniques help us to make these operations efficient.&lt;/p&gt;

&lt;p&gt;First, a sometimes we want to reach into AppMaps and search by a particular field, such as “labels” or “metadata.name”. We can make this this efficient by adding indexes on the JSONB data. &lt;/p&gt;

&lt;p&gt;Second, there are situations where we want to retrieve a subset of the JSONB data, and we don’t want to have to parse many megabytes of JSONB data just to pluck out a few fields. So, when the data is loaded, we copy (or denormalize) some of the JSON data into columns in the same record. &lt;a href="https://www.postgresql.org/docs/12/ddl-generated-columns.html"&gt;Generated columns&lt;/a&gt; make this fast and efficient, and ensure that the denormalized data is always up to date. &lt;/p&gt;

&lt;p&gt;For more details on these techniques, check out my companion post &lt;a href="https://dev.to/kgilpin/effective-sql-indexing-and-denormalizing-jsonb-1bhm"&gt;Effective SQL - Indexing and denormalizing JSONB&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-process-jsonb-in-the-database-using-sql-functions" class="anchor"&gt;
  &lt;/a&gt;
  4. Process JSONB in the database using SQL functions
&lt;/h2&gt;

&lt;p&gt;Databases aren’t just for storing data, they are great for processing it as well. In the case of JSONB, PostgreSQL provides a full range of functions and operators that you can use to filter and transform data before you SELECT it out. By processing data in the database, you can use each tool for what it does best: PostgreSQL for data crunching, Ruby for gluing the front-end to the back-end. Here are some examples of data operations that we perform entirely in the database: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finding all AppMaps that contain a particular package, class, or function.&lt;/li&gt;
&lt;li&gt;Building a package and class hierarchy of all the code used in multiple AppMaps.&lt;/li&gt;
&lt;li&gt;Building a dependency map of packages and classes across multiple AppMaps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By doing these computations in the database, we operate efficiently on the data very close to the storage, and we don’t transmit unnecessary data from the database to the application tier. &lt;/p&gt;

&lt;p&gt;Well, that’s our list. I hope you find something helpful in here! If you have your own JSON optimization to share, please tell us about it in the comments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; Most of the optimizations described in this post were designed and developed by our long-time wizard, and friend, &lt;a href="https://github.com/dividedmind"&gt;Rafał Rzepecki&lt;/a&gt;. Thanks, Rafał!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honorable-mention" class="anchor"&gt;
  &lt;/a&gt;
  Honorable mention
&lt;/h2&gt;

&lt;p&gt;As a bonus, here are a couple of smaller tips!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limit-the-size-of-sql-log-messages" class="anchor"&gt;
  &lt;/a&gt;
  Limit the size of SQL log messages
&lt;/h3&gt;

&lt;p&gt;By default, the Rails framework logs all the SQL statements. When the application is inserting large JSON files into the database, it’s not helpful to see megabytes of SQL INSERT logged to the console. &lt;/p&gt;

&lt;p&gt;So we created this Sequel extension which truncates the log messages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;

&lt;span class="c1"&gt;# Sequel database extension to truncate too long log entries.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# SQL statements longer than +sql_log_maxlen+ will get ellipsized in the logs.&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TruncatedLogging&lt;/span&gt;
  &lt;span class="no"&gt;DEFAULT_SQL_LOG_MAXLEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;
  &lt;span class="n"&gt;private_constant&lt;/span&gt; &lt;span class="ss"&gt;:DEFAULT_SQL_LOG_MAXLEN&lt;/span&gt;

  &lt;span class="nb"&gt;attr_writer&lt;/span&gt; &lt;span class="ss"&gt;:sql_log_maxlen&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sql_log_maxlen&lt;/span&gt;
    &lt;span class="vi"&gt;@sql_log_maxlen&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;DEFAULT_SQL_LOG_MAXLEN&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_connection_yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql_log_maxlen&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'...'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sql_log_maxlen&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:truncated_logging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;TruncatedLogging&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#skip-activesupportjson-when-generating-json-with-sequel" class="anchor"&gt;
  &lt;/a&gt;
  Skip ActiveSupport::JSON when generating JSON with Sequel
&lt;/h3&gt;

&lt;p&gt;ActiveSupport::JSON &lt;a href="https://github.com/rails/rails/blob/130c128eae233bf71231c73b9c3c3b3f3ede918b/activesupport/lib/active_support/json/decoding.rb#L47"&gt;detects dates and times&lt;/a&gt; using a regexp, and parses date values into Ruby objects. We don’t use this functionality, so it’s disabled with another Sequel extension:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/application.rb&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sequel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after_connect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extension&lt;/span&gt; &lt;span class="ss"&gt;:truncated_logging&lt;/span&gt;
      &lt;span class="no"&gt;Sequel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extension&lt;/span&gt; &lt;span class="ss"&gt;:core_to_json&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;span class="c1"&gt;# lib/sequel/extensions/core_to_json.rb&lt;/span&gt;

&lt;span class="c1"&gt;# ActiveSupport adds some pure ruby manipulation to #to_json&lt;/span&gt;
&lt;span class="c1"&gt;# which isn't useful here and hurt performance. Use JSON.generate&lt;/span&gt;
&lt;span class="c1"&gt;# directly to bypass it.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;Sequel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;object_to_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>rails</category>
      <category>postgres</category>
      <category>architecture</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Performance Tools</title>
      <author>Laurie</author>
      <pubDate>Tue, 16 Feb 2021 18:10:52 +0000</pubDate>
      <link>https://dev.to/laurieontech/performance-tools-4clf</link>
      <guid>https://dev.to/laurieontech/performance-tools-4clf</guid>
      <description>&lt;p&gt;If you've worked on browser-based apps before, you may be familiar with a tool called Lighthouse.&lt;/p&gt;

&lt;p&gt;Lighthouse is an auditing tool that gives you a series of "scores" for various metrics, e.g. Accessibility, Performance, SEO. It's available in chrome devtools and can also be run via CLI (command line interface).&lt;/p&gt;

&lt;p&gt;In this post we're going to focus on how Lighthouse measures performance and how that differs from other tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lighthouse-in-devtools" class="anchor"&gt;
  &lt;/a&gt;
  Lighthouse in devtools
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; runs your site to calculate metrics and judge how performant it is. However, there are different ways to run Lighthouse reports and Lighthouse itself provides different modes!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Devtools throttling (sometimes referred to as request-level throttling)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this mode, Lighthouse attempts to mimic your site behavior on a slow device. Lighthouse accomplishes this by throttling the connection and cpu, replicating something like a nexus 4g on a slow 4g connection. They do this via the Chrome browser (this is a google tool, so it's only testing on the google browser). While this helps test site performance on a slow device it isn't an exact simulation. That's because this "slowness" is relative to the speed of your local device.&lt;/p&gt;

&lt;p&gt;If you're running a high powered Mac with a really strong internet connection it's going to register a better score than running the same simulation using an older mobile device.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simulated throttling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The aim of this mode is the same as devtools throttling, mimic your site behavior on a slow device/connection. However, Lighthouse runs against a fast device and then calculates what experience a slow device would have. We'll dive into this more in the next section on Page Speed Insights.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Packet-level throttling&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this mode Lighthouse does not throttle and expects that the operating system is doing it. We'll explain this mode more in the section on Webpage Test.&lt;/p&gt;

&lt;p&gt;What is interesting about these modes is that depending on which tool you're using to access Lighthouse reports, you may be running a different mode.&lt;/p&gt;

&lt;p&gt;By default, running a Lighthouse audit in chrome devtools uses the first mode. Running via the chrome extension uses the second. The CLI version of Lighthouse allows you to pass a flag, &lt;code&gt;throttling-method&lt;/code&gt;, to specify which mode you'd like to use. It uses simulated throttling by default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-speed-insights" class="anchor"&gt;
  &lt;/a&gt;
  Page Speed Insights
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Page Speed Insights&lt;/a&gt; (PSI) is another Google-provided tool. It uses the simulated throttling mentioned above.&lt;/p&gt;

&lt;p&gt;PSI uses lab data which means it runs against Google servers instead of being influenced by the specs of your local machine. It gets metrics using a fast device and then artificially calculates what a slow device would experience. This is the fastest way, of the three throttling methods above, to calculate performance metrics.&lt;/p&gt;

&lt;p&gt;Why does it matter if it's fast? Well, PSI is run for millions of pages in order to support &lt;a href="https://dev.to/laurieontech/a-primer-on-seo-49n1"&gt;SEO&lt;/a&gt;. We'll talk about that at the end.&lt;/p&gt;

&lt;p&gt;But because of this, the calculations need to be fast rather than perfect. So this multiplier is easier than devtools throttling and typically just as accurate or better. Note that it can be worse in &lt;a href="https://docs.google.com/document/d/1BqtL-nG53rxWOI5RO0pItSRPowZVnYJ_gBEQCJ5EeUE/edit"&gt;certain edge cases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another thing about PSI is that, for some sites, you can get a &lt;a href="https://developers.google.com/web/tools/chrome-user-experience-report"&gt;CRUX (Chrome User Experience Report)&lt;/a&gt;. This is a report that uses real user monitoring (RUM) and bases the page metrics on how real users interact with a page. This is the most accurate type of data and produces the metrics that most directly reflect user experience of performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webpage-tests" class="anchor"&gt;
  &lt;/a&gt;
  Webpage Tests
&lt;/h2&gt;

&lt;p&gt;The last automated performance tool is &lt;a href="https://www.webpagetest.org/"&gt;webpage test&lt;/a&gt;. This tool uses packet-level throttling which means it runs performance benchmarks against real hardware in a real location. As a result, it isn't influenced by your local machine the way devtools throttling is.&lt;/p&gt;

&lt;p&gt;It simulates the connection, but it does so at the operating system level, making it more accurate. However, it can also introduce &lt;a href="https://docs.google.com/document/d/1BqtL-nG53rxWOI5RO0pItSRPowZVnYJ_gBEQCJ5EeUE/edit"&gt;more variance&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-this-matter" class="anchor"&gt;
  &lt;/a&gt;
  Why does this matter?
&lt;/h2&gt;

&lt;p&gt;It seems like there are a lot of tools to test performance, but why does this matter? Do milliseconds really make a difference?&lt;/p&gt;

&lt;p&gt;Well, Google is an ecosystem. And most of us are familiar with it because of Google search. Ranking highly on google search is important for a lot of websites. Per Google, site performance impacts a site's ranking.&lt;/p&gt;

&lt;p&gt;Specifically, site performance and its impact on ranking is based on core web vitals. So we'll talk about that in the next post.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>11 Easy UI Design Tips for Web Devs</title>
      <author>Danny Adams</author>
      <pubDate>Tue, 16 Feb 2021 18:01:24 +0000</pubDate>
      <link>https://dev.to/doabledanny/11-easy-ui-design-tips-for-web-devs-j3j</link>
      <guid>https://dev.to/doabledanny/11-easy-ui-design-tips-for-web-devs-j3j</guid>
      <description>&lt;p&gt;Whilst learning web development, most of us don’t have much design experience or access to a UI designer. So here are 11 easy to apply UI design fundamentals to make your projects look sleek and modern.&lt;/p&gt;

&lt;p&gt;This article was originally posted on my personal blog, &lt;a href="https://www.doabledanny.com/UI-Design-Tips-for-Web-Devs"&gt;DoableDanny.com&lt;/a&gt;. If you enjoy the article, consider subscribing to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;YouTube channel&lt;/a&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-be-consistent" class="anchor"&gt;
  &lt;/a&gt;
  1. Be consistent
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCUuNeJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y94y3colvzfiih57bolk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCUuNeJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y94y3colvzfiih57bolk.png" alt="consistency example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the top image you can see that the icons have different styles and colours:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The calendar icon has some green and a grey outline.&lt;/li&gt;
&lt;li&gt;The lock icon has a solid orange circle around it and is white filled with no outline.&lt;/li&gt;
&lt;li&gt;The thumbs up has a thin black outline and smoother lines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no consistent theme - different shapes, colors, sizes and outline thicknesses.&lt;/p&gt;

&lt;p&gt;In the bottom image, the icons look to be from the same icon set. They all have a simple dark grey outline and that’s about it. The icons also have the same height and width.&lt;/p&gt;

&lt;p&gt;In the bottom image, the text is left aligned, and so are the icons. I also could've centred the text and put each icon over the centre. Both are fine - consistency is key.&lt;/p&gt;

&lt;p&gt;Rule of thumb is to left-align any longer form text e.g. a blog post, as it’s easier to read. For shorter amounts of text, you can left-align or centre.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-use-quality-images" class="anchor"&gt;
  &lt;/a&gt;
  2. Use quality images
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h5JqDvUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfdpbqclz1qgfhqin020.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h5JqDvUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfdpbqclz1qgfhqin020.png" alt="clipart vs quality image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clipart may have been great back when you were 10 years old, but using stuff like that now looks extremely unprofessional.&lt;/p&gt;

&lt;p&gt;Professional images can be downloaded and used in your projects completely free from &lt;a href="https://www.unsplash.com"&gt;https://www.unsplash.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-contrast" class="anchor"&gt;
  &lt;/a&gt;
  3. Contrast
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Qo6ujyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heicl1riiwipqchivyw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Qo6ujyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heicl1riiwipqchivyw6.png" alt="text is easily readable on background image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your background is light, use dark text. If dark, use light text. Simple enough. A problem I see quite often on websites is when people use colourful images as a background with light and dark spots and then plonk some text on top. It’s often difficult to read.&lt;/p&gt;

&lt;p&gt;Solutions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use an image overlay e.g. if you are using light coloured text, place over the image a dark coloured overlay (a semi-transparent div with background-color using rgba) and reduce the opacity down to darken the appearance of the image and make the light text clearer. Remember to give the text a higher z-index than the overlay so it sits on top!&lt;/li&gt;
&lt;li&gt;Choose an image like above, where there is a nice consistent coloured section to place your text.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, notice how the logo in the nav bar is aligned vertically with the left edge of the text and “start my journey” call to action button… now that’s consistency! It's key to a sleek looking design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-whitespace" class="anchor"&gt;
  &lt;/a&gt;
  4. Whitespace
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jb9nZWm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwg0sh21rcw44tboskgk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jb9nZWm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwg0sh21rcw44tboskgk.jpg" alt="poor vs good whitespace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the top image, the “SomeCompany” logo at the top has less space to its left than the right-most nav link has to its right. In the bottom, we can see the space is roughly equal.&lt;/p&gt;

&lt;p&gt;The paragraph of text in the top image is cramped up too close to the heading and call to action button. In the bottom, it has more breathing room.&lt;/p&gt;

&lt;p&gt;We can also see that the heading is closer to the paragraph than it is to the logo. Stuff that is closely related should be closer together… but not stupid close.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-visual-hierarchy-size-matters" class="anchor"&gt;
  &lt;/a&gt;
  5. Visual hierarchy – size matters
&lt;/h2&gt;

&lt;p&gt;Your eyes are probably drawn to “The Road Less Travelled” in the image from tip 4. Obviously because it is bigger. It is also bolder. Attention can also be demanded by colour e.g. the “start my journey” button.&lt;/p&gt;

&lt;p&gt;A common mistake is to make the nav logo too big, or the nav links stand out too much with colour.&lt;/p&gt;

&lt;p&gt;We want the users attention directed towards the content, not the logo and nav links.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-one-font-is-fine" class="anchor"&gt;
  &lt;/a&gt;
  6. One font is fine!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SvQoT7fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io6mymdjufk8m11zwlr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SvQoT7fR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io6mymdjufk8m11zwlr6.png" alt="bad vs good font"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is fine to use just one font. No need to overcomplicate. Just avoid “Times new roman” (it’s overused) and “Comic sans” (it just looks naff!?).&lt;/p&gt;

&lt;p&gt;Nunito, Helvetica or sans serif are pretty nice modern looking fonts.&lt;/p&gt;

&lt;p&gt;You can still use a second font for headings if your design looks a little too boring (check out the title of this blog post!).&lt;/p&gt;

&lt;p&gt;For font sizes, 18px to 21px are common for paragraphs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-tints-and-shades" class="anchor"&gt;
  &lt;/a&gt;
  7. Tints and shades
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kv7iUmyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehtbk36cscfa1nqm6yu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kv7iUmyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehtbk36cscfa1nqm6yu7.png" alt="altering contrast of text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use few colours. Too many colours can look noisy and unprofessional, especially if you don’t know what you’re doing. Keep it simple.&lt;/p&gt;

&lt;p&gt;Pick a base colour and just use tints (add white) and shades (add black) for variation.&lt;/p&gt;

&lt;p&gt;Then pick one primary “call to action” colour for areas that should stand out. Check out the “complementary colour scheme”.&lt;/p&gt;

&lt;p&gt;I use &lt;a href="https://coolors.co/330088"&gt;coolors&lt;/a&gt; to find complimentary colours and to get tints and shades.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-round-vs-sharp" class="anchor"&gt;
  &lt;/a&gt;
  8. Round vs sharp
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyVtATCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o69k4gosugpsc0xtrhhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyVtATCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o69k4gosugpsc0xtrhhv.png" alt="speech bubble"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sharp corners and edges draw your attention. Think the sharp part of a speech bubble.&lt;/p&gt;

&lt;p&gt;What can we do with this knowledge? Round out the corners of your buttons. Why would you want to draw attention to the corners of the button?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-borders-are-so-last-year" class="anchor"&gt;
  &lt;/a&gt;
  9. Borders are so last year
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BwZtt2Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtarukxei807yi5cij02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BwZtt2Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtarukxei807yi5cij02.png" alt="border vs no border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the old days of the web, borders were everywhere. Nowadays, it’s better to not use them quite as much – it often looks cleaner. Borders can look a little overkill.&lt;/p&gt;

&lt;p&gt;Obviously don’t become completely anti-border, they are still great for separating things. Just don’t make them too thick and attention grabbing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-dont-underline-navbar-links" class="anchor"&gt;
  &lt;/a&gt;
  10. Don't underline nav-bar links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIBnjFhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rv79dgu4btx374uwj412.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIBnjFhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rv79dgu4btx374uwj412.png" alt="underline vs none"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s pretty old school. It looks cleaner without them.&lt;/p&gt;

&lt;p&gt;Underline/change the colour or size on mouse hover and keyboard focus for accessibility.&lt;/p&gt;

&lt;p&gt;You should still underline links in a body of text for good accessibility - it makes it obvious they are links. Just avoid underlining text that isn't a link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-download-a-design-software" class="anchor"&gt;
  &lt;/a&gt;
  11. Download a design software
&lt;/h2&gt;

&lt;p&gt;I used to begin coding up a project with little to no plan of how I wanted it to look. It took me ages to code everything with trial and error for colours and positioning of elements.&lt;/p&gt;

&lt;p&gt;You can iterate through ideas much quicker using design software. I now use AdobeXD (free) to just drag and drop things in place and quickly get a nice design ready to be coded. Figma is also popular but not free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awesome-references" class="anchor"&gt;
  &lt;/a&gt;
  Awesome References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The psychology of persuasive web design: &lt;a href="https://www.doabledanny.com/persuasive-web-design"&gt;https://www.doabledanny.com/persuasive-web-design&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Turn a bad design into a good one: &lt;a href="https://www.youtube.com/watch?v=0JCUH5daCCE&amp;amp;t=112s"&gt;https://www.youtube.com/watch?v=0JCUH5daCCE&amp;amp;t=112s&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Amazing UI tips: &lt;a href="https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886"&gt;https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The science of great UI: &lt;a href="https://www.youtube.com/watch?v=nx1tOOc_3fU"&gt;https://www.youtube.com/watch?v=nx1tOOc_3fU&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you enjoyed this article, you can say thanks by subscribing to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;YouTube channel&lt;/a&gt; or signing up to &lt;a href="https://www.doabledanny.com/blog/"&gt;my blog&lt;/a&gt; to be notified of new posts 🙏&lt;/p&gt;

&lt;p&gt;Also, feel free to connect with me on &lt;a href="https://twitter.com/DoableDanny"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>design</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Why you should NOT use Material-UI</title>
      <author>GaelFerrand</author>
      <pubDate>Tue, 16 Feb 2021 17:32:17 +0000</pubDate>
      <link>https://dev.to/gaelferrand/why-you-should-not-use-material-ui-21nn</link>
      <guid>https://dev.to/gaelferrand/why-you-should-not-use-material-ui-21nn</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l8ici1W7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ddpw3xdoy629sak43uc7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l8ici1W7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ddpw3xdoy629sak43uc7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://material-ui.com/"&gt;Material-UI&lt;/a&gt; is a popular components library (a competitor of &lt;a href="https://reactstrap.github.io/"&gt;Reactstrap&lt;/a&gt; that &lt;em&gt;unifies&lt;/em&gt; React and &lt;a href="https://material.io/"&gt;Material Design&lt;/a&gt;, the design system built by Google.&lt;/p&gt;

&lt;p&gt;As a React developer I've used Material-UI in countless projets and I must say that it's a great library that comes with its grid system, lots of components, and helps build consistent UIs quite fast.&lt;/p&gt;

&lt;p&gt;I was pretty happy with it until I used it for my personnal open-source project &lt;a href="https://github.com/OthrysDev/ammo"&gt;Ammo&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quick parenthesis about Ammo: it's an open source projects which aims at capturing http requests and turn them into stress test engines scripts (such as Gatling). Not the focus of this article though, I won't dive into more details.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#context" class="anchor"&gt;
  &lt;/a&gt;
  Context
&lt;/h1&gt;

&lt;p&gt;Before exposing my unhappiness with Material-UI, let's get a look at my struggle.&lt;/p&gt;

&lt;p&gt;In Ammo, I have a list of items that looks like the following : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cHkAoeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a9yeibbzs93u8dmkdvwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cHkAoeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/a9yeibbzs93u8dmkdvwi.png" alt="Ammo's list of items" title="Ammo's list of items"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each item in the list can be collapsed / uncollapsed :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dabs1jqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pxif498nwcyctfjc0761.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dabs1jqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pxif498nwcyctfjc0761.png" alt="Uncollapsed item" title="An uncollapsed item"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see here, when uncollapsed an item reveals a few things, but nothing too fancy nor complicated. On the left, we can oberve basic HTML divs with text, and on the right we have code snippets (formatted / prettified thanks to &lt;a href="https://www.npmjs.com/package/react-syntax-highlighter"&gt;React syntax highlighter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yet, I would very quickly notice that the overall performance of the application is absolutely terrible.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What?&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#a-first-set-of-measures" class="anchor"&gt;
  &lt;/a&gt;
  A first set of measures
&lt;/h1&gt;

&lt;p&gt;After developping the code-snippets-highlighting feature, just for the sake of being 100% happy with the feature, I tried to throw a couple items in my list and confirm that the syntax highlighting library did not tear down the performance of the app.&lt;/p&gt;

&lt;p&gt;The idea proved to be relevant as the performance turned out to be horrible.&lt;/p&gt;

&lt;p&gt;Just to illustrate how bad it was, here is a gif of what happend when adding 50 items to the interface (using a setInterval, adding 1 item every 300ms) : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Sexsicy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9dpgy09kod7f7ss6ua2q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Sexsicy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9dpgy09kod7f7ss6ua2q.gif" alt="ammo_lag" title="The gif is not lagging : the app is"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the application is lagging like hell and a real pain to use. &lt;em&gt;With just 50 items !&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Coming from a gaming background, where one has to display images, animations, sound effects &amp;amp; musics, multiple layers of background etc. at 60FPS, seeing such a lag just for rendering HTML divs was too much to bear. So I dove into profiling.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#witch-hunt-react-edition" class="anchor"&gt;
  &lt;/a&gt;
  Witch hunt: React edition
&lt;/h1&gt;

&lt;p&gt;My first intuition was that there was something wrong with React. After all, I had seen (and done, let's be honest) in the past lots of apps with unnecessary renders and performance-wise poor practices. So the first thing I made was to make sure that the list was optimized, doing 2 things : &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Giving non-index, unique keys to each item in the list&lt;/li&gt;
&lt;li&gt;Memoize the already-rendered items so that they would not re-render when adding a new one. I used &lt;code&gt;memo&lt;/code&gt; but &lt;code&gt;useMemo&lt;/code&gt; is just as valid.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that I profiled the app : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIigNMAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vgon32zggadshv9yk7ml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIigNMAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vgon32zggadshv9yk7ml.png" alt="First profiling" title="Profiling of 50 items"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can notice : &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First of all, the memoization seems to be working very fine. We can see that the items already rendered are greyed out, meaning that they did not re-render&lt;/li&gt;
&lt;li&gt;We can see that the newly introduced item is indeed taking some render time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;But what got me worried is the graph in the upper-right corner&lt;/strong&gt;. As you can see, renders are getting slower over time. The rendering of the new item starts off taking around 100ms, but when the list gets longer, it takes up to 500ms. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;What ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, why is the number of items in the list having any influence at all on the rendering time of the new item? And then, 500ms to render some basic divs! Horse crap!&lt;/p&gt;

&lt;p&gt;Let's zoom in on the profiling of the rendering of one item : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3NV8Fo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sz05us2q157336kvbunw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3NV8Fo_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sz05us2q157336kvbunw.png" alt="Profiling one item" title="Profiling one item"&gt;&lt;/a&gt;&lt;br&gt;
On the image I highlighted 2 things : &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On the right, we can see that the react-syntax-highlighter, my first source of worry, is not at all responsible for the poor performance. It renders decently fast&lt;/li&gt;
&lt;li&gt;What seems to be taking quite some time are the "headers" (on the left). &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just to be clear, this is a "header" : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pziODwxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/980ohrv3swgs7jxqpmra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pziODwxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/980ohrv3swgs7jxqpmra.png" alt="Header" title="A header"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's really nothing, just two inlined-texts! How come it be that slow??? Just to prove my point even further, here is the code of the &lt;code&gt;&amp;lt;Header&amp;gt;&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Box&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Typography&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subtitle2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt; &lt;/span&gt;&lt;span class="err"&gt;:
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headerValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{value}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Typography&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Box&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There is litteraly nothing fancy here. No hidden performance caveheat, it's just a few basic divs!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-all-comes-down-to-materialui" class="anchor"&gt;
  &lt;/a&gt;
  It all comes down to Material-UI
&lt;/h1&gt;

&lt;p&gt;Quite desperate, I tried lots of things, went through lots of forums, still trying to figure out how React could mess things this badly. And then, out of ideas, I naively tried to replace &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; components with &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Typography&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subtitle2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&amp;gt; &lt;/span&gt;&lt;span class="err"&gt;:
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headerValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{value}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Typography&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Stunningly, I saw some improvement in the performance!&lt;/strong&gt; I went a bit further and tried to get rid of as much Material-UI components as possible (mostly &lt;code&gt;&amp;lt;Box&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Typography&amp;gt;&lt;/code&gt;) and I ended up with this :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--awIJewsQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q9klghh0w416tg5f3d3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--awIJewsQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q9klghh0w416tg5f3d3e.png" alt="new_profiling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your read that right you'd see that : &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This test is done with 500 items (~1000 renders). And it's fluid!&lt;/li&gt;
&lt;li&gt;The highest rendering peak is at ~110ms (instead of 500ms for 50 items)&lt;/li&gt;
&lt;li&gt;The items rendering times are consistent and do not increase with the number of items in the list&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kgG0HQ4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/727fwlt3qfxg34z10q2g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kgG0HQ4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/727fwlt3qfxg34z10q2g.gif" alt="ammo_fluid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that's a big win! Now the app is decently fluid with 10 times more items! And its performance is consistent!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Material-UI is a great library and has had my back in the past years, yet now I would strongly advise against using it if your application might present performance challenges. A simple form or a standard web page shouldn't be a problem, but still, keep that in mind.&lt;/p&gt;

&lt;p&gt;Of course I'm not the first one to find out about those problems, there are several issues open on Github (&lt;a href="https://github.com/mui-org/material-ui/issues/21657"&gt;this one for example&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Also, after all this optimization, you could still argue that a 110ms rendering time for one item is still huge, and I'd agree, but I'll leave things here for the time being. Any further optimization shall be a good topic for a new article!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Don't fear the command line :  Tar. What  is that?</title>
      <author>Dionysia Lemonaki</author>
      <pubDate>Tue, 16 Feb 2021 15:40:32 +0000</pubDate>
      <link>https://dev.to/deniselemonaki/don-t-fear-the-command-line-tar-what-is-that-d0e</link>
      <guid>https://dev.to/deniselemonaki/don-t-fear-the-command-line-tar-what-is-that-d0e</guid>
      <description>&lt;p&gt;When I first heard of the &lt;code&gt;tar&lt;/code&gt; command I was confused and could not quite understand it's use. How is that command useful in the day-to-day use of Linux and how often does it actually get used? Not to mention that it has all these flags to go alongside it, it was very confusing to me at first sight.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tar" class="anchor"&gt;
  &lt;/a&gt;
  What is Tar?
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tar&lt;/code&gt; command stands for &lt;code&gt;tape archive&lt;/code&gt; and is used to group many files and directories into a single compressed archive. That way it can be moved from disc to disc, from machine to machine and sent over to someone else. The same command is also used to extract that archive that we create.&lt;br&gt;
It is essentially a zip file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/gh6gFVh35jyzNvHegl/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/gh6gFVh35jyzNvHegl/giphy.gif" alt="expand on that"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The general syntax looks something along these lines:&lt;br&gt;
&lt;code&gt;tar [flags] [archive-file] [file or directory to be archived]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-absolute-basics-to-get-started" class="anchor"&gt;
  &lt;/a&gt;
  The absolute basics to get started
&lt;/h3&gt;

&lt;p&gt;To put a folder into an archive (let's say in this case a folder named &lt;code&gt;folder&lt;/code&gt;-very creative naming) we would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-cvf&lt;/span&gt; archive.tar folder
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Above we created a single file(&lt;code&gt;archive.tar&lt;/code&gt;) that contains the folder. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;-c&lt;/code&gt; flag stands for &lt;code&gt;create&lt;/code&gt; and is used to create the tar file.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;v&lt;/code&gt; flag stands for &lt;code&gt;verbose&lt;/code&gt; and displays the progress of the action.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;f&lt;/code&gt; flag creates archive with given filename(&lt;code&gt;archive.tar&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While experimenting with the flags and changing their order I noticed that when I used &lt;code&gt;-cfv&lt;/code&gt; I got an error whereas when I used &lt;code&gt;-cvf&lt;/code&gt; like I showed in the example, it worked. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fUqfaPVjiAQcfticZH/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fUqfaPVjiAQcfticZH/giphy.gif" alt="how?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guessed that  the order must be very important.After some research with my best friend lately(stackoverflow)  I learnt that when the flags are used together , the dash in front of them is optional. However, if we use the dash we must use the flags in the accurate order otherwise it won't work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XGnH2RGHoCqumsAXpo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XGnH2RGHoCqumsAXpo/giphy.gif" alt="pat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we created our archive and now we want to extract it. &lt;br&gt;
To extract our &lt;code&gt;archive.tar&lt;/code&gt; file we switch the &lt;code&gt;-c&lt;/code&gt; flag which is used to &lt;code&gt;create&lt;/code&gt; and we instead use the &lt;code&gt;-x&lt;/code&gt; flag which stands for &lt;code&gt;extract&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xvf&lt;/span&gt; archive.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The archive we created earlier was not compressed, and most times we want to compress it as it it significantly smaller in size as it gets run through gzip .&lt;br&gt;
To create an archive that is compressed we use the &lt;code&gt;-z&lt;/code&gt; flag which stands for &lt;code&gt;compress the tar file using gzip&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-czvf&lt;/span&gt; archive.tar.gz folder
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again,If using the &lt;code&gt;-&lt;/code&gt; in front of the flags it's important to remember the right order.&lt;br&gt;
If we type &lt;code&gt;ls -ls&lt;/code&gt; to see a &lt;code&gt;list&lt;/code&gt; with of the files we have and information about, including their size( that's what the &lt;code&gt;s&lt;/code&gt; stands for) then we'll notice than &lt;code&gt;archive.tar.gz&lt;/code&gt; is significantly smaller in size than &lt;code&gt;archive.tar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To extract it we then use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzvf&lt;/span&gt; archive.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We could use the &lt;code&gt;-C&lt;/code&gt; flag and a destination folder for where we want the files to go. That folder must exist already before this action.If we leave that flag of it'll extract the archive where ever we are .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xzvf&lt;/span&gt; archive.tar.gz &lt;span class="nt"&gt;-C&lt;/span&gt; destination-folder
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These are the absolute basics to get started with &lt;code&gt;tar&lt;/code&gt;&lt;br&gt;
Thanks for reading 😃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/wpoLqr5FT1sY0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/wpoLqr5FT1sY0/giphy.gif" alt="dog coding"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>The best JavaScript date libraries in 2021</title>
      <author>Melissa McEwen</author>
      <pubDate>Tue, 16 Feb 2021 15:28:33 +0000</pubDate>
      <link>https://dev.to/skypack/the-best-javascript-date-libraries-in-2021-19mm</link>
      <guid>https://dev.to/skypack/the-best-javascript-date-libraries-in-2021-19mm</guid>
      <description>&lt;p&gt;Wrangling dates and times in JavaScript can be a headache. JavaScript date libraries provide user-friendly APIs and useful utilities that alleviate some of that pain. But with so many options how do you pick the best one? In this post we delve into the world of JavaScript date libraries to help you choose. Our top pick, &lt;strong&gt;date-fns&lt;/strong&gt;, delivers the best feature set combined with an elegant modular architecture.&lt;/p&gt;

&lt;h2 id="our-picks"&gt;Our picks&lt;/h2&gt;

&lt;h3 id="best-overall-date-fns"&gt;Best overall: &lt;a href="https://www.skypack.dev/view/date-fns"&gt;date-fns&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;date-fns&lt;/strong&gt; offers great documentation, functional architecture, and utilities that handle almost any task you can think of. If dates are a critical concern for your JavaScript application, use &lt;strong&gt;date-fns.&lt;/strong&gt; Each feature has clear documentation written in ESM (ES Modules) for the browser. Logical and consistent function names encourage readable code. A modular architecture allows build tools to trim away unused code for a slimmer final build.&lt;/p&gt;

&lt;h3 id="best-for-time-zones-luxon"&gt;Best for time zones: &lt;a href="https://www.skypack.dev/view/luxon"&gt;Luxon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If time zones or localization are your primary concern, we recommend &lt;strong&gt;Luxon&lt;/strong&gt;. &lt;strong&gt;Luxon&lt;/strong&gt; leverages JavaScript's &lt;code&gt;Intl&lt;/code&gt; for speed and slimness while providing what &lt;code&gt;Intl&lt;/code&gt; doesn't: an immutable user-friendly API. Concise, well-written documentation eases the learning curve for getting started. &lt;/p&gt;

&lt;h3 id="best-minimalist-option-dayjs"&gt;Best minimalist option: &lt;a href="https://www.skypack.dev/view/dayjs"&gt;Day.js&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For basic handling of dates, &lt;strong&gt;Day.js&lt;/strong&gt; is a minimalist library that offers an excellent API without much overhead. While &lt;strong&gt;Day.js&lt;/strong&gt; has fewer features than &lt;strong&gt;Luxon&lt;/strong&gt; or &lt;strong&gt;date-fns&lt;/strong&gt;, it's much smaller in size. &lt;/p&gt;

&lt;h2&gt;The Research&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#when-to-use-a-datetime-package"&gt;When to use a JavaScript date library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#our-previous-pick-momentjs"&gt;Our previous pick: Moment.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-we-picked"&gt;How we picked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#our-picks-in-detail"&gt;Our picks in detail&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#date-fns"&gt;Date-fns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dayjs"&gt;Day.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#luxon"&gt;Luxon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#other-datetime-packages"&gt;Other JavaScript date libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useful-resources"&gt;Useful Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="when-to-use-a-datetime-package"&gt;When to use a JavaScript date library&lt;/h2&gt;

&lt;p&gt;Why not just use JavaScript's built-in &lt;strong&gt;Date&lt;/strong&gt; object? A good JavaScript date library provides a clear advantage over JavaScript's &lt;strong&gt;Date&lt;/strong&gt; in several ways: immutability, parsing, and time zones. In addition, JavaScript date libraries offer useful utilities for date manipulation and formatting, which can save developers time and energy.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ Maggie Pint's blog post &lt;a href="https://maggiepint.com/2017/04/09/fixing-javascript-date-getting-started/"&gt;Fixing JavaScript Date&lt;/a&gt; describes how Javascript's &lt;strong&gt;Date&lt;/strong&gt; was based on a &lt;em&gt;Java&lt;/em&gt; (nope, not a typo) API from the 1990s. That Java API is long gone from Java but its problems live on in JavaScript's &lt;strong&gt;Date&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript's &lt;strong&gt;Date&lt;/strong&gt; is mutable, which can lead to unintentional bugs. Let's say you create a &lt;strong&gt;Date&lt;/strong&gt; object named &lt;code&gt;currentTime&lt;/code&gt;. You display it on top of the website. Another developer comes in and wants to create a widget that displays next weeks events. They use &lt;code&gt;currentTime.setDate(currentTime.getDate() + 7)&lt;/code&gt; at the top to the widget to display next week's date. However it also changes the date in the header! Oops. With an immutable date library, adding a week would create a new instance so the original would not change.&lt;/p&gt;

&lt;p&gt;While &lt;strong&gt;Date&lt;/strong&gt; has a &lt;code&gt;parse&lt;/code&gt; method, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date"&gt;MDN documentation for &lt;strong&gt;Date&lt;/strong&gt;'s &lt;code&gt;dateString&lt;/code&gt; notes&lt;/a&gt; that usage is "strongly discouraged." An excellent answer in the Stack Exchange question &lt;a href="https://stackoverflow.com/a/20463521"&gt;Why does Date.parse give incorrect results?&lt;/a&gt; describes in detail differences in formatting standards and browsers lead to inconsistent and unreliable results. If you need to parse, a date library is a must.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ &lt;a href="https://zachholman.com/talk/utc-is-enough-for-everyone-right"&gt;UTC is enough for everyone..right?&lt;/a&gt; is an incredible interactive presentation by Zach Holman on how dates work in programming&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Time zones are another major frustration. &lt;strong&gt;Date&lt;/strong&gt; in the browser always represents the local system date stored as milliseconds since January 1st, 1970 in UTC. A &lt;strong&gt;Date&lt;/strong&gt; can rendered as a &lt;code&gt;string&lt;/code&gt; in a different time zone using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl"&gt;&lt;strong&gt;Intl&lt;/strong&gt;&lt;/a&gt;, but the &lt;strong&gt;Date&lt;/strong&gt; itself is always the local system time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date&lt;/strong&gt; also lacks utilities for common tasks like creating human-readable relative dates. Using library utilities for such tasks can save a lot of time.&lt;/p&gt;
 

&lt;blockquote&gt;

&lt;p&gt;ℹ️ TC39, the major JavaScript standard's committee, is working on a new modern API called Temporal (&lt;a href="https://github.com/tc39/proposal-temporal"&gt;see the proposal here&lt;/a&gt;) that solves all of the above issues. &lt;a href="https://medium.com/better-programming/the-future-of-date-and-time-in-javascript-e1772c7976c"&gt;The Future of Date and Time in JavaScript&lt;/a&gt; by Christofer Eliasson is an excellent read of the history behind Temporal and what it means for JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the meantime, be aware of the limitations of &lt;strong&gt;Date&lt;/strong&gt; and use a library when you need one.&lt;/p&gt;

&lt;h2 id="our-previous-pick-momentjs"&gt;Our previous pick: Moment.js&lt;/h2&gt;

&lt;p&gt;For a long time &lt;strong&gt;Moment.js&lt;/strong&gt; was king of the JavaScript date libraries, but in 2020 &lt;strong&gt;Moment.js&lt;/strong&gt;'s maintainers published a &lt;a href="https://momentjs.com/docs/#/-project-status"&gt;Project Status&lt;/a&gt; announcing they consider Moment.js a legacy project. &lt;/p&gt;

&lt;p&gt;The maintainers argued that there was no way to refactor &lt;strong&gt;Moment.js&lt;/strong&gt; to meet the demands of modern JavaScript development such as immutability and tree shaking. Lighthouse (Chrome's built-in auditing tool) warns against using Moment because of its large size (329 kb).&lt;/p&gt;

&lt;p&gt;For these reasons, we do not include it as one of our recommended picks. If you are looking for a replacement to &lt;strong&gt;Moment.js&lt;/strong&gt; that closely matches its API, try &lt;strong&gt;Day.js&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id="how-we-picked"&gt;How we picked&lt;/h2&gt;

&lt;p&gt;We looked at data from &lt;a href="https://www.skypack.dev/"&gt;Skypack&lt;/a&gt; and &lt;a href="https://www.npmtrends.com/"&gt;NPM trends&lt;/a&gt; to identity the most popular and trending libraries and evaluated them against these core criteria:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Browser-friendly&lt;/strong&gt;: We evaluated JavaScript date libraries for use directly by the browser rather than the Node.js backend.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Great documentation&lt;/strong&gt;: Users look to this to implement the library correctly. We looked at the parts the facilitate this process: organization, search, examples, and the individual pages relating to the methods we tested.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Modularity + Tree shaking&lt;/strong&gt;: Modular architecture allows you to shrink your library size by "tree-shaking" out any library code you're not using. Common build tools capable of tree-shaking include &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;, &lt;a href="https://snowpack.dev/"&gt;Snowpack&lt;/a&gt; and &lt;a href="https://rollupjs.org"&gt;Rollup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Features&lt;/strong&gt;: Feature-richness was just one factor. We also considered whether a library was especially good at certain tasks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: Measuring performance gives us a clue at how fast each library performs common operations. This usually isn't noticeable but in large, complex apps can cause lag.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Size&lt;/strong&gt;: One of the biggest problems people had with &lt;strong&gt;Moment.js&lt;/strong&gt; was size. A large library can substantially increase page load times.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Anti-bug features&lt;/strong&gt;: Immutability, readability, and informative error messages can help prevent bugs. When code is readable, you can learn a lot about what it does by reading it. Format, syntax, and naming conventions can make all the difference in readability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="how-we-tested"&gt;How we tested&lt;/h3&gt;

&lt;p&gt;When evaluating each library we made a CodePen using Skypack. We attempted to pick out common use cases that illustrate differences between libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rendering the current date &amp;amp; time&lt;/li&gt;
&lt;li&gt;Rendering the current date using a custom format&lt;/li&gt;
&lt;li&gt;Modifying a date to add/remove time&lt;/li&gt;
&lt;li&gt;Working with timezones&lt;/li&gt;
&lt;li&gt;Parsing arbitrary date strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we implemented these cases using JavaScript's &lt;strong&gt;Date:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melissamcewen/embed/NWRMoLm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We wrote up examples for performance testing on &lt;a href="https://perf.link/"&gt;perf.link&lt;/a&gt; and all of the tests and code are available in the &lt;a href="https://github.com/melissamcewen/date-time-perf-examples/"&gt;Date/time performance examples GitHub repository&lt;/a&gt;. If you have a specific use-case, you can modify one of the provided examples. JavaScript date libraries contain hundreds of methods and features that we couldn't test them all. Instead, we opted to test the same methods demonstrated in our Codepens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TUNMdK6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.skypack.dev/blog/wp-content/uploads/2021/02/testing-performance-perf-link-skypack-javascript-date-library-1024x559.jpg" class="article-body-image-wrapper"&gt;&lt;img class="wp-image-79 size-large" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TUNMdK6j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.skypack.dev/blog/wp-content/uploads/2021/02/testing-performance-perf-link-skypack-javascript-date-library-1024x559.jpg" alt="A code block imports all the tested libraries via Skypack, then there are four blocks showing code for adding a week to a date using each JavaScript date library. The results are 1,990 ops/s Luxon, 25,495 ops/s Day.js, 817,780 ops/s JavaScript native date, 217,296 ops/s date-fns" width="1024" height="559"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/melissamcewen/pen/YzGMyyd"&gt;A chart of the performance data is also available on CodePen&lt;/a&gt;. The data  doesn't indicate a clear advantage for any one library. Each JavaScript date library implements different features differently, so that's not surprising.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⏱ For other performance comparisons see&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://inventi.studio/en/blog/why-you-shouldnt-use-moment-js"&gt;Why you shouldn't use Moment.js...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/you-dont-need/You-Dont-Need-Momentjs"&gt;You don't (may not) need Moment.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The sizes listed on each review are based on loading via the Skypack CDN. If you're using a build tool to tree-shake and the library is tree-shakable (like &lt;strong&gt;date-fns&lt;/strong&gt;), the size will depend on what parts you use. For evaluating libraries with tree-shaking we recommend &lt;a href="https://bundlephobia.com/"&gt;Bundlephobia.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A caveat to our testing is we did not consider back-end &lt;code&gt;Node.js&lt;/code&gt; use. Many JavaScript date libraries rely on browser APIs so may not work correctly on the back-end.&lt;/p&gt;

&lt;h4 id="other-cases-to-test"&gt;Other cases to test&lt;/h4&gt;

&lt;p&gt;Depending on your needs there are lots of other tests you could do. If you'd like to test other features not covered here, you can make changes to any of the examples in our embedded Codepens or &lt;a href="https://codepen.io/collection/DKYbjR"&gt;CodePen date collection&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does it let us know if we have an invalid date when we pass in invalid items? For example moment(undefined) behaves like moment() and doesn't output an error, which could lead to bugs.&lt;/li&gt;
&lt;li&gt;How well does it handle different languages and locales?&lt;/li&gt;
&lt;li&gt;Can it render relative dates (like "4 days ago")? Can it do this in different languages?&lt;/li&gt;
&lt;li&gt;Does it work in older browsers?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="our-picks-in-detail"&gt;Our picks in detail&lt;/h2&gt;

&lt;h3 id="date-fns"&gt;&lt;a href="https://www.skypack.dev/view/date-fns"&gt;Date-fns&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Size: 58.9 kb (tree-shakable)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melissamcewen/embed/bGwjaGV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;date-fns&lt;/strong&gt; is a pleasure to use, offering all the benefits of a modular architecture and covering almost any date use case. Our example shows the power of good naming and syntax in conveying information. Code like &lt;code&gt;add(now, {days: 7})&lt;/code&gt; is straightforward to understand even if you're unfamiliar with &lt;strong&gt;date-fns&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To get the most out of &lt;strong&gt;date-fns'&lt;/strong&gt;s modular architecture, use a tree-shaking build tool (see our criteria section) and import only the features you need:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { format, add, getHours, parse } from "https://cdn.skypack.dev/date-fns@2.16.1";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the example above, a tree-shaking build tool would remove all code from &lt;strong&gt;date-fns&lt;/strong&gt; that's not used in &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;getHours&lt;/code&gt;, or &lt;code&gt;parse&lt;/code&gt;. The final build would be much slimmer. Still at 58.9kb for the whole package, it's not giant in the first place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;date-fns&lt;/strong&gt; doesn't package a browser build for NPM (&lt;a href="https://github.com/date-fns/date-fns/issues/1780"&gt;see the related GitHub issue&lt;/a&gt;) and therefore only works on CDNs that transform for the browser like &lt;a href="https://www.skypack.dev/"&gt;Skypack&lt;/a&gt; and &lt;a href="https://www.jsdelivr.com/esm"&gt;ESM.run&lt;/a&gt;. However, documentation has examples labeled for the browser as both ESM(ES Modules) and ES2015. This ensures developers don't get confused trying to run &lt;code&gt;Node.js&lt;/code&gt; backend code in the browser.&lt;/p&gt;

&lt;h4 id="limitations"&gt;Limitations&lt;/h4&gt;

&lt;p&gt;Although we liked almost everything about &lt;strong&gt;date-fns&lt;/strong&gt;, it is not for everyone. For starters, &lt;strong&gt;date-fns&lt;/strong&gt; seems geared towards experienced developers working with a professional tool chain. Working without a build tool, the tree-shaking advantage disappears.&lt;/p&gt;

&lt;p&gt;Note that our CodePen example starts with a &lt;code&gt;const now = new Date()&lt;/code&gt;, which is the default JavaScript &lt;strong&gt;Date&lt;/strong&gt; object. As noted in our &lt;strong&gt;Date&lt;/strong&gt; section a &lt;strong&gt;Date&lt;/strong&gt; is always the current system's time zone. &lt;strong&gt;date-fns&lt;/strong&gt; has a separate library for working with time zones using helper functions. We found the documentation and examples for these helper functions less consistent than the main &lt;strong&gt;date-fns&lt;/strong&gt;. Our resulting code is less readable than the rest of the examples. Our time-zone example for &lt;strong&gt;date-fns&lt;/strong&gt; is 4 lines of code, compared to 1 for &lt;strong&gt;Luxon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Another quirk we encountered was if you Google "date-fns parse" the top results take you to the &lt;a href="https://date-fns.org/v2.0.0-alpha.9/docs/parse"&gt;v2.0.0-alpha docs for parse&lt;/a&gt;, which no longer work (the current version is 2.16). We found ourselves using Google because the documentation's built-in search seems to search only title and descriptions of sub-pages. The information architecture of the menu could also use improvement, as we would it overwhelmingly long. On occasion, a modal advertising "Get awesome JavaScript jobs to your email" covered the menu's bottom.&lt;/p&gt;

&lt;p&gt;The hardest part of implementing &lt;strong&gt;date-fns&lt;/strong&gt; Codepen examples was parsing, since they use different format tokens from other libraries. Furthermore, some tokens are not compatible with other tokens and the compatibility table is a Google doc that is hard to read.&lt;/p&gt;

&lt;h3 id="dayjs"&gt;&lt;a href="https://www.skypack.dev/view/dayjs"&gt;Day.js&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Size: 4kb&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melissamcewen/embed/LYRJvNm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If &lt;strong&gt;Date&lt;/strong&gt; fulfills &lt;strong&gt;almost&lt;/strong&gt; all your needs but you don't want to deal with its downsides, &lt;strong&gt;Day.js&lt;/strong&gt; is a great choice. &lt;strong&gt;Day.js&lt;/strong&gt;'s small size makes it ideal for build-tool free environments like CodePen and plain JS/HTML/CSS projects. If you're forced to support older browsers, &lt;strong&gt;Day.js&lt;/strong&gt; 's &lt;a href="https://github.com/iamkun/dayjs"&gt;Readme&lt;/a&gt; says it supports IE as far back as IE 7, though we did not test these capabilities.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Day.js&lt;/strong&gt; documentation claims "If you use Moment.js, you already know how to use Day.js", which would make migrating easier. You can see direct comparisons at the excellent &lt;a href="https://github.com/you-dont-need/You-Dont-Need-Momentjs"&gt;You don't (may not) need Moment.js&lt;/a&gt;. The code in our example CodePen is readable with the exception of the parsing and time zone cases.&lt;/p&gt;

&lt;p&gt;A well-organized menu helped us find what we need in the &lt;strong&gt;Day.js&lt;/strong&gt; documentation. In addition the documentation search gives great results organized by type. We liked that most documentation pages have example code.&lt;/p&gt;

&lt;h4 id="limitations"&gt;Limitations&lt;/h4&gt;

&lt;p&gt;Like &lt;strong&gt;date-fns&lt;/strong&gt;, &lt;strong&gt;Day.js&lt;/strong&gt; builds on top of JavaScript's &lt;strong&gt;Date&lt;/strong&gt;, so time zone support requires another library. But unlike &lt;strong&gt;date-fns&lt;/strong&gt;, &lt;strong&gt;Day.js&lt;/strong&gt; relies on a plugin system that we did not find intuitive. You not only need to import the plugin but you also need to enable it by running &lt;code&gt;dayjs.extend(plugin_name)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a stark contrast in our CodePen example between the time zone example and the other examples. The time zone example is much less readable and you'll also notice we commented it out. That's because it gave us incorrect results. It could be because our example time zone is an edge case or we did something wrong, but we attempted to follow the documentation. We recommend &lt;strong&gt;Luxon&lt;/strong&gt; instead if you need to deal with time zones.&lt;/p&gt;

&lt;p&gt;We encountered a few minor issues in the docs. The documentation does not contain any ESM (Es Modules) examples. This is especially apparent in &lt;a href="https://day.js.org/docs/en/plugin/loading-into-browser"&gt;the documentation for loading plugins in the browser&lt;/a&gt;, which recommends loading via script tag and then extending via the &lt;code&gt;window&lt;/code&gt; global. In general for readability and browser compatibility, we prefer to avoid globals.&lt;/p&gt;

&lt;p&gt;Unlike the other libraries you don't indicate a format with tokens when parsing. This worked fine in our CodePen but we wonder how correctly it would handle ambiguous formats. We felt &lt;a href="https://day.js.org/docs/en/parse/parse"&gt;the documentation could use more examples, specifically the parsing page&lt;/a&gt;. It took us a minute to realize parsing isn't its own method: you use &lt;code&gt;dayjs()&lt;/code&gt; and pass in a string. Unfortunately this syntax makes the code less understandable at a glance.&lt;/p&gt;

&lt;h3 id="luxon"&gt;&lt;a href="https://www.skypack.dev/view/luxon"&gt;Luxon&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Size: 29.5kb&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melissamcewen/embed/wvzYeNN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If time zones are high on your list of concerns, go with &lt;strong&gt;Luxon&lt;/strong&gt;. Dealing with time zones is never fun, so it's nice to use a library where it just works. Most date libraries don't have a built-in time-zone support because adding a time zone database is complex and adds a lot of weight to the final size. To get around this problem, &lt;strong&gt;Luxon&lt;/strong&gt; hacks into JavaScript's &lt;code&gt;Intl&lt;/code&gt; API, which most browsers support. It's the only JavaScript date library we evaluated that does not extend &lt;strong&gt;Date&lt;/strong&gt;, instead using its own &lt;code&gt;DateTime&lt;/code&gt; class. In our experience this makes working with time zones less bug-prone.&lt;/p&gt;

&lt;p&gt;Luxon's creator Isaac Cambron is a &lt;strong&gt;Moment.js&lt;/strong&gt; maintainer. In &lt;a href="https://moment.github.io/luxon/docs/manual/why.html"&gt;Why does Luxon exist&lt;/a&gt; he says "Luxon started because I had a bunch of ideas on how to improve Moment but kept finding Moment wasn't a good codebase to explore them with."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Luxon&lt;/strong&gt;'s documentation is divided up into a &lt;a href="https://moment.github.io/luxon/docs/manual"&gt;Manual&lt;/a&gt; and &lt;a href="https://moment.github.io/luxon/docs/identifiers.html"&gt;Reference&lt;/a&gt;. Since the more technical API documentation is in the &lt;a href="https://moment.github.io/luxon/docs/identifiers.html"&gt;Reference&lt;/a&gt;, the &lt;a href="https://moment.github.io/luxon/docs/manual"&gt;Manual&lt;/a&gt; is much more readable. Most importantly the &lt;a href="https://moment.github.io/luxon/docs/manual"&gt;Manual&lt;/a&gt; is well-written and organized into clear sections, with browser-friendly install instructions for ESM (ES Modules). The resulting code in our CodePen example is remarkably readable, particularly for the time zone case.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ℹ️ "Can't we just get rid of time zones?" A common developer refrain, usually after dealing with a time zone related bug. &lt;a href="https://qntm.org/abolish"&gt;So You Want To Abolish Time Zones&lt;/a&gt; is a great read on why that's not a panacea.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id="limitations"&gt;Limitations&lt;/h4&gt;

&lt;p&gt;We recommend &lt;strong&gt;date-fns&lt;/strong&gt; for date dependent applications because compared to &lt;strong&gt;Luxon&lt;/strong&gt; it has a larger feature set and is tree-shakable. If feature set is not a major concern, &lt;strong&gt;Day.js&lt;/strong&gt; is a better pick because it's ~7 times smaller than &lt;strong&gt;Luxon&lt;/strong&gt; (29.5kb for &lt;strong&gt;Luxon&lt;/strong&gt; vs. 4kb for &lt;strong&gt;Day.js&lt;/strong&gt;). Except for time zones, &lt;strong&gt;Luxon&lt;/strong&gt; doesn't offer a clear advantage.&lt;/p&gt;

&lt;p&gt;We noted above that &lt;strong&gt;Luxon&lt;/strong&gt; relies on &lt;code&gt;Intl&lt;/code&gt; and that &lt;strong&gt;most&lt;/strong&gt; browsers support it, but this doesn't include older browsers. &lt;a href="https://moment.github.io/luxon/docs/manual/matrix.html"&gt;A polyfill&lt;/a&gt; is available, but this will increase the complexity and size of using &lt;strong&gt;Luxon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A minor quibble is &lt;strong&gt;Luxon&lt;/strong&gt;'s documentation search doesn't seem to index the entire text.&lt;/p&gt;

&lt;h2 id="other-datetime-packages"&gt;Other JavaScript date libraries&lt;/h2&gt;

&lt;p&gt;Here are two interesting JavaScript date libraries that we didn't have time to evaluate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.skypack.dev/view/date-and-time"&gt;date-and-time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.skypack.dev/view/@js-joda/core"&gt;js-Joda&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="useful-resources"&gt;Useful Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://exploringjs.com/impatient-js/ch_dates.html"&gt;JavaScript for impatient programmers (ES2020 edition): Dates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zachholman.com/talk/utc-is-enough-for-everyone-right"&gt;UTC is Enough for Everyone, Right?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/better-programming/the-future-of-date-and-time-in-javascript-e1772c7976c"&gt;The Future of Date and Time in JavaScript | by Christofer Eliasson | Better Programming | Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/you-dont-need/You-Dont-Need-Momentjs"&gt;you-dont-need/You-Dont-Need-Momentjs: List of functions which you can use to replace moment.js + ESLint Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/4-alternatives-to-moment-js-for-internationalizing-dates/"&gt;4 alternatives to Moment.js for internationalizing dates - LogRocket Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Polyfills, Ponyfills, and Transpiling</title>
      <author>Tyler Hawkins</author>
      <pubDate>Tue, 16 Feb 2021 15:16:58 +0000</pubDate>
      <link>https://dev.to/thawkin3/polyfills-ponyfills-and-transpiling-22lb</link>
      <guid>https://dev.to/thawkin3/polyfills-ponyfills-and-transpiling-22lb</guid>
      <description>&lt;p&gt;When discussing new JavaScript features and syntax, it’s common to hear words like &lt;strong&gt;polyfill&lt;/strong&gt;, &lt;strong&gt;transpile&lt;/strong&gt;, and even &lt;strong&gt;ponyfill&lt;/strong&gt; used. For example, someone might say, “In order to use this in older browsers, you’ll need to use Babel to transpile the code.” Or maybe, “Make sure to provide a polyfill for this functionality so that older browsers can use it.”&lt;/p&gt;

&lt;p&gt;If you’re not familiar with these terms, you may be asking yourself, “What’s the difference? Are these all just interchangeable words that mean the same thing?”&lt;/p&gt;

&lt;p&gt;In this article, we’ll define these terms and clear the air of any surrounding confusion.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#polyfill" class="anchor"&gt;
  &lt;/a&gt;
  Polyfill
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;polyfill&lt;/strong&gt; is used to implement an API or feature that the browser does not support. The polyfill code is implemented and stored in the same variable or method name that it would have been in had the browser supported the given feature.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;Promise&lt;/code&gt; object for working with asynchronous JavaScript is &lt;a href="https://caniuse.com/promises"&gt;not supported in IE11&lt;/a&gt;. Trying console logging &lt;code&gt;window.Promise&lt;/code&gt; in IE11, and you’ll see that the result is &lt;code&gt;undefined&lt;/code&gt;. Now try console logging &lt;code&gt;window.Promise&lt;/code&gt; in just about any other browser, and you’ll see that it contains a constructor function used to create new &lt;code&gt;Promise&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;In order for promises to work in IE11, you would need to provide a polyfill. The polyfill patches the global scope for your app by storing the needed functionality inside the &lt;code&gt;window.Promise&lt;/code&gt; variable. After applying the polyfill, you could then console log &lt;code&gt;window.Promise&lt;/code&gt; and get a function.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ponyfill" class="anchor"&gt;
  &lt;/a&gt;
  Ponyfill
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;ponyfill&lt;/strong&gt; is also used to implement an API or feature that the browser does not support. &lt;em&gt;But&lt;/em&gt;, unlike polyfills, ponyfills do not affect the global scope.&lt;/p&gt;

&lt;p&gt;For example, if we wanted to use promises without polluting the global scope, we could use a package like &lt;a href="https://www.npmjs.com/package/promise-polyfill"&gt;promise-polyfill&lt;/a&gt;. This package offers both a polyfill and a ponyfill.&lt;/p&gt;

&lt;p&gt;To use the polyfill, we’d simply import the necessary file. Note how we don’t store the import in a variable. It simply patches the &lt;code&gt;window&lt;/code&gt; object to now include a &lt;code&gt;Promise&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;promise-polyfill/src/polyfill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But, if we wanted to use the ponyfill, we’d do this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;promise-polyfill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now instead of affecting the global scope, we’ve imported the &lt;code&gt;Promise&lt;/code&gt; functionality and stored it in a variable. That means &lt;code&gt;window.Promise&lt;/code&gt; is still &lt;code&gt;undefined&lt;/code&gt;, but we can still create new promises in our file by writing &lt;code&gt;new Promise();&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#transpiling" class="anchor"&gt;
  &lt;/a&gt;
  Transpiling
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;transpiler&lt;/strong&gt; is used to transform code from one syntax to another. For example, you can use &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; to convert your code from ES6+ syntax to ES5 syntax so that older browsers like IE11 can understand it.&lt;/p&gt;

&lt;p&gt;The key here is that transpilers are needed for &lt;em&gt;syntax&lt;/em&gt; that the browser can’t understand. You can polyfill missing objects or methods, but you cannot polyfill syntax.&lt;/p&gt;

&lt;p&gt;IE11, for example, &lt;a href="https://caniuse.com/arrow-functions"&gt;does not support arrow functions&lt;/a&gt; and does not understand the &lt;code&gt;=&amp;gt;&lt;/code&gt; syntax. You can’t polyfill syntax, and there’s no way to make IE11 understand what you mean when you write &lt;code&gt;const add = (a, b) =&amp;gt; a + b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead, you must transpile the code to convert it into different older syntax that IE11 can understand: &lt;code&gt;function add(a, b) { return a + b; }&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There you have it. Now you, too, know the difference between polyfills, ponyfills, and transpiling.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>babel</category>
    </item>
    <item>
      <title>How to Get Better at Solving Programming Problems</title>
      <author>Amy Haddad</author>
      <pubDate>Tue, 16 Feb 2021 15:08:43 +0000</pubDate>
      <link>https://dev.to/amymhaddad/how-to-get-better-at-solving-programming-problems-23j5</link>
      <guid>https://dev.to/amymhaddad/how-to-get-better-at-solving-programming-problems-23j5</guid>
      <description>&lt;p&gt;Most of us have been given the same advice: to become a better problem solver, you need to solve more problems. But this advice is too simplistic. Getting good at anything requires more than just reps. It’s also &lt;em&gt;how&lt;/em&gt; you go about it.&lt;/p&gt;

&lt;p&gt;Besides, when programmers hear the advice “solve more problems,” they often think that “more” means faster. It’s a mistake I made when starting out. &lt;/p&gt;

&lt;p&gt;The problem-solving treadmill can be detrimental to learning and improving. Early on I’d speed through one problem and head to the next. But the reality of that approach soon set in. By focusing on quantity, I compromised quality and missed key learnings along the way.   &lt;/p&gt;

&lt;p&gt;It’s not to say that repetition doesn’t matter; it does. However, repetition alone doesn’t get to the heart of the matter. The process does.&lt;/p&gt;

&lt;p&gt;I have a vested interest in this topic: I want to get better at solving problems in order to improve as a programmer. So here I offer my plan of attack. It involves reps to be sure—and a whole lot more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-solve-a-variety-of-problems-on-a-variety-of-platforms" class="anchor"&gt;
  &lt;/a&gt;
  1. Solve a Variety of Problems on a Variety of Platforms
&lt;/h2&gt;

&lt;p&gt;“I was obsessed with HackerRank when I began learning to code,” said an instructor of a Python course I was taking. Although it’s fine to have a favorite platform, don’t limit yourself to a single one. Here’s why: you need to be ready for anything.&lt;/p&gt;

&lt;p&gt;One goal of mine is to toggle smoothly among different problem types and across different platforms. The problems on Interview Cake are different than those in Reuven Lerner’s book, &lt;em&gt;Python Workout&lt;/em&gt;. Likewise I find the problem statements in Lerner’s Weekly Python Exercise different from those on HackerRank.&lt;/p&gt;

&lt;p&gt;I have my preferences, to be sure. However, I need to be able to solve problems of all types. So I’m using a variety of platforms and resources to get practice.&lt;/p&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LeetCode&lt;/li&gt;
&lt;li&gt;Interview Cake&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Cracking the Coding Interview&lt;/em&gt; by Gayle Laakmann McDowell&lt;/li&gt;
&lt;li&gt;Exercism&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Python Workout&lt;/em&gt; by Reuven Lerner&lt;/li&gt;
&lt;li&gt;Weekly Python Exercise by Reuven Lerner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On Sundays, when I make &lt;a href="https://amymhaddad.com/working-in-blocks-of-time"&gt;my plan&lt;/a&gt; for the week ahead, I select a few problems from the above resources. I’m deliberate about it. For example, I’ll pick a problem that focuses on binary search from LeetCode. Then, one that focuses on data structures from one of Reuven Lerner’s sources. &lt;/p&gt;

&lt;p&gt;This practice prevents me from getting too comfortable. I can’t rely on the same data structure or technique. I need to be able to pick the best tool for the job. I’ve got to be able to pivot. &lt;/p&gt;

&lt;p&gt;It also challenges me. That’s because I select problems that push me to the edge of my limits, a feature of what psychologist Anders Ericsson calls “deliberate practice.”&lt;/p&gt;

&lt;p&gt;Deliberate practice is all about skill development. It’s a fully-focused, conscious effort that takes you out of your “comfort zone,” centers on a specific goal, and “demands near-maximal effort,” Ericsson explains in his excellent book, &lt;em&gt;Peak&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In other words, you’re not going through the motions doing something that comes easy or natural. “The hallmark of . . . deliberate practice,” Ericsson writes, “is that you try to do something you cannot do.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-crosstrain-your-programming-brain" class="anchor"&gt;
  &lt;/a&gt;
  2. Cross-Train Your Programming Brain
&lt;/h2&gt;

&lt;p&gt;You often hear about athletes who incorporate cross-training into their routine. For example, a runner completes a bike workout or two each week. It makes a lot of sense: by cross-training athletes push their cardiovascular fitness from a different angle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://amymhaddad.com/why-you-should-cross-train-your-programming-brain"&gt;Cross-training for programmers&lt;/a&gt; is a topic I’ve written about before. Yet, more needs to be said about the benefits of this approach. Just like an athlete cross-trains to improve their cardiovascular fitness, I’m incorporating cross-training to improve my mental fitness. &lt;/p&gt;

&lt;p&gt;My cross-training involves solving math problems. I apply the same tactics I’d use to solve a programming problem but in mathematics. Same process, different context. &lt;/p&gt;

&lt;p&gt;My current math book provides the cross-training benefits mentioned above. But it’s doing something more: it’s helping me build my intuition for solving problems. &lt;/p&gt;

&lt;p&gt;That’s an important point. I don’t want to memorize a math equation or process. I want to intuitively know when to use it. The same is true when solving programming problems.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-learn-from-your-solutions" class="anchor"&gt;
  &lt;/a&gt;
  3. Learn from Your Solutions
&lt;/h2&gt;

&lt;p&gt;All of us get stuck and all of us get errors while problem-solving. We use these failures to help us figure out what to do differently. &lt;/p&gt;

&lt;p&gt;Oftentimes that’s where the learning stops. Once we’ve solved the problem we’re anxious to move along. But don’t. &lt;/p&gt;

&lt;p&gt;Mathematician Richard Hamming suggests that’s when the learning should begin. &lt;/p&gt;

&lt;p&gt;“I regard the study of successes as being basically more important than the study of failures...there are so many ways of being wrong and so few of being right, studying successes is more efficient,” Hamming writes in his book, &lt;em&gt;The Art of Doing Science and Engineering&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This idea of "looking back" and studying your successes is a topic I've &lt;a href="https://www.freecodecamp.org/news/when-are-you-done-with-a-programming-problem/"&gt;written about previously&lt;/a&gt;, and it's worth noting again.&lt;br&gt;
You always hear about how we need to "learn from our failures." But Hamming is right: there's so much to learn from our successes.&lt;/p&gt;

&lt;p&gt;So one of the biggest changes I’ve made to my problem-solving process is putting Hamming’s words to practice. I vividly recall solving my first problem that involved a linked list, a data structure that was new to me at the time. After I solved the problem, I studied it intently. I copied my solution into a Google Doc file and used comments to explain the code to myself. &lt;/p&gt;

&lt;p&gt;I wanted to ensure I clearly understood &lt;em&gt;what&lt;/em&gt; I did and &lt;em&gt;why&lt;/em&gt; for this critical reason: so I could do it again. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-get-feedback" class="anchor"&gt;
  &lt;/a&gt;
  4. Get Feedback
&lt;/h2&gt;

&lt;p&gt;Awareness can be a wonderful teacher. &lt;/p&gt;

&lt;p&gt;Don’t assume your solutions are great. Find out for yourself by getting feedback. Feedback is a critical factor when it comes to getting better. It’s also a component of deliberate practice.&lt;/p&gt;

&lt;p&gt;There are two ways I’m getting feedback.&lt;/p&gt;

&lt;p&gt;First, after I complete a problem, I study the solutions of others. Sometimes resources, like LeetCode and &lt;em&gt;Cracking the Coding Interview&lt;/em&gt;, provide the solution. Other times I find the solution of a programmer who’s solved the same problem. Sometimes use both.&lt;/p&gt;

&lt;p&gt;Either way, the next step is the same: I start at the top of the solution and explain each line in my own words. I speculate &lt;em&gt;why&lt;/em&gt; the programmer chose this particular data structure, for example. Then, I write a short summary of the program to solidify the core concepts or new approaches that I just learned about.&lt;/p&gt;

&lt;p&gt;Putting something complicated, like a line of code, into your own words is a great test to see if you really understand it. Plus, you get practice at another core skill: &lt;a href="https://amymhaddad.com/why-reading-code-matters"&gt;reading code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If there’s something that’s new to me, I research it. I compare their code to my own. I study. I evaluate. I learn. It’s an arduous process, but I get so much from it.&lt;/p&gt;

&lt;p&gt;The second way to get feedback is to simply ask another programmer for it. Video calls are helpful to step through code line by line in real time. Although, pull requests are useful, too.&lt;/p&gt;

&lt;p&gt;There’s a point to the feedback: apply it! Put your learnings into practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-be-consistent" class="anchor"&gt;
  &lt;/a&gt;
  5. Be Consistent
&lt;/h2&gt;

&lt;p&gt;Now let’s talk about repetition. Problem-solving is a skill. Like any skill, it takes time to build. It simply doesn’t happen overnight or over a weekend. That’s why I devote time each day to problem-solving. &lt;/p&gt;

&lt;p&gt;There’s a common reaction to this daily practice: “There’s too much to learn. I can’t spend time each day problem-solving.”&lt;/p&gt;

&lt;p&gt;My response is two-fold. First, there’s always going to be something more to learn, &lt;em&gt;always&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Second, in large part programming &lt;em&gt;is&lt;/em&gt; problem-solving. It's fundamental to our craft. It’s worthy of your time and attention each day. Here’s the caveat: make your daily practice intentional. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-an-art" class="anchor"&gt;
  &lt;/a&gt;
  It’s an Art
&lt;/h2&gt;

&lt;p&gt;Many people regard problem-solving as an art. I happen to agree with that sentiment. The same can be said for the process itself. &lt;/p&gt;

&lt;p&gt;The ideas outlined in this article are my approach for getting better at problem-solving. Your approach may look very different. The point is this: be intentional about your practice. Quality matters; make each problem count.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Programmer and writer: &lt;a href="https://amymhaddad.com/"&gt;amymhaddad.com&lt;/a&gt; | I tweet about programming, learning, and productivity | Creator of Programmer’s Pyramid: &lt;a href="https://programmerspyramid.com/"&gt;programmerspyramid.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published on &lt;a href="https://amymhaddad.com/how-to-get-better-at-solving-programming-problems"&gt;amymhaddad.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Debouncing in Javascript.</title>
      <author>Abhishek Jain</author>
      <pubDate>Tue, 16 Feb 2021 15:05:49 +0000</pubDate>
      <link>https://dev.to/abhishekjain35/debouncing-in-javascript-276j</link>
      <guid>https://dev.to/abhishekjain35/debouncing-in-javascript-276j</guid>
      <description>&lt;p&gt;Debouncing is a pattern that allows &lt;em&gt;&lt;strong&gt;delaying execution of some piece of code&lt;/strong&gt;&lt;/em&gt; until a specified time to &lt;strong&gt;avoid unnecessary CPU cycles, API calls and improve performance.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-debouncing" class="anchor"&gt;
  &lt;/a&gt;
  Why debouncing?
&lt;/h2&gt;

&lt;p&gt;One word "&lt;strong&gt;Performance&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;Suppose, you are building an e-commerce application. There you have to implement a search bar for searching products And when the user types in a character, an API call is made.&lt;/p&gt;

&lt;p&gt;Look at the example below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/abhishekjain35/embed/WNopLYV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the above example, we're having a simple searchBar and a count of API calls made. As we type in the searchBar, the count of API called increases with each character. But that's not what we want to happen. What we want is to wait for the user to stop typing. As soon as the user stops typing then we want to make the API call.&lt;/p&gt;

&lt;p&gt;so, how can we fix this? - here comes debouncing into play.&lt;/p&gt;

&lt;p&gt;Final version with debouncing.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/abhishekjain35/embed/QWGpoeZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Pretty cool huh?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-debouncing-function" class="anchor"&gt;
  &lt;/a&gt;
  The debouncing function
&lt;/h3&gt;

&lt;p&gt;Take a look at this debounce function we implemented above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What we are doing here is, initialize a timer then return a &lt;code&gt;function&lt;/code&gt;. As soon as the user starts typing the &lt;code&gt;function&lt;/code&gt; executes -:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First it clears the timer if it's initialized.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;then it assigns the timer setTimeout function, which will run after 1 second if it is not cleared.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the user types any character within 1 second the &lt;code&gt;function&lt;/code&gt; will be called again. But in the above step, we already assigned the setTimeout function to the timer variable. So the clearTimeout will clear the function from the timer variable and also assign a new setTimeout function to the timer variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the user didn't type and 1 second has passed, the function in setTimeout will execute and make the API call.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it.&lt;/p&gt;

&lt;p&gt;The full version of the debounce function with &lt;code&gt;this&lt;/code&gt; and argument binding is -:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Well, this is it from my side. See you soon 😁&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hrRJ41JB2zlgZiYcCw/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hrRJ41JB2zlgZiYcCw/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Slowing Down (to go faster)</title>
      <author>Paul Kaplan</author>
      <pubDate>Tue, 16 Feb 2021 14:34:30 +0000</pubDate>
      <link>https://dev.to/pkaplan/slowing-down-to-go-faster-57nk</link>
      <guid>https://dev.to/pkaplan/slowing-down-to-go-faster-57nk</guid>
      <description>&lt;p&gt;I love to build things, fast. My individual creative process revolves around getting pixels on the screen right away, and iterating from there. While at the project/team level I am a good planner and coordinator, for my personal work, I like to “mess around”. &lt;/p&gt;

&lt;p&gt;But I’ve had problems with this strategy. I often sink days into problems that could have been avoided by reading the documentation or understanding the issue more deeply. This often happens on infrastructure and build system problems, where I skip over the details to get more quickly to “the good stuff” of building and testing complex and fun user interfaces. &lt;/p&gt;

&lt;p&gt;Worse, I haven't always left code “better than I found it”, something I almost always regret and probably makes me less effective as a team programmer.&lt;/p&gt;

&lt;p&gt;This year I want to "level up" my engineering skills, and I think "slow down (to go faster)" is a good framing for me. I specifically want to spend time understanding things that enable myself and my team to build unobstructed. Things like:&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#webpack-configuration" class="anchor"&gt;
  &lt;/a&gt;
  Webpack configuration
&lt;/h3&gt;

&lt;p&gt;what are the best practices for using webpack to build sub-dependencies, how do the different plugins I use actually work&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#babel-transpiler-settings" class="anchor"&gt;
  &lt;/a&gt;
  Babel transpiler settings
&lt;/h3&gt;

&lt;p&gt;how does "preset-env" work, where should settings go (babelrc vs package.json vs. webpack options)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#localization-workflows" class="anchor"&gt;
  &lt;/a&gt;
  Localization workflows
&lt;/h3&gt;

&lt;p&gt;The projects I work on are translated in &amp;gt;40 languages, and I want to know how our localization works well enough to inform other choices we might need to make, like adopting a Content Management System.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#deployment-process" class="anchor"&gt;
  &lt;/a&gt;
  Deployment process
&lt;/h3&gt;

&lt;p&gt;We deploy on a rigid schedule that makes things difficult in many ways. I want to understand how other teams adopt continuous integration when thinking about QA. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#npm-packaging-bestpractices" class="anchor"&gt;
  &lt;/a&gt;
  NPM packaging best-practices
&lt;/h3&gt;

&lt;p&gt;I often deal with an ecosystem of related JS modules published to NPM, some React, some non-React. How do others publish code that needs transpiling like JSX? What about packages with lots of image/style assets?&lt;/p&gt;




&lt;p&gt;One common element in these types of issues is that I'm being asked to use a tool I do not fully understand that has been built up over years. I never get to the "messing around" part, where I think &lt;a href="https://itp.nyu.edu/classes/cow-fall2015/wp-content/uploads/sites/61/2014/09/Messing-about-in-Science.pdf"&gt;so much learning happens&lt;/a&gt; because I haven't stripped things down to their basics. So instead of trying to understand a complex system as-is, I'll harness my love of "messing about" and build lots of little dummy projects to see how each individual part works. Hopefully I'll have some follow up posts in the next few days about how this works. &lt;/p&gt;

&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@bmatangelo?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Brian Matangelo&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/diving-deep?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Are there things that you've "hand waved" (i.e. copy/pasted) your way through that came back to bite you?&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>watercooler</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
