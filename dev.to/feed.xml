<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 10 Customer Relationship Management (CRM) Software in 2021
</title>
      <author>Rajesh Shirsagar</author>
      <pubDate>Fri, 23 Apr 2021 11:24:13 +0000</pubDate>
      <link>https://dev.to/invokker/top-10-customer-relationship-management-crm-software-in-2021-2d9k</link>
      <guid>https://dev.to/invokker/top-10-customer-relationship-management-crm-software-in-2021-2d9k</guid>
      <description>&lt;p&gt;Customer relationship management (CRM) software is crucial for every organization to enhance their relationships; with their clients. Additionally, this software also helps track, record, and manage every customer interaction on a central server.&lt;/p&gt;

&lt;p&gt;Every business might have a different requirement depending on their business process. As a reason, you need to choose the best CRM software that understands the business objectives and helps to achieve them. There are multiple CRM system vendors in the market, which is why it might be difficult to choose; the best one.   &lt;/p&gt;

&lt;p&gt;We are a software recommendation platform and made a list of the top ten CRM software in 2021, depending on their features. The following list of software is in alphabetical order: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creatio CRM
Creatio CRM system is an all-inclusive platform to enhance marketing, sales, and customer service. It is an end-to-end platform that provides tools for all the departments and helps enrich the customer experience. One of the superpowers of this solution is that it has a BPM engine to change processes quickly. Additionally, it also provides a 14 days free trial so that you can understand how this CRM software adapts to your business.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Features:&lt;br&gt;&lt;br&gt;
-Customer 360-degree view.&lt;br&gt;&lt;br&gt;
-Customer segmentation.&lt;br&gt;&lt;br&gt;
-Manage omnichannel marketing campaigns.&lt;br&gt;&lt;br&gt;
-Lead qualification.&lt;br&gt;&lt;br&gt;
-Lead engagement.&lt;br&gt;&lt;br&gt;
-Lead distribution.&lt;br&gt;&lt;br&gt;
-Lead analysis.&lt;br&gt;&lt;br&gt;
-Opportunity management.  &lt;/p&gt;

&lt;p&gt;Furthermore, there are multiple features this CRM solution can offer; which you can explore on their profile page.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Digital CRM
Digital CRM is an online CRM software that allows you to automate most aspects of the workflow process. This software solution allows; you to have an unlimited number of users and records with admin role management. Moreover, you can install this software on your webserver, localhost, or on-premises.  This CRM system allows you to customize the software according to your business needs. One of the best advantages of this solution is that it is affordable without any hidden charges.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Features:&lt;br&gt;&lt;br&gt;
-Salesforce automation.&lt;br&gt;&lt;br&gt;
-CRM dashboard.&lt;br&gt;&lt;br&gt;
-Contact management.&lt;br&gt;&lt;br&gt;
-Lead management.&lt;br&gt;&lt;br&gt;
-Sales pipeline.&lt;br&gt;&lt;br&gt;
-Reports and analytics.&lt;br&gt;&lt;br&gt;
-Lead management.&lt;br&gt;&lt;br&gt;
-Role management.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Freshsales CRM
Freshsales CRM software has all the necessary tools to make your sales force better. This software solution integrates artificial intelligence to score lead, phone, email, and activity capture. Additionally, it acts as a central server for your team to access 360 degrees of your customer profile because it captures and gathers customer experience in a single platform. One of the top CRM systems that allow you to customize to fit your business needs. Furthermore, it increases the productivity of your team with the help of automation.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Features:&lt;br&gt;&lt;br&gt;
-Workflow automation.&lt;br&gt;&lt;br&gt;
-Customer lifecycle.&lt;br&gt;&lt;br&gt;
-Sales analytics.&lt;br&gt;&lt;br&gt;
-Marketing analytics.&lt;br&gt;&lt;br&gt;
-Email campaigns.&lt;br&gt;&lt;br&gt;
-Conversion rate optimization.&lt;br&gt;&lt;br&gt;
-Deal management.&lt;br&gt;&lt;br&gt;
-Chat campaigns.&lt;br&gt;&lt;br&gt;
-Event tracking.&lt;br&gt;&lt;br&gt;
-Sales sequences.  &lt;/p&gt;

&lt;p&gt;These are the top features of this system you can explore more on their profile page. &lt;/p&gt;

&lt;p&gt;Want to view full list then please visit my lates CRM blog at-&amp;gt;&lt;a href="https://bit.ly/3x0s6jr"&gt;https://bit.ly/3x0s6jr&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Las 8 mejores herramientas de autor de e-learning para usar en el 2021</title>
      <author>meydele</author>
      <pubDate>Fri, 23 Apr 2021 11:23:08 +0000</pubDate>
      <link>https://dev.to/feygele/las-8-mejores-herramientas-de-autor-de-e-learning-para-usar-en-el-2021-23cc</link>
      <guid>https://dev.to/feygele/las-8-mejores-herramientas-de-autor-de-e-learning-para-usar-en-el-2021-23cc</guid>
      <description>&lt;p&gt;Elegir una herramienta de autor de e-learning puede a veces tomar un esfuerzo parecido al de crear el curso. Hacer una comparación de herramientas de autor no es tan fácil como parece ya que no solamente se trata del conjunto de funcionalidades técnicas de una herramienta, sino también de cómo va a encajar en tu flujo de trabajo. Una herramienta ideal permite al diseñador instruccional enfocarse en desarrollar un buen contenido de aprendizaje sin tener que preocuparse sobre problemas técnicos pero al mismo tiempo es lo suficientemente flexible como para hacer una visión realidad.&lt;/p&gt;

&lt;p&gt;En este artículo, echaremos un vistazo de cerca a ocho populares herramientas de autor de desarrolladores líderes, incluyendo iSpring, Articulate, Adobe, Elucidat, y Trivantis. Entonces, empecemos.&lt;/p&gt;

&lt;p&gt;Antes de adentrarnos en el tema, aquí presentamos una tabla de comparación rápida si estás corto de tiempo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1UmksW8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06mvmubpsaqbhxoqihx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1UmksW8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06mvmubpsaqbhxoqihx5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ispring-suite"&gt;
  &lt;/a&gt;
  1. iSpring Suite
&lt;/h2&gt;

&lt;p&gt;Clasificación: 4,6/5 – 1,087 reseñas &lt;a href="https://www.capterra.es/software/124358/ispring-suite"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows&lt;br&gt;
Precio: 690 €/ $ 770 por autor/año&lt;br&gt;
Descuentos: Académico, sin fines de lucro&lt;br&gt;
Prueba: 14-dias muestra gratis &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0pG4Ai_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ejjwhzni8qzn8ipdm7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0pG4Ai_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ejjwhzni8qzn8ipdm7w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ispring.es/ispring-suite"&gt;iSpring Suite&lt;/a&gt; es un conjunto de herramientas de autor de eLearning diseñadas para crear rápidamente cursos en línea. Está integrado a PowerPoint, así que el contenido de las presentaciones puede ser fácilmente aprovechado y reutilizado. Puedes crear cursos de aspecto profesional que incluyan cuestionarios o evaluaciones y simulaciones de diálogo sin la necesidad de programación de código técnico o formación extensa. Los cursos desarrollados pueden ser archivos de salida en todos los formatos populares de eLearning, incluyendo SCORM, xAPI, cmi5, y HTML5.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DW3x8rtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgr03eeas1yz6io92cws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DW3x8rtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lgr03eeas1yz6io92cws.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Más adecuada para&lt;/strong&gt;&lt;br&gt;
iSpring Suite es una herramienta sencilla que te permitirá crear cursos inmediatamente después de su compra. Si alguna vez has creado una presentación de PowerPoint, entonces iSpring Suite será intuitivo para ti. Serás capaz de crear tu primer curso sin ninguna formación previa.&lt;/p&gt;

&lt;p&gt;Es una buena herramienta para aquellos que quieren rápidamente lanzar su curso en línea. Esta herramienta te permitirá enfocarte en diseñar contenido de aprendizaje rápidamente sin tener que lidiar con problemas técnicos.&lt;/p&gt;

&lt;p&gt;Puedes &lt;a href="https://www.ispring.es/ispring-suite/download"&gt;probar iSpring Suite&lt;/a&gt; registrándote para una prueba gratuita.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-adobe-captivate"&gt;
  &lt;/a&gt;
  2. Adobe Captivate
&lt;/h2&gt;

&lt;p&gt;Clasificación: 4,6/5 – 157 reseñas &lt;a href="https://www.capterra.es/software/181977/adobe-captivate"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows y iOS&lt;br&gt;
Precio: Suscripción mensual por $33,99 o 41,47 €&lt;br&gt;
Descuentos: Estudiantes y maestros&lt;br&gt;
Prueba: Prueba gratuita de 30 días&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AP6OzFvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6lt54c2g06qw6erfn1l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AP6OzFvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6lt54c2g06qw6erfn1l.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.adobe.com/es/"&gt;Adobe Captivate&lt;/a&gt; es una herramienta a nivel profesional para desarrollar contenido eLearning y experiencias de aprendizaje compatibles con dispositivos móviles. Es una herramienta de autor con funciones completas que te da un amplio control sobre todos los aspectos de tu curso y te permite personalizarlo a través de elementos programables tales como objetos, variables y eventos desencadenantes. &lt;/p&gt;

&lt;p&gt;Captivate puede presumir de un conjunto de funciones robustas; sin embargo, tiene un estilo de diseño lineal tradicional en comparación con herramientas de autor más modernas. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l45u_Wgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80t3fnk5spf7lrzcrk7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l45u_Wgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/80t3fnk5spf7lrzcrk7v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Más adecuada para&lt;/strong&gt;&lt;br&gt;
Este es un gran programa si quieres ofrecerle a tus estudiantes una extensa experiencia de aprendizaje móvil, incorporar funciones de VR, o crear simulaciones de programas. Es la más adecuada para desarrolladores de eLearning con experiencia que estén cómodos trabajando con variables y algo de código para hacer realidad la magia. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-articulate-360"&gt;
  &lt;/a&gt;
  3. Articulate 360
&lt;/h2&gt;

&lt;p&gt;Clasificación: 4,7/5 – 364 reseñas &lt;a href="https://www.capterra.es/software/156978/articulate-360"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows&lt;br&gt;
Precio: $1,299 por usuario, anualmente&lt;br&gt;
Descuentos: Académico, licencias por equipos de trabajo&lt;br&gt;
Prueba: Prueba gratuita de 60 días&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQi64lKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78fuq9cz99fyuzkj2fqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQi64lKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78fuq9cz99fyuzkj2fqg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://articulate.com/360/"&gt;Articulate 360&lt;/a&gt; está posicionada como una herramienta integral para la creación, revisión e implementación de eLearning. El conjunto de herramientas 360 incluye nueve productos de Articulate:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#storyline-360"&gt;
  &lt;/a&gt;
  Storyline 360
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#studio-360"&gt;
  &lt;/a&gt;
  Studio 360
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#replay-360"&gt;
  &lt;/a&gt;
  Replay 360
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#preso"&gt;
  &lt;/a&gt;
  Preso
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#peek"&gt;
  &lt;/a&gt;
  Peek
&lt;/h6&gt;

&lt;p&gt;Servicios Web Rise, Review, Content Library, y Articulate Live. &lt;br&gt;
Tres de estas herramientas están diseñadas principalmente para la creación de cursos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Articulate Studio 360&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si eres nuevo en eLearning pero sabes cómo trabajar con PowerPoint, será fácil empezar con Articulate Studio 360, que es una adición a Powerpoint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Articulate Rise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Articulate Rise está 100% basado en la web y utiliza bloques para permitirte crear cursos lineales simples al incluir tu contenido.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Articulate Storyline 360&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Articulate Storyline 360 es la herramienta de autor independiente más avanzada. Su interfaz es similar a PowerPoint, así que algunas opciones serán intuitivas para usuarios novatos. Te permite crear cursos eLearning que incluyen la función de narración, vídeo, y animación. También puedes crear cuestionarios para evaluar a los estudiantes, simulaciones, e interacciones de arrastrar y soltar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vuSbjdL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0t0jtvwf4b38pkh14hv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vuSbjdL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w0t0jtvwf4b38pkh14hv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Más adecuada para&lt;/strong&gt;&lt;br&gt;
Equipos de trabajo que harán uso de todos los componentes, de lo contrario pagarás de más por la herramienta completa. El inconveniente es que la mayoría de los desarrolladores individuales y las organizaciones de pequeñas a medianas no necesitarán todas estas herramientas, algunas de las cuales se duplican entre ellas mismas, pero todavía tendrás que comprar el conjunto completo como parte de la licencia de suscripción. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-lectora-inspire"&gt;
  &lt;/a&gt;
  4. Lectora Inspire
&lt;/h2&gt;

&lt;p&gt;Clasificación: 4,4/5 – 61 reseñas &lt;a href="https://www.capterra.es/software/205885/lectora"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows&lt;br&gt;
Precio: $2,595 por una licencia de por vida&lt;br&gt;
Descuentos: Académico/Gobiernos: Precio solo con la solicitud&lt;br&gt;
Prueba: Prueba gratuita de 30 días&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_BOHJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y32lmnylmfmmbfc354hu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_BOHJs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y32lmnylmfmmbfc354hu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.trivantis.com/products/inspire-e-learning-software/"&gt;Lectora Inspire&lt;/a&gt; es un conjunto de herramientas diseñadas para abordar las diferentes necesidades de los creadores de cursos, desde crear cursos básicos basados en diapositivas hasta crear proyectos personalizados a profundidad. Se diferencia de otras herramientas porque incluye servicios externos como parte del paquete como las plantillas de eLearning Brothers templates, caracteres de avatar, y un creador de interacciones. Es más fácil pensar en Lectora como la herramienta principal con muchas funciones adicionales incluidas que puedes usar para crear diferentes tipos de contenido.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ba-vNDAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u1rjqnfbswx76ta78m9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ba-vNDAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0u1rjqnfbswx76ta78m9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Más adecuada para&lt;/strong&gt;&lt;br&gt;
Esta es una herramienta poderosa pero complicada. Permite personalizaciones extensas a través de la programación de código, librerías externas, y scripts. Debido a esta extensibilidad, Lectora requiere que los desarrolladores estén bien entrenados. Así que esta es una buena opción si eres un desarrollador experimentado con habilidades en programación, tienes un diseñador en tu equipo, y creas cursos que están principalmente basados en elementos interactivos complejos.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-elucidat"&gt;
  &lt;/a&gt;
  5. Elucidat
&lt;/h2&gt;

&lt;p&gt;Clasificación: 4,7/5 – 25 reseñas &lt;a href="https://www.capterra.es/software/131388/elucidat"&gt;Elucidat&lt;/a&gt;&lt;br&gt;
Plataforma: SaaS&lt;br&gt;
Precio: Precio no indicado; debes contactar al vendedor&lt;br&gt;
Descuentos: No especificado&lt;br&gt;
Prueba: Prueba gratuita ofrecida solamente al final de la demostración en vivo, la cual debe reservarse y programarse en línea&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tj_JNoem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vqmj6g2gvbxpmwjd8vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tj_JNoem--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vqmj6g2gvbxpmwjd8vv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.elucidat.com/"&gt;Elucidat&lt;/a&gt; es una herramienta de autor de eLearning basada en la nube que te permite producir contenido compatible con HTML5 y SCORM. Permite a todo el equipo de trabajo contribuir a crear eLearning, revisarlo y tomar parte en el proceso de autoría.&lt;/p&gt;

&lt;p&gt;Elucidat ofrece muchas funciones básicas que se esperan de una herramienta de autor de HTML5, tales como crear evaluaciones y cuestionarios, gestión de audio y video, y llenar un curso con imágenes y texto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQ45NEhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhex818gpv9qxtl24uol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQ45NEhz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhex818gpv9qxtl24uol.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Más adecuada para&lt;/strong&gt;&lt;br&gt;
Elucidat se adapta bien a organizaciones con equipos de formación y desarrollo distribuidos y requisitos para impartir variaciones de curso según la localidad, pero que no tienen la necesidad de crear cursos basados en diapositivas o altamente personalizados para ellos o sus clientes.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-dominknow"&gt;
  &lt;/a&gt;
  6. dominKnow
&lt;/h2&gt;

&lt;p&gt;Clasificación: 4,7/5 – 24 reseñas &lt;a href="https://www.capterra.es/software/74537/dominknow-platform-flow-claro"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: Windows solamente&lt;br&gt;
Precio: Desde $997/año por usuario único&lt;br&gt;
Descuentos: Organizaciones sin fines de lucro/Educativos:&lt;br&gt;
Precio solo con la solicitud&lt;br&gt;
Prueba: Prueba gratuita de 14 días &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnn-JRky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o4v2p4ffw4dr9mzu7g9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnn-JRky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o4v2p4ffw4dr9mzu7g9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.dominknow.com/"&gt;dominKnow&lt;/a&gt; es una plataforma de autor basada en la nube diseñada para equipos y organizaciones grandes. Su objetivo es permitirte crear diferentes tipos de eLearning con plantillas, banco de recursos, una biblioteca central para compartir y reutilizar contenido en distintos proyectos, y colaboración y revisión en tiempo real. &lt;/p&gt;

&lt;p&gt;dominKnow tiene realmente tres herramientas principales. Tiene un creador de cursos compatibles con dispositivos móviles, un creador de cursos más tradicional que te permite convertir presentaciones de PPT, y una herramienta para capturar y generar simulaciones de sistemas. Todo el contenido usado en cualquiera de las herramientas de autor se guarda como un objeto discreto que puede ser reutilizado y publicado en varios formatos, como Knowledge Base o Job Aid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-DDzGZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/987wsg061z1bmkh9i92m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-DDzGZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/987wsg061z1bmkh9i92m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Más adecuada para&lt;/strong&gt;&lt;br&gt;
Aquellos que buscan una herramienta de autor de eLearning que produzca resultados de alta calidad a la vez que sea bastante fácil de aprender y usar, especialmente para las organizaciones que utilizan autores independientes que necesitan mantener el contenido gestionado y accesible para equipos grandes de trabajo. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-easygenerator"&gt;
  &lt;/a&gt;
  7. Easygenerator
&lt;/h2&gt;

&lt;p&gt;Clasificación: 4,8/5 – 71 reseñas &lt;a href="https://www.capterra.es/software/129281/easygenerator"&gt;Capterra&lt;/a&gt;&lt;br&gt;
Plataforma: SaaS&lt;br&gt;
Precio: $99/mes/usuario&lt;br&gt;
Descuentos: Organizaciones sin fines de lucro/Educacionales: Precio solamente bajo aplicación&lt;br&gt;
Prueba: Prueba gratuita de 14 días &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_2sy3Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agd4avmabqs59fqzov1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_2sy3Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agd4avmabqs59fqzov1w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.easygenerator.com/en/"&gt;Easygenerator&lt;/a&gt; es una herramienta de autor de eLearning para personas sin experiencia en desarrollo. Te permite crear cursos y cuestionarios para ser alojados en el entorno de nube integrado y así poder monitorear los resultados. También es posible subir los cursos a un sitio web o LMS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lN4LO_DI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zz5yq3n5ex0qa4ay6j5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lN4LO_DI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zz5yq3n5ex0qa4ay6j5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Más adecuada para&lt;/strong&gt;&lt;br&gt;
Aquellos buscando una herramienta en línea para crear fácilmente cursos compatibles con dispositivos móviles usando funciones de arrastrar y soltar como su principal requerimiento.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-adapt"&gt;
  &lt;/a&gt;
  8. Adapt
&lt;/h2&gt;

&lt;p&gt;Clasificación: No tiene calificaciones&lt;br&gt;
Plataforma: SaaS&lt;br&gt;
Precio: Gratis&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bjHGJ-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5psbycxnq523brovh0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bjHGJ-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5psbycxnq523brovh0p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.adaptlearning.org/"&gt;Adapt&lt;/a&gt; es una herramienta HTML de código abierto que está diseñada para permitirte crear un producto de aprendizaje que se adapta a múltiples dispositivos a través de su sitio Learning Pool Adapt Builder. Así es como funciona. Introduces un tema haciendo clic en el bloque y después navegas hacia abajo en la página, trabajando en tu contenido, abriendo y cerrando pestañas en forma de acordeón, secuencias narrativas, imágenes con puntos de acceso, y otras herramientas interactivas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvjY7bBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41giuppwxjy76h16u0tj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvjY7bBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41giuppwxjy76h16u0tj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Más adecuada para&lt;/strong&gt;&lt;br&gt;
Aquellos buscando una herramienta de autor de HTML5 flexible y gratuita y que no les importe adaptarse a los requerimientos de instalación y ser autosuficientes.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#para-resumir"&gt;
  &lt;/a&gt;
  Para resumir
&lt;/h2&gt;

&lt;p&gt;Cualquiera de estas herramientas de autor te permitirá crear cursos, pero ahora deberías tener una idea más clara sobre cuál herramienta es la mejor para tu situación particular y el tipo de contenido que deseas crear. &lt;/p&gt;

&lt;p&gt;¿Utilizas algunas de estas herramientas de autor de e-learning? Nos encantaría saber más de tus experiencias, buenas o malas, en los comentarios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ispring.es/blog/mejores-herramientas-de-autor-de-elearning-para-usar"&gt;Original source&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elearning</category>
    </item>
    <item>
      <title>Grokking Traversable</title>
      <author>Matt Thornton</author>
      <pubDate>Fri, 23 Apr 2021 11:14:02 +0000</pubDate>
      <link>https://dev.to/choc13/grokking-traversable-bla</link>
      <guid>https://dev.to/choc13/grokking-traversable-bla</guid>
      <description>&lt;p&gt;Once you've grokked traversable's you'll wonder how you ever lived without them. Trying to gain intuition about them by staring at the type signature never brought me much joy. So in this post we'll take a different approach and invent them ourselves by solving a real problem. This will help us get to that "aha" moment where we finally understand how they work and when to use them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-scenario"&gt;
  &lt;/a&gt;
  The scenario
&lt;/h1&gt;

&lt;p&gt;Imagine we're working for an e-commerce site where we sell one-time offers, such that when all the stock is sold we never have anymore. When a user places an order we must check the stock levels. If there is availability we temporarily reserve the amount they requested before letting them proceed to the checkout.&lt;/p&gt;

&lt;p&gt;Our specific task is to write a &lt;code&gt;createCheckout&lt;/code&gt; function that will take a &lt;code&gt;Basket&lt;/code&gt; and try to reserve the items in it. If they can successfully reserved it creates a &lt;code&gt;Checkout&lt;/code&gt; which includes the total price of the items along with other metadata we might need to take the payment.&lt;/p&gt;

&lt;p&gt;Our domain model looks something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;ItemId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ItemId&lt;/span&gt;
      &lt;span class="nc"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="nc"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;ItemId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ItemId&lt;/span&gt;
      &lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Checkout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt;
      &lt;span class="nc"&gt;BasketId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketId&lt;/span&gt;
      &lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;createCheckout&lt;/code&gt; function will return &lt;code&gt;Checkout option&lt;/code&gt;. It will return &lt;code&gt;Some&lt;/code&gt; if all of the items are available and &lt;code&gt;None&lt;/code&gt; if any of them aren't. &lt;em&gt;A better implementation would return &lt;code&gt;Result&lt;/code&gt; and detail the specific errors, but we'll use &lt;code&gt;option&lt;/code&gt; to keep the example simple.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Basket&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Checkout&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately for us, someone else has already written a function which can reserve a &lt;code&gt;BasketItem&lt;/code&gt; if it is in stock, which looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this will return &lt;code&gt;None&lt;/code&gt; if there are not enough items in stock.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#our-first-implementation"&gt;
  &lt;/a&gt;
  Our first implementation
&lt;/h1&gt;

&lt;p&gt;So it seems that all we need to do is write a function that calls &lt;code&gt;reserveBasketItem&lt;/code&gt; for each item in the basket. If they all succeed then it calculates the total price in order to create the &lt;code&gt;Checkout&lt;/code&gt;. Let's try it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;totalPrice&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="n"&gt;reservedItems&lt;/span&gt;
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt; &lt;span class="s2"&gt;"some-checkout-id"&lt;/span&gt;
      &lt;span class="nc"&gt;BasketId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Id&lt;/span&gt;
      &lt;span class="nc"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;totalPrice&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're just mapping over the items in the basket to reserve each one and then summing their individual prices to get the total basket price. Seems straight forward, except that's not going to compile, because it's not quite right.&lt;/p&gt;

&lt;p&gt;The problem is that &lt;code&gt;reservedItems&lt;/code&gt; has the type &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt; but we need it to be &lt;code&gt;option&amp;lt;list&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt;, where it is &lt;code&gt;None&lt;/code&gt; if any one of the reservations fail. That way we'd only be able to calculate the total price and create the &lt;code&gt;Checkout&lt;/code&gt; if all of the items are available. Let's imagine we've written such a function called &lt;code&gt;reserveItems&lt;/code&gt; that does return this type instead and updated &lt;code&gt;createCheckout&lt;/code&gt; to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reserveItems&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;reserveItems&lt;/span&gt;

    &lt;span class="n"&gt;reservedItems&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt; &lt;span class="s2"&gt;"some-checkout-id"&lt;/span&gt;
              &lt;span class="nc"&gt;BasketId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Id&lt;/span&gt;
              &lt;span class="nc"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's better! Now if the items are all reserved and &lt;code&gt;reservedItems&lt;/code&gt; returns &lt;code&gt;Some&lt;/code&gt; then we can access the list of &lt;code&gt;ReservedBasketItem&lt;/code&gt; and use them to create the &lt;code&gt;Checkout&lt;/code&gt;. If any of the items can't be reserved then &lt;code&gt;reservedItems&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt; and the &lt;code&gt;Option.map&lt;/code&gt; just short circuits meaning &lt;code&gt;createCheckout&lt;/code&gt; will also return &lt;code&gt;None&lt;/code&gt;, as we wanted.&lt;/p&gt;

&lt;p&gt;So we've reduced the task to implementing &lt;code&gt;reserveItems&lt;/code&gt;. We've already seen that we can't just call &lt;code&gt;List.map reserveBasketItem&lt;/code&gt; because that gives us a &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt; and so the &lt;code&gt;list&lt;/code&gt; and the &lt;code&gt;option&lt;/code&gt; are the wrong way around. We need a way to invert them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#an-invertor"&gt;
  &lt;/a&gt;
  An invertor 🙃
&lt;/h1&gt;

&lt;p&gt;Let's invent a function called &lt;code&gt;invert&lt;/code&gt; that converts &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt; into &lt;code&gt;option&amp;lt;list&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt;. If we can do that then we can implement &lt;code&gt;reserveItems&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reserveItems&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BasketItem&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; 
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt; 
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to implement &lt;code&gt;invert&lt;/code&gt; let's start off by pattern matching on the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// do something when the list isn't empty&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// do something when the list is empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we've got two cases to deal with, when the list has at least one item and when the list is empty. Let's start with the base case because it's trivial. If the list is empty then there it doesn't contain any failures, so we should just return &lt;code&gt;Some []&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In the non empty case then we've got to do something with &lt;code&gt;head&lt;/code&gt; which is a &lt;code&gt;ReservedBaskedItem option&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; which is a &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt;. Well we know that our goal is to turn &lt;code&gt;list&amp;lt;option&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt; into &lt;code&gt;option&amp;lt;list&amp;lt;ReservedBaskedItem&amp;gt;&amp;gt;&lt;/code&gt;, so we can just recursively call &lt;code&gt;invert&lt;/code&gt; on the &lt;code&gt;tail&lt;/code&gt; to do this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReservedBasketItem&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; 
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;invertedTail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;
        &lt;span class="c1"&gt;// Need to recombine the head and the inverted tail&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we just need a way to combine a &lt;code&gt;ReservedBasketItem&lt;/code&gt; option with a &lt;code&gt;option&amp;lt;list&amp;lt;ReservedBasketItem&amp;gt;&amp;gt;&lt;/code&gt;. If neither of these were wrapped in an &lt;code&gt;option&lt;/code&gt; then we would just "cons" them using the &lt;code&gt;::&lt;/code&gt; operator, so let's write a &lt;code&gt;consOptions&lt;/code&gt; function which does this but for &lt;code&gt;option&lt;/code&gt; arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;consOptions&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;):&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; 
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing too complicated going on here. Simply check if both the &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; are &lt;code&gt;Some&lt;/code&gt; and if so cons them with &lt;code&gt;::&lt;/code&gt; operator and wrap that in a &lt;code&gt;Some&lt;/code&gt;. Otherwise if either one is &lt;code&gt;None&lt;/code&gt; then return &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Putting it all together we can full implement &lt;code&gt;invert&lt;/code&gt; like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservedItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;consOptions&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've also been able to make it completely generic on the type inside the list as it doesn't depend on &lt;code&gt;ReservedBasketItem&lt;/code&gt; in any way.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#an-applicative-clean-up"&gt;
  &lt;/a&gt;
  An Applicative clean up 🧽
&lt;/h1&gt;

&lt;p&gt;If you're familiar with applicatives, perhaps because you've followed this series and read &lt;a href="https://dev.to/choc13/grokking-applicative-validation-lh6"&gt;Grokking Applicatives&lt;/a&gt; then you might have spotted that &lt;code&gt;consOptions&lt;/code&gt; looks sort of like a specialised version of &lt;code&gt;apply&lt;/code&gt;. What &lt;code&gt;consOptions&lt;/code&gt; is trying to do is take some values that are wrapped in &lt;code&gt;options&lt;/code&gt; and apply them to a function, in this case cons. &lt;/p&gt;

&lt;p&gt;Let's make use of &lt;code&gt;apply&lt;/code&gt; and clean up &lt;code&gt;invert&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// An alias for :: so we can pass it as a function below&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, a proper &lt;code&gt;Applicative&lt;/code&gt; instance should also have a &lt;code&gt;pure&lt;/code&gt; function. All &lt;code&gt;pure&lt;/code&gt; does is create a default value for the &lt;code&gt;Applicative&lt;/code&gt;. In the case of &lt;code&gt;option&lt;/code&gt; &lt;code&gt;pure&lt;/code&gt; is just &lt;code&gt;Some&lt;/code&gt;. Let's use &lt;code&gt;pure&lt;/code&gt; to replace the &lt;code&gt;Some&lt;/code&gt; uses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invert&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This might not seem like much of a change, but what we've done is eliminate all direct dependencies on &lt;code&gt;option&lt;/code&gt;. In theory this could work with any applicative, such as &lt;code&gt;Result&lt;/code&gt; or &lt;code&gt;Validation&lt;/code&gt; and what it would do is go from &lt;code&gt;list&amp;lt;Applicative&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Applicative&amp;lt;list&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt;. In practice however F# doesn't &lt;em&gt;quite&lt;/em&gt; allow such an abstraction and so we have to create a version of &lt;code&gt;invert&lt;/code&gt; for each applicative type we want to use it with. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can technically get around this with &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/generics/statically-resolved-type-parameters"&gt;statically resolved type parameters&lt;/a&gt;. I would recommend checking out &lt;a href="https://fsprojects.github.io/FSharpPlus/"&gt;FSharpPlus&lt;/a&gt; if you want this abstraction rather than rolling it yourself though.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-raw-sequence-endraw-"&gt;
  &lt;/a&gt;
  You just discovered &lt;code&gt;sequence&lt;/code&gt; 👏
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;invert&lt;/code&gt; is usually called &lt;code&gt;sequence&lt;/code&gt; and it's one of the functions that a &lt;code&gt;Traversable&lt;/code&gt; type gives us. As we can see &lt;code&gt;sequence&lt;/code&gt; takes a collection of wrapped values like an &lt;code&gt;option&lt;/code&gt; and turns it into wrapped collection instead. You can think of &lt;code&gt;sequence&lt;/code&gt; as flipping the two types over.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sequence&lt;/code&gt; works for all sorts of other type combinations too. For example you can take a &lt;code&gt;list&amp;lt;Result&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; and flip it into a &lt;code&gt;Result&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt;. You can even use it with different collection types and some that don't even seem like typical collections, for instance you could go from &lt;code&gt;Result&amp;lt;option&amp;lt;'a&amp;gt;, 'e&amp;gt;&lt;/code&gt; to &lt;code&gt;option&amp;lt;Result&amp;lt;'a, 'e&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#test-yourself-on-raw-sequence-endraw-"&gt;
  &lt;/a&gt;
  Test yourself on &lt;code&gt;sequence&lt;/code&gt; 🧑‍🏫
&lt;/h1&gt;

&lt;p&gt;See if you can implement &lt;code&gt;sequence&lt;/code&gt; for &lt;code&gt;list&amp;lt;Result&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Result&amp;lt;list&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="o"&gt;_,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's right, it's exactly the same as for the &lt;code&gt;list&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; providing we use the applicative &lt;code&gt;Result.apply&lt;/code&gt; and &lt;code&gt;Result.pure&lt;/code&gt; functions for &lt;code&gt;Result&lt;/code&gt;. I've included their definitions too in a &lt;code&gt;Result&lt;/code&gt; module above.&lt;/p&gt;



&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theres-still-more-land-to-discover-%F0%9F%8F%9E"&gt;
  &lt;/a&gt;
  There's still more land to discover 🏞
&lt;/h1&gt;

&lt;p&gt;Let's go back to our original program and see how it looks with our new &lt;code&gt;sequence&lt;/code&gt; discovery.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reservedItems&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
        &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Items&lt;/span&gt; 
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt; 
        &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;

    &lt;span class="n"&gt;reservedItems&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt; &lt;span class="s2"&gt;"some-checkout-id"&lt;/span&gt;
              &lt;span class="nc"&gt;BasketId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Id&lt;/span&gt;
              &lt;span class="nc"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty good, but we have to make two passes over the &lt;code&gt;basket.Items&lt;/code&gt; when creating &lt;code&gt;reservedItems&lt;/code&gt;. In the first pass we try and reserve each item and then in the second pass we combine all of those reservations together to determine whether the whole operation succeed or not. It would be nice if we could do that in one go.&lt;/p&gt;

&lt;p&gt;Let's see if we can do it all within &lt;code&gt;sequence&lt;/code&gt;. That means that we'll need to pass the &lt;code&gt;reserveBasketItem&lt;/code&gt; function to &lt;code&gt;sequence&lt;/code&gt; and we'll end up with the following signature.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we start with a list and we want to apply the function &lt;code&gt;f&lt;/code&gt; to each element of it. Although, rather than just mapping over the list and returning &lt;code&gt;list&amp;lt;option&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt; we want to accumulate all of the &lt;code&gt;option&lt;/code&gt; values into a single &lt;code&gt;option&amp;lt;list&amp;lt;'b&amp;gt;&amp;gt;&lt;/code&gt; where it is &lt;code&gt;None&lt;/code&gt; if for any element &lt;code&gt;f&lt;/code&gt; produces a &lt;code&gt;None&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is basically the same as before, except now we just apply &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;head&lt;/code&gt; and pass it into the recursive call in order to also transform the &lt;code&gt;tail&lt;/code&gt; elements. All we've done is combine the operation that generates the &lt;code&gt;option&lt;/code&gt; values with the act of combining them together into a single &lt;code&gt;option&lt;/code&gt; of the list.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#you-just-discovered-raw-traverse-endraw-"&gt;
  &lt;/a&gt;
  You just discovered &lt;code&gt;traverse&lt;/code&gt; 🙌
&lt;/h1&gt;

&lt;p&gt;It turns out we typically call the function &lt;code&gt;traverse&lt;/code&gt; when we combine both the sequencing and the mapping at the same time. So a &lt;code&gt;Traversable&lt;/code&gt; actually has two functions associated with it called &lt;code&gt;sequence&lt;/code&gt; and &lt;code&gt;traverse&lt;/code&gt;. In fact, &lt;code&gt;sequence&lt;/code&gt; is just a special case of &lt;code&gt;traverse&lt;/code&gt; where we supply the identity function, &lt;code&gt;id&lt;/code&gt;, for &lt;code&gt;f&lt;/code&gt;. So we could actually write it like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With &lt;code&gt;traverse&lt;/code&gt; in place we can finally finish off our task and write &lt;code&gt;checkoutBasket&lt;/code&gt; nicely like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;createCheckout&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Items&lt;/span&gt; 
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="n"&gt;reserveBasketItem&lt;/span&gt;
    &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CheckoutId&lt;/span&gt; &lt;span class="s2"&gt;"some-checkout-id"&lt;/span&gt;
              &lt;span class="nc"&gt;BasketId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;basket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Id&lt;/span&gt;
              &lt;span class="nc"&gt;Price&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Seq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumBy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#test-yourself-on-raw-traverse-endraw-"&gt;
  &lt;/a&gt;
  Test yourself on &lt;code&gt;traverse&lt;/code&gt; 🧑‍🏫
&lt;/h1&gt;

&lt;p&gt;See if you can implement &lt;code&gt;traverse&lt;/code&gt; when the input is &lt;code&gt;option&amp;lt;'a&amp;gt;&lt;/code&gt; and the function is &lt;code&gt;'a -&amp;gt; Result&amp;lt;'b, 'c&amp;gt;&lt;/code&gt;,  so that it returns a &lt;code&gt;Result&amp;lt;option&amp;lt;'b&amp;gt;, 'c&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="o"&gt;_,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;
        &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Ok&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here I've included the definitions of &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;pure&lt;/code&gt; for &lt;code&gt;Result&lt;/code&gt; and then implemented &lt;code&gt;traverse&lt;/code&gt; using those. Hopefully this makes it clearer which parts of the traverse operation relate to the outer &lt;code&gt;option&lt;/code&gt; type and which ones relate to the inner &lt;code&gt;Result&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;One concrete use case for this transformation might be if we're trying to write a parser. The parser function might say parse &lt;code&gt;string&lt;/code&gt; into &lt;code&gt;Result&amp;lt;int, ParseError&amp;gt;&lt;/code&gt; but we have to hand a &lt;code&gt;string option&lt;/code&gt;. Of course we could pattern match on the &lt;code&gt;option&lt;/code&gt; ourselves and then only run the parser in the &lt;code&gt;Some&lt;/code&gt; case, but we could also write &lt;code&gt;myOptionalValue |&amp;gt; traverse parseInt&lt;/code&gt;.&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;Another interesting case is when we're dealing with a regular function, say &lt;code&gt;string&lt;/code&gt; which just converts the argument to a string. See if you can figure out what traverse should look like this case. Specifically, if we want to write &lt;code&gt;[1; 2; 3] |&amp;gt; traverse string&lt;/code&gt; and have it output &lt;code&gt;["1"; "2"; "3"]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
  Solution
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Identity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="n"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traverse&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Identity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pure&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I've written this in the same style as the others by extracting an &lt;code&gt;Identity&lt;/code&gt; functor/applicative. &lt;code&gt;Identity&lt;/code&gt; is actually the degenerate case for an applicative because all &lt;code&gt;apply&lt;/code&gt; does is call the function with the argument and all &lt;code&gt;pure&lt;/code&gt; does is return the function unaltered. So there is no wrapping going on like with the other applicatives. This is interesting though because &lt;code&gt;traverse&lt;/code&gt; now has the type &lt;code&gt;list&amp;lt;'a&amp;gt; -&amp;gt; ('a -&amp;gt; 'b) -&amp;gt; list&amp;lt;'b&amp;gt;&lt;/code&gt;, which you might recognise from &lt;a href="https://dev.to/choc13/grokking-functors-bla"&gt;Grokking Functors&lt;/a&gt; as &lt;code&gt;map&lt;/code&gt;. So &lt;code&gt;map&lt;/code&gt; is actually a special case of &lt;code&gt;traverse&lt;/code&gt; when the inner type is just the &lt;code&gt;Identity&lt;/code&gt; applicative.&lt;/p&gt;



&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#spotting-raw-traversable-endraw-in-the-wild"&gt;
  &lt;/a&gt;
  Spotting &lt;code&gt;Traversable&lt;/code&gt; in the wild 🐾
&lt;/h1&gt;

&lt;p&gt;Whenever you've got some collection of values wrapped in something like &lt;code&gt;option&lt;/code&gt; or &lt;code&gt;Result&lt;/code&gt; and what you actually need is an &lt;code&gt;option&amp;lt;list&amp;lt;'a&amp;gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Result&amp;lt;list&amp;lt;'a&amp;gt;, 'e&amp;gt;&lt;/code&gt; etc then &lt;code&gt;sequence&lt;/code&gt; is probably what you need to use. Similarly, if you have to run a computation over a collection that produces wrapped values then you can use &lt;code&gt;traverse&lt;/code&gt; and combine the mapping and flipping into one operation. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#warning-two-types-of-error-handling-ahead"&gt;
  &lt;/a&gt;
  Warning, two types of error handling ahead ⚠️
&lt;/h1&gt;

&lt;p&gt;When we're sequencing a &lt;code&gt;list&amp;lt;option&amp;lt;_&amp;gt;&amp;gt;&lt;/code&gt; we generally only need to know that at least one of the elements is &lt;code&gt;None&lt;/code&gt; in order to return &lt;code&gt;None&lt;/code&gt;. However, when working with something like &lt;code&gt;list&amp;lt;Result&amp;lt;'a, 'e&amp;gt;&amp;gt;&lt;/code&gt; then we might actually care about gathering up all of the errors. As we pointed out in &lt;a href="https://dev.to/choc13/grokking-applicative-validation-lh6"&gt;Grokking Applicative Validation&lt;/a&gt; there can be applicative instances that either short circuit on the first error or accumulate all errors. The same applies here with &lt;code&gt;Traversable&lt;/code&gt;. Let's quickly run some experiments in the F# REPL with FSharpPlus to see how it handles things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Ok&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"first error"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"second error"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt; &lt;span class="s2"&gt;"first error"&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"first error"&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; &lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"second error"&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Validation&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"first error"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="s2"&gt;"second error"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first case, when using &lt;code&gt;Result&lt;/code&gt; we see that it just returns the first error it encounters, while with &lt;code&gt;Validation&lt;/code&gt; it actually accumulates all the errors for us.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-did-we-learn"&gt;
  &lt;/a&gt;
  What did we learn 🧑‍🎓
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Traversable&lt;/code&gt; is more powerful version of &lt;code&gt;map&lt;/code&gt; that is particularly useful when we have a computation that either needs to be run (or has already been run) over a list of values and we want to treat it as a failure if any single one fails. We can also grok it by realising that it flips the two outer types over. We use &lt;code&gt;traverse&lt;/code&gt; when we still need to run the computation and &lt;code&gt;sequence&lt;/code&gt; when we've been given the list of computation results instead.&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>programming</category>
      <category>grokking</category>
    </item>
    <item>
      <title>Manage your Finances 💰with this notion template</title>
      <author>Sarthak Sharma</author>
      <pubDate>Fri, 23 Apr 2021 11:05:58 +0000</pubDate>
      <link>https://dev.to/xenoxdev/manage-your-finances-with-this-notion-template-22k5</link>
      <guid>https://dev.to/xenoxdev/manage-your-finances-with-this-notion-template-22k5</guid>
      <description>&lt;p&gt;Hey folks 👋🏼.&lt;br&gt;
Just launched another Product on the Product hunt. It's a template that helps you manage your finances💸 &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#finance-manager-template"&gt;
  &lt;/a&gt;
  Finance Manager Template
&lt;/h3&gt;

&lt;p&gt;When we think about Finances, what comes to our mind are the earnings and the spendings. We aim to maximize our earnings and minimize irrational spending. But, to effectively change our spending pattern, we need to track it first. With this Finance Tracking template, you’ll not only be able to keep track of exactly where each penny has been spent but also how much percentage of total funds it makes up for. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Z6l84MgTZH0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let’s take a look at this wonderous template that will change your spending habits for the better and make your savings skyrocket. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expenses"&gt;
  &lt;/a&gt;
  Expenses
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDNoCYnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/badnk911nf9dvi75rv58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDNoCYnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/badnk911nf9dvi75rv58.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Expenses are broken down into the following-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Essentials&lt;/strong&gt; -The spending that can’t be skipped - eg. Utility bills, taxes, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Debt and interest payments&lt;/strong&gt;- Noting down any change in the interest rates and calculating the monthly spending accordingly by making use of inbuilt - formulas&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discretionary spending&lt;/strong&gt; For services that save your money in the long term but require payment upfront for eg. Amazon Prime, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Subscriptions&lt;/strong&gt; Ongoing and canceled and finally - savings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#income-distribution"&gt;
  &lt;/a&gt;
  Income distribution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tprIhsnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe2o6l8nlt3i585cwl9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tprIhsnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe2o6l8nlt3i585cwl9p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
There’s a column for the Income distribution that gives you a birds-eye view so that you can manage and cut down or reallocate funds where priority is the greatest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-your-coupons-handy"&gt;
  &lt;/a&gt;
  Keep your coupons handy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkD6RGX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uo7kupml8krv1n6thu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkD6RGX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uo7kupml8krv1n6thu2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can keep track of your coupons in a separate column so that you don’t forget about them and use them in your next payment and save some money. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#organize-your-receipts"&gt;
  &lt;/a&gt;
  Organize your receipts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmMczTqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4201ec7alb2u481hnfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmMczTqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4201ec7alb2u481hnfw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Finally, you are also provided with a receipt section so that you can manage and keep your invoices which will later help you during your tax returns.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#views"&gt;
  &lt;/a&gt;
  Views
&lt;/h3&gt;

&lt;p&gt;You can choose a view of your choice so that you can keep track of your expenses and understand how and when they're taking place, by viewing your expense list in a view of your choice.&lt;/p&gt;

&lt;p&gt;All the lists and trackers in this template are available in - table, board, timeline, list, calendar, and gallery view. Now, you can choose to set lists or assign your expenses to boxes until you find the perfect match between aesthetic and function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-one"&gt;
  &lt;/a&gt;
  Want One?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lqwL9uLaYrE6mYQrd3/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lqwL9uLaYrE6mYQrd3/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Here is your link&lt;/em&gt;&lt;/strong&gt; 👉 &lt;a href="https://prototion.com/notion-for/finance-tracker"&gt;&lt;strong&gt;&lt;em&gt;Finance Tracker&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are on Producthunt today. Please show some love here❤&lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/notion-finance-tracker"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5G03bZ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aq5sok4vy4xc1qb0oi01.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Thanks again 🤟&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Microservices and Containers - HyScale Docker Microservices Architecture</title>
      <author>HyScale</author>
      <pubDate>Fri, 23 Apr 2021 10:32:16 +0000</pubDate>
      <link>https://dev.to/laradissouza99/microservices-and-containers-hyscale-docker-microservices-architecture-5co5</link>
      <guid>https://dev.to/laradissouza99/microservices-and-containers-hyscale-docker-microservices-architecture-5co5</guid>
      <description>&lt;p&gt;Modern-day enterprises are largely dependent on software applications to facilitate numerous business requirements. In most enterprises, a software application offers hundreds of functionalities - all piled into one single monolithic application. For instance, ERP and CRM platforms have monolithic architecture and serve hundreds of functionalities efficiently. But, with multiple dependencies overlapping and creating a cluster, the tasks of troubleshooting, scaling and upgrading them become a nightmare. At times, enterprises try tweaking such monolith applications for their convenience to the point that they get stuck in time and cease to serve any real purpose. This is when enterprises start to look for ways of modernizing applications and adopting an architecture that offers flexibility.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>docker</category>
    </item>
    <item>
      <title>Laravel Livewire for Django? Say hello to Unicorn!</title>
      <author>Eric Chapman</author>
      <pubDate>Fri, 23 Apr 2021 10:20:29 +0000</pubDate>
      <link>https://dev.to/ericchapman/laravel-livewire-for-django-say-hello-to-unicorn-1fo7</link>
      <guid>https://dev.to/ericchapman/laravel-livewire-for-django-say-hello-to-unicorn-1fo7</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Django community, it's time to celebrate! Something great is happening! A new Django tool is born and it's name Unicorn&lt;/p&gt;

&lt;h2&gt;What is Unicorn?&lt;/h2&gt;

&lt;p&gt;Unicorn is to Django what Livewire is to Laravel: A full stack framework that allow to build feature-rich-reactive UI with no API and no javascript only Django and python.&lt;/p&gt;

&lt;p&gt;To make thing clear, I am not associated with Unicorn in any way. I am just a fan of their work. &lt;/p&gt;

&lt;h2&gt;Real world example&lt;/h2&gt;

&lt;p&gt;Let say you want to build a Todo list but you dont want to refresh the browser when adding or removing a task. Normally you will reach to javascript to implement this kind of functionality. Not with Unicorn!&lt;/p&gt;

&lt;p&gt;Unicorn allow to create a Django template and a Django view that can do just that.&lt;/p&gt;

&lt;p&gt;Here are sample Django template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jinja"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- unicorn/templates/unicorn/todo.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;unicorn:submit.prevent=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;unicorn:model.defer=&lt;/span&gt;&lt;span class="s"&gt;"task"&lt;/span&gt;
      &lt;span class="na"&gt;unicorn:keyup.escape=&lt;/span&gt;&lt;span class="s"&gt;"task=''"&lt;/span&gt;
      &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"New task"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"task"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/input&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;unicorn:click=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Add&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;unicorn:click=&lt;/span&gt;&lt;span class="s"&gt;"$reset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Clear all tasks&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;tasks&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;tasks&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      No tasks 🎉
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see unicorn:model link the input to the task var and unicorn:click="add" call the component function name 'add'&lt;/p&gt;

&lt;p&gt;Django view component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# unicorn/components/todo.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_unicorn.components&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UnicornView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnicornView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As noted the python code is regular Django code easy to understand and write.&lt;/p&gt;

&lt;h2&gt;Excited?&lt;/h2&gt;

&lt;p&gt;I am! Unicorn can literarily change the spectre of what we can do with a Django template. It give you the power of a SPA without leaving the comfort of Django. &lt;/p&gt;

&lt;p&gt;If you want more info you can check a visual example on their web site:&lt;br&gt;
&lt;a href="https://www.django-unicorn.com/"&gt;https://www.django-unicorn.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check the git hub repo and give a Star to the project.&lt;br&gt;
&lt;a href="https://github.com/adamghill/django-unicorn"&gt;https://github.com/adamghill/django-unicorn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>laravel</category>
      <category>livewire</category>
    </item>
    <item>
      <title>Top 10 Trending GitHub Repositories</title>
      <author>Pawan Bhayde</author>
      <pubDate>Fri, 23 Apr 2021 10:16:33 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/top-10-trending-github-repositories-132o</link>
      <guid>https://dev.to/pawanbhayde/top-10-trending-github-repositories-132o</guid>
      <description>&lt;p&gt;&lt;strong&gt;TETRIS-OS: An operating system that only plays Tetris.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- tetris-os&lt;/p&gt;

&lt;p&gt;Stars:- 1559&lt;/p&gt;

&lt;p&gt;Features:&lt;br&gt;
1 It's Tetris.&lt;br&gt;
2 32-bit (x86)&lt;br&gt;
3 Fully custom bootloader&lt;br&gt;
4 Soundblaster 16 driver&lt;br&gt;
5 Custom music track runner&lt;br&gt;
6 Fully hardcoded tetris theme&lt;br&gt;
7 Double-buffered 60 FPS graphics at 320x200 pixels with custom 8- &lt;br&gt;
  bit RGB palette&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jdah"&gt;
        jdah
      &lt;/a&gt; / &lt;a href="https://github.com/jdah/tetris-os"&gt;
        tetris-os
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An operating system, but it only plays Tetris.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
TETRIS-OS: An operating system that only plays Tetris.&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/jdah/tetris-os/master/images/0.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_3ffvYx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/jdah/tetris-os/master/images/0.png" alt="screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=FaILnmUYS_U" rel="nofollow"&gt;Video with an explanation of the development process.&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
Features:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It's Tetris.&lt;/li&gt;
&lt;li&gt;32-bit (x86)&lt;/li&gt;
&lt;li&gt;Fully custom bootloader&lt;/li&gt;
&lt;li&gt;Soundblaster 16 driver&lt;/li&gt;
&lt;li&gt;Custom music track runner&lt;/li&gt;
&lt;li&gt;Fully hardcoded tetris theme&lt;/li&gt;
&lt;li&gt;Double-buffered 60 FPS graphics at 320x200 pixels with custom 8-bit RGB palette&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
Resources Used&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.osdev.org/Main_Page" rel="nofollow"&gt;osdev.org wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sortix.org" rel="nofollow"&gt;Sortix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://toaruos.org" rel="nofollow"&gt;ToaruOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jamesmolloy.co.uk/tutorial_html/" rel="nofollow"&gt;James Molloy's Kernel Development Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Building &amp;amp; Running&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This has &lt;em&gt;only&lt;/em&gt; been tested in an emulator. Real hardware might not like it.&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;EDIT: this is not true anymore! &lt;a href="https://github.com/jdah/tetris-os/issues/5#issuecomment-824507979"&gt;@parkerlreed has run this on a Thinkpad T510&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
Mac OS&lt;/h4&gt;
&lt;p&gt;For the cross-compiler: &lt;code&gt;$ brew tap nativeos/i386-elf-toolchain &amp;amp;&amp;amp; brew install i386-elf-binutils i386-elf-gcc&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make iso
$ qemu-system-i386 -drive format=raw,file=boot.iso -d cpu_reset -monitor stdio -device sb16 -audiodev coreaudio,id=coreaudio,out.frequency=48000,out.channels=2,out.format=s32
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;
Unix-like&lt;/h4&gt;
&lt;p&gt;You should not need a cross-compiler in &lt;em&gt;most&lt;/em&gt; cases as the &lt;code&gt;gcc&lt;/code&gt; shipped in most linux distros will support &lt;code&gt;i386&lt;/code&gt; targets.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.osdev.org/GCC_Cross-Compiler" rel="nofollow"&gt;If this isn't the case for you,&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jdah/tetris-os"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Taichi&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Name:- Taichi &lt;/p&gt;

&lt;p&gt;Stars:- 13917&lt;/p&gt;

&lt;p&gt;Taichi (太极) is a programming language designed for high-performance computer graphics. It is deeply embedded in Python, and its just-in-time compiler offloads compute-intensive tasks to multi-core CPUs and massively parallel GPUs.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/taichi-dev"&gt;
        taichi-dev
      &lt;/a&gt; / &lt;a href="https://github.com/taichi-dev/taichi"&gt;
        taichi
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Productive &amp;amp; portable programming language for high-performance, sparse &amp;amp; differentiable computing on CPUs &amp;amp; GPUs
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/taichi-dev/taichi/raw/master/misc/logo.png"&gt;&lt;img width="500px" src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1fpFfMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/taichi-dev/taichi/raw/master/misc/logo.png"&gt;&lt;/a&gt;
  &lt;h3&gt;
 &lt;a href="https://taichi.readthedocs.io/en/stable/hello.html" rel="nofollow"&gt; Tutorial &lt;/a&gt; | &lt;a href="https://github.com/taichi-dev/taichi/tree/master/examples"&gt; Examples &lt;/a&gt; | &lt;a href="https://forum.taichi.graphics/" rel="nofollow"&gt; Forum &lt;/a&gt; | &lt;a href="http://hub.taichi.graphics/" rel="nofollow"&gt; Playground &lt;/a&gt; &lt;/h3&gt;
  &lt;h3&gt;
 &lt;a href="https://taichi.readthedocs.io/en/stable/" rel="nofollow"&gt; Documentation &lt;/a&gt; | &lt;a href="https://taichi.readthedocs.io/zh_CN/latest/" rel="nofollow"&gt; 简体中文文档 &lt;/a&gt; | &lt;a href="https://taichi.readthedocs.io/en/stable/contributor_guide.html" rel="nofollow"&gt; Contributor Guidelines &lt;/a&gt; &lt;/h3&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://travis-ci.com/taichi-dev/taichi" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f9bc7253195f80b6d291706e106eaa0f784283506f2190d64361d079196e00ac/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7461696368692d6465762f7461696368693f6c6f676f3d547261766973266272616e63683d6d6173746572266c6162656c3d5472617669732532304349" alt="Travis CI Status"&gt;&lt;/a&gt;
&lt;a href="https://ci.appveyor.com/project/yuanming-hu/taichi/branch/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c2345e1a37fda817c3bf81494bbc2004ba09be896d207ca697a90e274f3f6fcb/68747470733a2f2f696d672e736869656c64732e696f2f6170707665796f722f6275696c642f7975616e6d696e672d68752f7461696368693f6c6f676f3d4170705665796f72266c6162656c3d4170705665796f72" alt="AppVeyor Status"&gt;&lt;/a&gt;
&lt;a href="https://hub.docker.com/r/taichidev/taichi" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1da6e0ee71d5a9a270d1186ca94ce6b20633809644cd00d12f3690f5d7d3b4d8/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f636c6f75642f6275696c642f7461696368696465762f7461696368693f6c6162656c3d446f636b6572253230496d616765266c6f676f3d646f636b6572" alt="Docker Cloud Build Status"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/taichi-dev/taichi/src/master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc2e9283f1d25360545e56607c095683fdeb1804f33badebf760d102014b04ba/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f7461696368692d6465762f7461696368693f6c6162656c3d507974686f6e253230436f766572616765266c6f676f3d636f6465636f76" alt="Python Codecov Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/taichi-dev/taichi/releases/latest"&gt;&lt;img src="https://camo.githubusercontent.com/6e44efcaea2fec9bae420f4d63009843dd63a33d786c511f1ee2a9f7db77c4ff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f7461696368692d6465762f7461696368693f636f6c6f723d626c7565266c6162656c3d4c617465737425323052656c65617365" alt="Latest Release"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Taichi&lt;/strong&gt; (太极) is a programming language designed for &lt;em&gt;high-performance computer graphics&lt;/em&gt;. It is deeply embedded in &lt;strong&gt;Python&lt;/strong&gt;, and its &lt;strong&gt;just-in-time compiler&lt;/strong&gt; offloads compute-intensive tasks to multi-core CPUs and massively parallel GPUs.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/taichi-dev/taichi/blob/master/examples/fractal.py#L1-L31"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--llpq5OBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/taichi-dev/public_files/raw/master/taichi/fractal_code.png" height="270px"&gt;&lt;/a&gt;  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal_small.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85y2ky8v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/taichi-dev/public_files/master/taichi/fractal_small.gif" height="270px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Advanced features of Taichi include &lt;a href="https://taichi.readthedocs.io/en/latest/sparse.html" rel="nofollow"&gt;spatially sparse computing&lt;/a&gt; and &lt;a href="https://taichi.readthedocs.io/en/latest/differentiable_programming.html" rel="nofollow"&gt;differentiable programming&lt;/a&gt; &lt;a href="https://github.com/yuanming-hu/difftaichi"&gt;[examples]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please check out our SIGGRAPH 2020 course on Taichi basics:&lt;/strong&gt; &lt;a href="https://youtu.be/Y0-76n3aZFA" rel="nofollow"&gt;YouTube&lt;/a&gt;, &lt;a href="https://www.bilibili.com/video/BV1kA411n7jk/" rel="nofollow"&gt;Bilibili&lt;/a&gt;, &lt;a href="https://yuanming.taichi.graphics/publication/2020-taichi-tutorial/taichi-tutorial.pdf" rel="nofollow"&gt;slides (pdf)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中文视频教程:&lt;/strong&gt; &lt;a href="https://www.bilibili.com/video/BV1gA411j7H5" rel="nofollow"&gt;[哔哩哔哩]&lt;/a&gt;, &lt;a href="https://yuanming.taichi.graphics/publication/2020-taichi-tutorial/taichi-tutorial.pdf" rel="nofollow"&gt;[幻灯片]&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Examples (&lt;a href="https://raw.githubusercontent.com/taichi-dev/taichi/master/misc/examples.md"&gt;More...&lt;/a&gt;)&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/taichi-dev/taichi/blob/master/examples/mpm128.py"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0tGuB-qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/taichi-dev/public_files/raw/master/taichi/mpm128.gif" height="192px"&gt;&lt;/a&gt;
&lt;a href="https://github.com/taichi-dev/taichi/blob/master/examples/stable_fluid.py"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-a__WXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/taichi-dev/public_files/raw/master/taichi/stable_fluids.gif" height="192px"&gt;&lt;/a&gt;
&lt;a href="https://github.com/taichi-dev/taichi/blob/master/examples/sdf_renderer.py"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBFKC9Zi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/taichi-dev/public_files/raw/master/taichi/sdf_renderer.jpg" height="192px"&gt;&lt;/a&gt;
&lt;a href="https://github.com/taichi-dev/taichi/blob/master/examples/euler.py"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1EMr-Fcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/taichi-dev/public_files/raw/master/taichi/euler.gif" height="192px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation &lt;a href="https://pepy.tech/project/taichi" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/283e2e7705f6dd84cfc98b4fcc4d7b758f3c4129b1be10f79a67e8e75716f693/68747470733a2f2f706570792e746563682f62616467652f746169636869" alt="Downloads"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;python3 -m pip install taichi&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Supported OS&lt;/strong&gt;: Windows, Linux, Mac OS X; &lt;strong&gt;Python&lt;/strong&gt;: 3.6/3.7/3.8 (64-bit only); &lt;strong&gt;Backends&lt;/strong&gt;: x64 CPUs, CUDA, Apple Metal, OpenGL Compute Shaders.&lt;/p&gt;
&lt;p&gt;Please build from source for other configurations (e.g., your CPU is ARM, or you want to try out our experimental C backend).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The PyPI package supports x64 CPU, CUDA 10/11, Metal, and OpenGL Compute Shader…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/taichi-dev/taichi"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Netdata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- Netdata &lt;/p&gt;

&lt;p&gt;Stars:- 53032&lt;/p&gt;

&lt;p&gt;Netdata's distributed, real-time monitoring Agent collects thousands of metrics from systems, hardware, containers, and applications with zero configuration. It runs permanently on all your physical/virtual servers, containers, cloud deployments, and edge/IoT devices, and is perfectly safe to install on your systems mid-incident without any preparation.&lt;/p&gt;

&lt;p&gt;You can install Netdata on most Linux distributions (Ubuntu, Debian, CentOS, and more), container platforms (Kubernetes clusters, Docker), and many other operating systems (FreeBSD, macOS). No sudo required.&lt;/p&gt;

&lt;p&gt;Netdata is designed by system administrators, DevOps engineers, and developers to collect everything, help you visualize metrics, troubleshoot complex performance problems, and make data interoperable with the rest of your monitoring stack.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/netdata"&gt;
        netdata
      &lt;/a&gt; / &lt;a href="https://github.com/netdata/netdata"&gt;
        netdata
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Real-time performance monitoring, done right! https://www.netdata.cloud
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://netdata.cloud" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-41jMfj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1153921/95268672-a3665100-07ec-11eb-8078-db619486d6ad.png" alt="Netdata" width="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Netdata is high-fidelity infrastructure monitoring and troubleshooting.&lt;br&gt;Open-source, free, preconfigured, opinionated, and always real-time.&lt;/h3&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/netdata/netdata/releases/latest"&gt;&lt;img src="https://camo.githubusercontent.com/a090fbca7da130d0b8d1a39f5a4af6596a9d04c9c5ae78c7462a784cf403da9f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6e6574646174612f6e6574646174612e737667" alt="Latest release"&gt;&lt;/a&gt;
  &lt;a href="https://travis-ci.com/netdata/netdata" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1a759dd11b009163880e1799218fc2fa0d185c256d72235dad6334ed95168a2a/68747470733a2f2f7472617669732d63692e636f6d2f6e6574646174612f6e6574646174612e7376673f6272616e63683d6d6173746572" alt="Build status"&gt;&lt;/a&gt;
  &lt;a href="https://bestpractices.coreinfrastructure.org/projects/2231" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/255974dcb2adf534e2daa07f00239d31621ce3a9910f4c5e3b4ac4252382271f/68747470733a2f2f626573747072616374696365732e636f7265696e6672617374727563747572652e6f72672f70726f6a656374732f323233312f6261646765" alt="CII Best Practices"&gt;&lt;/a&gt;
  &lt;a href="https://www.gnu.org/licenses/gpl-3.0" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9add6b327f8f49a33a5a0e485009666d2dd8cb698d30333b4e4467717a851d52/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d47504c25323076332532422d626c75652e737667" alt="License: GPL v3+"&gt;&lt;/a&gt;
  &lt;a href="https://raw.githubusercontent.com/netdata/netdata/master/&amp;lt;&amp;gt;"&gt;&lt;img src="https://camo.githubusercontent.com/87285b3e497b9deae58ad4ca27f5680d6deba9e7f29b0e3f3296e96b7db2b055/68747470733a2f2f7777772e676f6f676c652d616e616c79746963732e636f6d2f636f6c6c6563743f763d31266169703d3126743d7061676576696577265f733d312664733d6769746875622664723d68747470732533412532462532466769746875622e636f6d2532466e6574646174612532466e65746461746126646c3d68747470732533412532462532466d792d6e6574646174612e696f253246676974687562253246726561646d65265f753d4d41437e266369643d35373932646664372d386463342d343736622d616633312d646132666462396639336432267469643d55412d36343239353637342d33" alt="analytics"&gt;&lt;/a&gt;
  &lt;br&gt;
  &lt;a href="https://codeclimate.com/github/netdata/netdata" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9069fa980efff0a8fc34b07102173b6b556c86122742d6e46fa7031c681a58b6/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6e6574646174612f6e6574646174612f6261646765732f6770612e737667" alt="Code Climate"&gt;&lt;/a&gt;
  &lt;a href="https://www.codacy.com/app/netdata/netdata?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=netdata/netdata&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8a755ca7f81af47658cb3ceccf2e6b854d08cb2a9fed440c6abb0580ae7ce91/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6139393438373366333064303435623962346238333630366333656233343938" alt="Codacy"&gt;&lt;/a&gt;
  &lt;a href="https://lgtm.com/projects/g/netdata/netdata/context:cpp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/39498eeb6484c464bc45caf6073a8cfc872e3dbfad2f1228294fd58e65ba0e6f/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6370702f672f6e6574646174612f6e6574646174612e7376673f6c6f676f3d6c67746d" alt="LGTM C"&gt;&lt;/a&gt;
  &lt;a href="https://lgtm.com/projects/g/netdata/netdata/context:javascript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0f310ad8cdf02d5cd56b2e246f56116e7d2226cb8e15b63ed58ac2c252c19458/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6a6176617363726970742f672f6e6574646174612f6e6574646174612e7376673f6c6f676f3d6c67746d" alt=""&gt;&lt;/a&gt;
  &lt;a href="https://lgtm.com/projects/g/netdata/netdata/context:python" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9d1b92afc8843840377ef1863dc3c1cddc7da63e178a33f6d5cd9c68c12b1cc6/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f6e6574646174612f6e6574646174612e7376673f6c6f676f3d6c67746d" alt="LGTM PYTHON"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1153921/95269366-1b814680-07ee-11eb-8ff4-c1b0b8758499.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jdjE_aGg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1153921/95269366-1b814680-07ee-11eb-8ff4-c1b0b8758499.png" alt="---"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Netdata's &lt;strong&gt;distributed, real-time monitoring Agent&lt;/strong&gt; collects thousands of metrics from systems, hardware, containers
and applications with zero configuration. It runs permanently on all your physical/virtual servers, containers, cloud
deployments, and edge/IoT devices, and is perfectly safe to install on your systems mid-incident without any
preparation.&lt;/p&gt;
&lt;p&gt;You can install Netdata on most Linux distributions (Ubuntu, Debian, CentOS, and more), container platforms (Kubernetes
clusters, Docker), and many other operating systems (FreeBSD, macOS). No &lt;code&gt;sudo&lt;/code&gt; required.&lt;/p&gt;
&lt;p&gt;Netdata is designed by system administrators, DevOps engineers, and developers to collect everything, help you visualize
metrics, troubleshoot complex performance problems, and make data interoperable with the rest of your monitoring stack.&lt;/p&gt;
&lt;p&gt;People get addicted to Netdata. Once you use it on your systems, there's no going back! &lt;em&gt;You've been warned...&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1153921/96495792-2e881380-11fd-11eb-85a3-53d3a84dcb29.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZpx2f1p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1153921/96495792-2e881380-11fd-11eb-85a3-53d3a84dcb29.png" alt="Users who are addicted to Netdata"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/netdata/netdata/releases/latest"&gt;Latest release&lt;/a&gt;: v1.30.0, March 31, 2021&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The v1.30.0 release of Netdata…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/netdata/netdata"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;30 seconds of code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- 30 seconds of code&lt;/p&gt;

&lt;p&gt;Stars:- 72608&lt;/p&gt;

&lt;p&gt;1 Visit our website to view our snippet collection.&lt;/p&gt;

&lt;p&gt;2 Use the Search page to find snippets that suit your needs. You can search by name, tag, language or using a snippet's description. Just start typing a term and see what comes up.&lt;/p&gt;

&lt;p&gt;3 Browse the JavaScript Snippet List to see all the snippets in this project or click individual tags at the top of the same page to narrow down your search to a specific tag.&lt;/p&gt;

&lt;p&gt;4 Click on each snippet card to view the whole snippet, including code, explanation and examples.&lt;/p&gt;

&lt;p&gt;5 You can use the button on the right side of a snippet card to copy the code to clipboard.&lt;/p&gt;

&lt;p&gt;6 If you like the project, give it a star. It means a lot to the people maintaining it.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/30-seconds"&gt;
        30-seconds
      &lt;/a&gt; / &lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;
        30-seconds-of-code
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Short JavaScript code snippets for all your development needs
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://30secondsofcode.org/js/p/1" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pFFcrnb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/30-seconds/30-seconds-of-code/master/logo.png" alt="Logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
30 seconds of code&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Short JavaScript code snippets for all your development needs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Visit &lt;a href="https://30secondsofcode.org" rel="nofollow"&gt;our website&lt;/a&gt; to view our snippet collection.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="https://30secondsofcode.org/search" rel="nofollow"&gt;Search page&lt;/a&gt; to find snippets that suit your needs. You can search by name, tag, language or using a snippet's description. Just start typing a term and see what comes up.&lt;/li&gt;
&lt;li&gt;Browse the &lt;a href="https://30secondsofcode.org/js/p/1" rel="nofollow"&gt;JavaScript Snippet List&lt;/a&gt; to see all the snippets in this project or click individual tags at the top of the same page to narrow down your search to a specific tag.&lt;/li&gt;
&lt;li&gt;Click on each snippet card to view the whole snippet, including code, explanation and examples.&lt;/li&gt;
&lt;li&gt;You can use the button on the right side of a snippet card to copy the code to clipboard.&lt;/li&gt;
&lt;li&gt;If you like the project, give it a star. It means a lot to the people maintaining it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Want to contribute?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If you want to help us improve, take…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/30-seconds/30-seconds-of-code"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Endless Acid Banger&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- The Endless Acid Banger&lt;/p&gt;

&lt;p&gt;Stars:- 810&lt;/p&gt;

&lt;p&gt;An algorithmic human-computer techno jam&lt;br&gt;
Built in Typescript with the WebAudio API.&lt;br&gt;
Live version running at &lt;a href="http://www.vitling.xyz/toys/acid-banger"&gt;www.vitling.xyz/toys/acid-banger&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vitling"&gt;
        vitling
      &lt;/a&gt; / &lt;a href="https://github.com/vitling/acid-banger"&gt;
        acid-banger
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Endless Acid Banger
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
The Endless Acid Banger&lt;/h1&gt;
&lt;p&gt;An algorithmic human-computer techno jam&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/vitling/acid-banger/blob/main/preview.png?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMZ5HxvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vitling/acid-banger/raw/main/preview.png%3Fraw%3Dtrue" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Built in Typescript with the WebAudio API.&lt;/p&gt;
&lt;p&gt;Live version running at &lt;a href="https://www.vitling.xyz/toys/acid-banger" rel="nofollow"&gt;www.vitling.xyz/toys/acid-banger&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Support&lt;/h2&gt;
&lt;p&gt;You can support my work by &lt;a href="https://github.com/sponsors/vitling"&gt;Sponsoring me on GitHub&lt;/a&gt; or &lt;a href="https://music.vitling.xyz" rel="nofollow"&gt;buying&lt;/a&gt; &lt;a href="https://edgenetwork.bandcamp.com/album/edge001-spaceport-lounge-music" rel="nofollow"&gt;my music&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
License &amp;amp; Intended use&lt;/h2&gt;
&lt;p&gt;This is an art project, not a software tool for music creation. I consider it to be finished, and as such I will likely not be accepting feature requests or feature-driven PRs. Please feel encouraged to fork the project and do something else with it if you would like - I love to see further creative work built on top of it.&lt;/p&gt;
&lt;p&gt;This work is licensed under a &lt;a href="http://creativecommons.org/licenses/by/4.0/" rel="nofollow"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;. I am aware that this is an unusual choice for code, but it reflects its status as an art project. IANAL, so I'm not sure how this stands up legally, but in my mind this…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/vitling/acid-banger"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Zellij&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- Zellij&lt;/p&gt;

&lt;p&gt;Stars :-1782&lt;/p&gt;

&lt;p&gt;Zellij is a workspace aimed at developers, ops-oriented people and anyone who loves the terminal. At its core, it is a terminal multiplexer (similar to tmux and screen), but this is merely its infrastructure layer.&lt;/p&gt;

&lt;p&gt;Zellij includes a layout system, and a plugin system allowing one to create plugins in any language that compiles to WebAssembly.&lt;/p&gt;

&lt;p&gt;For more details about our future plans, read about upcoming features in our roadmap.&lt;/p&gt;

&lt;p&gt;Zellij was initially called "Mosaic".&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zellij-org"&gt;
        zellij-org
      &lt;/a&gt; / &lt;a href="https://github.com/zellij-org/zellij"&gt;
        zellij
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A terminal workspace with batteries included
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
  &lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/zellij-org/zellij/main/assets/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3aalRzN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/zellij-org/zellij/main/assets/logo.png" alt="logo" width="200"&gt;&lt;/a&gt;
  &lt;br&gt;
  Zellij
  &lt;br&gt;
  &lt;br&gt;
&lt;/h1&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/zellij-org/zellij/main/assets/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Brzz6Huv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/zellij-org/zellij/main/assets/demo.gif" alt="demo"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://discord.gg/CrUAFH3" rel="nofollow"&gt;&lt;img alt="Discord Chat" src="https://camo.githubusercontent.com/5a4dbd0a6e95405a44509214fc643bfafcb87bf0ab86756e478e5e7ac96c8fc1/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f373731333637313333373135363238303733"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
What is this?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Zellij" rel="nofollow"&gt;Zellij&lt;/a&gt; is a workspace aimed at developers, ops-oriented people and anyone who loves the terminal
At its core, it is a terminal multiplexer (similar to &lt;a href="https://github.com/tmux/tmux"&gt;tmux&lt;/a&gt; and &lt;a href="https://www.gnu.org/software/screen/" rel="nofollow"&gt;screen&lt;/a&gt;), but this is merely its infrastructure layer.&lt;/p&gt;
&lt;p&gt;Zellij includes a &lt;a href="https://zellij.dev/documentation/layouts.html" rel="nofollow"&gt;layout system&lt;/a&gt;, and a &lt;a href="https://zellij.dev/documentation/plugins.html" rel="nofollow"&gt;plugin system&lt;/a&gt; allowing one to create plugins in any language that compiles to WebAssembly.&lt;/p&gt;
&lt;p&gt;For more details about our future plans, read about upcoming features in our &lt;a href="https://raw.githubusercontent.com/zellij-org/zellij/main/#roadmap"&gt;roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Zellij was initially called "Mosaic".&lt;/p&gt;
&lt;h2&gt;
How do I install it?&lt;/h2&gt;
&lt;p&gt;You can install it through &lt;code&gt;cargo&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cargo install zellij
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or you can download a prebuilt binary from our &lt;a href="https://github.com/zellij-org/zellij/releases"&gt;Releases&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
How do I hack on it?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clone the project&lt;/li&gt;
&lt;li&gt;Install cargo-make with &lt;code&gt;cargo install --force cargo-make&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In the project folder, run: &lt;code&gt;cargo make run&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more build commands, take a look at &lt;a href="https://raw.githubusercontent.com/zellij-org/zellij/main/CONTRIBUTING.md"&gt;&lt;code&gt;Contributing.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;p&gt;For configuring Zellij, please see the &lt;a href="https://zellij.dev/documentation/configuration.html" rel="nofollow"&gt;Configuration&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zellij-org/zellij"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;F´: A Flight-Proven, Multi-Platform, Open-Source Flight Software Framework&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- F´&lt;/p&gt;

&lt;p&gt;Stars:- 7684&lt;/p&gt;

&lt;p&gt;F´ (F Prime) is a component-driven framework that enables rapid development and deployment of spaceflight and other embedded software applications. Originally developed at the Jet Propulsion Laboratory, F´ has been successfully deployed on several space applications. It is tailored but not limited to small-scale spaceflight systems such as CubeSats, SmallSats, and instruments.&lt;/p&gt;

&lt;p&gt;Please Visit the F´ Website: &lt;a href="https://nasa.github.io/fprime/"&gt;https://nasa.github.io/fprime/&lt;/a&gt;. This website contains project information, user guides, documentation, tutorials, and more!&lt;/p&gt;

&lt;p&gt;F´ comprises several elements:&lt;/p&gt;

&lt;p&gt;1 An architecture that decomposes flight software into discrete components with well-defined interfaces&lt;/p&gt;

&lt;p&gt;2 A C++ framework that provides core capabilities such as message queues and threads&lt;/p&gt;

&lt;p&gt;3 Modeling tools for specifying components and connections and automatically generating code&lt;/p&gt;

&lt;p&gt;4 A growing collection of ready-to-use components&lt;/p&gt;

&lt;p&gt;5 Testing tools for testing flight software at the unit and integration levels.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nasa"&gt;
        nasa
      &lt;/a&gt; / &lt;a href="https://github.com/nasa/fprime"&gt;
        fprime
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      F' - A flight software and embedded systems framework
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
F´: A Flight-Proven, Multi-Platform, Open-Source Flight Software Framework&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://lgtm.com/projects/g/nasa/fprime/context:cpp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/91dbbac49d3f21475e8604ae2c5dc97adc08a4a43d19f8cd25949f46e0d16a7d/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6370702f672f6e6173612f667072696d652e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138" alt="Language grade: C++"&gt;&lt;/a&gt;
&lt;a href="https://lgtm.com/projects/g/nasa/fprime/context:python" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/be6009530e9da3844fc7ea9cab6eaf47c08da8b9cdf90daf25710236bea62403/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f707974686f6e2f672f6e6173612f667072696d652e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138" alt="Language grade: Python"&gt;&lt;/a&gt;
&lt;a href="https://lgtm.com/projects/g/nasa/fprime/context:javascript" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8a68e1552d8577395467aa90bd18f42287bc8cf0e2def835ca409bb8cf5c7f8a/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6a6176617363726970742f672f6e6173612f667072696d652e7376673f6c6f676f3d6c67746d266c6f676f57696474683d3138" alt="Language grade: JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;F´ (F Prime) is a component-driven framework that enables rapid development and deployment of spaceflight and other embedded software applications. Originally developed at the Jet Propulsion Laboratory, F´ has been successfully deployed on several space applications. It is tailored but not limited to small-scale spaceflight systems such as CubeSats, SmallSats, and instruments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please Visit the F´ Website:&lt;/strong&gt; &lt;a href="https://nasa.github.io/fprime/" rel="nofollow"&gt;https://nasa.github.io/fprime/&lt;/a&gt;.  This website contains project information, user guides, documentation, tutorials, and more!&lt;/p&gt;
&lt;p&gt;F´ comprises several elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An architecture that decomposes flight software into discrete components with well-defined interfaces&lt;/li&gt;
&lt;li&gt;A C++ framework that provides core capabilities such as message queues and threads&lt;/li&gt;
&lt;li&gt;Modeling tools for specifying components and connections and automatically generating code&lt;/li&gt;
&lt;li&gt;A growing collection of ready-to-use components&lt;/li&gt;
&lt;li&gt;Testing tools for testing flight software at the unit and integration levels.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Quick Installation Guide&lt;/h2&gt;
&lt;p&gt;The following utilities are prerequisites to installing F´:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmake&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;Python…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nasa/fprime"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Awesome Linux Software&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- Awesome Linux Software&lt;/p&gt;

&lt;p&gt;Stars:- 15178&lt;/p&gt;

&lt;p&gt;🐧 This repo is a collection of AWESOME Linux applications and tools for any users/developers.&lt;br&gt;
🐧 Feel free to contribute / star / fork / pull request . Any recommendations and suggestions are welcome.&lt;/p&gt;

&lt;p&gt;Update: This repo has a friendlier version available here.&lt;/p&gt;

&lt;p&gt;Acknowledgement: Everything written below is from my own experience in college and after reading various materials. I am neither a professional nor an expert, but a passionate student. Anyone can open a discussion in the issue section, or a pull request if something should be modified or adde&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/luong-komorebi"&gt;
        luong-komorebi
      &lt;/a&gt; / &lt;a href="https://github.com/luong-komorebi/Awesome-Linux-Software"&gt;
        Awesome-Linux-Software
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A list of awesome applications, software, tools and other materials for Linux distros. 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Awesome Linux Software&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/img/tux.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cstXOSkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/img/tux.png" alt="Tux"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🐧 This repo is a collection of &lt;strong&gt;AWESOME&lt;/strong&gt; Linux applications and tools for &lt;strong&gt;any users/developers&lt;/strong&gt;
&lt;br&gt;
🐧 Feel free to &lt;strong&gt;contribute&lt;/strong&gt; / &lt;strong&gt;star&lt;/strong&gt; / &lt;strong&gt;fork&lt;/strong&gt; / &lt;strong&gt;pull request&lt;/strong&gt; . Any &lt;strong&gt;recommendations&lt;/strong&gt; and &lt;strong&gt;suggestions&lt;/strong&gt; are welcome.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: This repo has a friendlier version available &lt;a href="https://luong-komorebi.gitlab.io/Awesome-Linux-Software" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Acknowledgement:&lt;/strong&gt; &lt;em&gt;Everything written below is from my own experience in college and after reading various materials. I am neither a professional nor an expert, but a passionate student. Anyone can open a discussion in the issue section, or a pull request if something should be modified or added.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Brazilian Portuguese version : &lt;a href="https://github.com/LewisVo/Awesome-Linux-Software/blob/master/README_pt-BR.md"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Chinese version : &lt;a href="https://github.com/LewisVo/Awesome-Linux-Software/blob/master/README_zh-CN.md"&gt;here&lt;/a&gt; or &lt;a href="https://github.com/alim0x/Awesome-Linux-Software-zh_CN"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Spanish version : &lt;a href="https://github.com/LewisVo/Awesome-Linux-Software/blob/master/README_es-ES.md"&gt;here&lt;/a&gt; or &lt;a href="https://github.com/SaintFenix/Awesome-Linux-Software/blob/master/README_es-ES.md"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Thai version : &lt;a href="https://github.com/LewisVo/Awesome-Linux-Software/blob/master/README_th-TH.md"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#applications"&gt;Applications&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#audio"&gt;Audio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#chat-clients"&gt;Chat Clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#data-backup-and-recovery"&gt;Data Backup and Recovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#desktop-customization"&gt;Desktop Customization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#development"&gt;Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#e-book-utilities"&gt;E-Book Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#editors"&gt;Editors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#education"&gt;Education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#email"&gt;Email Utilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#file-manager"&gt;File Manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#games"&gt;Games&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#graphics"&gt;Graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#internet"&gt;Internet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#office"&gt;Office&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#productivity"&gt;Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#proxy"&gt;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#security"&gt;Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://raw.githubusercontent.com/luong-komorebi/Awesome-Linux-Software/master/#sharing-files"&gt;Sharing&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/luong-komorebi/Awesome-Linux-Software"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Corona Warn App - Android&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- Corona Warn App - Android&lt;/p&gt;

&lt;p&gt;Stars:- 2315&lt;/p&gt;

&lt;p&gt;The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from Apple and Google. The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the native Android implementation of the Corona-Warn-App. Visit our FAQ page for more information and common issues&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/corona-warn-app"&gt;
        corona-warn-app
      &lt;/a&gt; / &lt;a href="https://github.com/corona-warn-app/cwa-app-android"&gt;
        cwa-app-android
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Native Android app using the Apple/Google exposure notification API.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    Corona Warn App - Android
&lt;/h1&gt;

&lt;p&gt;
    &lt;a href="https://github.com/corona-warn-app/cwa-app-android/issues" title="Open Issues"&gt;
        &lt;img src="https://camo.githubusercontent.com/511fe6b3d99d8a717865ad6c93ff179570df2ebffaa9b2cde915e99acb9ec88b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f636f726f6e612d7761726e2d6170702f6377612d6170702d616e64726f6964"&gt;
    &lt;/a&gt;
    &lt;a href="https://circleci.com/gh/corona-warn-app/cwa-app-android" title="Build Status" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/d1f8f779097f91138d16cb5822a4300444905bd21b76151e76edcdaf9a7e8039/68747470733a2f2f636972636c6563692e636f6d2f67682f636f726f6e612d7761726e2d6170702f6377612d6170702d616e64726f69642e706e673f636972636c652d746f6b656e3d63323663363839616437383333623863303738363735326433653635663536663235663930366633267374796c653d736869656c64266272616e63683d6d61696e"&gt;
    &lt;/a&gt;
   &lt;a href="https://sonarcloud.io/component_measures?id=corona-warn-app_cwa-app-android&amp;amp;metric=Coverage&amp;amp;view=list" title="Coverage" rel="nofollow"&gt;
       &lt;img src="https://camo.githubusercontent.com/279ce1da8f6e833a4572bd79acf5338d161b92d110b2da125aaeed65a74d7f68/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d636f726f6e612d7761726e2d6170705f6377612d6170702d616e64726f6964266d65747269633d636f766572616765"&gt;
    &lt;/a&gt;
    &lt;a href="https://raw.githubusercontent.com/corona-warn-app/cwa-app-android/main/./LICENSE" title="License"&gt;
        &lt;img src="https://camo.githubusercontent.com/fd15b0e31504228d27fee0e7a9d3d4529d03a4b6a5d3ce8df340542c1ce872bf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d677265656e2e737667"&gt;
    &lt;/a&gt;
    &lt;a href="https://api.reuse.software/info/github.com/corona-warn-app/cwa-app-android" title="REUSE Status" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/9b8b734fd82345243ae894bed964db679e4b5053624400c40da5ba8095dfb05f/68747470733a2f2f6170692e72657573652e736f6674776172652f62616467652f6769746875622e636f6d2f636f726f6e612d7761726e2d6170702f6377612d6170702d616e64726f6964"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://raw.githubusercontent.com/corona-warn-app/cwa-app-android/main/#development"&gt;Development&lt;/a&gt; •
  &lt;a href="https://raw.githubusercontent.com/corona-warn-app/cwa-app-android/main/#architecture--documentation"&gt;Documentation&lt;/a&gt; •
  &lt;a href="https://raw.githubusercontent.com/corona-warn-app/cwa-app-android/main/#how-to-contribute"&gt;Contribute&lt;/a&gt; •
  &lt;a href="https://raw.githubusercontent.com/corona-warn-app/cwa-app-android/main/#support--feedback"&gt;Support&lt;/a&gt; •
  &lt;a href="https://github.com/corona-warn-app/cwa-app-android/releases"&gt;Changelog&lt;/a&gt; •
  &lt;a href="https://raw.githubusercontent.com/corona-warn-app/cwa-app-android/main/#licensing"&gt;Licensing&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The goal of this project is to develop the official Corona-Warn-App for Germany based on the exposure notification API from &lt;a href="https://www.apple.com/covid19/contacttracing/" rel="nofollow"&gt;Apple&lt;/a&gt; and &lt;a href="https://www.google.com/covid19/exposurenotifications/" rel="nofollow"&gt;Google&lt;/a&gt;. The apps (for both iOS and Android) use Bluetooth technology to exchange anonymous encrypted data with other mobile phones (on which the app is also installed) in the vicinity of an app user's phone. The data is stored locally on each user's device, preventing authorities or other parties from accessing or controlling the data. This repository contains the &lt;strong&gt;native Android implementation&lt;/strong&gt; of the Corona-Warn-App
&lt;strong&gt;Visit our &lt;a href="https://www.coronawarn.app/en/faq/" rel="nofollow"&gt;FAQ page&lt;/a&gt; for more information and common issues&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/corona-warn-app/cwa-app-android/wiki"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/corona-warn-app/cwa-app-android/wiki/1-Setup"&gt;1 Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/corona-warn-app/cwa-app-android/wiki/2-Backend"&gt;2 Backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/corona-warn-app/cwa-app-android/wiki/3-UI"&gt;3 UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/corona-warn-app/cwa-app-android/wiki/4-Google-Exposure-Notifications-API"&gt;4 Exposure Notification Google API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/corona-warn-app/cwa-app-android/wiki/5-Packages"&gt;5 Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Known Issues&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Exposure Notification API is going to block you from successfully testing the Application unless you are whitelisted inside…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/corona-warn-app/cwa-app-android"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
  

&lt;p&gt;&lt;strong&gt;linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Name:- linux&lt;/p&gt;

&lt;p&gt;Stars:- 109933&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#linux-kernel"&gt;
  &lt;/a&gt;
  Linux kernel
&lt;/h1&gt;

&lt;p&gt;There are several guides for kernel developers and users. These guides can&lt;br&gt;
be rendered in a number of formats, like HTML and PDF. Please read&lt;br&gt;
Documentation/admin-guide/README.rst first.&lt;/p&gt;

&lt;p&gt;In order to build the documentation, use &lt;code&gt;make htmldocs&lt;/code&gt; or&lt;br&gt;
&lt;code&gt;make pdfdocs&lt;/code&gt;.  The formatted documentation can also be read online at:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.kernel.org/doc/html/latest/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;There are various text files in the Documentation/ subdirectory,&lt;br&gt;
several of them using the Restructured Text markup notation.&lt;/p&gt;

&lt;p&gt;Please read the Documentation/process/changes.rst file, as it contains the&lt;br&gt;
requirements for building and running the kernel, and information about&lt;br&gt;
the problems which may result by upgrading your kernel.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/torvalds"&gt;
        torvalds
      &lt;/a&gt; / &lt;a href="https://github.com/torvalds/linux"&gt;
        linux
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Linux kernel source tree
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class=""&gt;&lt;div class="plain"&gt;&lt;pre&gt;Linux kernel
============

There are several guides for kernel developers and users. These guides can
be rendered in a number of formats, like HTML and PDF. Please read
Documentation/admin-guide/README.rst first.

In order to build the documentation, use ``make htmldocs`` or
``make pdfdocs``.  The formatted documentation can also be read online at:

    &lt;a href="https://www.kernel.org/doc/html/latest/" rel="nofollow"&gt;https://www.kernel.org/doc/html/latest/&lt;/a&gt;

There are various text files in the Documentation/ subdirectory,
several of them using the Restructured Text markup notation.

Please read the Documentation/process/changes.rst file, as it contains the
requirements for building and running the kernel, and information about
the problems which may result by upgrading your kernel.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/torvalds/linux"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;Note:- visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpN1Nik7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9JCEgIY5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619463/7a66f3fc-82cb-499b-a22b-9b346123f937.png" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/responsive-website-design-using-html-css-and-javascript-20hp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Responsive Website Design Using HTML CSS And JavaScript 🥗&lt;/h2&gt;
      &lt;h3&gt;Pawan Bhayde ・ Apr 23 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Production deployment Strapi + Gatsby app on VPS Shared Hosting: Deploy,  web hooks &amp; https. (3)</title>
      <author>Daniel Krupnyy</author>
      <pubDate>Fri, 23 Apr 2021 09:50:33 +0000</pubDate>
      <link>https://dev.to/danielkrupnyy/production-deployment-strapi-gatsby-app-on-vps-shared-hosting-deploy-web-hooks-https-3-4hcp</link>
      <guid>https://dev.to/danielkrupnyy/production-deployment-strapi-gatsby-app-on-vps-shared-hosting-deploy-web-hooks-https-3-4hcp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#production-deployment-strapi-gatsby-app-on-vps-shared-hosting-deploy-web-hooks-amp-https3"&gt;
  &lt;/a&gt;
  Production deployment Strapi + Gatsby app on VPS Shared Hosting: Deploy, web hooks &amp;amp; https.(3)
&lt;/h1&gt;

&lt;p&gt;Welcome to the last part of Strapi + Gatsby deployment tutorial 👋 &lt;/p&gt;

&lt;p&gt;If you don't like to read a lot of text, the finished project is &lt;a href="https://github.com/danielkrupnyy/Production-deployment-Strapi-Gatsby.git"&gt;here&lt;/a&gt; 🤗&lt;/p&gt;

&lt;p&gt;Let's go to work 💪&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#deployment"&gt;Deployment Strapi and Gatsby&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ftp"&gt;Opening FTP/SFTP connection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#preparing"&gt;Preparing to upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#authenticated"&gt;Creating Authenticated Requests&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.tonecessary_dependencies"&gt;Installing necessary dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adjusting_configs"&gt;Adjusting configs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#uploading"&gt;Uploading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dependencies"&gt;Installing Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#ssl"&gt;Enabling SSL(HTTPS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing our apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pm2"&gt;Automatisation with PM2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#webhooks"&gt;Creating Webhooks&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#go"&gt;Installing GO Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tool"&gt;Installing Webhook tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configs"&gt;Creating configs for webhook tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#deployment-strapi-and-gatsby"&gt;
  &lt;/a&gt;
  Deployment Strapi and Gatsby &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Some hosts may provide you with a user interface to deploy data, but unfortunately not each. That's why in our case we will using classic FTP/SFTP connection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opening-ftpsftp-connection"&gt;
  &lt;/a&gt;
  Opening FTP/SFTP connection &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;All data for connection by FTP/SFTP you can find on your host.&lt;/p&gt;

&lt;p&gt;I prefer to use &lt;a href="https://cyberduck.io/"&gt;Cyberduck client&lt;/a&gt; for such purposes. You can use it or something like &lt;a href="https://filezilla-project.org/"&gt;FileZilla&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the video how to open &lt;a href="https://www.youtube.com/watch?v=7c8SYE2ALRc"&gt;FTP/SFTP connection using Cyberduck&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preparing-to-upload"&gt;
  &lt;/a&gt;
  Preparing to upload &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Before you upload Gatsby files to server, you need to&lt;br&gt;
install &lt;a href="https://www.npmjs.com/package/fs-extra"&gt;fs-extra&lt;/a&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install fs-extra
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then change "&lt;em&gt;gatsby-node.js&lt;/em&gt;" file or create it and put this code inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs-extra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onPostBuild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copySync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public_shtml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;overwrite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will change the name of the "&lt;em&gt;public&lt;/em&gt;" folder to "&lt;em&gt;public_html&lt;/em&gt;" so that VestaCP can read the statically generated files after build.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-authenticated-requests"&gt;
  &lt;/a&gt;
  Creating Authenticated Requests &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/danielkrupnyy/production-deploying-strapi-gatsby-app-to-vps-share-hosting-preparing-authenticated-requests-1-4i86"&gt;first part&lt;/a&gt; we Configured Authenticated Requests in Strapi and created new Role and User for it.&lt;br&gt;
Now is time to create Authenticated Requests.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#installing-necessary-dependencies"&gt;
  &lt;/a&gt;
  Installing necessary dependencies &lt;a&gt;
&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;First install all dependencies to Gatsby:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add axios isomorphic-fetch gatsby-source-graphql @apollo/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install dependencies for Strapi:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn strapi &lt;span class="nb"&gt;install &lt;/span&gt;graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now explanations. Let's start with &lt;a href="https://www.apollographql.com/docs/react/"&gt;ApolloClient&lt;/a&gt;(&lt;code&gt;@apollo/client&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/docs/react/"&gt;ApolloClient&lt;/a&gt; is a comprehensive state management library for JavaScript that enables you to manage both local and remote data with GraphQL. &lt;strong&gt;Use it to fetch, cache, and modify application data, all while automatically updating your UI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In our case that library will be helpful to get token from Strapi. &lt;/p&gt;

&lt;p&gt;Since Apollo working with GraphQL we installed to Strapi &lt;code&gt;graphql&lt;/code&gt; &lt;a href="https://strapi.io/documentation/developer-docs/latest/development/plugins/graphql.html#registration"&gt;package that recreate data in GraphQL format&lt;/a&gt;. And also we installed &lt;code&gt;gatsby-source-graphql&lt;/code&gt; in Gatsby to get data in this format.&lt;/p&gt;

&lt;p&gt;Packages &lt;code&gt;axios&lt;/code&gt; and &lt;code&gt;isomorphic-fetch&lt;/code&gt; will be helpful for fetching data. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adjusting-configs"&gt;
  &lt;/a&gt;
  Adjusting Configs &lt;a&gt;
&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Go to &lt;code&gt;gatsby-config.js&lt;/code&gt; file and find there &lt;code&gt;gatsby-source-strapi&lt;/code&gt; plugin. Extend it add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby-source-strapi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;apiURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:1337&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;contentTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;article&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;category&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;writer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;singleTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`homepage`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`global`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;queryLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// new ---&lt;/span&gt;
        &lt;span class="nx"&gt;loginData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nl"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GATSBY_API_IDENTIFIER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GATSBY_API_PASS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// new ---&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add config for &lt;code&gt;gatsby-source-graphql&lt;/code&gt; plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby-source-graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;typeName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Strapi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;fieldName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strapi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_GRAPHQL_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After go to the root folder of Gatsby and rename &lt;code&gt;.env.example&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt; and change code inside to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GATSBY_ROOT_URL=https://yoursite.com
API_URL=https://subdomain.yoursite.com
API_GRAPHQL_ENDPOINT=https://subdomain.yoursite.com/graphql
GATSBY_API_AUTH=https://subdomain.yoursite.com/auth/local
GATSBY_API_IDENTIFIER=user@mail.com
GATSBY_API_PASS=userPassword
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in the root folder create of Gatsby file &lt;code&gt;gatsby-browser.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ApolloProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;createHttpLink&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/client/link/context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isomorphic-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHttpLink&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_GRAPHQL_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;authLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;authLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;httpLink&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapRootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ApolloProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ApolloProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside this file Apollo will get token from Strapi and also get access to fetching authenticated data.&lt;/p&gt;

&lt;p&gt;But if you remember the &lt;a href="https://dev.to/danielkrupnyy/production-deploying-strapi-gatsby-app-to-vps-share-hosting-preparing-authenticated-requests-1-4i86"&gt;first part&lt;/a&gt;, in order to get Token we need to sand POST request to Strapi with data about user email and password.&lt;/p&gt;

&lt;p&gt;For that go to &lt;code&gt;src&lt;/code&gt; folder in Gatsby and create there path: &lt;code&gt;helpers/getToken.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GATSBY_API_AUTH&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GATSBY_API_IDENTIFIER&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GATSBY_API_PASS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function &lt;code&gt;getToken&lt;/code&gt; takes url to Strapi auth, user email and password from &lt;code&gt;.env&lt;/code&gt; file. Then it returns token. &lt;/p&gt;

&lt;p&gt;Since token refreshes, we can save it in LocalHost. The best way to do it get and save token in &lt;code&gt;layout.js&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;StaticQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Nav&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./nav&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Seo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./seo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../helpers/getToken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;seo&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// new ---&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="c1"&gt;// new ---&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StaticQuery&lt;/span&gt;
      &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="s2"&gt;`
        query {
          strapiHomepage {
            seo {
              metaTitle
              metaDescription
              shareImage {
                publicURL
              }
            }
          }
        }
      `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Seo&lt;/span&gt; &lt;span class="nx"&gt;seo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;seo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Nav&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isRequired&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when &lt;code&gt;layout.js&lt;/code&gt; component is gererated it get request to Strapi, gets token and save it in LocalStorage. In turn ApolloClient at file &lt;code&gt;gatsby-browser.js&lt;/code&gt; get token from LocalStorage and gets with it help GraphQL data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading"&gt;
  &lt;/a&gt;
  Uploading &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When you connected to your server. You need to follow the path: &lt;code&gt;home/username/web/yoursite.com&lt;/code&gt; and drop there your Gatsby app. Then delete "&lt;em&gt;public_shtml&lt;/em&gt;" folder.&lt;/p&gt;

&lt;p&gt;☝️ But don't forget to exclude &lt;em&gt;node_modules&lt;/em&gt; if you don't want to wait all your life for the download to finish 🙄 &lt;/p&gt;

&lt;p&gt;After follow the: &lt;code&gt;home/username/web/subdomainprefix.yoursite.com/public_shtml&lt;/code&gt; and drop there Strapi app. &lt;/p&gt;

&lt;p&gt;☝️ In my case, I was using Strapi with its own SQLite database and forgot to upload it to the server because it was hidden on my system and after running on the server, Strapi created a new empty database. So if you don't want to lose your data, don't make my mistakes. Path:&lt;code&gt;.tmp/data.db&lt;/code&gt; ☝️&lt;/p&gt;

&lt;p&gt;If you want to use Strapi with another DB. Strapi has &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/configurations.html#database"&gt;excellent docs on this. &lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing Dependencies &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Then switch to your SSH and go to these paths and in each path write command &lt;code&gt;npm install&lt;/code&gt; to install all projects dependencies &lt;em&gt;(if you forgot how to connecting by SSH you can find this info in &lt;a href="https://dev.to/danielkrupnyy/production-deployment-strapi-gatsby-app-on-vps-shared-hosting-installing-node-creating-configs-2-3d7h"&gt;previous part&lt;/a&gt;)&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-sslhttps"&gt;
  &lt;/a&gt;
  Enabling SSL(HTTPS) &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In VestaCP go to "&lt;em&gt;WEB&lt;/em&gt;" choose your domain and there enable "&lt;em&gt;SSL Support&lt;/em&gt;". &lt;/p&gt;

&lt;p&gt;Then in "&lt;em&gt;SSL Home&lt;/em&gt;" select "&lt;em&gt;public_shtml&lt;/em&gt;" folder.&lt;/p&gt;

&lt;p&gt;Then fill in the following fields with your SSL details: "&lt;em&gt;SSL certificate&lt;/em&gt;", "&lt;em&gt;SSL key&lt;/em&gt;", "&lt;em&gt;SSL certificate/credentials&lt;/em&gt;" or enable "&lt;em&gt;Lets Encrypt support&lt;/em&gt;" if installed on your Vesta panel. &lt;br&gt;
Save all changes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Ltuh0o6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1619077809/vcp3_vqapjg.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Ltuh0o6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1619077809/vcp3_vqapjg.webp" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Do the same with the subdomain.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#testing-our-apps"&gt;
  &lt;/a&gt;
  Testing our apps &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now you can connect by SSH in your terminal and try to fire projects. &lt;code&gt;npm run develop&lt;/code&gt; for Strapi. &lt;br&gt;
Then open new terminal window and do the same for Gatsby.&lt;br&gt;
All should be work.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#automatisation-with-pm2"&gt;
  &lt;/a&gt;
  Automatisation with PM2 &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In order to your apps don't stops when you close terminal windows. You need to install PM2 — process manager that will help you manage and keep your application online.&lt;/p&gt;

&lt;p&gt;In your SSH terminal go to the server root folder and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;pm2 &lt;span class="nt"&gt;-g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installation go to Strapi app:&lt;br&gt;
&lt;code&gt;home/username/web/subdomainprefix.yoursite.com/public_shtml&lt;/code&gt; and create there file "&lt;em&gt;server.js&lt;/em&gt;". &lt;/p&gt;

&lt;p&gt;Then put inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strapi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strapi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;strapi&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;NODE_ENV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;production&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it terminal type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pm2 start server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Strapi app is working 🤗&lt;/p&gt;

&lt;p&gt;Also You must read &lt;a href="https://pm2.keymetrics.io/docs/usage/quick-start/"&gt;this awesome docs about pm2&lt;/a&gt;.&lt;br&gt;
This docs will help you fast understand how to use pm2!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-weebhooks"&gt;
  &lt;/a&gt;
  Creating Weebhooks &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since Gatsby &lt;a href="https://www.gatsbyjs.com/docs/glossary/static-site-generator/"&gt;Static Site Generator&lt;/a&gt;. It generate html at build time. &lt;/p&gt;

&lt;p&gt;Whenever we change something in Strapi, it should send a request to Gatsby that the data has changed, and Gatsby should perform the rebuild.&lt;/p&gt;

&lt;p&gt;In order to solve this problem and similar problems exists Webhooks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installing-go"&gt;
  &lt;/a&gt;
  Installing GO &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First you need to install &lt;a href="https://golang.org/"&gt;GO language&lt;/a&gt; in your server.&lt;/p&gt;

&lt;p&gt;Like I sad in &lt;a href="https://dev.to/danielkrupnyy/production-deployment-strapi-gatsby-app-on-vps-shared-hosting-installing-node-creating-configs-2-3d7h"&gt;previous part&lt;/a&gt;, In my case on server was installed CentOS. &lt;/p&gt;

&lt;p&gt;I'll show you how you can install GO on it using yum:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;yum &lt;span class="nb"&gt;install &lt;/span&gt;go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have different OS you need to find out how to install app on your system. &lt;a href="https://linuxize.com/post/how-to-install-go-on-ubuntu-20-04/"&gt;Sample Ubuntu&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-webhook-tool"&gt;
  &lt;/a&gt;
  Installing Webhook tool &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now install &lt;a href="https://github.com/adnanh/webhook"&gt;webhook&lt;/a&gt; — is a lightweight configurable tool written in Go, that allows you to easily create HTTP endpoints (hooks) on your server.&lt;/p&gt;

&lt;p&gt;Install weebhook on CentOS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go build github.com/adnanh/webhook
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/adnanh/webhook#installation"&gt;Install on another OS&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-configs-for-webhook-tool"&gt;
  &lt;/a&gt;
  Creating configs for webhook tool &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In your server root directory create folder "&lt;em&gt;webhooks&lt;/em&gt;" and put inside folder "&lt;em&gt;fronted-rebuild&lt;/em&gt;" and file "&lt;em&gt;hooks.json&lt;/em&gt;":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"frontend-rebuild"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"execute-command"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/root/webhooks/frontend-rebuild/rebuild.sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"command-working-directory"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/home/username/web/yourdomain.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"response-message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Executing rebuild script..."&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After put in to the "&lt;em&gt;fronted-rebuild&lt;/em&gt;" folder file rebuild.sh:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

yarn clean 
yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll get structure:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGKE67v_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1619090574/Screenshot_2021-04-22_at_2.21.24_PM_gcxktl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGKE67v_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/danilnotorious/image/upload/v1619090574/Screenshot_2021-04-22_at_2.21.24_PM_gcxktl.png" alt="Structure Folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then create file start.sh in the root folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/root/go/bin/webhook &lt;span class="nt"&gt;-hooks&lt;/span&gt; /root/webhooks/hooks.json &lt;span class="nt"&gt;-ip&lt;/span&gt; &lt;span class="s2"&gt;"00.0.000.000"&lt;/span&gt; &lt;span class="nt"&gt;-port&lt;/span&gt; 0000 &lt;span class="nt"&gt;-verbose&lt;/span&gt; &lt;span class="nt"&gt;-hotreload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead "&lt;em&gt;00.0.000.000&lt;/em&gt;" and "&lt;em&gt;0000&lt;/em&gt;" put your ip and port.&lt;/p&gt;

&lt;p&gt;And finally use pm2 command to start webhook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pm2 start start.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's it! &lt;br&gt;
You've deployed the Strapi and Gatsby apps on a VPS hosting with VestaCP installed 👏&lt;/p&gt;

&lt;p&gt;If you like this series and you feeling thankfulness. You can support me 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/danielkrupnyy"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" height="41" width="174"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also if you have a question or want to add something, drop it in the comments 👇 or find me on &lt;a href="https://twitter.com/danielkrupnyy"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>gatsby</category>
    </item>
    <item>
      <title>Create your own terminal with my own ! man !</title>
      <author>Amzy 0 | امین عظیمی</author>
      <pubDate>Fri, 23 Apr 2021 09:48:55 +0000</pubDate>
      <link>https://dev.to/amzy0/create-your-own-terminal-with-my-own-man-4cel</link>
      <guid>https://dev.to/amzy0/create-your-own-terminal-with-my-own-man-4cel</guid>
      <description>&lt;h1&gt;
  &lt;a href="#heimdallr-terminal-emulator"&gt;
  &lt;/a&gt;
  Heimdallr Terminal Emulator
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/amzy-0/heimdallr/"&gt;LINK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A terminal,&lt;br&gt;
We are focused on its lightness and speed!&lt;br&gt;
Finally, it can be a permanent terminal for you!&lt;br&gt;
this terminal witten in C and Gtk framework&lt;br&gt;
because HEIMDALLR must be a SUPER lightweight.&lt;/p&gt;

&lt;p&gt;SIZE : 23KB :D&lt;/p&gt;

&lt;p&gt;after compile !!!!!!!!!!!!!!!!!!!!!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  screenshots
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IvGYrXaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqkzgyx6udgab89hlqrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IvGYrXaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqkzgyx6udgab89hlqrt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U5AR3qPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxgfzaypum17w0sfkkke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U5AR3qPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vxgfzaypum17w0sfkkke.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BiYA5Om9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rhlvee9rg1bxhfjnu1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BiYA5Om9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rhlvee9rg1bxhfjnu1d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installation-debian"&gt;
  &lt;/a&gt;
  installation (Debian)
&lt;/h1&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd debian
$ ./preinstallRequirementsDebian.sh
$ ./install-heimdallr-debian.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
  &lt;a href="#installation-manjaroarch"&gt;
  &lt;/a&gt;
  installation (Manjaro/Arch)
&lt;/h1&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd manjaro-Arch
$ ./preinstallRequirementsManjaroArch.sh
$ ./install-heimdallr-manjaro-Arch.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
  &lt;a href="#installation-fedora"&gt;
  &lt;/a&gt;
  installation (Fedora)
&lt;/h1&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd fedora
$ ./preinstallRequirementsFedora.sh
$ ./install-heimdallr-fedora.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  update
&lt;/h1&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heimdallr-update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h1&gt;
  &lt;a href="#exec-local"&gt;
  &lt;/a&gt;
  exec (local)
&lt;/h1&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd debian OR cd fedora
$ ./preinstallRequirementsFedora.sh OR ./preinstallRequirementsDebian.sh
$ make
$ ./heimdallr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>cpp</category>
      <category>python</category>
    </item>
    <item>
      <title>Python Fire</title>
      <author>Bala Priya</author>
      <pubDate>Fri, 23 Apr 2021 09:34:52 +0000</pubDate>
      <link>https://dev.to/balapriya/python-fire-67i</link>
      <guid>https://dev.to/balapriya/python-fire-67i</guid>
      <description>&lt;p&gt;This blog post summarizes the use cases of Python Fire, explained by David Bieber, a Software Engineer at Google Brain in a webinar organized by Women Who Code Python Track.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hello-python-fire"&gt;
  &lt;/a&gt;
  Hello, Python Fire!
&lt;/h2&gt;

&lt;p&gt;Fire is a Python library that can create a Command-line Interface from absolutely any Python object, created for the purpose of unifying scripting, testing, and operations for complex systems. It’s named “Fire” as it instantly fires off (executes) our command. It can be of great help in the following workflows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating Command-line interfaces&lt;/li&gt;
&lt;li&gt;Developing and Debugging Python code&lt;/li&gt;
&lt;li&gt;Exploring third-party Python projects
Let’s install fire and look at the generic pattern to use fire on the Python programs/functions that we create.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;fire&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fire&lt;/span&gt;
&lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Creating CLIs&lt;/strong&gt;&lt;br&gt;
Let’s call fire on our very own “Hello World!” program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fire&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Fire now creates a CLI for our program as shown below.
&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;            &lt;span class="c1"&gt;# Hello world!
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;My_Name&lt;/span&gt;   &lt;span class="c1"&gt;# Hello @My_Name!
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;WWC&lt;/span&gt; &lt;span class="c1"&gt;# Hello WWC!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does calling Fire do?&lt;br&gt;
Fire consumes the arguments and uses them to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instantiate a class&lt;/li&gt;
&lt;li&gt;Call a function&lt;/li&gt;
&lt;li&gt;Get a member or property&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, it repeats the process until all the arguments have been exhausted. After completion, the resulting component is serialized in a human-readable way.&lt;/p&gt;

&lt;p&gt;To reiterate, we can call fire.Fire with any Python class, object, function, module, dict and so on!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-multiple-commands"&gt;
  &lt;/a&gt;
  Using multiple commands
&lt;/h2&gt;

&lt;p&gt;Let’s see a simple Calculator example, that contains methods add and multiply which each takes two arguments and computes sum and product respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fire&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected Fire creates a CLI from which we should be able to run multiple commands including inspecting the class, add and multiply functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; calculator add 1 2 # 3
&amp;gt; calculator multiply 3 4 # 12
&amp;gt; calculator
Usage: calculator add
       calculator multiply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-hierarchical-commands"&gt;
  &lt;/a&gt;
  Using Hierarchical commands
&lt;/h2&gt;

&lt;p&gt;In the following code snippet, we have a Tools class, which when instantiated would in turn instantiate the Calculator and Widget classes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fire&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tools&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Tools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# The CLI that Fire generates looks allows us to access the respective classes and class methods 
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="n"&gt;calculator&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# 3
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="n"&gt;calculator&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;# 12
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt; 
&lt;span class="n"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="n"&gt;calculator&lt;/span&gt; 
       &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="n"&gt;widget&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#debugging-and-development"&gt;
  &lt;/a&gt;
  Debugging and Development
&lt;/h2&gt;

&lt;p&gt;Python Fire library is indeed very helpful in debugging and development where we can just go ahead and call &lt;code&gt;fire.Fire()&lt;/code&gt; on any Python script without any argument and use in the command-line.&lt;/p&gt;

&lt;p&gt;There’s also an option to use the ‘&lt;code&gt;interactive&lt;/code&gt;’ flag which as shown below, imports useful objects and allows us to directly use them from the IPython shell without having to import modules, function calls etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;
&lt;span class="n"&gt;Fire&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;starting&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;REPL&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fire&lt;/span&gt;
&lt;span class="n"&gt;Objects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Calculator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;
&lt;span class="n"&gt;IPython&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;enhanced&lt;/span&gt; &lt;span class="n"&gt;Interactive&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exploring-thirdparty-python-projects"&gt;
  &lt;/a&gt;
  Exploring third-party Python projects
&lt;/h2&gt;

&lt;p&gt;As with above-explained examples, we might as well call &lt;code&gt;fire.Fire()&lt;/code&gt; on third party modules whose source code we may not necessarily have access to. In the latest release of fire, we can directly call &lt;code&gt;python -m fire&lt;/code&gt; from the command-line&lt;/p&gt;

&lt;p&gt;Let’s walk through an example with the image processing library PIL. Suppose we have a Python script &lt;code&gt;imagefire.py&lt;/code&gt; with the following lines and we want to open a &lt;code&gt;giraffe.png&lt;/code&gt; image and perform some operations on the image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fire&lt;/span&gt;
&lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;imagefire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="n"&gt;giraffe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="n"&gt;giraffe_out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code opens the image, converts it to grayscale, resizes it to the specified size, and then saves the resulting image under the name &lt;code&gt;giraffe_out.png&lt;/code&gt;. The recent release of fire allows us to do the same all the more easily!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# NEW release of Fire
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;fire&lt;/span&gt; &lt;span class="n"&gt;PIL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="n"&gt;giraffe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;resize&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="n"&gt;giraffe_out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;If you’re looking to delve deeper into Python Fire, the following are some of the resources&lt;br&gt;
[1] &lt;a href="https://google.github.io/python-fire/guide/"&gt;https://google.github.io/python-fire/guide/&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://github.com/google/python-fire"&gt;https://github.com/google/python-fire&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Why you shouldn't hire clones. </title>
      <author>Adam Farrell</author>
      <pubDate>Fri, 23 Apr 2021 08:38:51 +0000</pubDate>
      <link>https://dev.to/ctowestmidlands/why-you-shouldn-t-hire-clones-343e</link>
      <guid>https://dev.to/ctowestmidlands/why-you-shouldn-t-hire-clones-343e</guid>
      <description>&lt;p&gt;We have all been there. One of your best employees hands their notice in and your stomach does a little flip as you know how important they are.&lt;/p&gt;

&lt;p&gt;You try your best to see if you can do anything to keep them but they explain this is an opportunity they can't turn down. So your attention turns to trying to find someone to replace them.&lt;/p&gt;

&lt;p&gt;You tell your recruiter we need another "Sarah"! You want someone with the exact same skills so they can come in and "hit the ground running".&lt;/p&gt;

&lt;p&gt;Is this the right approach?&lt;/p&gt;

&lt;p&gt;Pause for a moment and ask yourself why would someone move roles to do the exact same job they are doing now?&lt;/p&gt;

&lt;p&gt;Of course, this does happen sometimes, for example, if someone has been made redundant.&lt;/p&gt;

&lt;p&gt;If you did hire that person how long will it take for them to get bored doing the same thing they have done for the last 3 years? Probably not long. This will likely mean after spending 1 year to 18 months with you they start looking for something more challenging and will provide better progression opportunities.&lt;/p&gt;

&lt;p&gt;Then you are left in the same place as they were before, looking to hire someone doing the exact same job because you need them to "hit the ground running". And so the cycle continues.&lt;/p&gt;

&lt;p&gt;Still, the biggest reason I hear for people looking to move roles is so they can learn and develop. If you can't provide that to a candidate then it will cause more pain further down the line.&lt;/p&gt;

&lt;p&gt;So rather than going for a like for like replacement consider if hiring someone who perhaps doesn't have all the skills just yet but has the potential, ambition and correct attitude to attain them. If someone has something to work towards or aim for my experience is that they are far more motivated in the position.&lt;/p&gt;

&lt;p&gt;Yes, this will mean a bit more time is needed on your part but that initial investment will usually lead to a brilliant new employee. I have seen it many times where people in this scenario have gone on to be a brilliant contributor to the business and they have more loyalty and appreciation for the business as they have profited as well.&lt;/p&gt;

&lt;p&gt;So, don't just mindlessly look for clones of your previous employees.&lt;br&gt;
Look at your current roles and expectations. Are they realistic? Hire for potential.&lt;/p&gt;

</description>
      <category>hiring</category>
      <category>leadership</category>
      <category>motivation</category>
      <category>skills</category>
    </item>
    <item>
      <title>Creating a Node back-end using the MVC software design pattern</title>
      <author>Andrew Baisden</author>
      <pubDate>Fri, 23 Apr 2021 08:26:42 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/creating-a-node-back-end-using-the-mvc-software-design-pattern-5d82</link>
      <guid>https://dev.to/andrewbaisden/creating-a-node-back-end-using-the-mvc-software-design-pattern-5d82</guid>
      <description>&lt;p&gt;In this tutorial you will learn how to create a Node back-end using the Model–view–controller (MVC) software design pattern. This design pattern gives you the ability to make user interfaces that are separated into three different elements. The business logic is separated so that the data, user interface and user input are not mixed together. This allows for a much cleaner architecture as the different layers are decoupled allowing for changes to be done more rapidly and easily.&lt;/p&gt;

&lt;p&gt;One important caveat to mention here however is that these days the &lt;strong&gt;View&lt;/strong&gt; part of this software design pattern is no longer as relevant as it used to be years ago. This is because we now have front-end frameworks like React, Vue, Angular and Svelte which are used for building the front-end of applications. Nonetheless these concepts are still useful to know because &lt;strong&gt;Models&lt;/strong&gt; and &lt;strong&gt;Controllers&lt;/strong&gt; are still used today when back-end developers build REST and GraphQL API's that return some sort of data. Data like JavaScript Object Notation (JSON) which is used in an API and is retrieved using the fetch or Axios API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Make sure that you have the tools and packages below installed&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Node and npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodemon.io/"&gt;Nodemon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ejs.co/"&gt;EJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-design-pattern"&gt;
  &lt;/a&gt;
  The Design Pattern
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#model"&gt;
  &lt;/a&gt;
  Model
&lt;/h3&gt;

&lt;p&gt;The Model is the main component of this design pattern. It is responsible for handling all of the data inside of the structure. This is where all of the data, business logic and principles will be defined.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h3&gt;

&lt;p&gt;Essentially the view is the user interface. This is the part of the application that a user is going to visually see. So basically the front-end which was designed. Before front-end frameworks like React, Vue, Angular and Svelte existed, back-end developers used templating languages like EJS, PUG and Handlebars.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controller"&gt;
  &lt;/a&gt;
  Controller
&lt;/h3&gt;

&lt;p&gt;The controller can be considered as the brains of the application. It takes in any inputs that the user requests and then turns them into commands which the model and view can interpret.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;Create a folder named &lt;strong&gt;my-app __on your desktop or in a directory and then __cd&lt;/strong&gt; into it. Also open the folder in your code editor.  Make sure that you are in the &lt;strong&gt;my-app&lt;/strong&gt; folder and then run the commands below in your terminal app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;backend
&lt;span class="nb"&gt;cd &lt;/span&gt;backend
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
npm i express nodemon ejs
&lt;span class="nb"&gt;mkdir &lt;/span&gt;controllers models public routes src  
&lt;span class="nb"&gt;mkdir &lt;/span&gt;src/pages
&lt;span class="nb"&gt;touch &lt;/span&gt;index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the basic setup for our project. Now let's create a simple express server. Copy and paste the code below into the &lt;code&gt;index.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home Route&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add these run scripts to the &lt;code&gt;package.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon index.js"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your terminal app run either one of the run codes below to see the app running in your web browser. The first run code uses Node which means that the server needs to be restarted if you want to see changes. The second run code uses Nodemon which does hot reloading which means that you only need to reload the web browser to see new changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-mvc-controllers"&gt;
  &lt;/a&gt;
  Creating the MVC Controllers
&lt;/h2&gt;

&lt;p&gt;It's time to create some controllers. Create two files called &lt;code&gt;admin.js&lt;/code&gt; and put one inside of the &lt;strong&gt;controllers&lt;/strong&gt; folder and the other one inside of the &lt;strong&gt;routes&lt;/strong&gt; folder. Next create an &lt;code&gt;AnimeData.json&lt;/code&gt; file and put it inside of the &lt;strong&gt;models&lt;/strong&gt; folder. Now create an &lt;code&gt;index.ejs&lt;/code&gt; file and put it inside of the &lt;strong&gt;src/pages&lt;/strong&gt; folder. Add the code below to the &lt;code&gt;index.ejs&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home Route&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home Route&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Put the code below into the &lt;code&gt;AnimeData.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Anime"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Boku no Hero Academia"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Anime"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Jujutsu Kaisen"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Anime"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Shingeki no Kyojin"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the code below to the &lt;code&gt;admin.js&lt;/code&gt; file inside of the &lt;strong&gt;controllers&lt;/strong&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AnimeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../models/AnimeData.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAnime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AnimeData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next add the code below to the &lt;code&gt;admin.js&lt;/code&gt; file inside of the &lt;strong&gt;routes&lt;/strong&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adminController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;adminController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/anime&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;adminController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAnime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally update the &lt;code&gt;index.js&lt;/code&gt; file in the root folder with the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adminRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// EJS template engine setup&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;view engine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/pages&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Setting up the directory on the server for CSS, JavaScript and media files&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;

&lt;span class="c1"&gt;// Configuring the server to work with form submissions and json files&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Connecting all of the routes&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;adminRoute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will need to reload the page or restart the server. Now if you go to the home route &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt; it should load the &lt;code&gt;index.ejs&lt;/code&gt; file. If you go to &lt;a href="http://localhost:5000/anime"&gt;http://localhost:5000/anime&lt;/a&gt; you should see the data in the json file returned in the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-the-css-and-javascript-files-to-the-frontend"&gt;
  &lt;/a&gt;
  Connecting the CSS and JavaScript files to the front-end
&lt;/h2&gt;

&lt;p&gt;The last step is to connect a CSS stylesheet and JavaScript file to the &lt;code&gt;index.ejs&lt;/code&gt; file. Create two folders inside of the &lt;strong&gt;public&lt;/strong&gt; folder. One called &lt;strong&gt;css&lt;/strong&gt; and the other one called &lt;strong&gt;js&lt;/strong&gt;. Now create a &lt;code&gt;styles.css&lt;/code&gt; file and put it inside of the &lt;strong&gt;css&lt;/strong&gt; folder with the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bada55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next create a &lt;code&gt;scripts.js&lt;/code&gt; file and put it inside of the &lt;strong&gt;js&lt;/strong&gt; folder with the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly update the &lt;code&gt;index.ejs&lt;/code&gt; file with the code below which now has the links for the CSS and JavaScript files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home Route&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:5000/static/css/styles.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Home Route&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:5000/static/js/scripts.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reload your browser or restart the server. If you go to the home route you should see a green background and if you go to the browser console you should see the code &lt;strong&gt;Hello World&lt;/strong&gt;. And those are the basics for creating a Node back-end server using the MVC software design pattern. If you were planning on connecting the back-end to a framework like React, you would not need the &lt;strong&gt;src&lt;/strong&gt; folder. Instead you would use the &lt;strong&gt;models&lt;/strong&gt; folder for returning the data as json. The &lt;strong&gt;models&lt;/strong&gt; folder is also the place where you would create the programming logic used for connecting the back-end to a database like mongodb, postgresql and HarperDB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. As a content creator and technical writer I am passionate about sharing my knowledge and helping other people reach their goals. Let's connect across social media you can find all of my social media profiles and blogs on &lt;a href="https://linktr.ee/andrewbaisden"&gt;linktree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Peace ✌️&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>node</category>
    </item>
  </channel>
</rss>
