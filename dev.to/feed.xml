<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Amazing CSS Tips &amp; Tricks - Part 2</title>
      <author>Tarandeep Singh</author>
      <pubDate>Thu, 29 Jul 2021 19:55:37 +0000</pubDate>
      <link>https://dev.to/tarandeep_singh/amazing-css-tips-tricks-part-2-37lg</link>
      <guid>https://dev.to/tarandeep_singh/amazing-css-tips-tricks-part-2-37lg</guid>
      <description>&lt;p&gt;After an amazing response on my first &lt;a href="https://dev.to/tarandeep_singh/amazing-css-tips-tricks-1jl0"&gt;"Amazing CSS Tips &amp;amp; Tricks"&lt;/a&gt; blog, here I am with Part-2. So gear up and get ready to take a dive into CSS!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clamp-it-down"&gt;
  &lt;/a&gt;
  Clamp it Down
&lt;/h3&gt;

&lt;p&gt;Making the websites responsive is a big headache for most developers as they have to write lengthy code with lots of media queries. But I have a life-saver for you guys. You can use functions like min, max, and clamp to refactor your code. The following code shows how you can set the width to a clamped value that has a minimum of 200 pixels, a max of 600, and a preferred value of 50%.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;article {
    width: clamp(200px, 50%, 600px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following comparison image shows how I turned 13 lines of code into just 1 using this trick:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CD821T5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rfbiq6uvviviwqp56bb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CD821T5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rfbiq6uvviviwqp56bb.png" alt="Comparison: clamp() vs media query"&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-link-pseudoclass"&gt;
  &lt;/a&gt;
  The link pseudo-class
&lt;/h3&gt;

&lt;p&gt;A lot of developers and designers often miss this simple yet effective CSS trick that solves usability issues with visitors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a:link { color: blue; }
a:visited { color: purple; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;link:&lt;/code&gt; pseudo-class controls all links that haven’t been clicked on yet &amp;amp; the &lt;code&gt;:visited&lt;/code&gt; pseudo-class handles the styling of all of the links user has already visited. This tells the visitors where they have already been on your site, and where they have yet to explore. &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drop-caps"&gt;
  &lt;/a&gt;
  Drop Caps
&lt;/h3&gt;

&lt;p&gt;Drop caps remind me of the traditional printed books &amp;amp; newspapers. I just love it as it is a great way to start a page with written content. That first, large letter really grabs your attention. We can use &lt;code&gt;:first-letter&lt;/code&gt; to create a drop cap in CSS. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p:first-letter {
  font-family: "Source Sans Pro", Arial, Helvetica, sans-serif;
  float: left;
  font-size: 6rem;
  line-height: 0.65;
  margin: 0.1em 0.1em 0.2em 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPtRhBc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5u3x73txtfkjnomiwty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPtRhBc6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y5u3x73txtfkjnomiwty.png" alt="drop-cap output image"&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hover-effects"&gt;
  &lt;/a&gt;
  Hover Effects
&lt;/h3&gt;

&lt;p&gt;This might be an easy one, yet very useful. If you want to highlight something whenever the user hovers the mouse over it then add &lt;code&gt;:hover&lt;/code&gt; to that button, text link, block section or icon. Here's how the CSS would look if you wanted to change the color of h2 tag whenever the user hovers over it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.entry h2{
    font-size:24px;
    color:#000;
    font-weight:700;
}

.entry h2:hover{
    color:#f00;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#transition-for-hover-effect"&gt;
  &lt;/a&gt;
  Transition for Hover Effect
&lt;/h3&gt;

&lt;p&gt;For hover effects, on menus or images in your website, you don’t want colors snapping too quickly as they might not look pleasing to the end-user. So ideally, we should ease the change gradually, which is where the transition property comes into play. The following code shows how in the same hover effect used above, we can make the change happen over .4 seconds, instead of just instantly snapping to red.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.entry h2:hover{
    color:#f00;
    transition: all 0.3s ease;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
That's all for this one! I want to thank all of you guys for such an overwhelming response on my first blog. I was amazed to see how it got 60+ bookmarks in just 24 hours of posting it! If you have not seen it, Check it out &lt;a href="https://dev.to/tarandeep_singh/amazing-css-tips-tricks-1jl0"&gt;here.&lt;/a&gt; &lt;br&gt;
Tell me in the comments which trick did you guys liked the most!&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/Tarandeep_s1ngh"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/tarandeep-s1ngh/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Images are hard. Is there a simpler way?</title>
      <author>Rob OLeary</author>
      <pubDate>Thu, 29 Jul 2021 19:39:11 +0000</pubDate>
      <link>https://dev.to/robole/images-are-hard-is-there-a-simpler-way-3cfa</link>
      <guid>https://dev.to/robole/images-are-hard-is-there-a-simpler-way-3cfa</guid>
      <description>&lt;p&gt;Using images on the web is deceptively complicated. To give simple, concise advice on the best way to use images on the web is tricky. We all would like to avoid creating bulky, slow webpages but it is a battle sometimes. Images are at the forefront of that battle, because they typically make up about 50% of a page's weight.&lt;/p&gt;

&lt;p&gt;The best coverage of images I read is a 10-part series by Jason Grigsby from 2015 called &lt;a href="https://cloudfour.com/thinks/responsive-images-101-definitions/"&gt;Responsive Images 101&lt;/a&gt;, which provided a thorough tutorial on responsive images, it is dated in some respects but stil worth a read. Also, Jason wrote an article in 2013 called &lt;a href="https://cloudfour.com/thinks/8-guidelines-and-1-rule-for-responsive-images/"&gt;8 Guidelines and 1 Rule for Responsive Images&lt;/a&gt; that provides some guidelines. I haven't seen a worthy up-to-date predecessor to either of these articles. Even MDN's &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"&gt;guide to responsive images&lt;/a&gt; defers to Jason's 2015 article on background images and media queries!&lt;/p&gt;

&lt;p&gt;Putting images on the web is not just about making them responsive, there are other design and implementation considerations. There are changes to responsive design too. Recently, some people are heralding the beginning of the '&lt;a href="https://una.im/2021/05/26/new-responsive/"&gt;new responsive era&lt;/a&gt;'. I wouldn't get too caught up in that, but maybe it is a time to reassess.&lt;/p&gt;

&lt;p&gt;The biggest issue for me right now is that things are convoluted, and we should be looking for a simpler way. There isn't a good set of guidelines for dealing with images in a holistic manner. We are reaching for tools to whisk the complication away instead.&lt;/p&gt;

&lt;p&gt;Today, I'd like to discuss some of these issues, and provide &lt;em&gt;some&lt;/em&gt; of that missing guidance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-doth-the-difficulty-lie"&gt;
  &lt;/a&gt;
  Where doth the difficulty lie?
&lt;/h2&gt;

&lt;p&gt;There are a lot of different considerations with images. You bump into a heap of questions when you're using images such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What's the difference between the image formats? Which should I use and when? What is the browser support like now?&lt;/li&gt;
&lt;li&gt;How do I load images in the most performant manner? Should I preload some images? Should I use lazy loading everywhere? Do I need to use JavaScript for lazy loading? What about that new &lt;code&gt;content-visibility&lt;/code&gt; property?&lt;/li&gt;
&lt;li&gt;What about optimization? What sizes do I use? How do I automate the process? Addy Osmani wrote &lt;a href="https://www.smashingmagazine.com/printed-books/image-optimization/"&gt;a whole book&lt;/a&gt; on image optimization recently.&lt;/li&gt;
&lt;li&gt;What should I do to make images accessible? Do I use an &lt;code&gt;alt&lt;/code&gt; attribute on all images?&lt;/li&gt;
&lt;li&gt;What do I do with background images? Can I make them responsive?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chris Coyier also discussed this topic in his recent article &lt;a href="https://css-tricks.com/images-are-hard/"&gt;Images are hard&lt;/a&gt; and said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Putting images on websites is incredibly simple, yes? Actually, yes, it is. You use &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and link it to a valid source in the &lt;code&gt;src&lt;/code&gt; attribute and you’re done. Except that there are (counts fingers) 927 things you could (and some you really should) do that often go overlooked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Chris goes on to list approximately 20 of these things. There are some bits that come to my mind also that Chris did not mention. I'm not going to make a complete list. It's too much.&lt;/p&gt;

&lt;p&gt;It makes me sad that things are like this. There have been improvements in some areas, better tooling is available to cover some of it, but some of it is impractical. I imagine it would feel overwhelming for someone who wants to build a website who is not a web developer but would like to; or a beginner who wants to do things the "right way". &lt;/p&gt;

&lt;p&gt;We should reassure people that it is OK to just use an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; with one appropriately sized image when you are starting out. Your website will work fine. You are breaking no laws. You can learn more and improve on this later. As I discuss later, many of us are pretty loose with how we use images anyway, so he who has not sinned should cast the first stone!&lt;/p&gt;

&lt;p&gt;In particular, I say this because it seems to me that that there is more pressure to make everything fast now. Web performance is being hyped up. People are talking more about Lighthouse scores. The marketing guys are linking improvements in performance to revenue gains. And there is the spectre of SEO-reaper lurking. 👻 SEO rankings are inexplicably being linked to performance now through Google's core web vital metrics.&lt;/p&gt;

&lt;p&gt;But, but...I just want to build a small, fan site for BTS! 😢 Maybe that's why some people prefer to build discord bots instead of websites now.&lt;/p&gt;

&lt;p&gt;For me, there isn't a cohesive and clear narrative on how to do things well. It's an accumulation of stuff that is not synthesized well. I think it's important to look at what people are actually doing, rather than what people are saying or suggesting to cut through the rhetoric.&lt;/p&gt;

&lt;p&gt;Rereading Jason's article on &lt;a href="https://cloudfour.com/thinks/8-guidelines-and-1-rule-for-responsive-images/"&gt;guidelines from 2013&lt;/a&gt;, he says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No one knows what the future of responsive images holds. A few years from now, we will probably look back on the hacks we’re using and laugh at our naivety.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do you think? 🤔&lt;/p&gt;

&lt;p&gt;I'm still waiting for holographic personal devices. Where's the 3D CSS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-are-images-really-used-on-the-web"&gt;
  &lt;/a&gt;
  How are images really used on the web
&lt;/h2&gt;

&lt;p&gt;Let's look at the &lt;a href="https://almanac.httparchive.org/en/2020/"&gt;Web Almanac&lt;/a&gt; to see what is really happening. The &lt;a href="https://almanac.httparchive.org/en/2020/"&gt;Web Almanac&lt;/a&gt; is an annual report which  "combines the raw stats and trends of the HTTP Archive with the expertise of the web community."  Let's look at last year's report with regard to images and performance.&lt;/p&gt;

&lt;p&gt;In 2020, the median page weighted approximately 2 MB for desktop and 1.9 MB for mobile, and a shocking 7.4 MB for desktop and 6.7 MB for mobile at the 90th percentile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syyY1mOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo43riyr1ub4lway2mqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syyY1mOS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo43riyr1ub4lway2mqe.png" alt="page weight distribution bar chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The median page weight contains approxmiately 1 MB of images and approxmiately 400 KB of JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ItWMLpJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqq3coi3ljy5ffaqqy12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ItWMLpJi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqq3coi3ljy5ffaqqy12.png" alt="show the weight content types on a bar chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why people point at images as the lowest hanging fruit for reducing page weight. Images are still the most requested type of resource, though JavaScript is closing in!&lt;/p&gt;

&lt;p&gt;The thing is it's not just the size of the resources. It's the amount of requested resources. This is the distribution of requests by content type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gN9TtY4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d8ko59lxym5shzaea02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gN9TtY4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d8ko59lxym5shzaea02.png" alt="show distribution of request types on a barchart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The numbers seem bonkers to me. It is common to have 29 images on 1 page! The number of requests on desktop for the media page is the same &lt;a href="https://almanac.httparchive.org/en/2019/page-weight#page-requests"&gt;as last year&lt;/a&gt; (74), yet the page weight has increased by 122 KB. Pages are getting bigger.&lt;/p&gt;

&lt;p&gt;In terms of &lt;a href="https://almanac.httparchive.org/en/2020/performance"&gt;performance&lt;/a&gt;, it is hard to summarise. This is the &lt;a href="https://almanac.httparchive.org/en/2020/performance#conclusion"&gt;most succinct summary directly from the report&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On the surface, we have seen optimistic signals about the new Core Web Vitals performance metrics. At least half of the experiences are good across both desktop and mobile devices, &lt;em&gt;if&lt;/em&gt; we don’t narrow down to consistently poor experiences on slower networks for Largest Contentful Paint. While the newer metrics might suggest that there’s an ongoing uptake in addressing performance issues, the lack of significant improvements in First Contentful Paint and Time to First Byte is sobering. Here the same network types are most disadvantaged as with Largest Contentful Paint, as well as fast connections and desktop devices. The Performance Score also portrays a decline in speed (or  perhaps, a more accurate portrayal than what we measured in the past).&lt;/p&gt;

&lt;p&gt;What the data shows us, is that we must keep investing in improving  performance for scenarios (such as slower connectivity) that we often  don’t experience due to multiple aspects of our privilege (middle to  high-income countries, high pay and new, capable devices). It also highlights that there’s still plenty of work to be done in the areas of speeding up initial paints (LCP and FCP) and asset delivery (TTFB).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's just say there is room for improvement! 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-would-you-recommend"&gt;
  &lt;/a&gt;
  What would you recommend?
&lt;/h2&gt;

&lt;p&gt;Do the basic things well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-ship-less-images"&gt;
  &lt;/a&gt;
  1) Ship less images!
&lt;/h3&gt;

&lt;p&gt;Don't serve 29 images for your average webpage. This article has 8 images. Show restraint, be selective.&lt;/p&gt;

&lt;p&gt;This made me think of this quote from Dickens:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Subdue your appetites, my dears, and you've conquered human nature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-inline-svg-icons"&gt;
  &lt;/a&gt;
  2) Inline SVG icons
&lt;/h3&gt;

&lt;p&gt;Pasting SVG icons into your HTML will reduce the amount of requests. In the age of static site generators and web components, it is easier to do this in one place and avoid duplication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-use-a-ruleofthumb-to-set-the-maximum-image-resolution-for-your-images"&gt;
  &lt;/a&gt;
  3) Use a rule-of-thumb to set the maximum image resolution for your images
&lt;/h3&gt;

&lt;p&gt;You can pick the maximum image size for your page based on its content. For example, if you have a blog and the maximum width of your blog post is 700px, then serve images with a maximum width of 1400px. This will cover high-resolution screens with 2x pixel density. Jake Archibald mentions this as the "lazy way" in his article &lt;a href="https://jakearchibald.com/2021/serving-sharp-images-to-high-density-screens/#the-lazy-way"&gt;Halve the size of images by optimizing for high density displays&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrV_MTym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b03fo2dxjo3cy3n62vkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrV_MTym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b03fo2dxjo3cy3n62vkr.png" alt="show example of blog post with width on desktop and highlight max width of image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-provide-alternative-text"&gt;
  &lt;/a&gt;
  4) Provide alternative text
&lt;/h3&gt;

&lt;p&gt;For the sake of accessibility, give a text alternative for an image in the &lt;code&gt;alt&lt;/code&gt; attribute. You should add alt text to most images, unless it is considered decorative. Eric Bailey discusses when you can skip altnerative text in the article - &lt;a href="https://www.smashingmagazine.com/2021/06/img-alt-attribute-alternate-description-decorative/"&gt;Your Image Is Probably Not Decorative&lt;/a&gt;. Spoiler altert: it's not that often.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-stick-to-using-one-image-format-with-raw-img-endraw-if-you-are-inexperienced"&gt;
  &lt;/a&gt;
  5) Stick to using one image format with &lt;code&gt;img&lt;/code&gt; if you are inexperienced
&lt;/h3&gt;

&lt;p&gt;For a beginner, I would suggest sticking with a single image format with &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;. You don't need to learn a static site generator or JavaScript to get started making websites (but it will make it easier in the longer-run). Use JPEG for photos, and use either a PNG or SVG (preferably) for more graphical images such as icons and diagrams. Maybe next year, you can start using WEBP instead of JPEG and PNG. At the moment, &lt;a href="https://caniuse.com/?search=webp"&gt;WEBP is only partially supported in Safari&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If I follow this recommendation for this page, I use 8 images in the article totaling 169.5 KB. I did run 2 images through &lt;a href="https://squoosh.app/"&gt;squoosh&lt;/a&gt; to reduce their size. That's already quite good.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-set-dimensions-for-images-to-reduce-layout-shifts"&gt;
  &lt;/a&gt;
  6) Set dimensions for images to reduce layout shifts
&lt;/h3&gt;

&lt;p&gt;Define the dimensions of images through the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes, or the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio"&gt;&lt;code&gt;aspect-ratio&lt;/code&gt;&lt;/a&gt; property. This will prevent parts of your page moving around when an image loads. This is called &lt;a href="https://web.dev/cls/"&gt;cumulative layout shift (CLS)&lt;/a&gt; and is one of Google's &lt;a href="https://web.dev/vitals/#core-web-vitals"&gt;core web vitals metrics&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I prefer to use &lt;code&gt;aspect-ratio&lt;/code&gt;, but it has only just made it to Safari. So, now it is &lt;a href="https://caniuse.com/mdn-css_properties_aspect-ratio"&gt;in all major browsers&lt;/a&gt;, but keep this in mind if browser support is an issue for you. &lt;/p&gt;

&lt;p&gt;If you want to learn more about the ins-and-outs of this, you can read the article - &lt;a href="https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/"&gt;Setting Height And Width On Images Is Important Again&lt;/a&gt;. It's a 17 min read, yowzer! 🤓&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-lazy-load-images-below-the-fold"&gt;
  &lt;/a&gt;
  7) Lazy load images below the fold
&lt;/h3&gt;

&lt;p&gt;For any images below the fold, by below the fold I mean any image that would not be seen when the page is loaded, you can lazy load these images. This will defer loading of images that are off-screen until the user scrolls near them . You can do this by adding this attribute &lt;code&gt;loading="lazy"&lt;/code&gt; to &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;This attribute is &lt;a href="https://caniuse.com/?search=lazy"&gt;supported in 74.71% of browsers now&lt;/a&gt;, but looking at the most recent data (Jan - Jun 2021) on the HTTP Archive, &lt;a href="https://httparchive.org/reports/state-of-images?start=2020_01_01&amp;amp;end=2021_06_01#imgLazy"&gt;it is used by just 17% of websites&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If I add lazy-loading to this page, only the the main image needs to be loaded, that's just 2.1 KB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-learn-the-basics-of-svg-and-use-svg-for-graphical-images-as-often-as-you-can"&gt;
  &lt;/a&gt;
  8) Learn the basics of SVG and use SVG for graphical images as often as you can
&lt;/h3&gt;

&lt;p&gt;I would recommend that you learn the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG"&gt;basics of SVG&lt;/a&gt;. Using SVG instead of PNG is an easy win. Since SVG is a text-based &lt;a href="https://en.wikipedia.org/wiki/Vector_graphics"&gt;vector format&lt;/a&gt;, files can be very small. For example, the main image for this article is a SVG and is 2.1 KB. SVGs can scale up and down without any loss of quality. Effectively, you can have 1 image that looks good on any screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cmarz6h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngbx8x2ajy061stimxbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cmarz6h4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngbx8x2ajy061stimxbg.png" alt="demonstrating visaul difference between raster and vector images scaled up"&gt;&lt;/a&gt;&lt;/p&gt;
By Yug et al. from Wikimedia Commons &lt;a href="https://creativecommons.org/licenses/by-sa/2.5" title="Creative Commons Attribution-Share Alike 2.5"&gt;CC BY-SA 2.5&lt;/a&gt;



&lt;h3&gt;
  &lt;a href="#9-optimize-your-images"&gt;
  &lt;/a&gt;
  9) Optimize your images
&lt;/h3&gt;

&lt;p&gt;You can use a web app like &lt;a href="https://tinypng.com/"&gt;tinypng&lt;/a&gt; or  &lt;a href="https://squoosh.app/"&gt;squoosh&lt;/a&gt; to resize and reduce the file size of your images. You can use &lt;a href="https://jakearchibald.github.io/svgomg/"&gt;SVGOMG&lt;/a&gt; for SVGs.&lt;/p&gt;

&lt;p&gt;As I mentioned, I would only to need to optimize 2 PNGs for this post. The rest were not that big or wide. In any case, I can drop them all into tinypng and get an optimized set in a zip. If you don't use a lot of images, then this is a quick process!&lt;/p&gt;

&lt;p&gt;We will discuss automation of this in the next section.&lt;/p&gt;




&lt;p&gt;If you do this much, you will be ahead of the median website. Test your website in your favourite auditing tool (such as &lt;a href="https://webpagetest.org/"&gt;Webpagetest&lt;/a&gt; or &lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;Lighthouse&lt;/a&gt;) to see where you're at. &lt;/p&gt;

&lt;p&gt;I followed the steps above for this post and got 99/100 for performance in &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;PageSpeed Insights&lt;/a&gt;, check it out for yourself: &lt;a href="https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fwww.roboleary.net%2F2021%2F07%2F29%2Fsimpler-images.html"&gt;https://developers.google.com/speed/pagespeed/insights/?url=https%3A%2F%2Fwww.roboleary.net%2F2021%2F07%2F29%2Fsimpler-images.html&lt;/a&gt;. When loaded for the first time, the initial page weight is 80.2 KB, it is 5.5 KB when requested a second time (with caching). This score reflects other implementation decisions I made, but you can see that images ain't an issue.&lt;/p&gt;

&lt;p&gt;Look at what browsers you need to support to see if you need to polyfill the &lt;code&gt;loading&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Beyond this, you are getting into more technical territory, but through automation you can take some of the work off your plate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-extra-yards-and-automation"&gt;
  &lt;/a&gt;
  The extra yards and automation
&lt;/h2&gt;

&lt;p&gt;The next biggest win is to use different versions of images for different screen sizes (&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#resolution_switching_different_sizes"&gt;resolution switching&lt;/a&gt;), and &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#use_modern_image_formats_boldly"&gt;next-gen formats for browsers that support them&lt;/a&gt;. You can choose to do-it-yourself or &lt;a href="https://theguidex.com/best-image-cdn-providers/"&gt;use an Image CDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a small website, a manual process is manageable. Just find a GUI app or command-line tool, whatever you are comfortable with, one that will give do bulk resizing and optimization of your images for you. You just want to point to a folder and have it spit out all of the alternative versions for you. You can add the markup to your page yourself, albeit this can become a bit tedious. You can automate the insertion of this markup with some tools.&lt;/p&gt;

&lt;p&gt;If you use a static-site generator or a backend platform like Wordpress, there are integrated options to do this for you such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is &lt;a href="https://www.11ty.dev/docs/plugins/image/"&gt;Eleventy Image&lt;/a&gt;, which is made for &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;, but can be used outside of Eleventy also.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nuxtjs.org/"&gt;Nuxt&lt;/a&gt; (related to Vue) has &lt;a href="https://image.nuxtjs.org/components/nuxt-img/"&gt;nuxt/image&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; (related to React) has  &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-image"&gt;gatsby-plugin-image&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://wordpress.com/"&gt;Wordpress&lt;/a&gt; has plugins such as &lt;a href="https://jetpack.com/"&gt;Jetpack&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use these plugins, some JavaScript may be required. You could muddle through with Eleventy Image without knowing that much JavaScript. It only makes sense to venture into Nuxt if you already know Vue, and Gatsby if you already know React. It's just to demonstrate that this is something that platform/frameworks are treating as an important concern now, which is good.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-background-images"&gt;
  &lt;/a&gt;
  What about background images?
&lt;/h3&gt;

&lt;p&gt;Background images are specified in CSS with &lt;code&gt;background-image&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For now, it's probably best to stick with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;media queries&lt;/a&gt; if you want to swap out background images for different screen resolutions.&lt;/p&gt;

&lt;p&gt;There is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/image/image-set()"&gt;&lt;code&gt;image-set()&lt;/code&gt;&lt;/a&gt; which can take multiple resolutions of an image and let the browser make the best decision about which one to use. It is not quite ready for prime-time yet, there are caveats. If you want to explore this further, you can read this article - &lt;a href="https://css-tricks.com/using-performant-next-gen-images-in-css-with-image-set/"&gt;Using Performant Next-Gen Images in CSS with image-set&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;I would think you're in an excellent state if you have done this much. Of course, there are other optimizations you can do. You have to draw a line somewhere. Test your website out and see if more is necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-the-new-responsive-era"&gt;
  &lt;/a&gt;
  What about the new responsive era?
&lt;/h2&gt;

&lt;p&gt;I don't know. I prefer to focus on today!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was meant to be a quick article! Anyway, I hope I shed some light on a few bits and bobs with regard to images on the web. Images shouldn't be hard. We shouldn't feel like we are spinning plates when we are building websites! Happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-attribution"&gt;
  &lt;/a&gt;
  Image Attribution
&lt;/h2&gt;

&lt;p&gt;The featured distribution graphs are courtesy of the &lt;a href="https://github.com/HTTPArchive/almanac.httparchive.org"&gt;HTTPArchive&lt;/a&gt; with rights reserved under a  &lt;a href="https://github.com/HTTPArchive/almanac.httparchive.org/blob/main/LICENSE"&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Haskell - The Most Gentle Introduction Ever</title>
      <author>Mateusz Podlasin</author>
      <pubDate>Thu, 29 Jul 2021 19:13:49 +0000</pubDate>
      <link>https://dev.to/mpodlasin/haskell-the-most-gentle-introduction-ever-32ho</link>
      <guid>https://dev.to/mpodlasin/haskell-the-most-gentle-introduction-ever-32ho</guid>
      <description>&lt;h3&gt;
  &lt;a href="#who-is-this-article-for"&gt;
  &lt;/a&gt;
  Who Is This Article For?
&lt;/h3&gt;

&lt;p&gt;This article is the first in (hopefully) a series on functional programming in Haskell.&lt;/p&gt;

&lt;p&gt;It doesn't assume any previous knowledge of Haskell or even functional programming for that matter.&lt;/p&gt;

&lt;p&gt;It does however assume that you can already program in &lt;strong&gt;some&lt;/strong&gt; programming language.&lt;/p&gt;

&lt;p&gt;If you feel fairly comfortable in a language like JavaScript, Python, Java, C/C++, or anything similar, you are more than capable of going through this tutorial. You can rest assured that everything will be explained slowly and carefully.&lt;/p&gt;

&lt;p&gt;The main point of this series will be to highlight the differences between Haskell and those "typical" languages that I've mentioned. So the less you know about Haskell and/or functional programming, the more illuminating and mindbending those articles will be for you.&lt;/p&gt;

&lt;p&gt;I will also be showing you how learning Haskell can benefit you in writing better code even when using other, more mainstream languages. If you feel stuck when it comes to your programming skills and if you feel like you haven't been stretching your coding muscles lately - Haskell will be perfect for you! &lt;/p&gt;

&lt;p&gt;Whether you are a senior coding veteran or a junior dev that barely started your career, Haskell will push you to be an all-around better programmer. If you need more convincing, in the past I've written about &lt;a href="https://dev.to/mpodlasin/5-practical-reasons-why-your-next-programming-language-to-learn-should-be-haskell-gc"&gt;why it is beneficial to learn Haskell&lt;/a&gt;, even if you don't plan to code in it professionally.&lt;/p&gt;

&lt;p&gt;Are you ready? Let's go then!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-haskellers-toolbelt"&gt;
  &lt;/a&gt;
  Installing Haskellers Toolbelt
&lt;/h3&gt;

&lt;p&gt;If you are on this journey with me, we'll begin by installing some software needed to run Haskell.&lt;/p&gt;

&lt;p&gt;But if you are still unsure/unconvinced, you don't have to do even that. I will be keeping all the examples as simple as possible, so it will be enough to just use a REPL like &lt;a href="https://replit.com/languages/haskell"&gt;this one&lt;/a&gt;. The only thing you need to do there is to empty the file in the REPL - we will start from scratch - and run &lt;code&gt;ghci&lt;/code&gt; command in the terminal. You are ready now, so if you don't want to install Haskell tools on your computer, you can safely omit the rest of this section.&lt;/p&gt;

&lt;p&gt;Still here? All in on learning Haskell? Awesome!&lt;/p&gt;

&lt;p&gt;The download section on &lt;a href="https://haskell.org"&gt;haskell.org&lt;/a&gt; can be a bit confusing, so I would recommend you to go straight to &lt;a href="https://www.haskell.org/ghcup/"&gt;ghcup&lt;/a&gt; page. You just have to copy the script from the website, paste it to your terminal and run it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ghcup&lt;/code&gt; is a "Haskell toolchain installer". This means that it allows you to easily install and manage various tools related to Haskell.&lt;/p&gt;

&lt;p&gt;The installation process guides you by hand - you will just have to answer a few questions. &lt;/p&gt;

&lt;p&gt;The installer will ask you about installing secondary packages - &lt;code&gt;stack&lt;/code&gt; and &lt;code&gt;hls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hls&lt;/code&gt; is "Haskell Language Server". It allows IDE plugins and extensions to work seamlessly with Haskell. So it's worth having it since the very beginning.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; is a build tool that allows you to create isolated Haskell projects easily. This would be massive overkill for simple, one-file scripts that we will be writing at the beginning. However, once we move on to writing more complex programs, Stack will be extremely helpful. Whether you prefer to install it now or later - it's up to you.&lt;/p&gt;

&lt;p&gt;After running the script, you can test if everything went well by running the &lt;code&gt;ghci&lt;/code&gt; command in your terminal.&lt;/p&gt;

&lt;p&gt;We've mentioned quite a few tools so far, but &lt;code&gt;ghci&lt;/code&gt; is the one that we will &lt;em&gt;actually&lt;/em&gt; use in this article. It is an interactive environment for running Haskell code. &lt;code&gt;ghc&lt;/code&gt; (no "i" at the end!) stands for Glasgow Haskell Compiler. &lt;code&gt;ghc&lt;/code&gt; is in fact its own command, that will allow us to compile code into binary executables.&lt;/p&gt;

&lt;p&gt;However, if we just want to play around with code and test some stuff, an &lt;em&gt;interactive&lt;/em&gt; &lt;code&gt;ghc&lt;/code&gt; - called &lt;code&gt;ghci&lt;/code&gt; - is perfect for that, because it allows us to run Haskell code without the compilation step. On top of that, it has some handy commands which we will use today.&lt;/p&gt;

&lt;p&gt;If you type in &lt;code&gt;ghci&lt;/code&gt; in the terminal and get an error, it likely means that your terminal doesn't know how to find the &lt;code&gt;ghci&lt;/code&gt; binary. You might have to close and reopen the terminal window after finishing the installation.&lt;/p&gt;

&lt;p&gt;If it's still not working, then - depending on the environment you are using - you will have to edit your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Luckily &lt;code&gt;ghcup&lt;/code&gt; is very tidy - it just installs everything in a single directory, in my case &lt;code&gt;/Users/mateusz.podlasin/.ghcup&lt;/code&gt;. In that directory, there is a &lt;code&gt;bin&lt;/code&gt; folder. You need to point the terminal you are using to that folder.&lt;/p&gt;

&lt;p&gt;So, in my case, I had to add the following line to my &lt;code&gt;.zshrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export PATH="/Users/mateusz.podlasin/.ghcup/bin:$PATH"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After closing the terminal and opening it again, running &lt;code&gt;ghci&lt;/code&gt; should now result in the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GHCi, version 8.10.5: https://www.haskell.org/ghc/ :? for help
Prelude&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see this, you are ready to begin our Haskell adventure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#playing-with-booleans"&gt;
  &lt;/a&gt;
  Playing With Booleans
&lt;/h3&gt;

&lt;p&gt;A boolean (in Haskell named &lt;code&gt;Bool&lt;/code&gt;) is one of the simplest and most familiar types that a programmer encounters regularly. No matter what programming language you've used previously, you likely know booleans very well.&lt;/p&gt;

&lt;p&gt;That's why they will be perfect for learning the basics of Haskell.&lt;/p&gt;

&lt;p&gt;In Haskell boolean values are written starting with a big letter, so we have &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ghci&lt;/code&gt; you can type in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:t True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;:t&lt;/code&gt; is a &lt;code&gt;ghci&lt;/code&gt; command for checking the type of a value. Note that this command is not a part of Haskell itself, just a &lt;code&gt;ghci&lt;/code&gt; functionality.&lt;/p&gt;

&lt;p&gt;After clicking enter, as a result, you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True :: Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read &lt;code&gt;::&lt;/code&gt; as "has type". So this line says that the value True has type Bool.&lt;/p&gt;

&lt;p&gt;Just to make sure we understand that correctly, let's check the type of value False:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:t False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False :: Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you probably anticipated, the value False has type Bool as well. So True and False are of the same type. And in Haskell - quite reasonably - True and False are the &lt;em&gt;only&lt;/em&gt; values of the type Bool.&lt;/p&gt;

&lt;p&gt;Contrary to &lt;code&gt;:t&lt;/code&gt;, the &lt;code&gt;&amp;lt;value&amp;gt; :: &amp;lt;type&amp;gt;&lt;/code&gt; syntax &lt;em&gt;is&lt;/em&gt; a part of Haskell language. And this should already hint at something to you. If a language has a dedicated syntax to express the sentence "&amp;lt;value&amp;gt; has type &amp;lt;type&amp;gt;", it means that this language probably treats types fairly seriously. &lt;/p&gt;

&lt;p&gt;As we will soon see, types are at the very heart of programming in Haskell. As a matter of fact, sometimes when coding in Haskell you will be thinking about types &lt;em&gt;more&lt;/em&gt; than about actual values!&lt;/p&gt;

&lt;p&gt;And while we are here, note that the name of the type - &lt;code&gt;Bool&lt;/code&gt; - is also written starting with a big letter in Haskell, just like the names of values. This will be important later.&lt;/p&gt;

&lt;p&gt;Let's now start writing some actual code. We will still use &lt;code&gt;ghci&lt;/code&gt; to run it, but we need to write it in an actual file.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;lesson_1.hs&lt;/code&gt; (in REPL I linked, the file is already created for you and is called &lt;code&gt;main.hs&lt;/code&gt;). Note the &lt;code&gt;.hs&lt;/code&gt; suffix, which represents Haskell source code files.&lt;/p&gt;

&lt;p&gt;You can create that file anywhere you want. You can also edit it with any text editor you desire. &lt;/p&gt;

&lt;p&gt;I would recommend using &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;. After installing VS Code, immediately go to the "Extensions" tab (on the left) and install the "Haskell" extension. It will give you many handy features. It will for example start displaying the types of values you hover over. If you have trouble with the extension "not detecting &lt;code&gt;ghc&lt;/code&gt;", remember to edit the PATH in the &lt;code&gt;.bashrc&lt;/code&gt;/&lt;code&gt;.zshrc&lt;/code&gt; file, just like I described in the setup section. After that restart the editor.&lt;/p&gt;

&lt;p&gt;After you've created the file, make sure to be - using the terminal - in the same directory where the file is located. To do that, you can leave &lt;code&gt;ghci&lt;/code&gt; by running &lt;code&gt;:q&lt;/code&gt;. Then switch directories to a proper one and run the &lt;code&gt;ghci&lt;/code&gt; command once again. &lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ghci&lt;/code&gt; try loading the file, by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:l lesson_1.hs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though your file doesn't have any code in it just yet, you should see a success message like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1 of 1] Compiling Main ( lesson_1.hs, interpreted )
Ok, one module loaded.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't see that, you've likely run &lt;code&gt;ghci&lt;/code&gt; in a different directory than your file is located.&lt;/p&gt;

&lt;p&gt;But if you see the message, you are ready to begin coding!&lt;/p&gt;

&lt;p&gt;So we have types (&lt;code&gt;Bool&lt;/code&gt;) and values (&lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;). What can we do with them? The most basic thing, known from other languages, would be to assign a value to a variable.&lt;/p&gt;

&lt;p&gt;Write the following line in &lt;code&gt;lesson_1.hs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now load it again in &lt;code&gt;ghci&lt;/code&gt; with the same command as before - &lt;code&gt;:l lesson_1.hs&lt;/code&gt; (remember to save the file beforehand).&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ghci&lt;/code&gt; you can now type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a response you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This shows that, indeed, we assigned the value True to the variable x.&lt;/p&gt;

&lt;p&gt;Now let's do something that might surprise you and that will show you just like radically different Haskell is from "regular" languages.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;lesson_1.hs&lt;/code&gt; file let's write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Load it again in &lt;code&gt;ghci&lt;/code&gt;. You will see the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1 of 1] Compiling Main ( lesson_1.hs, interpreted )

test.hs:2:1: error:
 Multiple declarations of ‘x’
 Declared at: lesson_1.hs:1:1
 lesson_2.hs:2:1
 |
2 | x = False
 | ^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important part of that error message says that there are &lt;em&gt;Multiple declarations of ‘x’&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It turns out that in Haskell, once you've assigned a value to a variable, you can't overwrite it or change it in any way. Ever.&lt;/p&gt;

&lt;p&gt;If it's a Bool, you can't change it from True to False. If it's a number (which we will cover in future articles), you can't change its value. For example, you can't even increase the value of a numeric variable by one!&lt;/p&gt;

&lt;p&gt;This sounds incredibly radical to someone used to traditional, imperative programming. Idioms like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;i++;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;someBoolean = !someBoolean;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;etc. are so prevalent in those languages that thought of only assigning a value to a variable once sounds... well... frankly just crazy!&lt;/p&gt;

&lt;p&gt;Is it even possible to write actual, real-world programs with a language like this? &lt;/p&gt;

&lt;p&gt;The answer is absolutely, and we will see that quite soon. But for now, you just have to accept that - once assigned a value - you can't ever change that variable anymore.&lt;/p&gt;

&lt;p&gt;You've likely heard about immutability at this point. I already wrote about &lt;a href="https://dev.to/mpodlasin/functional-programming-in-js-part-ii-immutability-vanilla-js-immutable-js-and-immer-2ccm"&gt;immutability in JavaScript&lt;/a&gt; for example.&lt;/p&gt;

&lt;p&gt;That's the thing though. In those other, imperative languages immutability has to be introduced via some library or specific programming approach. &lt;/p&gt;

&lt;p&gt;It's exactly the reverse in Haskell. Here immutability is the default and you have to use libraries or certain methods to achieve mutable variables/state.&lt;/p&gt;

&lt;p&gt;That might sound cumbersome, but it's not an accident that the principle of immutability became so popular even in the mainstream, "mutable by default" languages. It really makes your code less buggy, safer, and more predictable.&lt;/p&gt;

&lt;p&gt;Ok, enough of talky talk. So we know that once created, we can't alter that variable. But it is by no means useless. We can now call some functions using it.&lt;/p&gt;

&lt;p&gt;Remove the &lt;code&gt;x = False&lt;/code&gt; line from your file, so that loading the file in &lt;code&gt;ghci&lt;/code&gt; works again and &lt;code&gt;x&lt;/code&gt; has the value True.&lt;/p&gt;

&lt;p&gt;Then run the following in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an answer you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you've coded in Python or a language with similar syntax, you might think that &lt;code&gt;not&lt;/code&gt; is some special, reserved keyword for negating booleans.&lt;/p&gt;

&lt;p&gt;No. In Haskell, &lt;code&gt;not&lt;/code&gt; is just a regular function.&lt;/p&gt;

&lt;p&gt;In a typical language, a function call would look something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;not(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this is not the case in Haskell. In Haskell, you write the function name, and then - instead of parenthesis - you provide arguments by separating them with a single space.&lt;/p&gt;

&lt;p&gt;So to call a function &lt;code&gt;f&lt;/code&gt; on a variable &lt;code&gt;x&lt;/code&gt; you would write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;f&lt;/code&gt; accepted two parameters, instead of typical &lt;code&gt;f(x, y)&lt;/code&gt; you would write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;f&lt;/code&gt; accepted three parameters, you would write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And so on. You get the idea.&lt;/p&gt;

&lt;p&gt;Let's go back to our &lt;code&gt;not&lt;/code&gt; function. We called it on a variable, but nothing is preventing us from calling it on values directly.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ghci&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;results in the response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, just as values, functions have types as well. We can investigate the type of &lt;code&gt;not&lt;/code&gt; function in the same way we investigated the types of True and False - using the &lt;code&gt;:t&lt;/code&gt; command in &lt;code&gt;ghci&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:t not
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you will see the following answer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;not :: Bool -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We again see the &lt;code&gt;::&lt;/code&gt; symbol, which means "has type". We see the Bool type mentioned twice. &lt;/p&gt;

&lt;p&gt;The only new symbol here is &lt;code&gt;-&amp;gt;&lt;/code&gt;. As you probably expect, &lt;code&gt;&amp;lt;something&amp;gt; -&amp;gt; &amp;lt;something else&amp;gt;&lt;/code&gt; reads as "function from &amp;lt;something&amp;gt; to &amp;lt;something else&amp;gt;".&lt;/p&gt;

&lt;p&gt;So the output that we got from &lt;code&gt;ghci&lt;/code&gt; can be read as "&lt;code&gt;not&lt;/code&gt; has the type of function from Bool to Bool". Or, more naturally, "&lt;code&gt;not&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; a function from Bool to Bool".&lt;/p&gt;

&lt;p&gt;This shouldn't be surprising. When we call &lt;code&gt;not&lt;/code&gt; on a Bool value, we expect to see the Bool value as a result - the "opposite" of what we've passed. If we called &lt;code&gt;not True&lt;/code&gt; and got &lt;code&gt;15&lt;/code&gt; as an answer, we would be extremely confused, wouldn't we?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-functions"&gt;
  &lt;/a&gt;
  Writing Functions
&lt;/h3&gt;

&lt;p&gt;At this point, I would like to prove to you that there is nothing magical about &lt;code&gt;not&lt;/code&gt;. If it's just a regular function, you should be able to write it by yourself, right?&lt;/p&gt;

&lt;p&gt;Yup, and that's exactly what we will do right now. We will write our first Haskell function!&lt;/p&gt;

&lt;p&gt;We will do that in our &lt;code&gt;lesson_1.hs&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Under the &lt;code&gt;x&lt;/code&gt; definition, write the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down what is happening here a little bit. &lt;/p&gt;

&lt;p&gt;First, we have something that looks exactly like a call of a function - beginning with the name (&lt;code&gt;myNot&lt;/code&gt;), and later the parameters of the function, separated by spaces. In this particular case, we have only one parameter, which we named &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we have an assignment (&lt;code&gt;=&lt;/code&gt; character), after which we write the actual function - the part which we call "function body". In this case, the function body is just a simple &lt;code&gt;if then else&lt;/code&gt; expression. Let's break it down.&lt;/p&gt;

&lt;p&gt;Right after the &lt;code&gt;if&lt;/code&gt; keyword we have to provide a condition. Our condition is really &lt;code&gt;x == True&lt;/code&gt;. You probably recognize &lt;code&gt;==&lt;/code&gt; from other languages. In Haskell it means the same thing - it's an equality operator. &lt;/p&gt;

&lt;p&gt;But &lt;code&gt;x == True&lt;/code&gt; is equivalent to simply writing &lt;code&gt;x&lt;/code&gt;. After all, if &lt;code&gt;x == True&lt;/code&gt; evaluates to True, this means that &lt;code&gt;x&lt;/code&gt; itself has the value of True. So we can just write &lt;code&gt;x&lt;/code&gt; as our condition, for brevity.&lt;/p&gt;

&lt;p&gt;If the condition in &lt;code&gt;if then else&lt;/code&gt; (our &lt;code&gt;x&lt;/code&gt;) evaluates to &lt;code&gt;True&lt;/code&gt;, the function will return the value after the &lt;code&gt;then&lt;/code&gt; keyword. If it evaluates to &lt;code&gt;False&lt;/code&gt;, the function will return the value after the &lt;code&gt;else&lt;/code&gt; keyword. Quite simple.&lt;/p&gt;

&lt;p&gt;Note that in Haskell &lt;code&gt;if then else&lt;/code&gt; is an &lt;em&gt;expression&lt;/em&gt;. This means that in the end, it evaluates to a value - one of the two provided after "then" and "else" keywords. In JavaScript for example this means that it has more common with a ternary operator, rather than regular &lt;code&gt;if/else&lt;/code&gt; &lt;em&gt;statement&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The following code in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;firstValue&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;secondValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;would be therefore equivalent to the following in Haskell:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;someVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="n"&gt;firstValue&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="n"&gt;secondValue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's return to the definition of our function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will admit that I've used &lt;code&gt;x&lt;/code&gt; as a parameter name here just to confuse you a little bit. For a second you might think that there is a naming conflict between &lt;code&gt;x&lt;/code&gt; that we defined earlier and the &lt;code&gt;x&lt;/code&gt; from the function.&lt;/p&gt;

&lt;p&gt;You can however convince yourself that that's not true, by loading the file again in &lt;code&gt;ghci&lt;/code&gt;. It loads properly, without any errors. On top of that, our newly defined function &lt;code&gt;myNot&lt;/code&gt; actually works.&lt;/p&gt;

&lt;p&gt;Calling in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;returns&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and vice versa.&lt;/p&gt;

&lt;p&gt;We can even use the function on our &lt;code&gt;x&lt;/code&gt; variable defined above it.&lt;/p&gt;

&lt;p&gt;Running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myNot x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;results in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is correct because in the file we assigned &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So there is no naming conflict, but &lt;em&gt;it is&lt;/em&gt; true that we are "shadowing" the &lt;code&gt;x&lt;/code&gt; variable. If we now wanted to use it in the function body, we couldn't, because we decided to give the same name to the function parameter.&lt;/p&gt;

&lt;p&gt;So, just for clarity, let's change the name of the function parameter to &lt;code&gt;b&lt;/code&gt; (as in "boolean").&lt;/p&gt;

&lt;p&gt;The whole file looks now like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will help us not get confused.&lt;/p&gt;

&lt;p&gt;Perhaps the function definition that we came up with is not at all what you expected. We moaned for so long about the importance of types, but now we've written something that borderline looks like untyped Python. What's going on? Where are those scary types?&lt;/p&gt;

&lt;p&gt;It turns out that Haskell's type system is so powerful, that most of the time it can &lt;em&gt;infer&lt;/em&gt; what should be the type of a function - or a value - you've written. Save the file, load it in &lt;code&gt;ghci&lt;/code&gt; and write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t: myNot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myNot :: Bool -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So indeed your custom &lt;code&gt;myNot&lt;/code&gt; function has the same type as the original &lt;code&gt;not&lt;/code&gt;. But how Haskell came to that conclusion?&lt;/p&gt;

&lt;p&gt;It's quite straightforward.&lt;/p&gt;

&lt;p&gt;Since you wrote &lt;code&gt;if x then ...&lt;/code&gt;, using &lt;code&gt;x&lt;/code&gt; as a condition, Haskell knew that parameter &lt;code&gt;x&lt;/code&gt; had to be a Bool. That's because Haskell is (again!) quite strict here and only the value of type Bool can be used as a condition in the &lt;code&gt;if then else&lt;/code&gt; construct. (Note that we've written &lt;em&gt;"as a condition"&lt;/em&gt; here! It's completely fine to provide values of other types after &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; keywords - we will see that in future articles.)&lt;/p&gt;

&lt;p&gt;And at the same time, you wrote &lt;code&gt;then False else True&lt;/code&gt;. Here, in both cases ("then" case and "else" case) you are returning a Bool. Therefore the output of your function has type Bool as well.&lt;/p&gt;

&lt;p&gt;Those two facts combined bring us to a conclusion that the type of &lt;code&gt;myNot&lt;/code&gt; has to be &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Haskell inference is extremely good and the compiler may only have problems if you write something that is inherently vague.&lt;/p&gt;

&lt;p&gt;And yet it is still recommended to put the type signature of the function in the code. You will see that in the vast majority of Haskell codebases the types are always written explicitly.&lt;/p&gt;

&lt;p&gt;You can do it by writing the type of the function above its definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Writing down the type in the code has some major advantages.&lt;/p&gt;

&lt;p&gt;First of all, it increases the readability of the code. Types are incredibly useful as documentation of what your function does. In Haskell, you will often be able to find out what a given function does simply by looking at its name and type signature. No need to read the implementation!&lt;/p&gt;

&lt;p&gt;Function called &lt;code&gt;not&lt;/code&gt; that has type &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt;? It surely must be a function negating the booleans!&lt;/p&gt;

&lt;p&gt;Second of all, it's valuable to write the type of the function before writing the function definition itself. If you do that, Haskell's type system will "guide you" and help validate that your code works as expected.&lt;/p&gt;

&lt;p&gt;After all, inferred type of a function may differ from what you have intended. &lt;/p&gt;

&lt;p&gt;Writing the type beforehand is almost like sketching or designing a function, before actually writing it. Personally, I find that writing down the type first often gives me a better idea of how to implement the function.&lt;/p&gt;

&lt;p&gt;This is an example of a skill that Haskell teaches you, that you can easily transfer to other languages. Even when I'm writing untyped JavaScript, I still always start by thinking about what kind of type signature my function will have. This helps me to write code faster and make fewer bugs, even though I have to be my own type-checker in that case.&lt;/p&gt;

&lt;p&gt;So we have successfully replicated the &lt;code&gt;not&lt;/code&gt; function - &lt;code&gt;myNot&lt;/code&gt; has the same type &lt;em&gt;and&lt;/em&gt; behaves in the same way. Running &lt;code&gt;myNot True&lt;/code&gt; evaluates to &lt;code&gt;False&lt;/code&gt;, running &lt;code&gt;myNot False&lt;/code&gt; evaluates to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But let's stay on this topic a bit longer and try to write the same function in a completely different manner.&lt;/p&gt;

&lt;p&gt;Let's write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check for yourself that this loads properly in the &lt;code&gt;ghci&lt;/code&gt;. You can also test that &lt;code&gt;myNot&lt;/code&gt; still behaves the same as before.&lt;/p&gt;

&lt;p&gt;What is happening here?&lt;/p&gt;

&lt;p&gt;We used what is known as pattern matching.&lt;/p&gt;

&lt;p&gt;Instead of declaring the parameter of the function as a variable named &lt;code&gt;b&lt;/code&gt;, we can avoid naming it entirely and simply substitute it with a value that will be provided to the function once it's called.&lt;/p&gt;

&lt;p&gt;When we make a call &lt;code&gt;myNot True&lt;/code&gt;, Haskell looks for a definition that "fits" such a call. In this case, it's the first line (not counting the type signature). If we make a call &lt;code&gt;myNot False&lt;/code&gt;, then it's the second line that &lt;em&gt;matches&lt;/em&gt; that call. Hence the name "pattern matching".&lt;/p&gt;

&lt;p&gt;Hopefully, it's clear that if you call &lt;code&gt;myNot&lt;/code&gt; with a variable, not an actual value, pattern matching will still work just fine. In that case, Haskell simply evaluates the value of the variable and performs pattern matching then.&lt;/p&gt;

&lt;p&gt;So with this new definition, calling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Still properly returns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have two versions of the same function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For all intents and purposes, these two functions behave in the same way (and have the same type). Which one you prefer depends entirely on you.&lt;/p&gt;

&lt;p&gt;Do you want to see yet another way to write the same function? Here you go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arguably this way of writing the function looks the most exotic.&lt;/p&gt;

&lt;p&gt;It uses what is known as "guards". A guard is basically a condition, which is placed between &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; characters. When the condition is satisfied, a function body that is defined after &lt;code&gt;=&lt;/code&gt; gets executed.&lt;/p&gt;

&lt;p&gt;In our case, the first guard is &lt;code&gt;b == True&lt;/code&gt;. But - just as before - we can write the same condition as simply &lt;code&gt;b&lt;/code&gt;. If &lt;code&gt;b&lt;/code&gt; is True, this condition is satisfied and the function body that returns False will be executed.&lt;/p&gt;

&lt;p&gt;Otherwise (so when &lt;code&gt;b&lt;/code&gt; is not True), the function body that returns True will be executed.&lt;/p&gt;

&lt;p&gt;Interestingly, there is nothing magical about the keyword &lt;code&gt;otherwise&lt;/code&gt;. (Are you noticing a pattern here, where some "feature" of the language is not really a feature, but simply something coded in that language?)&lt;/p&gt;

&lt;p&gt;You can convince yourself that this is true by writing &lt;code&gt;otherwise&lt;/code&gt; in the &lt;code&gt;ghci&lt;/code&gt; console. As a response you will see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yup. &lt;code&gt;otherwise&lt;/code&gt; is nothing more than a regular variable, holding the value True! Just as our &lt;code&gt;x&lt;/code&gt; is!&lt;/p&gt;

&lt;p&gt;So, without the &lt;code&gt;otherwise&lt;/code&gt; our "guarded" version of the function would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just as in &lt;code&gt;if then else&lt;/code&gt;, a condition &lt;em&gt;has to&lt;/em&gt; be a Bool value. If the last condition is set to True, like it's the case here, it will always hold and therefore it will act as a catchall case if the guards above it fail. Calling it &lt;code&gt;otherwise&lt;/code&gt; is just done to make this a bit more readable.&lt;/p&gt;

&lt;p&gt;One more thing to mention here is that we used indentation. You see that lines starting with &lt;code&gt;|&lt;/code&gt; characters are moved a bit to the right. If we didn't do it and wrote the code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we would get an error while loading that file in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test.hs:3:1: error: parse error on input ‘|’
 |
3 | | b = False
 | ^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Indenting code makes it more readable for humans and - as you can see - also helps the compiler understand that a given line is still a part of the definition that began in the previous line.&lt;/p&gt;

&lt;p&gt;How much you indent the code is not important to the compiler - it has to be at least one space. But adding a few more spaces is better to keep the code nicely formatted for humans.&lt;/p&gt;

&lt;p&gt;So we have written &lt;code&gt;myNot&lt;/code&gt; in 3 different ways. Which one you prefer depends on you. Nevertheless, it's extremely valuable to get to know all 3 constructs that we've used - if then else, pattern matching and guards - because they appear almost all the time in Haskell code.&lt;/p&gt;

&lt;p&gt;We used them in separation here, but in the future, you will see that you can mix those constructs in various ways, especially when writing more complex code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-types-and-values"&gt;
  &lt;/a&gt;
  Creating Types and Values
&lt;/h3&gt;

&lt;p&gt;So far we have written a custom &lt;code&gt;not&lt;/code&gt; function for the &lt;code&gt;Bool&lt;/code&gt; type. But what if we could recreate the &lt;code&gt;Bool&lt;/code&gt; type itself, as well as its values? Is it even possible?&lt;/p&gt;

&lt;p&gt;Indeed, it's possible and even simple. Let's create a &lt;code&gt;MyBool&lt;/code&gt; type. It will have two values - &lt;code&gt;MyTrue&lt;/code&gt; and &lt;code&gt;MyFalse&lt;/code&gt;. It might seem that we are getting a bit possessive here (wink, wink), but that's only to avoid conflicts with already existing names.&lt;/p&gt;

&lt;p&gt;At the top of our &lt;code&gt;lesson_1.hs&lt;/code&gt; file let's write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy right?&lt;/p&gt;

&lt;p&gt;After you load that file in the &lt;code&gt;ghci&lt;/code&gt;, you can run &lt;code&gt;:t MyTrue&lt;/code&gt; to doublecheck that &lt;code&gt;MyTrue&lt;/code&gt; has type &lt;code&gt;MyBool&lt;/code&gt;, mirroring how &lt;code&gt;True&lt;/code&gt; has type &lt;code&gt;Bool&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyTrue :: MyBool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same is true for &lt;code&gt;MyFalse&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyFalse :: MyBool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, I lied to you &lt;em&gt;a bit&lt;/em&gt;. If you type this in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyTrue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a mysterious message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;interactive&amp;gt;:68:1: error:
 • No instance for (Show MyBool) arising from a use of ‘print’
 • In a stmt of an interactive GHCi command: print it
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It happens because &lt;code&gt;ghci&lt;/code&gt; tries to simply print the value, but... It doesn't know how!&lt;/p&gt;

&lt;p&gt;This is part of the language that will cover in future articles. Luckily we don't have to worry about it for now. Haskell can create sane default for printing, you just have to command it to do that, by adding the following line to type definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt;
 &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now call &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyTrue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will simply print back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyTrue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I said - a sane default. In the future, we will learn how to customize that printing capability, but for now, it's perfectly fine.&lt;/p&gt;

&lt;p&gt;You can now write functions that operate on this brand new type, just as we wrote a function for the built-in &lt;code&gt;Bool&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;So if we wanted &lt;code&gt;myNot&lt;/code&gt; to work on that custom &lt;code&gt;MyBool&lt;/code&gt; type, we would do it like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply replaced all occurrences of &lt;code&gt;Bool&lt;/code&gt; with &lt;code&gt;MyBool&lt;/code&gt;, all occurrences of &lt;code&gt;True&lt;/code&gt; with &lt;code&gt;MyTrue&lt;/code&gt;, and all occurrences of &lt;code&gt;False&lt;/code&gt; with &lt;code&gt;MyFalse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We now have both a built-in version (&lt;code&gt;Bool&lt;/code&gt;) and a custom version (&lt;code&gt;MyBool&lt;/code&gt;) of a boolean type. Wouldn't it be convenient to write functions to switch between them?&lt;/p&gt;

&lt;p&gt;Let's do it!&lt;/p&gt;

&lt;p&gt;First let's write a &lt;code&gt;boolToMyBool&lt;/code&gt; function. It will take a regular, Haskell &lt;code&gt;Bool&lt;/code&gt; and transform it to our custom &lt;code&gt;MyBool&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's write a function that will do the reverse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="kt"&gt;MyTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="kt"&gt;MyFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We used two different ways to write a function on purpose here. Note that we wouldn't be able to use &lt;code&gt;if then else&lt;/code&gt; with &lt;code&gt;MyBool&lt;/code&gt; type as a conditional, because it works only on the built-in &lt;code&gt;Bool&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;But on the other hand, we can use pattern matching in both, because pattern matching works with custom-defined values without any problems.&lt;/p&gt;

&lt;p&gt;Great. We can now transform back and forth between built-in and custom types. Let's try that.&lt;/p&gt;

&lt;p&gt;Load the file in &lt;code&gt;ghci&lt;/code&gt; with both definitions and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see &lt;code&gt;MyTrue&lt;/code&gt; as a response.&lt;/p&gt;

&lt;p&gt;Now let's try to transform the same value back. Let's write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see &lt;code&gt;True&lt;/code&gt; as the response. &lt;/p&gt;

&lt;p&gt;What happened here is that we converted &lt;code&gt;True&lt;/code&gt; to &lt;code&gt;MyTrue&lt;/code&gt; using the &lt;code&gt;boolToMyBool&lt;/code&gt; function (inside the parenthesis), and then we took that result and converted it back to &lt;code&gt;True&lt;/code&gt; using the &lt;code&gt;myBoolToBool&lt;/code&gt; function, all in a single expression.&lt;/p&gt;

&lt;p&gt;Is it a bit nonsensical example? Perhaps, but it shows us how we can chain multiple function calls.&lt;/p&gt;

&lt;p&gt;In fact, the brackets around the first function call are important.&lt;/p&gt;

&lt;p&gt;Try to run the following in &lt;code&gt;ghci&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The compiler will show a fairly elaborate error message, but if you read it carefully, you will find the following sentence:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The function ‘myBoolToBool’ is applied to two arguments,
 but its type ‘MyBool -&amp;gt; Bool’ has only one
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ha, so we found what is the problem. Indeed, our code looks as if we are trying to apply the &lt;code&gt;myBoolToBool&lt;/code&gt; function to two parameters - &lt;code&gt;boolToMyBool&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt;. Remember how &lt;code&gt;f x y&lt;/code&gt; was representing calling a function &lt;code&gt;f&lt;/code&gt; on two parameters? That's exactly what we are doing here! In that case, &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;myBoolToBool&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;boolToMyBool&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have to show the compiler that we want to apply the &lt;code&gt;myBoolToBool&lt;/code&gt; function to a &lt;em&gt;single&lt;/em&gt; parameter. And that parameter is a result of calling &lt;code&gt;boolToMyBool&lt;/code&gt; on &lt;code&gt;True&lt;/code&gt;. So we wrap that call in parenthesis to make that clearer (both to the compiler and us):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can we use those conversion functions for something more practical than needlessly translating booleans back and forth? Absolutely - we can use them to rewrite our &lt;code&gt;myNot&lt;/code&gt; implementation once again.&lt;/p&gt;

&lt;p&gt;We can use the fact that the &lt;code&gt;Bool&lt;/code&gt; type has already the &lt;code&gt;not&lt;/code&gt; function defined. It works exactly how we want, it just operates on different types. So let's take a &lt;code&gt;MyBool&lt;/code&gt; value, convert it to &lt;code&gt;Bool&lt;/code&gt;, use &lt;code&gt;not&lt;/code&gt; on it, and then convert it back to &lt;code&gt;MyBool&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;span class="n"&gt;myNot&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's review step by step how that function works.&lt;/p&gt;

&lt;p&gt;Since it's a function of type &lt;code&gt;MyBool -&amp;gt; MyBool&lt;/code&gt;, its argument is a &lt;code&gt;MyBool&lt;/code&gt; - that's why we called it &lt;code&gt;mb&lt;/code&gt;. We pass that variable to a function - &lt;code&gt;myBoolToBool mb&lt;/code&gt; - and as a result, we are getting something of type &lt;code&gt;Bool&lt;/code&gt;. Then we are applying &lt;code&gt;not&lt;/code&gt; on it, by writing &lt;code&gt;not (myBoolToBool x)&lt;/code&gt;. Note that at this step the type doesn't change - we are feeding &lt;code&gt;not&lt;/code&gt; a &lt;code&gt;Bool&lt;/code&gt; and getting a &lt;code&gt;Bool&lt;/code&gt; again, since &lt;code&gt;not&lt;/code&gt; is of type &lt;code&gt;Bool -&amp;gt; Bool&lt;/code&gt;. At the end we convert back to &lt;code&gt;MyBool&lt;/code&gt;, by writing &lt;code&gt;boolToMyBool (not (myBoolToBool x))&lt;/code&gt; - which is the return value of our function.&lt;/p&gt;

&lt;p&gt;This could be again summarised as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boolToMyBool&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myBoolToBool&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;MyBool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This technique of tracking which value has which type is extremely valuable, especially when just starting with Haskell. Whenever you feel lost about how a certain function works, I would encourage you to analyze all the types of all the values in that function. You will discover that when you know all the types well, it's much easier to understand how the code works and what it does.&lt;/p&gt;

&lt;p&gt;This is the second example of a skill that Haskell teaches you, which is immediately transferable to programming in other languages. Even if your day-to-day language is loosely typed and doesn't have types in its actual syntax, you can still use this way of thinking to better understand functions while reading code.&lt;/p&gt;

&lt;p&gt;In time you will discover that this allows you to understand code much faster, especially the code that you haven't written yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So we played with Bools in Haskell, serving as our introductory lesson in that language.&lt;/p&gt;

&lt;p&gt;We've learned the basics of Haskell's syntax, we've seen how to create and use functions, and even how to create some simple datatypes.&lt;/p&gt;

&lt;p&gt;In future articles, we will elaborate on those ideas quite a bit, so if you are hooked on Haskell by now (as I hope you are!), I would recommend to follow me on &lt;a href="https://twitter.com/m_podlasin"&gt;Twitter&lt;/a&gt;. I don't run any kind of newsletter email or anything like that, so that's the best way to get notified when a new article drops.&lt;/p&gt;

&lt;p&gt;If you have any questions or comments regarding the article, you can reach me there as well. I would like to keep improving this article so that it serves others as best as possible.&lt;/p&gt;

&lt;p&gt;Thanks for reading and see you soon!&lt;/p&gt;

</description>
      <category>haskell</category>
      <category>functional</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Hey Android, Where's my Process?</title>
      <author>Nikhil Thakkar</author>
      <pubDate>Thu, 29 Jul 2021 19:13:30 +0000</pubDate>
      <link>https://dev.to/_nikhi1/hey-android-where-s-my-process-4f0e</link>
      <guid>https://dev.to/_nikhi1/hey-android-where-s-my-process-4f0e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Sometimes good guys gotta do bad things to make the bad guys pay. &lt;br&gt;
&lt;br&gt;- &lt;em&gt;Harvey Specter&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This article is a followup on this &lt;a href="https://medium.com/mindorks/hey-android-please-keep-my-activities-7bf96ccc0a38"&gt;medium article&lt;/a&gt; written by my friend Calvin. I would highly recommend you to go through it as it lays the foundation for this article.&lt;/p&gt;

&lt;p&gt;We would be particularly dealing with process kill scenarios and explore potential solutions to mitigate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#android-app-lifecycle"&gt;
  &lt;/a&gt;
  Android App Lifecycle
&lt;/h2&gt;

&lt;p&gt;Every app runs in its own sandbox environment i.e its own process. Every process is allotted some amount of RAM from the existing available RAM by the OS.&lt;/p&gt;

&lt;p&gt;Nowadays, Android is becoming more and more battery-friendly and it's doing that, partly, by aggressively killing background apps that are not in the foreground after a relatively small amount of time. This, of course, depends on various other factors happening on the device like available RAM, etc. Check out this &lt;a href="https://dontkillmyapp.com/"&gt;site&lt;/a&gt; for more information about how different manufacturers deal with background apps restrictions.&lt;/p&gt;

&lt;p&gt;So it's the developer's responsibility to test his/her app for such scenarios for optimal user experience. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-simulate-a-process-kill-wink"&gt;
  &lt;/a&gt;
  How to simulate a process kill 😉?
&lt;/h2&gt;

&lt;p&gt;Now that we have established the reason to test these edge cases, its time to simulate a process kill scenario.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAYrn_UE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giphygifs.s3.amazonaws.com/media/8oPkn7Hl79J6g/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAYrn_UE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giphygifs.s3.amazonaws.com/media/8oPkn7Hl79J6g/giphy.gif" alt="Harvey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-naive-way"&gt;
  &lt;/a&gt;
  The Naive way
&lt;/h3&gt;

&lt;p&gt;The camera app on your phone is resource-intensive and requires a lot of RAM to run. Once you start the app, this results in the systematic killing of your background apps almost instantly. Mind well this might not be true for every scenario. Only opt for this approach if you are lazy 😁.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-nerdy-way"&gt;
  &lt;/a&gt;
  The Nerdy way 😎
&lt;/h3&gt;

&lt;p&gt;Let's get our hands dirty and run some terminal commands. Assuming an Android emulator is available and you have the sample project running with applicationId &lt;strong&gt;com.processkill.example&lt;/strong&gt;, go to terminal and type this command (these commands have been tested on Android emulator running P)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adb shell pidof com.processkill.example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should output the ProcessID in which the app is running. Now go ahead and minimize the app by pressing the HOME button. This is needed to be done as Android would not kill a user-focused activity/app/process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adb shell am kill com.processkill.example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By running this command we have in principle simulated a process kill scenario. If you run the earlier command again you should see an empty string being printed on console meaning the process has been actually terminated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-for-retrospective"&gt;
  &lt;/a&gt;
  Time for retrospective
&lt;/h3&gt;

&lt;p&gt;Go ahead and test your app by running the above commands and see how it behaves in different scenarios.&lt;br&gt;
If you have a well-crafted app and it works well in the above scenario then you should be proud of yourself achieving such a feat 🍻. &lt;/p&gt;

&lt;p&gt;If you are facing some issues then read on.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whos-the-culprit-and-i-dont-mean-its-you-joy"&gt;
  &lt;/a&gt;
  Who's the culprit? And I don't mean it's you 😂
&lt;/h3&gt;

&lt;p&gt;There could be a number of reasons for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maybe the way you have implemented the app architecture without giving 
careful thought about the state of the app in such scenarios.&lt;/li&gt;
&lt;li&gt;You were short on time, which is mostly the case, in fast pace driven development.&lt;/li&gt;
&lt;li&gt;Android itself 😏&lt;/li&gt;
&lt;li&gt;Add your own reason 😁&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The issue/feature about &lt;strong&gt;Android&lt;/strong&gt; is that it will automagically re-create the last Activity and also re-attach the Fragments, if any, from your Task Stack if the user resumes the app after it has been killed by OS. This is different from &lt;strong&gt;iOS&lt;/strong&gt; behaviour wherein the OS doesn't restore the last ViewController automatically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though the intention from Android seem correct resulting in better UX, it throws a challenge for us, developers, to handle these scenarios and think of it while designing apps.&lt;/p&gt;

&lt;p&gt;Let's see what we can do here and strike a balance between UX and state of the app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-first-repeat-after-me"&gt;
  &lt;/a&gt;
  But first, repeat after me:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Static and/or member variables defined in the &lt;strong&gt;Application&lt;/strong&gt; or any &lt;strong&gt;Singleton&lt;/strong&gt; class won't survive the &lt;strong&gt;process kill&lt;/strong&gt; and will reset to their default values which could be &lt;strong&gt;null&lt;/strong&gt;. Remember &lt;code&gt;NullPointerException&lt;/code&gt; 😱.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#scenario-1"&gt;
  &lt;/a&gt;
  Scenario: 1
&lt;/h4&gt;

&lt;p&gt;You don't have any caching/persistence strategy implemented for your app.&lt;/p&gt;

&lt;p&gt;In such scenarios, the easiest way out would be to start from a clean slate. Here is the code that can potentially go inside the BaseActivity class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer Warning&lt;/strong&gt;⚠️  Use this solution only as a last resort.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;currentProcessId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;myPid&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentProcessId&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PID_KEY&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;intent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;SplashActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_CLEAR_TASK&lt;/span&gt;
                &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;putString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PID_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;myPid&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this piece of code is doing is that if we detect our app has been recreated because of the process kill then we re-direct the app to the launcher activity which in this case is the SplashActvity.&lt;/p&gt;

&lt;p&gt;At first, you would be tempted to use this solution in every app you have built. But this would be bad for UX as the user expects to start off from where he/she left your application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scenario-2"&gt;
  &lt;/a&gt;
  Scenario: 2
&lt;/h4&gt;

&lt;p&gt;Let's try to put everything in &lt;code&gt;Bundle&lt;/code&gt; -&amp;gt; objects that are intended to be used across process boundaries such as with IPC/Binder transactions, between activities with intents, and to store transient state across configuration changes. &lt;/p&gt;

&lt;p&gt;Please refer to &lt;a href="https://github.com/nikhil-thakkar/process-kill-example"&gt;this&lt;/a&gt; github repo for a sample project. Checkout the master branch for the project if you want to follow along.&lt;br&gt;
The code is very simple to understand and is pretty much a boilerplate with classical MVC 😋.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm using sample json files packed inside &lt;code&gt;assets&lt;/code&gt; folder to keep things simple and readable.&lt;br&gt;
The json file holds some randomly generated data to be consumed by the app. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main components of the app are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DataProvider&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a simple interface to abstract the source from where the data is coming from. In our case it's a file read from &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MainFragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listing page of all the users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DetailFragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detail page about a particular user.&lt;/p&gt;

&lt;p&gt;Now if you place around with the app, it should work fine in every scenario including process death. Do verify it by running the terminal commands to simulate a process death scenario we discussed above.&lt;/p&gt;

&lt;p&gt;Now follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checkout branch &lt;strong&gt;scenario-2&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Run the app&lt;/li&gt;
&lt;li&gt;Minimize it&lt;/li&gt;
&lt;li&gt;Look at logcat for some suprises 💩
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2019-11-13 21:40:10.542 24962-24962/com.processkill.example E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.processkill.example, PID: 24962
    java.lang.RuntimeException: android.os.TransactionTooLargeException: data parcel size 1253524 bytes
        at android.app.servertransaction.PendingTransactionActions&lt;span class="nv"&gt;$StopInfo&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;PendingTransactionActions.java:161&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Handler.handleCallback&lt;span class="o"&gt;(&lt;/span&gt;Handler.java:883&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Handler.dispatchMessage&lt;span class="o"&gt;(&lt;/span&gt;Handler.java:100&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Looper.loop&lt;span class="o"&gt;(&lt;/span&gt;Looper.java:214&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.ActivityThread.main&lt;span class="o"&gt;(&lt;/span&gt;ActivityThread.java:7319&lt;span class="o"&gt;)&lt;/span&gt;
        at java.lang.reflect.Method.invoke&lt;span class="o"&gt;(&lt;/span&gt;Native Method&lt;span class="o"&gt;)&lt;/span&gt;
        at com.android.internal.os.RuntimeInit&lt;span class="nv"&gt;$MethodAndArgsCaller&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;RuntimeInit.java:492&lt;span class="o"&gt;)&lt;/span&gt;
        at com.android.internal.os.ZygoteInit.main&lt;span class="o"&gt;(&lt;/span&gt;ZygoteInit.java:934&lt;span class="o"&gt;)&lt;/span&gt;
     Caused by: android.os.TransactionTooLargeException: data parcel size 1253524 bytes
        at android.os.BinderProxy.transactNative&lt;span class="o"&gt;(&lt;/span&gt;Native Method&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.BinderProxy.transact&lt;span class="o"&gt;(&lt;/span&gt;BinderProxy.java:510&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.IActivityTaskManager&lt;span class="nv"&gt;$Stub$Proxy&lt;/span&gt;.activityStopped&lt;span class="o"&gt;(&lt;/span&gt;IActivityTaskManager.java:4500&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.servertransaction.PendingTransactionActions&lt;span class="nv"&gt;$StopInfo&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;PendingTransactionActions.java:145&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because when we communicate across different process boundaries there is limit on the data we can share with the other process wiz. &lt;strong&gt;1MB&lt;/strong&gt;. In our case it's a bit over 1MB and hence the exception, &lt;code&gt;TransactionTooLargeException&lt;/code&gt;, which results in process being killed when in background.&lt;/p&gt;

&lt;p&gt;Therefore always carefully examine what you are going to put in &lt;code&gt;Bundle&lt;/code&gt; and size implications.&lt;br&gt;
Save the smallest amount of data possible which could be one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;primary column id when reading from database or &lt;/li&gt;
&lt;li&gt;file path when reading from disk or &lt;/li&gt;
&lt;li&gt;some other souce from where you can reliably re-create app state somehow or&lt;/li&gt;
&lt;li&gt;try try try or&lt;/li&gt;
&lt;li&gt;fallback to &lt;strong&gt;Scenario: 1&lt;/strong&gt; 💯 &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#side-note-on-flutter"&gt;
  &lt;/a&gt;
  Side note on Flutter
&lt;/h3&gt;

&lt;p&gt;Flutter apps run inside a single activity. These apps would, by default, start from the &lt;strong&gt;first widget&lt;/strong&gt; defined in case of &lt;code&gt;Don't keep activities/process death&lt;/code&gt; scenarios unless explicitly handled. This first widget would be the one defined by &lt;em&gt;home&lt;/em&gt; property inside &lt;strong&gt;MaterialApp&lt;/strong&gt; widget.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-it-for-this-time"&gt;
  &lt;/a&gt;
  That's It for this time!
&lt;/h3&gt;

&lt;p&gt;Thank you for hanging around. Hope you learned something new 😃. Feel free to reach out on twitter - &lt;a href="https://twitter.com/_nikhi1"&gt;&lt;strong&gt;@_nikhi1&lt;/strong&gt;&lt;/a&gt; - for any questions/feedback you have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TW6HfTEHrAPv2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TW6HfTEHrAPv2/giphy.gif" alt="Harvey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/guide/components/processes-and-threads"&gt;Processes and Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/guide/components/activities/parcelables-and-bundles"&gt;Parcels and Bundles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JoseAlcerreca/android-lifecycles"&gt;Android Lifecycle Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/reference/android/os/TransactionTooLargeException"&gt;Transactions Too Large Expection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/topic/libraries/architecture/viewmodel-savedstate"&gt;Save State Module for ViewModel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pub.dev/packages/native_state"&gt;Flutter Native State Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>android</category>
      <category>processkill</category>
      <category>background</category>
    </item>
    <item>
      <title>How to Use CDK Outputs in Your InSpec Tests</title>
      <author>Jenna Pederson</author>
      <pubDate>Thu, 29 Jul 2021 18:59:59 +0000</pubDate>
      <link>https://dev.to/aws/how-to-use-cdk-outputs-in-your-inspec-tests-18h6</link>
      <guid>https://dev.to/aws/how-to-use-cdk-outputs-in-your-inspec-tests-18h6</guid>
      <description>&lt;p&gt;As a programmer, hard-coding values in my code, even test code, feels dirty and it's usually not a scalable practice. I've built an AWS CDK app to manage my infrastructure with code and I'm starting to write some integration tests with &lt;a href="https://docs.chef.io/inspec/"&gt;InSpec&lt;/a&gt;, an open-source testing and auditing framework. Unlike my Jest unit tests that test the infrastructure code, these tests compare the desired state (what's in my InSpec test code) with the current state (what's in the cloud). This means they are testing directly against the cloud resources and I'll need access to the IDs of the resources I'm writing tests against. I could hard-code these IDs in my tests, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;aws_ec2_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"i-1234567890abcdef0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_running&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yuck!&lt;/p&gt;

&lt;p&gt;As soon as I re-deploy the CDK code, these resources can be re-provisioned and the IDs can change. And if I'm running my CDK code through a CI/CD pipeline I'll need to run infrastructure tests against resources in different environments. Resource IDs will differ across environments and accounts, also making it difficult for another developer on my team to run the tests against their account. Either way, as a programmer, hard-coding these resource IDs in my test code doesn't feel right and it won't scale.&lt;/p&gt;

&lt;p&gt;Instead, I can add Outputs to our CDK app and push those values to a JSON file that my InSpec tests can use. Let's take a look how to do that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-cdk-outputs"&gt;
  &lt;/a&gt;
  Add CDK Outputs
&lt;/h2&gt;

&lt;p&gt;First, I'll add an output to the CDK code to output the resource's ID, the EC2 instance ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ec2Instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ec2-instance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;InstanceId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ec2Instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instanceId&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-cdk-app-to-get-outputsjson"&gt;
  &lt;/a&gt;
  Deploy CDK App to Get Outputs.json
&lt;/h2&gt;

&lt;p&gt;Next, I'll deploy the CDK app and push the output values to a JSON file that the InSpec profile can use. InSpec expects this file to be located in the profile's &lt;code&gt;files&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cdk deploy &lt;span class="nt"&gt;--outputs-file&lt;/span&gt; inspec/files/outputs.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-cdk-outputs-as-inputs-in-inspec"&gt;
  &lt;/a&gt;
  Use CDK Outputs as Inputs in InSpec
&lt;/h2&gt;

&lt;p&gt;Finally, to use the CDK output values in the InSpec test control, I need to read this file using &lt;code&gt;inspec.profile.file&lt;/code&gt;, parse the JSON, and reference the value in the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;control&lt;/span&gt; &lt;span class="s2"&gt;"01-ec2-instance"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;impact&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
  &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="s2"&gt;"Verify EC2 Instance is Running"&lt;/span&gt;

  &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'outputs.json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="no"&gt;INSTANCE_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'MyStack'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'InstanceId'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;aws_ec2_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;INSTANCE_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_running&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Now my tests rely on dynamic values rather than hard-coded values. These tests won't break the moment a resource gets swapped out or when I run tests in a different environment. If you're not using the CDK, you can follow the same process with other infrastructure as code frameworks as well.&lt;/p&gt;

&lt;p&gt;Grab the code &lt;a href="https://github.com/jennapederson/infrastructure-test-examples"&gt;here&lt;/a&gt; to get started with the CDK, Jest unit tests, or InSpec infrastructure testing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Like what you read? Follow me here on the &lt;a href="https://dev.to/jennapederson"&gt;Dev.to community&lt;/a&gt; or give me a follow on &lt;a href="https://twitter.com/jennapederson"&gt;Twitter&lt;/a&gt; to stay updated!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>iac</category>
      <category>cdk</category>
      <category>inspec</category>
    </item>
    <item>
      <title>Full Stack Netflix App (7 hours free tutorial)</title>
      <author>Safak</author>
      <pubDate>Thu, 29 Jul 2021 18:55:43 +0000</pubDate>
      <link>https://dev.to/safak/full-stack-netflix-app-7-hours-free-tutorial-1o6l</link>
      <guid>https://dev.to/safak/full-stack-netflix-app-7-hours-free-tutorial-1o6l</guid>
      <description>&lt;p&gt;Hi, I'm Safak. I am a full-stack web developer and I'm sharing open source web projects on my YouTube channel. After &lt;a href="https://dev.to/safak/social-media-app-using-mern-stack-4ic6"&gt;Full Stack Social Media App&lt;/a&gt; project, I decided to share my 7 hours "MERN Stack Netflix Clone with an Admin Panel" tutorial. &lt;/p&gt;

&lt;p&gt;For this project I used Express API, MongoDB, React functional components, hooks with context API. I hope you will enjoy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-part-of-the-netflix-app"&gt;
  &lt;/a&gt;
  Design Part of the Netflix App
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to design Netflix clone using React.js and Sass.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FzWG8jiw4XM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mern-stack-part"&gt;
  &lt;/a&gt;
  MERN Stack Part
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to create an Express server with the MongoDB connection. And we are going to make API requests on the client side using axios, hooks and context API.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tsNswx0nRKM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I hope it was useful. If you want to learn more about web development and practice with real-world projects, you can check my channel out.&lt;/p&gt;

&lt;p&gt;🔥 &lt;a href="https://www.youtube.com/c/lamadev"&gt;Lama Dev YouTube Channel&lt;/a&gt;&lt;br&gt;
⚡️ &lt;a href="https://www.facebook.com/groups/lamadev"&gt;Lama Dev Facebook&lt;/a&gt;&lt;br&gt;
👾 &lt;a href="https://github.com/safak/youtube/tree/mern-netflix-app"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>7 CSS Tricks you should know as a Developer!</title>
      <author>SAIFULLAH🇮🇳</author>
      <pubDate>Thu, 29 Jul 2021 18:25:42 +0000</pubDate>
      <link>https://dev.to/saifullah/7-css-tricks-you-should-now-as-a-developer-5bmb</link>
      <guid>https://dev.to/saifullah/7-css-tricks-you-should-now-as-a-developer-5bmb</guid>
      <description>&lt;p&gt;As I am learning Development, I would like to share this &lt;strong&gt;7 &lt;em&gt;CSS&lt;/em&gt; tricks that you should know as a Developer for better results.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you know this before hit heart below!&lt;/p&gt;

&lt;p&gt;So let's begin...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-disable-a-link"&gt;
  &lt;/a&gt;
  1. Disable a link
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZ0r5uDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ql5cpnisgsmoq1riyg25.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZ0r5uDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ql5cpnisgsmoq1riyg25.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~You can disable any link using css and no action will take place while you click on the link.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-disable-text-selection"&gt;
  &lt;/a&gt;
  2. Disable Text Selection
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8f_uV7YS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqdnhztg5ev2opr4z68o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8f_uV7YS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqdnhztg5ev2opr4z68o.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~The property user-select says whether the use can select the element or not.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-resize-images-to-fit"&gt;
  &lt;/a&gt;
  3. Resize images to fit
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcNl-6CO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ructscyg34tb5w2q92s6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcNl-6CO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ructscyg34tb5w2q92s6.jpg" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~when you get in a pinch where images need to fit a certain width, while scaling proportionally. An easy way to do this is to use max width to handle this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-custom-caret-color"&gt;
  &lt;/a&gt;
  4. Custom caret color
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYo3iD-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk5q1efgwzkjh3hp0wex.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYo3iD-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk5q1efgwzkjh3hp0wex.jpg" alt="Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~The caret-color property sets the color of the insertion carpet, the visible marker where the next character types will be inserted.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-disable-text-area-resize"&gt;
  &lt;/a&gt;
  5. Disable Text Area resize
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mHyqvJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjp9xu1444frcqkbfii8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mHyqvJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjp9xu1444frcqkbfii8.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~Resize property will resize the textarea, inorder to disable textarea you should give none value.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-making-image-fit"&gt;
  &lt;/a&gt;
  6. Making image fit
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kryl_USC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6q82jigsytp6h2c3pwd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kryl_USC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6q82jigsytp6h2c3pwd.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~This object-fit property sets how the content of a replaced element, such as an img or video, should be resized to fit its container.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-placeholders-color"&gt;
  &lt;/a&gt;
  7. Placeholder's color
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFWuMgVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atp7ffu0mxd313hnhxdq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFWuMgVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atp7ffu0mxd313hnhxdq.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~The ::placeholder selector selects fork elements with placeholder text. This will let you style the placeholder text.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
Do read my previous posts you will love it.&lt;/p&gt;

&lt;p&gt;Do follow me on Twitter for more🤗&lt;br&gt;
&lt;a href="https://twitter.com/sa_ifullah?s=09"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding reduce in javascript</title>
      <author>Shaurya Vardhan Singh</author>
      <pubDate>Thu, 29 Jul 2021 17:43:08 +0000</pubDate>
      <link>https://dev.to/wulforr/understanding-reduce-in-javascript-4hgh</link>
      <guid>https://dev.to/wulforr/understanding-reduce-in-javascript-4hgh</guid>
      <description>&lt;p&gt;Reduce is an array method that was introduced in javaScript in ES5 along with map and filter. Map and filter are pretty straightforward to understand but I had difficulty understanding reduce so in this blog we are going to understand reduce with the help of some examples.&lt;/p&gt;

&lt;p&gt;As the name suggests reduce method is used to reduce the array to a single value.&lt;br&gt;
According to MDN - &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, this single output value could be anything, it could be a number, an object, or even an array.&lt;/p&gt;

&lt;p&gt;Let's take an example - you have an array of numbers and you would want to calculate the sum of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so we can use reduce here as we want a single output, reduce method takes 2 parameters one is a callback function and the other is the initial value. The initial value is optional and if we don't provide it then it takes the first value of the array as an initial value and starts from 2nd value of an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't provide the initial value there is a chance to get a type error if the array is empty, so it's a good practice to always include the initial value.&lt;/p&gt;

&lt;p&gt;The callback function can have 4 arguments - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;accumulator&lt;/strong&gt; : it is the return value of the callbackFunction for the next iteration and for the first time it is initialValue. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;currentValue&lt;/strong&gt; : the current array item&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;index&lt;/strong&gt; : index of the currentValue&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;wholeArray&lt;/strong&gt; : the complete array on which we are applying reduce
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wholeArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// doSomethingHere&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;index and wholeArray arguments are optional and can be omitted. In 99% of cases, only the first two arguments are needed&lt;/p&gt;

&lt;p&gt;In this example, while looping through the array in each iteration we add the currentValue to the accumulator and return it this return becomes the accumulator for the next iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can write this in one line using arrow function as well -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would have ran the loop 5 times - &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iteration number ---&amp;gt; accumulator ---&amp;gt; currentValue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1 ---&amp;gt;0(initialValue) ---&amp;gt; 9&lt;/p&gt;

&lt;p&gt;2 ---&amp;gt; 9(0 + 9) ---&amp;gt; 8&lt;/p&gt;

&lt;p&gt;3 ---&amp;gt;17(9 + 8) ---&amp;gt; 7&lt;/p&gt;

&lt;p&gt;4 ---&amp;gt;24(17 + 7) ---&amp;gt; 6&lt;/p&gt;

&lt;p&gt;5 ---&amp;gt;30(24 + 5) ---&amp;gt; 5&lt;/p&gt;

&lt;p&gt;and then it returns 35&lt;/p&gt;

&lt;p&gt;This was a straightforward example now lets take a complex example.&lt;br&gt;
We are given an array of students data and we need to group students with their favourite fruit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;studentsData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Shaurya&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mango&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Priya&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rishabh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mango&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Shubham&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Grapes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ashish&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Strawberry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to return an object with fruits as keys and students as array values.&lt;br&gt;
So we take initialValue as an empty object and will iterate through the array and check for each student if fruit is present in accumulator then push the student to its array else add the fruit as key and push the student as its value in array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;groupByFavouriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;studentsData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentStudent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentStudent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentStudent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{})&lt;/span&gt;

&lt;span class="c1"&gt;//  so groupByFavouriteFruits becomes &lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     Mango : [ 'Shaurya', 'Rishbah' ],&lt;/span&gt;
&lt;span class="c1"&gt;//     Apple : [ 'Priya' ],&lt;/span&gt;
&lt;span class="c1"&gt;//     Grapes : [ 'Shubham' ],&lt;/span&gt;
&lt;span class="c1"&gt;//     Strawberry : [ 'Ashish' ]&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reduce is a very powerful array method, although it is a bit harder a understand but it has various use cases. The Map and Filter Array methods can also be written through Reduce but that will be a topic for another blog.&lt;/p&gt;

&lt;p&gt;If you want to read more about reduce MDN has a very detailed doc on it - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quirky tip - There is a reduceRight method as well, which works same as reduce but the array is traversed right to left.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Kadane's Algorithm (Maximum Sum Subarray Problem)</title>
      <author>Clean Code Studio</author>
      <pubDate>Thu, 29 Jul 2021 17:36:57 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/kadane-s-algorithm-maximum-sum-subarray-problem-2nhp</link>
      <guid>https://dev.to/cleancodestudio/kadane-s-algorithm-maximum-sum-subarray-problem-2nhp</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Today we're going to discuss the optimal solution to the maximum sum subarray problem.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;What's the maximum subarray problem?&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGzh8g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jn6ueykz5befrpv49n15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGzh8g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jn6ueykz5befrpv49n15.png" alt="Maximum Sum Sub-array example"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Let's say we have an array that looks like this: &lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sub-arrays are defined as continuous elements. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: The entire array is considered a sub-array since all elements are continuous.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3]&lt;/code&gt; = &lt;code&gt;-2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;-1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1, -1]&lt;/code&gt; = &lt;code&gt;2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1]&lt;/code&gt; = &lt;code&gt;3&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
etc...&lt;/p&gt;

&lt;p&gt;Our maximum sub-array is &lt;code&gt;[2, 1]&lt;/code&gt; which sums to &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;So, how do we programmatically solve this coding challenge?&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#brute-force-solution"&gt;
  &lt;/a&gt;
  Brute Force Solution
&lt;/h3&gt;



&lt;p&gt;Basically, we check all of the possible arrays and pick the one with the maximum some. &lt;/p&gt;

&lt;p&gt;We'd start at the first index and then move on to the second index and so on - we kinda did that above when we did this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3]&lt;/code&gt; = &lt;code&gt;-2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;-1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1, -1]&lt;/code&gt; = &lt;code&gt;2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1]&lt;/code&gt; = &lt;code&gt;3&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
etc...&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#kadanes-algorithm-the-optimal-solution"&gt;
  &lt;/a&gt;
  Kadane's Algorithm (The Optimal Solution)
&lt;/h3&gt;



&lt;p&gt;The idea is very simple. We're going to look at each index and ask ourselves - what's the maximum sub-array ending at &lt;em&gt;this&lt;/em&gt; index? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Starting at index 0, we have [1]. &lt;/p&gt;

&lt;p&gt;What's the maximum subarray ending at this index (this currently being 0)? &lt;/p&gt;

&lt;p&gt;It's obviously just 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;For the second index, we're going to ask what the maximum sub-array ending at this index.&lt;/p&gt;

&lt;p&gt;At this index, the maximum sum can be &lt;code&gt;[1, -3]&lt;/code&gt; or just &lt;code&gt;[-3]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The maximum one of those is &lt;code&gt;[1, -3]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;For the third index we'll do the same thing. &lt;/p&gt;

&lt;p&gt;The subarray with the maximum sum ending at this index could be.&lt;/p&gt;

&lt;p&gt;[2]&lt;br&gt;
[-3, 2]&lt;br&gt;
[1, -3, 2]&lt;/p&gt;

&lt;p&gt;The answer is &lt;code&gt;[2]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
Index 2: [2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;We just continue using this pattern all the way through, and then compare the remaining subarrays that we have gotten by getting the maximum subarray at each index. &lt;/p&gt;

&lt;p&gt;Index 3 has the following subarrays. &lt;/p&gt;

&lt;p&gt;We choose &lt;code&gt;[1]&lt;/code&gt; or &lt;code&gt;[1, 2]&lt;/code&gt; or &lt;code&gt;[1, 2, -3]&lt;/code&gt; or &lt;code&gt;[1, 2 -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;1 + 2&lt;/code&gt; is the highest sum out of all of index three's subarrays we'll use that for index 3. &lt;/p&gt;

&lt;p&gt;Index 4 has the following subarrays &lt;br&gt;
&lt;code&gt;[-1]&lt;/code&gt; or &lt;code&gt;[-1, 1]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2, -3]&lt;/code&gt; or &lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;[-1, 1, 2]&lt;/code&gt; has the highest sum index 4 will use that subarray. &lt;/p&gt;

&lt;p&gt;The max sub-array at each index.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
Index 2: [2]
Index 3: [1, 2]
Index 4: [-1, 1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we simply compare the sub-arrays that we have collected at each index and return the one with the highest sum.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; or &lt;code&gt;[1, -3]&lt;/code&gt; or &lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[1, 2]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;[1, 2]&lt;/code&gt; sums up to 3 and is the highest sum we return &lt;code&gt;[1, 2]&lt;/code&gt; as our final value.&lt;/p&gt;



&lt;p&gt;As you can see, the idea here is simple - but it's not very efficient. It's going to take &lt;code&gt;O(n^2)&lt;/code&gt; time complexity (AKA quadratic time).&lt;/p&gt;

&lt;p&gt;But, the interesting idea from Kadane's algorithm is we can do much better than that. We can run it in O(n) time complexity (AKA linear time).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-lets-see-how-we-can-do-this"&gt;
  &lt;/a&gt;
  So let's see how we can do this.
&lt;/h2&gt;

&lt;p&gt;Let's say we're using the same strategy here. We begin by finding the max sub-array at each given index.&lt;/p&gt;

&lt;p&gt;Now, let's assume we've already resolved the max sub-arrays from our first and second index. We're on index three.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Max sum sub-arrays from index one and two&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Original Array:&lt;/strong&gt; &lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next element we have is &lt;code&gt;2&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Kadane's algorithm states that the maximum sub-array for this index will either be the current element (in this case &lt;code&gt;2&lt;/code&gt;) OR the current element + the previous maximum sub-array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
To determine the local maximum subarray we were doing the following.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, -3]&lt;/code&gt; or &lt;code&gt;[2, -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;BUT kardane's algorithm states that our local maximum subarray is either the current element OR the current element + the previous maximum sub-array.&lt;/p&gt;

&lt;p&gt;Following this principle we can simplify &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, -3]&lt;/code&gt; or &lt;code&gt;[2, -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, 1, -3]&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#we-can-just-compare-these-and-ignore-all-other-local-subarrays-and-this-will-give-us-our-local-maximum-subarray"&gt;
  &lt;/a&gt;
  We can just compare these, and ignore all other local sub-arrays and this will give us our local maximum sub-array.
&lt;/h2&gt;

&lt;p&gt;This solution is much faster than the brute force algorithm and runs in linear time [aka O(n)]. &lt;/p&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;My personal FAANG interview Notes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>code</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Journey from Mongoose to Prisma ORM for MongoDB!</title>
      <author>Somsubhra Das</author>
      <pubDate>Thu, 29 Jul 2021 16:51:25 +0000</pubDate>
      <link>https://dev.to/somsubhra1/journey-from-mongoose-to-prisma-orm-for-mongodb-3j21</link>
      <guid>https://dev.to/somsubhra1/journey-from-mongoose-to-prisma-orm-for-mongodb-3j21</guid>
      <description>&lt;p&gt;&lt;a href="https://www.prisma.io/?utm_source=Prisma%20Ambassador&amp;amp;utm_medium=Blog%20post&amp;amp;utm_campaign=Prisma%20AP%20Somsubhra%20Dass"&gt;Prisma&lt;/a&gt; is a next Generation ORM for NodeJS &amp;amp; TypeScript Environments. It has multiple databases support such as MySQL, SQLite, PostgreSQL, MSSQL and also MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03TVNXC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6asm3c1uhmis3ktx9sih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03TVNXC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6asm3c1uhmis3ktx9sih.png" alt="Prisma Application Lifecycle"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://prisma.io"&gt;Source: Prisma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in this post let's talk about the all new Prisma MongoDB Connector, it's operations and what made me switch from Mongoose to Prisma for MongoDB.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connection"&gt;
  &lt;/a&gt;
  Connection
&lt;/h2&gt;

&lt;p&gt;Let's start by establishing the connection to our MongoDB Server. In your &lt;strong&gt;Prisma schema&lt;/strong&gt; file we need to change the &lt;code&gt;provider&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;datasource&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;prisma.schema&lt;/code&gt; file allows us to specify how we want Prisma to connect to our database. We need to tell it what kind of provider we would like to use - in this case &lt;code&gt;mongodb&lt;/code&gt; - and a &lt;code&gt;url&lt;/code&gt; to connect to - this is pointing to an environment variable as we want to keep it secret. We will use a MongoDB connection string as the &lt;code&gt;DATABASE_URL&lt;/code&gt; which can be found in the &lt;code&gt;/prisma/.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next we need to setup the generator block like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prisma-client-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;previewFeatures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoDb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Since Prisma MongoDB Connector is still in preview we need to explicitly specify the &lt;code&gt;previewFeatures&lt;/code&gt; key.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-models"&gt;
  &lt;/a&gt;
  Defining Models
&lt;/h2&gt;

&lt;p&gt;So now that connection has been successfully established to MongoDB Server, let's now create models for our database collection.&lt;/p&gt;

&lt;p&gt;A typical MongoDB document looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$oid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;60d599cb001ef98000f2cad2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somsubhra@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Somsubhra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now how to define a model like this in Prisma? Inside &lt;strong&gt;Prisma schema&lt;/strong&gt; file, we can define our models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;  &lt;span class="nb"&gt;String&lt;/span&gt;  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbgenerated&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;
  &lt;span class="nx"&gt;email&lt;/span&gt;     &lt;span class="nb"&gt;String&lt;/span&gt;   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;unique&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparing it with mongoose models, in Mongoose ODM we would have written something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;a href="https://www.prisma.io/?utm_source=Prisma%20Ambassador&amp;amp;utm_medium=Blog%20post&amp;amp;utm_campaign=Prisma%20AP%20Somsubhra%20Dass"&gt;Prisma&lt;/a&gt; we may also generate ObjectIds manually by using the &lt;code&gt;bson&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#queries-amp-database-operations"&gt;
  &lt;/a&gt;
  Queries &amp;amp; Database Operations
&lt;/h2&gt;

&lt;p&gt;Now let's understand how to write queries and operations to MongoDB using Prisma in comparison to Mongoose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetching-single-record"&gt;
  &lt;/a&gt;
  Fetching Single record
&lt;/h3&gt;

&lt;p&gt;Fetching a single record in prisma is done using the &lt;code&gt;where&lt;/code&gt; property but in mongoose it has &lt;code&gt;findById&lt;/code&gt; method.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5eb9354624286a04e42401d8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetching-selected-values-for-single-record"&gt;
  &lt;/a&gt;
  Fetching selected values for single record
&lt;/h3&gt;

&lt;p&gt;Fetching selected values for single record is easier than ever in Prisma ORM by using just a single query function to do the select operation whereas in Mongoose after finding the record we need to chain the output with &lt;code&gt;select()&lt;/code&gt;. This increases the time complexity and also slows down the process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5eb9354624286a04e42401d8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetching-relations"&gt;
  &lt;/a&gt;
  Fetching relations
&lt;/h3&gt;

&lt;p&gt;In Prisma, we use the &lt;code&gt;include&lt;/code&gt; property but in Mongoose we would have to use the &lt;code&gt;populate()&lt;/code&gt; method.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userWithPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filtering-with-values"&gt;
  &lt;/a&gt;
  Filtering with values
&lt;/h3&gt;

&lt;p&gt;In Prisma we filter records using the &lt;code&gt;where&lt;/code&gt; property whereas in Mongoose we use the &lt;code&gt;find()&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#relation-filtering"&gt;
  &lt;/a&gt;
  Relation Filtering
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;

&lt;p&gt;Prisma can filter a list based on a criteria that applies not only to the models of the list being retrieved, but to a relation of that model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;some&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;

&lt;p&gt;Mongoose doesn't offer this feature for relation filters. We may achieve similar functionality by adding an additional step to filter the results returned by the query but that would result in increased query times and load for large databases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;

&lt;p&gt;Cursor-style pagination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Offset pagination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;

&lt;p&gt;Mongoose also has similar implementation for pagination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-records"&gt;
  &lt;/a&gt;
  Creating Records
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updating-records"&gt;
  &lt;/a&gt;
  Updating Records
&lt;/h3&gt;

&lt;p&gt;Prisma updates the record directly with the values passed in data property in comparison with mongoose where we need to use &lt;code&gt;$set&lt;/code&gt; operator.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-single-record"&gt;
  &lt;/a&gt;
  Deleting Single Record
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByIdAndDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-multiple-records"&gt;
  &lt;/a&gt;
  Deleting Multiple Records
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#advantages-of-prisma-over-mongoose"&gt;
  &lt;/a&gt;
  Advantages of Prisma over Mongoose
&lt;/h2&gt;

&lt;p&gt;So now that we know the differences in operations between Prisma &amp;amp; Mongoose, let's now focus on the advantages Prisma provides over Mongoose.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prisma allows TypeSafe Database access.&lt;/li&gt;
&lt;li&gt;Prisma has an auto generated query builder&lt;/li&gt;
&lt;li&gt;Support for multiple databases. This is a huge advantage to developers when moving between SQL and NoSQL Databases, since only the Schema file needs to be changed. All other operations/queries remain same.&lt;/li&gt;
&lt;li&gt;Supports multiple RDBMS&lt;/li&gt;
&lt;li&gt;Robust migration capabilities&lt;/li&gt;
&lt;li&gt;Prisma lets you filter a list based on a criteria that applies not only to the models of the list being retrieved, but to a relation of that model. Mongoose doesn't offer a dedicated API for relation filters. You can get similar functionality by adding an additional step to filter the results returned by the query.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.prisma.io/studio"&gt;Prisma Studio&lt;/a&gt; tool that helps to manage data easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-prisma"&gt;
  &lt;/a&gt;
  Disadvantages of Prisma
&lt;/h2&gt;

&lt;p&gt;On the other side, Prisma has a few disadvantages over Mongoose as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for multiple model files not available. All models need to be written in &lt;code&gt;schema.prisma&lt;/code&gt; file which makes the file cluttered and hard to debug and read.&lt;/li&gt;
&lt;li&gt;Prisma MongoDB support is currently in preview&lt;/li&gt;
&lt;li&gt;Currently no embedded collection support.&lt;/li&gt;
&lt;li&gt;Error handling is incomplete.&lt;/li&gt;
&lt;li&gt;The Migrate and Introspection workflows are currently not supported.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@@id&lt;/code&gt; and auto-increment are not currently supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-be-using-prisma-over-mongoose"&gt;
  &lt;/a&gt;
  Should you be using Prisma over Mongoose?
&lt;/h2&gt;

&lt;p&gt;Prisma is a modern ORM which has its own tradeoffs. If you are building a server side application with REST APIs and GraphQL, Prisma would be a great choice. It also makes lives of developers easier. Prisma gives a significant productivity boost for the most common database workflows.&lt;/p&gt;

&lt;p&gt;If these factors don't matter much to you and you want to have more control over database operations then my suggestion will be to go with Mongoose "for the time being".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-to-prisma"&gt;
  &lt;/a&gt;
  Contribute to Prisma
&lt;/h2&gt;

&lt;p&gt;Prisma MongoDB Connector is still in preview and development. If you want to contribute to the Prisma check out their GitHub Repository by clicking &lt;a href="https://github.com/prisma/prisma"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>prisma</category>
      <category>database</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Unix commands works</title>
      <author>Marcell Cruz</author>
      <pubDate>Thu, 29 Jul 2021 16:39:09 +0000</pubDate>
      <link>https://dev.to/____marcell/how-unix-commands-works-4jic</link>
      <guid>https://dev.to/____marcell/how-unix-commands-works-4jic</guid>
      <description>&lt;p&gt;If after using these commands for years you ever wondered how they work, this is a high level exploration of someone who just had the some thoughts some days ago, this is the result of my exploration, I hope you learn something from it and get more interested in OS development in general, first of all, a little bit of history, all theses programs are originally part of the &lt;a href="https://www.gnu.org/home.en.html"&gt;gnu os&lt;/a&gt;, the first atempt to create a free os, they were written in the mid eighties and are older than Linux itself, they were developed for unix than ported to Linux and are &lt;a href="https://en.wikipedia.org/wiki/POSIX"&gt;posix compliant&lt;/a&gt;, &lt;strong&gt;ls&lt;/strong&gt; in particular is part of coreutils, a separate module of the gnu os, you can see coreutils source code &lt;a href="https://github.com/coreutils/coreutils/tree/master/src"&gt;here&lt;/a&gt;, Most of gnu os was developed by Richard Stallman, the original neckbeard&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keLhDWHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uco6haju98ftno3dqwa6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keLhDWHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uco6haju98ftno3dqwa6.jpg" alt="neckbeard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GNU/Coreutils is used by most Linux distribution, and you can even use it on Mac OS and Windows, in Mac Os you can even &lt;a href="https://apple.stackexchange.com/questions/69223/how-to-replace-mac-os-x-utilities-with-gnu-core-utilities"&gt;replace the propietary coreutils&lt;/a&gt;. As you might know, Linux is not a OS, Linux is just a &lt;a href="https://en.wikipedia.org/wiki/Kernel_(operating_system)"&gt;kernel&lt;/a&gt;, you need higher level programs to use your system, that's why people sometimes refer to Linux as GNU/Linux, because it's the kernel with the other utilities necessary to realistically use the system in your day to day activities, otherwise you would have to implement everything yourself. I'm gonna focus on how &lt;strong&gt;ls&lt;/strong&gt; is implemented on top of the kernel, if you wanna know what happens right after you type &lt;strong&gt;ls &lt;/strong&gt; in your terminal you should read &lt;a href="https://gist.github.com/amitsaha/8169242#how-does-ls-do-what-it-does"&gt;this&lt;/a&gt; amazing explanation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-ls-works"&gt;
  &lt;/a&gt;
  How ls works
&lt;/h1&gt;

&lt;p&gt;You can see ls source code &lt;a href="https://github.com/coreutils/coreutils"&gt;here&lt;/a&gt;, &lt;br&gt;
this blog posts focuses on explaining &lt;strong&gt;ls&lt;/strong&gt;, but all other core utilities work in a similar fashion, let's get to it. &lt;/p&gt;

&lt;p&gt;the core functionality of &lt;strong&gt;ls&lt;/strong&gt; are actived using two lower level functions &lt;strong&gt;opendir&lt;/strong&gt; and &lt;strong&gt;readdir&lt;/strong&gt;, &lt;strong&gt;opendir&lt;/strong&gt; &lt;em&gt;opens&lt;/em&gt; a directory, which is really just a file in Linux like &lt;a href="https://en.wikipedia.org/wiki/Everything_is_a_file"&gt;everything else&lt;/a&gt; and &lt;strong&gt;readdir&lt;/strong&gt; reads this file line by line, each line as you might have guessed is the directory contents, plus &lt;strong&gt;.&lt;/strong&gt; and &lt;strong&gt;..&lt;/strong&gt; which is used by the system to reference &lt;strong&gt;this&lt;/strong&gt; directory and &lt;strong&gt;where&lt;/strong&gt; this directory is, if you search for these functions in src/ls.c you would find this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kt"&gt;DIR&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dirp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dirent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;dirp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 2918&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for opendir&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readdir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 2988&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for readdir&lt;/p&gt;

&lt;p&gt;As you might have guessed this while loop is ls's core functionality, it's the part that reads the file entries in the dir and prints them out, or do whatever it needs to do depending on the options that you pass to ls, all other stuff in the source code is error handling, parsing and applying options, ls has a ton a options that accumulated over the years, if we remove all these options we could implement &lt;strong&gt;ls&lt;/strong&gt; with just a few lines of code, so let's do that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;dirent.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;DIR&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dirent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_name&lt;/span&gt;
              &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;closedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if we compile and run our ls version, we get this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHwzaMLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uocrm3ktzhmz6qq22vtp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHwzaMLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uocrm3ktzhmz6qq22vtp.jpg" alt="my_ls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see the output it's pretty similar to gnu ls already, the only difference in this case is that &lt;strong&gt;ls&lt;/strong&gt; is color coding different file types in my system and ls by default don't display &lt;strong&gt;.&lt;/strong&gt; and &lt;strong&gt;..&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ok, now we have a pretty good understanding of how &lt;strong&gt;ls&lt;/strong&gt; is implemented and the main libraries that it uses("stdio.h" and "dirent.h"), but where does these libraries come from? we need to dig deeper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8YOXsAv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bg7vnbak2vc76725fzx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YOXsAv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bg7vnbak2vc76725fzx.jpg" alt="deeper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#glibc-and-system-calls"&gt;
  &lt;/a&gt;
  glibc and system calls
&lt;/h1&gt;

&lt;p&gt;stdio.h and dirent.h and pretty much anyother c library installed in your system lives in /usr/include, stdio and dirent in particular are installed when you install &lt;a href="https://www.gnu.org/software/libc/"&gt;glibc&lt;/a&gt;, yet another gnu project, &lt;strong&gt;printf&lt;/strong&gt; comes from stdio, &lt;strong&gt;opendir&lt;/strong&gt; and &lt;strong&gt;readdir&lt;/strong&gt; comes from dirent, just like &lt;strong&gt;ls&lt;/strong&gt; these functions are abstraction to make it easier to do the things that you want to do in your system, actually everything is a &lt;a href="https://en.wikipedia.org/wiki/Abstraction"&gt;abstraction&lt;/a&gt; all the way down &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gVOKdOHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra3ppoidmuqphm81khut.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gVOKdOHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra3ppoidmuqphm81khut.jpeg" alt="images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ls is a application that uses glibc, glibc itself make some system calls  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6vtxFrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iz4lnahma3s57dz8ggb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6vtxFrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iz4lnahma3s57dz8ggb.png" alt="glibc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see in the graph we don't necessarily &lt;strong&gt;need&lt;/strong&gt; to use glibc to implement &lt;strong&gt;ls&lt;/strong&gt; we could make the system calls ourselves, let's do that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;linux/fs.h&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="n"&gt;u8&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;memset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="n"&gt;mm_segment_t&lt;/span&gt; &lt;span class="n"&gt;old_fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_fs&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="n"&gt;set_fs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERNEL_DS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys_open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/etc/Info"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;sys_read&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printk&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string:% s/n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;sys_close&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="n"&gt;set_fs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_fs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#kernel-level-and-user-level"&gt;
  &lt;/a&gt;
  Kernel level and User level
&lt;/h1&gt;

&lt;p&gt;The ls clone that we wrote is running on user level, all the functions that we used, opendir, readdir and printf are user level functions, a lot of things are restricted at user level, functions at user level call other functions at kernel level, this is what we call a &lt;a href="https://elixir.bootlin.com/linux/latest/source/include/linux/syscalls.h#L1074"&gt;"system call"&lt;/a&gt; so the function opendir for example eventually will call sys_open, which is a system call that it self calls do_sys_open which is a kernel level function, the kernel is actually what comunicates with devices and the cpu&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4izvcyh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Kernel_Layout.svg/1200px-Kernel_Layout.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4izvcyh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Kernel_Layout.svg/1200px-Kernel_Layout.svg.png" alt="kernel_layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The kernel is a program that is always in memory and facilitates the comunication between the hardware and applications, one of these utilities is the functions that we just used, we could go deeper and explore how do_sys_open is implemented at kernel level, but that's propably another post &lt;/p&gt;

&lt;p&gt;As you can see it's a lot harder to understand the sys_call version and you do very little with a lot of code, as you get closer to the kernel you have to deal with internal calls of the system, that's the reason why the kernel exists, it's a abstraction on top of the machine so you don't have to deal with all this low level stuff, you can see in the code that we have to make a lot of different system calls just to read a directory, if you wanna go deeper and learn even more about how linux works I recommend this book &lt;a href="https://www.goodreads.com/book/show/7672214-the-linux-programming-interface"&gt;this book&lt;/a&gt; I'm reading it and it's pretty good&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to stay focused 🔍 as a self taught Frontend Web Developer 💻</title>
      <author>Chris Hansen </author>
      <pubDate>Thu, 29 Jul 2021 16:29:49 +0000</pubDate>
      <link>https://dev.to/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp</link>
      <guid>https://dev.to/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp</guid>
      <description>&lt;p&gt;Staying &lt;strong&gt;focused&lt;/strong&gt; is one of the hardest tasks when perusing a new &lt;strong&gt;hobby&lt;/strong&gt;, &lt;strong&gt;goal&lt;/strong&gt; or &lt;strong&gt;project&lt;/strong&gt;. Trying to break a bad habit? I'm sure you've been there. Trying to get healthy, maybe shed a few pounds, or even add some? That requires 100% focus. A momentary lapse can spell trouble for a solid weeks worth of good choices. How about I throw &lt;strong&gt;Web&lt;/strong&gt; &lt;strong&gt;Development&lt;/strong&gt; into the mix? 😅  One of the fastest moving and dynamic fields in Tech.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hopefully&lt;/em&gt;, with these few tips, I can help you either stay on track, or prevent you from listening to that doubtful little voice in the back of your head telling you to quit. &lt;strong&gt;Everyone&lt;/strong&gt; has experienced these hurdles. &lt;strong&gt;You're not alone&lt;/strong&gt;,  so let's get into it D:&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dont-let-which-framework-is-the-best-take-up-your-time"&gt;
  &lt;/a&gt;
  Don't Let "which framework is the best" Take Up Your Time 🕔
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqwdVlrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ye821j91lcotab30lr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqwdVlrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ye821j91lcotab30lr1.png" alt="Image banner showcasing top web development frameworks battling eachother"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's unfortunate how often I see this question being asked on all platforms of social media. On Twitter, Instagram, Youtube... people love seeking this answer! I'm sure developers much more experience than myself, will agree, you should just focus on the basics ! I remember quite vividly, during my HTML and CSS learning journey, I told myself, "this process could be quicker." That's when I did my first Google search, "How to speed up web development," or something along those lines. It's when I first discovered and learned of &lt;strong&gt;Angular&lt;/strong&gt;, and other frameworks. As I dived into tutorial after tutorial after tutorial,  I wasn't making any traction. Because not only do frameworks expect you to have a solid grasp of the &lt;strong&gt;fundamentals&lt;/strong&gt;, they essentially have their own language too. At the very least, a set of ground rules and specific syntax that you must adhere too. Specific file structures,  design patterns, etc.  All this does is SLOW down your process of getting really good at HTML, CSS, and Javascript, the only languages you need for a &lt;strong&gt;strong foundation&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So, what can you take away from this tip? If you're not asking yourself, "I need to speed up my projects development process," a framework is just not necessary. Don't worry about, &lt;em&gt;React vs Vue vs Angular&lt;/em&gt;. They'll come to you when you need 'em. &lt;/p&gt;

&lt;p&gt;PS + I have seen a trend of great developers dodging frameworks all together, and pride themselves at making beautiful websites with HTML, CSS, and Javascript. And trust me, they perform! 👍&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#escape-tutorial-hell"&gt;
  &lt;/a&gt;
  Escape Tutorial Hell ✌️
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fdjr43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvw2obcbvnmtcl4hgcyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fdjr43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvw2obcbvnmtcl4hgcyu.png" alt="Banner showcasing a bunch of youtube tutorials in big letters "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers getting stuck in &lt;strong&gt;tutorial hell&lt;/strong&gt; is very real and very time consuming. I myself have found myself stuck in a loop of never ending tutorials. But just like you, I had good intentions going into it. I'm gonna learn this, then that, then I'm going to build something great! Right? If you got a big brain and the IQ of Stephen Hawking, then sure, you just might build the &lt;em&gt;next great weather app&lt;/em&gt;. But for us normies, applying what we just learned or "watched" is next to impossible. As we code along with the tutorial, we're not learning and applying. We're mindlessly trying to jot down everything we see on the screen. It's no different than being in an auditorium in college amongst 200 students, just trying to catch every word on the projector before the professor changes pages, yet alone actually listening to what the professor is saying. But, if you can grasp key points in the notes, and immediately after class, skim over important concepts for just 15 minutes, you'll retain much more of what you learned, and can be that much more prepared for your next session. As opposed to not reading your notes immediately after class, majority people will lose about 70% of what they just listened to or wrote down just minutes ago.&lt;/p&gt;

&lt;p&gt;The same applies for web dev tutorials on the web. If you find an interesting project, be sure to &lt;strong&gt;understand the code&lt;/strong&gt; after you have completed the project. Refactor it. Change the UI, colors, the entire theme. Create a clone of the project you just did, but do it from scratch. This is how you can retain the information you were given and actually learn. If you are not already doing this, I promise you will gain some serious traction. And before you know it, you're not only going to build the same project from that tutorial, you're going to build it better. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#take-breaks"&gt;
  &lt;/a&gt;
  Take Breaks 🧘
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIG_1iLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maczl3pt5k6ugtso76uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TIG_1iLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maczl3pt5k6ugtso76uj.png" alt="A banner showcasing an the word relax in big letters and a person walking their dog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The moment you start to slide, you're shoveling against the tide,"  Marty Lobdell at Pierce College, Washington State. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Taking breaks&lt;/strong&gt; while studying in crucial for effective learning and time management. You may not think hitting the pause button is efficient time management, but hear me out. For the average person, even trying to study for any amount of time over 1 hour, is not ideal. &lt;strong&gt;There are studies that prove the most retention in adults is within a sweet spot of 30 minutes&lt;/strong&gt;. So, if you have 3 hours worth of studying, it's worth it for your to take &lt;strong&gt;3 breaks&lt;/strong&gt; in that time. Breaks can be short, and should be. Take &lt;strong&gt;5 minutes&lt;/strong&gt; doing anything that you enjoy. That can be yoga, reading a book, video games, walking the dog, anything that clears your mind and you have fun doing. After your 5 minutes, you'll be next to &lt;strong&gt;maximum efficiency&lt;/strong&gt; during your next 30 minutes of studying. So rather than a non efficient 3 straight hours of studying, you can break the session down into 30 minute increments, which also sounds more approachable and doable, especially if you're continuing this study cycle for a long period of time. So to circle back to time management, I'd say 2 hours and 45 minutes of efficient learning is a better use of time than 3 straight hours of sluggish studying. And of course this can be &lt;strong&gt;directly applied&lt;/strong&gt; to coding as well. Whether you're studying web development concepts, or coding a project, taking breaks is key to enjoying the process and making it a smoother one. &lt;/p&gt;

&lt;p&gt;To get a better understanding of this concept, heres a clip of Marty Lobdell explaining this study technique. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S6BvM6y0ke4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-pomodoro-technique"&gt;
  &lt;/a&gt;
  The Pomodoro Technique 🍅
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LpgRvJtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivcnwz1xs7gs1fjn8xs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LpgRvJtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivcnwz1xs7gs1fjn8xs.png" alt="A banner showcasing the world pomodoro with a tomato and an alarm clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;Pomodoro Technique&lt;/em&gt;&lt;/strong&gt; is global phenomenon and theres a good reason for it. Every illustration of the Pomodoro technique uses Tomatoes 🍅  Just kidding.. but not really. The technique was invented by Francesco Cirillo during his time as a University student in Italy, and Pomodoro is basically tomato in Italian. Now ya know D: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This study method essentially further empowers our previous tip. It maximizes efficient studying or work, by **incorporating breaks&lt;/strong&gt;, but takes it even further. So how does it work?** &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set your goal or task at hand &lt;/li&gt;
&lt;li&gt;Set your timer for 20-25 minutes&lt;/li&gt;
&lt;li&gt;Study or work until your timer goes off &lt;/li&gt;
&lt;li&gt;Take a 5 minute break doing something you enjoy &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Steps 1 - 4 is &lt;strong&gt;one&lt;/strong&gt; Pomodoro. On your &lt;strong&gt;fifth&lt;/strong&gt; Pomodoro, you increase your break to 15-30 minutes. You then repeat this cycle until you are done. The longer hours you work or study, the more efficient you &lt;strong&gt;can&lt;/strong&gt; become. &lt;/p&gt;

&lt;p&gt;This technique has been widely adopted by companies and organizations all across the world. Especially used by software companies for maximizing coding efficiency, especially popular for pair programming. If you haven't already, I say give it a shot. 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pomofocus.io/"&gt;https://pomofocus.io/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#build-the-right-projects"&gt;
  &lt;/a&gt;
  Build The Right Projects 💻
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNo1KrGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yshcmtsfhscrk78n8hdz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNo1KrGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yshcmtsfhscrk78n8hdz.png" alt="A banner showcasing a person desk with thought bubbles on relevant project ideas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you're starting out, there are a lot of projects that tossed in your direction. Especially if you frequent Youtube as a learning resource. &lt;strong&gt;&lt;em&gt;"The top projects for beginners,"&lt;/em&gt;&lt;/strong&gt; or &lt;em&gt;"&lt;/em&gt;&lt;em&gt;The best Projects to get a job.&lt;/em&gt;&lt;em&gt;"&lt;/em&gt; Some of these may have some truth to them. However, it's all about &lt;strong&gt;focus and efficiency&lt;/strong&gt;. Build a project you are interested in. Do you have a hobby other than coding? Maybe it's music, photography, skateboarding..?  If it's music, build a website that allows users to upload tracks or clips of their work. If you enjoy photography, go crazy and build a beautiful, big and &lt;strong&gt;bold&lt;/strong&gt; photo gallery showcasing all your artwork. Take it a step further, and add a database. Or even authentication to allow others to use the site too. Building a project you are interested in, from scratch, is simply enjoyable. Every aspect of it is &lt;strong&gt;yours&lt;/strong&gt;. Even if you are inspired by something done already. You'll learn so much along the way as well. Should I use Bootstrap, Foundation, or SCSS? Should I use this package, or this animation library. You'll dive into documentation, you'll learn about the software at a &lt;strong&gt;deeper level&lt;/strong&gt;, and will learn to grow an appreciation for great documentation. You'll start to favor some technologies over others because you now understand them more. The whole process of building something from scratch that's your idea, sort of turns into &lt;strong&gt;self-discovery&lt;/strong&gt;. You'll learn a ton about yourself. Before you know it, you'll have an entire tech stack in your go to toolbox, and your ability to focus on meaningful projects will catapult you into being a more &lt;strong&gt;confident developer&lt;/strong&gt; and that's just the beginning of what's to come. 🔥 &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 👏
&lt;/h2&gt;

&lt;p&gt;That's it for my top tips on &lt;strong&gt;&lt;em&gt;how to stay focused as a self taught Frontend Web Developer.&lt;/em&gt;&lt;/strong&gt; Wherever you are in your web dev journey, I hope these tips can aide you to stay focused, and ignore the doubts and any hurdles you may face along the way. I'm also along for the ride, and as many hardships as a rich and dynamic field in tech can bring about, Web Development has such a great community, and it's the very reason why I'm attempting my first blog post. I have seen so many helping hands, and I want to be a part of it. I have all the confidence in the world, if you ask a fellow developer for assistance, you shall get it. &lt;/p&gt;

&lt;p&gt;Stay focused, I hear the reward is worth it 🤘&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wanna-say-hi"&gt;
  &lt;/a&gt;
  Wanna say 👋  Hi!?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#find-me-on-twitter"&gt;
  &lt;/a&gt;
  Find me on &lt;a href="https://www.twitter.com/hyggedev"&gt;twitter&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>devjournal</category>
    </item>
  </channel>
</rss>
