<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7+ Developer Tools to Make You Super Productive</title>
      <author>Coder</author>
      <pubDate>Sun, 03 Oct 2021 04:45:40 +0000</pubDate>
      <link>https://dev.to/codezhub/7-developer-tools-to-make-you-super-productive-2ilc</link>
      <guid>https://dev.to/codezhub/7-developer-tools-to-make-you-super-productive-2ilc</guid>
      <description>&lt;p&gt;The best software developers arm themselves with superior knowledge of specific tools that get the job done.&lt;/p&gt;
&lt;p&gt;Pairing with experienced developers leaves you with many tips, tricks, shortcuts, and tools that they have access to and mastered to help them focus on a product’s business logic.&lt;/p&gt;
&lt;p&gt;Today, I’ll show you 15 developer tools that’ll improve your productivity immensely. &lt;/p&gt;

&lt;p&gt;Let’s go! 😊&lt;/p&gt;

&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a#1-cloudinary"&gt;&lt;/a&gt;1. Cloudinary&lt;span&gt; &lt;/span&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;&lt;p&gt;&lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt; is a full-stack media service that stores, transforms, optimizes, and delivers all your media assets with easy-to-use APIs and widgets.&lt;/p&gt;
&lt;p&gt;Cloudinary is an excellent choice if you want to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a feature/app that stores tons of images and videos.&lt;/li&gt;
&lt;li&gt;Build a UI that allows single and multiple uploads. Cloudinary provides a plug-and-play skinnable UI widget, so you &amp;amp; your team don’t need to build any UI.&lt;/li&gt;
&lt;li&gt;Make your app and website load faster. Cloudinary delivers media assets insanely quickly via their global CDN!&lt;/li&gt;
&lt;li&gt;Build a feature/app for video delivery and transformation like Instagram. Cloudinary provides several APIs to help with that.&lt;/li&gt;
&lt;li&gt;Build a backend service that crops, manipulates, transforms, reads text from images, extracts captions from videos using AI, compresses and optimizes media files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cloudinary provides several &lt;a href="https://cloudinary.com/documentation/cloudinary_sdks"&gt;SDKs for different languages and frameworks&lt;/a&gt; to make integration a walk in the park! &lt;/p&gt;

&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a#2-sourcegraph"&gt;&lt;/a&gt;2. Sourcegraph&lt;span&gt; &lt;/span&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;&lt;p&gt;&lt;a href="https://sourcegraph.com/"&gt;Sourcegraph&lt;/a&gt; is a software tool that allows you to search all of your code. It provides precise code intelligence and insights. With Sourcegraph, you search small, medium and enormous codebases like Linux, Kubernetes, Chrome, etc.&lt;/p&gt;
&lt;p&gt;Sourcegraph is an excellent choice if you want to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search all of your public and private code across several repositories.&lt;/li&gt;
&lt;li&gt;Find all occurrences of code across your organization.&lt;/li&gt;
&lt;li&gt;Search for how other developers use specific API and code blocks across more than two million open source repositories on GitHub and Gitlab.&lt;/li&gt;
&lt;li&gt;Refactor codebase easily and in record time.&lt;/li&gt;
&lt;li&gt;Provide precise code intelligence for all of your code.&lt;/li&gt;
&lt;li&gt;Create real-time dashboards to track the progress of migrations, deprecations, or usage of anything that can be found with a Sourcegraph search.&lt;/li&gt;
&lt;li&gt;Automate large-scale code changes. You can find and modify code across several repositories with a single file—no need to make several PRs across several code repositories to make a simple change. Sourcegraph Batch changes can do that for you! &lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a#3-insomnia"&gt;&lt;/a&gt;3. Insomnia&lt;/h2&gt;
&lt;br&gt;&lt;p&gt;&lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt; is a software tool that enables you to test API endpoints quickly.&lt;/p&gt;
&lt;p&gt;Insomnia is an excellent choice if you want to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test Rest, Soap, GraphQL and GRPC API endpoints while building.&lt;/li&gt;
&lt;li&gt;Generate API documentation for your codebase.&lt;/li&gt;
&lt;li&gt;Build API pipelines.&lt;/li&gt;
&lt;li&gt;Design APIs using OpenAPI.&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a#4-netlify"&gt;&lt;/a&gt;4. Netlify&lt;span&gt; &lt;/span&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;&lt;p&gt;&lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; is a service that builds and deploys your front-end code quickly. It provides a very efficient workflow for creating apps with many developers.&lt;/p&gt;
&lt;p&gt;Netlify is an excellent choice if you want to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deploy front-end code to the Internet with ease. Build Jamstack apps. Netlify places a massive bet on Jamstack and provides tools and resources to build and develop Jamstack apps.&lt;/li&gt;
&lt;li&gt;Generate new unique and publicly available URLs on every pull request and commit for other developers and QA folks to test what you’re building on the fly. Serve static assets with fast CDN.&lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a#5-retool"&gt;&lt;/a&gt;5. Retool&lt;/h2&gt;
&lt;br&gt;&lt;p&gt;&lt;a href="https://retool.com/"&gt;Retool&lt;/a&gt; is a software tool that enables you to build internal tools without writing a line of code.&lt;/p&gt;
&lt;p&gt;Retool is an excellent choice if you want to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a dashboard / UI internally to monitor and modify data. With Retool, you can connect to your database or any data source and use their drag-and-drop components to build your internal tools remarkably fast.&lt;/li&gt;
&lt;li&gt;Make non-developers have access to the database without setting up a database environment for them.&lt;/li&gt;
&lt;li&gt;Provide customer support with tools to debug customer problems without building a new set of tools for them. &lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a#6-laravel-forge"&gt;&lt;/a&gt;6. Laravel Forge &lt;/h2&gt;
&lt;br&gt;&lt;p&gt;&lt;a href="https://forge.laravel.com/"&gt;Laravel Forge&lt;/a&gt; is a software service that eliminates the headache of building, managing, fine-tuning, deploying and upgrading servers for PHP applications.&lt;/p&gt;
&lt;p&gt;Laravel Forge is an excellent choice if you want to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be responsible for your servers with minimal or no knowledge of DevOps.&lt;/li&gt;
&lt;li&gt;Deploy and manage Laravel, WordPress, Statamic, PHP, and Database server instances.&lt;/li&gt;
&lt;li&gt;Focus on building applications without the additional headache of managing queue workers and scaling server instances. &lt;/li&gt;
&lt;li&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a#7-aws-amplify"&gt;&lt;/a&gt;7. AWS Amplify&lt;span&gt; &lt;/span&gt;&lt;br&gt;
&lt;/h2&gt;
&lt;br&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/amplify"&gt;AWS Amplify&lt;/a&gt; is a set of tools and services that front-end, web and mobile developers can use together or individually to build scalable full-stack applications powered by AWS.&lt;/p&gt;
&lt;p&gt;AWS Amplify is an excellent choice if you want to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deploy static web apps to the Internet in a few clicks.&lt;/li&gt;
&lt;li&gt;Provide non-developers with an admin UI to manage app content.&lt;/li&gt;
&lt;li&gt;Add authentication to your apps without building/managing/writing auth code from scratch.&lt;/li&gt;
&lt;li&gt;Provide a simple mechanism for managing user-generated content for your app in public, protected or private AWS storage buckets.  &lt;/li&gt;
&lt;/ul&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/&amp;amp;ved=2ahUKEwjSt9PWtq3zAhWtzjgGHfVeDhIQFnoECAQQBQ&amp;amp;usg=AOvVaw1L8LdsK7AZhqLDllCtK7lz"&gt;7 Best Tools For Developers – They Can’t Live Without It&lt;/a&gt; &lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/tips-to-become-a-great-programmer/&amp;amp;ved=2ahUKEwivnObwtq3zAhVGwjgGHVhPBT0QFnoECCkQAQ&amp;amp;usg=AOvVaw2TZoEJ1qtcJHCjk5WDoNUU"&gt;Tips to become a great programmer&lt;/a&gt; &lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/7-amazing-tips-while-redesigning-your-website/&amp;amp;ved=2ahUKEwiR8ub9tq3zAhVKyzgGHSENCccQFnoECAQQBQ&amp;amp;usg=AOvVaw1MCPezHaMcqtc9wW14T5Lx"&gt;7 Amazing Tips While Redesigning Your Website&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;Feel free to drop it in the comment section!&lt;/span&gt;&lt;/span&gt;

</description>
      <category>webdev</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Scott's Journey on Passing AWS DevOps Engineer Professional Certification</title>
      <author>Scott Hsieh 🇹🇼</author>
      <pubDate>Sun, 03 Oct 2021 04:03:54 +0000</pubDate>
      <link>https://dev.to/fantastichsieh/scott-s-journey-on-passing-aws-devops-engineer-professional-certification-2h79</link>
      <guid>https://dev.to/fantastichsieh/scott-s-journey-on-passing-aws-devops-engineer-professional-certification-2h79</guid>
      <description>&lt;p&gt;&lt;a href="https://www.credly.com/badges/77a4fe7a-00dc-4857-929b-d4ba016da532/public_url"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vREWSMOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mppnecq39zqtnh3c1pi.png" alt="AWS DevOpe Engineer Professional"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#content-table"&gt;
  &lt;/a&gt;
  Content Table
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#prologue"&gt;Prologue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#official-exam-guide"&gt;Official Exame Guide &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#tips-for-real-exam"&gt;Tips for Real Exam&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#compute"&gt;Compute&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#networking-amp-content-delivery"&gt;Networking &amp;amp; Content Delivery &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#developer-tools"&gt;Developer Tools&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#storage"&gt;Storage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#log"&gt;Log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#high-availability-fault-tolerance-and-disaster-recover"&gt;High Availability, Fault Tolerance, and Disaster Recover&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#others"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#implementation-suggestions"&gt;Implementation Suggestions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#references"&gt;References&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#prologue"&gt;
  &lt;/a&gt;
  Prologue
&lt;/h1&gt;

&lt;p&gt;After passing the &lt;a href="https://www.credly.com/badges/8fdcfe2c-5f7e-4d08-a420-cd49764b332d/public_url"&gt;AWS DAS&lt;/a&gt; in February this year, I'd been fascinating about how to become a professional lazybones&lt;sup&gt;&lt;a href="#ref3"&gt;[3]&lt;/a&gt;&lt;/sup&gt; in spare time apart from &lt;a href="#ref1"&gt;building custom CDK constructs&lt;/a&gt;, &lt;a href="#ref2"&gt;sharing at the AWS Taiwan UG&lt;/a&gt;, internal sharing in my own company, and recording for an external session. All of sudden, I felt gotta keep moving on towards goals after studying the quintessence of lazybones for a while. So, the journey of pursuing the AWS DevOps Engineer Professional Certification began at that moment.&lt;br&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/mEUmeOiT9MCMo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/mEUmeOiT9MCMo/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#official-exame-guide"&gt;
  &lt;/a&gt;
  Official Exame Guide
&lt;/h1&gt;

&lt;p&gt;Like you will check how many mountain trails you gotta walk through for taking down &lt;a href="#ref4"&gt;the Taipai Grand Trail&lt;/a&gt; and what materials you need to collect so that you could get a &lt;a href="#ref5"&gt;legendary weapon Kudzu&lt;/a&gt; for your ranger in Guild War 2. To get the One Piece of the DOP, you have to evaulaute whether you've had quite some sense what specific enterprise scenarios (cases) are going to show up in this certification and what AWS services you could consider resolving the issues transpired in those cases. From &lt;a href="#ref6"&gt;the website&lt;/a&gt;, you could see:&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Validation on candidates' ability&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Implement and manage continuous delivery systems and methodologies on AWS&lt;/li&gt;
&lt;li&gt;Implement and automate security controls, governance processes, and compliance validation&lt;/li&gt;
&lt;li&gt;Define and deploy monitoring, metrics, and logging systems on AWS&lt;/li&gt;
&lt;li&gt;Implement systems that are highly available, scalable, and self-healing on the AWS platform&lt;/li&gt;
&lt;li&gt;Design, manage, and maintain tools to automate operational processes
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Recommended knowledge and experience&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Experience developing code in at least one high-level programming language; building highly automated infrastructures; and administering operating systems&lt;/li&gt;
&lt;li&gt;Understanding of modern development and operations processes and methodologies&lt;/li&gt;
&lt;li&gt;Ability to implement and manage continuous delivery systems and methodologies on AWS&lt;/li&gt;
&lt;li&gt;Ability to implement and automate security controls, governance processes, and compliance validation&lt;/li&gt;
&lt;li&gt;Ability to define and deploy monitoring, metrics, and logging systems on AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="#ref7"&gt;the exam guide&lt;/a&gt;, we could see the content expounds more detail into 6 fields that this certification is going to test whether you can respond rapidly towards forementioned enterprise scenarios and understand what AWS services can fulfil the requirements in those cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------+----------------------------------------------------------+-----+
| Domain 1 | SDLC Automation                                          | 22% |
+----------+----------------------------------------------------------+-----+
| Domain 2 | Configuration Management and Infrastructure as Code      | 19% |
+----------+----------------------------------------------------------+-----+
| Domain 3 | Monitoring and Logging                                   | 15% |
+----------+----------------------------------------------------------+-----+
| Domain 4 | Policies and Standards Automation                        | 10% |
+----------+----------------------------------------------------------+-----+
| Domain 5 | Incident and Event Response                              | 18% |
+----------+----------------------------------------------------------+-----+
| Domain 6 | High Availability, Fault Tolerance, and Disaster Recover | 16% |
+----------+----------------------------------------------------------+-----+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;SDLC Automation&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply concepts required to automate a CI/CD pipeline&lt;/li&gt;
&lt;li&gt;Determine source control strategies and how to implement them&lt;/li&gt;
&lt;li&gt;Apply concepts required to automate and integrate testing&lt;/li&gt;
&lt;li&gt;Apply concepts required to build and manage artifacts securely&lt;/li&gt;
&lt;li&gt;Determine deployment/delivery strategies (e.g., A/B, Blue/green, Canary, Red/black) and how to
implement them using AWS services&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Configuration Management and Infrastructure as Code&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine deployment services based on deployment needs&lt;/li&gt;
&lt;li&gt;Determine application and infrastructure deployment models based on business needs&lt;/li&gt;
&lt;li&gt;Apply security concepts in the automation of resource provisioning&lt;/li&gt;
&lt;li&gt;Determine how to implement lifecycle hooks on a deployment&lt;/li&gt;
&lt;li&gt;Apply concepts required to manage systems using AWS configuration management tools and
services&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Monitoring and Logging&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine how to set up the aggregation, storage, and analysis of logs and metrics&lt;/li&gt;
&lt;li&gt;Apply concepts required to automate monitoring and event management of an environment&lt;/li&gt;
&lt;li&gt;Apply concepts required to audit, log, and monitor operating systems, infrastructures, and
applications&lt;/li&gt;
&lt;li&gt;Determine how to implement tagging and other metadata strategies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Policies and Standards Automation&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apply concepts required to enforce standards for logging, metrics, monitoring, testing, and security&lt;/li&gt;
&lt;li&gt;Determine how to optimize cost through automation&lt;/li&gt;
&lt;li&gt;Apply concepts required to implement governance strategies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Incident and Event Response&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Troubleshoot issues and determine how to restore operations&lt;/li&gt;
&lt;li&gt;Determine how to automate event management and alerting&lt;/li&gt;
&lt;li&gt;Apply concepts required to implement automated healing&lt;/li&gt;
&lt;li&gt;Apply concepts required to set up event-driven automated actions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;High Availability, Fault Tolerance, and Disaster Recovery&lt;/strong&gt;  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine appropriate use of multi-AZ versus multi-Region architectures&lt;/li&gt;
&lt;li&gt;Determine how to implement high availability, scalability, and fault tolerance&lt;/li&gt;
&lt;li&gt;Determine the right services based on business needs (e.g., RTO/RPO, cost)&lt;/li&gt;
&lt;li&gt;Determine how to design and automate disaster recovery strategies&lt;/li&gt;
&lt;li&gt;Evaluate a deployment for points of failure

&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#tips-for-real-exam"&gt;
  &lt;/a&gt;
  Tips for Real Exam
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#compute"&gt;
  &lt;/a&gt;
  Compute
&lt;/h2&gt;

&lt;p&gt;Such as EC2, Elastic Beanstalk, Lambda, ECS, and Fargate, you need to grasp basic understanding of these services. By saying basic understanding, it doesn’t mean reading over related official documentations is enough, but at least you gotta equipped with operation experience of those services via the Web Console. Of course, if you work hard enough, deploying the services by CloudFormation (CFN will be used in the rest of the article) or the CDK can be beneficial both to smashing DOP and your own DevOps experience.  &lt;/p&gt;

&lt;p&gt;EC2 can be utilized to become an AP or API server; From scratch, you probably will grow your system gradually from a single functionality based on requirements. During the time, you might still log in the EC2 where your system, or function aggregation, resides via ssh with a key pair to manage the code snippets that support your system or service. Aside from ssh, is there a safer way to log in? Have you ever operated EC2 Instance Connect and Session Manager in AWS Systems Manager? To log in an EC2 server via two forementioned methods, do you know what steps you need to go through on authorization and configuration so that a user can log in via the services?&lt;/p&gt;

&lt;p&gt;As time passes, you might realize that during some specific time spans, requesting number to your service, or server, is large and your server cannot handle this copious amount of requesting. Do you know in this moment you could consider using Elastic Load Balancing and EC2 AUto Scaling to tackle this kind of issue? About launch templates (LT) and launch configuration (LC), can you explain the difference between the two and what scenarios they are suitable? Is there any connection between Auto Scaling Groups (ASG), and LT and LC? What are EC2 Auto Scaling lifecycle hooks? What states are included in the lifecycle hooks? What events, or states,  are followed after the scale-out and scale-in events? If traffic in the coming future cannot be predicted or depicted, among multiple scaling strategies of Auto Scaling, what option you can consider? After grasping all of the scaling strategies, what are their proper usage scenarios? What phenomena will make auto scaling start to work? Can I trigger auto scaling based on some condition? What conditions can I select? If auto scaling is at the scale-in state, before compute instances are going to be terminated, you want to snapshot the instances or create the AMIs, do you know in what state of the lifecycle hooks allows you to define the forementioned custom actions? Or what if there are running compute instances in an ASG, and for regulation purpose, the instances need to be attached the 2nd network interface for connecting to an independent subnet managed by other business unit, what you can do in the lifecycle hooks in order to achieve the requirements? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o72Br7-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z45fshm30p4u6y67vi41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o72Br7-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z45fshm30p4u6y67vi41.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Introducing Native Support for Predictive Scaling with Amazon EC2 Auto Scaling&lt;sup&gt;&lt;a href="#ref41"&gt;[41]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In terms of Elastic Load Balancing, can you name all of the load balancers&lt;sup&gt;&lt;a href="#ref9"&gt;[9]&lt;/a&gt;&lt;/sup&gt;? In what aspects there is the difference between Application Load Balancer (ALB) and Network Load Balancer (NLB)? In the OSI model, which kind of OSI level for load balancing do they support respectively? If load balancing is required to be integrated with Lambda, what load balancer should be chose?  &lt;/p&gt;

&lt;p&gt;Do you know what things Elastic Beanstalk as a service can do for you automatically? What are Elastic Beanstalk composed of?   Can environment be categorized? If there are multiple kinds of environments, what specific tasks they are especially good at? What is &lt;code&gt;.ebextensions&lt;/code&gt; for? What can it achieve? Can I modify hardware spec of compute instances via &lt;code&gt;.ebextensions&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KJv63X39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlxlqwdhuarrr3swx11n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJv63X39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlxlqwdhuarrr3swx11n.jpeg" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Model serving in Java with AWS Elastic Beanstalk made easy with Deep Java Library&lt;sup&gt;&lt;a href="#ref28"&gt;[28]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With micro-service architecture becoming more popular and popular, after assimilating related concepts&lt;sup&gt;&lt;a href="#ref18"&gt;[18]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href="#ref27"&gt;[27]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href="#ref43"&gt;[43]&lt;/a&gt;&lt;/sup&gt;, its history&lt;sup&gt;&lt;a href="#ref20"&gt;[20]&lt;/a&gt;&lt;/sup&gt;, and what AWS services can assist you in building micro services&lt;sup&gt;&lt;a href="#ref8"&gt;[8]&lt;/a&gt;&lt;/sup&gt;, you'll enter the world of Lambda, ECS, and Fargate. How many phases are there in terms of AWS Lambda execution environment? What programming languages does it support natively, or directly? If a programming language that isn't supported by AWS is preferred to be executed, what method you could consider to achieve the goal? What are the least permissions for an AWS Lambda function to be executed? If integration with other AWS services via Lambda is required, what needs to be done as wishes? If a web server hosted on an EC2 instance with authentication functionality is intended to be migrated to Lambda as serverless service, what components might be changed compared to the original architecture?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7aP6d_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j8b4daaauf2nwqhi77u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7aP6d_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j8b4daaauf2nwqhi77u.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;How to get notified on specific Lambda function error patterns using CloudWatch&lt;sup&gt;&lt;a href="#ref29"&gt;[29]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ECS is for containers, as a managed service, what components are there in ECS? Like task definition, auto scaling, container agent, etc., you're supposed to distinguish components of ECS. Just follow classic examples on the official documentations for hands-on experience, with explanation in the technical documentations and a fabulous late melt with Hokkaido milk. What is the relationship between ECS and ECR? Do they need each other to work, or they can be combined to work together? Is there any one between the services that can execute other task independently?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IPHh9rV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ustnyvut4ji0adyngyib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IPHh9rV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ustnyvut4ji0adyngyib.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Figure in &lt;a href="https://aws.amazon.com/blogs/apn/how-steamhaus-used-aws-well-architected-to-improve-sperry-rails-artificial-intelligence-system/"&gt;How Steamhaus Used AWS Well-Architected to Improve Sperry Rail’s Artificial Intelligence System&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You still need to manage web servers by deploying your applications or services to ECS, there exists operation cost to some extent. Hence, AWS who captured the customers' need launched AWS Fargate. What differences there are between the ECS container service and AWS Fargate? Why the need of AWS Fargate is getting more and more? When you attempt to figure out carefully, you'll realize what elegant and efficient developing experience is.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aX3LzsIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27ltrqurq8n17h9kl1qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aX3LzsIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27ltrqurq8n17h9kl1qw.png" alt="Alt Text"&gt;&lt;/a&gt; Figure in &lt;a href="https://aws.amazon.com/blogs/gametech/game-server-hosting-on-aws-fargate/"&gt;Game Server Hosting on AWS Fargate&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#networking-amp-content-delivery"&gt;
  &lt;/a&gt;
  Networking &amp;amp; Content Delivery
&lt;/h2&gt;

&lt;p&gt;On the aspect of VPC, you'll also need some understanding, after all, the services mentioned so far are built upon VPC (except Amazon ECS Anywhere, Amazon EKS Anywhere, and AWS Outposts). Like what public subnets, private subnets, route tables, network ACL, and security group (SG) are. What are ENI, CIDR, Internet Gateway, NAT Gateway, and VPC endpoints, etc.? When grasping ENI at the beginning level, you could schedule some time to go deeply about what is the difference among ENI, ENA, and EFA&lt;sup&gt;&lt;a href="#ref36"&gt;[36]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;About Route53, you're suggested to have sense on how many kinds of DNS records there are, such as A, AAAA, CNAME, Alias records, etc. You gotta at least read through the documentation of routing policies. Geolocation and geo-proximity are all connected to geolocation. What is their difference? What can be achieved via DNS failover? What options can be considered for DNS failover? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-tools"&gt;
  &lt;/a&gt;
  Developer Tools
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Deployment Models&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Now we are about to enter into the scope of deployment models. If you look carefully at Point 5 of the SDLC Automation in domain knowledge of the exam guide, you'll see blue/green, canary&lt;sup&gt;&lt;a href="#ref11"&gt;[11]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href="#ref38"&gt;[38]&lt;/a&gt;&lt;/sup&gt;, and red/black deployment models. Regarding the blue/green deployment, I personally thought the 2015 speech given by Andy Mui and Vlad Vlasceanu will be a good start&lt;sup&gt;&lt;a href="#ref32"&gt;32&lt;/a&gt;&lt;/sup&gt;. Its content delivered concise and informative information on what possible combinations there are to run through the blue/green deployment on the aspect of EC2 and ECS. Aside from some super helpful comparison, strategies at data level were also suggested, such as when a blue/gree deployment is about to be progressed, if data schema is also going to be changed, what corresponding methods can be implemented?  &lt;/p&gt;

&lt;p&gt;The red/back deployment and blue/green deployment can be regarded as the same deployment model. You could spend some time figuring out their mindset in back and then focus on the blue/green deployment. After all, in &lt;a href="https://www.cncf.io/wp-content/uploads/2020/08/CNCF-Presentation-Template-K8s-Deployment.pdf"&gt;a presentation file titled &lt;em&gt;Deployment Strategies on Kubernetes&lt;/em&gt;&lt;/a&gt; in the CNCF also equals the blue/green deployment and red/black deployment.&lt;/p&gt;

&lt;p&gt;On the aspect of computing, you could see AWS offers numerous selections. How to progress the blue/green deployment for EC2? How about the blue/green deployment via CFN for ECS&lt;sup&gt;&lt;a href="#ref39"&gt;[39]&lt;/a&gt;&lt;/sup&gt;? How to execute a canary deployment for pure Lambda&lt;sup&gt;&lt;a href="#ref33"&gt;[33]&lt;/a&gt;&lt;/sup&gt;? If there is a serverless service combined with Lambda and Amazon API Gateway, a newer version to be deployed is required while visiting the original API should be allowed, what needs to be configured in procedure?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vuiFH8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvnkb64e956dz61furtm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vuiFH8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvnkb64e956dz61furtm.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Blue/Green Deployments with Amazon Elastic Container Service&lt;sup&gt;&lt;a href="#ref16"&gt;[16]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CloudFormation and AWS Serverless Applicaiton Model&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
You must manipulate CFN, by sorely viewing technical documentation, you might not be able to have quite solid grasp. In CFN, how do you refer to resources in nested stacks? When infrastructure becomes huge, is there any organizing practice that can be followed in terms of stack building? What are &lt;code&gt;cfn-init&lt;/code&gt;, &lt;code&gt;cfn-signal&lt;/code&gt;, &lt;code&gt;cfn-get-metadata&lt;/code&gt;, and &lt;code&gt;cfn-hup&lt;/code&gt; for? What resources support the &lt;code&gt;UpdatePolicy&lt;/code&gt; attribute? With &lt;code&gt;AWS::AutoScaling::AutoScalingGroup&lt;/code&gt;, what other more specific options are provided for managing ASG via CFN? Do you know that custom resources can invoke Lambda functions and AWS APIs? For example, &lt;a href="https://www.linkedin.com/pulse/cloudformation-lambda-backed-custom-resource-d%C3%ADaz-fern%C3%A1ndez/?articleId=6625782528299139073"&gt;making Lambda functions managed by CFN updatable, which are stored in a S3 bucket where versioning is open&lt;/a&gt;, &lt;a href="https://aws.amazon.com/tw/premiumsupport/knowledge-center/cloudformation-s3-notification-lambda/"&gt;configuring event notification to Lambda on an existing S3 bucket&lt;/a&gt; (right now, CDK already supports this scenario), &lt;a href="https://www.wellarchitectedlabs.com/well-architectedtool/300_labs/300_using_wat_with_cloudformation_and_custom_lambda/5_explore_wareview/"&gt;creating and updating AWS well-architected reviews&lt;/a&gt;,  &lt;a href="https://constructs.dev/packages/cdk-comprehend-s3olap/v/0.0.19?lang=typescript"&gt;making the ARN of a Lambda function deployed by &lt;code&gt;AWS::Serverless::Application&lt;/code&gt; visible to the following S3 Object Lambda deployment&lt;/a&gt;, etc. &lt;code&gt;WaitCondition&lt;/code&gt; in CFN can make signals without accessing the Internet&lt;sup&gt;&lt;a href="#ref30"&gt;[30]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FSH5popG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukeo6ruukv5f9rdu2dff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FSH5popG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukeo6ruukv5f9rdu2dff.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Best practices for organizing larger serverless applications&lt;sup&gt;&lt;a href="#ref12"&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CodeCommit, AWS CodeBuild, AWS CodeDeploy, and AWS CodePipeline&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Developers might agree with that git is a popular tool for version control and CodeCommit is a managed service of version control by AWS. To empower developers in a team to execute specific git commands towards a CodeCommit repository, what needs to be set related to permissions? If a Git repository is going to be migrated to CodeCommit, what steps are necessary? If an action in CodePipeline failed, what can be implemented to notify DevOps engineers or related developers? (Not through AWS Chatbot) In a CodePipeline pipeline combined with CodeBuild and CodeDeploy, if the insertion of code testing (function test, unit test, integration test, bra bra) is intended, what you can do to achieve the goal? In a CICD pipeline, what way is feasible to make applications conform to security regulations? How many kinds of events can be listened in CodePipeline? What servcies are used for listening? CodeDeploy can not only assist in deployment for AWS resources but also IDC machines. If we want to deploy to IDC machines via CodeDeploy, what are the prerequisites? How do you build a cross-account CD pipeline? If sensitive information will be accessed in a CICD pipeline, do you know that AWS Systems Manager Parameter Store and AWS Secrets Manager can be adopted pertaining to security concerns? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C3GXVtya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x2htsdazhcuyr2d8udg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C3GXVtya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x2htsdazhcuyr2d8udg.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Figure in &lt;a href="https://aws.amazon.com/tw/blogs/devops/ci-cd-on-amazon-eks-using-aws-codecommit-aws-codepipeline-aws-codebuild-and-fluxcd/"&gt;CI/CD on Amazon EKS using AWS CodeCommit, AWS CodePipeline, AWS CodeBuild, and FluxCD&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;How many storage classes are there in S3? What are the differences among these classes? In what circumstances, you should select Intelligent Tiering? And in what situation One-Zone IA will be more suitable? What configuration you need to deal with so that the storage level of objects will be deleted and transitioned according to some time unit? What is ACL? How many kinds of pre-defined S3 ACLs are there? What is the bucket policy of an S3 bucket for? What is the application possibility on S3 object tags&lt;sup&gt;&lt;a href="#ref14"&gt;[14]&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;

&lt;p&gt;Amazon RDS and AWS DynamoDB as the solutions for RDBS and NoSQL respectively, what criteria you might consider when it comes to selecting storage place for your data? NoSQL doesn't mean that there is no relation among data, also, it is not an invention to replace RDBS. About this topic, I suggest you could refer to the one-hour speech&lt;sup&gt;&lt;a href="#ref21"&gt;21&lt;/a&gt;&lt;/sup&gt; given by Rick Houlihan as AWS NoSQL Principal Technologist, you'll have a wonderful trip there.  &lt;/p&gt;

&lt;p&gt;What is the functionality of Amazon Aurora Global Database? What are Amazon DynamoDB Global Tables for? Either Auora or DynamoDB, how to do the Multi-AZ and Multi-region backups? What are GSI and LSI? Regarding RDS, for improving read or write throughput, you probably will consider utilizing Amazon ElastiCache, either Memcached or Redis. To achieve the same result, do you know there is a thing called DAX&lt;sup&gt;&lt;a href="#ref23"&gt;23&lt;/a&gt;&lt;/sup&gt;? If you still have time, go check RCU and WCU. If data in DynamoDB is intended to archive to S3 based on some time frequency, what services can be integrated to achieve this&lt;sup&gt;&lt;a href="#ref40"&gt;[40]&lt;/a&gt;&lt;/sup&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a3tE-9rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mv9ouira08a8tl1eqf6.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3tE-9rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mv9ouira08a8tl1eqf6.jpeg" alt="Alt Text"&gt;&lt;/a&gt; Figure in &lt;a href="https://aws.amazon.com/tw/blogs/database/how-to-increase-performance-while-reducing-costs-by-using-amazon-dynamodb-accelerator-dax-and-aws-lambda/"&gt;Use Amazon DynamoDB Accelerator (DAX) from AWS Lambda to increase performance while reducing costs&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log"&gt;
  &lt;/a&gt;
  Log
&lt;/h2&gt;

&lt;p&gt;What is the major difference between CloudTrail and CloudWatch? To reach real-time processing on CloudWatch logs, what you can do? Is there any difference between CloudWatch Events and EventBridge? For example, if you want to monitor cross-account launch failure on EC2 instances, what you should do? To record topic, timestamp, resource IP in SES to a log group in CloudWatch, what service can be adopted to achieve the goal? If analyzing log data is intended, is there any functionality in CloudWatch that can help me query? Is there any choice on storage location for logs?  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8acR2ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xsz47tbjealxlqcbb2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8acR2ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xsz47tbjealxlqcbb2b.png" alt="Alt Text"&gt;&lt;/a&gt; Figure in &lt;a href="https://aws.amazon.com/tw/blogs/architecture/bbva-architecture-for-large-scale-macie-implementation/"&gt;BBVA: Architecture for Large-Scale Macie Implementation&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-availability-fault-tolerance-and-disaster-recover"&gt;
  &lt;/a&gt;
  High Availability, Fault Tolerance, and Disaster Recover
&lt;/h2&gt;

&lt;p&gt;With proper understanding on compute, networking, and storage services, you'll start to digest the concepts of high availability, failover, and disaster recovery (DR). About this field, I recommend &lt;em&gt;Reliability Pillar&lt;/em&gt; in the AWS Well-Architected series. It is a book which organizes the concepts pretty much well. At least you need to know how many levels are defined in terms of disaster recovery. What is the definitions of RTO and RPO? In the real world, the people you're discussing with might not understand what the backup &amp;amp; restore is or what the pilot light is. Yet, by talking with time unit, you still can roughly get what level the disaster recovery being discussed belongs to. &lt;/p&gt;

&lt;p&gt;About exam questions related to this field (DR), you will be in hell if you don't have solid grasp of the forementioned AWS services. You not only learn these services' functionalities, you gotta compare responding time on the aspects of backup and relaunch also. By going through this way, you'll be able to resonate in the content in &lt;em&gt;Reliability Pillar&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Take a brief example, There is a company which has infrastructure in three continents. The base is Europe, and Asia and the United States are extended areas. There are analysts in the three continents. They analyze log data via a web application. The data is stored in DynamoDB of Europe and ECS on Fargate with ALB and auto scaling serves their web application. Now, the analyst in Asia and the United States are complaining about slow response time and the speed of specific analysis is starting killing them. How can you modify the infrastructure architecture and then send the anaysts a sincere Bon-Jovi-have-a-nice-day smile?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tL--pp8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qr3wixzm2ff9d3fvkdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tL--pp8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qr3wixzm2ff9d3fvkdl.png" alt="Alt Text"&gt;&lt;/a&gt; Figure in &lt;a href="https://aws.amazon.com/tw/blogs/architecture/implementing-multi-region-disaster-recovery-using-event-driven-architecture/"&gt;Implementing Multi-Region Disaster Recovery Using Event-Driven Architecture&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h2&gt;

&lt;p&gt;I suggest you also need some understanding on Amazon ES and AWS Storage Gateway, i.e., what are their functionalities? How the architectures look like? You have to grasp thoses to some extent. AWS OpsWorks can be used to manage instance configuration. What two automation services is it based on? What is the difference among AWS OpsWorks Stacks, AWS OpsWorks for Chef Automate, and AWS OpsWorks for Puppet Enterprise? AWS OpsWorks and AWS Systems Automation can both be taken to execute automation tasks. What is the difference? Amazon Inspector can be helpful on security. What is its difference to Amazon GuardDuty? Except vulnerability assessment on AWS resources according to assessment rules, is there anything else that AWS Inspector can do&lt;sup&gt;&lt;a href="#ref19"&gt;[19]&lt;/a&gt;&lt;/sup&gt;? What does AWS Trusted Advisor do? What is its difference to AWS Config? Apart from that AWS Config rules can work in a single account, if the enablement of AWS Config rules across multiple accounts is required, what needs to be done? If specific actions are intended to be executed automatically after targets are discovered by AWS Config rules, what can be adopted to reach this kind of automation? What is Tag Editor for? What we can do via AWS RAM?  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gW0vyZ4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wyvr2dvkcvtoq4pvk13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gW0vyZ4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wyvr2dvkcvtoq4pvk13.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;Improve monitoring of AWS Systems Manager Agent&lt;sup&gt;&lt;a href="#ref26"&gt;[26]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDG-OqYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f996wd1e9nosx7f5hiwd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDG-OqYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f996wd1e9nosx7f5hiwd.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;em&gt;How to visualize multi-account Amazon Inspector findings with Amazon Elasticsearch Service&lt;sup&gt;&lt;a href="#ref37"&gt;[37]&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#implementation-suggestions"&gt;
  &lt;/a&gt;
  Implementation Suggestions
&lt;/h1&gt;

&lt;p&gt;If possible, please get hands-on experience on all the AWS services mentioned above at least via the Web Console. Either they are simple examples (some of them I won't say it's easy, I prefer to take the term of classic to describe) organized by the documentations of AWS services or films on Youtube that were published by passionate developers, all of them are options that you can run through. Like ECS, a beginner example or an auto-scaling example both can be found on the Internet. Furthermore, if time permits, attempt to craft some application examples via CFN or CDK. From the AWS official documentations to &lt;a href="https://github.com/aws-samples"&gt;AWS Samples&lt;/a&gt; to AWS blogs, they all provide CFN templates that you could deploy quickly. Just make your hands dirty, with description on the technical documentations, the ride can reach the final for sure. Lastly, if you still can squeeze somte time by accident, go manipulate CDK to build some applications based on miscellaneous scenarios with any one of the services mentioned above. Following the suggestions, I believe on the road of pursuing DOP, you'll feel safe.  &lt;/p&gt;

&lt;p&gt;As of me, looking to the past, I had experience on the CICD in the IDC and the CICDs with pure AWS solutions. I implemented the latter one with CFN and CDK. I also once built the construct of &lt;a href="https://constructs.dev/packages/cdk-databrew-cicd/v/0.1.36?lang=typescript"&gt;CICD combining AWS Glue DataBrew&lt;/a&gt;. About the compute services, once built them via CFN and CDK also. A project where the front-end and back-end are split. A project with pure back-end. A project for &lt;a href="https://github.com/pahud/cdk-cloudfront-plus"&gt;CloudFront extensions&lt;/a&gt;. For example, like DNS record type that points to an ALB, the application and renewal of ACM certifications, etc. When reading new articles in the AWS blogs, I'll try as much as possible to manipulate their mindset via CFN, if there exist, and then ponder possible variation based on them. It's not that as easy as you might feel when reading through this article, yet it's very similar to leveling up in an online game. From lvl 80 to lvl 81, you just need 36,065,092 exactly that much. It's inescapable.&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In the DOP exam, it's included numerous condensed real scenarios (brief and comprehensive) to test whether you can act properly by given limitations or conditions and tackle the issues. Via grasping the essence of the AWS services and figuring out the solutions built by other developers, you'll be eventually capable of resolving problems swiftly when facing various and diverse of them.  &lt;/p&gt;

&lt;p&gt;About the DOP exam, normally, latest features won't come to you. In computing, such as Lambda container, Amazon ECS Anywhere, Amazon EKS Anywhere, Instance Refresh of EC2 Auto Scaling. In networking, like Amazon Route 53 Resolver DNS Firewall&lt;sup&gt;&lt;a href="#ref25"&gt;[25]&lt;/a&gt;&lt;/sup&gt;; Or like CFN modules&lt;sup&gt;&lt;a href="#ref17"&gt;[17]&lt;/a&gt;&lt;/sup&gt; and CFN registry. DOP usually tests your horizontal level and some will be deep (detail); about the k8s knowledge, you might consider the CKA, CKAD, and CKS created by the CNCF.&lt;/p&gt;

&lt;p&gt;Concerning the SDLC automation, its implementation might differ&lt;sup&gt;&lt;a href="#ref42"&gt;[42]&lt;/a&gt;&lt;/sup&gt; because of industries, enterprise culture, and so on. What DOP tests you mostly focuses on horizontal level and the AWS services. Like unit test, integration test, and static analysis, you won't see in this exam. Regarding their detail, readers can consider joining the &lt;a href="https://www.facebook.com/groups/817976138289434"&gt;DevOps Taiwan&lt;/a&gt; group on Facebook. In addition to annual party, merely watching conversations among DevOps experts may already give you lessons learned. (Of course, not only the forementioned tests will be discussed, trust me, you have a bumper harvest by participating). &lt;/p&gt;

&lt;p&gt;In the end, wanna share I took the exam on the Pearson VUE platform. There will be a proctor who watches you during the exam (shy shy &amp;gt;////&amp;lt;). The available languages are English and Japanese. I chose the English exam and an English proctor, strongly suggest you should bring your personal laptop. Actually, in the guidance of the online exam, it is also suggested that it's better to bring your own laptop. I didn't capture the information and took the company laptop to welcome the exam. And what happened is the anti-virus software in the company laptop didn't give the green light to the VUE online program for exams.&lt;/p&gt;

&lt;p&gt;It took me around one hour to negotiate with the proctor to wait for my colleague (the unit who manages the anti-virus software) coming to take a look but to no avail, the proctor cancelled the exam, and rushed back to my living place to take my personal laptop. The most impressive thing is I purchased the exam at 10:26 AM and chose one which starts at 10:30 AM. (Different proctor in the first exam and second exam). I spent around 2 hours going through 75 questions and checked those which were tagged by me previously in the rest of time. In the last 3 minutes, nothing I could do anymore and submitted my exam. Eventually, I got the ONE PIECE of DOP.&lt;/p&gt;

&lt;p&gt;If anyone who is thinking about taking the exam intends to choose the online way, PLEASE use your personal laptop. Trust me, you'll thank me. If you prefer testing centers, you probably need to evaluate the COVID-19 pandemic situation. By this channel, you also lose the flexibility of going through the exam 4 minutes later right after purchasing. However, you might benefit from the availability of physical little white board. If you'd learned something on taking the DOP exam from this sharing, this article would fulfill its mission. Good luck, fellows!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Day 2 is stasis. Followed by irrelevance. Followed by excruciating, painful decline. Followed by death. And that is why it is always Day 1. — Jeff Bezos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Contruct Hub, &lt;a href="https://constructs.dev/search?q=scott.hsieh&amp;amp;offset=0"&gt;https://constructs.dev/search?q=scott.hsieh&amp;amp;offset=0&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;AWS User Group Taiwan Online Meetup 2021-07, &lt;a href="https://youtu.be/HG8mQ32m970"&gt;https://youtu.be/HG8mQ32m970&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Genshin and the Revelation Online, along with watching bunches of K-dramas and western TV shows with Patrice. The last drama is Vocie 4.
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Taipei Grand Trail, &lt;a href="https://gisweb.taipei.gov.tw/release/"&gt;https://gisweb.taipei.gov.tw/release/&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Kudzu, &lt;a href="https://wiki.guildwars2.com/wiki/Kudzu"&gt;https://wiki.guildwars2.com/wiki/Kudzu&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;AWS Certified DevOps Engineer — Professional, &lt;a href="https://aws.amazon.com/certification/certified-devops-engineer-professional/?nc1=h_ls"&gt;https://aws.amazon.com/tw/certification/certified-devops-engineer-professional/&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;DOP exame guide, &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-devops-pro/AWS-Certified-DevOps-Engineer-Professional_Exam-Guide.pdf"&gt;https://d1.awsstatic.com/training-and-certification/docs-devops-pro/AWS-Certified-DevOps-Engineer-Professional_Exam-Guide.pdf&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Amazon Web Services, Inc. or its affiliates., 2017. &lt;em&gt;Running Containerized Microservices on AWS&lt;/em&gt;. [ebook] Available at: &lt;a href="https://d1.awsstatic.com/whitepapers/DevOps/running-containerized-microservices-on-aws.pdf"&gt;https://d1.awsstatic.com/whitepapers/DevOps/running-containerized-microservices-on-aws.pdf&lt;/a&gt; [Accessed 25 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Amazon Web Services, Inc. or its affiliates., 2021. &lt;em&gt;Elastic Load Balancing features&lt;/em&gt;. [online] Amazon Web Services, Inc. Available at: &lt;a href="https://aws.amazon.com/elasticloadbalancing/features/"&gt;https://aws.amazon.com/elasticloadbalancing/features/&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Amazon Web Services, Inc. or its affiliates, 2021. &lt;em&gt;Error retries and exponential backoff in AWS&lt;/em&gt;. [online] Docs.aws.amazon.com. Available at: &lt;a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html"&gt;https://docs.aws.amazon.com/general/latest/gr/api-retries.html&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Ball, D. and Fallahi, K., 2020. &lt;em&gt;AWS CodeDeploy now supports linear and canary deployments for Amazon ECS&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/containers/aws-codedeploy-now-supports-linear-and-canary-deployments-for-amazon-ecs/"&gt;https://aws.amazon.com/tw/blogs/containers/aws-codedeploy-now-supports-linear-and-canary-deployments-for-amazon-ecs/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Beswick, J., 2020. &lt;em&gt;Best practices for organizing larger serverless applications&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/compute/best-practices-for-organizing-larger-serverless-applications/"&gt;https://aws.amazon.com/tw/blogs/compute/best-practices-for-organizing-larger-serverless-applications/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Bingöl, S., 2020. &lt;em&gt;Exam Readiness : AWS DevOps Engineer Professional (DOP-C01)&lt;/em&gt;. [online] Medium. Available at: &lt;a href="https://medium.com/aws-certified-user-group-turkey/exam-readiness-aws-devops-engineer-professional-dop-c01-975e22b3f98a"&gt;https://medium.com/aws-certified-user-group-turkey/exam-readiness-aws-devops-engineer-professional-dop-c01-975e22b3f98a&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Bhattacharya, S., Benjamin, G. and Natarajan, V., 2021. &lt;em&gt;Simplify your data lifecycle by using object tags with Amazon S3 Lifecycle&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/storage/simplify-your-data-lifecycle-by-using-object-tags-with-amazon-s3-lifecycle/"&gt;https://aws.amazon.com/blogs/storage/simplify-your-data-lifecycle-by-using-object-tags-with-amazon-s3-lifecycle/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Chapman, C., 2020. &lt;em&gt;Creating a secure DevOps pipeline for AWS Service Catalog&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/creating-a-secure-devops-pipeline-for-aws-service-catalog/"&gt;https://aws.amazon.com/blogs/mt/creating-a-secure-devops-pipeline-for-aws-service-catalog/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Cowan, J., Sharma, A. and Dalbhanjan, P., 2017. &lt;em&gt;Blue/Green Deployments with Amazon Elastic Container Service&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/compute/bluegreen-deployments-with-amazon-ecs/"&gt;https://aws.amazon.com/tw/blogs/compute/bluegreen-deployments-with-amazon-ecs/&lt;/a&gt; [Accessed 18 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;DeJong, K., 2020. &lt;em&gt;Introducing AWS CloudFormation modules&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/introducing-aws-cloudformation-modules/"&gt;https://aws.amazon.com/blogs/mt/introducing-aws-cloudformation-modules/&lt;/a&gt; [Accessed 28 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Docker Inc., 2021. &lt;em&gt;Configure logging drivers&lt;/em&gt;. [online] Docker Documentation. Available at: &lt;a href="https://docs.docker.com/config/containers/logging/configure/"&gt;https://docs.docker.com/config/containers/logging/configure/&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Dodge, C. and Quigg, S., 2018. &lt;em&gt;A simpler way to assess the network exposure of EC2 instances: AWS releases new network reachability assessments in Amazon Inspector&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/security/amazon-inspector-assess-network-exposure-ec2-instances-aws-network-reachability-assessments/"&gt;https://aws.amazon.com/blogs/security/amazon-inspector-assess-network-exposure-ec2-instances-aws-network-reachability-assessments/&lt;/a&gt; [Accessed 1 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Hochstein, L., Prytoegrian, Siqueira, D., Basgall, S., Smith, S., Harvey, A. and Berry, C., 2016. &lt;em&gt;Netflix/chaosmonkey: Chaos Monkey is a resiliency tool that helps applications tolerate random instance failures&lt;/em&gt;. [online] GitHub. Available at: &lt;a href="https://github.com/netflix/chaosmonkey"&gt;https://github.com/netflix/chaosmonkey&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Houlihan, R., 2018. &lt;em&gt;Amazon DynamoDB Deep Dive: Advanced Design Patterns for DynamoDB (DAT401)&lt;/em&gt;. [video] Available at: &lt;a href="https://youtu.be/HaEPXoXVf2k"&gt;https://youtu.be/HaEPXoXVf2k&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Jayendra’s Cloud Certification Blog. 2021. &lt;em&gt;AWS Certified DevOps Engineer — Professional (DOP-C01) Exam Learning Path&lt;/em&gt;. [online] Available at: &lt;a href="https://jayendrapatil.com/aws-certified-devops-engineer-professional-exam-learning-path/"&gt;https://jayendrapatil.com/aws-certified-devops-engineer-professional-exam-learning-path/&lt;/a&gt; [Accessed 24 May 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Idziorek, J., 2017. &lt;em&gt;Amazon DynamoDB Accelerator (DAX): A Read-Through/Write-Through Cache for DynamoDB&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/database/amazon-dynamodb-accelerator-dax-a-read-throughwrite-through-cache-for-dynamodb/"&gt;https://aws.amazon.com/blogs/database/amazon-dynamodb-accelerator-dax-a-read-throughwrite-through-cache-for-dynamodb/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Intellipaat, 2019. &lt;em&gt;Puppet Tutorial for Beginners | Puppet Tutorial | Intellipaat&lt;/em&gt;. [video] Available at: &lt;a href="https://www.youtube.com/watch?v=kHD4KQKKP5Y"&gt;https://www.youtube.com/watch?v=kHD4KQKKP5Y&lt;/a&gt; [Accessed 3 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Ismail, M. and Bentzen, M., 2021. &lt;em&gt;Secure your Amazon VPC DNS resolution with Amazon Route 53 Resolver DNS Firewall&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/networking-and-content-delivery/secure-your-amazon-vpc-dns-resolution-with-amazon-route-53-resolver-dns-firewall/"&gt;https://aws.amazon.com/blogs/networking-and-content-delivery/secure-your-amazon-vpc-dns-resolution-with-amazon-route-53-resolver-dns-firewall/&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Lempka, R., 2021. &lt;em&gt;Improve monitoring of AWS Systems Manager Agent&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/improve-monitoring-of-aws-systems-manager-agent/"&gt;https://aws.amazon.com/blogs/mt/improve-monitoring-of-aws-systems-manager-agent/&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Lewis, J. and Fowler, M., 2014. &lt;em&gt;Microservices&lt;/em&gt;. [online] martinfowler.com. Available at: &lt;a href="https://martinfowler.com/articles/microservices.html"&gt;https://martinfowler.com/articles/microservices.html&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Liu, F., 2021. &lt;em&gt;Model serving in Java with AWS Elastic Beanstalk made easy with Deep Java Library&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/machine-learning/model-serving-in-java-with-aws-elastic-beanstalk-made-easy-with-deep-java-library/"&gt;https://aws.amazon.com/tw/blogs/machine-learning/model-serving-in-java-with-aws-elastic-beanstalk-made-easy-with-deep-java-library/&lt;/a&gt; [Accessed 2 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Malhotra, S. and Mathur, R., 2020. &lt;em&gt;How to get notified on specific Lambda function error patterns using CloudWatch&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/get-notified-specific-lambda-function-error-patterns-using-cloudwatch/"&gt;https://aws.amazon.com/blogs/mt/get-notified-specific-lambda-function-error-patterns-using-cloudwatch/&lt;/a&gt; [Accessed 9 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Meyer, C., 2018. &lt;em&gt;Signaling AWS CloudFormation WaitConditions using AWS PrivateLink&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/mt/signaling-aws-cloudformation-waitconditions-using-aws-privatelink/"&gt;https://aws.amazon.com/blogs/mt/signaling-aws-cloudformation-waitconditions-using-aws-privatelink/&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Miguelez, B. and Chapman, C., 2020. &lt;em&gt;Standardizing CI/CD pipelines for .NET web applications with AWS Service Catalog&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/devops/standardizing-cicd-pipelines-net-web-applications-aws-service-catalog/"&gt;https://aws.amazon.com/tw/blogs/devops/standardizing-cicd-pipelines-net-web-applications-aws-service-catalog/&lt;/a&gt; [Accessed 3 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Mui, A. and Vlasceanu, V., 2015. (DVO401) &lt;em&gt;Deep Dive into Blue/Green Deployments on AWS&lt;/em&gt;. [video] Available at: &lt;a href="https://youtu.be/aX54mhZbN58"&gt;https://youtu.be/aX54mhZbN58&lt;/a&gt; [Accessed 17 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Munns, C., 2017. &lt;em&gt;Implementing Canary Deployments of AWS Lambda Functions with Alias Traffic Shifting&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/compute/implementing-canary-deployments-of-aws-lambda-functions-with-alias-traffic-shifting/"&gt;https://aws.amazon.com/tw/blogs/compute/implementing-canary-deployments-of-aws-lambda-functions-with-alias-traffic-shifting/&lt;/a&gt; [Accessed 5 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Peven, B., 2020. &lt;em&gt;Introducing Instance Refresh for EC2 Auto Scaling&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/compute/introducing-instance-refresh-for-ec2-auto-scaling/"&gt;https://aws.amazon.com/blogs/compute/introducing-instance-refresh-for-ec2-auto-scaling/&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Rakesh Singh, 2021. &lt;em&gt;Blue/Green deployment with AWS Developer tools on Amazon EC2 using Amazon EFS to host application source code&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/devops/blue-green-deployment-with-aws-developer-tools-on-amazon-ec2-using-amazon-efs-to-host-application-source-code/"&gt;https://aws.amazon.com/blogs/devops/blue-green-deployment-with-aws-developer-tools-on-amazon-ec2-using-amazon-efs-to-host-application-source-code/&lt;/a&gt; [Accessed 7 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Rathore, A., 2020. &lt;em&gt;AWS Networking — ENI, ENA &amp;amp; EFA&lt;/em&gt;. [online] Medium. Available at: &lt;a href="https://medium.com/nerd-for-tech/aws-networking-eni-ena-efa-2db316fdbf85"&gt;https://medium.com/nerd-for-tech/aws-networking-eni-ena-efa-2db316fdbf85&lt;/a&gt; [Accessed 6 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Saha, M., 2020. &lt;em&gt;How to visualize multi-account Amazon Inspector findings with Amazon Elasticsearch Service&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/security/how-to-visualize-multi-account-amazon-inspector-findings-with-amazon-elasticsearch-service/"&gt;https://aws.amazon.com/blogs/security/how-to-visualize-multi-account-amazon-inspector-findings-with-amazon-elasticsearch-service/&lt;/a&gt; [Accessed 1 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Sato, D., 2014. &lt;em&gt;bliki: CanaryRelease&lt;/em&gt;. [online] martinfowler.com. Available at: &lt;a href="https://martinfowler.com/bliki/CanaryRelease.html"&gt;https://martinfowler.com/bliki/CanaryRelease.html&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Sharma, A., Cowan, J., Sosiak, Y., Dalbhanjan, P. and Siri, J., 2017. &lt;em&gt;Reference architecture for doing blue green deployments on ECS&lt;/em&gt;. [online] GitHub. Available at: &lt;a href="https://github.com/aws-samples/ecs-blue-green-deployment"&gt;https://github.com/aws-samples/ecs-blue-green-deployment&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Wagner, A., 2017. &lt;em&gt;Automatically Archive Items to S3 Using DynamoDB Time to Live (TTL) with AWS Lambda and Amazon Kinesis Firehose&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/tw/blogs/database/automatically-archive-items-to-s3-using-dynamodb-time-to-live-with-aws-lambda-and-amazon-kinesis-firehose/"&gt;https://aws.amazon.com/tw/blogs/database/automatically-archive-items-to-s3-using-dynamodb-time-to-live-with-aws-lambda-and-amazon-kinesis-firehose/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;White, E., Horsfield, S. and Sethi, A., 2021. &lt;em&gt;Introducing Native Support for Predictive Scaling with Amazon EC2 Auto Scaling&lt;/em&gt;. [online] Amazon Web Services. Available at: &lt;a href="https://aws.amazon.com/blogs/compute/introducing-native-support-for-predictive-scaling-with-amazon-ec2-auto-scaling/"&gt;https://aws.amazon.com/blogs/compute/introducing-native-support-for-predictive-scaling-with-amazon-ec2-auto-scaling/&lt;/a&gt; [Accessed 8 August 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Wikipedia, 2021. &lt;em&gt;Conway’s law&lt;/em&gt;. [online] En.wikipedia.org. Available at: &lt;a href="https://en.wikipedia.org/wiki/Conway's_law"&gt;https://en.wikipedia.org/wiki/Conway's_law&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;li&gt;
&lt;a&gt;&lt;/a&gt;Wiggins, A., 2017. &lt;em&gt;The Twelve-Factor App&lt;/em&gt;. [online] 12factor.net. Available at: &lt;a href="https://12factor.net/"&gt;https://12factor.net/&lt;/a&gt; [Accessed 31 July 2021].&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>career</category>
      <category>certifications</category>
    </item>
    <item>
      <title>Very Beginner Level Version Controlling With Git</title>
      <author>5hfT</author>
      <pubDate>Sun, 03 Oct 2021 03:12:59 +0000</pubDate>
      <link>https://dev.to/mh_shifat/very-beginner-level-version-controlling-with-git-27pj</link>
      <guid>https://dev.to/mh_shifat/very-beginner-level-version-controlling-with-git-27pj</guid>
      <description>&lt;h3&gt;
  &lt;a href="#basic-commands"&gt;
  &lt;/a&gt;
  Basic commands
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;init repository : &lt;code&gt;git init&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;add a file : &lt;code&gt;git add filename&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;add all files : &lt;code&gt;git add .&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;commit : &lt;code&gt;git commit -m "commit message"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;check status which files you have added/deleted/modified : &lt;code&gt;git status&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;push code : &lt;code&gt;git push origin branch_name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#full-examples"&gt;
  &lt;/a&gt;
  Full Examples
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#create-a-new-repository"&gt;
  &lt;/a&gt;
  Create a new repository
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create a repository : Create an empty repository in &lt;a href="https://github.com/"&gt;github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then open git bash/terminal in your local pc&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;init project : &lt;code&gt;git init&lt;/code&gt; (initializing our repository)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, let's add something into our repo. Let's add a file named README.md. You can create a file using your GUI(Graphical User Interface). In FileManager, right click on mouse and file or folder creation options will be popped up. Or you can use your shell/bash terminal to create the file.&lt;/p&gt;

&lt;p&gt;As i'm a linux user and taking flex in front of you, I will create the file using my oh-my-zsh(a bash terminal).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a file in bash : &lt;code&gt;touch README.md&lt;/code&gt; (this will create a empty file named README.md in the directory you are in now, you can check current directory using &lt;code&gt;pwd&lt;/code&gt; in terminal). You can add some content in it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we have created a file and we want to add it into our repository. It does exist in our local pc not in github server yet[check if you don't believe me :)].&lt;br&gt;
To upload it we need to follow some stuffs -&amp;gt; ['add','commit','push'].Let's do it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the file in git : &lt;code&gt;git add README.md&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are curious enough and lazy :D then you must be thinking of 'adding 100 files/folder will fuck our hand and mind!'. Actually we can add all files or files with same extension or file starting or ending with same substring and so on!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add all files in the current dir : &lt;code&gt;git add .&lt;/code&gt; (a dot can save your life :3)&lt;/li&gt;
&lt;li&gt;Commit changes : &lt;code&gt;git commit -m "short but meaningful commit message" -m "description can be added but its optional"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to my previous statement, we need to push the commit but there is a small thing we need to do as we want to connect our local repo with e github server repository we have created at first. So we need to make a link/connection for the first time. Before that we will change/move/rename the branch name. If your are in a terminal you may be notice that the default branch is master now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GDw61wLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wvnk86lbls0omskr4ke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GDw61wLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wvnk86lbls0omskr4ke.png" alt="bash-master"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot you can see some colorful text.Forgot about the first text &lt;code&gt;(base)&lt;/code&gt; its a different stuff to describe (not related to git). After (base) next things are &lt;code&gt;username@pc_name&amp;gt;working_directory&amp;gt;git_branch_name&lt;/code&gt; accordingly.&lt;br&gt;
We here my branch name is &lt;code&gt;master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will change the default branch name to &lt;code&gt;main&lt;/code&gt; according to github's preference.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rename branch : &lt;code&gt;git branch -M main&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me describe what we have done here. We just have changed the branch name from master to main. We could have used &lt;code&gt;git branch -m main&lt;/code&gt; but there is a little differences between &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;-M&lt;/code&gt;. Actually &lt;code&gt;-m&lt;/code&gt; define the changing but there can be a scenario where the branch name &lt;code&gt;main&lt;/code&gt; already exist where we had to force git to change branch name. &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--force&lt;/code&gt; is used to do something forcefully. &lt;code&gt;-M&lt;/code&gt; is actually a short form of &lt;code&gt;-m -f&lt;/code&gt; here. We will learn a lot about branch command later.&lt;/p&gt;

&lt;p&gt;Now we need to link our local repo with github server somehow !&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git remote add origin https://github.com/your_username/github_repository_name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;by this command we are creating a origin / we are adding a location of our remote repository where we will push our file or pull files from.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;push code to github : &lt;code&gt;git push origin main&lt;/code&gt; (as our branch name is main)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#working-on-a-repository"&gt;
  &lt;/a&gt;
  Working on a repository
&lt;/h4&gt;

&lt;p&gt;Scenario is we have a repository and we want to contribute in that open source project.&lt;/p&gt;

&lt;p&gt;Link of the repository : &lt;a href="https://github.com/jspw/git-101"&gt;git-101&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all we need to clone the repository : &lt;code&gt;git clone https://github.com/jspw/git-101.git&lt;/code&gt; (this will create a folder named git-101 and copy the repository)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we wish to copy the repo into a folder as our wish, then we can just add the folder name at the end of the command like this &lt;code&gt;git clone repo_url dir_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we have cloned the repo and we can add changes as our wish (not exactly your wish though :3).&lt;/p&gt;

&lt;p&gt;Lets assume we have added a file named contributor.md and other files as well. Now we need to add the files or directories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add all files : &lt;code&gt;git add .&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;commit changes : &lt;code&gt;git commit -m 'add contributor file'&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;push code : &lt;code&gt;git push origin main&lt;/code&gt; (this is a very beginner level tutorial, actually we never push code into main directly, we will lean this things later)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; I will write intermediate level git commands and uses later. &lt;br&gt;
Follow &lt;a href="https://github.com/jspw/git-101"&gt;git-101&lt;/a&gt; to get update.&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A "Brief" History of the Web Part 3</title>
      <author>Nicholas Mendez</author>
      <pubDate>Sun, 03 Oct 2021 01:53:38 +0000</pubDate>
      <link>https://dev.to/snickdx/a-brief-history-of-the-web-part-3-3k3d</link>
      <guid>https://dev.to/snickdx/a-brief-history-of-the-web-part-3-3k3d</guid>
      <description>&lt;p&gt;It was 2006, AJAX was being widely adopted to build dynamic web experiences. As web apps become more complex, there was a need to make building them simpler. Thus the dawn of the framework wars began.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-first-generation"&gt;
  &lt;/a&gt;
  The First Generation
&lt;/h1&gt;

&lt;p&gt;I can't talk about the first frameworks/libraries without mentioning &lt;a href="https://jquery.com/"&gt;jquery&lt;/a&gt; of course. In this wave, libraries mainly focused providing some UI widgets, DOM manipulation, and AJAX. &lt;a href="https://en.wikipedia.org/wiki/Dojo_Toolkit"&gt;Dojo Toolkit&lt;/a&gt; appears to be the first framework ever released in 2004. jQuery was released in 2006, along with &lt;a href="https://en.wikipedia.org/wiki/MooTools"&gt;mootools&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/YUI_Library"&gt;yui&lt;/a&gt;. However, that fact that you probably only recognized jQuery is testament to its domination.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-second-generation"&gt;
  &lt;/a&gt;
  The Second Generation
&lt;/h1&gt;

&lt;p&gt;In 2009 JavaScript was updated to EcmaScript Version 5, with growing platform capabilities and user expectations a second wave of frameworks began. Frameworks likes Angular in 2009, Backbone JS in 2010, Ember and Meteor in 2011. Two-way data-binding and templating were the features you would typically see in these frameworks. React was released in 2013 and two promising frameworks called Vue and Polymer were released in 2014. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yeWXqwWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmw9jhvhfupafllahsc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yeWXqwWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmw9jhvhfupafllahsc0.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/michaellnorth/status/720030263905005568/photo/1"&gt;Image Credit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In terms of back-end, and interesting development happened in 2009. &lt;a href="https://en.wikipedia.org/wiki/Node.js"&gt;Nodejs&lt;/a&gt; was released as the first server side runtime for JavaScript. Now you can write your sever-side scripts and your client side code in JavaScript!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-third-generation"&gt;
  &lt;/a&gt;
  The Third Generation
&lt;/h1&gt;

&lt;p&gt;EcmaScript version 6 was released in 2015, this brought many quality of life improvements like arrow functions, template literals, let &amp;amp; const, promises and the fetch API. &lt;/p&gt;

&lt;p&gt;In this generation much attention was paid to state management, building UI components an optimizing their rendering with concepts like virtual DOM in the case of react. In 2015 Ember had a major update and in 2016 Angular JS was 'rebooted' to Angular &lt;a href="https://jaxenter.com/angular-2-0-announcement-backfires-112127.html"&gt;much to the dismay of many dev teams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iu8lRyr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reiamfs7fa2ll39dwpts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iu8lRyr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/reiamfs7fa2ll39dwpts.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;One may argue that the framework fatigue really &lt;a href="https://www.breck-mckye.com/blog/2014/12/the-state-of-javascript-in-2015/"&gt;began to be felt here&lt;/a&gt;. Many developers were overwhelmed at the amount of diversity and the fear having to relearn a new framework ever so often was real. &lt;/p&gt;

&lt;p&gt;In 2016 interest in React surpassed Angular and Vue's popularity saw steady growth. Popularity in &lt;a href="http://aurelia.io/"&gt;Aurelia&lt;/a&gt; was also on the rise. By 2017 Angular took a clear 3rd place behind Vue and React at the top.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;While there are still new frameworks appearing many took solace that things seem to have settled down at the top. In the next post we shall catch up to the web today.&lt;/p&gt;

&lt;p&gt;Have you been in dev during these years? Perhaps you have been burned by the Angular Upgrade? Did you use Redux with React? Please share!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/history-of-frontend-frameworks/"&gt;History of Front-End Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.breck-mckye.com/blog/2014/12/the-state-of-javascript-in-2015/"&gt;The State of JavaScript 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://2016.stateofjs.com/"&gt;The State of JavaScript 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://2017.stateofjs.com/"&gt;The State of JavaScript 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Re-rendering in React</title>
      <author>NRF</author>
      <pubDate>Sat, 02 Oct 2021 23:15:06 +0000</pubDate>
      <link>https://dev.to/nrf/re-rendering-in-react-4b55</link>
      <guid>https://dev.to/nrf/re-rendering-in-react-4b55</guid>
      <description>&lt;p&gt;I recently saw the following tweet from &lt;a href="https://www.twitter.com/_georgemoller"&gt;@_georgemoller&lt;/a&gt; which posed an interesting question related to component re-rendering in React:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dvOINXT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FAiLIt7WQAAM5NT.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--K0o6ch8F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1409915212157833223/OX8dfCpn_normal.jpg" alt="George Moller profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        George Moller
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @_georgemoller
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ❓React interview question.&lt;br&gt;&lt;br&gt;When incrementing the count, &amp;lt;SomeComponent /&amp;gt;:&lt;br&gt;&lt;br&gt;a. Will re-render each time&lt;br&gt;b. Won't re-render at all because it doesn't consume the count variable 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:41 PM - 30 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443556666792988672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443556666792988672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443556666792988672" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;The problem is interesting because, while &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; is a child component of &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; does not depend on &lt;code&gt;count&lt;/code&gt; in any way. It does not receive &lt;code&gt;count&lt;/code&gt; as a prop (in fact, &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; doesn't receive any props) and, as a result, is not affected by &lt;code&gt;count&lt;/code&gt;'s change in value.&lt;/p&gt;

&lt;p&gt;So will &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; be re-rendered every time the value of &lt;code&gt;count&lt;/code&gt; is updated?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-environment"&gt;
  &lt;/a&gt;
  Testing environment
&lt;/h2&gt;

&lt;p&gt;For testing, I simply created a new project using &lt;code&gt;create-react-app&lt;/code&gt;. After that I proceeded to delete all the extra stuff not needed for this exercise and put the code in &lt;code&gt;App.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nyJrHwVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw3zoj3csejeufycabev.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nyJrHwVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kw3zoj3csejeufycabev.png" alt="code_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FliL293A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmqih1lbe7j3ejgdoxzh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FliL293A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmqih1lbe7j3ejgdoxzh.png" alt="output_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verifying-a-rerender"&gt;
  &lt;/a&gt;
  Verifying a re-render
&lt;/h2&gt;

&lt;p&gt;To get to our answer we need a way to verify whether a component was re-rendered or not. The easiest way to do this would be to use the &lt;strong&gt;React Developer Tools&lt;/strong&gt;. These developer tools are available for all major browsers as an extension (except Safari I think).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After installing the developer tools, right-click anywhere on the page and click &lt;strong&gt;Inspect&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9KW3vb3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7fhwl1bpamdudbic39v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9KW3vb3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7fhwl1bpamdudbic39v.png" alt="step_1_1"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Look for &lt;strong&gt;Components&lt;/strong&gt; and open it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oZyzgcEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkpypokpqjravml8c2qr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZyzgcEV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkpypokpqjravml8c2qr.png" alt="step_1_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This tool shows us all the components in our React application and their relation to each other (children are indented under their parent component). Clicking on a component shows more detail like the values of its state and props.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on the settings icon and enable the setting called &lt;em&gt;Highlight updates when components render&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QCkXnNMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w79dlquvclc4ey0onqdc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QCkXnNMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w79dlquvclc4ey0onqdc.png" alt="step_1_3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lc7j9Gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2c9o5qkwimy449p4d0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lc7j9Gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r2c9o5qkwimy449p4d0o.png" alt="step_1_4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, enabling this setting means that any component that is rendered/re-rendered will be highlighted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-to-test"&gt;
  &lt;/a&gt;
  Time to test
&lt;/h3&gt;

&lt;p&gt;This is it. Time to press the button. If &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; is highlighted, it means that &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; is being re-rendered every time &lt;code&gt;count&lt;/code&gt; is being updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiZCtljb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh6tdx906le7ms0b5uca.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiZCtljb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qh6tdx906le7ms0b5uca.gif" alt="step_1_5"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Interesting! Not only &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; is re-rendered every time the state changes but the text displaying &lt;code&gt;count&lt;/code&gt;'s value and and the &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt; are also re-rendered.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every time the state of a component changes, that component and all of its children are re-rendered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just to drive this point home, and emphasize the fact that it does not matter where the value of &lt;code&gt;count&lt;/code&gt; is actually displayed, let's consider some additional scenarios.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenario1"&gt;
  &lt;/a&gt;
  Scenario-1
&lt;/h2&gt;

&lt;p&gt;In this scenario, we will pass the value of count to &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; and display it from within &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt;. If &lt;code&gt;count&lt;/code&gt; is then updated, the only changing entity is being displayed from within &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5BzdPxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwfbhh8mp4uu5r5x47xi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5BzdPxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pwfbhh8mp4uu5r5x47xi.png" alt="code_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I had to introduce a couple of &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags just to keep everything neat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5bKOXEuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uz2ipzkc8wqm736wan08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5bKOXEuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uz2ipzkc8wqm736wan08.png" alt="step_2_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, practically speaking, the only thing updating the display every time the increment button is pressed is inside &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; on line 20. So how will React handle the re-render?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Szx39AZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spwn7n5x778pgyjxkh3w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Szx39AZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spwn7n5x778pgyjxkh3w.gif" alt="step_2_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once again all components are being re-rendered. We basically have two child components of &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; (&lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;button /&amp;gt;&lt;/code&gt;) and both of them are clearly being re-rendered. This reinforces the point that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every time the state of a component changes, that component and all of its children are re-rendered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since the state of &lt;code&gt;count&lt;/code&gt; belongs to &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;, every time &lt;code&gt;count&lt;/code&gt; changes, &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; and all of its child components are re-rendered (and the children of those child components as well; I hope that was clear!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kcEwpQhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pgujmweh50epzy0p0nr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kcEwpQhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pgujmweh50epzy0p0nr.png" alt="react_render_propagation"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This brings us to the second scenario.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenario2"&gt;
  &lt;/a&gt;
  Scenario-2
&lt;/h2&gt;

&lt;p&gt;Since we now know that it makes no difference, let's display the value of &lt;code&gt;count&lt;/code&gt; from within &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;SomeComponent /&amp;gt;&lt;/code&gt; (just like in the original code). Additionally, I've created a bunch of components just to create a hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FE7PiRNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/curqzq4kov1ltpi5rx2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FE7PiRNd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/curqzq4kov1ltpi5rx2w.png" alt="code_3"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7q4eILya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skwteq2syh8facstiyz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7q4eILya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skwteq2syh8facstiyz9.png" alt="step_3_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By now it should be crystal clear as to what will happen when we change &lt;code&gt;count&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qq2ZA53z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y9jd4hhqgyqzqojqe8p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qq2ZA53z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y9jd4hhqgyqzqojqe8p.gif" alt="step_3_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenario3"&gt;
  &lt;/a&gt;
  Scenario-3
&lt;/h2&gt;

&lt;p&gt;For our last scenario, we'll take the code from scenario-2 and move the &lt;strong&gt;state&lt;/strong&gt; from &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;AnotherChildOfSomeComponent /&amp;gt;&lt;/code&gt;. And since the data flow in React is from parent to child, and not the other way around, we will display (and update) the value of &lt;code&gt;count&lt;/code&gt; from within &lt;code&gt;&amp;lt;AnotherChildOfSomeComponent /&amp;gt;&lt;/code&gt; as well (this makes sense since the whole goal of this exercise is to make &lt;code&gt;count&lt;/code&gt; a part of &lt;code&gt;&amp;lt;AnotherChildOfSomeComponent /&amp;gt;&lt;/code&gt;'s state).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vLx36R50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxtjsitdctsqyey1rur1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLx36R50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxtjsitdctsqyey1rur1.png" alt="code_4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2e0QBND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4jt4lzr13ke94e9wwb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2e0QBND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4jt4lzr13ke94e9wwb4.png" alt="step_4_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time to change &lt;code&gt;count&lt;/code&gt; and see React's rendering in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEMyHfzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeuofog04zrt2fwwmuup.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEMyHfzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeuofog04zrt2fwwmuup.gif" alt="step_4_2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As can be seen, React only re-renders &lt;code&gt;&amp;lt;AnotherChildOfSomeComponent /&amp;gt;&lt;/code&gt; and leaves the rest alone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Kindly allow me to say it again...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every time the state of a component changes, that component and all of its children are re-rendered.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be very mindful of which component handles the state in a React application. If you put it in the root component (like in the original problem), your &lt;strong&gt;whole application&lt;/strong&gt; will re-render every time that state changes. This can have a serious impact on your application's performance.&lt;/p&gt;

&lt;p&gt;For example, imagine a bunch of data-driven child components that query various APIs. Every time those components are rendered they'll hit those APIs. Now that might be something you intend, but it just might be a side-effect of keeping state in the wrong component.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#follow-me-on-twitter-binrf"&gt;
  &lt;/a&gt;
  Follow me on twitter: &lt;a href="https://www.twitter.com/bi_nrf"&gt;@bi_nrf&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Outgrowing Wordpress &amp; nocode</title>
      <author>𝙹𝚊𝚜𝚘𝚗 𝙻𝚎𝚘𝚠 👨🏻‍💻</author>
      <pubDate>Sat, 02 Oct 2021 23:05:57 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/outgrowing-wordpress-nocode-2c6i</link>
      <guid>https://dev.to/jasonleowsg/outgrowing-wordpress-nocode-2c6i</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wordpress &amp;amp; nocode is the gateway drug to coding&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Back in 2019, I made a promise to myself that I would really learn how to code that year. Looking back at my journals, I had been making this resolution for the past 2 years before that, but it all but fizzled out after some weeks. I tried going through the tutorials on W3 School, but lost steam after hand-coding two HTML sites. I signed up for a free online course on Python with a local university, but the lecturer was a conceited, disrespectful a**hole, and the course format boring beyond belief. After that, I stopped learning coding altogether for the rest of 2018.&lt;/p&gt;

&lt;p&gt;I’m frustrated with the false starts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-learn-coding"&gt;
  &lt;/a&gt;
  Why learn coding?
&lt;/h3&gt;

&lt;p&gt;2018 was a year of making products and learning how to build, launch, market them. I managed to make 8 minimum viable products. But because of the mad rush each month to make and launch a product, I didn’t have bandwidth to learn coding. The timeline was simply too tight to learn how to code, get down to programming my product, debug, and launch. A common maker refrain is “Just use what you know”, so I went with using what I knew - Wordpress. While the learning from making a product a month was immense and enriching, I fell short on the goal to learn how to code. That was okay at first (not learning coding), because the novelty and fun from being able to finally make products more than made up for that shortfall. &lt;/p&gt;

&lt;p&gt;But after 8 products, I’m beginning to feel bored. Bored of using the same technology for every product. Bored of the constraints and limitations to the products I can make. It was hard to customize and create more complex, SaaS-type of products. A good example was a job board I made called Public Design Jobs. After it became inefficient to manually scrape and input new jobs into the job board due to sheer volume, I struggled to find Wordpress plugins to automate the scraping and posting on the job board.&lt;/p&gt;

&lt;p&gt;Simply put, my product ambitions had outgrown the tech I know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wordpress-amp-nocode-is-the-gateway-drug-to-coding"&gt;
  &lt;/a&gt;
  Wordpress &amp;amp; nocode is the gateway drug to coding
&lt;/h3&gt;

&lt;p&gt;In a way, using visual website builders like Wordpress was the gateway drug to me wanting to progress beyond that, and spurred me to start learning coding.&lt;/p&gt;

&lt;p&gt;Being able to make products and website made me catch the maker bug, and after that wanting to learn coding came naturally.&lt;/p&gt;

&lt;p&gt;Now that's a much better way to want to learn coding, isn't it? Instead of saying you need to be computer or digitally literate, get people infected with the desire to create, and everything else will follow. &lt;/p&gt;

&lt;p&gt;Reminds me of this quote by Antoine de Saint—Exupery, author of The Little Prince:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to build a ship, don't drum up the men to gather wood, divide the work and give orders. Instead, teach them to yearn for the vast and endless sea.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>react pwa app.</title>
      <author>Shlok Patel</author>
      <pubDate>Sat, 02 Oct 2021 22:29:02 +0000</pubDate>
      <link>https://dev.to/madrix01/react-pwa-app-29no</link>
      <guid>https://dev.to/madrix01/react-pwa-app-29no</guid>
      <description>&lt;p&gt;I wanted to create a PWA (progressive web app) with react.js and typescript. So I used a built-in flag with &lt;code&gt;create-react-app&lt;/code&gt; which generated pwa.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-app &lt;span class="nt"&gt;--template&lt;/span&gt; cra-template-pwa-typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But after I ran tests in lighthouse it was not available as a pwa.&lt;br&gt;
So I did some research from &lt;a href="https://web.dev/progressive-web-apps/"&gt;web.dev&lt;/a&gt; and other sources and built my own template.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;src/index.tsx&lt;/code&gt; or &lt;code&gt;src/index.js&lt;/code&gt; file and change
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;serviceWorkerRegistration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;serviceWorkerRegistration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;serviceworker.js&lt;/code&gt; to &lt;code&gt;pubic/&lt;/code&gt; folder. &lt;code&gt;serviceworker.js&lt;/code&gt; works in background and it performs caching, background sync, listen to push notifications and many more stuff!
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// public/serviceworker.js&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CACHE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pwatest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;urlsToCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/completed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c1"&gt;// Install a service worker&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Perform install steps&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CACHE_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Opened cache&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlsToCache&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Cache and return requests&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Cache hit - return response&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./offline.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Update a service worker&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cacheWhitelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pwatest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheNames&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;cacheNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheWhitelist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;offline.html&lt;/code&gt; to the &lt;code&gt;public&lt;/code&gt; directory  . This page will render when there is no internet available.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;No internet !!!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add the script for enabling service workers in &lt;code&gt;body&lt;/code&gt; tag of &lt;code&gt;public/index.html&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serviceWorker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./serviceworker.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failure: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Don't forget to add manifest.json
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"short_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"React App"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Create React App Sample"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"favicon.ico"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"64x64 32x32 24x24 16x16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/x-icon"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"logo192.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"192x192"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"logo512.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#000000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"background_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#ffffff"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#you-have-successfully-made-your-current-app-a-reactpwa"&gt;
  &lt;/a&gt;
  You have successfully made your current app a react-pwa
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#to-directly-use-this-boilerplate"&gt;
  &lt;/a&gt;
  To directly use this boilerplate
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;with git
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/bare-cli/react-pwa-boilerplate.git &amp;lt;your-project-name&amp;gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;your-project-name&amp;gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; .git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;with bare
Bare is the tool that I have made to generate and manage your boilerplates. Know more about bare &lt;a href="https://bare.surge.sh"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bare get bare-cli/react-pwa-boilerplate &amp;lt;your-project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you !!&lt;br&gt;
This is my first blog. Please write your reviews in the comments down below.&lt;/p&gt;

</description>
      <category>react</category>
      <category>pwa</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Thoughts on fine tuning your tech CV</title>
      <author>Ste Davies</author>
      <pubDate>Sat, 02 Oct 2021 21:53:16 +0000</pubDate>
      <link>https://dev.to/nullabletype/thoughts-on-fine-tuning-your-tech-cv-1f3l</link>
      <guid>https://dev.to/nullabletype/thoughts-on-fine-tuning-your-tech-cv-1f3l</guid>
      <description>&lt;p&gt;It's almost cruel that your first step into a potential new role often falls to a few A4 sides attempting to summarise yourself; your skills, your drive, your goals. You're more than that can cover. The person reviewing your CV knows that, but they face a difficult decision on whether to invest the time to get to know you based on this first introduction.&lt;/p&gt;

&lt;p&gt;I've been responsible for hiring into multiple technical positions over the years across different skill areas including developers, testers and sys ops engineers. Some of these have been recent graduates, others looking for senior positions after decades in the industry. &lt;/p&gt;

&lt;p&gt;I've seen a wide array of CV styles, some that have delighted me and some that have been difficult to navigate. I thought it may be useful to someone out there, or maybe just myself, to list out some of the suggestions I can think of to help make your tech CV easier to digest. These are all based on real examples I've seen more than once.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consider-your-audience"&gt;
  &lt;/a&gt;
  Consider your audience
&lt;/h2&gt;

&lt;p&gt;This isn't just for your CV's, this is for everything. Whether you're applying for a new position, putting in a merge request to your peers or writing a best man's speech... it's important to put yourself in the shoes of the person you're writing for. What do they want to know?&lt;/p&gt;

&lt;p&gt;Regarding CV's, imagine you're in the position of hiring for the job &lt;strong&gt;you&lt;/strong&gt; want. What would you want to know, what information matters and just as importantly what information doesn't?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-opener"&gt;
  &lt;/a&gt;
  The opener
&lt;/h2&gt;

&lt;p&gt;Although it is unlikely to be the first section that is read, a personal statement is an opportunity to impress and set a clear indication about what you're looking for and have achieved. If well written, it can easily help you stand out from other candidates.&lt;/p&gt;

&lt;p&gt;One of the biggest traps I've seen people fall into is to state the basic cliches. I'm talking about things like "hard-working" or "dedicated", they're really expected traits and don't need to be said. Space on your CV is precious, and I'm sure there are things that you're proud of you want to tell the reader about over basic statements.&lt;/p&gt;

&lt;p&gt;The second thing I often see is an overuse of vocabulary. You don't need to impress with fancy words, do so by saying what you've achieved in a clear and easy to read manner.&lt;/p&gt;

&lt;p&gt;Pick out the key accomplishments and skills you want the reader to know about you, what the position you're looking for is and the direction of your career. Be honest, you don't want to lie and get an interview for a position you don't want, but feel free to tailor it to the position you're applying to. Keep the fancy words to a minimum, but don't be afraid to be confident about what you're good at. &lt;/p&gt;

&lt;p&gt;Here's an example of what I'd consider a good personal statement.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An &lt;strong&gt;ISTQB certified&lt;/strong&gt; software developer in test with &lt;strong&gt;8 years' experience&lt;/strong&gt; testing enterprise level web applications. &lt;strong&gt;Designed, written and maintained frameworks&lt;/strong&gt; that ensure a &lt;strong&gt;high level of quality and resilience&lt;/strong&gt;, including testing web API's and applications for functionality and &lt;strong&gt;performance&lt;/strong&gt; that have &lt;strong&gt;reduced required testing time by 50%&lt;/strong&gt;. Thrives on the opportunity to &lt;strong&gt;mentor other testers&lt;/strong&gt;, work collaboratively in a team and has a keen eye for spotting opportunities for improvement. Now looking for the next challenge to use the skills gained to make a difference and continue professional growth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#size-matters"&gt;
  &lt;/a&gt;
  Size matters
&lt;/h2&gt;

&lt;p&gt;If your CV is jam-packed with information covering 10+ pages, then it's going to be difficult to digest and pick out the relevant information you want the reader to see.&lt;/p&gt;

&lt;p&gt;Similarly, if your CV is a page or less, you're likely omitting really useful information about yourself and your skills. &lt;/p&gt;

&lt;p&gt;The best CV's I've personally seen are generally around 1-3 pages long. Any longer than that then you may benefit from having a tidy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-do-i-make-the-best-use-of-the-space"&gt;
  &lt;/a&gt;
  So how do I make the best use of the space?
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#keep-it-relevant"&gt;
  &lt;/a&gt;
  Keep it relevant
&lt;/h4&gt;

&lt;p&gt;The IT sector runs at a super-fast pace. Your most recent positions are always likely to be the most relevant on your career path. Take a look at your previous employment. That job you did 5+ years ago using some obscure or out of favour tech... ask yourself, do I want to even do that thing again? Is it relevant to this position or where I want my career to go? &lt;/p&gt;

&lt;p&gt;The further back your experience the less specific you probably need to be. Don't omit previous positions altogether, but you can afford more brevity the further back you go. One size doesn't fit all, just use the space wisely.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#summary-of-tech-skills"&gt;
  &lt;/a&gt;
  Summary of tech skills
&lt;/h4&gt;

&lt;p&gt;We use so many tools, so many processes and workflows... you want the person reviewing your CV to see all the wonderful things you know and have used. This can quickly turn into 1/4 of a page of your CV or a giant list of unsorted tools and skills. &lt;/p&gt;

&lt;p&gt;The problem is if you're not careful you can really hurt its usefulness. Take a look at the following example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;C#, Visual studio, MVC, WebApi, Postgresql, MongoDB, T-SQL, Flask, SQLite, LiteDB, Entity Framework, PostgreSQL, SQL Server, AWS, Python, Microsoft Word, Fiddler, Postman...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first issue is that there are quite a few things that are not relevant and just distract from what you're actually good at. Things like listing Visual studio along with C# when that's pretty much implied or listing office tools which is an expectation for any IT job. There may also be things you have no real interest in doing again, so think if it's worth listing them. Some may just be completely irrelevant for the position you're applying for.&lt;/p&gt;

&lt;p&gt;The second issue is that it doesn't really give any idea of your experience. I've seen lots of CV tip sites that recommend a list of years of experience but that doesn't always help. Take for example C#. Is that building desktop apps, or web APIs? Maybe it's all in windows services or WCF.&lt;/p&gt;

&lt;p&gt;My current suggestion would be something like the following, but I'd love to hear/see your ideas 🙂&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Technologies&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Core Languages&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;C#&lt;/strong&gt; 7+, Asp.Net 4+ (WebApi &amp;amp; MVC), Entity framework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core Databases&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;PostgreSQL&lt;/strong&gt;, &lt;strong&gt;MongoDB&lt;/strong&gt;, &lt;strong&gt;T-SQL&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core Tooling&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;OctopusDeploy&lt;/strong&gt;, &lt;strong&gt;TeamCity&lt;/strong&gt;, &lt;strong&gt;Fiddler&lt;/strong&gt;, &lt;strong&gt;Postman&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Other&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Python&lt;/strong&gt;, Flask, &lt;strong&gt;Ms SQL Server&lt;/strong&gt;, &lt;strong&gt;SQLite&lt;/strong&gt;, &lt;strong&gt;LiteDB&lt;/strong&gt;, &lt;strong&gt;AWS&lt;/strong&gt; (EC2, X-Ray S3)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;It's always a good idea to link any experience you mention in the summary with your job roles and include context, like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this role, I was a &lt;strong&gt;key architect&lt;/strong&gt; in developing &lt;strong&gt;large scale&lt;/strong&gt; C# (&lt;strong&gt;8.0, .net 4.7.2&lt;/strong&gt;) apps with PostgreSQL and entity framework.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-design"&gt;
  &lt;/a&gt;
  The design
&lt;/h2&gt;

&lt;p&gt;This doesn't apply to all roles as it may be useful for a graphic designer position for example but if you're applying for a developer/tester/sys ops type role don't focus too much on the design. Stand out by your clear and obvious thought when preparing your CV by keeping the content clear and easy to read. You don't need colours, graphics or charts to sell yourself, they're just a distraction. I'm not saying make it ugly, just don't overthink it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bonus"&gt;
  &lt;/a&gt;
  The bonus
&lt;/h2&gt;

&lt;p&gt;You're in this industry (hopefully) because you love tech. You probably have personal projects you work on outside of your normal job. It's always a real bonus to get to see what candidates have worked on in their spare time, throw that GitHub or personal website link in there or in your covering letter.&lt;/p&gt;

&lt;p&gt;So that's it, I hope you found some of it useful. Some of the points may seem a little obvious, but they're all based on things I've seen frequently.&lt;/p&gt;

&lt;p&gt;I'd love to know if you agree with any of these thoughts, or maybe you have some of your own tips and tricks you'd like to share? ♥&lt;/p&gt;

</description>
      <category>resume</category>
      <category>career</category>
      <category>interview</category>
      <category>cv</category>
    </item>
    <item>
      <title>Iniciando Machine Learning en Amazon SageMaker</title>
      <author>elizabethfuentes12</author>
      <pubDate>Sat, 02 Oct 2021 21:39:29 +0000</pubDate>
      <link>https://dev.to/elizabethfuentes12/iniciando-machine-learning-en-amazon-sagemaker-3gmh</link>
      <guid>https://dev.to/elizabethfuentes12/iniciando-machine-learning-en-amazon-sagemaker-3gmh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#iniciando-sagemaker-ml"&gt;
  &lt;/a&gt;
  Iniciando Sagemaker ML
&lt;/h2&gt;

&lt;p&gt;En este tutorial te enseñare un poco de Sagemaker usando un ejemplo sencillo de Machine Learning. &lt;/p&gt;

&lt;p&gt;GitHub del tutorial: &lt;a href="https://github.com/elizabethfuentes12/Iniciando_SagemakerML"&gt;https://github.com/elizabethfuentes12/Iniciando_SagemakerML&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#que-es-sagemaker"&gt;
  &lt;/a&gt;
  ¿Que es Sagemaker?
&lt;/h2&gt;

&lt;p&gt;Aprendizaje automático al alcance de cualquier científico de datos y desarrollador. &lt;/p&gt;

&lt;p&gt;Amazon &lt;a href="https://aws.amazon.com/es/sagemaker/"&gt;SageMaker&lt;/a&gt; ayuda a los científicos de datos y a los desarrolladores a preparar, crear, entrenar e implementar con rapidez modelos de aprendizaje automático de alta calidad al poner a disposición un amplio conjunto de capacidades especialmente creadas para el aprendizaje automático.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qv_Tr_BCFCQ"&gt;Video: Introduction to Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auMXnhdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqcb5xw5f4ori9z5yrlz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auMXnhdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqcb5xw5f4ori9z5yrlz.png" alt="sagemaker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#casos-de-uso"&gt;
  &lt;/a&gt;
  Casos de Uso
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pages.awscloud.com/Implementing-Machine-Learning-Solutions-with-Amazon-SageMaker_2019_0722-MCL_OD.html?&amp;amp;trk=sl_card&amp;amp;trkCampaign=NA-FY19-AWS-DIGMKT-WEBINAR-SERIES-July_2019_0722-MCL&amp;amp;sc_channel=el&amp;amp;sc_campaign=pac_2018-2019_exlinks_ondemand_OTT_evergreen&amp;amp;sc_outcome=Product_Adoption_Campaigns&amp;amp;sc_geo=NAMER&amp;amp;sc_country=mult&amp;amp;trkcampaign=wbnrondemand"&gt;Mantenimiento predictivo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/iot/sagemaker-object-detection-greengrass-part-1-of-3/"&gt;Visión artificial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/labeling-data-for-3d-object-tracking-and-sensor-fusion-in-amazon-sagemaker-ground-truth/"&gt;Conducción autónoma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=elRQPCHDBPE&amp;amp;t=4s"&gt;Detección de fraudes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Nlwz4cU68T8"&gt;Predicción de riesgos crediticios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/maximizing-nlp-model-performance-with-automatic-model-tuning-in-amazon-sagemaker/"&gt;Extracción y análisis de datos a partir de documentos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/machine-learning/making-machine-learning-predictions-in-amazon-quicksight-and-amazon-sagemaker/"&gt;Predicción de pérdida de clientes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=A04TT68Bd8A"&gt;Previsión de demanda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/es/blogs/startups/how-dely-uses-amazon-sagemaker-to-deliver-personalized-recipes/"&gt;Recomendaciones personalizadas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fuente y github con modelos: &lt;a href="https://aws.amazon.com/es/sagemaker/getting-started/"&gt;Casos de uso&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#algoritmos-integrados-de-aws-sagemaker"&gt;
  &lt;/a&gt;
  Algoritmos integrados de AWS Sagemaker
&lt;/h2&gt;

&lt;p&gt;Fuente: &lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html"&gt;https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Sagemaker proporciona una serie de algoritmos integrados que ayuda a mejorar la preforma del aprendizaje automático. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tipo&lt;/th&gt;
&lt;th&gt;Tipos de problemas&lt;/th&gt;
&lt;th&gt;Algoritmos&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html#algorithms-built-in-supervised-learning"&gt;Aprendizaje supervisado&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Clasificación binaria/ de varias clases - Regresión - Previción de series temporales&lt;/td&gt;
&lt;td&gt;Linear Learner  - Factorization Machines  - XGBoost  - K-Nearest Neighbors (k-NN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html#algorithms-built-in-unsupervised-learning"&gt;Aprendizaje no supervisado&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ingeniería de características: reducción de la dimensionalidad - Detección de anomalías - Integraciones: convierten objetos de grandes dimensiones en espacio de baja dimensionalidad - Agrupación o agrupación en clústeres - Modelado de temas&lt;/td&gt;
&lt;td&gt;PCA - K-Means - IP Insights - Random Cut Forest (RCF)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html#algorithms-built-in-text-analysis"&gt;Análisis de texto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Clasificación de textos - Traducción automática de Algoritmo - Resumir texto - Texto a voz&lt;/td&gt;
&lt;td&gt;Blazing Tex - Sequence-to-Sequence - LDA - NTM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/algos.html#algorithms-built-in-image-processing"&gt;Gema Image Processing&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Clasificación de imágenes y etiquetas múltiple - Detección y clasificación de objetos - Visión artificial&lt;/td&gt;
&lt;td&gt;Image Classification - Semantic Segmentation - Object Detection&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#tutorial-crear-entrenar-e-implementar-un-modelo-de-machine-learning-con-aws-sagemaker"&gt;
  &lt;/a&gt;
  Tutorial Crear, entrenar e implementar un modelo de Machine Learning con AWS Sagemaker
&lt;/h2&gt;

&lt;p&gt;Fuente: &lt;a href="https://aws.amazon.com/es/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/"&gt;https://aws.amazon.com/es/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Siguiendo los siguientes pasos aprenderá a utilizar  Amazon SageMaker para crear, entrenar e implementar un modelo de aprendizaje automático (ML). Para este ejercicio, utilizaremos el conocido algoritmo de aprendizaje automático &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost.html"&gt;XGBoost&lt;/a&gt; el cual esta integrado en Sagemaker. &lt;/p&gt;

&lt;p&gt;En este tutorial, asumirás el rol de un desarrollador de machine learning que trabaja en un banco. Se le solicita desarrollar un modelo de machine learning para predecir si los clientes se inscribirán para un certificado de depósito. El modelo se entrenará con el conjunto de datos de marketing que contiene la información demográfica de los clientes, sus respuestas a los eventos de marketing y los factores externos.&lt;/p&gt;

&lt;p&gt;Los datos se etiquetaron para su conveniencia. Una columna en el conjunto de datos identifica si el cliente está inscrito para algún producto que ofrece el banco. Una versión de este conjunto de datos está disponible para el público en el repositorio de aprendizaje automático a cargo de la Universidad de California, Irvine. Este tutorial implementa un modelo de aprendizaje automático supervisado debido a que los datos están etiquetados. (El aprendizaje no supervisado tiene lugar cuando los conjuntos de datos no están etiquetados).&lt;/p&gt;

&lt;p&gt;En este tutorial, hará lo siguiente:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creará una instancia de bloc de notas&lt;/li&gt;
&lt;li&gt;Preparará los datos&lt;/li&gt;
&lt;li&gt;Entrenará el modelo para aprender de los datos&lt;/li&gt;
&lt;li&gt;Implementará el modelo&lt;/li&gt;
&lt;li&gt;Evaluará el rendimiento de su modelo de aprendizaje automático&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Los recursos creados y utilizados en este tutorial se pueden utilizar en la capa gratuita de AWS. Recuerde completar el Paso 7 y terminar sus recursos. Si su cuenta ha estado activa con estos recursos por más de dos meses, se cobrará menos de 0,50 USD por ella.&lt;/p&gt;

&lt;p&gt;A continuación un diagrama de lo que haremos. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRGaIoPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t87k8m8bylw8qm6gr9hh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRGaIoPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t87k8m8bylw8qm6gr9hh.jpeg" alt="diagrama"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paso-0-que-es-xgboost"&gt;
  &lt;/a&gt;
  Paso 0: ¿Que es XGBoost?
&lt;/h2&gt;

&lt;p&gt;Es una implementación de código abierto popular y eficiente del algoritmo de árboles aumentados de gradientes. La potenciación de gradientes es un algoritmo de aprendizaje supervisado que intenta predecir de forma apropiada una variable de destino mediante la combinación de un conjunto de estimaciones a partir de un conjunto de modelos más simples y más débiles. Funciona bien en competiciones de aprendizaje automático debido a su manejo robusto de una variedad de tipos de datos, relaciones, distribuciones y la variedad de hiperparámetros que puede ajustar. &lt;/p&gt;

&lt;p&gt;Puede usar &lt;strong&gt;XGBoost&lt;/strong&gt; para problemas de &lt;strong&gt;regresión&lt;/strong&gt;, de &lt;strong&gt;clasificación (binaria y multiclase)&lt;/strong&gt; y de &lt;strong&gt;ranking&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Fuente: &lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/xgboost.html"&gt;AWS XGBoost&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Más sobre XGBoost --&amp;gt; &lt;a href="https://www.youtube.com/watch?v=MIPkK5ZAsms"&gt;Boosting - EXPLAINED!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paso-1-abra-la-consola-de-amazon-sagemaker"&gt;
  &lt;/a&gt;
  Paso 1: Abra la consola de Amazon SageMaker
&lt;/h2&gt;

&lt;p&gt;Diríjase a la consola de Amazon SageMaker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eboq0Ami--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbcus8zemmc5w1c02h2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eboq0Ami--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbcus8zemmc5w1c02h2j.png" alt="sage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Abra &lt;strong&gt;SageMaker&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paso-2-cree-una-instancia-de-bloc-de-notas-de-amazon-sagemaker"&gt;
  &lt;/a&gt;
  Paso 2: Cree una instancia de bloc de notas de Amazon SageMaker
&lt;/h2&gt;

&lt;p&gt;En este paso, creará una instancia de bloc de notas de Amazon SageMaker. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2a"&gt;
  &lt;/a&gt;
  2.a
&lt;/h3&gt;

&lt;p&gt;Abra &lt;strong&gt;notebook instances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2W-Sd2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yclz3t9cwe8qhsebtwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2W-Sd2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9yclz3t9cwe8qhsebtwh.png" alt="dos"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;y seleccione Create notebook Instance en la parte superior derecha&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_MCqqDvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9t4k7s14mzqagv9ryjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MCqqDvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9t4k7s14mzqagv9ryjw.png" alt="dosa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2b"&gt;
  &lt;/a&gt;
  2b.
&lt;/h3&gt;

&lt;p&gt;En la página &lt;strong&gt;Crear instancia de bloc de notas&lt;/strong&gt;, escriba un nombre en el campo &lt;strong&gt;Nombre de la instancia de bloc de notas&lt;/strong&gt;. Este tutorial utiliza &lt;strong&gt;MySageMakerInstance&lt;/strong&gt; como nombre de la instancia, pero puede elegir un nombre diferente si lo desea.&lt;/p&gt;

&lt;p&gt;Para este tutorial, puede mantener el &lt;strong&gt;Tipo de instancia de bloc de notas&lt;/strong&gt; predeterminado &lt;strong&gt;ml.t2.medium&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXoZusq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fltcglgo8s3wz1cd38d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXoZusq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fltcglgo8s3wz1cd38d.png" alt="2b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para permitir que la instancia de bloc de notas acceda a Amazon S3 y pueda cargar datos de manera segura en este servicio, se debe especificar un rol de IAM. En el campo &lt;strong&gt;Rol de IAM&lt;/strong&gt;, elija &lt;strong&gt;Crear un nuevo rol&lt;/strong&gt; para que Amazon SageMaker cree un rol con los permisos necesarios y lo asigne a su instancia. De forma alternativa, puede elegir un rol de IAM existente en su cuenta para este fin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8N78BGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abzzu1dgsbtaw36w4w6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8N78BGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/abzzu1dgsbtaw36w4w6b.png" alt="2b2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2c"&gt;
  &lt;/a&gt;
  2c.
&lt;/h3&gt;

&lt;p&gt;En el cuadro &lt;strong&gt;Crear un rol de IAM&lt;/strong&gt;, seleccione &lt;strong&gt;Cualquier bucket de S3&lt;/strong&gt;. Esto permite que su instancia de Amazon SageMaker acceda a todos los buckets de S3 de su cuenta. Más adelante en este tutorial, creará un nuevo bucket de S3. Sin embargo, si ya cuenta con un bucket que desea utilizar, seleccione &lt;strong&gt;Buckets de S3 específicos&lt;/strong&gt; e indique el nombre del bucket.&lt;/p&gt;

&lt;p&gt;Elija &lt;strong&gt;Crear rol&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yY9oS9c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvd2uq7rlzrf4zhvea46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yY9oS9c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvd2uq7rlzrf4zhvea46.png" alt="2b3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2d"&gt;
  &lt;/a&gt;
  2d.
&lt;/h3&gt;

&lt;p&gt;Tenga en cuenta que Amazon SageMaker creó para usted un rol denominado &lt;strong&gt;AmazonSageMaker-ExecutionRole-&lt;/strong&gt;***.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OC8BZpBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cekwgfiqf8297bbqbgox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OC8BZpBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cekwgfiqf8297bbqbgox.png" alt="2d"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para este tutorial, utilizaremos los valores predeterminados en los demás campos. Elija &lt;strong&gt;Crear instancia de bloc de &lt;br&gt;
notas&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2e"&gt;
  &lt;/a&gt;
  2e.
&lt;/h3&gt;

&lt;p&gt;En la página &lt;strong&gt;Instancias de bloc de notas&lt;/strong&gt;, debería ver su nueva instancia de bloc de notas &lt;strong&gt;MySageMakerInstance&lt;/strong&gt; con el estado &lt;strong&gt;Pendiente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4r9VUIAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pve85fqp5zzk7chpi15r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4r9VUIAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pve85fqp5zzk7chpi15r.png" alt="2e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Su instancia de bloc de notas debería pasar del estado &lt;strong&gt;Pendiente&lt;/strong&gt; al estado &lt;strong&gt;En servicio&lt;/strong&gt; en menos de dos minutos.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2f"&gt;
  &lt;/a&gt;
  2f
&lt;/h3&gt;

&lt;p&gt;Para este paso debes detener la instancia en &lt;strong&gt;Acciones&lt;/strong&gt; --&amp;gt; &lt;strong&gt;Detener&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suikvvRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86qp0vn9qx50hyntr9v0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suikvvRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86qp0vn9qx50hyntr9v0.png" alt="detener"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evita que la instancia de SageMaker se quede activa cuando no la estés usando y así no incurrir en gastos innecesarios, para eso debes agregar la &lt;strong&gt;Configuración del ciclo de vida&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esto lo puedes realizar al momento de crear la maquina o luego de crearla editando la configuración. &lt;/p&gt;

&lt;p&gt;Entra a la configuración de la instancia dando click sobre su nombre: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--voAzkmBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nnuaxgt6f6edx62fnr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--voAzkmBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nnuaxgt6f6edx62fnr0.png" alt="2f"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Presiona editar, arriba a la derecha, en &lt;strong&gt;Configuración adicional&lt;/strong&gt; selecciona &lt;strong&gt;Crear una nueva configuración de ciclo de vida&lt;/strong&gt;, en la ventana emergente nombralo como prefieras y abre la lista de scripts para iniciar: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NiZO_zLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f52ims5xu68bnqex3kn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NiZO_zLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f52ims5xu68bnqex3kn.png" alt="2f2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;El link te llevara al GitHub &lt;a href="https://github.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-sample"&gt;amazon-sagemaker-notebook-instance-lifecycle-config-samples&lt;/a&gt; , entra a la carpeta scripts --&amp;gt; auto-stop-idle y copia el codigo en &lt;a href="https://github.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-samples/blob/master/scripts/auto-stop-idle/on-start.sh"&gt;on-start.sh&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Pega el codigo en la ventana emergente y avanza con &lt;strong&gt;Crear una configuración&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xtJe98gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3i6l96ov9wdcvgrci6d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xtJe98gz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3i6l96ov9wdcvgrci6d.png" alt="2f3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2e"&gt;
  &lt;/a&gt;
  2e
&lt;/h3&gt;

&lt;p&gt;Agrega un repositorio Git a tu instancia. &lt;/p&gt;

&lt;p&gt;En la misma edición del paso anterior, ve al fondo donde dice &lt;strong&gt;Repositorios Git - opcional&lt;/strong&gt;, selecciona &lt;strong&gt;Clone un repositorio Git público en esta instancia de bloc de notas solamente&lt;/strong&gt; y copia el repositorio creado para este ejemplo &lt;a href="https://github.com/elizabethfuentes12/Iniciando_SagemakerML"&gt;Iniciando_SagemakerML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--934VcsJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ino5s875zb2kym8sdcvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--934VcsJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ino5s875zb2kym8sdcvg.png" alt="2e2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finaliza con &lt;strong&gt;Actualizar instancia del bloc de notas&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#paso-3-prepare-los-datos"&gt;
  &lt;/a&gt;
  Paso 3: Prepare los datos
&lt;/h2&gt;

&lt;p&gt;En este paso, utilizará su bloc de notas de Amazon SageMaker a fin de procesar previamente los datos que necesita para entrenar su modelo de aprendizaje automático.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3a"&gt;
  &lt;/a&gt;
  3a.
&lt;/h3&gt;

&lt;p&gt;En la página &lt;strong&gt;Instancias de bloc de notas&lt;/strong&gt;, aguarde hasta que la instancia &lt;strong&gt;MySageMakerInstance&lt;/strong&gt; haya pasado del estado &lt;strong&gt;Pendiente&lt;/strong&gt; al estado &lt;strong&gt;En servicio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Después de que el estado cambie a &lt;strong&gt;En servicio&lt;/strong&gt;, seleccione la instancia &lt;strong&gt;MySageMakerInstance&lt;/strong&gt; y ábrala a través del menú desplegable &lt;strong&gt;Acciones&lt;/strong&gt; o elija la opción &lt;strong&gt;Abrir JupyterLab&lt;/strong&gt;, que aparece junto al estado &lt;strong&gt;En servicio&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3b"&gt;
  &lt;/a&gt;
  3b.
&lt;/h3&gt;

&lt;p&gt;Después de que Jupyter se abra, en la pestaña &lt;strong&gt;Archivos&lt;/strong&gt;, elija &lt;strong&gt;Nuevo&lt;/strong&gt;, &lt;strong&gt;Notebook&lt;/strong&gt; y, luego, &lt;strong&gt;conda_python3&lt;/strong&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3c"&gt;
  &lt;/a&gt;
  3c.
&lt;/h3&gt;

&lt;p&gt;Para preparar los datos, entrenar el modelo de aprendizaje automático e implementarlo, deberá importar algunas bibliotecas y definir algunas variables del entorno en su entorno de bloc de notas de Jupyter. Copie el siguiente código o ejecutelo directamente de la carpeta &lt;strong&gt;codigo&lt;/strong&gt; en el &lt;a href="https://github.com/elizabethfuentes12/Iniciando_SagemakerML"&gt;GitHub&lt;/a&gt; creado para este tutorial en la celda de código de su instancia y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt; o las teclas &lt;strong&gt;Shift+Enter&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# import libraries
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_execution_role&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;                                
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;                               
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;                   
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;                 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;               
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gmtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;                 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker.predictor&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;csv_serializer&lt;/span&gt;   
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sagemaker&lt;/span&gt;


&lt;span class="c1"&gt;# Define IAM role
&lt;/span&gt;&lt;span class="n"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_execution_role&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'sagemaker/DEMO-xgboost-dm'&lt;/span&gt;
&lt;span class="n"&gt;containers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'us-west-2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'433757028032.dkr.ecr.us-west-2.amazonaws.com/xgboost:latest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s"&gt;'us-east-1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'811284229777.dkr.ecr.us-east-1.amazonaws.com/xgboost:latest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s"&gt;'us-east-2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'825641698319.dkr.ecr.us-east-2.amazonaws.com/xgboost:latest'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s"&gt;'eu-west-1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'685385470294.dkr.ecr.eu-west-1.amazonaws.com/xgboost:latest'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;# each region has its XGBoost container
&lt;/span&gt;&lt;span class="n"&gt;my_region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;region_name&lt;/span&gt; &lt;span class="c1"&gt;# set the region of the instance
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Success - the MySageMakerInstance is in the "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;my_region&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" region. You will use the "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;my_region&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" container for your SageMaker endpoint."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al finalizar debe verse como la imagen a continuación:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qug7jKbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifrztazita5vp8vmlgy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qug7jKbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifrztazita5vp8vmlgy8.png" alt="3c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3d"&gt;
  &lt;/a&gt;
  3d.
&lt;/h3&gt;

&lt;p&gt;En este paso, creará un bucket de S3 que almacenará sus datos para este tutorial.&lt;/p&gt;

&lt;p&gt;Copie el siguiente código en la próxima celda de código de su bloc de notas y cambie el nombre del bucket de S3 para que sea único. Los nombres de los buckets de S3 deben ser únicos a nivel mundial y, además, deben contar con algunas restricciones y limitaciones.&lt;/p&gt;

&lt;p&gt;Seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;. Si no recibe un mensaje de finalización exitosa, cambie el nombre del bucket y vuelva a intentarlo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'your-s3-bucket-name'&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;--- CHANGE THIS VARIABLE TO A UNIQUE NAME FOR YOUR BUCKET
&lt;/span&gt;&lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="n"&gt;my_region&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'us-east-1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
      &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CreateBucketConfiguration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'LocationConstraint'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my_region&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'S3 bucket created successfully'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'S3 error: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3e"&gt;
  &lt;/a&gt;
  3e.
&lt;/h3&gt;

&lt;p&gt;A continuación, debe descargar los datos en su instancia de Amazon SageMaker y cargarlos en un marco de datos. Copie y &lt;strong&gt;Ejecute&lt;/strong&gt; el siguiente código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://d1.awsstatic.com/tmt/build-train-deploy-machine-learning-model-sagemaker/bank_clean.27f01fbbdf43271788427f3682996ae29ceca05d.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bank_clean.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Success: downloaded bank_clean.csv.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Data load error: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;model_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'./bank_clean.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Success: Data loaded into dataframe.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Data load error: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Si la descarga es exitosa debe ver el siguiente mensaje: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xFzycL6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/665vf0llnsmicr1sbmwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xFzycL6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/665vf0llnsmicr1sbmwj.png" alt="3e"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y el siguiente archivo aparecera en su instancia:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fMYK9JGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9e1fg90z6nkvqaxdqyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fMYK9JGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9e1fg90z6nkvqaxdqyt.png" alt="3e2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Con las siguientes columnas y datos binarios en ellas:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiEOWaCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hupo71zayliyac46q119.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiEOWaCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hupo71zayliyac46q119.png" alt="bank_clean"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3f"&gt;
  &lt;/a&gt;
  3f.
&lt;/h3&gt;

&lt;p&gt;Ahora, mezclaremos los datos y los dividiremos en datos de entrenamiento y de prueba.&lt;/p&gt;

&lt;p&gt;Los &lt;strong&gt;datos de entrenamiento&lt;/strong&gt; (el 70 % de los clientes) se utilizarán durante el ciclo de entrenamiento del modelo. Utilizaremos la optimización basada en gradientes para refinar de forma iterativa los parámetros del modelo. La optimización basada en gradientes es una forma de encontrar valores de parámetros del modelo que minimicen sus errores, mediante el uso de gradientes de la función de pérdida del modelo.&lt;/p&gt;

&lt;p&gt;Los &lt;strong&gt;datos de prueba&lt;/strong&gt; (el 30 % restante de los clientes) se utilizarán para evaluar el rendimiento del modelo y para medir el nivel de generalización de los datos nuevos del modelo entrenado.&lt;/p&gt;

&lt;p&gt;Copie el siguiente código en una nueva celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt; para mezclar y dividir los datos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frac&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1729&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="p"&gt;))])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-4-entrene-el-modelo-con-los-datos"&gt;
  &lt;/a&gt;
  Paso 4: Entrene el modelo con los datos
&lt;/h2&gt;

&lt;p&gt;En este paso, entrenará su modelo de aprendizaje automático con el conjunto de datos de entrenamiento. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4a"&gt;
  &lt;/a&gt;
  4a.
&lt;/h3&gt;

&lt;p&gt;Para utilizar un modelo XGBoost prediseñado de Amazon SageMaker, deberá cambiar el formato del encabezado y la primera columna de los datos de entrenamiento y cargar los datos desde el bucket de S3.&lt;/p&gt;

&lt;p&gt;Copie el siguiente código en una nueva celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt; para cambiar el formato y cargar los datos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'y_yes'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'y_no'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y_yes'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'train.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'train/train.csv'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'train.csv'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker.inputs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TrainingInput&lt;/span&gt;

&lt;span class="n"&gt;s3_input_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TrainingInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s3_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'s3://{}/{}/train'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'csv'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Crea el siguiente archivo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHlojyPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uju03falj3iktxqvcu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHlojyPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uju03falj3iktxqvcu7.png" alt="4a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4b"&gt;
  &lt;/a&gt;
  4b.
&lt;/h3&gt;

&lt;p&gt;A continuación, deberá configurar la sesión de Amazon SageMaker, crear una instancia del modelo XGBoost (un estimador) y definir los &lt;a href="https://docs.aws.amazon.com/es_es/sagemaker/latest/dg/xgboost_hyperparameters.html"&gt;hiperparámetros&lt;/a&gt; del modelo. Copie el siguiente código en una nueva celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;xgb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;estimator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Estimator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;my_region&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                    &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                    &lt;span class="n"&gt;instance_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;output_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'s3://{}/{}/output'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;sagemaker_session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_hyperparameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;eta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;min_child_weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;subsample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;objective&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'binary:logistic'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num_round&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4c"&gt;
  &lt;/a&gt;
  4c.
&lt;/h3&gt;

&lt;p&gt;Con los datos cargados y el estimador XGBoost configurado, entrene el modelo a través de la optimización basada en gradientes en una instancia &lt;strong&gt;ml.m4.xlarge&lt;/strong&gt;; copie el siguiente código en la próxima celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'train'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s3_input_train&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luego de algunos minutos, debería comenzar a ver los registros de entrenamiento que se generen.&lt;/p&gt;

&lt;p&gt;Inicia: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBnVjFol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82gs27vqlbziemd0k2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBnVjFol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j82gs27vqlbziemd0k2t.png" alt="4c1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finaliza: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8JHvnKT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ek4hmgyap7p8vofbkfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JHvnKT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ek4hmgyap7p8vofbkfu.png" alt="4c2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En la imagen anterior podemos ver que el entrenamiento duro 47 segundos, que es lo que se cobrara por la maquina usada en el contenedor. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paso-5-implemente-el-modelo"&gt;
  &lt;/a&gt;
  Paso 5: Implemente el modelo
&lt;/h2&gt;

&lt;p&gt;En este paso, implementará el modelo entrenado en un punto de enlace, cambiará el formato y cargará los datos CSV. Luego, ejecutará el modelo para crear predicciones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5a"&gt;
  &lt;/a&gt;
  5a.
&lt;/h3&gt;

&lt;p&gt;Para implementar el modelo en un servidor y crear un punto de enlace al que pueda acceder, copie el siguiente código en la próxima celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;xgb_predictor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial_instance_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;instance_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Al finalizar debe verse asi:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWHhFoxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pidyc5dwp8e3apf5u73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWHhFoxt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pidyc5dwp8e3apf5u73.png" alt="5a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tambien lo puedes visualizar en &lt;strong&gt;Interferencia&lt;/strong&gt; --&amp;gt; &lt;strong&gt;Puntos de enlace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Mu02g7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01es8ra9u6vkat4dpc4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Mu02g7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01es8ra9u6vkat4dpc4q.png" alt="5a2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5b"&gt;
  &lt;/a&gt;
  5b.
&lt;/h3&gt;

&lt;p&gt;Para predecir si los clientes de los datos de prueba se inscribieron o no en el producto del banco, copie el siguiente código en la próxima celda de código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CSVSerializer&lt;/span&gt;

&lt;span class="n"&gt;test_data_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'y_no'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'y_yes'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="c1"&gt;#load the data into an array
&lt;/span&gt;
&lt;span class="c1"&gt;#xgb_predictor.content_type = 'text/csv' # set the data type for an inference
&lt;/span&gt;&lt;span class="n"&gt;xgb_predictor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'text/csv'&lt;/span&gt; &lt;span class="c1"&gt;# set the data type for an inference
&lt;/span&gt;&lt;span class="n"&gt;xgb_predictor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CSVSerializer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# set the serializer type
&lt;/span&gt;&lt;span class="n"&gt;predictions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xgb_predictor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_data_array&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# predict!
&lt;/span&gt;&lt;span class="n"&gt;predictions_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# and turn the prediction into an array
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions_array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-6-eval%C3%BAe-el-rendimiento-del-modelo"&gt;
  &lt;/a&gt;
  Paso 6. Evalúe el rendimiento del modelo
&lt;/h2&gt;

&lt;p&gt;En este paso, evaluará el rendimiento y la precisión del modelo de aprendizaje automático.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6a"&gt;
  &lt;/a&gt;
  6a.
&lt;/h3&gt;

&lt;p&gt;Copie y pegue el siguiente código y seleccione &lt;strong&gt;Ejecutar&lt;/strong&gt; para comparar los valores reales con los valores predichos en una tabla denominada &lt;strong&gt;matriz de confusión&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crosstab&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'y_yes'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;predictions_array&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rownames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Observed'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;colnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Predicted'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;tn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;{0:&amp;lt;20}{1:&amp;lt;4.1f}%&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Tasa de clasificación general: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0:&amp;lt;15}{1:&amp;lt;15}{2:&amp;gt;8}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Predictor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"No Inscritos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Inscritos"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Observed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0:&amp;lt;15}{1:&amp;lt;2.0f}% ({2:&amp;lt;}){3:&amp;gt;6.0f}% ({4:&amp;lt;})"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No Inscritos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{0:&amp;lt;16}{1:&amp;lt;1.0f}% ({2:&amp;lt;}){3:&amp;gt;7.0f}% ({4:&amp;lt;}) &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inscritos"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tn&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El resultado del comando anterior es algo parecido a esto: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CO6oLYKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfwdb74fmgzj1o83oi1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CO6oLYKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfwdb74fmgzj1o83oi1x.png" alt="6a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En función de las predicciones, podemos concluir que se predijo que el 89.5% de los clientes se  inscribiría para un certificado de depósito, con una precisión del 65 % (278/429) para los inscritos y del 90 % (10 785/11 928) para los no inscritos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6b"&gt;
  &lt;/a&gt;
  6b.
&lt;/h3&gt;

&lt;p&gt;Este modelo es bueno para predecir los clientes no inscritos, pero no  para los inscritos.&lt;/p&gt;

&lt;p&gt;El desempeño del modelo depende de la métrica y del objetivo que tenga, por ejemplo el modelo que predice SPAM lo que interesa es que no pasen los correos validos a spam, no importa recibir uno que otro spam en el inbox. Eso significa que puedo sacrificar un poco de falsos negativos (spam en el inbox) para minimizar los falsos positivos (correos validos a spam). &lt;/p&gt;

&lt;p&gt;Para optimizar y llegar el desempeño óptimo debemos iterar el modelo, en una primera instancia cambiando los hiperparámetros para ver si otras combinaciones permiten entrenar un modelo que entregue mejores predicciones.&lt;/p&gt;

&lt;p&gt;Los hiperparámetros ajustables del modelo XGBoost son los siguientes: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca6LTjyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkv511gwrf7z38skc3ak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ca6LTjyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkv511gwrf7z38skc3ak.png" alt="6b"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Los hiperparámetros que tienen el mayor efecto en la optimización de las métricas de evaluación de XGBoost son: alpha, min_child_weight, subsample eta, y num_round.&lt;/p&gt;

&lt;p&gt;Sagemaker cuenta con una herramienta que permite automatizar todas estas entrenamientos de distintas combinaciones de HP el Trabajo de Ajuste de HP (HP Tunning JOB). Lo que hace es realizar un entrenamiento por cada combinación de HP que le digamos y nos entrega la mejor combinación de HP (que tiene la mejor métrica que le hayamos indicado)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adicional"&gt;
  &lt;/a&gt;
  Adicional
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#para-desplegar-un-endpoint-a-partir-de-un-modelo-entrenado-por-un-trabajo-en-entrenamiento-de-sagemaker"&gt;
  &lt;/a&gt;
  Para desplegar un endpoint a partir de un modelo entrenado por un trabajo en entrenamiento de SageMaker:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Para instanciar el modelo
&lt;/span&gt;&lt;span class="n"&gt;model_from_job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;estimator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Estimator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"xgboost-2021-04-21-02-30-09-428"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;sagemaker_session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#para-lanzar-el-modelo-en-el-contenedor-al-igual-que-el-paso-5a-y-puedes-continuar-con-el-resto-de-los-pasos"&gt;
  &lt;/a&gt;
  Para lanzar el modelo en el contenedor. Al igual que el paso 5a y puedes continuar con el resto de los pasos.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;model_from_job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial_instance_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;instance_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'ml.m4.xlarge'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#para-importar-tu-propio-modelo-entrenado-a-sagemaker"&gt;
  &lt;/a&gt;
  Para importar tu propio modelo entrenado a SageMaker
&lt;/h3&gt;

&lt;p&gt;Primero lo debes subir a S3&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sagemaker.mxnet.model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MXNetModel&lt;/span&gt;

&lt;span class="n"&gt;sagemaker_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MXNetModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'s3://path/to/model.tar.gz'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'arn:aws:iam::accid:sagemaker-role'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                             &lt;span class="n"&gt;entry_point&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'entry_point.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#paso-7-termine-los-recursos"&gt;
  &lt;/a&gt;
  Paso 7: Termine los recursos
&lt;/h2&gt;

&lt;p&gt;En este paso, terminará los recursos relacionados con Amazon SageMaker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; Terminar los recursos que no se utilizan de forma activa reduce los costos, y es una práctica recomendada. No terminar sus recursos generará cargos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7a"&gt;
  &lt;/a&gt;
  7a.
&lt;/h3&gt;

&lt;p&gt;Para eliminar el punto de enlace de Amazon SageMaker y los objetos de su bucket de S3, copie, pegue y &lt;strong&gt;Ejecute&lt;/strong&gt; el siguiente código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sagemaker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;delete_endpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xgb_predictor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bucket_to_delete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'s3'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bucket_to_delete&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para finalizar debes detener la instancia para evitar cargos adicionales, y si no la vas a utilizar más la puedes eliminar. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#felicitaciones"&gt;
  &lt;/a&gt;
  ¡Felicitaciones!
&lt;/h2&gt;

&lt;p&gt;Ha aprendido a utilizar Amazon SageMaker para preparar, entrenar, implementar y evaluar un modelo aprendizaje automático. Amazon SageMaker facilita la creación de modelos de aprendizaje automático y le proporciona todo lo necesario para conectarse rápidamente con los datos de entrenamiento y para seleccionar el mejor algoritmo y marco de trabajo para su aplicación, mientras administra la infraestructura subyacente completa, de manera que pueda entrenar modelos a escala de petabytes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ejemplos-aws-sagemaker"&gt;
  &lt;/a&gt;
  Ejemplos AWS Sagemaker
&lt;/h2&gt;

&lt;p&gt;Para que continues aprendiendo te dejo un link con varios ejemplos para practicar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aws/amazon-sagemaker-examples"&gt;https://github.com/aws/amazon-sagemaker-examples&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip"&gt;
  &lt;/a&gt;
  Tip
&lt;/h2&gt;

&lt;p&gt;La fuente original de este tutorial esta en una verion 1.X de XGBoost por lo que saltan algunos errores como el de la imagen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6stM74ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txl889fhlk75h6imka0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6stM74ri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txl889fhlk75h6imka0w.png" alt="error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Para corregirlos debes revisar la documentación de la &lt;a href="https://sagemaker.readthedocs.io/en/stable/v2.html"&gt;version 2 de XGBoost&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Esto lo puedes aplicar en errores similares en ejemplos de otros algoritmos.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
      <category>python</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Manage your meetings like a boss with self-hosted calender</title>
      <author>Karolis</author>
      <pubDate>Sat, 02 Oct 2021 21:12:12 +0000</pubDate>
      <link>https://dev.to/krusenas/manage-your-meetings-like-a-boss-with-self-hosted-calender-4hlb</link>
      <guid>https://dev.to/krusenas/manage-your-meetings-like-a-boss-with-self-hosted-calender-4hlb</guid>
      <description>&lt;p&gt;Calendly and other scheduling tools are awesome. It made our lives massively easier. We're using it for business meetings, side projects and anything else where we need some flexible coordination. However, most tools are very limited in terms of control, customization, data protection, and most important - they are not free! That's where Calendso &amp;amp; Synpse come in. Self-hosted, all your data sitting on your own machines. API-driven and ready to be deployed on your own domain. Full control of your events and data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this tutorial we will be deploying a self-hosted Calendso instance that lives under your own DNS domain. You will be able to share meeting links such as &lt;a href="https://calendar.synpse.net/karolis/quick-chat"&gt;https://calendar.synpse.net/karolis/quick-chat&lt;/a&gt; with your colleagues, clients and friends:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izAcsMpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6myuf6j24ngkxg7qv7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izAcsMpn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6myuf6j24ngkxg7qv7z.png" alt="calendso-karolis"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will also be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrate it with your Google calendar &lt;/li&gt;
&lt;li&gt;Create multiple users for your organization&lt;/li&gt;
&lt;li&gt;Create teams&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The setup
&lt;/h2&gt;

&lt;p&gt;Deployment will be handled in a declarative way through Synpse. Incoming traffic will be handled by &lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt; server which will terminate HTTPS (it will also automatically retrieve TLS certificates for you) and route traffic to &lt;a href="https://cal.com/"&gt;Calendso&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also be able to access &lt;a href="https://www.prisma.io/studio"&gt;Prisma Studio&lt;/a&gt; locally to create your and your team's users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://cloud.synpse.net"&gt;Synpse account&lt;/a&gt; - Deployment&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudflare.com"&gt;Cloudflare account&lt;/a&gt; - DNS (or any other DNS provider)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don't have your own DNS domain, just jump in our Discord channel and I will help you out with some alternatives (you can either use Webhook Relay's subdomains or use services like DuckDNS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-dns"&gt;
  &lt;/a&gt;
  Configure DNS
&lt;/h2&gt;

&lt;p&gt;If you are using Cloudflare, creating an A record looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjlYnQNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxq5di9bxi85vrb3e43h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjlYnQNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxq5di9bxi85vrb3e43h.png" alt="a-record"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can consult your DNS provider's documentation on managing A records.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-port-forwarding-on-your-router-optional"&gt;
  &lt;/a&gt;
  Configure port forwarding on your router (optional)
&lt;/h2&gt;

&lt;p&gt;If you server where you are setting this up is within your local network, you will need to expose it to the internet. The easy way to do it is just using your own router to forward the ports:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ajd6pzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19mbva0jr22ss7wope8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ajd6pzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19mbva0jr22ss7wope8b.png" alt="port-forward"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't have a static IP or your network is behind a CGNAT, you can use &lt;a href="https://webhookrelay.com"&gt;https://webhookrelay.com&lt;/a&gt; instead. We will be providing a tutorial on that setup as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#integrating-with-google-calendar"&gt;
  &lt;/a&gt;
  Integrating with Google calendar
&lt;/h2&gt;

&lt;p&gt;Bookings are great but it would be tedious to check your Calendso instance every day. To allow Calendso to read from and write to our Google calendar, we need to create API credentials and provide them to Calendso. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-the-api"&gt;
  &lt;/a&gt;
  Enable the API
&lt;/h3&gt;

&lt;p&gt;To do that, head to the Google API console and create a new project. It might take a little bit for Google to set up your project but once that's done, head over to the project and click the Enable APIs and Services button.&lt;/p&gt;

&lt;p&gt;Once you click the button, you'll be taken to the API library. In the search box, look for calendar and select the Google Calendar API result and then enable it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retrieve-credentials"&gt;
  &lt;/a&gt;
  Retrieve credentials
&lt;/h3&gt;

&lt;p&gt;Next, let's head to our credentials page in the Google API console so we can create the Calendso OAuth ID and add our production origin and redirect URI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77sRjGWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jmjgjwhet5u7f1t3aoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77sRjGWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jmjgjwhet5u7f1t3aoz.png" alt="gcp-creds"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your key will be created and you'll be redirected back to the Credentials page where you will see your newly generated OAuth 2.0 Client ID. Select the download option and save this file to your computer. Copy all the contents of the file and add that as the value for the GOOGLE_API_CREDENTIALS environment variable:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GLZr0Kez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nnbov8g9lkka5xa649y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GLZr0Kez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nnbov8g9lkka5xa649y.png" alt="gcp-creds-secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-through-synpse"&gt;
  &lt;/a&gt;
  Deploy through Synpse
&lt;/h2&gt;

&lt;p&gt;With Synpse we will be deploying multiple containers to provide us with admin capabilities, database, tunneling (to expose it to the internet) and the Calendso itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preparing-the-secrets"&gt;
  &lt;/a&gt;
  Preparing the secrets
&lt;/h3&gt;

&lt;p&gt;First, go to your secrets page and create:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;calendsoPostgres&lt;/strong&gt; with your database password&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;calendsoPostgresConnString&lt;/strong&gt; with &lt;code&gt;postgresql://calendso:PASSWORD@postgres:5432/calendso&lt;/code&gt; (just replace PASSWORD with your database password)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;calendsoEncKey&lt;/strong&gt; with a random key that you generate yourself. You can generate one in your terminal with command &lt;code&gt;openssl rand -base64 32&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eoxn9Vqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipy3qvmnyw8iyjemtnf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eoxn9Vqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipy3qvmnyw8iyjemtnf7.png" alt="secrets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-application"&gt;
  &lt;/a&gt;
  Creating the application
&lt;/h3&gt;

&lt;p&gt;The full spec looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Name of your app&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;synpse-calendso&lt;/span&gt;
&lt;span class="na"&gt;scheduling&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Conditional&lt;/span&gt;
  &lt;span class="c1"&gt;# Need to match your labels&lt;/span&gt;
  &lt;span class="c1"&gt;# Ref: https://docs.synpse.net/synpse-core/applications/scheduling&lt;/span&gt;
  &lt;span class="na"&gt;selectors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;controller&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;calendso&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ctadeu/calendso:0.0.17-1&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;BASE_URL&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://calendar.synpse.net&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NEXTAUTH_URL&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://calendar.synpse.net&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;DATABASE_URL&lt;/span&gt;
          &lt;span class="na"&gt;fromSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;calendsoPostgresConnString&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CALENDSO_ENCRYPTION_KEY&lt;/span&gt;
          &lt;span class="na"&gt;fromSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;calendsoEncKey&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GOOGLE_API_CREDENTIALS&lt;/span&gt;
          &lt;span class="na"&gt;fromSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;calendsoGoogleApiCredentials&lt;/span&gt;
      &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prisma&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;codejamninja/prisma-studio:latest&lt;/span&gt;
      &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;5555:5555&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_URL&lt;/span&gt;
          &lt;span class="na"&gt;fromSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;calendsoPostgresConnString&lt;/span&gt;
      &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;postgres:latest&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/data/calendso-postgres:/var/lib/postgresql/data&lt;/span&gt;
      &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PGDATA&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/var/lib/postgresql/data/pgdata&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;calendso&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;calendso&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD&lt;/span&gt;
          &lt;span class="na"&gt;fromSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;calendsoPostgres&lt;/span&gt;
      &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
    &lt;span class="c1"&gt;# Caddy provides HTTPS&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;caddy&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;caddy:latest&lt;/span&gt;
      &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;caddy&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;reverse-proxy&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--from&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;calendar.synpse.net:7300&lt;/span&gt; &lt;span class="c1"&gt;# This should be your domain and port, same as in your router&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;--to&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;calendso:3000&lt;/span&gt;
      &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;7300:7300&lt;/span&gt;
      &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/data/calendso-caddy:/data&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;/data/calendso-caddy-cfg:/config&lt;/span&gt;
      &lt;span class="na"&gt;restartPolicy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you click on Allocations, you should see all containers running and in device details you can see the ports:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--POdo92ea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5goljuhlg5vkjaztjuxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--POdo92ea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5goljuhlg5vkjaztjuxn.png" alt="synpse-device"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click on Prisma and if your device is locally reachable, you will be able to access the admin dashboard.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note, that if your device is exposed to the internet, you should not leave the Prisma container with the port exposed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once in Prisma, follow the official guide from &lt;a href="https://docs.cal.com/docs/self-hosting/docker"&gt;self-hosting section&lt;/a&gt; and:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on the User model to add a new user record.&lt;/li&gt;
&lt;li&gt;Fill out the fields (remembering to encrypt your password with &lt;a href="https://bcrypt-generator.com/"&gt;BCrypt&lt;/a&gt;) and click Save 1 Record to create your first user.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have logged in, go to the integrations section and connect it with the Google's calendar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Calendso docs: &lt;a href="https://docs.cal.com/"&gt;https://docs.cal.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Synpse docs: &lt;a href="https://docs.synpse.net"&gt;https://docs.synpse.net&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Webhook Relay docs: &lt;a href="https://docs.webhookrelay.com"&gt;https://docs.webhookrelay.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Cloudflare: &lt;a href="https://cloudflare.com"&gt;https://cloudflare.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://synpse.net/blog/self-hosting-calendso-caddy/"&gt;https://synpse.net/blog/self-hosting-calendso-caddy/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>opensource</category>
      <category>showdev</category>
      <category>devops</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Introduction to JavaScript with Simple Tutorial</title>
      <author>MahoMori</author>
      <pubDate>Sat, 02 Oct 2021 20:56:37 +0000</pubDate>
      <link>https://dev.to/mahomori/introduction-to-javascript-with-simple-tutorial-3ln6</link>
      <guid>https://dev.to/mahomori/introduction-to-javascript-with-simple-tutorial-3ln6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Okay, you studied the core of HTML and CSS, and can create simple websites now. ...What next? Oh, JavaScript.&lt;/p&gt;

&lt;p&gt;I assume that is the natural thinking process when you start to learn how to create websites. So you start studying JavaScript.&lt;br&gt;
After several hours of going through JavaScript material, one question will cross your mind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How JavaScript work with HTML and CSS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will give you an idea of how you can use JavaScript with HTML and CSS.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#overview-of-walkthrough"&gt;
  &lt;/a&gt;
  Overview of walkthrough
&lt;/h2&gt;

&lt;p&gt;You will be creating a simple website that you can enter a specific year, month and day and it will show you the date.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--21SEE5vX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqo6oig0pc1jixil1sud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--21SEE5vX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqo6oig0pc1jixil1sud.png" alt="final image"&gt;&lt;/a&gt;&lt;em&gt;This is how it will look like.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;Create HTML, CSS and JavaScript files. Copy and paste codes below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"outer-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"year"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"year (yyyy)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"month"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"month (mm)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"date (dd)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Check&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;cadetblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.outer-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#141414&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you are done copying and pasting, it will look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gX_XbWGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wnzpu33ib7mmf6m8ve8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gX_XbWGB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wnzpu33ib7mmf6m8ve8.png" alt="After copying and pasting"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-queryselector"&gt;
  &lt;/a&gt;
  Step 1: querySelector()
&lt;/h2&gt;

&lt;p&gt;You will want to execute a function that shows date when you click a button. To interact with HTML elements, you need to select them in JavaScript.&lt;br&gt;
Write this line below in JavaScript file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are selecting a button element with &lt;code&gt;document.querySelector()&lt;/code&gt; and assigning it to &lt;code&gt;btn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;querySelector()&lt;/code&gt; method is useful as you can use not only element names, but also ids and class names.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.class&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are also &lt;code&gt;getElementById()&lt;/code&gt; and &lt;code&gt;getElementsByClassName()&lt;/code&gt; methods to select ids and classes specifically. When using these methods, you don't need "#" and "." before name.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-addeventlistener"&gt;
  &lt;/a&gt;
  Step 2: addEventListener()
&lt;/h2&gt;

&lt;p&gt;Next step is to assign an event to execute when the button is clicked.&lt;br&gt;
Copy and paste the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The codes that are written inside &lt;code&gt;function&lt;/code&gt; will be executed when the button is clicked.&lt;br&gt;
There are several other events such as &lt;code&gt;mouseover&lt;/code&gt;. You can check some of them &lt;a href="https://www.w3schools.com/jsref/met_element_addeventlistener.asp"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3-retrieving-value-inside-raw-input-endraw-"&gt;
  &lt;/a&gt;
  Step 3: Retrieving value inside &lt;code&gt;input&lt;/code&gt;
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#month&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we are combining &lt;code&gt;querySelector&lt;/code&gt; method and &lt;code&gt;.value&lt;/code&gt; to get value from inputs. Also, we are selecting &lt;code&gt;h2&lt;/code&gt; element to show a result.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-4-date-object"&gt;
  &lt;/a&gt;
  Step 4: Date() Object
&lt;/h2&gt;

&lt;p&gt;For calculating day from entered year, month and date, we will pass these values to Date() object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#month&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pass arguments and create an instance of Day().&lt;br&gt;
Giving a small explanation of Day() function, it returns current time when no arguments are passed. It has several methods to acquire hours, milliseconds and such. (Read &lt;a href="https://www.w3schools.com/jsref/jsref_obj_date.asp"&gt;this&lt;/a&gt; for reference.)&lt;br&gt;
If you check one part of code, which is &lt;code&gt;const day = new Date(year, month-1, date)&lt;/code&gt;, you might wonder why month is decreased by 1. This is because of the uniqueness of Day() object.&lt;br&gt;
It returns month and day with numbers. For example, January is 0, February is 1, March is 2... and so on. That is why we need to decrease month input by 1.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-5-textcontent"&gt;
  &lt;/a&gt;
  Step 5: textContent
&lt;/h2&gt;

&lt;p&gt;Finally, we will reflect the result to the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#month&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;daysList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sunday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tuesday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wednesday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thursday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Friday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saturday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;daysList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break it down. Continuing from Step 4, I'll explain &lt;code&gt;getDay()&lt;/code&gt; first.&lt;br&gt;
At the last sentence, you can see &lt;code&gt;text.textContent = daysList[day.getDay()]&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;getDay()&lt;/code&gt; is a method for Date() that returns day in numbers. Starting from Sunday which is 0, Monday is 1, Tuesday is 2... just like how numbers are assigned to each months.&lt;br&gt;
To easily understand the result, we create an array, which is &lt;code&gt;daysList&lt;/code&gt; in our code. &lt;code&gt;day.getDay()&lt;/code&gt; becomes an index in &lt;code&gt;daysList&lt;/code&gt; and is assinged to &lt;code&gt;text.textContent&lt;/code&gt;.&lt;br&gt;
This &lt;code&gt;textContent&lt;/code&gt; is selecting inside text of &lt;code&gt;h2&lt;/code&gt; element so that when button is clicked, the result will be shown on screen.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The whole JavaScript code should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#month&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;daysList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sunday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tuesday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wednesday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thursday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Friday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Saturday&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;daysList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did it work?&lt;br&gt;
There are still a lot to improve. Even if you don't enter anything or month and date inputs are not between 1 - 12 and 1 - 31, it still returns something. &lt;br&gt;
However, this tutorial is to give a rough idea of interacting with HTML through JavaScript. You can expand and go beyond from here.&lt;/p&gt;

&lt;p&gt;I hope you are now a little familiar with DOM!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Github Actions - Introdução com Java</title>
      <author>Wesley Egberto</author>
      <pubDate>Sat, 02 Oct 2021 20:37:05 +0000</pubDate>
      <link>https://dev.to/wesleyegberto/github-actions-introducao-com-java-1g4m</link>
      <guid>https://dev.to/wesleyegberto/github-actions-introducao-com-java-1g4m</guid>
      <description>&lt;p&gt;Github Actions nos permite automatizar, customizar e executar workflows do desenvolvimento de software diretamente no repositório do projeto.&lt;/p&gt;

&lt;p&gt;Podemos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rodar o build continuamente&lt;/li&gt;
&lt;li&gt;executar testes automatizados a cada push&lt;/li&gt;
&lt;li&gt;executar processo de CI completo&lt;/li&gt;
&lt;li&gt;executar processo de CD para diversas clouds e ambientes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O Github Actions possui uma ampla biblioteca de Actions que nos permites executar diversos tipos de ações (desde simples build da aplicação até o build da sua imagem Docker e deploy no seu cluster Kubernetes na AWS).&lt;/p&gt;

&lt;p&gt;Os jobs do Github Actions são orientados à eventos, isso significa que você pode configurar a execução de determinado job a partir de uma determinada ação (push, PR, merge) no seu repositório.&lt;/p&gt;

&lt;p&gt;O Github Actions possui uma camada free que nos disponibiliza um tempo de execução mensal dos jobs e um período de retenção dos logs de forma limitada, detalhes podem ser acessados &lt;a href="https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits"&gt;aqui&lt;/a&gt;.&lt;br&gt;
No plano Enterprise do Github, é possível adicionar processo de aprovação em ambientes no workflow a fim de limitar quem pode fazer o quê em determinados ambientes.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#componentes"&gt;
  &lt;/a&gt;
  Componentes
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#workflows"&gt;
  &lt;/a&gt;
  Workflows
&lt;/h3&gt;

&lt;p&gt;Um workflow é um procedimento declarado e automatizado que adicionamos no repositório através de um arquivo YAML.&lt;br&gt;
Um workflow é composto de um ou mais jobs que podem ser agendados ou iniciados por um ou mais eventos.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h3&gt;

&lt;p&gt;Um evento é uma ação específica que pode disparar um ou mais jobs dos workflows declarados no repositório.&lt;br&gt;
Essa ação pode ser um push, PR ou merge efetuado no repositório.&lt;/p&gt;

&lt;p&gt;Na &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows"&gt;documentação do Github&lt;/a&gt;, tem a lista de ações disponíveis que podemos utilizar para disparar um workflow.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#job"&gt;
  &lt;/a&gt;
  Job
&lt;/h3&gt;

&lt;p&gt;Um job é composto por um ou mais steps que executam em um mesmo runner de forma sequencial a partir de determinado evento.&lt;br&gt;
Abaixo segue o diagrama mostrando a estrutura do job:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oNvStsVJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz52vci84k5apxzu2c3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNvStsVJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz52vci84k5apxzu2c3x.png" alt="Fonte: documentação do Github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Um workflow com mais de um job pode rodá-los em paralelos ou de forma sequencial, caso seja configurado.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rK-_1G02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0counwj1a3gsvlktiax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rK-_1G02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0counwj1a3gsvlktiax.png" alt="Fonte: documentação do Github"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#actions"&gt;
  &lt;/a&gt;
  Actions
&lt;/h3&gt;

&lt;p&gt;Action são comandos isolados que são combinados em steps para criar um job.&lt;br&gt;
Uma Action é o menor nível portável de um workflow, podemos criar e reutilizar Actions através de nossos repositórios ou compartilhar com a comunidade.&lt;br&gt;
Um Action sempre estará dentro de um step para poder ser executado no workflow.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#runner"&gt;
  &lt;/a&gt;
  Runner
&lt;/h3&gt;

&lt;p&gt;Um runner é um server que tem a runner application do Github Actions instalada.&lt;br&gt;
Podemos utilizar um runner hospedado pelo Github ou em nossa própria infraestrutura.&lt;br&gt;
Um runner busca jobs disponíveis, roda-os e reporta o progresso, logs e resultados para o repositório no Github.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#estrutura-do-workflow"&gt;
  &lt;/a&gt;
  Estrutura do Workflow
&lt;/h2&gt;

&lt;p&gt;O workflow é declarado em um arquivo YAML com um esquema de declaração do Github Actions para definir os eventos, jobs e seus steps.&lt;br&gt;
Esse arquivo YAML fica armazenado junto à aplicação no repositório do Github e em seu próprio diretório, localizado em &lt;code&gt;.github/workflows/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Quando ocorre um push no repositório, o Github verifica se existe a pasta de workflows e, caso exista algum arquivo YAML, é criado os workflows no repositório.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#componentes-do-workflow"&gt;
  &lt;/a&gt;
  Componentes do Workflow
&lt;/h3&gt;

&lt;p&gt;Abaixo seguem alguns campos que podem ser utilizados no arquivo de workflow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt;: campo opcional que define o nome do workflow que será exibido no repositório.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;on&lt;/code&gt;: campo que define os eventos que irão disparar o seu workflow.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;jobs&lt;/code&gt;: campo que define os jobs deste workflow. O job tem os seguintes campos:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;runs-on&lt;/code&gt;: define o runner do job.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;steps&lt;/code&gt;: declara os steps do job. O step tem os seguintes campos:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uses&lt;/code&gt;: define qual action será utilizada neste step do job.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;with&lt;/code&gt;: podemos configurar alguns atributos que são utilizadas pela action definida.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;run&lt;/code&gt;: define o commando que será executado no runner.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Na &lt;a href="https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions"&gt;documentação do Github&lt;/a&gt; podemos ver toda sintaxe disponível para construir um workflow.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#primeiro-exemplo"&gt;
  &lt;/a&gt;
  Primeiro Exemplo
&lt;/h3&gt;

&lt;p&gt;Abaixo segue um exemplo de workflow (arquivo &lt;code&gt;.github/workflows/sample.yml&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Github Exemplo&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;check-bats-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install -g bats&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bats -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No workflow declaramos, em &lt;code&gt;on: [push]&lt;/code&gt;, que deverá rodar sempre que ocorrer um push em qualquer branch do repositório.&lt;br&gt;
Também é possível limitar as branches que queremos utilizar no disparo do workflow, exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt; &lt;span class="c1"&gt;# executa nos pushes na main&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;releases/**'&lt;/span&gt; &lt;span class="c1"&gt;# executa nas branches com prefixo `releases/`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Na &lt;a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows"&gt;documentação do Github&lt;/a&gt; podemos ver a variedade de opções de ações que podemos utilizar para disparar um workflow.&lt;/p&gt;

&lt;p&gt;No workflow também definimos o nosso workflow a executar os seguintes passos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;uses: actions/checkout@v2&lt;/code&gt;: efetua o git clone do nosso repositório;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uses: actions/setup-node@v2&lt;/code&gt;: utiliza um action para configurar o Nodejs v14;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;run: npm install -g bats&lt;/code&gt;: executa o Npm install para instalar o bats globalmente;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;run: bats -v&lt;/code&gt;: executa o bats instalado anteriomente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perceba que os steps do job são executados sequencialmente e os steps seguintes dependem do step anterior.&lt;br&gt;
Isso mostra que o estado do nosso runner é compartilhado dentro do job, logo, podemos instalar e configurar o runner para utilizar tudo que o nosso projeto dependa para fazer build e publicação.&lt;/p&gt;

&lt;p&gt;Alguns exemplos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configurar o Docker&lt;/li&gt;
&lt;li&gt;configurar credenciais da nossa cloud&lt;/li&gt;
&lt;li&gt;configurar versões das linguagens e ferramentas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Na aba Actions do repositório no Github é possível visualizar a execução desse workflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Olx3ifec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sg806gbjk9n9d4ueopt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Olx3ifec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sg806gbjk9n9d4ueopt.png" alt="Resultado do workflow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#exemplo-de-workflow-completo"&gt;
  &lt;/a&gt;
  Exemplo de Workflow Completo
&lt;/h2&gt;

&lt;p&gt;Para concretizar melhor o poder de introduzir o Github Actions no seu ciclo de vida de desenvolvimento de software.&lt;br&gt;
Vamos visualizar um exemplo de uma aplicação Java onde queremos definir um CI que faça o build, teste e publicação do nosso artefato gerado.&lt;/p&gt;

&lt;p&gt;O nosso projeto está utilizando o Maven como gerenciado de dependências e de build. Nele temos configurado os plugins necessários para executar os testes e gerar um relatório do resultado da execução e da cobertura em HTML. Também temos configurado o nosso repositório de artefatos para utilizar o Github Artifacts.&lt;/p&gt;

&lt;p&gt;Passos executados pelo workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;faça o build da aplicação&lt;/li&gt;
&lt;li&gt;rode os testes da aplicação&lt;/li&gt;
&lt;li&gt;armazene o resultado dos testes para podemos consultar posteriomente&lt;/li&gt;
&lt;li&gt;efetuar publicação do nosso artefado construído para o repositório&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;Abaixo segue o arquivo que define nosso workflow com os comentários demonstrados suas capactidades:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Java Workflow Example - Build, Test and Deploy&lt;/span&gt;

&lt;span class="c1"&gt;# configuramos para rodar apenas quando houver um push na master&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;master&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# `build` é o nome do job&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# nome para exibir no repositório&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build, Test and Deploy&lt;/span&gt;

    &lt;span class="c1"&gt;# utilizamos uma instância do ubuntu como runner&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# utilizamos a action checkout para fazer o git clone no runner&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="c1"&gt;# utilizamos a action setup-java para configurar a versão necessária do JDK&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up JDK &lt;/span&gt;&lt;span class="m"&gt;11&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-java@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;distribution&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;adopt'&lt;/span&gt;
          &lt;span class="na"&gt;java-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;
          &lt;span class="na"&gt;architecture&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;x64&lt;/span&gt;

      &lt;span class="c1"&gt;# aqui podemos configurar um cache para cachear as dependências do projeto,&lt;/span&gt;
      &lt;span class="c1"&gt;# isso vai permitir que as próximas execuções do workflow sejam mais rápidas&lt;/span&gt;
      &lt;span class="c1"&gt;# visto que as dependências já estarão disponibilizadas para o runner&lt;/span&gt;
      &lt;span class="c1"&gt;# nota: utilizamos um hash do arquivo POM.xml, então quando o alterarmos,&lt;/span&gt;
      &lt;span class="c1"&gt;# as dependências são baixadas novamente&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache Maven packages&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;~/.m2&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}&lt;/span&gt;
          &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-m2&lt;/span&gt;

      &lt;span class="c1"&gt;# aqui apenas definimos o commando para executar no runner&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Maven Test&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mvn test&lt;/span&gt;

      &lt;span class="c1"&gt;# aqui criamos a pasta para armazenar o relatório dos testes&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mkdir coverage-report &amp;amp;&amp;amp; cp -r target/site/jacoco/* coverage-report&lt;/span&gt;

      &lt;span class="c1"&gt;# aqui utilizamos um action para registrar o resultado do teste no nosso workflow,&lt;/span&gt;
      &lt;span class="c1"&gt;# caso ocorra alguma falha em algum teste, ficará explicito nos logs de execução aba Actions&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish Test Report&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ always() }}&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;scacap/action-surefire-report@v1&lt;/span&gt;

      &lt;span class="c1"&gt;# aqui utilizamos um action para fazer a publicação do relatório de testes,&lt;/span&gt;
      &lt;span class="c1"&gt;# esse relatório pode ser baixado nos detalhes de execução do workflow&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/upload-artifact@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test Coverage Report&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;coverage-report&lt;/span&gt;

      &lt;span class="c1"&gt;# fazemos construção e publicação do artefato construído&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Maven Build and Publish&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mvn -B deploy&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="c1"&gt;# com estamos utilizado o Github Artifact, passamos o token do repositório para fazer upload&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;

      &lt;span class="c1"&gt;# copiamos o artefato construído para uma pasta específica&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mkdir dist &amp;amp;&amp;amp; cp target/*.jar dist&lt;/span&gt;

      &lt;span class="c1"&gt;# aqui fazemos o publicação do artefato para que possa ser baixado nos detalhes de execução do workflow&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/upload-artifact@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Package&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O workflow acima é bem útil visto que tem todo nosso ciclo de desenvolvimento junto ao repositório, facilitando a visualização e entendimento de todos.&lt;/p&gt;

&lt;p&gt;Após executar o workflow podemos ver o seu resultado, como no exemplo abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51Wieqzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsf2pquhj97ehsnj57fz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51Wieqzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsf2pquhj97ehsnj57fz.png" alt="Resultado do workflow CI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E o Github também nos disponibiliza algumas páginas que nos permite construir alguns dashboards para incluir no README do nosso repositório, facilitando a visualização do histórico e estado atual do projeto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjgK7jDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3stc8fxk4lgvefzcvy6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjgK7jDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3stc8fxk4lgvefzcvy6.png" alt="Exemplo de dashboard de status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O projeto de exemplo utilizado aqui pode ser acessado no seus &lt;a href="https://github.com/wesleyegberto/gh-actions-java"&gt;repositório no Github&lt;/a&gt;, nele está o projeto Java e outros workflows que utilizei em diferentes testes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;O Github Actions é uma ferramenta bem interessante, muito versátil e de fácil customização e utilização.&lt;br&gt;
A grande vantagem que vejo é a enorme biblioteca de Actions disponbilizada pela comunidade e por fornecedores (Oracle, Microsoft, Google, Github, etc) que nos permitem fazer qualquer passo necessário.&lt;/p&gt;

&lt;p&gt;E por estar toda definida com uma sintaxe de fácil leitura e junto ao projeto, o ciclo de desenvolvimento fica claro para todos que estão na equipe, desde o estagiário até o sênior, o que facilita o onboarding e o compartilhamento de informações no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/wesleyegberto/gh-actions-java"&gt;Projeto de Exemplo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions"&gt;Documentação do Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits"&gt;Cobranças e Limites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>actions</category>
      <category>devops</category>
      <category>java</category>
    </item>
  </channel>
</rss>
