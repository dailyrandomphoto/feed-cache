<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Improving the esolang</title>
      <author>JavaCode7</author>
      <pubDate>Sat, 05 Jun 2021 14:16:12 +0000</pubDate>
      <link>https://dev.to/javacode7/improving-the-esolang-3eaa</link>
      <guid>https://dev.to/javacode7/improving-the-esolang-3eaa</guid>
      <description>&lt;p&gt;So I wrote an article making an esolang and got this comment:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raoJDUzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7oxtocleths4cf9z58d9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raoJDUzk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7oxtocleths4cf9z58d9.png" alt="The dev.to comment that instigated the writing of this article"&gt;&lt;/a&gt;&lt;br&gt;
Thanks to &lt;a class="mentioned-user" href="https://dev.to/olus2000"&gt;@olus2000&lt;/a&gt;
 for this comment.&lt;/p&gt;

&lt;p&gt;Here is the full code so far:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter your loo code here please &amp;gt; "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;lexed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this guide, I am going to add a quine (quine prints out the code), a way to specify how much you want to increment or decrement by putting a number between 1 and 9 inclusive before &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; and finally, I am going to add numeric printing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-quine"&gt;
  &lt;/a&gt;
  Step 1: quine
&lt;/h1&gt;

&lt;p&gt;The quine functionality can easily be implemented by adding another branch to the if statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-improving-raw-endraw-and-raw-endraw-"&gt;
  &lt;/a&gt;
  Step 2: improving &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;To make the changes to &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt;, we are going to have to modify the for loop. This must be done to make sure we can access the index. This will be useful later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, we then have to modify the &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; branches to make the changes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-numeric-printing"&gt;
  &lt;/a&gt;
  Step 3: numeric printing
&lt;/h1&gt;

&lt;p&gt;After the changes made in step 2, it is now possible to read other tokens given an offset. We are going to use this in numeric  printing as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lexed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there we have it! The esolang has been improved. I hope you like this article.&lt;/p&gt;

</description>
      <category>esolang</category>
      <category>esoteric</category>
    </item>
    <item>
      <title>Let's build a compiler!</title>
      <author>Siddharth</author>
      <pubDate>Sat, 05 Jun 2021 14:11:40 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/let-s-build-a-compiler-11c3</link>
      <guid>https://dev.to/siddharthshyniben/let-s-build-a-compiler-11c3</guid>
      <description>&lt;p&gt;Let's build a super simple compiler!&lt;/p&gt;

&lt;p&gt;In this series, I am going to show you how to build a compiler. This post is going to contain all the metadata for this series, and the next post onwards will explain all the concepts and stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-i-care"&gt;
  &lt;/a&gt;
  Why should I care?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are tons of compilers around you, and many important concepts can be taken from them.&lt;/li&gt;
&lt;li&gt;It's a fun side project (my reason)&lt;/li&gt;
&lt;li&gt;You might create a simple language which is faster to code in than javascript and save some time!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#but-they-seem-scary"&gt;
  &lt;/a&gt;
  But they seem scary!
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://github.com/jamiebuilds/the-super-tiny-compiler#but-compilers-are-scary"&gt;the super tiny compiler&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, they are. But that's our fault (the people who write compilers), we've taken something that is reasonably straightforward and made it so scary that most think of it as this totally unapproachable thing that only the nerdiest of the nerds are able to understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#ok-ok-im-in-what-exactly-are-we-building"&gt;
  &lt;/a&gt;
  Ok Ok, I'm in, what exactly are we building?
&lt;/h2&gt;

&lt;p&gt;We are going to build a compiler (basically a function which takes a string as input). The compiler compiles english like syntax into javascript. So if we:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Had to...&lt;/th&gt;
&lt;th&gt;We would...&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Declare a variable&lt;/td&gt;
&lt;td&gt;&lt;code&gt;let the variable variableName be 12.&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This may seem like nothing, but it is enough to show how a compiler works and its major parts. Also, I won't stop there. I will add more syntax to make it more fully fledged. &lt;/p&gt;

&lt;p&gt;That's all for now, see you in the next part!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Networking Series - CIDR Block</title>
      <author>Pradheepa P</author>
      <pubDate>Sat, 05 Jun 2021 13:46:47 +0000</pubDate>
      <link>https://dev.to/aws-builders/networking-series-cidr-286h</link>
      <guid>https://dev.to/aws-builders/networking-series-cidr-286h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Before working in serverless technologies, most of the applications I worked on were hosted on-prem. I used to interact with the infrastructure team and the questions they ask were sometimes not understandable to the application developers. The talk about firewall, ip addresses, ssl, ftp, connect direct connections are too much to comprehend initially. With serverless applications development though the application developer need not have to know about these terminologies, it's good to understand what's behind the scenes. &lt;/p&gt;

&lt;p&gt;AWS opens the doors for the application developers to know about the networking configuration used by their application. Usually in an on-prem applications the networking services are managed by a different team and the developers are not aware of the configuration. The interaction typically happens where the network team share the snippets of the logs whenever an error occurred connecting to our application. But with more applications being developed on cloud services, developers can at least access the lower environment configurations (dev or staging) which is usually mimicked to production. Let us start the series by getting to know what is a CIDR Block.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cidr-block-classless-interdomain-routing"&gt;
  &lt;/a&gt;
  CIDR Block (Classless Inter-Domain Routing)
&lt;/h3&gt;

&lt;p&gt;While creating VPC in AWS, the second step is to provide the IP CIDR block i.e the range of IP addresses to be allocated to this VPC. It is of the format 10.0.0.0/16 (IP address followed by / and a number). Most of us knew the IP address format but what does this number signify in CIDR Block. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OjiztGw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnkw9e8t3gjt3obvglvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OjiztGw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnkw9e8t3gjt3obvglvf.png" alt="CIDR Block Range"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CIDR is an industry standard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The number is the number of bits in an IP address that must match to be considered as part of the selected CIDR block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each IP Segment i.e the number between the dots is of eight bits that makes the entire segment consisting of 32 bits.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let us take the ip address &lt;code&gt;10.0.0.0&lt;/code&gt; and represent them in binary as &lt;code&gt;0000 1010. 0000 0000. 0000 0000. 0000 0000&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let us take the CIDR block notation as &lt;code&gt;10.0.0.0/16&lt;/code&gt;. The number here mentions that any ip address that has the first 16 digits matched is part of this CIDR IP block. Since the first 16 bits has to remain unchanged, it leaves room for the rest of the 16 digits to take any value. Hence 2&lt;sup&gt;16&lt;/sup&gt; &lt;code&gt;65536&lt;/code&gt; ip addresses are available in this range.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.colocationamerica.com/ip-calculator"&gt;https://www.colocationamerica.com/ip-calculator&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>vpc</category>
      <category>cidr</category>
      <category>networking</category>
    </item>
    <item>
      <title>Webpack settings when upgrading Vue2 to Vue3.1 for Rails application</title>
      <author>t0yohei</author>
      <pubDate>Sat, 05 Jun 2021 13:19:07 +0000</pubDate>
      <link>https://dev.to/t0yohei/webpack-settings-when-upgrading-vue2-to-vue3-1-for-rails-application-19pe</link>
      <guid>https://dev.to/t0yohei/webpack-settings-when-upgrading-vue2-to-vue3-1-for-rails-application-19pe</guid>
      <description>&lt;p&gt;This is the setting content that corresponds to &lt;code&gt;3&lt;/code&gt; of the article below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vuejs/vue-next/tree/master/packages/vue-compat#installation"&gt;vue-next/packages/vue-compat at master · vuejs/vue-next · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The content is based on the assumption that you are using the webpacker v5 system.&lt;br&gt;
Also, at the time of writing the article, I am using the beta of Vue 3.1.0.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#version"&gt;
  &lt;/a&gt;
  Version
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;rails: 6.1.3.2&lt;/li&gt;
&lt;li&gt;webpacker: 5.4.0&lt;/li&gt;
&lt;li&gt;vue: 3.1.0-beta.7&lt;/li&gt;
&lt;li&gt;@vue/compat: 3.1.0-beta.1&lt;/li&gt;
&lt;li&gt;vue-loader: 16.2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;Besed on the content of &lt;a href="https://github.com/vuejs/vue-next/tree/master/packages/vue-compat#installation"&gt;vue-next/packages/vue-compat at master · vuejs/vue-next · GitHub&lt;/a&gt;, we will update &lt;code&gt;vue-loader&lt;/code&gt; to &lt;code&gt;^16.0.0&lt;/code&gt; and &lt;code&gt;vue&lt;/code&gt;, &lt;code&gt;@vue/compat&lt;/code&gt; to the &lt;code&gt;3.1&lt;/code&gt; series.&lt;/p&gt;

&lt;p&gt;Modify &lt;code&gt;package.json&lt;/code&gt; as shown below and run &lt;code&gt;yarn install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.1.0-0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@vue/compat"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^3.1.0-0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vue-loader"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^16.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modify-webpack-settings"&gt;
  &lt;/a&gt;
  Modify webpack settings
&lt;/h2&gt;

&lt;p&gt;Modify &lt;code&gt;config/webpack/loaders/vue.js&lt;/code&gt; and &lt;code&gt;config/webpack /environment.js&lt;/code&gt; as follows (if &lt;code&gt;config/webpack/loaders/vue.js&lt;/code&gt; has not been created, create a new one).&lt;/p&gt;

&lt;p&gt;config/webpack/loaders/vue.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;vue&lt;/span&gt;&lt;span class="se"&gt;(\.&lt;/span&gt;&lt;span class="sr"&gt;erb&lt;/span&gt;&lt;span class="se"&gt;)?&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;compilerOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;compatConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;MODE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;config/webpack/environment.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@rails/webpacker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VueLoaderPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-loader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./loaders/vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;vue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/compat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;VueLoaderPlugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VueLoaderPlugin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loaders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sample commit: &lt;a href="https://github.com/t0yohei/rails-vue-app/pull/70/commits/0290648cd0e6a72653c6d0593570e85af41e9168"&gt;Update vue to 3 1 by t0yohei · Pull Request #70 · t0yohei/rails-vue-app · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confirmation-of-operation"&gt;
  &lt;/a&gt;
  Confirmation of operation
&lt;/h2&gt;

&lt;p&gt;If the settings are correct, when you run &lt;code&gt;bin/webpack&lt;/code&gt; or &lt;code&gt;bin/webpacker-dev-server&lt;/code&gt;, you will get warnings and errors like the attached image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-EVAQZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cnc3t2aisw5v3zlzual.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-EVAQZo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cnc3t2aisw5v3zlzual.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-to-do"&gt;
  &lt;/a&gt;
  Next To Do
&lt;/h2&gt;

&lt;p&gt;After changing the settings of the webpack, it will be a task to crush the warnings and errors that appear in the build.&lt;/p&gt;

&lt;p&gt;For the subsequent work, refer to &lt;code&gt;4&lt;/code&gt; and later below.&lt;br&gt;
&lt;a href="https://github.com/vuejs/vue-next/tree/master/packages/vue-compat#installation"&gt;vue-next/packages/vue-compat at master · vuejs/vue-next · GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When all the work is completed successfully, the migration to Vue 3.1 is complete.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#appendix-if-you-have-typescript-installed"&gt;
  &lt;/a&gt;
  Appendix: If you have TypeScript installed
&lt;/h2&gt;

&lt;p&gt;If you want to get type support from the implementation of &lt;code&gt;import Vue from'vue'&lt;/code&gt;, it seems that you need the following settings in &lt;code&gt;shim.d.ts&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CompatVue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/runtime-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CompatVue&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>vue</category>
      <category>rails</category>
      <category>webpack</category>
    </item>
    <item>
      <title>Reasons to use Typescript</title>
      <author>Sergiy</author>
      <pubDate>Sat, 05 Jun 2021 13:15:26 +0000</pubDate>
      <link>https://dev.to/sergchr/reasons-to-use-typescript-1ig6</link>
      <guid>https://dev.to/sergchr/reasons-to-use-typescript-1ig6</guid>
      <description>&lt;p&gt;Typescript is a superset of Javascript. It's Javascript with type definitions and the code will be checked when compiling.&lt;/p&gt;

&lt;p&gt;Why to adopt TS if ...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-is-fast-to-prototype"&gt;
  &lt;/a&gt;
  Javascript is fast to prototype
&lt;/h2&gt;

&lt;p&gt;We can code fast with Javascript. The language is simple and allows us to do a lot of things. A prototyping time can be amazingly short. A downside of this is code readability. If we need to prototype something quickly to understand if the idea is viable, we skip thinking about architecture, writing documentation, tests. Eventually, we have a working piece. It has some bugs, but they can be fixed relatively fast. The piece is doing its intended job, we add more functionality to it, but some problems start to emerge.&lt;/p&gt;

&lt;p&gt;To add a simple functionality, it's hard to understand whether some service passes you an object with 20 fields, a string, or it may not pass anything at all. It's difficult to fathom API contracts between code pieces you wrote! By writing more console.log's you see the contracts and adjust the code to new requirements.&lt;br&gt;
After some time, your colleague asks a team's help to assist in debugging "what these objects are". Next month a manager asks why it takes so long to modify a tiny bit of the functionality. The company even hired 5 additional developers for the last week. In the next week, the CEO along with CTO decided to rewrite the product from scratch.&lt;/p&gt;

&lt;p&gt;Could the situation be different if the team adopted Typescript? Not really. But TS could help to eliminate bugs initially and with the next releases. Plus, it would take less time to modify existing code. Why? Doesn't TS add more time to write, because you should think about types, write them down? We'll get back to this question.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#typescript-eliminates-problems-when-you-write-the-code"&gt;
  &lt;/a&gt;
  Typescript eliminates problems when you write the code
&lt;/h2&gt;

&lt;p&gt;IDEs have great TS support, so they will highlight potential errors you encounter. But, what kind of errors? Imagine you construct an object, convert it to some other form, pass it to a chain of 5 functions and then send the result to UI. It's easy to follow the object properties when constructing it in the beginning. It's difficult to follow a contract further. The next function can remove necessary fields from the object, another one will add some new ones, etc. With Typescript, you code how the object should look like, what properties are required, what are optional, and this contract will be followed. Otherwise, you'll get compile errors(and errors highlights before that).&lt;/p&gt;

&lt;p&gt;Another situation: there is a function that should be returning a number, but returns undefined. The function is complicated and we can't exactly know where the problem occurs(i.e. why it can't handle 10).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;calculateXfromNum&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./otherService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// there is a function from other service&lt;/span&gt;
&lt;span class="c1"&gt;// it calculates some number from other number&lt;/span&gt;
&lt;span class="c1"&gt;// this function should return number, at least we expect that&lt;/span&gt;
&lt;span class="c1"&gt;// judging by the code&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;calculateXfromNum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// num is undefined&lt;/span&gt;

&lt;span class="c1"&gt;// this function expect a number&lt;/span&gt;
&lt;span class="nx"&gt;doStuffWithResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#it-improves-code-readability"&gt;
  &lt;/a&gt;
  It improves code readability
&lt;/h2&gt;

&lt;p&gt;Have you struggled with situations where you didn't know what to expect from functions, 3rd-party services responses? Like in the example above. Types allow you to see what other functions take as arguments and what they'll return. Have you seen the console.log debugging process? To understand what form an object has, people log it to the output a few times along the function execution.&lt;/p&gt;

&lt;p&gt;You could use debugger also, it may help more. But why make things so complicated? Isn't it enjoyable to know what this class method returns from the first glance at the code?&lt;/p&gt;

&lt;p&gt;The subsequent question you may derive from the reasons above may be:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What about the time we spend on documenting types and writing more code? The coding won't be so fast then.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#it-accelerates-the-development-process"&gt;
  &lt;/a&gt;
  It accelerates the development process
&lt;/h2&gt;

&lt;p&gt;How is that possible?&lt;br&gt;
If you think you will document all the types when using TS, thus it slows you down, that's not the case. Typescript is smart enough to infer types from code. In cases where it can't do that, you need to indicate a type explicitly. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// n is number&lt;/span&gt;

&lt;span class="c1"&gt;// here, "num" can't be inferred, because you can pass anything here&lt;/span&gt;
&lt;span class="c1"&gt;// TS can't know that&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// if you point that "num" is number, TS knows the returning type&lt;/span&gt;
&lt;span class="c1"&gt;// will be a number too&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Still, even if Typescript can infer types in simple cases, a developer should write complex types, so how the development becomes faster?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How much time do you think developers in mid/large-size JS projects spend on debugging to understand what an object will be returned by some function? I think a lot. We don't write code for machines, but humans. The code should be understandable. You take a glance and you get a basic idea of what's going on.&lt;/p&gt;

&lt;p&gt;Learning Typescript syntax takes a few minutes to start coding if you already understand Javascript. What you need to know is how to declare type/interface. Then, you need some time to get used to advanced cases.&lt;/p&gt;

&lt;p&gt;The additional development time will go to defining types, which isn't so time-consuming. At least, it takes much less time than:&lt;/p&gt;

&lt;p&gt;asking a colleague where to find documentation about a service;&lt;br&gt;
asking a colleague who wrote that;&lt;br&gt;
asking the person who wrote that to explain what the form of an object is;&lt;br&gt;
writing comments about object type after debugging it;&lt;br&gt;
rewriting the comments because you didn't expect other use cases;&lt;br&gt;
Save yourself and your team many human hours of reading and understanding the code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-migrate-to-typescript"&gt;
  &lt;/a&gt;
  How to migrate to Typescript
&lt;/h2&gt;

&lt;p&gt;I'll provide points for you to decide is it worth adopting at all, and how simple the process is.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-easy-to-learn"&gt;
  &lt;/a&gt;
  It's easy to learn
&lt;/h3&gt;

&lt;p&gt;Understand how to declare types/interfaces and you're good to go. Basically, it's:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sergiy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While you write more code, you'll get to know many other things along the way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-easy-to-start-right-away"&gt;
  &lt;/a&gt;
  It's easy to start right away
&lt;/h3&gt;

&lt;p&gt;If you have a Javascript project already, all it takes for you to start writing TS code is to have Typescript installed, maybe some tsconfig configuration, and to set the --allowJs flag, so you can mix TS with JS code. As you code more, you'll add more types, and maybe you convert all the codebase to TS. At least, you can TSify crucial parts of the code right now.&lt;/p&gt;

&lt;p&gt;However, you'll need to compile the project to Javascript. An additional build step in your workflow.&lt;/p&gt;

&lt;p&gt;If you're convinced to switch or migrate to Typescript, there are some thoughts to ponder about. As a person who leads a team, you should be responsible to explain to the developers why do you choose TS, what are pros and cons. Otherwise, programmers may think of it as a tool that slows them down. You may encounter situations when a developer write something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While it's a valid code, it doesn't add more readability. A developer may find using any is a good thing to save time. The idea the developers should understand is that if something is unknown, it's better to figure out the actual type and document it.&lt;/p&gt;

&lt;p&gt;Almost the same situation with wide types like object: the data may be an object with any properties, a function, an array. The more narrow type, the better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Use Typescript if you need better code readability, hence development speed up in the long run. It takes a little time to get started with TS if you know Javascript. You can integrate TS in your Javascript project without rewriting JS parts right away.&lt;/p&gt;

&lt;p&gt;Typescript is a tool that should be regarded as such and not as a thing that solves abstract problems like "improving the code".&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/sergchr"&gt;Follow me on Twitter&lt;/a&gt; and &lt;a href="https://metacognitive.me"&gt;see my other articles&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>typescript</category>
      <category>programming</category>
    </item>
    <item>
      <title>4 Git Habits &amp; curated list of life-saving articles</title>
      <author>Prakhar Yadav</author>
      <pubDate>Sat, 05 Jun 2021 13:14:52 +0000</pubDate>
      <link>https://dev.to/prakh_r/4-git-habits-curated-list-of-life-saving-articles-5gok</link>
      <guid>https://dev.to/prakh_r/4-git-habits-curated-list-of-life-saving-articles-5gok</guid>
      <description>&lt;p&gt;Hi folks.&lt;br&gt;
In this post I want to share some tips and suggestions on common best practices for the method of work, that are not always explicitly stated/taught.&lt;br&gt;
When we transition to a new environment, there's a certain learning curve involved before we get on with our work smoothly.&lt;br&gt;
I struggled with my modus operandi and after tripping on many pitfalls, I think these tips might be of help:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't branch when you start working. Branch when need to push.&lt;/strong&gt;&lt;br&gt;
I've had situations where I faced merge conflicts due to early branching. You don't know how long its gonna take for you to fix that defect or complete that story. By the time you are ready to push the changes to remote repository, there might be significant changes in many files. And may be even on the one that you're working on. This is typically the case when many teams are working on a repository. Hence, always create a branch to push your code when you are actually ready to push.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull every morning.&lt;/strong&gt; Keep the code base up to date&lt;br&gt;
Branching off of the previous comment, keeping the code base up to date is ofcourse very essential, but the frequency is what matters. I had this question when I started in my new role &lt;em&gt;"how often should I pull?"&lt;/em&gt;&lt;br&gt;
The answer is every morning. Don't worry you won't lose your work. And if you're unable to, because of un-committed changes, then stash your things are apply them after you've pulled.&lt;br&gt;
This way, you can lift-off from where you ended yesterday.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Always sign/author your commits&lt;/strong&gt;, if you don't.&lt;br&gt;
Although some organizations have some guidelines regarding this,  but that might not always be the case. Even though the organization has a way to keep track of who's changed what, it's always advisable to author your commits.&lt;br&gt;
I prefer ending the commit message with:&lt;br&gt;
&lt;code&gt;Reviewed by: Reviewer Name &amp;lt;email@addre.ss&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Signed-off-by: Your Name &amp;lt;your@email.id&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Squash all your commits into one once you're done.&lt;/strong&gt;&lt;br&gt;
This is something you must be aware of already. Squash all your commits before merging. This way all the code changes for a fix/feature are consolidated into one, and the whole thing is much clearly maintained and tracked.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the few things I learned the hard way. I hope you adopt these habits soon if you don't already.&lt;br&gt;
Before signing-off, below are some guides and articles in &lt;strong&gt;Bonus&lt;/strong&gt; section, that I find very useful &amp;amp; you might too.&lt;br&gt;
  &lt;strong&gt;&lt;em&gt;And even though cats may rule this world one day, you are reading Code with P.&lt;/em&gt;&lt;/strong&gt; 👋🐈&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bonus-resources"&gt;
  &lt;/a&gt;
  BONUS - Resources
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/eclipse/omr/blob/master/doc/GitCrashCourse.md"&gt;Git Crash Course&lt;/a&gt; by eclipse/omr project at &lt;a href="https://github.com/eclipse/omr"&gt;github.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://yuvaraj.hashnode.dev/learn-the-hidden-feature-in-git-stash"&gt;What is Git Stash, how to use Git Stash?&lt;/a&gt; by @&lt;a href="https://hashnode.com/@yuvgeek"&gt;Yuvaraj&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://muthuannamalai.hashnode.dev/top-10-git-commands-every-developer-should-know"&gt;Top 10 Git Commands Every Developer Should Know&lt;/a&gt; By @&lt;a href="https://hashnode.com/@muthuannamalai12"&gt;Muthu Annamalai Venkatachalam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pragativerma18.hashnode.dev/confusing-terms-in-the-git-terminology"&gt;Confusing Terms in the Git Terminology&lt;/a&gt; by @&lt;a href="https://hashnode.com/@PragatiVerma18"&gt;Pragati Verma&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://jinggu.hashnode.dev/most-practical-git-commands-in-a-real-workflow"&gt;Most practical git commands in a real workflow&lt;/a&gt;  by @&lt;a href="https://hashnode.com/@JinG"&gt;Jing Gu&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/news/what-is-commit-signing-in-git/"&gt;What is Commit Signing in Git&lt;/a&gt; by &lt;a href="https://twitter.com/SethFalco"&gt;Seth Falco&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>devjournal</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Creating your React project from scratch without create-react-app: The Complete Guide.</title>
      <author>_CODE</author>
      <pubDate>Sat, 05 Jun 2021 13:06:56 +0000</pubDate>
      <link>https://dev.to/underscorecode/creating-your-react-project-from-scratch-without-create-react-app-the-complete-guide-4kbc</link>
      <guid>https://dev.to/underscorecode/creating-your-react-project-from-scratch-without-create-react-app-the-complete-guide-4kbc</guid>
      <description>&lt;p&gt;Creating and setting up your own React project from scratch can be, at times, a little bit tricky, even though it's not your first time starting a React project. That's why we have &lt;strong&gt;create-react-app&lt;/strong&gt;, a command that prepares and installs all the boilerplate for us and have our application ready to rock from the very first moment after the process finishes.&lt;/p&gt;

&lt;p&gt;But, even though create-react-app is a very good choice to start off with, specially for those who are new to the React world or who just don't want to spend time setting up everything, it's interesting to know that there's another way to get things done. &lt;/p&gt;

&lt;p&gt;As you can imagine, this method is not going to be as easy as just running a command, but it will surely be way more satisfactory and useful for your developer career (not to mention that it's a reusable process and you'll get rid of not-that-necessary stuff that comes together with create-react-app and that will overload your project).&lt;/p&gt;

&lt;p&gt;Note that I won't be using a specific structure for the project because I think that's very personal and every developer works in a different way, so, I leave that choice up to you 😉&lt;/p&gt;

&lt;p&gt;So, with all this said, let's dive into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-creating-the-folder-that-will-host-our-project"&gt;
  &lt;/a&gt;
  Step 1: Creating the folder that will host our project
&lt;/h2&gt;

&lt;p&gt;We're going to start by creating a new directory for our project at a location of our choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;my-react-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once created, we're going to navigate into it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-react-project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-initializing-the-project"&gt;
  &lt;/a&gt;
  Step 2: Initializing the project
&lt;/h2&gt;

&lt;p&gt;To initialize our project, we're going to run a &lt;strong&gt;npm&lt;/strong&gt; command. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;npm&lt;/em&gt; is a package, version and dependencies manager made for JavaScript. If you haven't installed npm yet, you need to directly install &lt;strong&gt;Node.js&lt;/strong&gt;, since they work together and npm is included in Node.js installation as well. Node.js will let us execute JavaScript on server side.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can perfectly use a different package manager, like &lt;em&gt;Yarn&lt;/em&gt; or &lt;em&gt;Bower&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're not sure if you have previously installed npm/ Node.js, just run the following commands to check the last versions installed for them. If these commands return a version number, then you already have them on your computer. Otherwise, you'll need to install them again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have npm and Node.js ready to use on our computer, we're going to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will create a &lt;strong&gt;package.json&lt;/strong&gt; file, which is the file where all the dependencies and scripts for our project will be specified.&lt;/p&gt;

&lt;p&gt;Throughout the process of the file creation, the terminal will pop up some questions to let you set up your project with proper information about it. If you want to skip the current question, just press enter to jump onto the next one.&lt;/p&gt;

&lt;p&gt;If you don't feel like giving extra information for the project or just want to configure it later, just add the &lt;strong&gt;-y&lt;/strong&gt; flag to the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the installation is done, we'll have a new package.json file in our project that will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"my-react-project"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-installing-dependencies"&gt;
  &lt;/a&gt;
  Step 3: Installing dependencies
&lt;/h2&gt;

&lt;p&gt;We also need to install a few dependencies manually in order for our future React application to work properly and as expected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-dependencies"&gt;
  &lt;/a&gt;
  React dependencies
&lt;/h3&gt;

&lt;p&gt;We'll be installing the following dependencies on React's side:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;react&lt;/code&gt;:&lt;/strong&gt; the JavaScript library we'll be working with.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;react-dom&lt;/code&gt;:&lt;/strong&gt; package with some methods to manage DOM elements.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;react-router-dom&lt;/code&gt;:&lt;/strong&gt; package that contains the DOM bindings for React Router.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react react-dom react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webpack-dependencies"&gt;
  &lt;/a&gt;
  Webpack dependencies
&lt;/h3&gt;

&lt;p&gt;We'll also need a module &lt;em&gt;bundler&lt;/em&gt; to get our project ready for the web. &lt;strong&gt;Webpack&lt;/strong&gt; bundles all the JavaScript files in your project and prepares all the necessary resources for usage in the browser.&lt;/p&gt;

&lt;p&gt;As we only need Webpack to work in the development environment, we're going to install all its related dependencies adding the flag &lt;em&gt;--save-dev&lt;/em&gt; or simply &lt;em&gt;-D&lt;/em&gt; to the command.&lt;/p&gt;

&lt;p&gt;We'll be installing the following dependencies on Webpack's side: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;webpack&lt;/code&gt;:&lt;/strong&gt; the bundler.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;webpack-cli&lt;/code&gt;:&lt;/strong&gt; CLI for Webpack.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; webpack webpack-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#babel-dependencies"&gt;
  &lt;/a&gt;
  Babel dependencies
&lt;/h3&gt;

&lt;p&gt;Babel is a JavaScript compiler that converts (or &lt;em&gt;transpiles&lt;/em&gt;) JavaScript ES6 to JavaScript ES5 since not all browsers currently support ECMAScript 6 features.&lt;/p&gt;

&lt;p&gt;The Babel-related dependencies we're going to install are the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;@babel/core&lt;/code&gt;:&lt;/strong&gt; Babel compiler core.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;@babel/preset-react&lt;/code&gt;:&lt;/strong&gt; package that contains a set of plugins used to support React features.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @babel/core @babel/preset-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before going further on dependencies, we're going to configure Babel in our project in order for our JavaScript files to be transpiled as intended.&lt;/p&gt;

&lt;p&gt;Let's go back to the terminal to create a new file for this configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .babelrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, just add the following code snippet:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.babelrc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-react"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loaders-for-webpack"&gt;
  &lt;/a&gt;
  Loaders for Webpack
&lt;/h3&gt;

&lt;p&gt;Webpack needs something called &lt;strong&gt;loaders&lt;/strong&gt; to preprocess files. They are useful to bundle static resources beyond JavaScript.&lt;/p&gt;

&lt;p&gt;These will be the basic loaders we'll be working with:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;babel-loader&lt;/code&gt;&lt;/strong&gt;: loader for Babel.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;html-loader&lt;/code&gt;&lt;/strong&gt;: loader for HTML.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/strong&gt;: loader that injects styles into the DOM.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/strong&gt;: loader for CSS.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;sass-loader(*)&lt;/code&gt;&lt;/strong&gt;: loader for SASS/SCSS.&lt;/p&gt;

&lt;p&gt;(*) This loader is not strictly necessary, but in case you want to use a CSS preprocessor, you'll need a loader for it as well. There also exists loaders for LESS, PostCSS, Stylus...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; babel-loader html-loader style-loader css-loader sass-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webpack-plugins"&gt;
  &lt;/a&gt;
  Webpack plugins
&lt;/h3&gt;

&lt;p&gt;We also need Webpack plugins that will help for bundling purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;html-webpack-plugin&lt;/code&gt;&lt;/strong&gt;: this plugin is used to create HTML files that will serve bundles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Since we're working in a development environment, we'll just be using a loader for styles, but for production builds, it' recommended to extract the CSS from the bundle using &lt;em&gt;MiniCssExtractPlugin&lt;/em&gt;. This plugin extracts CSS into separate files and creates files for every JavaScript file which contains CSS.&lt;/p&gt;

&lt;p&gt;The loader is faster and will set the styles as internal, inside the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag, while the plugin will link the external styles file to the HTML document using the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server-dependencies"&gt;
  &lt;/a&gt;
  Server dependencies
&lt;/h3&gt;

&lt;p&gt;Our app will also need a server, so we'll be using server-related dependencies as well. We're going to install the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;express&lt;/code&gt;&lt;/strong&gt;: Node.js framework that we'll be using to create our server file and to handle server requests. &lt;br&gt;
&lt;strong&gt;&lt;code&gt;nodemon&lt;/code&gt;&lt;/strong&gt;: tool that will refresh our web app whenever a  change occurs in the app directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-configuring-webpack"&gt;
  &lt;/a&gt;
  Step 4: Configuring Webpack
&lt;/h2&gt;

&lt;p&gt;Next step is putting Webpack's loaders and plugins we just installed together in a config file to let it know how its behavior should be in the bundle process of our files.&lt;/p&gt;

&lt;p&gt;To start with, we're going to create an empty file for this purpose. Back on the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;webpack.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before diving into the content of this config file, we're going to see what it really does and how it behaves.&lt;/p&gt;

&lt;p&gt;First off, we need to tell Webpack which the &lt;strong&gt;entry point&lt;/strong&gt; for our app will be. This entry point will be a JavaScript file called &lt;strong&gt;index.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also need to specify the &lt;strong&gt;output file&lt;/strong&gt;, which will be the final JavaScript file all bundled and the only one that will be referenced explicitly from the HTML file served.&lt;/p&gt;

&lt;p&gt;At this point, it's important to mention the &lt;strong&gt;dist&lt;/strong&gt; folder. This folder is a directory created as part of the bundling process and will hold all the static files generated as a result of it.&lt;/p&gt;

&lt;p&gt;More stuff Webpack needs to know is the type of files it'll be working with to &lt;em&gt;translate&lt;/em&gt; them properly. For the moment, those types are JavaScript, HTML, CSS and SASS/SCSS. But, if in the future we need to work with more different kind of files (and we definitely will), such &lt;strong&gt;images&lt;/strong&gt;, &lt;strong&gt;fonts&lt;/strong&gt;, etc, these will need their own loaders as well.&lt;/p&gt;

&lt;p&gt;And finally, we also need to configure the necessary plugins. In this case, &lt;em&gt;HtmlWebpackPlugin&lt;/em&gt;, which will generate the HTML that will be served to the browser.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HTMLWebpackPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bundle.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;publicPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.(&lt;/span&gt;&lt;span class="sr"&gt;js|jsx&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/node_modules/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;html$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="cm"&gt;/*Choose only one of the following two: if you're using 
      plain CSS, use the first one, and if you're using a
      preprocessor, in this case SASS, use the second one*/&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;css$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;scss$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;style-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sass-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt; 
  &lt;span class="p"&gt;},&lt;/span&gt;  
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HTMLWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-creating-the-html-template"&gt;
  &lt;/a&gt;
  Step 5: Creating the HTML template
&lt;/h2&gt;

&lt;p&gt;Well, this is the simplest step but still we need to take it 🙂&lt;/p&gt;

&lt;p&gt;We need to create a basic HTML document that will be used by &lt;em&gt;HTMLWebpackPlugin&lt;/em&gt; as a template to generate the new one. As easy as that.&lt;br&gt;
&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My React App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pay attention to the empty &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with id &lt;em&gt;root&lt;/em&gt;. We'll learn about it later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-creating-the-server"&gt;
  &lt;/a&gt;
  Step 6: Creating the server
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;server&lt;/strong&gt; is going to be a new JavaScript file that will open up a port to listen on, do a little bit more of configuration and make a few requests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're going to call it &lt;strong&gt;app.js&lt;/strong&gt; but you can give it any name of your choice. Just be careful with capitalization. You'll understand why later.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The app server is running on port: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;DIST_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HTML_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DIST_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HTML_FILE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we are doing in this file is starting a new server that listens on port 3000 for connections. Then, the HTML file generated by Webpack is sent to the root URL (in other words, this HTML will be the homepage of our app). We're also indicating that every file in the directories &lt;em&gt;public&lt;/em&gt; and &lt;em&gt;dist&lt;/em&gt; will be static and should be treated as such.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-creating-the-react-app"&gt;
  &lt;/a&gt;
  Step 7: Creating the React app
&lt;/h2&gt;

&lt;p&gt;Now, we're going to create &lt;strong&gt;App.js&lt;/strong&gt;, which will be the main component of our React app (capitalization alert here!).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The render of this component will be injected into the served HTML, so what we'll see when we open up the browser will be &lt;em&gt;Hello, World!&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a look at how we can do this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-creating-the-entry-point-for-the-react-app"&gt;
  &lt;/a&gt;
  Step 8: Creating the entry point for the React app
&lt;/h2&gt;

&lt;p&gt;In this step, we're going to specify the routing for our app and also, where in the DOM the content from React should be inserted.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appRouting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;appRouting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're just indicating that the &lt;em&gt;App&lt;/em&gt; component should be rendered when the URL matches the root path exactly, and that the render content should be placed inside the tag with id &lt;em&gt;root&lt;/em&gt; in the index document.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-9-defining-the-scripts"&gt;
  &lt;/a&gt;
  Step 9: Defining the scripts
&lt;/h2&gt;

&lt;p&gt;And, finally, we're going to set up the &lt;strong&gt;scripts&lt;/strong&gt; to be able to build and run our app. &lt;/p&gt;

&lt;p&gt;Back in &lt;em&gt;package.json&lt;/em&gt;, we initially had something like this in the scripts section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we're going to add a couple more: &lt;em&gt;run&lt;/em&gt; and &lt;em&gt;build&lt;/em&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"rm -rf dist &amp;amp;&amp;amp; webpack --mode development"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon app.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-10-building-and-running-our-app"&gt;
  &lt;/a&gt;
  Step 10: Building and running our app
&lt;/h2&gt;

&lt;p&gt;Last step is (finally) building and running our app.&lt;/p&gt;

&lt;p&gt;We first need to run a build command to bundle everything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, just run it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our app is now available at: &lt;strong&gt;&lt;code&gt;localhost:3000&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;And... that's it! Now we have our React application ready to start working with it 🙌🏼&lt;/p&gt;

&lt;p&gt;If you've reached this point, thank you very much. I hope that this tutorial has been helpful for you and I'll see you all in the next.&lt;/p&gt;




&lt;p&gt;🎉 Don't forget to follow me on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more related content.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>webpack</category>
    </item>
    <item>
      <title>How Fuzzing with QEMU (and AFL) Works</title>
      <author>Gal</author>
      <pubDate>Sat, 05 Jun 2021 13:03:18 +0000</pubDate>
      <link>https://dev.to/galtashma/how-fuzzing-with-qemu-and-afl-works-4og0</link>
      <guid>https://dev.to/galtashma/how-fuzzing-with-qemu-and-afl-works-4og0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-a-fuzzer"&gt;
  &lt;/a&gt;
  Whats a Fuzzer?
&lt;/h2&gt;

&lt;p&gt;A fuzzer now-days is a automated testing tool to find security bugs. It does so by generating many inputs to be executed until on of them crashes the target program. In other words the objective is to crash a program, but how can we guide the fuzzer in the right direction? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/American_fuzzy_lop_(fuzzer)"&gt;AFL&lt;/a&gt; added to the objective a notion of code coverage: Any input that reaches an area in the code that was unreachable before is interesting. Even if it did not crash the program we can mutate that input to get even more coverage, we call this feedback. Over the past years coverage had proved to be a great feedback mechanism, but collecting it was not simple if one did not own the source code of the target binary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-qemu-fuzzing"&gt;
  &lt;/a&gt;
  Enter QEMU Fuzzing
&lt;/h2&gt;

&lt;p&gt;AFL originally used compile time instrumentation to insert assembly instructions at the beginning of each basic block. Basic Block is the group of assembly instructions that are always executed one after the other. When executed, these snippets would write a byte to a shared memory area where fuzzer can observe and determine which basic blocks had been reached. This method works well if you have the source code and can compile it with your custom instrumentation, but what if you are fuzzing a closed source binary. One cool example of fuzzing closed source binaries would be: &lt;a href="https://googleprojectzero.blogspot.com/2020/07/mms-exploit-part-2-effective-fuzzing-qmage.html"&gt;Effective Fuzzing Qmage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;QEMU is an emulator that can emulate many cpu architectures, For example it can run Android (arm) on your PC (x86) or run Windows on your iPad &lt;a href="https://getutm.app/"&gt;UTM&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;By patching QEMU, &lt;a href="https://github.com/nccgroup/TriforceAFL"&gt;TriforceAFL&lt;/a&gt; and &lt;a href="https://github.com/AFLplusplus/AFLplusplus"&gt;AFL++&lt;/a&gt; managed to get coverage feedback out of  any binary that QEMU can run. How cool is that?! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-does-it-work"&gt;
  &lt;/a&gt;
  So How does it Work?
&lt;/h2&gt;

&lt;p&gt;QEMU user-mode is a tool of QEMU that allows emulating just the userspace (in contrast to the normal mode where both the user-mode and the kernel are emulated). This is done by forwarding any syscalls from the target program to the host machine. The main benefits are improved performance and less complex enviroment but it sacrifices on the portability. &lt;a href="https://github.com/AFLplusplus/qemuafl"&gt;AFL++ fork of QEMU&lt;/a&gt; uses this mechanism while adding coverage tracking and optional performance optimizations. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example of running arm linux binaries on a x86 host&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/AFLplusplus/afl-qemu-trace /fuzz/bin/harness &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; aaaaaaaaaaaaaaaaaa
&lt;span class="o"&gt;[&lt;/span&gt;harness] starting main. main at: 0x550000b848
&lt;span class="o"&gt;[&lt;/span&gt;harness] should_backtrace. &lt;span class="nv"&gt;argc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="o"&gt;[&lt;/span&gt;harness] input:
  0000  61 61 61 61 61 61 61 61 61 61 61 61 61 61 61 61  aaaaaaaaaaaaaaaa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-the-coverage"&gt;
  &lt;/a&gt;
  Getting the Coverage
&lt;/h3&gt;

&lt;p&gt;QEMU writes the coverage feedback data to shared memory, this way both QEMU and the fuzzer can write and inspect the coverage data. The fuzzer is responsible for allocating the shared memory. When the fuzzer starts QEMU, it passes the shared memory file descriptor to QEMU using the &lt;code&gt;__AFL_SHM_ID&lt;/code&gt; environment variable and maps the memory to its own process using &lt;code&gt;shmat&lt;/code&gt;. Then whenever the QEMU VM executes a basic block, it marks the block as reached by writing to this shared memory. This is implemented by the &lt;code&gt;INC_AFL_AREA&lt;/code&gt; macro. &lt;/p&gt;

&lt;p&gt;After QEMU exits, the fuzzer can look at the shared memory for any bytes that are different from zero. The offset from the start of the map is the ID of the visited basic-block and the more bytes that are different from zero, the more basic blocks our target has hit. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;A redacted version of code from afl++ qemu related to the shared memory&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="c1"&gt;// qemuafl/imported/config.h&lt;/span&gt;
&lt;span class="cp"&gt;#define SHM_ENV_VAR "__AFL_SHM_ID"
&lt;/span&gt;
&lt;span class="c1"&gt;// accel/tcg/cpu-exec.c&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;afl_setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SHM_ENV_VAR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;shm_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;afl_area_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shmat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shm_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;afl_area_ptr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// accel/tcg/translate-all.c&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HELPER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;afl_maybe_log&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;target_ulong&lt;/span&gt; &lt;span class="n"&gt;cur_loc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="kt"&gt;uintptr_t&lt;/span&gt; &lt;span class="n"&gt;afl_idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur_loc&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;afl_prev_loc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;INC_AFL_AREA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;afl_idx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;afl_prev_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur_loc&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// qemuafl/common.h&lt;/span&gt;
&lt;span class="cp"&gt;#define INC_AFL_AREA(loc) afl_area_ptr[loc]++
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Sample rust code for running QEMU and getting coverage from it&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;shm_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;create_shmem&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nn"&gt;env&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;set_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"__AFL_SHM_ID"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shm_id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nf"&gt;run_target_in_qemu&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;afl_area_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_shmem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shm_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;cov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;0xffff&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;afl_area_ptr&lt;/span&gt;&lt;span class="nf"&gt;.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"coverage at cov[{}] = {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nf"&gt;close_shmem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shm_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Full example here &lt;a href="https://github.com/bitterbit/fuzzer-qemu/blob/fb9170ba1f2723592844ee368fcc33ef25b04f39/src/src/main.rs"&gt;https://github.com/bitterbit/fuzzer-qemu/blob/fb9170ba1f2723592844ee368fcc33ef25b04f39/src/src/main.rs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#afl-forkserver"&gt;
  &lt;/a&gt;
  AFL ForkServer
&lt;/h2&gt;

&lt;p&gt;Jann Horn introduced the idea of a fork-server to AFL. In the fork-server mode, instead of running the target from the beginning each time, we let the code arrive at a key point where we fork. Then each time the QEMU exits the father process forks again. This can be thought of a cheap snapshot mechanisem. &lt;/p&gt;

&lt;p&gt;In this setup we have a fuzzer, qemu-father and qemu-child, the fuzzer and the qemu-father communicate using pipes while the child is re-spawned after each test case. Each time the child is done the father can fork again to create another child. This helps avoid running the "setup" code each time we want to run our target, which helps improve performance. &lt;/p&gt;

&lt;p&gt;In practice the communication between the fuzzer and the qemu-father is made out of two pipes, both are created by the fuzzer and given constant file descriptor ids using &lt;code&gt;dup2&lt;/code&gt; so the qemu-father can easily find and open them. The control pipe is used by the fuzzer to control the qemu-father and the the Status pipe is used by the qemu-father to update the fuzzer that he is alive.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Owner&lt;/th&gt;
&lt;th&gt;R/W&lt;/th&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CTL (Control)&lt;/td&gt;
&lt;td&gt;qemu&lt;/td&gt;
&lt;td&gt;Read&lt;/td&gt;
&lt;td&gt;198&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CTL (Control)&lt;/td&gt;
&lt;td&gt;fuzzer&lt;/td&gt;
&lt;td&gt;Write&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ST (Status)&lt;/td&gt;
&lt;td&gt;qemu&lt;/td&gt;
&lt;td&gt;Write&lt;/td&gt;
&lt;td&gt;199&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ST (Status)&lt;/td&gt;
&lt;td&gt;fuzzer&lt;/td&gt;
&lt;td&gt;Read&lt;/td&gt;
&lt;td&gt;n/a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;While cracking at the fork-server mode, one might ask why not just "rewind" the Virtual Machine back to the starting point instead of forking again? This is exactly what I was thinking and haply there is a special mode that does exactly that: Persistent Mode. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-persistent-mode"&gt;
  &lt;/a&gt;
  What is Persistent Mode?
&lt;/h2&gt;

&lt;p&gt;Persistent mode can help improve the performance of your fuzzer even more. It does so by reducing the amount of "boilerplate" code that has to be run in order to run our code, much like the fork-server mechanism but to a higher extreme. So how does it work?&lt;/p&gt;

&lt;p&gt;Every fuzzer needs to run a target multiple times, each time with a different input and record the coverage. &lt;br&gt;
Instead of re-executing QEMU for each test case, we can select a key/main function which we will run in a loop and instead of closing the VM each time the target exits, we jump right back to this main function. In other words whenever the targets main function returns, instead of returning to the caller we just jump again to the beginning of our main function. &lt;/p&gt;

&lt;p&gt;This introduces new problems:&lt;br&gt;
1) How can we know what coverage belongs to which input?&lt;br&gt;
2) If we are just running the same code again, why would the input be different? &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#communication-between-child-and-father"&gt;
  &lt;/a&gt;
  Communication between Child and Father
&lt;/h3&gt;

&lt;p&gt;AFL uses the two communication pipes just like in the fork server mode. The manager creates new pipes before starting the QEMU process and using &lt;code&gt;dup2&lt;/code&gt; makes sure that each pipe has it's predefined file descriptor so the child can know to use them. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Our setup looks something like this&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ________             _____________             ____________
| fuzzer | ---(1)--- | QEMU father | ---(2)--- | QEMU child |
 --------             -------------             ------------

1) communicate using status and control pipes
2) communicate using STOP and CONT signals
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have the fuzzer communicating with the QEMU father using the control and status pipes. Perviously using the fork-server mode a new child was created for each test case, making it easy for the father to know the status and passing the updates up to the fuzzer using the pipes.&lt;/p&gt;

&lt;p&gt;In the persistent mode, the child does not quit so we need another mechanism to let the father know what the status of the child. This is done with &lt;code&gt;STOP&lt;/code&gt; and &lt;code&gt;CONT&lt;/code&gt; unix signals. &lt;/p&gt;

&lt;p&gt;For each instruction emulated by QEMU (by the &lt;code&gt;disas_a64_insn&lt;/code&gt; on arm64) the current program counter (pc) is compared to the address of our main function, If they are equal we prepare the VM for a new test case and wait for the father to signal us to continue. &lt;/p&gt;

&lt;p&gt;This function trace done each time the child resets itself&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;disas_a64_insn&lt;/code&gt; checks for &lt;code&gt;pc_curr == afl_persistent_addr&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;afl_persistent_loop&lt;/code&gt; is called and calls&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;afl_persistent_iter&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;After all this is done, a &lt;code&gt;SIGSTOP&lt;/code&gt; is raised and the execution is paused until the father sends back a &lt;code&gt;SIGCONT&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sum it up, when the child is done with a test case it raises a &lt;code&gt;STOP&lt;/code&gt; and then when the father is done preparing the next test case it sends back a &lt;code&gt;CONT&lt;/code&gt; signal to the child. The fathers implementation can be found inside &lt;code&gt;afl_forkserver&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Special handling for persistent mode: if the child is alive but
    currently stopped, simply restart it with SIGCONT. */&lt;/span&gt;

&lt;span class="n"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SIGCONT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;child_stopped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In persistent mode, the father is responsible for bridging between the fuzzer and the child QEMU process. Below is sample code to run a fuzzer with QEMU in persistent mode. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample code to run QEMU in persistent mode&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;control_pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"control_pipe"&lt;/span&gt;&lt;span class="nf"&gt;.to_owned&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;status_pipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"status_pipe"&lt;/span&gt;&lt;span class="nf"&gt;.to_owned&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="n"&gt;control_pipe&lt;/span&gt;&lt;span class="nf"&gt;.dup_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FORKSRV_FD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;status_pipe&lt;/span&gt;&lt;span class="nf"&gt;.dup_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FORKSRV_FD&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./qemuafl"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;.arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./harness"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;.arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./input_file"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;.env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AFL_QEMU_PERSISTENT_ADDR"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;address-of-main&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;//.env...&lt;/span&gt;
  &lt;span class="nf"&gt;.spawn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;status_pipe&lt;/span&gt;&lt;span class="nf"&gt;.read_i32&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nd"&gt;info!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[+] forkserver is alive!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;control_pipe&lt;/span&gt;&lt;span class="nf"&gt;.write_i32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
    &lt;span class="nd"&gt;debug!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[+] sent alive signal to child"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;child_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status_pipe&lt;/span&gt;&lt;span class="nf"&gt;.read_i32&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child_pid&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;debug!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[+] child pid {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;child_pid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status_pipe&lt;/span&gt;&lt;span class="nf"&gt;.read_i32&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;debug!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[+] status={}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c"&gt;// each time we reach this point we know a testcase was &lt;/span&gt;
    &lt;span class="c"&gt;// fully executed. We may want to read the coverage shared mem&lt;/span&gt;
    &lt;span class="c"&gt;// and write a new file to the input file.&lt;/span&gt;
    &lt;span class="nf"&gt;prepare_new_testcase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you found this useful! my twitter DMs are open at &lt;a class="mentioned-user" href="https://dev.to/galtashma"&gt;@galtashma&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lcamtuf.coredump.cx/afl/technical_details.txt"&gt;https://lcamtuf.coredump.cx/afl/technical_details.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html"&gt;https://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AFLplusplus/AFLplusplus/blob/stable/qemu_mode/README.persistent.md"&gt;https://github.com/AFLplusplus/AFLplusplus/blob/stable/qemu_mode/README.persistent.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>security</category>
      <category>qemu</category>
      <category>afl</category>
      <category>fuzzing</category>
    </item>
    <item>
      <title>1 good thing you can do this weekend for web dev</title>
      <author>chris-czopp</author>
      <pubDate>Sat, 05 Jun 2021 12:51:31 +0000</pubDate>
      <link>https://dev.to/chrisczopp/hooked-in-build-time-dom-diffing-and-simplicity-pls-help-323i</link>
      <guid>https://dev.to/chrisczopp/hooked-in-build-time-dom-diffing-and-simplicity-pls-help-323i</guid>
      <description>&lt;p&gt;I just posted my project on &lt;a href="https://www.producthunt.com/posts/gluecodes-studio"&gt;Product Hunt&lt;/a&gt;. It's a front-end studio for those developers who are hooked in build-time DOM diffing and awesome automation. If you like it, upvote my product 🙏 as it's super important to get the early boost which will keep us higher on their listings so we're noticed.&lt;/p&gt;

&lt;p&gt;Here is the product: &lt;a href="https://www.producthunt.com/posts/gluecodes-studio"&gt;GlueCodes Studio&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>startup</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Wanna Make Digital Notes Faster ?</title>
      <author>Piyush</author>
      <pubDate>Sat, 05 Jun 2021 12:48:15 +0000</pubDate>
      <link>https://dev.to/piyushlinux/wanna-make-digital-notes-faster-26d3</link>
      <guid>https://dev.to/piyushlinux/wanna-make-digital-notes-faster-26d3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#i-n-t-r-o-d-u-c-t-i-o-n"&gt;
  &lt;/a&gt;
  I N T R O D U C T I O N 👋
&lt;/h2&gt;




&lt;p&gt;Do you wanna make Digital notes in a more effective way , or any kind of document in which you can put text , images , code and so on.&lt;br&gt;
Markdown is a light weight markup language which can be used to format your elements in to heading or list item etc.&lt;br&gt;
Used for taking notes m having basic &amp;amp; fast doc to refer , README file of github are markdown , so for being a developer you may need to to learn markdown once in your life span.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dQpUkK59l5Imxsh8jN/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dQpUkK59l5Imxsh8jN/giphy.gif" alt="notes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s-e-t-u-p"&gt;
  &lt;/a&gt;
  S E T U P 👀
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can start with any markdown editing tool or website&lt;/li&gt;
&lt;li&gt;You can even just start with your notepad.&lt;/li&gt;
&lt;li&gt;write markdown code &amp;amp; save file with &lt;code&gt;.md&lt;/code&gt; extension&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#s-y-n-t-a-x"&gt;
  &lt;/a&gt;
  S Y N T A X 🥸
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;Simple text

&lt;span class="gh"&gt;# Biggest Heading&lt;/span&gt;
&lt;span class="gu"&gt;## Big Heading&lt;/span&gt;
&lt;span class="gu"&gt;### Heading&lt;/span&gt;

For horizontal line 
&lt;span class="p"&gt;
----

-&lt;/span&gt; list_Item
&lt;span class="p"&gt;    +&lt;/span&gt; sub_list_Item with a &lt;span class="gs"&gt;**TAB**&lt;/span&gt;

&lt;span class="ge"&gt;_Italic-Font_&lt;/span&gt;
&lt;span class="gs"&gt;__Bold-Font__&lt;/span&gt;
&lt;span class="gt"&gt;
&amp;gt; Block Quote&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;LINK&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;alt_text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;img_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- comment : which ignored in your markdown render  --&amp;gt;&lt;/span&gt;

  '''extension

  code

  '''

| Column 1 | Column 2 |
| --- | --- |
| Table | with markdown |

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#e-x-a-m-p-l-e"&gt;
  &lt;/a&gt;
  E X A M P L E
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;![&lt;/span&gt;&lt;span class="nv"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://cdn.pixabay.com/photo/2018/04/07/08/28/notepad-3297994__340.jpg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="gh"&gt;# Piyush Patil 😉  &lt;/span&gt;
&lt;span class="p"&gt;
---------

-&lt;/span&gt; A passionate __Web developer__ from India
&lt;span class="p"&gt;-&lt;/span&gt; I’m currently working on &lt;span class="sb"&gt;`Vue JS`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; I’m currently _MongoDB_
&lt;span class="p"&gt;-&lt;/span&gt; Fun fact I ~~Hate~~ Love Anime

| Name | Piyush PAtil |
| -- | -- |
| Age | 20 |
| Skill | Web Development |

&lt;span class="gu"&gt;## L A N G U A G E&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; HTML
&lt;span class="p"&gt;    -&lt;/span&gt; PUG
&lt;span class="p"&gt;-&lt;/span&gt; CSS
&lt;span class="p"&gt;    -&lt;/span&gt; SASS
&lt;span class="p"&gt;-&lt;/span&gt; JS
&lt;span class="p"&gt;-&lt;/span&gt; VUE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  CODE
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;Again&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DEAD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; Life would be much easier if I had the source code

######  - A N O N Y M O U S

--------

## `HOPE YOU LIKE IT`

#### [insta 😁 ](https://www.instagram.com/z.e.n_____/)
#### [twitter 🐦 ](https://twitter.com/Piyush67372814)
#### [github 👾  ](https://github.com/Piyush-linux)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iq63TqI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz7wzk4oi3a86no85olk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iq63TqI0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qz7wzk4oi3a86no85olk.png" alt="markdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#r-e-s-o-u-r-c-e"&gt;
  &lt;/a&gt;
  R E S O U R C E
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#markdown-editor"&gt;
  &lt;/a&gt;
  Markdown Editor
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://typora.io/"&gt;TYPORA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://boostnote.io"&gt;BOOSTNOTE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://draftin.com/"&gt;DRAFT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#website"&gt;
  &lt;/a&gt;
  Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://write.as/"&gt;WRITE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dillinger.io/"&gt;DILLINGER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackedit.io/"&gt;SLACK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ide-extension"&gt;
  &lt;/a&gt;
  IDE Extension
&lt;/h3&gt;

&lt;p&gt;You can also transform your IDE or text editior by installing required extension&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one"&gt;Visual Studio Code : Markdown All in One&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://packagecontrol.io/packages/MarkdownEditing"&gt;Sublime Text : Markdown Editing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://atom.io/packages/pp-markdown"&gt;Atom : pp-markdown&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#b-o-n-u-s"&gt;
  &lt;/a&gt;
  B O N U S
&lt;/h2&gt;

&lt;p&gt;This a little surprise 😃 , Hence we can make fast notes with markdown , we can also create a good PPT with help of markdown and a very rare website I've found on the internet called Play Presentation which makes your presentation edition time 3xFASTER&lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.presenta.cc/"&gt;PRESENTA Playground! - Make slides fast!&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support ⇒ Color , Font , image , emoji&lt;/li&gt;
&lt;li&gt;Presentation ⇒ Trnsition , short cuts , external library for chart's &amp;amp; diagram availabe&lt;/li&gt;
&lt;li&gt;Core ⇒ Easy to make &amp;amp; Manage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Complete tutorial is available on there website&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Updating product attributes in WooCommence is a painful experience, right?</title>
      <author>Zaw Htut Win</author>
      <pubDate>Sat, 05 Jun 2021 12:47:54 +0000</pubDate>
      <link>https://dev.to/zawhtutwin/updating-product-attributes-in-woocommence-is-a-painful-experience-right-284i</link>
      <guid>https://dev.to/zawhtutwin/updating-product-attributes-in-woocommence-is-a-painful-experience-right-284i</guid>
      <description>&lt;p&gt;In this section,let me share how to update the product attributes programmatically in wordpress.&lt;/p&gt;

&lt;p&gt;Let's say we have a product attribute call "markup". We have to write like this in order to get the attribute correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$markup_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_post_meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'_product_attributes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;'markup'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to save the attribute again, quite tricky but still managable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$post_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$product_attr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_post_meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'_product_attributes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//get the whole product attributes first&lt;/span&gt;

&lt;span class="nv"&gt;$product_attr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'markup'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;50.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//your desired attribute value&lt;/span&gt;

&lt;span class="nf"&gt;update_post_meta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post_id&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'_product_attributes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$product_attr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, that's it. If you have a list of post id, and you  want to update the product attribute(in our case markup), that's how you are going to do it.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>php</category>
    </item>
    <item>
      <title>Explain What Single-Threaded JavaScript Means Like You Are 5 Years Old</title>
      <author>Nick Bull</author>
      <pubDate>Sat, 05 Jun 2021 12:26:46 +0000</pubDate>
      <link>https://dev.to/nickbulljs/explain-what-single-threaded-javascript-means-like-you-are-5-years-old-1fhd</link>
      <guid>https://dev.to/nickbulljs/explain-what-single-threaded-javascript-means-like-you-are-5-years-old-1fhd</guid>
      <description>&lt;p&gt;You are 5. A couple of years ago you could barely walk and talk. And now you're going to learn the hardest concept in JavaScript – threads. Sounds cool? Let’s start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#singlethreaded-javascript-our-super-special-kid"&gt;
  &lt;/a&gt;
  Single-Threaded Javascript. Our Super. Special. Kid.
&lt;/h2&gt;

&lt;p&gt;JavaScript is different from all other children. He is a special kid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFx0GeKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888777539/lGQmfOJT8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFx0GeKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888777539/lGQmfOJT8.png" alt="Slide 16_9 - 1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No, he can’t fly. &lt;strong&gt;He is single-threaded.&lt;/strong&gt; While other kids are multi-threaded.&lt;/p&gt;

&lt;p&gt;Nothing bad about it. It’s his choice. I even love it. But that's what makes it completely different in terms of how the code is running in JavaScript.&lt;/p&gt;

&lt;p&gt;When normal kids want to make a hot chocolate and watch a funny show on YouTube, they do it at the same time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YyoXRcjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622894742046/Jjz6WY303.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YyoXRcjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622894742046/Jjz6WY303.png" alt="Slide 16_9 - 12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But when our special kid wants to do it, he does it one by one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rqQGbt7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622894753051/FtC1rmxC8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rqQGbt7W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622894753051/FtC1rmxC8.png" alt="Slide 16_9 - 13.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The difference is that our kid always waits until some task is done and only &lt;em&gt;after&lt;/em&gt; that starts the next one. Other kids perform tasks simultaneously and don’t wait until some task is completed.&lt;/p&gt;

&lt;p&gt;The same way single-thread languages are different from multiple-thread languages. &lt;strong&gt;One performs only one task at a time. Others can perform them in parallel.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But why single-thread languages, special kids, can’t be normal and perform tasks in parallel?&lt;/p&gt;

&lt;p&gt;It's all about how the threads work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#threads-slides-dogs"&gt;
  &lt;/a&gt;
  Threads. Slides. Dogs.
&lt;/h2&gt;

&lt;p&gt;In programming, threads are essentially single processes that a program can use to perform tasks. Like a water slide where performing a task is the process of sliding down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkYbMz40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622891371422/yq74LpLj8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkYbMz40--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622891371422/yq74LpLj8.png" alt="Slide 16_9 - 10.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yes, it's a dog. It represents a task.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your computer works that way that &lt;strong&gt;each thread can execute only one task at a time.&lt;/strong&gt; And everything else is blocked until an operation completes.&lt;/p&gt;

&lt;p&gt;When one dog slides down a water slide, the other dogs have to wait. They can't slide down. &lt;strong&gt;Only one dog in a water slide. Only one task at a time in a thread.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Oh6sE2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622891741804/g9od7eder.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Oh6sE2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622891741804/g9od7eder.png" alt="Slide 16_9 - 11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our special kid JavaScript is a single-threaded language. It has only one thread. That’s why it can perform only one task at a time.&lt;/p&gt;

&lt;p&gt;But other kids are different.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thread-aquapark-our-child-has-grown-up"&gt;
  &lt;/a&gt;
  Thread. Aquapark. Our child has grown up.
&lt;/h2&gt;

&lt;p&gt;Imagine that our special kid grew up and decided to open an aquapark for dogs. But not a normal aquapark. He applied his &lt;em&gt;“single-threaded philosophy of life"&lt;/em&gt; to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRbSRPGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888813098/Rhk_gMHtd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRbSRPGC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888813098/Rhk_gMHtd.png" alt="Slide 16_9 - 4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because JavaScript is a single-threaded aquapark that only has one water slide, dogs can't go and have fun on the other slides. They have to stand in line and wait for each dog in front of them to finish riding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--34EGngZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888828932/1OYiC73rN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--34EGngZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888828932/1OYiC73rN.png" alt="Slide 16_9 - 5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at this, I can tell that our special kid JavaScript is going to be a total business fiasco. Can you imagine what will happen if some dog will slide down the water slide for 1 hour? Other dogs are waiting. Owners are angry. Dog Guards can't go home. Total disaster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRVhnRFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888839599/_OXihLePv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRVhnRFO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622888839599/_OXihLePv.png" alt="Slide 16_9 - 6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not every time we want to wait until some task is complete to move on to the next one. Sometimes we want to do them in parallel. Like other kids do. But JavaScript can't do it. He is a &lt;em&gt;special&lt;/em&gt; kid. He is single-threaded.&lt;/p&gt;

&lt;p&gt;And no matter how hard he tries to imitate multithreading behavior with setTimeout(..., 0) and web workers, he will still remain single-threaded. He will still remain our &lt;em&gt;special&lt;/em&gt; kid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjAZ22P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622889044466/uuU_twIlR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjAZ22P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622889044466/uuU_twIlR.png" alt="Slide 16_9 - 9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS: no dogs were harmed in the process of writing this article.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-end"&gt;
  &lt;/a&gt;
  In the end...
&lt;/h2&gt;

&lt;p&gt;If you want to learn JavaScript, I have something interesting for you. A JavaScript course that fixes &lt;em&gt;one&lt;/em&gt; thing that 97% of other courses lack – &lt;strong&gt;a combination of modern and practical JavaScript theory with real-world practice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try to get it here:  &lt;a href="http://javascriptcoursethatworks.com/"&gt;javascriptcoursethatworks.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you like this article you need to know that every Monday, I send a letter to 4,000+ Web Developers with 3 hand-picked articles from the tech world, 2 web development guides, and 1 best Tweet of the week&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Your newsletter is f&lt;/em&gt;&lt;em&gt;king awesome, really Nick. It gives me a great start to the week with a lot of insightful knowledge.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Join smart developers who get short and full of knowledge letters for free &lt;a href="https://nickbulljs.com/newsletter/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
