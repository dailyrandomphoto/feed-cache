<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>üå™Ô∏è Tornado Asynchronous Framework For Python</title>
      <author>Bek Brace</author>
      <pubDate>Fri, 16 Jul 2021 13:25:58 +0000</pubDate>
      <link>https://dev.to/bekbrace/tornado-asynchronous-framework-for-python-4cap</link>
      <guid>https://dev.to/bekbrace/tornado-asynchronous-framework-for-python-4cap</guid>
      <description>&lt;p&gt;Tornado is a Python open source framework, but also an asynchronous networking library, and it was originally developed for a company called FriendFeed, which was acquired by Facebook recently in 2009. To understand Tornado we need to know what is it good for.&lt;/p&gt;

&lt;p&gt;Make sure to check out my last video on tornado Framework &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-gJ21qzpieA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Tornado is ideal for building apps asking for high performance and several thousand concurrent users; it can handle 10K connections at once, in addition to that it's non-blocking network IO. Asynchronous programming was introduced to python since python 3.5 when the asyncio library was introduced.&lt;/p&gt;

&lt;p&gt;Before anything, you need to know that Asynchronous programming, more specifically async syntax makes you code faster to execute.&lt;/p&gt;

&lt;p&gt;Async is a way of Concurrent ProgrammingAsync is one way of doing concurrent programming, which means doing many things at once or achieving multiple tasks at once.&lt;/p&gt;

&lt;p&gt;How does Python achieve multiple tasks at once ?&lt;/p&gt;

&lt;p&gt;1 OS makes multi-sharing and multi-tasking happen: One way is to run multiple terminal instances and run your server, and all of them will work concurrently in the same time; and your operating system takes care of sharing your CPU resources among those terminal instances.&lt;/p&gt;

&lt;p&gt;2 Another way of achieving multiple tasks at once is by using threads. A thread is a line of execution for several instructions which means that they all share access to common resources, and here the operating system intervens to share your CPU with these threads&lt;/p&gt;

&lt;p&gt;3 The last way is asynchronous programming which what Tornado does, even though the opperating system will not have any role here, yet we'll be able to achieve multiple things at once with asynchronous programming&lt;/p&gt;

&lt;p&gt;Drop your comment or contact me on: &lt;a href="mailto:info@bekbrace.com"&gt;info@bekbrace.com&lt;/a&gt;&lt;br&gt;
Github page: &lt;a href="https://github.com/BekBrace%E2%80%8B"&gt;https://github.com/BekBrace‚Äã&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading and watching &lt;br&gt;
Until next time - Peace out, &lt;br&gt;
Bek&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Easy UI "2.0" is out ü•≥ü•≥ü•≥</title>
      <author>Siddharth Chaudhary (he/him)</author>
      <pubDate>Fri, 16 Jul 2021 12:49:04 +0000</pubDate>
      <link>https://dev.to/sidthedev/easy-ui-2-0-is-out-3g78</link>
      <guid>https://dev.to/sidthedev/easy-ui-2-0-is-out-3g78</guid>
      <description>&lt;p&gt;Here you go. I redesigned the Easy UI site&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_HPSKjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wc1sujygrtlb7k73h526.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q_HPSKjZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wc1sujygrtlb7k73h526.jpeg" alt="Easy UI"&gt;&lt;/a&gt;&lt;br&gt;
You can check it out &lt;a href="https://easyui.dev"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-new"&gt;
  &lt;/a&gt;
  What's new
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A complete redesign&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://easyui.dev/preview/smooth"&gt;The "Smooth" template&lt;/a&gt;:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7fBEBbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwsvao8rzvzmepybrveh.jpeg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;We decided to use &lt;a href="https://flurly.com"&gt;Flurly&lt;/a&gt; for payments, because it's a lot better than shopify üòÇ, and also because it's created by fellow indiehackers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-gift-to-the-dev-community"&gt;
  &lt;/a&gt;
  A gift to the dev community üíñ
&lt;/h2&gt;

&lt;p&gt;With this launch comes a gift to the developer community for being so amazing ü•∞. You can now get all templates for just $45 (worth $130)!&lt;/p&gt;

&lt;p&gt;Please upvote us on producthunt too üôè &lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/easy-ui-2-0?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-easy-ui-2-0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pFOC5V-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://api.producthunt.com/widgets/embed-image/v1/featured.svg%3Fpost_id%3D304741%26theme%3Dlight" alt="Easy UI 2.0 - Landing page templates for your next website | Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ui</category>
      <category>ux</category>
      <category>css</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Access the Amazon Elastic File System (EFS) from multiple VPC using VPC Peering </title>
      <author>V√≠ctor P√©rez Pereira</author>
      <pubDate>Fri, 16 Jul 2021 12:30:25 +0000</pubDate>
      <link>https://dev.to/aws-builders/access-the-amazon-elastic-file-system-efs-from-multiple-vpc-using-vpc-peering-3kb9</link>
      <guid>https://dev.to/aws-builders/access-the-amazon-elastic-file-system-efs-from-multiple-vpc-using-vpc-peering-3kb9</guid>
      <description>&lt;p&gt;When there are different environments (development, quality, production) in AWS, and we separate them in many VPC's or AWS accounts, but need access to the same EFS (Elastic File System), we can apply a configuration with VPC Peering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definitions"&gt;
  &lt;/a&gt;
  Definitions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Amazon Elastic File System (EFS)&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Amazon Elastic File System (Amazon EFS) provides a simple, serverless, set-and-forget, elastic file system that lets you share file data without provisioning or managing storage.&lt;/em&gt; &lt;a href="https://aws.amazon.com/efs"&gt;1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VPC peering&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;A VPC peering connection is a networking connection between two VPCs that enables you to route traffic between them using private IPv4 addresses or IPv6 addresses. Instances in either VPC can communicate with each other as if they are within the same network.&lt;/em&gt; &lt;a href="https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html"&gt;2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kKuXUZW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oquurmndwmhw3jl1piub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kKuXUZW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oquurmndwmhw3jl1piub.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  For example:
&lt;/h3&gt;

&lt;p&gt;We have two VPC in the same region with EFS connection using VPC Peering. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc13-WAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4drrluaks3z5yp8eq6br.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc13-WAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4drrluaks3z5yp8eq6br.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h3&gt;

&lt;p&gt;1- Create VPC Peering: Here I share a guide with information and configuration of the VPC Peering. &lt;a href="https://docs.aws.amazon.com/vpc/latest/peering/create-vpc-peering-connection.html#create-vpc-peering-connection-local"&gt;https://docs.aws.amazon.com/vpc/latest/peering/create-vpc-peering-connection.html#create-vpc-peering-connection-local&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, we create VPC Peering with the following network. &lt;/p&gt;

&lt;p&gt;Name: VPC-A: 10.8.0.0/16 &lt;br&gt;
Name: VPC-B:  172.31.0.0/16&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eim5I99m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iez2h768h2x4kj3bc5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eim5I99m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iez2h768h2x4kj3bc5v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2- Later in the previous phase, we configure and create EFS. Here I share guide: &lt;a href="https://docs.aws.amazon.com/efs/latest/ug/gs-step-two-create-efs-resources.html"&gt;https://docs.aws.amazon.com/efs/latest/ug/gs-step-two-create-efs-resources.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example: we create an EFS with ID fs-da19746e on VPC 10.8.0.0/16 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zjTTByzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89tq2tqq6ajyoht0kzth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjTTByzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89tq2tqq6ajyoht0kzth.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3- Now, we set up our EFS in Ubuntu Linux instance the network 10.8.0.0/16&lt;/p&gt;

&lt;p&gt;Before this, we create a directory /efs/shared, and we edit file /etc/fstab and add the following line:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fsda19746eefsuseast1amazonawscom-efsshared-nfs4-defaultsnetdev-0-0"&gt;
  &lt;/a&gt;
  fs-da19746e.efs.us-east-1.amazonaws.com:/ /efs-shared nfs4 defaults,_netdev 0 0
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeC9pdXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzq4m51ewyl6quzxpla6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeC9pdXE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzq4m51ewyl6quzxpla6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We check that it is set up EFS using the command: df -h&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lzHVq36K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7272j0nxc4rv5c47s6h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzHVq36K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7272j0nxc4rv5c47s6h.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we create a file with two lines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2JXaYqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2vawz4cfw7dz4c9s34x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2JXaYqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2vawz4cfw7dz4c9s34x.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we repeat the previous step but, now with the instance in VPC 172.3.1.0.0/16 however, for a successful connection, we must make the last command‚Äôs.&lt;/p&gt;

&lt;p&gt;4- Open a Cloud Shell in the Virginia region, then execute the following command:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aws-efs-describemounttargets-filesystemid-fsda19746e"&gt;
  &lt;/a&gt;
  aws efs describe-mount-targets --file-system-id fs-da19746e
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---znnq39y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37trn9xfhf46mh8mcfpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---znnq39y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37trn9xfhf46mh8mcfpw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obtain the interface IP of the EFS and write the following command in the instance EC2 the VPC 172.31.0.0/16 &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#echo-108181-fsda19746eefsuseast1amazonawscom-sudo-tee-a-etchosts"&gt;
  &lt;/a&gt;
  echo "10.8.1.81 fs-da19746e.efs.us-east-1.amazonaws.com" | sudo tee -a /etc/hosts
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1U4LvGvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ncmlpytf8nop9yvjf5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1U4LvGvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2ncmlpytf8nop9yvjf5.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later, we execute the same process and create directory /efs-shared and add it, then set up the disk in /etc/fstab the instance EC2 with the following command: mount /efs/shared. Finally, we verify if there is a file with the name "test".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGJVVcM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68i42olm6a4k6oj9eagf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGJVVcM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68i42olm6a4k6oj9eagf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twSr7IIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p3kwdqimi97egoq2rqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twSr7IIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0p3kwdqimi97egoq2rqt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these steps, now we have obtained EFS access in the different VPC no matter where EFS are configured.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations:
&lt;/h4&gt;

&lt;p&gt;‚óè Verify that the security group is attached to the EFS and available open port TCP:2049.&lt;/p&gt;

&lt;p&gt;‚óè VPC Peering has route tables that associate the connection with the EC2 instances.&lt;/p&gt;

&lt;p&gt;‚óè For this example, we use a network interface, the EFS, but you can use more interfaces in different subnets associated with the VPC.&lt;/p&gt;

&lt;p&gt;‚óè You can connect VPC Peering with different AWS accounts and other regions in the same account; however, it is important that the networks are not the same because VPC Peering doesn't accept the equal networks.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>efs</category>
      <category>vpc</category>
    </item>
    <item>
      <title>Developing Self Compassion: An Answer to the Constant Burnout</title>
      <author>Omri Lavi</author>
      <pubDate>Fri, 16 Jul 2021 12:17:14 +0000</pubDate>
      <link>https://dev.to/omril321/developing-self-compassion-an-answer-to-the-constant-burnout-35e1</link>
      <guid>https://dev.to/omril321/developing-self-compassion-an-answer-to-the-constant-burnout-35e1</guid>
      <description>&lt;p&gt;In the last few years, I developed an efficient routine to improve my abilities as a developer. I contributed to open source, read a lot, wrote blog posts and was active in social networks. Yet, I had a constant feeling that it's not enough - that I'm not &lt;em&gt;good enough&lt;/em&gt;. I thought I had to keep working hard, otherwise I'll go downhill. &lt;/p&gt;

&lt;p&gt;At some point I realized I was very stressed, and that I was concerned all the time, and that I couldn't rest properly. I couldn't accept positive feedbacks and found reasons why they are wrong. Generally speaking, I was very hard with myself. At some point I became aware of this situation and decided to make a process to change it. Now, a few months later, I feel much better with myself. I wanted to share my process, so that it will help others out there in similar situations. &lt;/p&gt;

&lt;p&gt;Feel like you're working hard and it's still &lt;em&gt;not enough?&lt;/em&gt; Are you unhappy with your job even though it's pretty good? Are you generally stressed about &lt;em&gt;your value as a developer&lt;/em&gt;? This post is for you. Take a few minutes to read through - you'll get a new perspective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-previous-routine"&gt;
  &lt;/a&gt;
  My Previous Routine
&lt;/h2&gt;

&lt;p&gt;In the past, I had a strict daily routine. It aggregated to the following weekly agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reading a tech book - 1.5 hrs/week&lt;/li&gt;
&lt;li&gt;Side projects, open source or writing - 10 hrs/week&lt;/li&gt;
&lt;li&gt;Reading and keeping up to date - 3 hrs/week&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually, if I had spare time, I spent it on side projects or reading. I didn't rest. &lt;/p&gt;

&lt;p&gt;I learned a lot and created a lot of content. I was confident my work "pays off". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DidxqCde--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj6r7hjuj1066k5kbog2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DidxqCde--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kj6r7hjuj1066k5kbog2.png"&gt;&lt;/a&gt;&lt;br&gt;Stressful free-time activities. (Image by &lt;a href="https://unsplash.com/photos/1K9T5YiZ2WU"&gt;Tim Gouw&lt;/a&gt;)
  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-cracks-start-to-show"&gt;
  &lt;/a&gt;
  When Cracks Start to Show
&lt;/h2&gt;

&lt;p&gt;With time, I noticed some things about myself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was always stressed.&lt;/li&gt;
&lt;li&gt;I couldn't rest properly.&lt;/li&gt;
&lt;li&gt;I was very sensitive to issues at work, and they influenced my mood.&lt;/li&gt;
&lt;li&gt;Even though I got positive feedbacks, I wasn't able to accept them. I found reasons why the feedbacks were wrong, and gave myself negative counter-feedbacks.&lt;/li&gt;
&lt;li&gt;I had "tunnel vision" when encountering issues. I couldn't see the "big picture". I was too busy being concerned how I'll be perceived.&lt;/li&gt;
&lt;li&gt;I constantly swung between finding flaws in myself and in the environment (the company, the process, my coworkers).&lt;/li&gt;
&lt;li&gt;I thought about work day and night. I enjoy thinking about technical challenges, but this was a different experience. It troubled me &lt;em&gt;where I was wrong&lt;/em&gt;, and what will my coworkers/supervisor say.&lt;/li&gt;
&lt;li&gt;I had a very strong imposter syndrome. I felt less professional than my surroundings and was afraid people will find out about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a long time I thought that &lt;em&gt;this is the price for having a good job&lt;/em&gt;, and that I have to accept it. I thought that if I'll learn and do more, I'll feel better with myself, since I'll be "more professional". I remember telling myself "you can learn more, instead of resting in the evening - spend the time by reading some more". So I pushed it a little more.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-awakening"&gt;
  &lt;/a&gt;
  The Awakening
&lt;/h2&gt;

&lt;p&gt;In 2020 Covid came along, and a personal disaster happened about at the same time. I started thinking about how I spend my time and what I sacrifice. I realized that the routine I'm having was taking its toll. It led me to some serious thinking about my goals and their prices. &lt;/p&gt;

&lt;p&gt;I talked about this a lot with my wife, who is ‚Äî luckily ‚Äî a personal consultant. This led me to a decision to make a change. I adjusted my goals, determined to be happier.&lt;/p&gt;

&lt;p&gt;Now, these are some big words. What does being happy even mean? Don't worry, this post won't get a spiritual twist üòú &lt;/p&gt;

&lt;p&gt;"Happiness" a profoundly personal definition and will differ for each individual. For me, I wanted to have a balance between:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A challenging and rewarding day job.&lt;/li&gt;
&lt;li&gt;Time to spend with my family and friends.&lt;/li&gt;
&lt;li&gt;The ability to maintain my hobbies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or in other words: retaining a good job, without allowing it consuming all my energy, all the time.&lt;/p&gt;

&lt;p&gt;I started a process to achieve my new goals.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#becoming-aware"&gt;
  &lt;/a&gt;
  Becoming Aware
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nI8UoPfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei8c6gwgvux7rr6klait.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nI8UoPfl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei8c6gwgvux7rr6klait.png"&gt;&lt;/a&gt;&lt;br&gt;Monkey observing itself in the mirror. It's time for reflections. (Image by &lt;a href="https://unsplash.com/photos/84oiI1wT4zU"&gt;Andre Mouton&lt;/a&gt;)
  &lt;/p&gt;

&lt;p&gt;My process took part in two seemingly orthogonal parts. The first one is simple: I reduced the "extra" time I spend (side projects, reading, etc.) to an acceptable minimum. I still spend time, but considerably less. But, this isn't enough by itself. I can't "switch off" the part of my brain which constantly judged and said "it's not enough". &lt;/p&gt;

&lt;p&gt;This was the second part, which required some more work. I observed at my thoughts and feelings about not being good enough. I noticed the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;I thought I needed to know everything&lt;/strong&gt;. I was afraid of encountering the unknown since it felt like a test. Each time someone else knew something I did not, I felt very bad. "I should have known this" was a common thought. On hindsight, I tried avoiding the unknown by trying to learn as much as possible.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I was very concerned with how I'm perceived&lt;/strong&gt;. This made me feel occasionally under test (even when I wasn't). When struggling with a technical issue, the soon-to-come feedback troubled me more than the issue itself.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I had unrealistic ideals&lt;/strong&gt;. I know a few very successful individuals, and I take them as role-models. Yet, unconsciously I thought I can have all the positive aspects from my idols (writing blogs, contributing to open-source...), without having any of the negative aspects (the sacrifices).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I understood that my ideals made me very judgmental about myself and my surroundings.&lt;/strong&gt; When things didn't go as I imagined I became upset. It could have been something in the workflow, or a coworker that didn't see things as I do . The gap between my ideals and the reality made me believe (sometimes) I don't fit.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Almost all my feedbacks were positive&lt;/strong&gt;. This part is important - my feelings about not being good enough were not based on any external feedback. Objectively, I was doing ok.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After learning about my thoughts and feelings, I started making cognitive changes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#changing-the-narrative"&gt;
  &lt;/a&gt;
  Changing the Narrative
&lt;/h2&gt;

&lt;p&gt;To achieve my goals, I needed to cognitively change the way I think. This may sound abstract, and it's easy to be cynical about it. However, it is feasible with a lot of hard work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;I accepted I CAN'T have it all&lt;/strong&gt;. I'm no superman. I adjusted my ideals and "lowered the bar".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I remind myself where I'm doing OK&lt;/strong&gt;. I don't &lt;em&gt;have&lt;/em&gt; to be overwhelmingly great, being OK is good enough. I allowed myself listening to external positive feedbacks.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I decided to gain meaning from myself, and not my surroundings.&lt;/strong&gt; If negative feedbacks show up, they shouldn't affect my self-esteem. Having areas that need improvements don't make me a bad developer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I accepted I can't know everything&lt;/strong&gt;. Learning is great. But, naturally, it is not possible to know everything. It is GUARANTEED I will bump into things I don't know, and someone else will. No one can escape this scenario. This led me to an important understanding. &lt;em&gt;Professionalism is measured not only by what you know, but how you learn what you don't know.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I accepted that people have different values than me&lt;/strong&gt;. Sometimes I have opinions of how things "should be", that weren't in line with my coworkers' opinions. In times where I couldn't convince my colleagues, I felt very bad. Instead, I now allow myself letting go of some of my ideas. "Chasing" them and trying to make them happen at all cost was frustrating.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I accepted my judgmental nature&lt;/strong&gt;. When a judgmental though came to my mind, I noticed it, and labeled it as such. I doubted it instead of accepting it as is. Eventually, I could separate cases where things are truly "bad" or rather they just don't match my ideal (which is my problem). I moved from a passive point of view ("This is bad" or "I am bad") to an active point of view ("Should this be improved? Can I improve it? What can I do?").&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I decided to spend less time "learning" and "pushing myself forward".&lt;/strong&gt; Instead, I spent some time with non-work things. I learned to juggle. I improved my chess skills. I exercise more. I even play more PC games (an extreme luxury in the past).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I know what you're thinking. "Huh, that's a one way street for becoming a mediocre developer, or worse". Is it so?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#slowing-down-%E2%89%A0-stopping"&gt;
  &lt;/a&gt;
  Slowing Down ‚â† Stopping
&lt;/h2&gt;

&lt;p&gt;Naturally, this change may slow my career progress. However, the pros beat the cons. I don't feel stressed, and I'm more energetic. Non-work activities were more enjoyable. I'm more concentrated at work, and I solve problems quicker. When incidents come up at work, I'm much more calm and focused. Innovative ideas come to my mind more often, and I have time to implement them. I learn and create because I &lt;em&gt;want to&lt;/em&gt;, not because I &lt;em&gt;have to&lt;/em&gt;. Once you realize you don't really chase anything - the meaning of speed matters less.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qu4NRocq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q72hxdjn4hktpz69kjqg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qu4NRocq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q72hxdjn4hktpz69kjqg.jpg"&gt;&lt;/a&gt;&lt;br&gt;A walking person enjoying the view. It's not a race, you won't "win" by going faster. (Image by &lt;a href="https://unsplash.com/photos/mNGaaLeWEp0"&gt;Emma Simpson&lt;/a&gt;)
  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Being a developer is very demanding by itself. On top of that, each person in the dev community has something to say about what you should learn, and what you should do. FOMO is inevitable, and it's easy to feel bad (or simply not good enough) with yourself. &lt;/p&gt;

&lt;p&gt;I wanted to share my story, maybe it will help other devs with similar feelings.  My main message to you is: Relax, breath. Remember to slow down sometimes. You're doing alright ü§ó&lt;/p&gt;

&lt;p&gt;On a more personal note (if that's even possible), it was very difficult to me for write on such a personal topic. I'd love to hear your thoughts about this - feel free to approach me at any way (comments, DM, emails - you name it)&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>productivity</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Creating a multi architecture CI/CD deployment for Amazon ECS and ECS Anywhere</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Fri, 16 Jul 2021 12:08:59 +0000</pubDate>
      <link>https://dev.to/aws/creating-a-multi-architecture-ci-cd-deployment-for-amazon-ecs-and-ecs-anywhere-15o3</link>
      <guid>https://dev.to/aws/creating-a-multi-architecture-ci-cd-deployment-for-amazon-ecs-and-ecs-anywhere-15o3</guid>
      <description>&lt;p&gt;Organisations are moving their workloads to the cloud as quickly as they can. While most applications can be easily migrated to the cloud, some applications need to remain on-premises due to low-latency or data sovereignty requirements. &lt;/p&gt;

&lt;p&gt;Regardless of where workloads may reside, organisations want to be able to develop once and be able to deploy workloads to the cloud or on-premises in an agile and consistent fashion using a common set of APIs to manage and operate. &lt;/p&gt;

&lt;p&gt;Furthermore, enterprises need to be able to leverage investments in skills, technology, and processes across their environments. This leads many enterprises to seek hybrid cloud architectures to integrate their on-premises and cloud operations to support a broad spectrum of use cases, &lt;/p&gt;

&lt;p&gt;In this post I am going to explore how you can deploy your application to both your own environment and the AWS Cloud. We will take a simple application, a Dockerised Spring Boot application, and then automate the build and deployment of that application so that we can run it anywhere we want and on multiple processor architectures. For this I am going to setup Amazon ECS and ECS Anywhere, which allows you to run your ECS applications anywhere you want.&lt;/p&gt;

&lt;p&gt;We will cover setting up a simple hybrid environment, with my home network being a proxy for your own on premises environment, and set up the site to site VPN and software components that enable us to seamlessly deploy our containerised applications on both our Cloud and our on premises servers.&lt;/p&gt;

&lt;p&gt;This is what it will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IT_vwPtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/blog-multi-arch2.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IT_vwPtc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/blog-multi-arch2.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The kinds of use case and problems this will help you with include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;building my applications so they will work across different architecture types, providing me with more choice and options&lt;/li&gt;
&lt;li&gt;simplifying and centralising my application builds so I can build once and deploy anywhere on any architecture&lt;/li&gt;
&lt;li&gt;manage my containerised applications running either in AWS or within my own environments (via ECS Anywhere)&lt;/li&gt;
&lt;li&gt;provide additional deployment applications for applications that might have requirements to run locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post will be in two parts.&lt;/p&gt;

&lt;p&gt;The first part will look at setting up the multi-architecture build pipeline, that will take our sample Spring Boot application, and then build it and deploy it to some target clusters running mixed x86 and AWS Graviton2/arm based instance types.&lt;/p&gt;

&lt;p&gt;The second part will look at extending this model, setting up the hybrid environment using ECS Anywhere and then using that to deploy the same application seamlessly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will need&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can follow on with this post as I have published all the scripts and code so you can replicated this for yourself. Find the &lt;a href="https://github.com/094459/blog-multi-arch-springboot"&gt;GitHub repo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need a developer environment that has the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS Account with the right level of access (Admin) as well as the &lt;a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html?icmpid=docs_acc_console_connect"&gt;CodeCommit configured&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS cli&lt;/li&gt;
&lt;li&gt;Docker running on your local environment&lt;/li&gt;
&lt;li&gt;A Docker Hub account (we will need to use this to pull down containers during the build process)&lt;/li&gt;
&lt;li&gt;AWS CDK setup and running (cdk --version should be at least version 1.110.1)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have been running this demo for about a week, and it has cost me so about $22 per day but I suspect if you get it up and running and then explore and remove everything it will cost a lot less. These exclude any costs you might have for your local environment.&lt;/p&gt;

&lt;p&gt;I will cover how to remove everything at the end as part of the clean up activities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-zero-the-application"&gt;
  &lt;/a&gt;
  Part zero: The application
&lt;/h2&gt;

&lt;p&gt;The app we will be using is a simple Spring Boot application that will display a different logo based on what the underlying architecture is.&lt;/p&gt;

&lt;p&gt;The application has been containerised, and here is the Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM amazoncorretto:11 as builder

COPY . /srv
WORKDIR /srv
RUN ./mvnw package spring-boot:repackage


FROM amazoncorretto:11

COPY --from=builder /srv/target/spring-boot-demo-1.0.0.jar /srv/
EXPOSE 8080

ENTRYPOINT ["java","-jar", "/srv/spring-boot-demo-1.0.0.jar"]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you access the application via a web browser, it will display information about the underlying system that it is running on, changing image based on the process architecture.&lt;/p&gt;

&lt;p&gt;We can run this application on our local developer environment which we will see in a moment so you can see it running as you might typically do as part of your development workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-one-setting-up-the-multi-architecture-cicd-pipeline"&gt;
  &lt;/a&gt;
  Part One: Setting up the Multi architecture CI/CD pipeline
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are going to set up the environment using Infrastructure as Code (IaC) and in this particular walkthrough, I am going to use AWS CDK. This will do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setup the initial source code and container repositories via a setup script&lt;/li&gt;
&lt;li&gt;set up the networking infrastructure, including the site to site VPN which we will use later&lt;/li&gt;
&lt;li&gt;set up the Amazon ECS cluster, deploying our application&lt;/li&gt;
&lt;li&gt;deploy a CI/CD pipeline that will automate the rebuilding and repacking of our application when changes are detected, and deploy the latest version to our Amazon ECS Cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what it will look like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lDxi6xBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/blog-multi-arch1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lDxi6xBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/blog-multi-arch1.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker Hub&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We need to create and store securely the Docker Hub username and password which will be used by the automation scripts. We do not want to store these in the configuration files, as we do not want to leak those to our source control systems. We will store this using AWS Parameter Store, and then reference these in our code we will run later.&lt;/p&gt;

&lt;p&gt;We will create two parameters, one for the Docker Hub username, the other for the password. In our code we reference these as "/springboot-multiarch/dockerhub/username" and "/springboot-multiarch/dockerhub/password" so if you change these, remember to update the code where they are referenced.&lt;/p&gt;

&lt;p&gt;To create your username/password, go to your Docker Hub account settings and create a new token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rXv0pu8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/dhub.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rXv0pu8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/dhub.png%3Fraw%3Dtrue" alt="screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have created one called "multi-arch-spring" and it will generate a token. You need to record this and keep it safe as we will use it in the next step.&lt;/p&gt;

&lt;p&gt;From the command line, lets store these using the following commands, replacing the region where you want to deploy this solution and the password token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ssm put-parameter --name "/springboot-multiarch/dockerhub/username" --value "multi-arch-spring" --type "SecureString" --region={your region where you will deploy this app}
aws ssm put-parameter --name "/springboot-multiarch/dockerhub/password" --value "{your token}" --type "SecureString" --region={your region where you will deploy this app}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the AWS console, if you go to the AWS Systems Manager, Parameter Store you should now see these@&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTp4eiz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ssm.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTp4eiz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ssm.png%3Fraw%3Dtrue" alt="show"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now ready to proceed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running the setup script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] Check out the repository on your developer machine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the example below, I am checking the repository out after swtiching to a separate folder off my home folder in a directory called blog-demo [cd ~/blog-demo]&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~
mkdir blog-demo
cd ~/blog-demo
git clone https://github.com/094459/blog-multi-arch-springboot.git
cd blog-multi-arch-springboot/demo-multiarch-springboot-multiarch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[2] Review the setup.sh script, changing the parameters at the top of the script so that they work for your own environment. You MUST change the AWS DEFAULT REGION and AWS ACCOUNT, the others you can leave if you want but are customisable. Any changes will need to be updated in the CDK application which we will use later.&lt;/p&gt;

&lt;p&gt;For the rest of this walk through, I will use these values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AWS_DEFAULT_REGION={your AWS region}
AWS_ACCOUNT={your AWS account number}
AWS_ECR_REPO=demo-multiarch-springboot-ecsanywhere
AWS_CC_REPO=demo-multiarch-springboot-ecsanywhere
COMMIT_HASH="abcdef"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[3] Run the setup.sh script, which will 1/Create a Code Commit repository, 2/Create an ECR repository and 3/Build and publish the sample Spring Boot application in the ECR repository.&lt;/p&gt;

&lt;p&gt;We are containerising this application as we will be using this container when we create the Amazon ECS cluster.&lt;/p&gt;

&lt;p&gt;Running this script may take 10-15 minutes (or more depending on your internet speeds) but you should see something like this (your specific details will be different to the following)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
...
The push refers to repository [704533066374.dkr.ecr.eu-west-1.amazonaws.com/demo-multiarch-springboot-ecsanywhere-test]
05aeb36b29bc: Pushed
# create AWS ECR Repo
91a6dcd86b53: Pushed
ec1372e9de86: Pushed
abcdef-arm64: digest: sha256:f51d9da34442fb53f67439752754fd36e02406d061db0a574429e6ecf94d9689 size: 954
Created manifest list 704533066374.dkr.ecr.eu-west-1.amazonaws.com/demo-multiarch-springboot-ecsanywhere-test:abcdef
{
   "schemaVersion": 2,
   "mediaType": "application/vnd.docker.distribution.manifest.list.v2+json",
   "manifests": [
      {
         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
         "size": 954,
         "digest": "sha256:28ad0b732b826e8a27575715b3d922c4ce0065749be31af7325ab5f96c5fba9b",
         "platform": {
            "architecture": "amd64",
            "os": "linux"
         }
      },
      {
         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
         "size": 954,
         "digest": "sha256:f51d9da34442fb53f67439752754fd36e02406d061db0a574429e6ecf94d9689",
         "platform": {
            "architecture": "arm64",
            "os": "linux"
         }
      }
   ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have our containerised application stored in Amazon ECR, which we will use when we build our Amazon ECS cluster.&lt;/p&gt;

&lt;p&gt;[4] We are now going to populate the CodeCommit repository that was created. We will create a new working directory to do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/blog-demo
git clone https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/demo-multiarch-springboot-ecsanywhere-test demo-app
cd demo-app
cp -r ~/blog-demo/blog-multi-arch-springboot/demo-multiarch-springboot-multiarch/* .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now have a directory structure that looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ cdk-app
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ecs-anywhere
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ app.py
‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ecs_anywhere
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ecs_anywhere_cicd.py
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ecs_anywhere_ecs.py
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ecs_anywhere_pipe.py
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ecs_anywhere_repo.py
‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ecs_anywhere_vpc.py
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ requirements.txt
‚îú‚îÄ‚îÄ pipeline
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ecs-pipeline
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ eks-pipeline
‚îú‚îÄ‚îÄ setup.sh
‚îî‚îÄ‚îÄ springbootdemo
    ‚îú‚îÄ‚îÄ Dockerfile
    ‚îú‚îÄ‚îÄ mvnw
    ‚îú‚îÄ‚îÄ pom.xml
    ‚îú‚îÄ‚îÄ src
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main
    ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ java
    ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ hello
    ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ Application.java
    ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ HelloController.java
    ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ resources
    ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ static
    ‚îÇ¬†¬†             ‚îú‚îÄ‚îÄ css
    ‚îÇ¬†¬†             ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ style.css
    ‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ images
    ‚îÇ¬†¬†                 ‚îú‚îÄ‚îÄ arm.png
    ‚îÇ¬†¬†                 ‚îú‚îÄ‚îÄ aws.png
    ‚îÇ¬†¬†                 ‚îî‚îÄ‚îÄ intel.png
    ‚îú‚îÄ‚îÄ tf-any.json
    ‚îú‚îÄ‚îÄ tf.json
    ‚îî‚îÄ‚îÄ tf.json.template
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[5] Commit this and then publish to the CodeCommit repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m "Initial upload"
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note! If you get prompted for username/password, then you may not have the CodeCommit Git helper configured. Check out the documented linked above. In your .gitconfig file I have the following setup&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[credential]
  helper =
  helper = !aws codecommit credential-helper $@
  UseHttpPath = true

[user]
  email = xxxx@xxxx.com
  name = xxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;[6] We will now change the default branch to Main. This is much easier to do via the console, where you go to the repository (demo-multiarch-springboot-ecsanywhere-test) create a branch (main) and then go to settings and make this the default branch. &lt;/p&gt;

&lt;p&gt;Once you have done this, switch to the main branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git pull
git checkout main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have the application we can make updates too that will trigger our CI/CD pipeline later on. Now we can set that up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploy the AWS resources via AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[7] We are now ready to deploy the AWS resources using AWS CDK. We go back to the first folder we checked out, and go to the folder where the CDK app has been created. We need to adjust the app.py file, which contains parameters to customise the demo for your environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ~/blog-demo/blog-multi-arch-springboot/demo-multiarch-springboot-multiarch/cdk-app/ecs-anywhere
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you look at the app.py file, you will need to change the env_EU and the props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from aws_cdk import core

from ecs_anywhere.ecs_anywhere_cicd import EcsAnywhereCICDStack
from ecs_anywhere.ecs_anywhere_vpc import EcsAnywhereVPCStack
from ecs_anywhere.ecs_anywhere_ecs import EcsAnywhereECSStack
from ecs_anywhere.ecs_anywhere_pipe import EcsAnywherePipeStack
from ecs_anywhere.ecs_anywhere_repo import EcsAnywhereLBStack

env_EU=core.Environment(region="eu-west-1", account="704533066374")

props = {
    'mydcexternalip': '79.67.110.xx',
    'mydcinternalcidr' : '192.168.1.0/24',
    'awsvpccidr':'10.0.0.0/16',
    'ecsclustername':'mydc-ecs',
    'ecr-repo': 'demo-multiarch-springboot-ecsanywhere',
    'code-repo' : 'demo-multiarch-springboot-multiarch',
    'image-tag' : 'abcdef',
    'home-pi' : '192.168.1.99'
    }

app = core.App()

mydc_vpc = EcsAnywhereVPCStack(
    scope=app,
    id="ecs-anywhere-vpc",
    env=env_EU,
    props=props
)

mydc_lb = EcsAnywhereLBStack(
    scope=app,
    id="ecs-anywhere-lb",
    env=env_EU,
    vpc=mydc_vpc.vpc,
    props=props
)

mydc_ecs_cicd = EcsAnywhereCICDStack(
    scope=app,
    id="ecs-anywhere-cicd",
    env=env_EU,
    vpc=mydc_vpc.vpc,
    props=props  
)

mydc_ecs_pipe = EcsAnywherePipeStack(
    scope=app,
    id="ecs-anywhere-pipe",
    env=env_EU,
    vpc=mydc_vpc.vpc,
    props=props  
)

mydc_ecs = EcsAnywhereECSStack(
    scope=app,
    id="ecs-anywhere-cfn",
    env=env_EU,
    vpc=mydc_vpc.vpc,
    props=props
)

app.synth()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The app.py shows you the different stacks that you will need to deploy to build this demo. The first thing we need to do is set the correct values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env_EU=core.Environment(region="{your aws region}", account="{your aws account}")

props = {
    'mydcexternalip': '{your external router IP - you can find this via tools like what is my IP}',
    'mydcinternalcidr' : '{your home network CIDR e.g.192.168.1.0/24}',
    'awsvpccidr':'{your VPC CIDR range e.g 10.0.0.0/16}',
    'ecsclustername':'{name for your ecs cluster e.g. mydc-ecs}',
    'ecr-repo': '{name of the ECR repo - must match what you set in the setup.sh e.g. demo-multiarch-springboot-ecsanywhere}',
    'code-repo' : '{name of the CodeCommit repo - must match what you setup above, e.g. demo-multiarch-springboot-multiarch}',
    'image-tag' : '{initial hash for ECR repo - must match what you have setup above, e.g. abcdef}'
    }
    'home-pi' : '{the IP address of the Raspberry Pi you will be running your workloads on your local network}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have amended this file and saved it, we are ready to deploy the first stack. To make sure it is all working as expect, type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you should see the following output, which means we are ready to go.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ecs-anywhere-cfn
ecs-anywhere-pipe
ecs-anywhere-vpc
ecs-anywhere-cicd
ecs-anywhere-lb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Deploy the VPC stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[8] The first stack we will deploy is the VPC which will deploy and configure all the networking components. Much of this will be used in Part Two. To deploy,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-vpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you should see something like this if successful. You will need this info for Part Two, so make sure you keep a record although you can view this information in the CloudFormation console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ‚úÖ  ecs-anywhere-vpc

Outputs:
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcC99028A5E0C4BB86 = vpc-0e77901855dd34b64
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcprivateSubnet1Subnet907447937118DADD = subnet-00d3e62f014db2eb2
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcprivateSubnet2Subnet2F863D5508703380 = subnet-084ab056d6ab1ae1a
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcpublicSubnet1Subnet93B9609B6FB2CB58 = subnet-0eb59347bf659e8d0
ecs-anywhere-vpc.ExportsOutputRefmydcvpnvpcpublicSubnet2Subnet252458EC3B8C529C = subnet-038234a8a8bffb90a
ecs-anywhere-vpc.VPCId = vpc-0e77901855dd34b64
ecs-anywhere-vpc.VPGId = vgw-0bc980838a7a37eda

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-vpc/a5f78e70-e28e-11eb-90fc-026316002c84
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Deploy the Amazon ECS Cluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[9] The next stage we will deploy the application into an Amazon ECS cluster. This will create two EC2 instances, one using x86 and the other, using AWS Graviton2 instance types. It will set up the application load balancer and create a service. Once this has completed, we will be able to access the application via the DNS name that is displayed in the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-cicd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a review screen that shows the security changes this stack will deploy. Answer Y to deploy. After a while, if you are successful you will see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ‚úÖ  ecs-anywhere-cicd

Outputs:
ecs-anywhere-cicd.LoadBalancerEndpoint = ecs-a-LB8A1-UQ0ZD3461WUB-1638849351.eu-central-1.elb.amazonaws.com

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-cicd/7004c1a0-e290-11eb-9334-0288a08f1e2c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[10] You will now be able to access the application via the browser, using the endpoint that is output. In my example, when I enter "&lt;a href="http://ecs-a-LB8A1-UQ0ZD3461WUB-1638849351.eu-central-1.elb.amazonaws.com"&gt;http://ecs-a-LB8A1-UQ0ZD3461WUB-1638849351.eu-central-1.elb.amazonaws.com&lt;/a&gt;" into my browser and refresh a few times, I see the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLJa2Qf8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/app-x86.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLJa2Qf8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/app-x86.png%3Fraw%3Dtrue" alt="demo app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I refresh the page a few times, you should see it change as your request is served up by a different container instance running on a different processor architecture&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e1zpsdZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/app-arm.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1zpsdZ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/app-arm.png%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have now deployed the application, next step is to setup and deploy a CI/CD so we can make changes and automate the process of 1/building updates container images of our application, and 2/deploy this to this cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying the CI/CD System&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[11] From the command line, we can deploy the CI/CD setup with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-pipeline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a review screen that shows the security changes this stack will deploy. Answer Y to deploy. After a while, if you are successful you will see the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ‚úÖ  ecs-anywhere-pipe

Outputs:
ecs-anywhere-pipe.CodeCommitOutput = https://git-codecommit.eu-central-1.amazonaws.com/v1/repos/demo-springboot-repo

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-pipe/30f90840-e29a-11eb-b20f-0ae3cbe3a3b6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is it, you now have a CI/CD setup that is going to build both x86 and arm container images of your application every time you change your code.&lt;/p&gt;

&lt;p&gt;The CDK application builds the CodePipeline and CodeBuild steps, ensures that the right permissions are defined and that it is integrated with the right source code repository to trigger the pipeline. It does not configure what these steps will do however, and for that we have some additional yml files where we configure the actual build steps.&lt;/p&gt;

&lt;p&gt;In the source code repository you will find a directory called "pipelines/ecs-pipeline" which has three files; armbuild.yml, amdbuild.yml and post_build.yml. These are the files that are used to create the specific actions that will be done by the automation. They use environment variables, including some we have set in the code to store values such as the ECS Cluster and Service name, the Docker Hub username and password and the tag id used for the container repository.&lt;/p&gt;

&lt;p&gt;Here is the post_build.yml file that takes the x86 and arm built containers, creates the container manifest files, tags them, uploads them to the Amazon ECR repository and then finally kicks of the deployment to our ECS cluster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - ARM_TAG=${IMAGE_TAG}-arm64
      - AMD_TAG=${IMAGE_TAG}-amd64
      - echo $REPOSITORY_URI
      - echo $IMAGE_TAG
      - echo $AMD_TAG
      - echo $ARM_TAG
      - export DOCKER_CLI_EXPERIMENTAL=enabled
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker manifest...
      - docker manifest create $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$ARM_TAG $REPOSITORY_URI:$AMD_TAG
      - docker manifest annotate --arch arm64 $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$ARM_TAG
      - docker manifest annotate --arch amd64 $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$AMD_TAG
      - docker manifest inspect $REPOSITORY_URI:$IMAGE_TAG
      - docker manifest push $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
       - cd springbootdemo
       - sed -i "s|{ecr_image}|${REPOSITORY_URI}:${IMAGE_TAG}|g" tf.json
       - sed -i "s|{region}|$AWS_DEFAULT_REGION|g" tf.json
       - sed -i "s|{log_group}|$ECS_SN|g" tf.json
       - aws ecs register-task-definition --cli-input-json file://tf.json
       - TASK_DEFINITON="springboot-cicd"
       - TASK_REVISION=`aws ecs describe-task-definition --task-definition $TASK_DEFINITON | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,$//'`
       - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEFINITON:${TASK_REVISION} 
       - aws ssm put-parameter --name "/demo/ecsanywhere/latestimage" --value ${IMAGE_TAG} --type "String" --overwrite

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's review what we have done so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reviewing what we just did&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have used AWS CDK as well as some scripts to automate the deployment and configuration of our sample application into an Amazon ECS cluster, and setup a simple CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;If you go to the AWS Console and review the Pipelines under CodePipeline, you should see that you now have a pipeline called "ECSAnyWhere" (or if you modified the code, what ever you renamed it to) with a status of successful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZuVx6Ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/pipeline.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZuVx6Ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/pipeline.png%3Fraw%3Dtrue" alt="pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can explore the build logs to see the output for each stage to see in more detail what is happening.&lt;/p&gt;

&lt;p&gt;When we make changes to our application, it kicks off the CI/CD system which builds the application on both x86 and arm platforms, and then deploys these on both x86 and Graviton2 instance types. Check out the application repo locally and make some changes. The code you can change is the HelloController.java (it will be n the springboot/src/main/java/hello directory) and I suggest perhaps changing the version number or the text that is displayed. &lt;/p&gt;

&lt;p&gt;Once you have committed the code, when you go back to the CodePipeline screen, you should see that the pipeline is kicking off. It will take around 5-10 minutes for the code to update and deploy to the ECS Cluster. Once it has, check both the application via the browser to see if your changes have been successful, or the logs (see below)&lt;/p&gt;

&lt;p&gt;You can review the output of this via the CloudFormation console. There will be a new CloudWatch log group, which should have a log stream for each ECS instance (so if you follow all the defaults, there will be two). When you open these log streams, you should see the output as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CJI_tiWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/cw.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJI_tiWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/cw.png%3Fraw%3Dtrue" alt="logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the next part we are going to integrate with our "on premises" environment, which in my case, is my home network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-two-setting-up-and-integrating-with-your-local-environment"&gt;
  &lt;/a&gt;
  Part Two: Setting up and integrating with your local environment
&lt;/h2&gt;

&lt;p&gt;Now that we have our application, the next stage is to integrate this with our own environment. I am going to be doing the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup the local environment - configuring the site to site VPN and all the additional software components needed&lt;/li&gt;
&lt;li&gt;Deploying the AWS resources - we will set up an Amazon ECS cluster that will use the application we have just automated&lt;/li&gt;
&lt;li&gt;Integrate the on premises and AWS cloud environments&lt;/li&gt;
&lt;li&gt;Run our workloads, testing them both in the Cloud and on premises.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a number of great blog posts I read whilst preparing this post, which you should check out. The first is from Romain Jourdan &lt;a href="https://aws-oss.beachgeek.co.uk/pz"&gt;Secure Connection between AWS VPC and a Raspberry Pi&lt;/a&gt;, but there are a few others that are worth mentioning. This blog post from Nathan Peck, &lt;a href="https://aws-oss.beachgeek.co.uk/q0"&gt;Building an Amazon ECS Anywhere home lab with Amazon VPC network connectivity&lt;/a&gt; and this post &lt;a href="https://aws-oss.beachgeek.co.uk/q2"&gt;Look ma, I can run containers on Amazon ECS Anywhere ‚Äî On-premises or on the Cloud !!&lt;/a&gt;. Finally, this great post, &lt;a href="https://aws-oss.beachgeek.co.uk/q1"&gt;Setup Raspberry PI 3 as AWS VPN Customer Gateway&lt;/a&gt; helped get me unstuck when I had VPN issues.&lt;/p&gt;

&lt;p&gt;Make sure you check them out if you get stuck or want to dive a little deeper into this setup. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am going to be using a Raspberry Pi as VPN Gateway, setup on my local network. I will use a different Raspberry Pi to run the application workloads.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you have a different VPN Gateway (for example, if you are using a Unify type solution, then check out this Romain Jourdan blog post above). &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing I have done on my home router is to create a Firewall DMZ, which opens up the world to the Internet, to a single host (in my case, a Raspberry Pi which I will host my VPN Gateway). It is outside the scope of this post on how that is configured, but it is a hardened/secure configuration given it is "exposed".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating the local Raspberry Pi's&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing I had to do was to update the firmware and kernel to latest version on the Raspberry Pi. This is outside the scope of this post, but if you get errors during the VPN setup with missing libraries, it is likely they are the cause of the problem so make sure you update everything before proceeding. You should do this at the start before you begin.&lt;/p&gt;

&lt;p&gt;I was using two different kinds of Raspberry Pi's - for the VPN Gateway I used an older Raspberry Pi Model 3 Rev B (running Raspbian), but for the Workloads I had a later Raspberry pi Model 4 (I was running Ubuntu 20.04.02 LTS).&lt;/p&gt;

&lt;p&gt;This is the output once I had updated the Pi running the VPN Gateway&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uname-a output
Linux dmcpi01 5.10.44-v7+ #1428 SMP Thu Jun 24 17:22:49 BST 2021 armv7l GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the output once I had updated the Pi running the workloads&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;uname -a
Linux ubuntu 5.4.0-1038-raspi #41-Ubuntu SMP PREEMPT Thu Jun 17 14:14:11 UTC 2021 aarch64 aarch64 aarch64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the Pi running the workloads I needed to make a modifications to /boot/firmware/cmdline.txt to append the following cgroup_enable=memory&lt;/p&gt;

&lt;p&gt;This is what mine looked like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;net.ifnames=0 dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc cgroup_enable=memory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that change was done, a reboot is required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the local Raspberry Pi that will run the local VPN Gateway&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] I needed to install some additional packages and dependencies. On the Raspberry Pi that is going to be my VPN Gateway, I run these commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install strongswan raspberrypi-kernel-headers lsof
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can check to see if this has been successful by running this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ipsec status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should not return any errors. This is now ready for connecting to our AWS VPN, which we will now create so for the time being we will leave this and come back later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Site to Site VPN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[2] When we ran the "cdk deploy ecs-anywhere-vpc" it deployed and configured everything on the AWS side for the Site to Site VPN. We now just need to configure the local VPN gateway (Strongswan) to set up the ipsec tunnels.&lt;/p&gt;

&lt;p&gt;From the AWS console, you can see this if you go to the VPC, Site to Site Connections which should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IdSOK6aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-before.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IdSOK6aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-before.png%3Fraw%3Dtrue" alt="vpn-down"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This information was provided in the parameter section of the app.py file, and the important details here now are the CIDR address ranges (that need to match your local network - for mine this is 192.168.1.0/24) and the external IP address which is what the VPN tunnel from the AWS side is going to look to connect to. If you are unsure what this is, you can find it by googling "my IP address" - make sure you are not connected to a VPN though, otherwise you will get a different.&lt;/p&gt;

&lt;p&gt;You will need to click on the DOWNLOAD CONFIGURATION (highlighted above/arrow) and then select STRONGSWAN from the pull down menu. There are only single options for PLATFORM/SOFTWARE so click on the DOWNLOAD button, which will download a text file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0nLfF6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-strong.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0nLfF6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-strong.png%3Fraw%3Dtrue" alt="strong"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] You will now need to follow the instructions provided in that text file on your Raspberry Pi local gateway.&lt;/p&gt;

&lt;p&gt;It should be pretty straight forward, but might take you around 10-15 minutes to complete. For reference, these are the steps I took:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Changed /etc/sysctl.conf as per the various options documented (and then reload this via sudo sysctl -p)&lt;/li&gt;
&lt;li&gt;Created the ipsec.conf and added details for the two ipsec tunnels&lt;/li&gt;
&lt;li&gt;Created the ipsec.secrets and added the shared secrets&lt;/li&gt;
&lt;li&gt;Created the tunnel interfaces, running these commands:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ip link add Tunnel1 type vti local 192.168.1.6 remote 35.156.20.208 key 100
sudo ip addr add 169.254.100.230/30 remote 169.254.100.229/30 dev Tunnel1
sudo ip link set Tunnel1 up mtu 1419
sudo ip route add 10.0.0.0/16 dev Tunnel1 metric 100
sudo iptables -t mangle -A FORWARD -o Tunnel1 -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
sudo iptables -t mangle -A INPUT -p esp -s 35.156.20.208 -d 79.67.110.164 -j MARK --set-xmark 100

sudo ip link add Tunnel2 type vti local 192.168.1.6 remote 52.58.162.102 key 200
sudo ip addr add 169.254.254.234/30 remote 169.254.254.233/30 dev Tunnel2
sudo ip link set Tunnel2 up mtu 1419
sudo ip route add 10.0.0.0/16 dev Tunnel2 metric 200
sudo iptables -t mangle -A FORWARD -o Tunnel2 -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
sudo iptables -t mangle -A INPUT -p esp -s 52.58.162.102 -d 79.67.110.164 -j MARK --set-xmark 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have run this successfully, when you run the ifconfig-a command, you should now see two new interfaces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Tunnel1   Link encap:IPIP Tunnel  HWaddr
          inet addr:169.254.100.230  P-t-P:169.254.100.229  Mask:255.255.255.252
          inet6 addr: fe80::5efe:c0a8:106/64 Scope:Link
          UP POINTOPOINT RUNNING NOARP  MTU:1419  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:8 dropped:0 overruns:0 carrier:8
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

Tunnel2   Link encap:IPIP Tunnel  HWaddr
          inet addr:169.254.254.234  P-t-P:169.254.254.233  Mask:255.255.255.252
          inet6 addr: fe80::5efe:c0a8:106/64 Scope:Link
          UP POINTOPOINT RUNNING NOARP  MTU:1419  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:3 dropped:0 overruns:0 carrier:3
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we check the routing tables, we should see we now have a path to our VPC on AWS via those interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;netstat -rn

Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         192.168.1.1     0.0.0.0         UG        0 0          0 wlan0
10.0.0.0        0.0.0.0         255.255.0.0     U         0 0          0 Tunnel1
10.0.0.0        0.0.0.0         255.255.0.0     U         0 0          0 Tunnel2
169.254.100.228 0.0.0.0         255.255.255.252 U         0 0          0 Tunnel1
169.254.254.232 0.0.0.0         255.255.255.252 U         0 0          0 Tunnel2
192.168.1.0     0.0.0.0         255.255.255.0   U         0 0          0 wlan0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note! This information is not persistent. If you restart your Pi, you will need to repeat these steps. Read the text file for details of how you can persist the configuration&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[4] We can now start the local Strongswan VPN by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ipsec start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which we can check by running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ipsec status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should now see that the VPN is starting and establishing the connection with the AWS VPN Gateway.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Security Associations (2 up, 0 connecting):
     Tunnel2[2]: ESTABLISHED 3 seconds ago, 192.168.1.6[80.42.49.11]...18.184.143.185[18.184.143.185]
     Tunnel2{2}:  INSTALLED, TUNNEL, ESP in UDP SPIs: c6777c18_i c9f1bf73_o
     Tunnel2{2}:   0.0.0.0/0 === 0.0.0.0/0
     Tunnel1[1]: ESTABLISHED 3 seconds ago, 192.168.1.6[80.42.49.11]...3.65.61.44[3.65.61.44]
     Tunnel1{1}:  INSTALLED, TUNNEL, ESP in UDP SPIs: c57f2982_i cbfd1699_o
     Tunnel1{1}:   0.0.0.0/0 === 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note!&lt;/strong&gt; If you see the following, then it is likely that you have entered the ipsec.conf/ipsec.security details incorrectly, so review that information.&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Security Associations (2 up, 0 connecting):
     Tunnel2[2]: CONNECTING, 192.168.1.6[%any]...52.58.162.102[%any]
     Tunnel1[1]: CONNECTING, 192.168.1.6[%any]...35.156.20.208[%any]
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;We can verify that everything is working by going to the AWS Console, and checking the status of the tunnel again. You should see that the VPN tunnel is now up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6iLQQ7UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-up.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6iLQQ7UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/vpn-up.png%3Fraw%3Dtrue" alt="vpn-up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Route to AWS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is one final thing we need to do. On the Raspberry Pi that will be running our sample application, it does not yet know how to route traffic to AWS via the VPN. We need to add a static route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo ip route add 10.0.0.0/16 via 192.168.1.6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will route all traffic for AWS via the Raspberry Pi VPN gateway (192.168.1.6) we just created.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! This is quite an important step. If the workload machine does not have a route back, during the later sections of this blog post, when you come to create a load balancer to this instance, you will get errors because the Pi does not know how to route traffic via the VPN.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have now finished the networking part, and can move onto setting up our local workloads.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! Whilst I was putting this together, my broadband went down. When it came back, my external IP had changed. I had to update the IP in the app.py and then redeploy the ecs-anywhere-vpc stack to update everything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Configuring and deploying AWS resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now have a secure connection between our AWS environment and our local environment. We will come back to this in a moment. Now we are going to setup our local Raspberry Pi workload machine so that it can become a host that can run our containerised applications and integrate with the Amazon ECS control plane.&lt;/p&gt;

&lt;p&gt;This will involve creating a new ECS cluster in which we can register these "EXTERNAL" resources, and then setting up the software on those local resources (in my case, the Raspberry Pi workload machine) so that it can be managed by Amazon ECS.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! Connectivity between AWS and our local environment is needed as the local instance is in essence being managed by the Amazon ECS control plane. Whilst it can tolerate some down time, after a few hours you will experience issues with your local environment. Therefore this is not (currently at least) intended for disconnected/infrequently connected environments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[4] We now need to go back to our developer machine where we ran t[]he CDK applications as part of Part One, and run the following to deploy a new Amazon ECS cluster which we will use to register the EXTERNAL, or hybrid ECS Anywhere instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-cfn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be prompted to review security settings, repond Y and if successful you should see output like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 ‚úÖ  ecs-anywhere-cfn

Outputs:
ecs-anywhere-cfn.ECSAnyWhereIamRole = ecs-anywhere-cfn-mydcecsroleE385F8F3-AI911P55T3JP
ecs-anywhere-cfn.ECSClusterName = mydc-ecs-extcluster

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-cfn/24fb74e0-e2fb-11eb-ae06-06c47aa6fac8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to use the values of ecs-anywhere-cfn.ECSAnyWhereIamRole in a moment. In my example here, it is ecs-anywhere-cfn-mydcecsroleE385F8F3-AI911P55T3JP&lt;/p&gt;

&lt;p&gt;If you go to the AWS console you will now see a new ECS cluster appear (which should match the name in the output of ecs-anywhere-cfn.ECSClusterName (so in the above example, this is mydc-ecs-extcluster)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the local Raspberry Pi that will run our ECS Anywhere workloads&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[5] Log back into your local Raspberry Pi where you plan to run your workloads. You will need to install the AWS cli and then configure with a set of AWS credentials. I created a new IAM user for this purpose, but this is up to you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install awscli
aws configure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[6] We now need to install the agent software onto this Raspberry Pi (workload). Before we do that though, we need to get an activation code, which we will use the IAM role we created above (the output from the CDK app - ecs-anywhere-ec2.ECSAnyWhereIamRole, which in my example was ecs-anywhere-cfn-mydcecsroleE385F8F3-AI911P55T3JP)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ssm create-activation --iam-role ecs-anywhere-cfn-mydcecsroleE385F8F3-AI911P55T3JP --region={region} | tee ssm-activation.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generated the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "ActivationId": "0c8840d6-cd71-482c-9ea5-3c8380cc325a",
    "ActivationCode": "v4PEBr7nyIQ6u55OaWs!"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note! Do not share these or store these electronically. I have changed these values and they will not work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Will need these values in a minute, so lets create environment variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export id="0c8840d6-cd71-482c-9ea5-3c8380cc325a"
export code="v4PEBr7nyIQ6u55OaWs!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Once you have these values, the clock is ticking. You will have a short amount of time in which to run the script (which will depend on how you have configured your AWS environment account timeouts). To know if this is the cause of any issues, you will see the following error in your logs like &lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;level=error time=2021-06-30T16:22:12Z msg="Unable to register as a container instance with ECS: ExpiredTokenException: The security token included in the request is expired\n\tstatus code: 400, request id: f21461d9-ba49-4097-a66c-a902747428c4" module=client.go
level=error time=2021-06-30T16:22:12Z msg="Error registering: ExpiredTokenException: The security token included in the request is expired\n\tstatus code: 400, request id: f21461d9-ba49-4097-a66c-a902747428c4" module=agent.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;[7] Run the following command which will download the ECS Anywhere installation script which does three things: it installs the ECS Agent, the SSM Agent and the Docker engine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --proto "https" -o ~/ecs-anywhere-install.sh "https://amazon-ecs-agent.s3.amazonaws.com/ecs-anywhere-install-latest.sh"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we ran the CDK script to provision the ECS cluster, it output the name of the ECS Cluster, so lets assign that to an environment variable as will need to use that in the next step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export ecscluster="mydc-ecs-extcluster"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;[8] We can now run the installation script to install and configure the required software components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo bash ~/ecs-anywhere-install.sh --region {your AWS region} --cluster $ecscluster --activation-id $id --activation-code $code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is going to take a few minutes whilst it downloads, installs and configures the SSM and ECS agents on the Raspberry Pi.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you see the following error, make sure you have set your AWS region information correctly:&lt;/p&gt;

&lt;p&gt;Error occurred fetching the seelog config file path:  open /etc/amazon/ssm/seelog.xml: no such file or directory&lt;br&gt;
Initializing new seelog logger&lt;br&gt;
New Seelog Logger Creation Complete&lt;br&gt;
2021-07-12 12:46:23 WARN Could not read InstanceFingerprint file: InstanceFingerprint does not exist.&lt;br&gt;
2021-07-12 12:46:23 INFO No initial fingerprint detected, generating fingerprint file...&lt;br&gt;
2021-07-12 12:46:25 ERROR Registration failed due to error registering the instance with AWS SSM. InvalidActivation:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should get output similar to the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
...
Ping ECS Agent registered successfully! Container instance arn: "arn:aws:ecs:eu-west-1:704533066374:container-instance/ecs-anywhere-ec2-mydcecsclusterBB109425-r7l2mKClssuV/8dfb8700d9a1460dad403a321db6b5b9"

You can check your ECS cluster here https://console.aws.amazon.com/ecs/home?region=eu-west-1#/clusters/ecs-anywhere-ec2-mydcecsclusterBB109425-r7l2mKClssuV

# ok
##########################


##########################
This script installed three open source packages that all use Apache License 2.0.
You can view their license information here:
  - ECS Agent https://github.com/aws/amazon-ecs-agent/blob/master/LICENSE
  - SSM Agent https://github.com/aws/amazon-ssm-agent/blob/master/LICENSE
  - Docker engine https://github.com/moby/moby/blob/master/LICENSE
##########################
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What just happened? &lt;/p&gt;

&lt;p&gt;Well, on your local (in my case, Raspberry Pi) the script (ecs-anywhere-install.sh) installs and configures the AWS SSM Agent as well as the ECS Anywhere agent. The script will also install additional software for running your container applications, for example Docker.&lt;/p&gt;

&lt;p&gt;If we go to AWS System Manager &amp;gt; Fleet Management we should now see our Raspberry Pi show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93xQKyTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ssm-fleet.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93xQKyTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ssm-fleet.png%3Fraw%3Dtrue" alt="ssm-fleet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ECS Agent has also been added as a resource to the ECS Cluster we created. If we go to the AWS Console and look at the ECS Clusters, we will see this new resource listed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CtNsgBbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ecs-ext-1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtNsgBbu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ecs-ext-1.png%3Fraw%3Dtrue" alt="resource1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can click on it to see more details about the available resources (memory / cpu / processor / etc) that this instance provides&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMtS4MYI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ecs-ext-2.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMtS4MYI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/ecs-ext-2.png%3Fraw%3Dtrue" alt="resource2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now deploy our application to this ECS cluster, and it will get deployed onto our local Raspberry Pi and then be accessible via the local network (in my case, this is &lt;a href="http://192.168.1.99"&gt;http://192.168.1.99&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deploying the application to your local ECS Anywhere cluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[9] We will do this via the cli before we amend the CI/CD system so that this is automatically done every time there is an update.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! The first time that you launch the task, the Raspberry Pi will need to download the container images so it will take longer to start the application (and will vary depending on your internet connection). If you notice your Task is in "PENDING" then this could be the reason.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first thing we need to do is prep the task_definion.json file which we will use to create a new version of the task definition that was created during the AWS CDK ecs-anywhere-cfn deployment. We create a file called tf-any.json as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "requiresCompatibilities": [
        "EXTERNAL"
    ],
    "containerDefinitions": [{
        "name": "springboot-remote",
        "image": "{ecr_image}",
        "memory": 256,
        "cpu": 256,
        "essential": true,
        "portMappings": [{
            "containerPort": 8080,
            "hostPort": 8080,
            "protocol": "tcp"
        }]
    }],
    "networkMode": "bridge",
    "family": "ecsanywhere"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know what the latest container image is by looking in the ECR Repository. (When we come to automate this via CI/CD, these are passed as environment variables, so we only need to do this now as we bootstrap the application for the first time)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export APP="704533066374.dkr.ecr.eu-central-1.amazonaws.com/demo-springboot-ecsanywhere:56beb49"
sed -i "s|{ecr_image}|$APP|g" tf-any.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note! If you are using a Mac, you will need to use "sed -i '.bak' "s|{ecr_image}|$APP|g" tf-any.json"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will update the file with the container reference and has. We can now register a new task definition. I will use what we already have in the post_build.yml script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LOCAL_ECS_CLUSTER="mydc-ecs-extcluster"
LOCAL_ECS_SERVICE="mydc-ecs-svc"
LOCAL_TASK_DEFINITON="ecsanywhere"
aws ecs register-task-definition --cli-input-json file://tf-any.json --region={the region where the ECS cluster is running}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate output similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "taskDefinition": {
        "taskDefinitionArn": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:5",
        "containerDefinitions": [
            {
                "name": "springboot-remote",
                "image": "704533066374.dkr.ecr.eu-central-1.amazonaws.com/demo-springboot-ecsanywhere:56beb49",
                "cpu": 256,
                "memory": 256,
                "portMappings": [
                    {
                        "containerPort": 8080,
                        "hostPort": 8080,
                        "protocol": "tcp"
                    }
                ],
                "essential": true,
                "environment": [],
                "mountPoints": [],
                "volumesFrom": []
            }
        ],
        "family": "ecsanywhere",
        "networkMode": "bridge",
        "revision": 5,
        "volumes": [],
        "status": "ACTIVE",
        "requiresAttributes": [
            {
                "name": "com.amazonaws.ecs.capability.ecr-auth"
            }
        ],
        "placementConstraints": [],
        "compatibilities": [
            "EXTERNAL",
            "EC2"
        ],
        "requiresCompatibilities": [
            "EXTERNAL"
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I need to grab the latest version from that output, and then use that to update the running service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;LOCAL_TASK_REVISION=`aws ecs describe-task-definition --task-definition $LOCAL_TASK_DEFINITON --region={the region where the ECS cluster is running} | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,$//'`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we use "echo $LOCAL_TASK_REVISION" you will see the new version number which we will use when we update the running service. Now we have everything we need to update the service, which we can do using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ecs update-service --cluster $LOCAL_ECS_CLUSTER --service $LOCAL_ECS_SERVICE --task-definition $LOCAL_TASK_DEFINITON:${LOCAL_TASK_REVISION} --region={the region where the ECS cluster is running}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will give you something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "service": {
        "serviceArn": "arn:aws:ecs:eu-central-1:704533066374:service/mydc-ecs-extcluster/mydc-ecs-svc",
        "serviceName": "mydc-ecs-svc",
        "clusterArn": "arn:aws:ecs:eu-central-1:704533066374:cluster/mydc-ecs-extcluster",
        "loadBalancers": [],
        "serviceRegistries": [],
        "status": "ACTIVE",
        "desiredCount": 1,
        "runningCount": 1,
        "pendingCount": 0,
        "launchType": "EXTERNAL",
        "taskDefinition": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:5",
        "deploymentConfiguration": {
            "deploymentCircuitBreaker": {
                "enable": false,
                "rollback": false
            },
            "maximumPercent": 200,
            "minimumHealthyPercent": 100
        },
        "deployments": [
            {
                "id": "ecs-svc/2775386206525924918",
                "status": "PRIMARY",
                "taskDefinition": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:5",
                "desiredCount": 1,
                "pendingCount": 0,
                "runningCount": 0,
                "failedTasks": 0,
                "createdAt": 1626102200.686,
                "updatedAt": 1626102200.686,
                "launchType": "EXTERNAL",
                "rolloutState": "IN_PROGRESS",
                "rolloutStateReason": "ECS deployment ecs-svc/2775386206525924918 in progress."
            },
            {
                "id": "ecs-svc/7501839119011433935",
                "status": "ACTIVE",
                "taskDefinition": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:4",
                "desiredCount": 1,
                "pendingCount": 0,
                "runningCount": 0,
                "failedTasks": 2,
                "createdAt": 1626101923.328,
                "updatedAt": 1626101923.328,
                "launchType": "EXTERNAL",
                "rolloutState": "IN_PROGRESS",
                "rolloutStateReason": "ECS deployment ecs-svc/7501839119011433935 in progress."
            },
            {
                "id": "ecs-svc/5388566575203796106",
                "status": "ACTIVE",
                "taskDefinition": "arn:aws:ecs:eu-central-1:704533066374:task-definition/ecsanywhere:3",
                "desiredCount": 1,
                "pendingCount": 0,
                "runningCount": 1,
                "failedTasks": 0,
                "createdAt": 1626101139.148,
                "updatedAt": 1626101938.625,
                "launchType": "EXTERNAL",
                "rolloutState": "COMPLETED",
                "rolloutStateReason": "ECS deployment ecs-svc/5388566575203796106 completed."
            }
        ],
...
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Accessing the application locally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[10] On your local network, you can now access the application via your web browser on port 8080. When I access this on my network, this is what I get.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BDK8vuGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/remote-app.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BDK8vuGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/remote-app.png" alt="local-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we know it works, we can automate those steps and incorporate it within the CI/CD system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating the CI/CD to deploy locally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To do this all we need to do is update the post_build step in the CI/CD workflow. The containers have already been built/packaged, so all we need is to add the following steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#       - sed -i "s|{ecr_image}|${REPOSITORY_URI}:${IMAGE_TAG}|g" tf-any.json
#       - LOCAL_ECS_CLUSTER="mydc-ecs-extcluster"
#       - LOCAL_ECS_SERVICE="mydc-ecs-svc"
#       - aws ecs register-task-definition --cli-input-json file://tf-any.json
#       - LOCAL_TASK_DEFINITON="ecsanywhere"
#       - LOCAL_TASK_REVISION=`aws ecs describe-task-definition --task-definition $LOCAL_TASK_DEFINITON | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/,$//'`
#       - aws ecs update-service --cluster $LOCAL_ECS_CLUSTER --service $LOCAL_ECS_SERVICE --task-definition $LOCAL_TASK_DEFINITON:${LOCAL_TASK_REVISION} 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are already in the sample files, but commented out. This is because the post_build script would have failed prior to us setting up the remote cluster. We can now enable these (and if you have changed any of the names, make sure you update the values above).&lt;/p&gt;

&lt;p&gt;To do this, we check out the repository, make the changes and then commit the changes. Once committed, this will trigger the build process. The changes we will make are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;upload the new tf-any.json file to the springboot folder - this is going to be updated every time a new container image is built, and then used to register a new task&lt;/li&gt;
&lt;li&gt;update the post_build.yml to include the steps above, updating the tf-any.json file and then triggering the deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Change the following line in the code, increasing the number so you can see that a new version has been deployed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;str = str.concat("&amp;lt;p style='text-align:center;font-family:Arial'&amp;gt;Version : 25 &amp;lt;/p&amp;gt;&amp;lt;br&amp;gt;\n");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once committed, you should see the Pipeline trigger the build process. Make sure you check out the logs in CodePipeline, looking at the Post Build logs. You will the new lines we added to the build script running the update and deploy to the local Raspberry Pi managed via ECS Anywhere.&lt;/p&gt;

&lt;p&gt;After about 5-10 minutes, refresh the browsers for the local and the AWS load balanced version and they should both be at the same revision. But wait, they are not. The ECS cluster on AWS has updated, but not the local one. What is going on?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Local Cluster vs AWS Clusters&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reason why the local ECS cluster has not updated is because there are no other instances to deploy the application onto. We have two instances on AWS, and these are rolled out one at a time, validated and then the old one removed. With our local instance, we only have the single Raspberry Pi.&lt;/p&gt;

&lt;p&gt;We will need to stop the running task. The ECS Anywhere agent will then detect that it is not running and then start a new instance, choosing the latest version that we just created. To do this, from the AWS Console, go to the Amazon ECS Cluster view, select the local cluster (mine is called mydc-ecs-extcluster) and then click on the TASKS tab. Select the check box next to the running task and select STOP, ignoring the warning. &lt;/p&gt;

&lt;p&gt;If you try and access the application via a browser, you will now get an error. We have no running containers to service our requests. After about 1-2 minutes, the ECS Service will realise there are no tasks running and kick off a new one. Once this is up and running, when we refresh, you should now see that this is running the same version.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Adding more local capacity&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can easily address this issue by adding more local instances to the local ECS Cluster that is managed by ECS Anywhere.&lt;/p&gt;

&lt;p&gt;Repeating the steps above, I added another local machine - this time, my main Ubuntu desktop which is running on an old x86 machine. I can see this has been successful as it now appears as a new ECS instance under the ECS instances tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOPW2q2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-2.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOPW2q2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-2.png%3Fraw%3Dtrue" alt="additional instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you now kick off a new build, it will provision the task on the free instance, check that it is up and running before draining session from the old application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chs4uzNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-4.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chs4uzNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-4.png%3Fraw%3Dtrue" alt="provisioning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we wanted too, we could increase the number of instances we want this cluster to support (when we set it up via the CDK application, we defined we wanted the "desired count" to be one. If we go back to that code, update the number to two, and redeploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        service = ecs.CfnService(
            self,
            f"{props['ecsclustername']}-svc",
            service_name=f"{props['ecsclustername']}-svc",
            cluster=f"{props['ecsclustername']}-extcluster",
            launch_type="EXTERNAL",
            desired_count=2,
            task_definition="ecsanywhere"
            #task.to_string()
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now see we have this cluster with running running tasks, spread across the two different (local) ECS instances managed by ECS Anywhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wNdWdYY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-3.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wNdWdYY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-3.png%3Fraw%3Dtrue" alt="updating"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now we have them both running&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYX_jPrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-5.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYX_jPrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-5.png%3Fraw%3Dtrue" alt="running"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bskkIX-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-6.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bskkIX-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-multi-arch-springboot/blob/main/images/lb-all-6.png%3Fraw%3Dtrue" alt="running2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are nearly finished, just one last thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessing the application via an AWS Load Balancer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It would be great if we could now access the application via a load balancer in the cloud. Why would we do that? Perhaps we want to leverage a Cloud based application load balancer rather than deploying and managing our own one. This would allow us to deploy more local machines, and then ECS Anywhere would be able to deploy those applications across those instances. No more manually stopping tasks.&lt;/p&gt;

&lt;p&gt;We can automate that with some more CDK code, and adding a new item in the props file so we do not need to hard code the entry.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        local_lb_security_group = ec2.SecurityGroup(
            self,
            "Load Balance internal Springboot http access",
            vpc=vpc
        )

        local_lb_security_group.add_ingress_rule(
            ec2.Peer.any_ipv4(),
            ec2.Port.tcp(80)
        )
        local_lb_security_group.add_egress_rule(
            ec2.Peer.ipv4(f"{props['mydcinternalcidr']}"),
            ec2.Port.tcp(8080)
        )

        lb = elbv2.ApplicationLoadBalancer(
            self,
            "LB",
            vpc=vpc,
            internet_facing=True,
            security_group=local_lb_security_group
        )

        listener = lb.add_listener(
            "Listener",
            port=80,
            open=True
        )

        remotepi = elbv2.IpTarget(
            f"{props['home-pi']}",
            port=8080,
            availability_zone="all")

        listener.add_targets(
            "Target",
            port=8080,
            targets=[remotepi]
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To kick this off we just run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy ecs-anywhere-lb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after a few minutes, you should see the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ecs-anywhere-lb
ecs-anywhere-lb: deploying...
ecs-anywhere-lb: creating CloudFormation changeset...


 ‚úÖ  ecs-anywhere-lb

Outputs:
ecs-anywhere-lb.PiRemoteLB = ecs-a-LB8A1-UMQHFMJZEX80-435054691.eu-central-1.elb.amazonaws.com

Stack ARN:
arn:aws:cloudformation:eu-central-1:704533066374:stack/ecs-anywhere-lb/017fbe20-e3ca-11eb-b32e-06f34beb5820

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see that it outputs the DNS name of the Load Balancer created, which we can put into our browser. When we put "ecs-a-LB8A1-UMQHFMJZEX80-435054691.eu-central-1.elb.amazonaws.com" into our browser, we see our glorious application again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OZbiMYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-pi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OZbiMYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-pi.png" alt="local-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note! We only added one of the local nodes but we can add both which we will see in the next section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Improvements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Congratulations, you have come to the end of this post and walk through. As always, this is just the start and I hope that you take the time to explore the code and build upon it and improve it for your own use cases. &lt;/p&gt;

&lt;p&gt;One thing that I did manage to do via the console, but have not figured out yet how to do via my CDK application is to incorporate the local Raspberry Pi into the first ECS cluster. Do do this I first uninstalled the previous step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk destroy ecs-anywhere-lb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this finished, I then went to the AWS console, found the Target Group that had the existing EC2 instances registered (one running on x86 instance types, the other AWS Graviton2) and then registered manually my local Raspberry Pi (using the settings of the VPC created as part of this application, the IP address of the local Raspberry Pi 192.168.1.99, and the other local machine 192.168.1.110, the port they are listening to - 8080. I then added this to the cluster.&lt;/p&gt;

&lt;p&gt;When that completed, it came back as unhealthy. Why?&lt;/p&gt;

&lt;p&gt;This is to be expected, and shows the security groups working. The original ECS Cluster has a security group setup that controls access from the Application Load Balancer to the EC2 instances, on the target port (8080). That was for the subnet that those instances were on, not my local network (which is on a 192.168.1.0/24 CIDR).&lt;/p&gt;

&lt;p&gt;I needed to add a new rule that would allow the Application Load Balancer to health check and route traffic, so I added a new rule (in my instance, updating sg-027005ab1cded3bce to enable TCP port 8080 access to the CIDR 192.168.1.0/24 range.&lt;/p&gt;

&lt;p&gt;Once that was completed, I now had three healthy targets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dte9HH44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-all-7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dte9HH44--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-all-7.png" alt="healthy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now when refreshing the original link, we can see we have all four different hosts servicing requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--smpZR0kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-all-4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--smpZR0kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/094459/blog-multi-arch-springboot/main/images/lb-all-4.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Managing your local ECS Anywhere cluster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I thought it would be useful to share some of the things I found useful when administering the local ECS Anywhere instance. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Managing the agent&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To shutdown, restart and get a status you can use the following commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl stop ecs
sudo systemctl status ecs
sudo systemctl start ecs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚óè ecs.service - Amazon Elastic Container Service - container agent
     Loaded: loaded (/lib/systemd/system/ecs.service; enabled; vendor preset: enabled)
     Active: active (running) since Mon 2021-06-28 12:37:53 UTC; 2 days ago
       Docs: https://aws.amazon.com/documentation/ecs/
   Main PID: 2214 (amazon-ecs-init)
      Tasks: 8 (limit: 4435)
     Memory: 12.0M
     CGroup: /system.slice/ecs.service
             ‚îî‚îÄ2214 /usr/libexec/amazon-ecs-init start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Log files&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to find the log files, then these are located in /var/log/ecs &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ecs-agent.log&lt;/li&gt;
&lt;li&gt;ecs-init.log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can view the ECS agent initialisation logs as well as the operational logs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Other key files&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The name of the ECS Cluster can be found in /etc/ecs/ecs.config. You may need to update/remove this as you experiment.&lt;/p&gt;

&lt;p&gt;If you are trying this and run into the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;level=critical time=2021-06-30T15:52:29Z msg="Data mismatch; saved cluster 'dc_pi_ecs_cluster' does not match configured cluster 'ecs-anywhere-ec2-mydcecsclusterBB109425-3HBnIv5IpvQm'. Perhaps you want to delete the configured checkpoint file?" module=agent.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the agent starts (perhaps because this is a subsequent installation or you have changed values) then you may need shutdown your ECS agent, move/rename the following file /var/lib/ecs/data/agent.db and then restart to recover.&lt;/p&gt;

&lt;p&gt;You may also need to move/rename the /var/lib/amazon/ssm if you get issues around the agent failing to install on subsequent attempts. If you are seeing errors like this in your hibernate.log&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-06-30 18:30:37 ERROR Health ping failed with error - error occurred in RequestManagedInstanceRoleToken: AccessDeniedException: Authentication failed
    status code: 400, request id: afbe8882-27ed-49fa-92a9-1c3582b12f11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shut down your agent/uninstall/move or rename that directory and re-run the script.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Removing the AWS resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can clean up what we have created by running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk destroy ecs-anywhere-lb
cdk destroy ecs-anywhere-cfn
cdk destroy ecs-anywhere-pipe
cdk destroy ecs-anywhere-cicd
cdk destroy ecs-anywhere-vpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this has completed, you will then manually need to delete the following AWS resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS CodeCommit and ECR repositories as these will not be deleted&lt;/li&gt;
&lt;li&gt;AWS System Manager Parameter Store values for the Docker Hub user name and password and the ECS Cluster details&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cleaning up your local environment&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl stop amazon-ssm-agent
sudo systemctl stop ecs

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove the ECS Anywhere and SSM agents&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt remove amazon-ecs-init
sudo apt remove amazon-ssm-agent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove the Strongswan software from the Pi VPN Gateway&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt remove strongswan
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should can also remove the /etc/ecs.config file which may not be removed when the package is installed, as well as cleaning up the /var/lib/ecs folder too.&lt;/p&gt;

&lt;p&gt;And your environment should now be disconnected from AWS Systems Manager and Amazon ECS&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post I have shown you one way in which you can automate the creation of multiple architecture and deployment options for your containerised applications, integrating with ECS Anywhere to provide you with more choices as to where you deploy those workloads.&lt;/p&gt;

&lt;p&gt;There are many ways the scripts could be improved, but I hope that these will save you some time as you look to automate your deployment processes. I will hope to build on this post with future posts which add/update the existing CDK applications to cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adding security to the application, automating the provisioning of SSL certificates and a friendly DNS name&lt;/li&gt;
&lt;li&gt;integrating other applications or services we might need to use as part of our application&lt;/li&gt;
&lt;li&gt;what would you like to see?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lastly, I would be grateful if you could provide me with some short feedback on this walkthrough. Please complete this &lt;a href="https://eventbox.dev/survey/C6HLWSB"&gt;very short survey here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please let me know if you find this post useful and how you might use this kind of setup. Are you exploring moving your workloads to arm processing architectures? Are you looking to explore hybrid scenarios where you deploy a single application across different environments?&lt;/p&gt;

&lt;p&gt;Made with ‚ù§Ô∏è&lt;/p&gt;

</description>
      <category>aws</category>
      <category>containers</category>
    </item>
    <item>
      <title>AWS Basics: What's in a default AWS VPC and how to recreate one.</title>
      <author>Lee Wynne</author>
      <pubDate>Fri, 16 Jul 2021 11:54:05 +0000</pubDate>
      <link>https://dev.to/leewynne/aws-basics-what-s-in-a-default-aws-vpc-and-how-to-recreate-one-29ig</link>
      <guid>https://dev.to/leewynne/aws-basics-what-s-in-a-default-aws-vpc-and-how-to-recreate-one-29ig</guid>
      <description>&lt;h2&gt;
  &lt;a href="#%C2%A0you-have-vpcs-in-your-aws-account-by-default"&gt;
  &lt;/a&gt;
  ¬†You have VPC's in your AWS account by default.
&lt;/h2&gt;

&lt;p&gt;AWS make it pretty easy to consume their services in the quickest way possible. Once you have &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;created an account&lt;/a&gt; and attached a credit card for billing you are pretty much ready to to start building and deploying some really cool stuff.&lt;/p&gt;

&lt;p&gt;Some of those AWS services don't need a VPC, object storage though an s3 bucket is a good example or compute, storage, databases, networking and containers through AWS LightSail is also a good example üëáüèº&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/leewynne" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJSHiz_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8bnWhDU3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19958/acd11d40-2247-40c5-a3f6-1805b734c466.jpeg" alt="leewynne"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/leewynne/the-easiest-way-to-get-started-with-aws-regardless-of-your-background-1nl2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The easiest way to get started with AWS regardless of your background&lt;/h2&gt;
      &lt;h3&gt;Lee Wynne „Éª Jul 5 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Some AWS services need to be hosted in a VPC, like production ec2 instances, vpn and direct connect connectivity and all sorts of other services that you want to wrap more control and high availability around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-does-a-default-vpc-even-exist"&gt;
  &lt;/a&gt;
  Why does a default VPC even exist?
&lt;/h2&gt;

&lt;p&gt;Having a default VPC makes it pretty easy to programmatically launch AWS services into an existing pre built VPC without needing to know how to build your own AWS VPC with a public and private subnet. Otherwise you would need to know how to do this üëáüèº&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/leewynne" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yJSHiz_u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8bnWhDU3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19958/acd11d40-2247-40c5-a3f6-1805b734c466.jpeg" alt="leewynne"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/leewynne/aws-vpc-basics-building-your-first-vpc-with-a-public-and-private-subnet-22ll" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;AWS VPC Basics. Building your first VPC with a public and private subnet&lt;/h2&gt;
      &lt;h3&gt;Lee Wynne „Éª Jul 13 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;There are many AWS partner integrations out there that assume that you have a default VPC if you are deploying their products to AWS.&lt;/p&gt;

&lt;p&gt;Every AWS account has one default VPC for each AWS Region (Not sure if that applies to regions that you haven't actually activated yet, doubt it).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-a-default-vpc"&gt;
  &lt;/a&gt;
  What's in a default VPC
&lt;/h2&gt;

&lt;p&gt;When AWS create a default VPC for, they do the following to set it up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a VPC with a size /16 IPv4 CIDR block (172.31.0.0/16). This provides up to 65,536 private IPv4 addresses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a size /20 default subnet in each Availability Zone. This provides up to 4,096 addresses per subnet, a few of which are reserved for our use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an internet gateway and connect it to your default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a route to the main route table that points all traffic (0.0.0.0/0) to the Internet gateway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a default security group and associate it with your default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a default network access control list (ACL) and associate it with your default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Associate the default DHCP options set for your AWS account with your default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That list is a great footprint for learning more about creating your own VPC and what should potentially be in it and here is an example schematic:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDQZrryv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/kqgd6gglqc4m2brz71te.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDQZrryv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.theelastic.guru/remoteimages/uploads/articles/kqgd6gglqc4m2brz71te.png" alt="default-vpc-diagram"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Your default VPC is also extensible, meaning you add other stuff to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add additional nondefault subnets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modify the main route table.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add additional route tables.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Associate additional security groups.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the rules of the default security group.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add AWS Site-to-Site VPN connections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add more IPv4 CIDR blocks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-recreate-a-default-vpc"&gt;
  &lt;/a&gt;
  How do you recreate a default VPC?
&lt;/h2&gt;

&lt;p&gt;If you have deleted your default VPC, you can't restore it üò≠ but you can easily recreate it üõ†&lt;/p&gt;

&lt;p&gt;If you want to re-create a default VPC using the Amazon VPC console, do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open the Amazon VPC console at &lt;a href="https://console.aws.amazon.com/vpc/"&gt;https://console.aws.amazon.com/vpc/&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the navigation pane, choose Your VPCs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose Actions, Create Default VPC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose Create. Close the confirmation screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That was easy!&lt;/p&gt;

&lt;p&gt;Or if you want to do it from the AWS CLI&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ec2 create-default-vpc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There we go, everything you need to know about default VPC's and how to recreate one.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awsnewbies</category>
      <category>networking</category>
    </item>
    <item>
      <title>No, they didn't make a mistake</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 16 Jul 2021 11:43:53 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/no-they-didn-t-make-a-mistake-5gg8</link>
      <guid>https://dev.to/dailydevtips1/no-they-didn-t-make-a-mistake-5gg8</guid>
      <description>&lt;p&gt;Hey you, yes you! Stop feeling like they made a mistake.&lt;br&gt;
That company hired you because they saw you fit for the job.&lt;/p&gt;

&lt;p&gt;And yes, you might not feel like you're ready at this time, but let me tell you a little secret. We all feel this way.&lt;/p&gt;

&lt;p&gt;Some might call it imposter syndrome, and some might call it an introvert, where others might think they are a cheat.&lt;/p&gt;

&lt;p&gt;But stop feeling that way. You are valuable, you are a developer, and you are good enough.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-feel-this-way"&gt;
  &lt;/a&gt;
  Why do we feel this way?
&lt;/h2&gt;

&lt;p&gt;It might be a natural cause because of the day and age we live in. We get to see so many great people showing off what they do, their rank, and how good they are.&lt;br&gt;
And yes, that's quite demotivating at times.&lt;/p&gt;

&lt;p&gt;But the #1 thing you have to realize, those people felt the same way.&lt;br&gt;
They just worked hard and put in the time to get over that feeling.&lt;/p&gt;

&lt;p&gt;It's also natural to feel nervous at first, thought run wild, and your brain is tricking you into believing you don't belong in that spot.&lt;/p&gt;

&lt;p&gt;But let's try and fix that because sorry to say this, but your brain is wrong!&lt;/p&gt;

&lt;p&gt;Here are five tips to help show you they didn't make a mistake!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-value-yourself"&gt;
  &lt;/a&gt;
  1. Value yourself
&lt;/h2&gt;

&lt;p&gt;Just take a step back, and look where you're at. Would your 15-year-old version be able to do the things you do today?&lt;/p&gt;

&lt;p&gt;I'm pretty sure the answer is no, unless you're 15, but then have a look at your five years younger self.&lt;/p&gt;

&lt;p&gt;This is because you have grown, as a person, in your skills, and it shows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-dont-need-to-know-everything"&gt;
  &lt;/a&gt;
  2. You don't need to know everything
&lt;/h2&gt;

&lt;p&gt;The most common belief is that we need to 100% know all the things when we get hired for a job.&lt;/p&gt;

&lt;p&gt;And this is the biggest BS you can tell yourself.&lt;/p&gt;

&lt;p&gt;We need to be able to grow in a job and learn things while doing our job. I've said this before, and I'll repeat it: Being a developer is a never-ending learning curve.&lt;/p&gt;

&lt;p&gt;For example, I was being interviewed as a senior developer for a Laravel/Ionic position for my last job. At the time, I'd never touched Laravel at all.&lt;br&gt;
For sure, I was a bit skeptical, but I was brutally honest; I had zero experience in Laravel but did use Symphony for a long time.&lt;/p&gt;

&lt;p&gt;The result:&lt;br&gt;
A two-week learning curve in Laravel and working on some projects. And now I'm confident enough to say I know Laravel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-try-to-be-someone-else"&gt;
  &lt;/a&gt;
  3. Don't try to be someone else
&lt;/h2&gt;

&lt;p&gt;It's ok not to be perfect at everything, but be honest about it.&lt;br&gt;
There is nothing wrong with saying to a company, what your strengths are, and being that person that tells their weaknesses.&lt;/p&gt;

&lt;p&gt;It comes close to the above point, and you realize it shows when you are faking something.&lt;/p&gt;

&lt;p&gt;I always try to imagine being the receiving end of the communication.&lt;/p&gt;

&lt;p&gt;How would I feel after the interview? Did I say stuff that wasn't true?&lt;br&gt;
Did I upsell myself too much?&lt;/p&gt;

&lt;p&gt;And again, nothing wrong with upselling yourself, but be careful with this approach.&lt;/p&gt;

&lt;p&gt;Please don't say you're an expert [INSERT RANDOM FRAMEWORK] user while you never touched it.&lt;br&gt;
This will quickly reflect and make you look like a fraud.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-its-ok-to-be-nervous"&gt;
  &lt;/a&gt;
  4. It's ok to be nervous
&lt;/h2&gt;

&lt;p&gt;Don't think you have to be a super(wo)man now. You don't need to feel all confident and mighty.&lt;/p&gt;

&lt;p&gt;It's ok to feel nervous; nervous for a job interview, for the first week/month/year working there.&lt;/p&gt;

&lt;p&gt;And that's ok because it is stressful.&lt;br&gt;
We are all learning, and at times we might feel like there is something wrong with that.&lt;br&gt;
But let me assure you, there's not!&lt;/p&gt;

&lt;p&gt;Being a bit nervous might even help us.&lt;br&gt;
Nervousness is something people pick up on, and it might help you feel more at ease.&lt;br&gt;
It also makes us more on edge and really on top of our game as nervous people.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-the-value-you-offer"&gt;
  &lt;/a&gt;
  5. The value you offer
&lt;/h2&gt;

&lt;p&gt;Now, let's look at the last part of this.&lt;br&gt;
A company hired you. Just think about the value you are adding there!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Another sparring partner&lt;/li&gt;
&lt;li&gt;Someone to question if processes are the right way&lt;/li&gt;
&lt;li&gt;A enthusiastic soul that lifts people up&lt;/li&gt;
&lt;li&gt;You help them out. It's work they couldn't get done before&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is all because they hired you!&lt;br&gt;
Not because they made a mistake.&lt;/p&gt;

&lt;p&gt;I hope you will re-evaluate yourself and accept the simple but undeniable fact that you are valuable!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Binary representation of the floating-point numbers</title>
      <author>Oleksii Trekhleb</author>
      <pubDate>Fri, 16 Jul 2021 11:20:08 +0000</pubDate>
      <link>https://dev.to/trekhleb/binary-representation-of-the-floating-point-numbers-p7b</link>
      <guid>https://dev.to/trekhleb/binary-representation-of-the-floating-point-numbers-p7b</guid>
      <description>&lt;p&gt;Have you ever wondered how computers store the floating-point numbers like &lt;code&gt;3.1415&lt;/code&gt; (ùùø) or &lt;code&gt;9.109 √ó 10‚Åª¬≥¬π&lt;/code&gt; (the mass of the electron in kg) in the memory which is limited by a finite number of ones and zeroes (aka bits)?&lt;/p&gt;

&lt;p&gt;It seems pretty straightforward for integers (i.e. &lt;code&gt;17&lt;/code&gt;). Let's say we have 16 bits (2 bytes) to store the number. In 16 bits we may store the integers in a range of &lt;code&gt;[0, 65535]&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(0000000000000000)‚ÇÇ = (0)‚ÇÅ‚ÇÄ

(0000000000010001)‚ÇÇ =
    (1 √ó 2‚Å¥) +
    (0 √ó 2¬≥) +
    (0 √ó 2¬≤) +
    (0 √ó 2¬π) +
    (1 √ó 2‚Å∞) = (17)‚ÇÅ‚ÇÄ

(1111111111111111)‚ÇÇ =
    (1 √ó 2¬π‚Åµ) +
    (1 √ó 2¬π‚Å¥) +
    (1 √ó 2¬π¬≥) +
    (1 √ó 2¬π¬≤) +
    (1 √ó 2¬π¬π) +
    (1 √ó 2¬π‚Å∞) +
    (1 √ó 2‚Åπ) +
    (1 √ó 2‚Å∏) +
    (1 √ó 2‚Å∑) +
    (1 √ó 2‚Å∂) +
    (1 √ó 2‚Åµ) +
    (1 √ó 2‚Å¥) +
    (1 √ó 2¬≥) +
    (1 √ó 2¬≤) +
    (1 √ó 2¬π) +
    (1 √ó 2‚Å∞) = (65535)‚ÇÅ‚ÇÄ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we need a signed integer we may use &lt;a href="https://en.wikipedia.org/wiki/Two%27s_complement"&gt;two's complement&lt;/a&gt; and shift the range of &lt;code&gt;[0, 65535]&lt;/code&gt; towards the negative numbers. In this case, our 16 bits would represent the numbers in a range of &lt;code&gt;[-32768, +32767]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you might have noticed, this approach won't allow you to represent the numbers like &lt;code&gt;-27.15625&lt;/code&gt; (numbers after the decimal point are just being ignored).&lt;/p&gt;

&lt;p&gt;We're not the first ones who have noticed this issue though. Around ‚âà36 years ago some smart folks overcame this limitation by introducing the &lt;a href="https://en.wikipedia.org/wiki/IEEE_754"&gt;IEEE 754&lt;/a&gt; standard for floating-point arithmetic.&lt;/p&gt;

&lt;p&gt;The IEEE 754 standard describes the way (the framework) of using those 16 bits (or 32, or 64 bits) to store the numbers of wider range, including the small floating numbers (smaller than 1 and closer to 0).&lt;/p&gt;

&lt;p&gt;To get the idea behind the standard we might recall the &lt;a href="https://en.wikipedia.org/wiki/Scientific_notation"&gt;scientific notation&lt;/a&gt; - a way of expressing numbers that are too large or too small (usually would result in a long string of digits) to be conveniently written in decimal form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eyVRFm4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2g64wqxrpapwdk9cug2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eyVRFm4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2g64wqxrpapwdk9cug2h.png" alt="Scientific number notation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you may see from the image, the number representation might be split into three parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sign&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fraction (aka significand)&lt;/strong&gt; - the valuable digits (the meaning, the payload) of the number&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;exponent&lt;/strong&gt; - controls how far and in which direction to move the decimal point in the fraction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;base&lt;/strong&gt; part we may omit by just agreeing on what it will be equal to. In our case, we'll be using &lt;code&gt;2&lt;/code&gt; as a base.&lt;/p&gt;

&lt;p&gt;Instead of using all 16 bits (or 32 bits, or 64 bits) to store the fraction of the number, we may share the bits and store a sign, exponent, and fraction at the same time. Depending on the number of bits that we're going to use to store the number we end up with the following splits:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Floating-point format&lt;/th&gt;
&lt;th&gt;Total bits&lt;/th&gt;
&lt;th&gt;Sign bits&lt;/th&gt;
&lt;th&gt;Exponent bits&lt;/th&gt;
&lt;th&gt;Fraction bits&lt;/th&gt;
&lt;th&gt;Base&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Half-precision_floating-point_format"&gt;Half-precision&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Single-precision_floating-point_format"&gt;Single-precision&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format"&gt;Double-precision&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;52&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;With this approach, the number of bits for the fraction has been reduced (i.e. for the 16-bits number it was reduced from 16 bits to 10 bits). It means that the fraction might take a narrower range of values now (losing some precision). However, since we also have an exponent part, it will actually increase the ultimate number range and also allow us to describe the numbers between 0 and 1 (if the exponent is negative).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, a signed 32-bit integer variable has a maximum value of 2¬≥¬π ‚àí 1 = 2,147,483,647, whereas an IEEE 754 32-bit base-2 floating-point variable has a maximum value of ‚âà 3.4028235 √ó 10¬≥‚Å∏.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To make it possible to have a negative exponent, the IEEE 754 standard uses the &lt;a href="https://en.wikipedia.org/wiki/Exponent_bias"&gt;biased exponent&lt;/a&gt;. The idea is simple - subtract the bias from the exponent value to make it negative. For example, if the exponent has 5 bits, it might take the values from the range of &lt;code&gt;[0, 31]&lt;/code&gt; (all values are positive here). But if we subtract the value of &lt;code&gt;15&lt;/code&gt; from it, the range will be &lt;code&gt;[-15, 16]&lt;/code&gt;. The number &lt;code&gt;15&lt;/code&gt; is called bias, and it is being calculated by the following formula:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exponent_bias = 2 ^ (k‚àí1) ‚àí 1

k - number of exponent bits
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've tried to describe the logic behind the converting of floating-point numbers from a binary format back to the decimal format on the image below. Hopefully, it will give you a better understanding of how the IEEE 754 standard works. The 16-bits number is being used here for simplicity, but the same approach works for 32-bits and 64-bits numbers as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bZU_rz8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp6focg5w0o698nk3163.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bZU_rz8y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sp6focg5w0o698nk3163.png" alt="Half-precision floating point number format explained in one picture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Checkout the &lt;a href="https://trekhleb.dev/blog/2021/binary-floating-point/"&gt;üëâüèª interactive version of this diagram&lt;/a&gt; to play around with setting bits on and off, and seeing how it would influence the final result&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Several corner cases were omitted in the examples above for simplicity of presentation (i.e. &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;-‚àû&lt;/code&gt;, &lt;code&gt;+‚àû&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; (not a number) values)&lt;/p&gt;

&lt;p&gt;Here is the number ranges that different floating-point formats support:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Floating-point format&lt;/th&gt;
&lt;th&gt;Exp min&lt;/th&gt;
&lt;th&gt;Exp max&lt;/th&gt;
&lt;th&gt;Range&lt;/th&gt;
&lt;th&gt;Min positive&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Half-precision&lt;/td&gt;
&lt;td&gt;‚àí14&lt;/td&gt;
&lt;td&gt;+15&lt;/td&gt;
&lt;td&gt;¬±65,504&lt;/td&gt;
&lt;td&gt;6.10 √ó 10‚Åª‚Åµ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single-precision&lt;/td&gt;
&lt;td&gt;‚àí126&lt;/td&gt;
&lt;td&gt;+127&lt;/td&gt;
&lt;td&gt;¬±3.4028235 √ó 10¬≥‚Å∏&lt;/td&gt;
&lt;td&gt;1.18 √ó 10‚Åª¬≥‚Å∏&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#code-examples"&gt;
  &lt;/a&gt;
  Code examples
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/math/binary-floating-point"&gt;javascript-algorithms repository&lt;/a&gt;, I've added a source code of binary-to-decimal converters that were used in the interactive example above.&lt;/p&gt;

&lt;p&gt;Below you may find an example of how to get the binary representation of the floating-point numbers in JavaScript. JavaScript is a pretty high-level language, and the example might be too verbose and not as straightforward as in lower-level languages, but still it is something you may experiment with directly in the browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;singlePrecisionBytesLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 32 bits&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doublePrecisionBytesLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 64 bits&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bitsInByte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Converts the float number into its IEEE 754 binary representation.
 * @see: https://en.wikipedia.org/wiki/IEEE_754
 *
 * @param {number} floatNumber - float number in decimal format.
 * @param {number} byteLength - number of bytes to use to store the float number.
 * @return {string} - binary string representation of the float number.
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;floatAsBinaryString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numberAsBinaryString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dataView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;DataView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;byteOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;littleEndian&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;byteLength&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;singlePrecisionBytesLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dataView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFloat32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;byteOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;floatNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;littleEndian&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dataView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFloat64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;byteOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;floatNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;littleEndian&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;byteIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;byteIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;byteLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;byteIndex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dataView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getUint8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;byteIndex&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;bitsInByte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bitsInByte&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;numberAsBinaryString&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numberAsBinaryString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Converts the float number into its IEEE 754 64-bits binary representation.
 *
 * @param {number} floatNumber - float number in decimal format.
 * @return {string} - 64 bits binary string representation of the float number.
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;floatAs64BinaryString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;floatAsBinaryString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;doublePrecisionBytesLength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Converts the float number into its IEEE 754 32-bits binary representation.
 *
 * @param {number} floatNumber - float number in decimal format.
 * @return {string} - 32 bits binary string representation of the float number.
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;floatAs32BinaryString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;floatAsBinaryString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;floatNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;singlePrecisionBytesLength&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage example&lt;/span&gt;
&lt;span class="nx"&gt;floatAs32BinaryString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.875&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; "00111111111100000000000000000000"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;You might also want to check out the following resources to get a deeper understanding of the binary representation of floating-point numbers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://indepth.dev/posts/1139/here-is-what-you-need-to-know-about-javascripts-number-type"&gt;Here is what you need to know about JavaScript‚Äôs Number type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://float.exposed/"&gt;Float Exposed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bartaz.github.io/ieee754-visualization/"&gt;IEEE754 Visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>computerscience</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CSS Flex box : everything you need to know about flex box</title>
      <author>Modern Web</author>
      <pubDate>Fri, 16 Jul 2021 10:52:55 +0000</pubDate>
      <link>https://dev.to/kunaal438/display-flex-complete-guide-on-css-flex-box-2021-5bi2</link>
      <guid>https://dev.to/kunaal438/display-flex-complete-guide-on-css-flex-box-2021-5bi2</guid>
      <description>&lt;p&gt;Hey, welcome. If you are here, you must have heard about flex box in CSS or you already know what is flex box. But, What exactly Flex box is ?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-flex-box-"&gt;
  &lt;/a&gt;
  What is Flex Box ?
&lt;/h1&gt;

&lt;p&gt;Flex box layout provide us a more efficient way to manage items of a particular container. Flex box layout align, shrink items or make space among items by occupying the given space, and make the website &lt;a href="https://dev.to/kunaal438/media-query-everything-you-need-for-responsive-design-b8g"&gt;responsive&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-flex-box-"&gt;
  &lt;/a&gt;
  How to use flex box ?
&lt;/h1&gt;

&lt;p&gt;Well to use flex box you just have to set container element's &lt;code&gt;display&lt;/code&gt; property to &lt;code&gt;flex&lt;/code&gt;. &lt;code&gt;display: flex;&lt;/code&gt; will enable all flex box feature to this container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#let-see-some-flex-box-properties-that-you-can-use"&gt;
  &lt;/a&gt;
  Let see some flex box properties that you can use.
&lt;/h1&gt;

&lt;p&gt;i) &lt;code&gt;Flex-direction&lt;/code&gt; : This property is for parent. It allows us to set or change item's direction. Like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f0YoIbQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyzjpgc2m3ha9m2464tu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f0YoIbQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyzjpgc2m3ha9m2464tu.png" alt="Frame 1 (2)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;ii) &lt;code&gt;Flex-wrap&lt;/code&gt; : This is also for parent element. It allow you to wrap the items and prevent overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjDfgZE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhm0q8lcmuc26f0h1cy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjDfgZE6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhm0q8lcmuc26f0h1cy2.png" alt="Frame 2 (7)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;iii) &lt;code&gt;Flex-flow&lt;/code&gt; : This is the shorthand for &lt;code&gt;flex-direction&lt;/code&gt; and &lt;code&gt;flex-wrap&lt;/code&gt;. The default value is :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can see the first value for this property id &lt;code&gt;flex-direction&lt;/code&gt; and second is for &lt;code&gt;flex-wrap&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;iv) &lt;code&gt;justify-content&lt;/code&gt; : It is the most common and frequently used property. It is used to align items in the x axis or horizontal axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_Bye-X8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neg8xsb0ogu5ocr9dh1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z_Bye-X8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/neg8xsb0ogu5ocr9dh1z.png" alt="Frame 3 (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;v) &lt;code&gt;align-items&lt;/code&gt; : It is also a common and frequently used property. It is used to align items in Y axis or vertical axis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umus2-YD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqysuqvpywytqd0kkuu0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umus2-YD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqysuqvpywytqd0kkuu0.png" alt="Frame 4 (4)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note : If you have &lt;code&gt;flex-direction: column | column-reverse&lt;/code&gt; then &lt;code&gt;justify-content&lt;/code&gt; and &lt;code&gt;align-items&lt;/code&gt; align items in Y and X axis respectively. &lt;/p&gt;

&lt;p&gt;All properties above are for parent element. Now, let's talk about item's property.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;vi) &lt;code&gt;flex-grow&lt;/code&gt; : As the name suggests &lt;code&gt;flex-grow&lt;/code&gt; is used to increase or grow item's width in proportion to occupy the space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DAv1Nq97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vs74vcb2fwuukj9fid6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DAv1Nq97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vs74vcb2fwuukj9fid6.png" alt="Frame 6 (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vii) &lt;code&gt;flex-shrink&lt;/code&gt; : Yes, you guessed right. This property aim is opposite to &lt;code&gt;flex-grow&lt;/code&gt;. It shrinks or decrease the width of item in proportions to occupy the space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TnNT8w9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h31qniw74ffrp4lkwitz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TnNT8w9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h31qniw74ffrp4lkwitz.png" alt="Frame 7 (1)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;viii) &lt;code&gt;flex-basis&lt;/code&gt; : This defines the default size of an element before distributing the space among items. You can give fixed lengths like(100px, 20rem) or you can use &lt;code&gt;auto&lt;/code&gt; value. &lt;code&gt;auto&lt;/code&gt; means take value from &lt;code&gt;width and height&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06aOI5db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjktopsmd8jzr5o1b60l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06aOI5db--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjktopsmd8jzr5o1b60l.png" alt="Frame 8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;xi) &lt;code&gt;flex&lt;/code&gt; : This is a shorthand for &lt;code&gt;flex grow, flex shrink and flex basis&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;flex-grow&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;flex-shrink&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;flex-basis&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;x) &lt;code&gt;align-self&lt;/code&gt; : This property allow to align item individually. You can set different align position for each item.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F9xzTLNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhbmzijiqvzbzlwjhmt0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F9xzTLNM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhbmzijiqvzbzlwjhmt0.png" alt="Frame 9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that's it about flex box. I hope you understood each and everything. If you have doubt or I missed some point let me know in the comments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-found-useful"&gt;
  &lt;/a&gt;
  Articles you may found Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-position-everything-you-need-for-good-developer-pfh"&gt;CSS Positions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/media-query-everything-you-need-for-responsive-design-b8g"&gt;CSS Media Query&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And if you want to improve your webdev skills. You can watch tutorial on &lt;a href="https://www.youtube.com/watch?v=f9fqiNM30ik"&gt;Instagram UI&lt;/a&gt; clone by me. If you like, you can subscribe my youtube channel, and follow me on instagram. I create awesome web contents. [&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;Subscribe&lt;/a&gt;], [&lt;a href="https://www.instagram.com/modern_web_channel/"&gt;Instagram&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Thanks For reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Can Google Index Content in CSS Pseudo Elements?</title>
      <author>Colin McDermott</author>
      <pubDate>Fri, 16 Jul 2021 10:38:03 +0000</pubDate>
      <link>https://dev.to/colinmcdermott/does-google-index-text-content-in-css-pseudo-elements-421p</link>
      <guid>https://dev.to/colinmcdermott/does-google-index-text-content-in-css-pseudo-elements-421p</guid>
      <description>&lt;p&gt;Traditionally when Google (or other search engines) look for text-based content to index - they expect to find this content directly in the HTML of the webpage that is served to them.&lt;/p&gt;

&lt;p&gt;This changed somewhat with the rise of sites using JavaScript to serve anywhere from small pieces of content to entire websites.&lt;/p&gt;

&lt;p&gt;Google was forced then to invest resources attempting to render and index JavaScript based content as effectively as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-pseudo-elements"&gt;
  &lt;/a&gt;
  CSS Pseudo Elements
&lt;/h2&gt;

&lt;p&gt;But what about text content that is sourced purely from CSS? It is possible to add content to a page using¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;CSS pseudo elements&lt;/a&gt;¬†such as¬†&lt;em&gt;::before&lt;/em&gt;¬†and¬†&lt;em&gt;::after&lt;/em&gt;¬†combined with the CSS¬†&lt;em&gt;content&lt;/em&gt;¬†property.&lt;/p&gt;

&lt;p&gt;See a simple example below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt;99 bottles of beer on the wall, 99 bottles of beer.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code language: HTML, XML&lt;/p&gt;

&lt;p&gt;&lt;code&gt;p::after {content:' Take one down and pass it around, 98 bottles of beer on the wall.'}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code language: CSS&lt;/p&gt;

&lt;p&gt;Will display as:&lt;/p&gt;

&lt;p&gt;99 bottles of beer on the wall, 99 bottles of beer. Take one down and pass it around, 98 bottles of beer on the wall.&lt;/p&gt;

&lt;p&gt;Year after year as CSS gets more advanced and other features are introduced, such as the ability to do¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/calc()"&gt;mathematical calculations&lt;/a&gt;¬†or¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Lists_and_Counters/Using_CSS_counters"&gt;count elements&lt;/a&gt;¬†using only CSS, the likelihood of devs and designers adopting these features becomes higher.&lt;/p&gt;

&lt;p&gt;But will Google be able to render and index this content? Will the text found in the CSS appear and be searchable in Google?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-using-css-for-text-best-practice"&gt;
  &lt;/a&gt;
  Is using CSS for text best practice?
&lt;/h2&gt;

&lt;p&gt;Before we start it is important to note that in the large majority of situations using CSS pseudo elements and the 'content' property (instead of HTML) to display any significant amount of text based content on a website is absolutely¬†not best practice¬†for various reasons, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; The text is not selectable by users, meaning it can't be highlighted or copied/pasted&lt;/li&gt;
&lt;li&gt; The text will be ignored by screen readers - making the content inaccessible and against accessibility guidelines.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;F87: Failure of Success Criterion 1.3.1 due to inserting non-decorative content by using :before and :after pseudo-elements and the 'content' property in CSS&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/F87"&gt;W3.org&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CSS pseudo elements should generally speaking only be used for decorative elements that are non-essential to the consumption of the content on the page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seo-poll"&gt;
  &lt;/a&gt;
  SEO Poll
&lt;/h2&gt;

&lt;p&gt;Until the production of this article - I was not able to find any other SEO-focused articles on this topic, so I thought it could be interesting to dig in and so some research.&lt;/p&gt;

&lt;p&gt;I asked the SEO community what they thought in a Twitter poll, with the following results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---5CIz6fm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/aSiTX5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---5CIz6fm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/aSiTX5c.png" alt="Poll results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Can Google index text content from CSS displayed on a web page in a pseudo element, eg :before, :after?&lt;/p&gt;‚Äî Colin McDermott (&lt;a class="mentioned-user" href="https://dev.to/colinmcdermott"&gt;@colinmcdermott&lt;/a&gt;
) &lt;a href="https://twitter.com/ColinMcDermott/status/1410190943320522759?ref_src=twsrc%5Etfw"&gt;June 30, 2021&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;Taking out users that just wanted to see the results, there is a fairly even split between the three choices with¬†&lt;em&gt;'No'&lt;/em&gt;¬†and¬†&lt;em&gt;'I don't know'&lt;/em&gt;¬†getting an equal number of votes (12), and¬†&lt;em&gt;'Yes'&lt;/em&gt;¬†trailing behind by just a few votes (9).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test"&gt;
  &lt;/a&gt;
  Test
&lt;/h2&gt;

&lt;p&gt;To test I¬†&lt;a href="https://www.searchcandy.uk/css_test/"&gt;created a page&lt;/a&gt;¬†that contained zero standard HTML based content and added text content using CSS pseudo elements attached to heading, paragraph, div and link tags - sourced from an external file CSS file.&lt;/p&gt;

&lt;p&gt;You can also view the code and resulting page¬†&lt;a href="https://codepen.io/colinmcdermott/pen/QWvwQMp"&gt;on CodePen here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To give the URL a little boost to help it get indexed more quickly (or indeed at all) I linked to it temporarily from the footer of the site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rendering"&gt;
  &lt;/a&gt;
  Rendering
&lt;/h3&gt;

&lt;p&gt;To test I also ran the page through the Fetch tool in Search Console and the Mobile Friendly testing tool.&lt;/p&gt;

&lt;p&gt;Both showed that Google were able to fully render the CSS content as it appeared to normal users on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;Eventually (slightly to my surprise) the page did get indexed in Google despite the complete lack of content.&lt;/p&gt;

&lt;p&gt;However checking the resulting listing in Google, and after searching for strings of text from the page - it became clear that no actual content had been indexed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPrqb0A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.searchcandy.uk/wp-content/uploads/2021/07/image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPrqb0A5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.searchcandy.uk/wp-content/uploads/2021/07/image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we can confirm from this test that:¬†NO¬†- although Google can render it, CSS based content will not currently be indexed in Google.&lt;/p&gt;

&lt;p&gt;If you include text content on your site using CSS pseudo elements and the CSS 'content' property it is currently not possible for Google to index the text content.&lt;/p&gt;

&lt;p&gt;Update (14/7/2021)&lt;/p&gt;

&lt;p&gt;The fantastic Jess Peck alerted me to a previous test she conducted on the same subject¬†&lt;a href="https://jessbpeck.com/horribleseoexperiments/"&gt;you can view here&lt;/a&gt;, and another post/experiment from Mathias Bynens that¬†&lt;a href="https://mathiasbynens.be/notes/css-without-html"&gt;doesn't use any HTML at all&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>frontend</category>
      <category>learning</category>
    </item>
    <item>
      <title>Build Complex CSS Transitions using Custom Properties and cubic-bezier()</title>
      <author>Temani Afif</author>
      <pubDate>Fri, 16 Jul 2021 10:37:13 +0000</pubDate>
      <link>https://dev.to/afif/build-complex-css-transitions-using-custom-properties-and-cubic-bezier-cn0</link>
      <guid>https://dev.to/afif/build-complex-css-transitions-using-custom-properties-and-cubic-bezier-cn0</guid>
      <description>&lt;p&gt;I recently illustrated how &lt;a href="https://dev.to/this-is-learning/advanced-css-animation-using-cubic-bezier-nho"&gt;we can achieve complex CSS animations using &lt;code&gt;cubic-bezier()&lt;/code&gt;&lt;/a&gt; and how to do the same when it comes to CSS transitions. I was able to create complex hover effect without resorting to keyframes. In this article, I will show you how to create even more complex CSS transitions.&lt;/p&gt;

&lt;p&gt;This time, let's use the &lt;code&gt;@property&lt;/code&gt; feature. It's only supported on Chrome-based browsers for now but we can still play with it and demonstrate how it, too, and can be used to build complex animations.&lt;/p&gt;

&lt;p&gt;Read the below for more detail about &lt;code&gt;@property&lt;/code&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/we-can-finally-animate-css-gradient-kdk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;We can finally animate CSS gradient&lt;/h2&gt;
      &lt;h3&gt;Temani Afif „Éª Feb 26 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I highly recommend reading &lt;a href="https://dev.to/this-is-learning/advanced-css-animation-using-cubic-bezier-nho"&gt;my previous article&lt;/a&gt; because I will be referring to a few concepts I explained in detail there. Also, please note that the demos in this article are best viewed in Chromium-based browsers while &lt;code&gt;@property&lt;/code&gt; support is still limited.&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with a demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJpojQX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Click on the button (more than once) and see the "magic" curve we get. It may look trivial at first glance because we can achieve such effect using some complex keyframes. But the trick is that there is no keyframe in there! That animation is done using only a transition.&lt;/p&gt;

&lt;p&gt;Awesome right? And this is only the beginning, so let's dig in!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-main-idea"&gt;
  &lt;/a&gt;
  The main idea
&lt;/h2&gt;

&lt;p&gt;The trick in the previous example relies on this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--d1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;number&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--d2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;number&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;--d1&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-1200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;--d2&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-1200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--d1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--d1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're defining two custom properties, &lt;code&gt;--d1&lt;/code&gt; and &lt;code&gt;--d2&lt;/code&gt;. Then, we declare the &lt;code&gt;top&lt;/code&gt; property on a &lt;code&gt;.box&lt;/code&gt; element using the sum of both those properties. Nothing overly complex yet‚Äîjust &lt;code&gt;calc()&lt;/code&gt; applied to two variables.&lt;/p&gt;

&lt;p&gt;The two properties are defined as &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt; and I multiply those values by &lt;code&gt;1%&lt;/code&gt; to convert them into a percentage. We could define these as &lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt; right away to avoid the multiplication. But I've chosen numbers instead in favor of more flexibility for more complex operations later.&lt;/p&gt;

&lt;p&gt;Notice that we apply a different transition to each variable‚Äîmore precisely, a different timing-function with the same duration. It's actually a different &lt;em&gt;sinusoidal curve&lt;/em&gt; for both variables which is something I get deep into in &lt;a href="https://dev.to/this-is-learning/advanced-css-animation-using-cubic-bezier-nho"&gt;my previous article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From there, the property values change when the &lt;code&gt;.box&lt;/code&gt; is hovered, triggering the animation. But why do we get the result we see in the demo?&lt;/p&gt;

&lt;p&gt;It's all about math. We are adding two functions to create a third one. For &lt;code&gt;--d1&lt;/code&gt;, we have a function (let's call it &lt;code&gt;F1&lt;/code&gt;); for &lt;code&gt;--d2&lt;/code&gt; , we have another one (let's call it &lt;code&gt;F2&lt;/code&gt;). That means the value of top is &lt;code&gt;F1 + F2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An example to better illustrate:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/rNyZGpX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The first two transitions illustrate each variable individually. The third one is the sum of them. Imagine that at in each step of the animation we take the value of both variables and we add them together to get each point along the final curve.&lt;/p&gt;

&lt;p&gt;Let's try another example:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJpoxaZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This time, we combine two parabolic curve to get a‚Ä¶ well, I don't know its name it but it's another complex curve!&lt;/p&gt;

&lt;p&gt;This trick is not only limited to the parabolic and sinusoidal curve. It can work with any kind of timing function even if the result won‚Äôt always be a complex curve.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWpVOwP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;--d1&lt;/code&gt; goes from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;30&lt;/code&gt; with an &lt;code&gt;ease-in&lt;/code&gt; timing function&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--d2&lt;/code&gt; goes from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;-20&lt;/code&gt; with an &lt;code&gt;ease-out&lt;/code&gt; timing function
The result? The top value goes from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt; (&lt;code&gt;30-20&lt;/code&gt;) with a custom timing function (the sum of &lt;code&gt;ease-in&lt;/code&gt; and &lt;code&gt;ease-out&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are not getting a complex transition in this case ‚Äî it's more to illustrate the fact that it‚Äôs a generic idea not only limited to &lt;code&gt;cubic-bezier()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I think it's time for an interactive demo.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/QWpVOZb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;All you have to do is to adjust a few variables to build your own complex transition. I know &lt;code&gt;cubic-bezier()&lt;/code&gt; may be tricky, so consider &lt;a href="https://cubic-bezier.com/"&gt;using this online curve generator&lt;/a&gt; and also refer to &lt;a href="https://dev.to/this-is-learning/advanced-css-animation-using-cubic-bezier-nho"&gt;my previous article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are some examples I made:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4cYbgq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623707586021_image.png%3Fresize%3D1000%252C218%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4cYbgq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623707586021_image.png%3Fresize%3D1000%252C218%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2rxjamp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623707394924_image.png%3Fresize%3D1000%252C198%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2rxjamp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623707394924_image.png%3Fresize%3D1000%252C198%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_N8i4Ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623707785542_image.png%3Fresize%3D1000%252C212%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_N8i4Ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623707785542_image.png%3Fresize%3D1000%252C212%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OAAsIoMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623708118748_image.png%3Fresize%3D1000%252C219%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OAAsIoMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623708118748_image.png%3Fresize%3D1000%252C219%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp6NTrhu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623708352278_image.png%3Fresize%3D1000%252C218%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp6NTrhu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623708352278_image.png%3Fresize%3D1000%252C218%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we can combine two different timing functions (created using &lt;code&gt;cubic-bezier()&lt;/code&gt; ) to create a third one, complex enough to achieve a fancy transition. The combinations (and possibilities) are unlimited!&lt;/p&gt;

&lt;p&gt;In that last example, I wanted to demonstrate how adding two opposite functions lead to the logical result of a constant function (no transition). Hence, the flat line.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-add-more-variables"&gt;
  &lt;/a&gt;
  Let's add more variables!
&lt;/h2&gt;

&lt;p&gt;You thought we'd stop at only two variables? Certainly not! We can extend the logic to N variables. There is no restriction ‚Äî we define each one with a timing function and sum them up.&lt;/p&gt;

&lt;p&gt;An example with three variables:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/gOmdvye?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In most cases, two variables are plenty to create a fancy curve, but it's neat to know that the trick can be extended to more variables.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#can-we-subract-multiply-and-divide-variables"&gt;
  &lt;/a&gt;
  Can we subract, multiply and divide variables?
&lt;/h2&gt;

&lt;p&gt;Of course! We can also extend the same idea to consider more operations. We can add, subtract, multiply, divide‚Äîand even perform a complex formula between variables.&lt;/p&gt;

&lt;p&gt;Here, we're multiplying values:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRWXxYz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hUcp-JXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623713012450_image.png%3Fresize%3D1000%252C225%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hUcp-JXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623713012450_image.png%3Fresize%3D1000%252C225%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkOhGJ3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623713221967_image.png%3Fresize%3D1000%252C219%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkOhGJ3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623713221967_image.png%3Fresize%3D1000%252C219%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also use one variable and multiply it by itself to get a quadratic function!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ExWeLXp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's add more fun in there by introducing &lt;code&gt;min()&lt;/code&gt;/&lt;code&gt;max()&lt;/code&gt; to simulate an &lt;code&gt;abs()&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNpgJaO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice that in the second box we will never get higher than the center point on the y-axis because &lt;code&gt;top&lt;/code&gt; is always a positive value. (I added a &lt;code&gt;margin-top&lt;/code&gt; to make the center of box the reference for &lt;code&gt;0&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4s3PdDhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623713645384_image-1.png%3Fw%3D998%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4s3PdDhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623713645384_image-1.png%3Fw%3D998%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2fsiVkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623713736514_image.png%3Fw%3D998%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2fsiVkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/07/s_E5FA9B60DB2DD68259AE36C4F3A595FF19BEE48F771DA7255CBE6656BCD3C823_1623713736514_image.png%3Fw%3D998%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won't get into all the math, but you can imagine the possibilities we have to create any kind of timing function. All we have to do is to find the right formula either using one variable or combining multiple variables.&lt;/p&gt;

&lt;p&gt;Our initial code can be generalized:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--d1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* we do the same for d2 .. dn */&lt;/span&gt;
  &lt;span class="nt"&gt;syntax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;number&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;inherits&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;initial-value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* the initial value can be different for each variable */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* the same duration for all */&lt;/span&gt;
  &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--d2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--dn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;UNIT&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;--d1&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;--d2&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c"&gt;/* .. */&lt;/span&gt;
    &lt;span class="n"&gt;--dn&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--d1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--d2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* .. */&lt;/span&gt;
  &lt;span class="py"&gt;--dn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;f3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pseudo-code to illustrate the logic:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We use &lt;code&gt;@property&lt;/code&gt; to define numeric custom properties, each with an initial value.&lt;/li&gt;
&lt;li&gt;Each variable has its own timing function but the same duration.&lt;/li&gt;
&lt;li&gt;We define an &lt;code&gt;f&lt;/code&gt; function that is the formula used between the variables. The function provides a number that we use to multiply the relevant unit. All this runs in &lt;code&gt;calc()&lt;/code&gt; applied to the property.&lt;/li&gt;
&lt;li&gt;We update the value of each variable on hover (or toggle, or whatever).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Given this, the property transitions from &lt;code&gt;f(i1,i2,‚Ä¶,in)&lt;/code&gt; to &lt;code&gt;f(f1,f2,..,fn)&lt;/code&gt; with a custom timing function.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#chaining-timing-functions"&gt;
  &lt;/a&gt;
  Chaining timing functions
&lt;/h2&gt;

&lt;p&gt;We've reached the point where we were able to create a complex timing function by combining basic ones. Let's try another idea that allow us to have more complex timing function: &lt;strong&gt;chaining timing functions together&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The trick is to run the transitions sequentially using the &lt;code&gt;transition-delay&lt;/code&gt; property. Let's look back at the interactive demo and apply a delay to one of the variables:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ZEeMZrv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We are chaining timing functions instead of adding them together for yet another way to create more complex timing functions! Mathematically, it's still a sum, but since the transitions do not run at the same time, we will be summing a function with a constant, and that simulates the chaining.&lt;/p&gt;

&lt;p&gt;Now imagine the case with N variables that we are incrementally delayed. Not only can we create complex transitions this way, but we have enough flexibility to build complex timelines.&lt;/p&gt;

&lt;p&gt;If you followed my &lt;a href="https://dev.to/afif/still-100-underline-overlay-animations-the-advanced-css-collection-4mol#the-arcade-ii"&gt;underline/overlay collections&lt;/a&gt; you will remember the below one I built using such technique.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWpqRqQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You will find no keyframes there. A small action scene is made entirely using one element and a CSS transition.&lt;/p&gt;

&lt;p&gt;Here is a realistic pendulum animation using the same idea:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNpaGBO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Or, how about a ball that bounces naturally:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNpaoOM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Or maybe a ball rolling along a curve:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/GRWwedQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See that? We just created complex animations without a single keyframe in the code!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-a-wrap"&gt;
  &lt;/a&gt;
  That's a wrap!
&lt;/h2&gt;

&lt;p&gt;I hope you took three key points away from this article and the previous one:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can get parabolic and sinusoidal curves using &lt;code&gt;cubic-bezier()&lt;/code&gt; that allow us to create complex transitions without keyframes.&lt;/li&gt;
&lt;li&gt;We can create more curves by combining different timing functions using custom properties and &lt;code&gt;calc()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We can chain the curves using the &lt;code&gt;transition-delay&lt;/code&gt; to build a complex timeline.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks to these three features, we have no limits when it comes to creating complex animations without keyframes&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWpeazj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Rightsizing - Why it is Important to Me.</title>
      <author>Harinder Seera üá≠üá≤</author>
      <pubDate>Fri, 16 Jul 2021 10:09:54 +0000</pubDate>
      <link>https://dev.to/aws-builders/rightsizing-why-it-is-important-to-me-imi</link>
      <guid>https://dev.to/aws-builders/rightsizing-why-it-is-important-to-me-imi</guid>
      <description>&lt;p&gt;A question was recently asked on &lt;a href="https://www.linkedin.com/posts/dr-manzoor-mohammed-06104a1_cto-cloud-engineering-activity-6818118583877476352-T6uk"&gt;LinkedIn&lt;/a&gt; about whether you think rightsizing is important or not. I left a comment on the post but did not elaborate. This post attempts to expand on the comment.&lt;/p&gt;

&lt;p&gt;When I talk to people about rightsizing, I frequently get the impression that they feel it is all about EC2 autoscaling, underutilised EBS volumes, or EC2 instance type. In my perspective, it's more complex than that. Data consumption and suitable configuration settings are also included in rightsizing.&lt;/p&gt;

&lt;p&gt;So here are a few of the reasons why rightsizing is important to me. They're as follows:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-avoiding-downtime-amp-account-limit-issues"&gt;
  &lt;/a&gt;
  1. Avoiding Downtime &amp;amp; Account limit issues
&lt;/h2&gt;

&lt;p&gt;You may encounter a variety of account limits and downtime issues if resources are not correctly sized. This could then impact your delivery. As an example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you over-provision DynamoDB table capacity, you may be unable to pre-provision capacity for other DynamoDB tables in the account. This is due to the possibility that you have hit the soft account level restriction. As a result, selecting the appropriate capacity is important. This can happen in a non-production account if distinct DynamoDB tables have been configured for use by different teams and test environments. &lt;/li&gt;
&lt;li&gt;Another case in point is &lt;a href="https://medium.com/compass-true-north/experiences-for-ip-addresses-shortage-on-eks-clusters-a740f56ac2f5"&gt;IP address fragmentation on ENIs&lt;/a&gt;. You believe you have an enough number of IP addresses, but you do not. You continue with the deployment in an environment, but it fails because of a lack of IP addresses. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both of these cases demonstrate an unanticipated effect of failing to rightsize resources. The cost in the preceding situations is the time spent by team members detecting and resolving the issue, which might have been avoided if rightsizing had been done appropriately.&lt;/p&gt;

&lt;p&gt;In addition, I have firsthand experience of both of these situations.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-monitoring"&gt;
  &lt;/a&gt;
  2. Monitoring
&lt;/h2&gt;

&lt;p&gt;Rightsizing can help you reduce the number of resources you need to monitor. You may be able to minimise the amount of data ingested for monitoring purposes as well. All of this leads to the fourth step, which is waste reduction.&lt;/p&gt;

&lt;p&gt;Rightsizing can also assist you in reducing the number of third-party agents needed to monitor the resources. Once again, this can help with the waste reduction. Datadog, for example, charges based on the number of instances, so the more nodes there are, the more money there is. Splunk charges a daily fee based on the amount of data that the Splunk instance indexes. There is a data transfer fee if data is transferred to a different region for Splunk to index than where the application is located.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-improved-application-performance"&gt;
  &lt;/a&gt;
  3. Improved Application Performance
&lt;/h2&gt;

&lt;p&gt;Rightsizing may have an effect on the performance of your application. For example, rightsizing the &lt;a href="https://theburningmonk.com/2017/06/aws-lambda-compare-coldstart-time-with-different-languages-memory-and-code-sizes/"&gt;proper memory for the lambda function&lt;/a&gt; might assist lessen the impact of the cold startup.&lt;/p&gt;

&lt;p&gt;Similarly, choosing the appropriate &lt;a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-short-and-long-polling.html"&gt;AWS SQS polling mode and timeout&lt;/a&gt; setting will optimize your application's performance and cost. I recall the first time we implemented short polling and how it affected performance, resource use, and cost. With a little redesign and the correct configuration, we were able to enhance performance, select the best resource to provide the required throughput, and minimize costs.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-managing-cost"&gt;
  &lt;/a&gt;
  4. Managing Cost
&lt;/h2&gt;

&lt;p&gt;When considering costs, you must include both direct and indirect costs associated to rightsizing. If a cost can be easily attributed and accounted for to a product or service, it is classified as direct; otherwise, it is classified as indirect. &lt;/p&gt;

&lt;p&gt;In the case of the ENI example above, the deployment failure required someone to troubleshoot the problem before re-triggering the deployment. That was an unintentional cost incurred. Someone had to stop what they were doing to investigate and resolve the issue. It also meant that no further deployments could take place until the issue was resolved. I'm sure there are other examples of indirect costs that people have incurred but are unaware of since they haven't rightsized.    &lt;/p&gt;

&lt;p&gt;The direct cost, on the other hand, is the same as switching EC2 instance types. The &lt;a href="https://aws.amazon.com/ec2/pricing/on-demand/"&gt;price change&lt;/a&gt; will be obvious.  &lt;/p&gt;

&lt;p&gt;Depending on the circumstances, a software licence may be deemed a direct or indirect cost. Regardless of whatever category it fits under, it is still a cost that can be influenced by resource rightsizing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  &lt;em&gt;Final Thoughts.&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;Rightsizing is a continuous process and not once of activity. Also, I believe that rightsizing entails far more than EC2 instance types, Autoscaling, and underutilized EBS volumes.&lt;/p&gt;

&lt;p&gt;Rightsizing is important to me for the reasons stated above. So, why is rightsizing important to you? &lt;/p&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;If you enjoyed this article feel free to share it on social media üôÇ&lt;/p&gt;

&lt;p&gt;Say Hello on: &lt;a href="https://www.linkedin.com/in/hpseera/"&gt;Linkedin&lt;/a&gt; | &lt;a href="https://twitter.com/harinderseera"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href="https://github.com/hseera"&gt;hseera&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>performance</category>
      <category>finops</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
