<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Continuous Integrations with GitHub actions</title>
      <author>Dawson Codes | TypeScript</author>
      <pubDate>Sat, 08 Jan 2022 18:26:02 +0000</pubDate>
      <link>https://dev.to/dawsoncodes/continuous-integrations-with-github-actions-26ig</link>
      <guid>https://dev.to/dawsoncodes/continuous-integrations-with-github-actions-26ig</guid>
      <description>&lt;p&gt;In this blog post, I will show you how Github Actions work and how you can use it to spend less time deploying and more time coding.&lt;/p&gt;

&lt;p&gt;Hi 👋 I'm &lt;a href="https://twitter.com/DawsonCodes"&gt;Dawson&lt;/a&gt;. I daily tweet about web dev tips and write long-form content like this. So if you like it, please consider giving me a follow on &lt;a href="https://twitter.com/DawsonCodes"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github-actions"&gt;
  &lt;/a&gt;
  What is Github Actions?
&lt;/h2&gt;

&lt;p&gt;Github Actions is another feature on Github. It relies on the GitHub webhooks API to detect commits and pull requests, allows you to build and deploy your code.&lt;/p&gt;

&lt;p&gt;You're able to create &lt;a href="https://about.gitlab.com/topics/ci-cd/pipeline-as-code/"&gt;pipelines&lt;/a&gt; with customizable actions per stage, monitor your repository for changes, and run the appropriate pipeline for the event that happened. For example, if new code is pushed, then run some tests.&lt;/p&gt;

&lt;p&gt;You can specify conditions that need to be fulfilled before running actions. You can create your custom scripts or use ready-to-use workflow templates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-advantages-of-github-actions"&gt;
  &lt;/a&gt;
  What are the Advantages of GitHub Actions?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#no-more-redeploying"&gt;
  &lt;/a&gt;
  No more Re-deploying
&lt;/h3&gt;

&lt;p&gt;Deploying your application once you make changes to your code manually could be exhausting, and repetitive.&lt;/p&gt;

&lt;p&gt;On a personal use case, let's say you deploy your apps manually. You write some code; you push to GitHub, ssh into your VPS, pull the changes from Github, build and deploy, and forget to add something? REPEAT. Exhausting right?&lt;/p&gt;

&lt;p&gt;With Github Actions, you can create a CI/CD pipeline that does all of those things for you, what you have to do is push to GitHub, and GitHub will take care of your workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automating-your-opensource-workflow"&gt;
  &lt;/a&gt;
  Automating your open-source workflow
&lt;/h3&gt;

&lt;p&gt;Open source projects take outstanding advantage of this service; it makes everything much more straightforward.&lt;/p&gt;

&lt;p&gt;Imagine maintaining an extensive open source project, and contributors send &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests"&gt;pull requests&lt;/a&gt; all the time, some of those pull requests might break your code if you merge it into your main branch.&lt;/p&gt;

&lt;p&gt;What can you do? You can set up a workflow with Github Actions and build and test the app every time someone creates a pull request so that before you even try to consider reading a pull request, you already see that this pull request breaks some part of your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-third-party-tool"&gt;
  &lt;/a&gt;
  No third party tool
&lt;/h3&gt;

&lt;p&gt;The best thing about GitHub Actions is that you probably already use GitHub.&lt;/p&gt;

&lt;p&gt;So it's much better to use GitHub Actions than to use some other third-party tool to manage your CI/CD pipeline and build high-performing, secure pipelines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-large-variety-of-already-set-up-workflows"&gt;
  &lt;/a&gt;
  A large variety of already set up workflows
&lt;/h3&gt;

&lt;p&gt;You don't need to manage your workflows; you can use already made environments to run your pipeline workflow. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-easy"&gt;
  &lt;/a&gt;
  It is easy
&lt;/h3&gt;

&lt;p&gt;Github CI/CD pipeline is also more accessible than other CI/CD tools and does not require you to have a full-time DevOps team that is cost-intensive and not ideal for startups. Instead, you can quickly learn how to use it and create workflows with your development team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-dont-need-a-server-to-run-actions"&gt;
  &lt;/a&gt;
  You don't need a server to run actions
&lt;/h3&gt;

&lt;p&gt;All these actions will be happening on Github servers. This means you save resources because you don't have to run them on your server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;These Github actions that we talked about will only trigger when specific events happen, like &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pull request&lt;/code&gt;. Let's say that we only want a particular action to happen only when the event is &lt;code&gt;push&lt;/code&gt;, meaning that every time some new changes are being pushed to the Github repository.&lt;/p&gt;

&lt;p&gt;So basically, GitHub will listen to an event and trigger the actions given by the developer.&lt;/p&gt;

&lt;p&gt;Each job will run on a different server, for example, any job in the &lt;code&gt;job&lt;/code&gt; tag is run by a server, and another &lt;code&gt;job&lt;/code&gt; has another server.&lt;/p&gt;

&lt;p&gt;Sometimes we want jobs to run one after another. If we decide to do so, we need to use the &lt;code&gt;needs&lt;/code&gt; tag in the other job and include the other jobs` name. &lt;strong&gt;More of this later&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cicd-pipeline"&gt;
  &lt;/a&gt;
  The CI/CD pipeline
&lt;/h2&gt;

&lt;p&gt;Today, one of the most common workflows is the CI/CD pipeline, which runs some actions in order. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commit: you commit your changes to GitHub.&lt;/li&gt;
&lt;li&gt;Test: Workflow starts running tests.&lt;/li&gt;
&lt;li&gt;Build: Build starts if the test ran successfully.&lt;/li&gt;
&lt;li&gt;Deploy: Deploys the latest changes to the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code is pushed from development to a testing environment and finally to production for end-users to access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-github-workflow-syntax"&gt;
  &lt;/a&gt;
  The Github workflow syntax
&lt;/h2&gt;

&lt;p&gt;Github Actions use the &lt;code&gt;.yml&lt;/code&gt; language to define workflows. So if you don't have a basic understanding of reading &lt;a href="https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started"&gt;YML&lt;/a&gt;, I recommend reading some articles about it.&lt;/p&gt;

&lt;p&gt;There are many syntaxes that Github uses to define workflows, I will talk about the most used and common ones, and later in this article, we will write our workflow for a node.js application, test it and then deploy it to our own &lt;a href="https://www.dreamhost.com/blog/beginners-guide-vps/"&gt;VPS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are some of the most essential &lt;code&gt;.yml&lt;/code&gt; syntaxes of Github workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;name&lt;/strong&gt;: is the name of your workflow file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;on&lt;/strong&gt;: contains the list of events in which we want to trigger the action.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;jobs&lt;/strong&gt;: The list of jobs we want to run after the event happens.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;runs-on&lt;/strong&gt;: is the operating system in which you want to run the workflow.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;steps&lt;/strong&gt;: a list of actions you want to run after the event happens.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;uses&lt;/strong&gt;: you can import other people's written actions and re-use them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;with&lt;/strong&gt;: a list of variables. Think of it as environment variables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#secrets"&gt;
  &lt;/a&gt;
  Secrets
&lt;/h3&gt;

&lt;p&gt;Sometimes you want to add a password or a private key inside your workflow file. &lt;/p&gt;

&lt;p&gt;But you don't want other people to see it, and you still want to run the actions.&lt;/p&gt;

&lt;p&gt;In this case, you can put your repository secrets from your repository settings; you can specify the &lt;strong&gt;name&lt;/strong&gt; of your key and the &lt;strong&gt;value&lt;/strong&gt; of your key.&lt;/p&gt;

&lt;p&gt;Later you can use these secrets in your &lt;code&gt;.yml&lt;/code&gt; file by using the &lt;code&gt;&lt;/code&gt;&lt;code&gt;${{ secrets.YOUR_SECRET }}&lt;/code&gt;&lt;code&gt;&lt;/code&gt; syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-a-sample-github-workflow"&gt;
  &lt;/a&gt;
  Writing a sample Github workflow
&lt;/h2&gt;

&lt;p&gt;In this tutorial, I'll show you how to set up a GitHub workflow so that when we push some changes to our main branch on GitHub, our website will automatically build, test, and host itself again. which will save us a lot of time &amp;amp; effort.&lt;/p&gt;

&lt;p&gt;So, in summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We push some changes to Github.&lt;/li&gt;
&lt;li&gt;Event triggers.&lt;/li&gt;
&lt;li&gt;Github will download our code and test it on their server.&lt;/li&gt;
&lt;li&gt;If the test is successful, Github will access our VPS using SSH keys.&lt;/li&gt;
&lt;li&gt;Fetches the latest changes.&lt;/li&gt;
&lt;li&gt;Builds the app.&lt;/li&gt;
&lt;li&gt;Restarts the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following code shows the Github workflow code for testing, building, and hosting a node.js app on a VPS using SSH keys:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`yml&lt;br&gt;
name: Node.js CI&lt;/p&gt;

&lt;p&gt;on:&lt;br&gt;
  push:&lt;br&gt;
    branches: [ master ]&lt;/p&gt;

&lt;p&gt;jobs:&lt;br&gt;
  build-and-test:&lt;br&gt;
    runs-on: ubuntu-latest&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;strategy:
  matrix:
    node-version: [16.x]

steps:
- uses: actions/checkout@v2
- name: Use Node.js ${{ matrix.node-version }}
  uses: actions/setup-node@v2
  with:
    node-version: ${{ matrix.node-version }}
    cache: 'npm'
- run: npm i
- run: npm run build
- run: npm run test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;deploy:&lt;br&gt;
    needs: build-and-test&lt;br&gt;
    runs-on: ubuntu-latest&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;strategy:
  matrix:
    node-version: [16.x]

steps:
  - uses: actions/checkout@v2
  - name: Use Node.js ${{ matrix.node-version }}
    uses: appleboy/ssh-action@master
    with:
      host: ${{ secrets.IP }}
      username: ${{ secrets.USERNAME }}
      key: ${{ secrets.KEY }}
      script: cd path/to/your/app/directory &amp;amp;&amp;amp; git checkout . &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; npm run build &amp;amp;&amp;amp; pm2 restart MyApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first job we have created is to build and test the app on the Github servers.&lt;/p&gt;

&lt;p&gt;If the first action was successful, the second one will be executed. We specified this by using &lt;code&gt;needs&lt;/code&gt; syntax and adding the previous job name.&lt;/p&gt;

&lt;p&gt;Great, now your server hosts itself again without you having to worry about build fails or errors in your code. Now, you can spend more time coding and less time re-deploying.&lt;/p&gt;

&lt;p&gt;Thank you for taking the time to read my blog post. If you found it helpful, please feel free to follow me on &lt;a href="https://twitter.com/DawsonCodes"&gt;Twitter&lt;/a&gt;, where I post daily web development tips.&lt;/p&gt;

&lt;p&gt;If you have any questions or need anything, please feel free to DM me on Twitter.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>webdev</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Built-In Angular Pipes -Part 5</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sat, 08 Jan 2022 18:14:19 +0000</pubDate>
      <link>https://dev.to/this-is-angular/built-in-angular-pipes-part-5-pco</link>
      <guid>https://dev.to/this-is-angular/built-in-angular-pipes-part-5-pco</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will continue to learn the built in Angular pipes.&lt;/p&gt;

&lt;p&gt;Pipes covered in this post -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LowerCasePipe&lt;/code&gt;&lt;br&gt;
&lt;code&gt;PercentPipe&lt;/code&gt;&lt;br&gt;
&lt;code&gt;SlicePipe&lt;/code&gt;&lt;br&gt;
&lt;code&gt;TitleCasePipe&lt;/code&gt;&lt;br&gt;
&lt;code&gt;UpperCasePPipe&lt;/code&gt;&lt;/p&gt;



&lt;p&gt;&lt;code&gt;LowerCasePipe&lt;/code&gt;&lt;br&gt;
This pipe is used to convert the string of alphabets in to lower case or in small letters&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value | lowercase }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;Exported&lt;/strong&gt; from the &lt;code&gt;CommonModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It takes only &lt;code&gt;string&lt;/code&gt; as Input.&lt;/p&gt;

&lt;p&gt;Now lets see the example. Our playground 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYtvH1jd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxeb9amwb2sbfxl2gdu7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYtvH1jd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxeb9amwb2sbfxl2gdu7.PNG" alt="Image description" width="509" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets paste in the below code in the component.ts file-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myName = 'JOHN DOE';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the component html file lets paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;hr&amp;gt;
&amp;lt;h2&amp;gt;Lowercase Pipe Demo&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;Without Pipe&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{myName }}&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;With Pipe&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{myName | lowercase}}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the browser you will see the below output 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5KjQpuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkez6wn62vurw92jpwtu.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y5KjQpuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkez6wn62vurw92jpwtu.PNG" alt="Image description" width="332" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here you can see without using pipe we are getting the original value but after using the &lt;code&gt;lowercasePipe&lt;/code&gt; we are getting the value converted to &lt;strong&gt;lowercase&lt;/strong&gt;.&lt;/p&gt;



&lt;p&gt;&lt;code&gt;PercentPipe&lt;/code&gt;&lt;br&gt;
It modifies a number to a percentage string. It can be formatted according to locale rule that determines the size of the group and the separator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value_expression | percent [ : digitsInfo [ : locale ] ] }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;Exported&lt;/strong&gt; from the &lt;code&gt;CommonModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It takes only &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; as Input.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;digitsInfo&lt;/code&gt; - &lt;br&gt;
Its exactly the same as the digitsInfo in the &lt;code&gt;decimal pipe&lt;/code&gt;. I would recommend you to have a look &lt;a href="https://dev.to/this-is-angular/built-in-angular-pipes-decimalpipe-part-3-33p1"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets see in practice -&lt;br&gt;
We will be working in the same playground.&lt;br&gt;
In the component.ts file lets paste the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; percentValue = 0.234769;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp; in the template file lets paste the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h2&amp;gt;Percent Pipe Demo&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;{{ percentValue | percent }} &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets see the output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---vyb8K9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yyr9qkdbwzb1ox49p7e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---vyb8K9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7yyr9qkdbwzb1ox49p7e.PNG" alt="Image description" width="327" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that the output is &lt;strong&gt;23%&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Things to watch&lt;/em&gt;&lt;br&gt;
The value got rounded and a percent sign has been appended.&lt;br&gt;
Now if you update the &lt;code&gt;percentValue&lt;/code&gt; variable to &lt;strong&gt;0.237769&lt;/strong&gt;&lt;br&gt;
you will see the output to become 24%&lt;br&gt;
If we do not pass the digits info in that case there is no digits after the decimal point and it will be rounded off.&lt;/p&gt;

&lt;p&gt;Now lets see how digits info works. Lets paste in the below code in the template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;hr&amp;gt;
&amp;lt;h3&amp;gt;digitsInfo Example&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ percentValue | percent: '2.2-3'}} &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the output will become -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVKv4gDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0v0d41okrwoqdkfiuwv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVKv4gDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j0v0d41okrwoqdkfiuwv.PNG" alt="Image description" width="348" height="249"&gt;&lt;/a&gt;&lt;br&gt;
&lt;u&gt;Explanation of the above output&lt;/u&gt;&lt;br&gt;
Digit two (2) before the decimal signifies how many digits will be there before decimal point in the output.&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
If the output value has 2 digits before decimal (for example in this case) but you give 1 before decimal in the digitsInfo (example &lt;br&gt;
&lt;code&gt;&amp;lt;p&amp;gt;{{ percentValue | percent: '1.2-3'}} &amp;lt;/p&amp;gt;&lt;/code&gt;) still you will see 2 digits before the decimal.&lt;br&gt;
If you want 3 digits before the decimal then the digitsInfo should look like - 3.2-3 and 0 would be appended at the beginning.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.2-3&lt;/code&gt; =&amp;gt; 2 and 3 signifies the minimum and maximum digits after the decimal place. It means minimum 2 digits will be there and maximum 3. Since the value we passed has more than 3 digits so we can see 3 digits after the decimal place.&lt;/p&gt;



&lt;p&gt;&lt;code&gt;SlicePipe&lt;/code&gt;&lt;br&gt;
This pipe creates a subset of the input string or array of items.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value_expression | slice : start [ : end ] }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;Exported&lt;/strong&gt; from the &lt;code&gt;CommonModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It takes string or array as Input&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;start&lt;/code&gt;&lt;br&gt;
It is of type number&lt;br&gt;
It is mandatory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;br&gt;
It is a number. Marks the end position of the string/ array (But end is not included).&lt;br&gt;
It is optional&lt;br&gt;
Default value is undefined.&lt;/p&gt;

&lt;p&gt;Now lets jump in to see the example.&lt;br&gt;
Lets add the below code in the component.ts file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  sliceDemoString = 'John Snow';

  sliceDemoArray = ['a', 'b', 'c', 'd', 'e'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp; in the template file lets add the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h2&amp;gt;Slice Pipe Demo&amp;lt;/h2&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;h3&amp;gt;Without using slice pipe&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ sliceDemoString }} &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ sliceDemoArray }} &amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Without using slice pipe&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ sliceDemoString | slice: 2 }} &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ sliceDemoArray | slice: 1}} &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the output will be like below - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdG_6aj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkrvfk18nd1w41ke0hxh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdG_6aj2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkrvfk18nd1w41ke0hxh.PNG" alt="Image description" width="381" height="393"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Explanation&lt;/strong&gt;&lt;br&gt;
Here we have used the slice pipe and in the first example we passed 2 as the staring point. So from the string &lt;code&gt;John Snow&lt;/code&gt; the character &lt;strong&gt;Jo&lt;/strong&gt; was sliced out/ removed and the remaining string was returned (J is the 0th index and it started from 2nd index).&lt;br&gt;
In the second example we passed 1 so the first item or the 0th index item was removed and started from the 1st index.&lt;/p&gt;

&lt;p&gt;Lets update the above code and write the below code in the template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt;{{ sliceDemoString | slice: 2:4 }} &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{{ sliceDemoArray | slice: 1:3}} &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&amp;amp; the output will become -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1I9wx54S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2o33d8p87560jmcjtay.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1I9wx54S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2o33d8p87560jmcjtay.PNG" alt="Image description" width="365" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here in the first example the subset starts from 2nd index and ended in (end - 1) index the 3rd index.&lt;br&gt;
In the second example the start index was 1 and end index was not 3 but (endIndex - 1) i.e. the 2nd index so b, c was returned.&lt;/p&gt;



&lt;p&gt;&lt;code&gt;TitleCasePipe&lt;/code&gt;&lt;br&gt;
This pipe transforms the text to the title case. That is if you pass a sentence then every first letter of the word passed would become in capital case.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value_expression | titlecase }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;Exported&lt;/strong&gt; from the &lt;code&gt;CommonModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It takes a string as input.&lt;/p&gt;

&lt;p&gt;Lets see in example. Lets add the below code in the component.ts file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;titleCasePipeDemoString = 'You will be master in Angular 
very soon!';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h2&amp;gt;TitleCase pipe&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;Without using pipe&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ titleCasePipeDemoString }}&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;With using the Titlecase pipe&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;{{ titleCasePipeDemoString | titlecase}}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will become -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xh3Vz1Gp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxuleukfsh0zzn15eidi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xh3Vz1Gp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxuleukfsh0zzn15eidi.PNG" alt="Image description" width="364" height="296"&gt;&lt;/a&gt;&lt;br&gt;
So here you can see every first letter of the word is capitalized.&lt;/p&gt;



&lt;p&gt;The last pipe...........&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UpperCasePipe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Its the opposite of &lt;code&gt;LowerCasePipe&lt;/code&gt;. Converts the string into uppercase. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value_expression | uppercase }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is &lt;strong&gt;Exported&lt;/strong&gt; from the &lt;code&gt;CommonModule&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It takes a string as input.&lt;/p&gt;

&lt;p&gt;Lets see in example. Lets add the below code in the component.ts file -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;uppsercasePipeDemo = 'john snow';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h2&amp;gt;UpperCase Pipe Demo&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;Without Pipe&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt; {{ uppsercasePipeDemo }}&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;With Pipe&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt; {{ uppsercasePipeDemo | uppercase }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will become -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4M-e48j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ckfif8g43nwy9al3xlm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4M-e48j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ckfif8g43nwy9al3xlm.PNG" alt="Image description" width="341" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It transforms the string we passed to uppercase.&lt;/p&gt;

&lt;p&gt;That's all my friend. You have done a great job covering all the pipes (few I left intentionally will cover very soon).&lt;br&gt;
Next coming up &lt;strong&gt;Creating custom pipe&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post.&lt;br&gt;
If yes do like comment and share. More Angular topics are on the way. Stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>tutorials</category>
      <category>beginners</category>
      <category>pipe</category>
    </item>
    <item>
      <title>References to Literals in Rust?!</title>
      <author>Evan Typanski</author>
      <pubDate>Sat, 08 Jan 2022 17:59:22 +0000</pubDate>
      <link>https://dev.to/evantypanski/references-to-literals-in-rust-4kol</link>
      <guid>https://dev.to/evantypanski/references-to-literals-in-rust-4kol</guid>
      <description>&lt;p&gt;One day messing around with Rust, I found that the following code is valid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's assigning a variable to a reference to the literal &lt;code&gt;0&lt;/code&gt; - how?! Why?! This absolutely shocked me. Just try doing this in C++ and you'll see why:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;lvalue&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nv"&gt;'int&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;temporary&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nv"&gt;'int&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="o"&gt;^&lt;/span&gt;   &lt;span class="o"&gt;~&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The literal is a temporary - you can't have a reference to that! String literals are lvalues in C++, but that's a weird special case. That's why you can assign it to a pointer like &lt;code&gt;const char *&lt;/code&gt;, but can't get a &lt;code&gt;const int *&lt;/code&gt; from an integer literal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-this-shocking"&gt;
  &lt;/a&gt;
  Why is this shocking?
&lt;/h2&gt;

&lt;p&gt;This may not seem that shocking to some. Literals are generally temporary and don't really live anywhere in memory - they're essentially hard coded constants in the program. A reference points to some place in memory. How do we point to something that doesn't live in memory? Well, we can't, and we don't!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rvalue-static-promotion"&gt;
  &lt;/a&gt;
  Rvalue Static Promotion
&lt;/h2&gt;

&lt;p&gt;This concept in Rust is called &lt;a href="https://rust-lang.github.io/rfcs/1414-rvalue_static_promotion.html"&gt;rvalue static promotion&lt;/a&gt;. We can look at each part to see what that means:&lt;/p&gt;

&lt;p&gt;Rvalue: Something that can only be on the right hand side of an assignment. For example, you can't do &lt;code&gt;1 = x&lt;/code&gt; because the literal &lt;code&gt;1&lt;/code&gt; is an rvalue.&lt;/p&gt;

&lt;p&gt;Static: Something that is valid for the whole lifetime of the program.&lt;/p&gt;

&lt;p&gt;So we promote the rvalue to a static value in order to take a reference to it. Looking at the program earlier, we can see this in action in &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2021&amp;amp;gist=9fe3d6deffc976b8394163f6008b9093"&gt;Rust's playground&lt;/a&gt;. We can see the MIR (one of the intermediate representations of Rust) is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;                      &lt;span class="c1"&gt;// return place in scope 0 at src/main.rs:1:11: 1:11&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                        &lt;span class="c1"&gt;// in scope 0 at src/main.rs:2:9: 2:10&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;// in scope 0 at src/main.rs:2:13: 2:15&lt;/span&gt;
    &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="c1"&gt;// in scope 1 at src/main.rs:2:9: 2:10&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;bb0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="nn"&gt;main&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;promoted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;    &lt;span class="c1"&gt;// scope 0 at src/main.rs:2:13: 2:15&lt;/span&gt;
                                         &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="n"&gt;_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                         &lt;span class="c1"&gt;// scope 0 at src/main.rs:2:13: 2:15&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                          &lt;span class="c1"&gt;// scope 0 at src/main.rs:3:2: 3:2&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;promoted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;_0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;// return place in scope 0 at src/main.rs:2:13: 2:15&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                     &lt;span class="c1"&gt;// in scope 0 at src/main.rs:2:14: 2:15&lt;/span&gt;

    &lt;span class="n"&gt;bb0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="mi"&gt;0_i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="c1"&gt;// scope 0 at src/main.rs:2:14: 2:15&lt;/span&gt;
        &lt;span class="n"&gt;_0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                        &lt;span class="c1"&gt;// scope 0 at src/main.rs:2:13: 2:15&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                          &lt;span class="c1"&gt;// scope 0 at src/main.rs:2:13: 2:15&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a little weird to look at if you've never seen MIR before, but the important part is the line &lt;code&gt;promoted[0] in main: &amp;amp;i32&lt;/code&gt; - that's where we see the promoted variable! Then in the main program we assign with &lt;code&gt;_2 = const main::promoted[0];&lt;/code&gt;. So we lift the literal out to a static lifetime in order to return a reference, pretty neat.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-did-they-do-this"&gt;
  &lt;/a&gt;
  Why did they do this?
&lt;/h3&gt;

&lt;p&gt;I find this the interesting part. We can see a lot of the motivation for this in the feature:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The necessary changes in the compiler did already get implemented as part of codegen optimizations (emitting references-to or memcopies-from values in static memory instead of embedding them in the code).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It seems like it was just an easy thing to implement, so they did it. Their drawback is pretty interesting:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One more feature with seemingly ad-hoc rules to complicate the language...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found this funny. Seems like they just thought "it's easy enough, could be useful, why not?" So, they added a new feature to the Rust language. So many languages get by without this, but the Rust devs said, why not?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-useful"&gt;
  &lt;/a&gt;
  It's useful!
&lt;/h3&gt;

&lt;p&gt;You can see this exact thing in action in Rust's source code! At the time of writing, you can see this &lt;a href="https://github.com/rust-lang/rust/blob/8b09ba6a5d5c644fe0f1c27c7f9c80b334241707/compiler/rustc_borrowck/src/nll.rs#L74"&gt;here&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="nf"&gt;dump_mir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infcx&lt;/span&gt;&lt;span class="py"&gt;.tcx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"renumber"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The fourth parameter is a reference to the literal &lt;code&gt;0&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Well, I don't know how useful you'd say it is. But, it's an interesting thing in a common compiler that not many languages have.&lt;/p&gt;

</description>
      <category>rust</category>
      <category>compilers</category>
    </item>
    <item>
      <title>How to build a CDN (2/3): server and reverse proxy configuration</title>
      <author>Ján Regeš</author>
      <pubDate>Sat, 08 Jan 2022 17:57:33 +0000</pubDate>
      <link>https://dev.to/janreges/how-to-build-a-cdn-23-server-and-reverse-proxy-configuration-16md</link>
      <guid>https://dev.to/janreges/how-to-build-a-cdn-23-server-and-reverse-proxy-configuration-16md</guid>
      <description>&lt;p&gt;In the previous article about &lt;a href="https://dev.to/janreges/how-to-build-a-cdn-1-3-introduction-and-basic-components-345o"&gt;basic CDN components&lt;/a&gt; we described what components you need to build a CDN, and today we will focus on the software configuration of the servers and the reverse proxy itself, which will cache the content to ensure that the data is always as close as possible to the end visitors.&lt;/p&gt;

&lt;p&gt;The primary goal of this article is not to give you specific values for each setting (although we will recommend some), but to tell you what to look for and what to watch out for. In fact, we also tune and optimize the specific values ourselves over time according to the traffic and the collected monitoring indications. It is therefore essential to understand the individual settings and adjust them with respect to your HW and expected traffic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#operating-system"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Operating system&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;At &lt;a href="https://www.siteone.cz/"&gt;SiteOne&lt;/a&gt; we have the vast majority of servers running on Linux — specifically Gentoo and Debian distributions. In the case of CDN, however, all our servers are running on Debian, so any detailed tips will include Debian paths/settings.&lt;/p&gt;

&lt;p&gt;In the area of OS and kernel, we recommend focusing on the following parameters, which will significantly affect how much traffic each server can handle without rejecting TCP connections or hitting other limits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configure &lt;em&gt;/etc/security/limits.conf&lt;/em&gt; — set significantly higher soft and hard limits especially for &lt;strong&gt;nproc&lt;/strong&gt; and &lt;strong&gt;nofile&lt;/strong&gt; for the &lt;strong&gt;nginx&lt;/strong&gt; process (tens to hundreds of thousands).&lt;/li&gt;
&lt;li&gt;Ideally, configure the &lt;strong&gt;kernel&lt;/strong&gt; via &lt;strong&gt;sysctl.conf&lt;/strong&gt; and focus on the parameters you see in the recommended configuration below. It’s a good idea to study each parameter, understand how it affects your operation, and set it accordingly.&lt;/li&gt;
&lt;li&gt;If you have kernel 4.9+ you can enable the &lt;a href="https://atoonk.medium.com/tcp-bbr-exploring-tcp-congestion-control-84c9c11dc3a9"&gt;TCP BBR algorithm&lt;/a&gt; to reduce RTT and increase the speed of content delivery. Parameters: &lt;em&gt;net.ipv4.tcp_congestion_control=bbr, net.core.default_qdisc=fq&lt;/em&gt; (more info in the article at &lt;a href="https://blog.cloudflare.com/http-2-prioritization-with-nginx/"&gt;Cloudflare&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Check the &lt;strong&gt;RX-DRP&lt;/strong&gt; value with netstat -i, and if the value is already in the millions after a couple of days and still increasing, increase the RX/TX buffers on the netstat. To find the current setting and max value, use &lt;em&gt;ethtool -g YOUR-IFACE&lt;/em&gt; and set the new value with &lt;em&gt;ethtool -G&lt;/em&gt;, so for example &lt;em&gt;ethtool -G ens192 rx 2048 tx 2048&lt;/em&gt;. To make the setting survive a reboot, call the command in post-up scripts in &lt;em&gt;/etc/network/interfaces&lt;/em&gt; or &lt;em&gt;/etc/rc.local&lt;/em&gt;. If you are modifying the network interface that connects you to the server, be careful, because the change will reboot the interface.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Txqueuelen&lt;/strong&gt; on network cards is recommended to be raised from the default 1000, depending on your connectivity and network card.&lt;/li&gt;
&lt;li&gt;Set the &lt;strong&gt;IO scheduler&lt;/strong&gt; on each disk/array depending on what storage you are using — &lt;em&gt;/sys/block/*/queue/scheduler&lt;/em&gt;. If you are using SSD or NVME, we recommend &lt;em&gt;none&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Iptables&lt;/strong&gt; or &lt;strong&gt;router&lt;/strong&gt; — it is recommended to set some hard limits on the number of simultaneous connections from one IP address and the number of connections per certain time. In case of a DoS attack, you can filter out a large part of the traffic effectively already at the network level. However, you should also set limits with respect to possible visitors behind NAT (multiple legitimate visitors behind one IP address is a typical situation e.g. with mobile operators or smaller local ISPs).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When setting individual parameters, consider what the typical traffic of a visitor who retrieves content from the CDN looks like. HTTP/2 is essential, as it usually only takes one TCP connection for a visitor to download all the content on the page. You can afford shorter TCP connection timeouts, keepalives, smaller buffers. The metrics you collect, such as: the number of TCP connections in each state, will tell you a lot in real traffic. If you want to handle tens of thousands of visitors in seconds or minutes, forget about the default values of various timeouts in minutes and test values in units to tens of seconds.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recommended-kernel-configuration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Recommended kernel configuration&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The values of each setting should be taken &lt;strong&gt;only as our recommendation&lt;/strong&gt;, which has been proven to work well for a server with 4–8 GB RAM, 4–8 vCPUs and Intel X540-AT2 or Intel I350 network cards. Some directives have values an order of magnitude higher or lower than the distributions default. These are usually modifications to increase the ability to handle heavy traffic efficiently and minimize the impact of a DoS or DDoS attack. It is also important to note that the configuration is for a server with IPv6 support disabled. If your situation allows it, use IPv6 too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fs.aio-max-nr = 524288  
fs.file-max = 611160  
kernel.msgmax = 131072  
kernel.msgmnb = 131072  
kernel. panic = 15  
kernel.pid_max = 65536  
kernel.printk = 4 4 1 7  
net.core.default_qdisc = fq  
net.core.netdev_max_backlog = 262144  
net.core.optmem_max = 16777216  
net.core.rmem_max = 16777216  
net.core.somaxconn = 65535  
net.core.wmem_max = 16777216  
net.ipv4.conf.all.accept_redirects = 0  
net.ipv4.conf.all.log_martians = 1  
net.ipv4.conf.all.rp_filter = 1  
net.ipv4.conf.all.secure_redirects = 0  
net.ipv4.conf.all.send_redirects = 0  
net.ipv4.conf.default.accept_redirects = 0  
net.ipv4.conf.default.accept_source_route = 0  
net.ipv4.conf.default.rp_filter = 1  
net.ipv4.conf.default.secure_redirects = 0  
net.ipv4.conf.default.send_redirects = 0  
net.ipv4.ip_forward = 0  
net.ipv4.ip_local_port_range = 1024 65535  
net.ipv4.tcp_congestion_control = bbr  
net.ipv4.tcp_fin_timeout = 10  
net.ipv4.tcp_keepalive_intvl = 10  
net.ipv4.tcp_keepalive_probes = 5  
net.ipv4.tcp_keepalive_time = 60  
net.ipv4.tcp_low_latency = 1  
net.ipv4.tcp_max_orphans = 10000  
net.ipv4.tcp_max_syn_backlog = 65000  
net.ipv4.tcp_max_tw_buckets = 1440000  
net.ipv4.tcp_moderate_rcvbuf = 1  
net.ipv4.tcp_no_metrics_save = 1  
net.ipv4.tcp_notsent_lowat = 16384  
net.ipv4.tcp_rfc1337 = 1  
net.ipv4.tcp_rmem = 4096 87380 16777216  
net.ipv4.tcp_sack = 0  
net.ipv4.tcp_slow_start_after_idle = 0  
net.ipv4.tcp_synack_retries = 2  
net.ipv4.tcp_syncookies = 1  
net.ipv4.tcp_syn_retries = 2  
net.ipv4.tcp_timestamps = 0  
net.ipv4.tcp_tw_reuse = 1  
net.ipv4.tcp_window_scaling = 0  
net.ipv4.tcp_wmem = 4096 65536 16777216  
net.ipv6.conf.all.disable_ipv6 = 1  
net.ipv6.conf.default.disable_ipv6 = 1  
net.ipv6.conf.lo.disable_ipv6 = 1  
vm.dirty_background_ratio = 2  
vm.dirty_ratio = 60  
vm.max_map_count = 262144  
vm.overcommit_memory = 1  
vm.swappiness = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#reverse-proxy-and-cache"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reverse proxy and cache&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;On all PoP servers, you need a critical CDN component — a reverse proxy with robust caching support. Most popular are &lt;strong&gt;Varnish&lt;/strong&gt;, &lt;strong&gt;Squid&lt;/strong&gt;, &lt;strong&gt;Nginx&lt;/strong&gt;, &lt;strong&gt;Traefik&lt;/strong&gt;, &lt;strong&gt;H2O&lt;/strong&gt; and with limited functionality e.g. &lt;strong&gt;HAProxy&lt;/strong&gt;. &lt;strong&gt;Tengine&lt;/strong&gt; is also worth considering, built on Nginx and adding a lot of interesting functionality.&lt;/p&gt;

&lt;p&gt;In the context of a CDN, the functionality of the reverse proxy is quite clear — based on the URL and request headers, find the content in the cache and if it is not there, or has expired, download it from the Origin server and store it in the cache so that the next visitor’s request is processed faster, from the cache on the PoP.&lt;/p&gt;

&lt;p&gt;We finally chose &lt;a href="https://www.nginx.org/"&gt;Nginx web server&lt;/a&gt; because we have been using it successfully on most of our servers for many years. We have all the configurations and different vhost variants as well as optimal functional, performance and security settings in Ansible. As for the specific version, we recommend the latest &lt;strong&gt;1.19.x&lt;/strong&gt;, which already includes the improved HTTP/2 implementation, along with OpenSSL 1.1.1 due to TLSv1.3.&lt;/p&gt;

&lt;p&gt;Compared to our normal default values for application servers, we have significantly reduced various buffers, timeouts, and thresholds for CDNs, as well as for the kernel. Our CDN is optimized for static content and for handling only GET/HEAD/OPTIONS requests. Since we don’t have to support POST or uploads anymore, we could tighten the parameters significantly, both on the client side and on the backend (requests to source origin servers).&lt;/p&gt;

&lt;p&gt;The following text assumes that you already have at least basic experience with Nginx — that’s why there are no specific configuration snippets, but rather various recommendations beyond basic usage that you won’t usually find in Nginx tutorials and have a significant impact on CDN operation.&lt;/p&gt;

&lt;p&gt;Cache is a key functionality of a CDN, so we recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out &lt;a href="https://www.nginx.com/blog/nginx-high-performance-caching/"&gt;the High-Performance Caching guide&lt;/a&gt;. For proxy cache, carefully study and understand all &lt;em&gt;proxy_cache*_&lt;/em&gt; directives and their parameters. Start with &lt;strong&gt;proxy_cache_path&lt;/strong&gt; and the &lt;em&gt;levels&lt;/em&gt;, &lt;em&gt;key_zone&lt;/em&gt;, _inactive_or &lt;em&gt;max_size&lt;/em&gt; attributes. For remote secondary PoPs, you can have &lt;em&gt;inactive for&lt;/em&gt; weeks or months, for example — the cache manager will also keep content that hasn’t been accessed for longer, thus increasing the accelerating effect of CDN and cache hit-ratio even for PoPs from which the content of specific URLs is not downloaded as often.&lt;/li&gt;
&lt;li&gt;Optimally set the &lt;strong&gt;proxy_cache_valid&lt;/strong&gt; directive, which affects how long the HTTP codes are cached. If you decide to cache error codes, e.g. &lt;em&gt;400 Bad Request&lt;/em&gt;, then only cache them for a very short period of time to minimize the effects of possible “cache poisoning”.&lt;/li&gt;
&lt;li&gt;If you don’t want an original to consider its “cache control” through response headers when caching, you can use &lt;strong&gt;proxy_ignore_headers&lt;/strong&gt; and ignore typically &lt;em&gt;Cache-Control&lt;/em&gt;, _Expires_ or &lt;em&gt;Vary&lt;/em&gt; headers.&lt;/li&gt;
&lt;li&gt;Also pay attention to the &lt;strong&gt;proxy_cache_use_stale,&lt;/strong&gt; which affects how the cache behaves if the origin is unavailable. We decided that if by chance the original is down and the cache has expired, we will return the original content to the visitor anyway. This will encourage high availability. Also set up &lt;em&gt;updating&lt;/em&gt; to load the visitor’s content immediately from the cache after expiration (without waiting for the original), but update the content immediately from the original in the background for future visitors. This eliminates the effect of occasional slowdowns, where once in a while a visitor “gets carried away” by the need to update the expired content of a given URL in the CDN.&lt;/li&gt;
&lt;li&gt;Decide what to set in the &lt;strong&gt;proxy_cache_key&lt;/strong&gt;. For example, do you want to include a possible query string in the cache key, which is often used to “version” files and suppress the cache of the original version of the file?&lt;/li&gt;
&lt;li&gt;Activate &lt;strong&gt;proxy_cache_lock&lt;/strong&gt; to keep the cache filling/keeping optimal even with high parallelization and decide how to set &lt;strong&gt;proxy_cache_min_uses&lt;/strong&gt; &lt;em&gt;.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, consider the following tips and settings that affect Nginx performance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your platform allows it, set up &lt;strong&gt;use epool&lt;/strong&gt;. If you have kernel 4.5+, it will use &lt;a href="https://sudonull.com/post/14030-The-whole-truth-about-linux-epoll#epollexclusive"&gt;EPOLLEXCLUSIVE&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;listen&lt;/strong&gt; directivity of the main node of your CDN (&lt;em&gt;cdn.company.com&lt;/em&gt;) use &lt;strong&gt;reuseport&lt;/strong&gt;, so that requests to individual Nginx workers are distributed by the kernel, it is &lt;a href="https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1/#Benchmarking-Performance-with-%3Ccode%3Ereuseport"&gt;many times more efficient&lt;/a&gt;. For the listen directive, study also the &lt;strong&gt;backlog&lt;/strong&gt; and &lt;strong&gt;fastopen&lt;/strong&gt; parameters. You can also activate &lt;strong&gt;deferred&lt;/strong&gt;, so that the request reaches Nginx only when the client actually receives the first data, which can better address some types of DDoS attacks.&lt;/li&gt;
&lt;li&gt;Activate &lt;strong&gt;http2&lt;/strong&gt; on the listen directive and always keep a secure set of &lt;strong&gt;ssl_ciphers&lt;/strong&gt; (with respect to the browser versions you want to support).&lt;/li&gt;
&lt;li&gt;If you can afford to do so given the browsers supported, only support &lt;strong&gt;TLSv1.2&lt;/strong&gt; and &lt;strong&gt;TLSv1.3&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The CDN server processor will be mostly loaded by gzip/brotli compression and SSL/TLS communication. Set &lt;strong&gt;ssl_session_cache&lt;/strong&gt; to minimize SSL/TLS handshakes. We recommend &lt;em&gt;shared&lt;/em&gt; so that the cache is shared between all workers. For example, a cache size of 50 MB, which will fit about 200,000 sessions in the cache. To minimize the number of SSL/TLS handshakes, you can increase the &lt;strong&gt;ssl_session_timeout&lt;/strong&gt;. If you don’t want to use SSL cache on the server, enable &lt;strong&gt;ssl_session_tickets&lt;/strong&gt; to keep the session cache active at least in the browser.&lt;/li&gt;
&lt;li&gt;For SSL settings, activate &lt;a href="https://blog.cloudflare.com/introducing-0-rtt/"&gt;0-RTT on TLSv1.3&lt;/a&gt; (&lt;em&gt;ssl_early_data on&lt;/em&gt;) to substantially reduce latency, but understand and consider &lt;a href="https://tools.ietf.org/html/rfc8470"&gt;Replay attack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you want to achieve minimal TTBF (at the expense of higher load when transferring large files), study and set reasonably low &lt;strong&gt;ssl_buffer_size&lt;/strong&gt; and &lt;strong&gt;http2_chunk_size&lt;/strong&gt;. Alternatively, deploy the Cloudflare patch to Nginx, which supports dynamic settings — just google the &lt;strong&gt;ssl_dyn_rec_size_lo&lt;/strong&gt; directive.&lt;/li&gt;
&lt;li&gt;Also focus on understanding and setting up &lt;strong&gt;KeepAlive&lt;/strong&gt; both on the client side and in the upstreams — this will help streamline communication with the origin servers. KeepAlive HTTP/2 is governed by the &lt;strong&gt;http2_idle_timeout&lt;/strong&gt; directive (default: 3min), also look at &lt;strong&gt;http2_recv_timeout&lt;/strong&gt;. Keeping connections open unnecessarily long significantly reduces the number of visitors you are then able to serve. It also affects how large a DDoS attack you are then able to withstand. It’s good to have an understanding of how connection-tracking works (both on Linux and possibly on routers when the server is behind NAT), how it relates to the limit_conn setting, and how it behaves as a whole if you have hundreds of thousands of clients accessing your servers or are under a DDoS attack on L7.&lt;/li&gt;
&lt;li&gt;If you need to detect a change in the IP address of the original and you don’t have a paid &lt;em&gt;Nginx Plus&lt;/em&gt; with the &lt;em&gt;resolve&lt;/em&gt; attribute on the upstream server, you can just use &lt;code&gt;proxy_pass: https://www.myorigin.com;&lt;/code&gt; instead of defining an upstream. In this mode, &lt;em&gt;proxy_pass monitors&lt;/em&gt; the TTL in the domain DNS and updates the IP address(es) if necessary.&lt;/li&gt;
&lt;li&gt;Also study the &lt;strong&gt;lingering_close&lt;/strong&gt;, &lt;strong&gt;lingering_time&lt;/strong&gt;, and &lt;strong&gt;lingering_timeout&lt;/strong&gt; directives, which determine how quickly inactive connections should be closed. For better resistance to attacks, it makes sense to reduce the default times. For HTTP/2 connections, however, lingering_* directives have only been applied since Nginx 1.19.1.&lt;/li&gt;
&lt;li&gt;Increase &lt;strong&gt;ULIMIT&lt;/strong&gt; in &lt;em&gt;/etc/default/nginx&lt;/em&gt; and also set a higher &lt;strong&gt;LimitNOFILE&lt;/strong&gt; in &lt;em&gt;/etc/systemd/system/nginx.service.d/nginx.conf&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The sendfile&lt;/strong&gt;, &lt;strong&gt;tcp_nopush&lt;/strong&gt; and &lt;strong&gt;tcp_nodelay&lt;/strong&gt; also help to handle files and requests quickly. To prevent clients with fast connections downloading large files from using up the entire worker process, set &lt;strong&gt;sendfile_max_chunk&lt;/strong&gt; sensibly as well.&lt;/li&gt;
&lt;li&gt;If you are handling very large files and are seeing slowdowns in other requests, consider using &lt;strong&gt;aio&lt;/strong&gt;. Be sure to set the &lt;strong&gt;directio&lt;/strong&gt; directive appropriately, which defines the max size of the file that will still be sent via sendfile and larger ones via aio. We find 4MB to be the optimal value, so all JS/CSS/fonts and most images are handled through the sendfile and usually from the FS cache, so no IO does this either.&lt;/li&gt;
&lt;li&gt;Also look at the directives around &lt;strong&gt;open_file_cache&lt;/strong&gt;. With optimal settings and enough RAM you will have almost zero IOPS, even if you are clearing hundreds of Mbps.&lt;/li&gt;
&lt;li&gt;To handle high numbers of concurrent visitors and protect yourself from attacks, reduce &lt;strong&gt;client_max_body_size&lt;/strong&gt;, &lt;strong&gt;client_header_timeout&lt;/strong&gt;, &lt;strong&gt;client_body_timeout&lt;/strong&gt;, and &lt;strong&gt;send_timeout&lt;/strong&gt; as a matter of principle.&lt;/li&gt;
&lt;li&gt;For access log settings, study the &lt;strong&gt;buffer&lt;/strong&gt; and &lt;strong&gt;flush&lt;/strong&gt; parameters to minimize the IOPS associated with writing logs. Beware that this will also cause the logs to not be written 100% chronologically. Access logs should ideally be stored on a different disk than the cached data.&lt;/li&gt;
&lt;li&gt;For upstreams, you can play with load balancing (if the original can be accessed via multiple IP addresses) and &lt;strong&gt;backup weighting&lt;/strong&gt; attributes. In the current version, the useful &lt;strong&gt;max_conns&lt;/strong&gt; attribute, which was for a long time only in the paid version, is now freely available.&lt;/li&gt;
&lt;li&gt;If you also want to have some form of &lt;strong&gt;auto-retry&lt;/strong&gt; logic (for case of short unavailability of the origin), you can solve it for example by using multiple upstream-servers to the same original, but in between them put a vhost with short Lua code that will provide sleep between retry requests.&lt;/li&gt;
&lt;li&gt;Use a custom &lt;strong&gt;resolver&lt;/strong&gt; setup and consider using the local &lt;em&gt;dnsmasq&lt;/em&gt; as the primary resolver.&lt;/li&gt;
&lt;li&gt;Learn how the Cache Manager works in Nginx, which starts working especially when the cache gets full.&lt;/li&gt;
&lt;li&gt;Not everything can be mentioned here, but other attributes have an impact on proxy and cache behavior, which we recommend to study and set as well: &lt;em&gt;proxy_buffering, proxy_buffer_size, proxy_buffers, proxy_read_timeout, output_buffers, reset_timedout_connection&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If you will be using dynamic modules with Nginx (in our case for brotli compression and WAF), with every Nginx upgrade you have to &lt;strong&gt;recompile all modules&lt;/strong&gt; against the new Nginx version. If you don’t do this, Nginx won’t boot after the upgrade due to &lt;em&gt;signature&lt;/em&gt; conflicts with *.so modules. It is therefore better to automate the whole process of upgrading Nginx, because you will end up with a broken Nginx when you upgrade e.g. apt. Part of this automation should include using the option to do &lt;a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/#upgrading-to-a-new-binary-on-the-fly"&gt;Nginx upgrade on-the-fly&lt;/a&gt; where Nginx continues to run the old instance (from memory) and at the same time runs (or at least tries to) the new instance from the current binary and modules. This will ensure that you don’t lose a single request during the upgrade, even if the new Nginx doesn’t run after the upgrade for some reason. This whole process is in most distributions in init scripts under the &lt;em&gt;upgrade&lt;/em&gt; action, i.e. &lt;em&gt;service nginx upgrade&lt;/em&gt;. To prevent unwanted Nginx upgrades when upgrading packages globally, use &lt;em&gt;apt-mark hold/unhold nginx&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on what content and behavior of the originals you want to support, you will need to study and possibly debug the behavior of the CDN cache with respect to the &lt;em&gt;Cache-Control&lt;/em&gt; header or, perhaps quite fundamentally, the &lt;em&gt;Vary&lt;/em&gt; header. For example, if the origin says in the response &lt;em&gt;Vary: User-Agent&lt;/em&gt;, the cache key should include the user-agent of the client, otherwise it can easily happen that you return cached HTML for the mobile version to someone on the desktop. But that depends on what scenarios and content types you want/do not want to support. Supporting these scenarios often means a lot of work, and it also reduces the efficiency of the cache. Usually you won’t be able to get by with native Nginx directives and will have to handle some scenarios with Lua scripts.&lt;/p&gt;

&lt;p&gt;Finally, I’ll mention that in the case of Nginx you also have a paid version &lt;a href="https://www.nginx.com/products/nginx/"&gt;Nginx Plus&lt;/a&gt; which offers various useful functionalities, a live dashboard and extra modules. Important is for example the &lt;em&gt;resolve&lt;/em&gt; directive of the upstream server, which in conjunction with the &lt;em&gt;resolver&lt;/em&gt; directive can detect a change in the IP address of the origin. However, the cost per instance is in the thousands of dollars per year, so its use would only make sense for a large commercial solution. If you don’t have thousands of dollars and would still like to have a realtime view of Nginx traffic, we recommend buying the $49 &lt;a href="https://luameter.com/"&gt;Luameter&lt;/a&gt; (&lt;a href="https://luameter.com/demo"&gt;demo&lt;/a&gt;). It works well, but if you’ll be handling hundreds of requests per second and a lot of unique URLs, expect increased load and RAM requirements. We have it disabled by default and only activate it when debugging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sample-nginx-configuration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Sample Nginx configuration&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Below we have prepared a sample average basic configuration of Nginx, which in this model example does not do a reverse proxy in front of the whole domain, but provides a CDN endpoint &lt;code&gt;https://cdn.company.com/myorigin.com/*.(css|js|jpg|jpeg|png|gif|ico)&lt;/code&gt; that retrieves content from the origin &lt;code&gt;https://www.myorigin.com/*&lt;/code&gt;. Averaged because we further modify some directives due to the HW of individual PoP servers, and it also doesn’t include some additional security mechanisms that we don’t want to expose. On the servers this configuration is of course split into separate configuration files, which in our case we generate via Ansible.&lt;/p&gt;

&lt;p&gt;The settings are especially different at the definition level for individual locations/origins, because you may want differently composed cache-keys, cache validity, limits, ignore cookies, have/not WebP or AVIF support, referer validation, active CORS-related settings, or maybe use a slice module, where you have to cache the 206 code and the cache key must also contain &lt;em&gt;$slice_range&lt;/em&gt;. Similarly, for some origins you may want to ignore &lt;em&gt;Cache-Control&lt;/em&gt; headers entirely and cache everything at a fixed time, or other per-origin specialties.&lt;/p&gt;

&lt;p&gt;The configuration also contains various per-origin directories or files — these must of course be set up by your automation, which you are using to introduce the new origin into your CDN. &lt;strong&gt;So really just take this as a guide on how to grab and set up the various functionalities.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;worker_processes 4;
worker_rlimit_nofile 100000;
pcre_jit on;

events {
  use epoll;
  worker_connections 16000;
  multi_accept on;
}

http {

  # IP whitelist to which no conn/rate restrictions should be applied
  geo $ip_whitelist {
    default        0;
    127.0.0.1      1;
    10.225.1.0/24  1;
  }
  map $ip_whitelist $limited_ip {
    0  $binary_remote_addr;
    1  "";
  }

  limit_conn_zone $limited_ip zone=connsPerIP:20m;
  limit_conn connsPerIP 30;
  limit_conn_status 429;

  limit_req_zone $limited_ip zone=reqsPerMinutePerIP:50m rate=500r/m;
  limit_req zone=reqsPerMinutePerIP burst=700 nodelay;
  limit_req_status 429;

  client_max_body_size 64k;
  client_header_timeout 10s;
  client_body_timeout 10s;
  client_body_buffer_size 16k;
  client_header_buffer_size 4k;

  send_timeout 10s;
  connection_pool_size 512;
  large_client_header_buffers 8 16k;
  request_pool_size 4k;

  http2_idle_timeout 60s;
  http2_recv_timeout 10s;
  http2_chunk_size 16k;

  server_tokens off;
  more_set_headers "Server: My-CDN";

  include /etc/nginx/mime.types;
  variables_hash_bucket_size 128;
  map_hash_bucket_size 256;

  gzip on;
  gzip_static on; # searches for the *.gz file and returns it directly from disk (compression is provided by our extra process in the background)
  gzip_disable "msie6";
  gzip_min_length 4096;
  gzip_buffers 16 64k;
  gzip_vary on;
  gzip_proxied any;
  gzip_types image/svg+xml text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript text/x-component font/truetype font/opentype image/x-icon;
  gzip_comp_level 4;

  brotli on;
  brotli_static on; # searches for the *.br file and returns it directly from the disk (compression is provided by our extra process in the background)
  brotli_types text/plain text/css application/javascript application/json image/svg+xml application/xml+rss;
  brotli_comp_level 6;

  output_buffers 1 32k;
  postpone_output 1460;

  sendfile on;
  sendfile_max_chunk 1m;
  tcp_nopush on;
  tcp_nodelay on;

  keepalive_timeout 10 10;
  ignore_invalid_headers on;
  reset_timedout_connection on;

  open_file_cache          max=50000 inactive=30s;
  open_file_cache_valid    10s;
  open_file_cache_min_uses 2;
  open_file_cache_errors   on;

  proxy_buffering           on;
  proxy_buffer_size         16k;
  proxy_buffers             64 16k;
  proxy_temp_path           /var/lib/nginx/proxy;
  proxy_cache_min_uses      2;

  proxy_ignore_client_abort on;
  proxy_intercept_errors    on;
  proxy_next_upstream       error timeout invalid_header http_500 http_502 http_503 http_504;
  proxy_redirect            off;
  proxy_connect_timeout     60;
  proxy_send_timeout        180;
  proxy_cache_lock          on;
  proxy_read_timeout        10s;

  # setting up trusted IP subnets to respect X-Forwarded-For header (for multi-level proxy setup)
  set_real_ip_from          127.0.0.1/32;
  set_real_ip_from          10.1.2.0/24;
  real_ip_header            X-Forwarded-For;
  real_ip_recursive         on;

  ############################################################################
  ## Example configuration for:                                             ##
  ## https://cdn.mycompany.com/myorigin.com/* -&amp;gt; https://www.myorigin.com/* ##
  ############################################################################

  upstream up_www_myorigin_com {
    server www.myorigin.com:443 max_conns=50;

    keepalive 20;
    keepalive_requests 50;
    keepalive_timeout 5s;
  }

  proxy_cache_path /var/lib/nginx/tmp/proxy/www.myorigin.com levels=1:2 keys_zone=cache_www_myorigin_com:20m inactive=720h max_size=10g;

  server {

    server_name cdn.company.com;

    listen lan-ip:443 ssl default_server http2 reuseport deferred backlog=32768;
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
    ssl_certificate /etc/nginx/ssl/cdn.company.com.nginx-bundle.crt;
    ssl_certificate_key /etc/nginx/ssl/cdn.company.com.key;
    ssl_session_cache shared:SSL_cdn_company_com:50m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_dhparam /etc/ssl/webserver_dhparams.pem;
    ssl_early_data on;

    lingering_close on;
    lingering_time 10s;
    lingering_timeout 5s;

    resolver 127.0.0.1; # dnsmasq with logging to get an idea of the DNS traffic that Nginx is doing

    ...

    location ~* ^/myorigin\.com/(.+\.(css|js|jpg|jpeg|png|gif|ico))$ {
      set $origin_uri "/$1$is_args$args";
      root /var/www/myorigin.com;
      access_log  /var/log/nginx/www.myorigin.com/ssl.access.log main buffer=4k flush=5m;
      error_log   /var/log/nginx/www.myorigin.com/ssl.error.log notice;

      if ($request_method !~ ^(GET|HEAD|OPTIONS)$ ) {
        more_set_headers "Content-Type: application/json";
        return 405 '{"code": 405, "message": "Method Not Allowed"}';
      }

      more_clear_headers "Strict-Transport-Security";
      more_set_headers "Strict-Transport-Security: max-age=31536000";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers 'Link: &amp;lt;https://www.myorigin.com$origin_uri&amp;gt;; rel="canonical"';

      expires 1y; # enforce caching in browsers for 1 year (use only consciously, if you are sure that when you change the content of the file on the original, the URL will also change)

      modsecurity on;
      modsecurity_rules_file /etc/nginx/modsecurity/myorigin.com.conf;

      # for requests that fall under CORS (e.g. fonts) we allow to load content only from selected domains
      set $headerCorsAllowOrigin "";
      if ($http_origin ~ '^https?://(localhost|cdn\.company\.com|www\.myorigin\.com)') {
          set $headerCorsAllowOrigin "$http_origin";
      }
      if ($request_method = 'OPTIONS') {
          more_set_headers "Access-Control-Allow-Origin: $headerCorsAllowOrigin";
          more_set_headers "Access-Control-Allow-Methods: GET, HEAD, OPTIONS";
          more_set_headers "Access-Control-Max-Age: 3600";
          more_set_headers "Content-Length: 0";
          return 204;
      }

      # we allow to load content only from the original domain (e.g. it prevents displaying our images on foreign domains)
      valid_referers none blocked server_names *.myorigin.com;
      if ($invalid_referer) {
          more_set_headers "Content-Type: application/json";
          return 403 '{"code": 403, "message": "Forbidden Resource - invalid referer"}';
      }

      set $webp "";
      set $file_for_webp "";
      if ($http_accept ~* webp) {
          set $webp "A";
      }
      if ($request_filename ~ (.+\.(png|jpe?g))$) {
          set $file_for_webp $1;
      }
      if (-f $file_for_webp.webp) {
          set $webp "${webp}E";
      }
      if ($webp = AE) {
          rewrite ^/(.+)$ /webp/$1 last;
      }

      proxy_cache cache_www_myorigin_com;
      proxy_cache_key "$request_uri"; # we don't need a schema or a host, because we store in per-origin cache and support only HTTPS
      proxy_cache_use_stale error timeout invalid_header updating http_429 http_500 http_502 http_503 http_504;
      proxy_read_timeout 20s;
      proxy_cache_valid 200              720h;
      proxy_cache_valid 301              4h;
      proxy_cache_valid 302              1h;
      proxy_cache_valid 400 401 403 404  30s;
      proxy_cache_valid 500 501 502 503  30s;
      proxy_cache_valid 429              10s;


      # due to keep-alive on origins
      proxy_http_version 1.1;
      proxy_set_header Connection "";

      proxy_set_header "Via" "My-CDN";
      proxy_set_header "Early-Data" $ssl_early_data; # for the ability to detect Replay attack on the application level
      proxy_set_header Accept-Encoding ""; # we always want to receive and cache RAW content from the origin, because we have a process for preparing static *.gz and *.br versions

      proxy_set_header        Host                    www.myorigin.com;
      proxy_set_header        X-Forwarded-For         $remote_addr;
      proxy_set_header        X-Forwarded-Host        $host:$server_port;
      proxy_set_header        X-Forwarded-Server      $host;
      proxy_set_header        X-Forwarded-Proto       $scheme;

      if (-f $request_filename) {
          more_set_headers "X-Cache: HIT";
      }

      if (!-f $request_filename) {
          proxy_pass https://up_www_myorigin_com$origin_uri;
      }

    }

    # internal location for webp
    location ~* ^/webp(/myorigin\.com/(.*))$ {
      internal;
      root /var/www/myorigin.com;
      set $origin_uri "/$1$is_args$args";
      access_log /var/log/nginx/www.myorigin.com/ssl.access.webp.log main buffer=4k flush=5m;
      expires 366d;
      more_set_headers 'Link: &amp;lt;https://www.myorigin.com$origin_uri&amp;gt;; rel="canonical"';
      more_clear_headers 'Vary';
      more_set_headers "Vary: Accept";
      more_set_headers "X-Cache: HIT";
      try_files $1.webp $1 =404;
    }

  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#static-compression-as-an-essential-helper"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Static compression as an essential helper&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;We did a random test of two commercial CDNs that have servers in Prague and neither provider is obviously using this great functionality/option. The commercial CDNs have to compress content using brotli or gzip on every request, which drastically drains their CPU and increases the response time several times, but the visitor pays for it.&lt;/p&gt;

&lt;p&gt;We tested how long it takes our CDN and a commercial CDN to transfer eight javascript files (from 1 to 500 kB) in HTTP/2 stream — our CDN did it in 45 ms, commercial CDN in 170 to 200 ms. Moreover, even when using brotli compression, the files were 14% larger because we use the maximum compression level. We tested normally in Chrome and we got 1 ms latency to both CDNs because we and their PoPs are in Prague.&lt;/p&gt;

&lt;p&gt;So how to solve the compression? In Nginx, you can enable static compression for both gzip and brotli (&lt;strong&gt;gzip_static on&lt;/strong&gt;; &lt;strong&gt;brotli_static on;&lt;/strong&gt; ). This, if understood and implemented correctly, can &lt;strong&gt;reduce the CPU load&lt;/strong&gt; quite substantially and at the same time &lt;strong&gt;speed up the visitor’s loading time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The way it works is that when static compression is active and the browser requests e.g. /js/file.js, Nginx looks at the disk to see if there is already a pre-compressed file /js/file.js.gz or /js/file.js. br. If such a file exists, it will send it straight away (without bothering the CPU with compression). The type of compression the browser supports is sent in the &lt;em&gt;Accept-Encoding&lt;/em&gt; header (&lt;em&gt;br&lt;/em&gt; takes precedence over &lt;em&gt;gzip&lt;/em&gt; if the browser supports it).&lt;/p&gt;

&lt;p&gt;Nginx &lt;strong&gt;does not create&lt;/strong&gt; &lt;em&gt;.br&lt;/em&gt; or &lt;em&gt;.gz&lt;/em&gt; files for you. Nor does it try to download these files from the originals. Frontend builds often create these &lt;em&gt;*.br&lt;/em&gt; or &lt;em&gt;*.gz&lt;/em&gt; files for their JS/CSS as part of the build, but they are simply not used here. You have to provide this yourself with your CDN. We’ve made a background process that continuously parses access logs and extracts “200 OK” requests for text files that don’t have their &lt;em&gt;*.br&lt;/em&gt; or &lt;em&gt;*. gz&lt;/em&gt; yet.&lt;/p&gt;

&lt;p&gt;Because this is a background process, you can afford to choose the &lt;strong&gt;highest&lt;/strong&gt;, &lt;strong&gt;most efficient&lt;/strong&gt;, but therefore &lt;strong&gt;slowest compression level&lt;/strong&gt; for compression. You’ll put a bit of strain on the CPU for once, but the reward will be an additional 5–15% lower transfer rate. In addition, the decompression speed in browsers is minimally affected (you can find benchmarks for this). Don’t forget to figure out how you will clean up the already expired &lt;em&gt;*.br&lt;/em&gt; or &lt;em&gt;*.gz after they&lt;/em&gt; expire. Also, how and if at all you will handle the situation when the query string contains e.g. &lt;em&gt;?v=1.0.5&lt;/em&gt; to force the download of a new version of the file.&lt;/p&gt;

&lt;p&gt;However you implement static compression, ensure that your files behave atomically during compression. In other words, store the final &lt;em&gt;*.br&lt;/em&gt; or &lt;em&gt;*.gz&lt;/em&gt; file next to it first, and only when the file is finally done, rename it to the destination location where Nginx expects it. You won’t have someone download a non-valid (only partial) file if a visitor hits the moment you compress.&lt;/p&gt;

&lt;p&gt;Since we usually cache content in the browser for months, such a visitor would have downloaded e.g. broken JS/CSS until the cache is cleared, which is very annoying. We all know how unprofessional it is when developers tell a client to clear their browser cache.&lt;/p&gt;

&lt;p&gt;Hint: If you don’t have a background process that will handle static compression for you, you should leave static compression disabled. This is because you will unnecessarily increase your IOPS when Nginx will look for &lt;em&gt;*.gz&lt;/em&gt; or &lt;em&gt;*.br&lt;/em&gt; variants.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#jpgpng-to-webpavif-conversion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;JPG/PNG to WebP/AVIF conversion&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;If you want to reduce image bitrates by 30% to 90% (depending on how much the source images are already optimized), you can arrange for smart image conversion to modern WebP or AVIF format.&lt;/p&gt;

&lt;p&gt;Be careful about the AVIF format though — while it is fully supported and well-functioning in Google Chrome, support in Firefox is still experimental and there it still exhibits various bugs described in &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1443863"&gt;this ticket&lt;/a&gt;, which will manifest themselves e.g. in not displaying some images. However, this experimental support is disabled by default, so Firefox does not send the &lt;em&gt;image/avif&lt;/em&gt; for the &lt;em&gt;Accept&lt;/em&gt; request header.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For inspiration, this is how we implemented WebP/AVIF support:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The background process analyzes the access logs and searches for the most frequently retrieved images with a defined minimum data size.&lt;/li&gt;
&lt;li&gt;Using converters &lt;a href="https://developers.google.com/speed/webp/docs/cwebp"&gt;&lt;strong&gt;cwebp&lt;/strong&gt;&lt;/a&gt; a &lt;a href="https://github.com/kornelski/cavif-rs"&gt;&lt;strong&gt;cavif&lt;/strong&gt;&lt;/a&gt; convert the source image, e.g. /images/source.jpg, to /images/source.jpg.webp (atomically, as in static compression).&lt;/li&gt;
&lt;li&gt;In Nginx we have logic that when &lt;em&gt;image/avif&lt;/em&gt; or &lt;em&gt;image/webp&lt;/em&gt; occurs in the &lt;em&gt;Accept&lt;/em&gt; header of the request, it tries to send the requested file with the extension &lt;em&gt;. avif&lt;/em&gt; or &lt;em&gt;. webp&lt;/em&gt;, if it exists on the disk. The solution can be based on a combination of &lt;strong&gt;maps&lt;/strong&gt; and &lt;strong&gt;try_files&lt;/strong&gt; or composing the contents of a variable and IFs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we have a real need for this, we may eventually centralise the process. That is, this process will not be done by each server separately, but will be managed by some central system that can select suitable images for optimization from the central logs, keeping statistics of real data savings by transfers, etc. This brings a certain degree of flexibility and the possibility to perform some operations in bulk. However, on the other hand, we like that the decentralization of these processes and the maximum autonomy of the individual PoPs minimizes the risk that some bug will reach the whole CDN. Another advantage is that each PoP optimizes its most loaded content according to the visitors there.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#search-engines"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Search engines&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;It’s important to note that if you deploy a CDN and suddenly HTML images are loaded from another domain (unless you happen to use the CDN as a proxy for the entire site/domain), search engines will not index them as belonging to your domain, but to the CDN domain. Of course, you don’t want that.&lt;/p&gt;

&lt;p&gt;The solution is to provide canonicalization in Nginx using the HTTP &lt;strong&gt;Link&lt;/strong&gt; header, which tells the search engine where the actual source (origin) is. This way it will not index the image under the CDN domain, but under the source domain specified in the Link header. For optimal image indexing, we recommend that you also generate &lt;a href="https://support.google.com/webmasters/answer/178636"&gt;sitemap for images&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Example: the URL &lt;code&gt;https://cdn.company.com/myorigin.com/image.jpg&lt;/code&gt; should return the HTTP header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Link: https://www.myorigin.com/image.jpg; rel="canonical"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#using-cdn-in-projects"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Using CDN in projects&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The primary and preferred way of using our CDN is very simple and is also evident from the sample Nginx configuration.&lt;/p&gt;

&lt;p&gt;If we want to deploy a CDN for content e.g. on &lt;code&gt;www.myorigin.com&lt;/code&gt; the web developers just need to ensure that instead of &lt;code&gt;/js/script.js&lt;/code&gt;, for example, this file is addressed as &lt;code&gt;https://cdn.company.com/myorigin.com/js/scripts.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The base URL is our GeoCDN domain, followed by the domain of the original (without the “www”) and ending with the path to the file on the original.&lt;/p&gt;

&lt;p&gt;The CDN administrators control which origin domains our CDN supports through Ansible. In Ansible, administrators can also set some specific behavior for each origin. In addition, for each origin it is possible to specify what type of content is supported, restrict URL shapes, define custom WAF rules, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: if you want to deploy a CDN to your site without requiring a single intervention in the application code and you are using Nginx, you can very easily help yourself with the native Nginx &lt;a href="https://nginx.org/en/docs/http/ngx_http_sub_module.html"&gt;sub module&lt;/a&gt;. This allows you to easily replace the paths to selected files so that they are addressed from the CDN (typically in HTML or CSS).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sub_filter '&amp;lt;link href='/' '&amp;lt;link href='https://cdn.company.com/myorigin.com/';
sub_filter '&amp;lt;script src="/' '&amp;lt;script src="https://cdn.company.com/myorigin.com/";
sub_filter '&amp;lt;img src="/' '&amp;lt;img src="https://cdn.company.com/myorigin.com/";

sub_filter_types 'text/css' 'application/json' 'application/javascript'; # text/html is included automatically, but we also want to replace content in JSON API or CSS styles and JavaScripts
sub_filter_once off; # we want to replace all found occurrences
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example shows that it requires href/src as the first attribute of the HTML tag. Unfortunately, regular expressions are not supported by sub_filter. If this is not sufficient for you, you can solve this substitution in the application code. You’re probably using a templating system that usually forces you to use some form of base-path variable, so this should be a piece of cake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 1&lt;/strong&gt;: for content substitution to work, you must also set &lt;em&gt;proxy_set_header Accept-Encoding “”;&lt;/em&gt; , so that the original text content is uncompressed and strings can be substituted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2&lt;/strong&gt;: since the CDN is not deployed as a reverse proxy for the entire origin domain, the content loads faster in the browser. This is because the browser allows for more parallelization (HTML and assets are loaded from different IP addresses), so the resulting page build and render time is shorter. In reverse proxy mode, HTTP/2 multiplexing and prioritization helps a lot before full origin, but when the browser can load content from multiple different IP addresses, it is still a bit more efficient.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#security-protection-against-dosddos-attacks-and-monitoring"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Security, protection against DoS/DDoS attacks and monitoring&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With the help of the previous article on &lt;a href="https://dev.to/janreges/how-to-build-a-cdn-1-3-introduction-and-basic-components-345o"&gt;CDN components&lt;/a&gt; and this article, you should be able to get your CDN up and running with all the basic functionality.&lt;/p&gt;

&lt;p&gt;I hope that this article has helped you and that someone may have found some ideas or settings that will help them to improve their web or application server.&lt;/p&gt;

&lt;p&gt;If anyone has additional tips when looking at the proposed settings, or if they see any threats in our configuration, &lt;strong&gt;we would be happy to share them in the discussion&lt;/strong&gt;. We’ve been tweaking the settings ourselves for years, reflecting the different needs and attacks we’ve had on our projects, so it’s an ongoing and never-ending process. Additionally, simulating real traffic to verify the effect of some settings is very difficult, so every lived experience is welcomed and we will be grateful for sharing.&lt;/p&gt;

&lt;p&gt;In the next and last article of the &lt;em&gt;How to build a CDN&lt;/em&gt; series, we will focus on various operational aspects of CDN operation — how to protect the originals, how to defend against DoS/DDoS attacks and how to have the whole CDN operation under control.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and if you like the article, I will be happy if you share it or leave a comment. If you are a crypto fan and find this article helpful, you can send “Thank you” to one of these addresses. Thank you and I wish you good health and success in 2022. :-)&lt;/p&gt;

&lt;p&gt;Bitcoin: 3G7zFrSDhKiSNqhrX6of8GHgaLSAcuPjMo&lt;br&gt;
Ethereum: 0x317662608a11b5d408058a8832d328354e790cff&lt;br&gt;
Chia: xch1w29d50jj07trnxrjhvctvva8s4ff99pajhylzzlnaz8ntqna3zdqpw3tqy&lt;/p&gt;

</description>
      <category>devops</category>
      <category>webdev</category>
      <category>performance</category>
      <category>nginx</category>
    </item>
    <item>
      <title>Thoughts on find-in-page with custom accordion elements.</title>
      <author>Anurag Hazra</author>
      <pubDate>Sat, 08 Jan 2022 17:47:32 +0000</pubDate>
      <link>https://dev.to/anuraghazra/thoughts-on-find-in-page-with-custom-accordion-elements-5573</link>
      <guid>https://dev.to/anuraghazra/thoughts-on-find-in-page-with-custom-accordion-elements-5573</guid>
      <description>&lt;p&gt;Today while scrolling the twitter timelines I stumble upon this interesting tweet by one of the google chrome engineer who is working on a pretty interesting problem on the internet which is being able to de-collapse accordions when user triggers a find-in-page action. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOkcSTF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FIhTIRYVUAQqVpU.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoL13GYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1405265905106386945/H_KKNQ4u_normal.jpg" alt="Joey Arhar profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Joey Arhar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @josepharhar
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      My latest feature, auto-expanding details elements, has launched in stable Chrome 97! You can now use find-in-page to search the contents of closed details elements. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:48 PM - 07 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1479525286211248128" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1479525286211248128" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1479525286211248128" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;While as developers we sometimes miss these small details but after glancing over these problem you will realize how impactful these small things can be for better accessibility, discoverability &amp;amp; usability of a web app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h3&gt;

&lt;p&gt;The general problem is easy to understand,&lt;br&gt;&lt;br&gt;
Say you might want to search something on a page but you couldn't because the content which you are searching for is inside a collapsed accordion. &lt;/p&gt;

&lt;p&gt;I've built and seen many accordion components but each and every one of them lacked this feature, and there's a good reason for it which we will get into later.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#research-amp-implementation-on-the-userland"&gt;
  &lt;/a&gt;
  Research &amp;amp; implementation on the userland
&lt;/h3&gt;

&lt;p&gt;After trying out few of the well known component libraries like Radix, ChakraUI. &lt;br&gt;
I decided "well whatever, let's just implement this. How hard could it be?"&lt;/p&gt;

&lt;p&gt;Oh boi, I was in for a interesting ride of 50+ browser tabs searching for solution.&lt;/p&gt;

&lt;p&gt;So to implement this on userland, we need to do few things&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detect if user in find-in-page mode by detecting keypresses of CTRL+F&lt;/li&gt;
&lt;li&gt;Record the user's search keyword&lt;/li&gt;
&lt;li&gt;Match that keyword against all the accordion contents and de-collapse ones which matches the keyword.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty simple right? Well NO! &lt;/p&gt;

&lt;p&gt;Just even detecting if user is in find-in-page mode or the user closed the search modal is tricky.&lt;/p&gt;

&lt;p&gt;To properly detect the event, we have to record and save all the events which is happening in a &lt;code&gt;eventQueue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See, when user presses CTRL+F first thing what happens is window gets out of focus or in other words the blur event is triggered, With this we can detect if find-in-page modal is open if &lt;code&gt;CTRL+F&lt;/code&gt; event and &lt;code&gt;BLUR&lt;/code&gt; event happened subsequently. &lt;/p&gt;

&lt;p&gt;Let's look at the code quickly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usePageFind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isFinding&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsFinding&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventQueue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEventQueue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// detect CTRL+F if it passes then push to events queue.&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctrlKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setEventQueue&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CTRL+F&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blur&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// push blur event to queue&lt;/span&gt;
      &lt;span class="nx"&gt;setEventQueue&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BLUR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;focus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// push blur event to queue&lt;/span&gt;
      &lt;span class="nx"&gt;setEventQueue&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FOCUS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eventQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeSlice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eventQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// if eventQueue's last 2 elements are CTRL+F &amp;amp; BLUR then we know the find modal is open&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayCompare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;openSlice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CTRL+F&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BLUR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setIsFinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Finding open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// if eventQueue's last 3 elements are CTRL+F, BLUR &amp;amp; FOCUS then we know the find modal is closed&lt;/span&gt;
    &lt;span class="c1"&gt;// We are checking for FOCUS because if user closes the find modal the page will be refocused again.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arrayCompare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;closeSlice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CTRL+F&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BLUR&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FOCUS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setEventQueue&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
      &lt;span class="nx"&gt;setIsFinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Finding closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventQueue&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isFinding&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is not even a perfect solution mind you. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#retrieving-search-keyword"&gt;
  &lt;/a&gt;
  Retrieving search keyword
&lt;/h4&gt;

&lt;p&gt;But the real challenge here is detecting what user typed in the search field, because the window is blurred while user is searching we cannot hook into onKeyDown or any event handlers to know what user is typing. &lt;/p&gt;

&lt;p&gt;But there is a very very very hacky trick which we can use to detect this, which I found while researching about this topic. &lt;/p&gt;

&lt;p&gt;This article from Milan Laslop explained how the method works pretty well with implementation: &lt;br&gt;
&lt;a href="https://www.milanlaslop.dev/post/2020-01-11-javascript-detecting-what-the-user-searches-on-the-page/"&gt;https://www.milanlaslop.dev/post/2020-01-11-javascript-detecting-what-the-user-searches-on-the-page/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I just implemented this on our code and lets see what the final code looks like: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: THIS IS VERY VERY BUGGY, AND ONLY A POC. DO NOT TRY THIS AT HOME.&lt;br&gt;
Open this URL &lt;a href="https://u8rtx.csb.app"&gt;https://u8rtx.csb.app&lt;/a&gt; on a newtab for better experience&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/u8rtx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thoughts"&gt;
  &lt;/a&gt;
  Thoughts
&lt;/h2&gt;

&lt;p&gt;Now the above implementation which I created is not something I created to use in production nor it's a great solution, it's buggy, fragile, easy to break. &lt;/p&gt;

&lt;p&gt;I solely created the example to show you how nearly impossible it is to build this without proper platform APIs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-solutions"&gt;
  &lt;/a&gt;
  Better Solutions
&lt;/h3&gt;

&lt;p&gt;Next we will talk about possible naive solutions to this problem which you can use today &amp;amp; what new features are coming in HTML spec to improve &amp;amp; solve this problem. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution-1-decollapse-all-the-accordions-on-findinpage-trigger"&gt;
  &lt;/a&gt;
  Solution 1: De-collapse all the accordions on find-in-page trigger
&lt;/h4&gt;

&lt;p&gt;A simple yet elegant solution would be to de-collapsing all the accordions in the page when we detect find-in-page event with our previously discussed usePageFind hook. &lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/04ehr"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-2-use-the-platform"&gt;
  &lt;/a&gt;
  Solution 2: Use the platform
&lt;/h3&gt;

&lt;p&gt;As mentioned in the original tweet which &lt;code&gt;Joey Arhar&lt;/code&gt; is working on chrome 97 now supports auto expanding of the  elements which you can use. &lt;/p&gt;

&lt;p&gt;See live demo: &lt;a href="https://auto-expanding-details.glitch.me/#target"&gt;https://auto-expanding-details.glitch.me/#target&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#with-new-apis"&gt;
  &lt;/a&gt;
  With New APIs
&lt;/h4&gt;

&lt;p&gt;Along with  having built in support for this, since here we are talking about custom accordion elements we can also leverage new APIs which has been worked on namely: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;hidden=until-found&lt;/code&gt; HTML attribute &lt;/li&gt;
&lt;li&gt;and the &lt;code&gt;beforematch&lt;/code&gt; event&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two together will enable us to build custom accordions with the same capability of text search in collapsed items.&lt;/p&gt;

&lt;p&gt;Read &lt;a href="https://github.com/WICG/display-locking/blob/main/explainers/hidden-content-explainer.md"&gt;hidden content spec&lt;/a&gt; to know how it works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;And that concludes my today's research on this interesting problem, I hope you learned something along the way. &lt;/p&gt;

&lt;p&gt;It's amazing to see that browser are working on these type of features to improve the UX and the overall experience we have building websites which are generally more accessible. &lt;br&gt;
Hope to see more features like this to land. &lt;/p&gt;

&lt;p&gt;Without the new &lt;code&gt;hidden content&lt;/code&gt; feature it's nearly impossible to build something like this. &lt;/p&gt;

&lt;p&gt;Generally I would like to see all modern component libraries adopt these new platform patters to improve their components. &lt;/p&gt;

&lt;p&gt;Links &amp;amp; glosarry &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.milanlaslop.dev/post/2020-01-11-javascript-detecting-what-the-user-searches-on-the-page/"&gt;https://www.milanlaslop.dev/post/2020-01-11-javascript-detecting-what-the-user-searches-on-the-page/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/JosephArhar/status/1479525286211248128"&gt;https://twitter.com/JosephArhar/status/1479525286211248128&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WICG/display-locking/blob/main/explainers/hidden-content-explainer.md"&gt;https://github.com/WICG/display-locking/blob/main/explainers/hidden-content-explainer.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>a11y</category>
      <category>javascript</category>
      <category>browsers</category>
      <category>platform</category>
    </item>
    <item>
      <title>Digital Clock using Vue 3 Composition API</title>
      <author>Snehal </author>
      <pubDate>Sat, 08 Jan 2022 17:20:52 +0000</pubDate>
      <link>https://dev.to/snehalk/digital-clock-using-vue-3-composition-api-5cmc</link>
      <guid>https://dev.to/snehalk/digital-clock-using-vue-3-composition-api-5cmc</guid>
      <description>&lt;p&gt;Hello Readers,&lt;/p&gt;

&lt;p&gt;In this blog post we will see how can we create a digital clock using Vue 3 composition API. Composition API is a new feature added in Vue through which we can reuse the code in multiple vue component.&lt;/p&gt;

&lt;p&gt;For more details about how to use composition API you can refer my previous blog. I providing a link - go through it for basic information about it.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/snehalk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SVnsI9sy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iIApoEHT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/672647/bc92b576-94f5-4960-b01b-a3e9f62eec6b.png" alt="snehalk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/snehalk/what-is-composition-api-in-vue-3-157k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What is Composition API in Vue 3&lt;/h2&gt;
      &lt;h3&gt;Snehal  ・ Dec 23 '21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;So let's start with main topic.&lt;/p&gt;

&lt;p&gt;First we need to create a component named as &lt;code&gt;DigitalClock.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex h-screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w-full lg:w-1/4 m-auto p-7 shadow-lg shadow-pink-400 border-4 border-t-purple-600 border-r-pink-600 border-b-pink-600 border-l-indigo-600  bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-bold text-white text-lg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; --&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-bold text-white pt-3 text-6xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;font-bold text-white text-sm mb-1 flex justify-end mr-3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useCurrentTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../composables/useCurrentTime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CurrentTimeExample&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCurrentTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we are calling &lt;code&gt;useCurrentTime&lt;/code&gt; method from the &lt;code&gt;useCurrentTime.js&lt;/code&gt; file where we are going to write our main logic using composition api and from that we will call a currentTime and return its value to the component. &lt;/p&gt;

&lt;p&gt;To create a composition api's we will create a folder named as &lt;code&gt;composables&lt;/code&gt; where we keep/create all composition api's. &lt;/p&gt;

&lt;p&gt;As stated above create a folder named as &lt;code&gt;composables&lt;/code&gt; in &lt;code&gt;src&lt;/code&gt; folder and create js file as &lt;code&gt;useCurrentTime.js&lt;/code&gt;. (&lt;code&gt;src/composables/useCurrentTime.js&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onBeforeUnmount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useCurrentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateCurrentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTimeInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateCurrentTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;onBeforeUnmount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateTimeInterval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code we have created a const variable as currentTime which holds current Date and Time, and a method &lt;code&gt;updateCurrentTime&lt;/code&gt; to update the current time. There is an another method called as &lt;code&gt;updateTimeInterval&lt;/code&gt; which will update the time after given set of interval. &lt;br&gt;
You can see a hook called as &lt;code&gt;onBeforeUnmount()&lt;/code&gt; which will clear the currentTime when component is unmounted.&lt;br&gt;
And the last thing is we are returning the current time, so wherever we have used/called this useCurrenttTime.js we will have the value. &lt;/p&gt;

&lt;p&gt;In this way wherever we require the date n time we can reuse this code by simply importing it to the component.&lt;/p&gt;

&lt;p&gt;You can also refer live demo in sandbox.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/digital-clock-forked-m3mgm"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy Reading.. 🦄 🦁&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>vue</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Laravel Custom Login Validation with Ajax</title>
      <author>Adeyemi Adeshina </author>
      <pubDate>Sat, 08 Jan 2022 16:17:29 +0000</pubDate>
      <link>https://dev.to/iamadeyemiadex/laravel-custom-login-validation-with-ajax-3155</link>
      <guid>https://dev.to/iamadeyemiadex/laravel-custom-login-validation-with-ajax-3155</guid>
      <description>&lt;p&gt;Laravel is arguably the most used and popular PHP Framework for Web Artisans. &lt;/p&gt;

&lt;p&gt;Laravel has its own in-built functionality for Auth (User Registration and Login). If you think you feel satisfied with the in-built functionality, you can make use of it and your application will work well. But, if you want to go further to have your own custom Auth function, this article is for you. Let's get started!&lt;/p&gt;

&lt;p&gt;In this article, I will be showing you how you can write custom login form validation and authentication without reloading the browser. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 1: Create Users&lt;/strong&gt;&lt;br&gt;
I want to assume you already have users created in your users database table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2: Create Login Page&lt;/strong&gt;&lt;br&gt;
This our our short code for our login page view&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;div class="col-lg-4 col-md-4"&amp;gt;
   &amp;lt;form action="{{ route('login') }}" method="POST"  id="login_form" 
   class="request-form "&amp;gt;
    @csrf
   &amp;lt;h2&amp;gt;Login&amp;lt;/h2&amp;gt;
   &amp;lt;div id="show_error" style="color: red"&amp;gt; &amp;lt;/div&amp;gt;

   &amp;lt;div class="form-group mr-2"&amp;gt;
      &amp;lt;label for="" class="label"&amp;gt;Email&amp;lt;/label&amp;gt;
      &amp;lt;input type="email" name="email" class="form-control" &amp;gt;
      &amp;lt;span class="text-danger error-text email_error" 
       style="color: red"&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;/div&amp;gt;

   &amp;lt;div class="form-group mr-2"&amp;gt;
      &amp;lt;label for="" class="label"&amp;gt;Password&amp;lt;/label&amp;gt;
      &amp;lt;input type="password" name="password" class="form-control" 
      &amp;gt;
      &amp;lt;span class="text-danger error-text password_error" 
      style="color: red"&amp;gt;&amp;lt;/span&amp;gt;
   &amp;lt;/div&amp;gt;

   &amp;lt;div class="form-group"&amp;gt;
   &amp;lt;input type="submit" value="Login" class="btn  py-3 px-4" 
   style="background-color: #5f76e8; color:#ffffff"&amp;gt;
   &amp;lt;/div&amp;gt;
  &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
//add javascript with ajax here
&amp;lt;script src="[place you jquery source here...]"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
        $("#login_form").submit(function(e){
         e.preventDefault();

        var all = $(this).serialize();

        $.ajax({
            url:  $(this).attr('action'),
            type: "POST",
            data: all,
            beforeSend:function(){
                $(document).find('span.error-text').text('');
            },
            //validate form with ajax. This will be communicating 
              with your LoginController
            success: function(data){
                if (data.status==0) {
                    $.each(data.error, function(prefix, val){
                        $('span.'+prefix+'_error').text(val[0]);
                    });
                }
               // redirect the user to [another page] if the 
                   login cred are correct. Remember this is 
                   communicating with the LoginController which we 
                   are yet to create
                if(data == 1){
                    window.location.replace(
                     '{{route("dashboard.index")}}'
                    );
                }else if(data == 2){
                 // Show the user authentication error if the 
                   login cred are invalid. Remember this is 
                   communicating with the LoginController which we 
                   are yet to create
                    $("#show_error").hide().html("Invalid login 
                       details");
                }

            }
            })

        });


    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Login View Sample : login.blade.php&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTAccxXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhchi1ir12j46htftibf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTAccxXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lhchi1ir12j46htftibf.PNG" alt="Laravel Custom Login Page Validation with Ajax " width="533" height="299"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; You can customize this to your desire&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 3: Create LoginController&lt;/strong&gt;&lt;br&gt;
     &lt;em&gt;Open your command prompt  interface, cd to your project &lt;br&gt;
     directory and paste the below command there&lt;/em&gt;&lt;br&gt;
     &lt;code&gt;php artisan make:controller LoginController&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; namespace App\Http\Controllers;
 use Illuminate\Support\Facades\Auth;
 use Illuminate\Http\Request;
 use Illuminate\Support\Facades\Session;
 use Illuminate\Support\Facades\Validator;
   class LoginController extends Controller{
      public function login(Request $request){
        $validator = Validator::make($request-&amp;gt;all(), [
        'email' =&amp;gt;    'required',
        'password' =&amp;gt; 'required',
      ]);
       // validate all requests and it sends output to your 
          login.blade.php

       if(!$validator-&amp;gt;passes()){
          return response()-&amp;gt;json([
             'status'=&amp;gt;0, 
             'error'=&amp;gt;$validator-&amp;gt;errors()-&amp;gt;toArray()
          ]);
        }

       $user_cred = $request-&amp;gt;only('email', 'password');
        if (Auth::attempt($user_cred)) {

             //if user is logged in and the role is user
            if(Auth()-&amp;gt;user()-&amp;gt;role=='user'){  
               return response()-&amp;gt;json([ [1] ]);
            }  

        }else{
             //if user isn't logged in
                return response()-&amp;gt;json([ [2] ]);
        }
        return redirect("/");
     }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;STEP 4: Modify your route:web.php&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;add your controller to your web.php; as the case maybe&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Route::post('/login'[App\Http\Controllers\LoginController::class, 'login'])-&amp;gt;name('/login');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Hello friends, in this article we successfully created a login form with Laravel and AJAX without reloading the browser. I hope you enjoy it. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to design your Laravel models fast in 2022 with Fluidbm</title>
      <author>Franz Nkemaka</author>
      <pubDate>Sat, 08 Jan 2022 16:09:08 +0000</pubDate>
      <link>https://dev.to/franznkemaka/how-to-design-your-laravel-models-fast-in-2022-with-fluidbm-55ip</link>
      <guid>https://dev.to/franznkemaka/how-to-design-your-laravel-models-fast-in-2022-with-fluidbm-55ip</guid>
      <description>&lt;p&gt;In this tutorial, I will show you how to design your Laravel Models fast using Fluidbm.&lt;/p&gt;

&lt;p&gt;👨‍💻 ⚡ Fluidbm is a free Laravel schema designer that syncs your online model designs to your project using a cli. No download and copy-pasting files anymore. Just run "fluidbm pull" and the job is done.&lt;/p&gt;

&lt;p&gt;😊 Let's get started: &lt;br&gt;
This tutorial is splitted in two main parts: Designing the models and importing them to your Laravel project. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#design-models-with-fluidbm"&gt;
  &lt;/a&gt;
  🎨 Design models with Fluidbm
&lt;/h2&gt;

&lt;p&gt;Foremost, you need to signup or login on Fluidbm: &lt;a href="https://fluidbm.com"&gt;https://fluidbm.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Press on &lt;strong&gt;Create new schema&lt;/strong&gt; to start a new project&lt;/p&gt;

&lt;p&gt;Using the editor, you can rename your Schema. In this case I will name mine "DemoBlog"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qH-TI3HV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei6jp5eorm5ghhl7mygi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qH-TI3HV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei6jp5eorm5ghhl7mygi.png" alt="New project on Fluidbm" width="880" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;✍️ Creating models&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Press on &lt;strong&gt;Add Model&lt;/strong&gt; to create add a new model&lt;/p&gt;

&lt;p&gt;You can add as many models as you wish, as well as columns.&lt;/p&gt;

&lt;p&gt;To add columns to add Model, simply double-click the model.&lt;/p&gt;

&lt;p&gt;It should like this after: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ua3XeFX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4y5yv46n1iyfalyeg0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ua3XeFX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4y5yv46n1iyfalyeg0t.png" alt="Model showcase in Fluidbm" width="880" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the Model Editor sidebar, one can add Laravel Database Factories, data dummies to fill up your models so you can use for testing.&lt;/p&gt;

&lt;p&gt;For our &lt;strong&gt;DemoBlog&lt;/strong&gt;, I will add another Model called &lt;strong&gt;Post&lt;/strong&gt;, with some additional factories, It looks as follows: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lA_lDUG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df5x30modx3q8yxts2l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lA_lDUG8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df5x30modx3q8yxts2l0.png" alt="Showcase models in Fluidbm" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;🔗 Adding relationships&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To link &lt;strong&gt;Users ** with **Posts&lt;/strong&gt;, click on the User model then drag the relation pin and drop on the model you want to connect. &lt;br&gt;
In our case &lt;strong&gt;User -&amp;gt; Post&lt;/strong&gt;. &lt;br&gt;
Then click on the connection line to define the type of Relationship. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDqNHIq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k7no4zkb4ubut1dkl66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDqNHIq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k7no4zkb4ubut1dkl66.png" alt="Showcase Relationship in Fluidbm" width="880" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😊 A code preview is also generated to give you some sense of the output later. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#importing-to-laravel-in-milliseconds"&gt;
  &lt;/a&gt;
  ⛏️ Importing to Laravel (in milliseconds)
&lt;/h2&gt;

&lt;p&gt;First create a new Laravel project, or open an existing one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer create-project laravel/laravel my-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;👨‍💻 ⚡ Fluidbm CLI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It interacts with the Fluidbm API to generate your Laravel schema schemas, factories and database seeder.&lt;/p&gt;

&lt;p&gt;The source code can be found here: &lt;a href="https://github.com/franznkemaka/fluidbm-cli"&gt;https://github.com/franznkemaka/fluidbm-cli&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use it directly with &lt;strong&gt;npx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx fluidbm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or Install it via &lt;strong&gt;npm or yarn&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g fluidbm-cli

or 

yarn global add fluidbm-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this tutorial, we will use &lt;strong&gt;npx&lt;/strong&gt; as it requires no previous installation.&lt;/p&gt;

&lt;p&gt;🏗️ Authenticate with Fluidbm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx fluidbm auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To link your Fluidbm project to your Laravel project, you have to clone it. Copy the url or the schema id only &lt;strong&gt;61d97a9185de6a5b30ab72e3&lt;/strong&gt; and paste it this way&lt;br&gt;
!make sure 61d97a9185de6a5b30ab72e3 to replace it with your own&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx fluidbm clone https://fluidbm.com/schema/61d97a9185de6a5b30ab72e3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's time to import all our code to Laravel with a single command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx fluidbm pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eFM4zuUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/822lhbndc1l6l8a9sz0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFM4zuUl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/822lhbndc1l6l8a9sz0u.png" alt="After 140 milliseconds it is done" width="473" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All models and factories were successfully generated. A default seeder was also automatically implemented.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WzWHEcxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp74bg6mr1o2dfw9nmmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WzWHEcxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp74bg6mr1o2dfw9nmmd.png" alt="Fludibm magic" width="880" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎉After just 0.14s it is done ✅&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go back to Fluidbm and perform changes, to resync, just hit &lt;code&gt;npx fluidbm pull&lt;/code&gt; and it is done 👍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let's migrate our DB and see the changes in a real DB&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate mock data using the automatically generated seeder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan db:seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2gZ0GjiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjpg489232rzx2fz1zbh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2gZ0GjiK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjpg489232rzx2fz1zbh.png" alt="Generated Data in MySQL" width="880" height="287"&gt;&lt;/a&gt;&lt;br&gt;
✨ Boom! I think the result speaks for itself. &lt;/p&gt;

&lt;p&gt;To view DemoBlog on Fluidbm use this link, but you can't delete it instead you can &lt;strong&gt;Fork&lt;/strong&gt; it and create your own mutable copy: &lt;a href="https://fluidbm.com/s/zfy1opbnJdIW"&gt;https://fluidbm.com/s/zfy1opbnJdIW&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Give Fluidbm a try!

It’s free and available on https://fluidbm.com
Feedback is highly appreciated fluidbm@rigle.co
Cheers 🥂!
Franz
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>laravel</category>
      <category>database</category>
      <category>schema</category>
      <category>cli</category>
    </item>
    <item>
      <title>My first SDE internship interview experience</title>
      <author>vedant-jain03</author>
      <pubDate>Sat, 08 Jan 2022 16:00:57 +0000</pubDate>
      <link>https://dev.to/vedantjain03/my-first-sde-internship-interview-experience-1k8e</link>
      <guid>https://dev.to/vedantjain03/my-first-sde-internship-interview-experience-1k8e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Company: Lido Learning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I applied at Lido Learning via linkedin. I don't remember the exact date when I applied. But my overall experience was awesome though got rejected due to rolling criteria.&lt;/p&gt;

&lt;p&gt;The process contain 3 round:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-round-telephonic-round"&gt;
  &lt;/a&gt;
  First Round (Telephonic Round)
&lt;/h3&gt;

&lt;p&gt;HR called me and told me that my resume is shortlisted for this role and they want to interview me. I was glad as this was my first time I am going to give interview for SDE role with good stipend and they were also providing me PPO (Pre Placement Offer).&lt;br&gt;
HR told me that my first technical interview will be after 5 days and I can expect easy-medium DSA questions and some questions related to Javascript, OOPS.&lt;/p&gt;

&lt;p&gt;I revise my concept, I do leetcode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-round-technical-round"&gt;
  &lt;/a&gt;
  Second Round (Technical Round)
&lt;/h3&gt;

&lt;p&gt;Interviewer was SDE-2 at Lido. He first asked me to introduce myself. Then he ask me question related to javascript. I was able to give answer but I was not confident about it. He asked me the difference between '==' and '==='. I told him that both are conditional operator and '===' is advancement of '==', it was not fully correct. Then he asked me what is reduce function, I told him it is used in array scope. He was satisfied but not fully. He started asking me about OOPS, he asked me difference between private, protected, public. &lt;br&gt;
Then he request me to share the screen and ask me 2 DSA question.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Next Greater Element&lt;br&gt;
I started with brute force and show it to him. He asked me to optimize it, I did it using stack data structure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on hash map.&lt;br&gt;
I started with brute force and he asked me to optimize it, I did it and he was satisfied.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;After 2 days I got call that I am selected for next round.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#third-interviewtechnical-round"&gt;
  &lt;/a&gt;
  Third Interview(Technical Round)
&lt;/h3&gt;

&lt;p&gt;Interviewer was VPE at Lido. He started with my introduction, I prepared for DP, graphs and other higher concepts but he deep dive into hashmap, he not ask my to code, he just give me different conditions for mapping. It was pretty tough.&lt;/p&gt;

&lt;p&gt;As it was my first experience, I learned so many things and gain knowledge. Unfortunately, I was not selected as per rolling basis. But it was nice experience and I hope it helps you as well.&lt;/p&gt;

&lt;p&gt;All the Best!!!&lt;/p&gt;

</description>
      <category>dsa</category>
      <category>cpp</category>
      <category>programming</category>
      <category>problemsolving</category>
    </item>
    <item>
      <title>ASMR Coding Drawing App | No Talking </title>
      <author>Bek Brace</author>
      <pubDate>Sat, 08 Jan 2022 15:55:48 +0000</pubDate>
      <link>https://dev.to/bekbrace/asmr-coding-drawing-app-no-talking-4hhc</link>
      <guid>https://dev.to/bekbrace/asmr-coding-drawing-app-no-talking-4hhc</guid>
      <description>&lt;p&gt;I did not realize how coding tutorials on YouTube are sometimes annoying - including my own (no exception 😄), don't get me wrong, I mean it's great to be taught and all but often it's just annoying, you want to watch someone coding in silence and code with them, especially if you're familiar with the language/framework/tech they're using in the video.&lt;/p&gt;

&lt;p&gt;This is an HTML/CSS/JavaScript application, coded from scratch in silence in a rainy night here in Poland, and I did not want to talk just code in silence and if you're a beginner - intermediate, you can code along with me or you can leave it turned on while doing your own stuff.&lt;/p&gt;

&lt;p&gt;The idea was inspired from one famous YouTuber called Takuya and his channel is called "devaslife", he's a Japanese from Osaka who speaks perfect English. The man types in a very smooth way on the terminal - he uses Fish terminal - and never touches the mouse in all of his videos; productive and efficient. I was only inspired by him, and started creating my own videos with my own style, just occasionally not being the main style on the channel.&lt;/p&gt;

&lt;p&gt;The application is very simple, you create it to draw !&lt;br&gt;
Using JavaScript for the logic, this application is ideal for JS beginners and those who started to grasp JS concepts.&lt;/p&gt;

&lt;p&gt;Here's the video&lt;br&gt;
Hope you enjoy it - if you like that type of videos&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WxMt3YfmgwY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Basic Approach To Algorithm and Data Structure</title>
      <author>Pelumi Adebayo</author>
      <pubDate>Sat, 08 Jan 2022 15:53:43 +0000</pubDate>
      <link>https://dev.to/pelumiadebayo/basic-approach-to-algorithm-and-data-structure-3oop</link>
      <guid>https://dev.to/pelumiadebayo/basic-approach-to-algorithm-and-data-structure-3oop</guid>
      <description>&lt;p&gt;Understanding how to solve an algorithm problem becomes easier when we know the underlying factors to consider when approaching a problem. These basic factors are what this article helps to understand.&lt;/p&gt; &lt;p&gt;First, Let’s start with what an algorithm is.&lt;/p&gt; &lt;p&gt;What is an Algorithm?&lt;/p&gt; &lt;p&gt;Algorithms are step-by-step instructions on how to solve a problem. It identifies what is to be done and(the instructions) and the order in which they should be done. It can be represented using pseudocode or flowchart.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;p&gt;The algorithm for making a cup of tea might look something like this:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
&lt;p&gt;Fill the Electric kettle with water.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;Bring to boil.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;Pour water into a cup.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;Put the teabag in the cup.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;Steep for about 3 minutes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;Remove Tea Bag.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This can be eventually translated to computer instructions using programming languages&lt;/p&gt; &lt;p&gt;Given a more definite example like finding the maximum value in the list of numbers say; 27, 31, 42, 26, 10, 44, 35, 19, 33, 14.&lt;/p&gt; &lt;p&gt;Mere scanning through this set of numbers, you can immediately see the largest value but a computer can not scan-search as humans do. Even humans will not be able to come up with the answer when the data is many.&lt;/p&gt; &lt;p&gt;A computer can only compare two things at a time, ie, the algorithm must be expressed in terms of binary comparison.&lt;/p&gt; &lt;p&gt;So then, the linear approach a computer will take to look for the largest value might look something like this:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
&lt;p&gt;Read first item and store value as max&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;Look at each other item in the list, If it is greater, then the value becomes the new max&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;After going through the entire list, the current max is the largest value on the list.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For a better understanding of how data structure come to play, let’s look at another example,&lt;/p&gt; &lt;p&gt;eg, Determining whether a list contains a given value, say 33 in the previous list of numbers.&lt;/p&gt; &lt;p&gt;Let come up with an algorithm to solve this, which might look something like this:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;
&lt;p&gt;Keep the given value as the target,&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;Look at each value in the list,&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;If one is equal to the target, then we have found the value and we can stop looking.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;
&lt;p&gt;If we go through the entire list and have not found the target, then it is not on the list.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This seems effective right?, but if the list is very long, it can take the computer a very long time to look through the entire list(this is called execution time). How much execution time it will take is what is referred to as Algorithm Complexity&lt;/p&gt; &lt;p&gt;Complexity is a way of expressing the number of steps or operations in an algorithm. It gives us an idea of how long it will take for an algorithm to execute.&lt;/p&gt; &lt;p&gt;We naturally expect an algorithm to take longer as input increases, but how much longer?&lt;/p&gt; &lt;p&gt;Complexity is therefore expressed as a function of the number of elements in the input data.&lt;/p&gt; &lt;p&gt;So, when we analyze algorithms,&lt;/p&gt; &lt;p&gt;We consider the number of operation that needs to be performed We also consider complexity in the worst case, so we can see the changes in operations when the input size increases For example;&lt;/p&gt; &lt;p&gt;We could stop when we find the target in the example above, but what happens when we have to look through every item on the list? That means if the number of items in the list increases, then we have to do more comparison through the entire list in cases where the target is not there, say 30. This is the worst case of these algorithms.&lt;/p&gt; &lt;p&gt;Well, what can we do better, What if the item on the list were ordered?&lt;/p&gt; &lt;p&gt;Consider our previous example: 27, 31, 42, 26, 10, 44, 35, 19, 33, 14.&lt;/p&gt; &lt;p&gt;In the ordered version, searching for 33 becomes faster&lt;/p&gt; &lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2iGREWWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624319028164/7kZWJBCuo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2iGREWWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624319028164/7kZWJBCuo.gif" alt="1581341951198.gif" width="438" height="180"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;With this structure of data, searching for an item that is not in the list, say 30, becomes even easier. The computer would not have to search through the entire list, we can just stop when the next comparison value is greater than the target we are looking for. It can stop looking immediately it gets to 31 because it is greater than our target 30.&lt;/p&gt; &lt;p&gt;This leads us to the Data structure.&lt;/p&gt; &lt;p&gt;A data structure is a data organization management and storage format that enables efficient access and modification. It provides a means to manage large amounts of data efficiently. It is the way of organizing data in memory such that it is easy to access.&lt;/p&gt; &lt;p&gt;There are many ways to store data in software engineering. Some ways are significantly better than the other depending on the requirements, say less memory, faster access or ease of modification.&lt;/p&gt; &lt;p&gt;The following are some of the available data structures:&lt;/p&gt; &lt;p&gt;Array&lt;/p&gt; &lt;p&gt;List&lt;/p&gt; &lt;p&gt;LinkedList&lt;/p&gt; &lt;p&gt;ArrayList&lt;/p&gt; &lt;p&gt;HashTables&lt;/p&gt; &lt;p&gt;Dictionary&lt;/p&gt; &lt;p&gt;Generic Collections&lt;/p&gt; &lt;p&gt;Stack&lt;/p&gt; &lt;p&gt;Queue&lt;/p&gt; &lt;p&gt;Tree&lt;/p&gt; &lt;p&gt;Graphs&lt;/p&gt; &lt;p&gt;This should now give you a clearer view of algorithms and data structure even if this is the first time you heard of it.&lt;/p&gt; &lt;p&gt;In our subsequent article, we will look at some of these data structures, and also a better algorithm to look for our given value in our earlier example.&lt;/p&gt; &lt;p&gt;We searched through the list using a Linear approach. A linear algorithm is one in which the number of operations increases linearly as the increase in the input size. We shall also look at a better and faster approach called the Binary Search Algorithm.&lt;/p&gt;

</description>
      <category>problemsolving</category>
      <category>algorithms</category>
      <category>datastructures</category>
      <category>software</category>
    </item>
    <item>
      <title>GraphQL Subscription</title>
      <author>Drago</author>
      <pubDate>Sat, 08 Jan 2022 15:43:18 +0000</pubDate>
      <link>https://dev.to/drago/graphql-subscription-580p</link>
      <guid>https://dev.to/drago/graphql-subscription-580p</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction-to-graphql-subscription"&gt;
  &lt;/a&gt;
  Introduction to GraphQL Subscription
&lt;/h3&gt;



&lt;p&gt;Finally, we will learn how to use GraphQL Subscription to get real-time updates from the server.&lt;br&gt;
The GraphQL Subscription is a way to get real-time updates from the server. It's used the WebSocket protocol, instead of HTTP, because it's more efficient, two-way communication. The server sends updates to the client, and the client sends updates to the server. &lt;strong&gt;Subscription&lt;/strong&gt; means that the client is not required to send a request to the server every time it wants to get an update. The connection between the client and the server is maintained by the server, using the WebSocket API protocol.&lt;br&gt;
For implementing GraphQL Subscription, we will use the &lt;a href="https://www.npmjs.com/package/subscriptions-transport-ws"&gt;subscription-transport-ws&lt;/a&gt; library.&lt;br&gt;
There are many examples in practical projects, but the most popular are: google maps, real-time flight tracking, autonomous vehicles, chat applications, vehicle location, seat reservations, ticket reservations, etc.&lt;br&gt;
  &lt;br&gt;&lt;br&gt;
  &lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-graphql-subscription"&gt;
  &lt;/a&gt;
  Implementing GraphQL Subscription
&lt;/h2&gt;



&lt;p&gt;Create a new project and add the following dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express express-graphql graphql-playground-middleware-express graphql-subscriptions subscriptions-transport-ws ws
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or use yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add express express-graphql graphql-playground-middleware-express graphql-subscriptions subscriptions-transport-ws ws
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A useful tool for developing purposes is nodemon, which automatically restarts the server when the code changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -D nodemon
// or
yarn add -D nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#creating-a-server"&gt;
  &lt;/a&gt;
  Creating a server
&lt;/h2&gt;



&lt;p&gt;Creating a server begins with creating a new schema. The schema is a collection of GraphQL types, which are used to define the data that the server can return. Let's say we have a collection of posts, and we want to follow published posts in real-time, using GraphQL Subscription.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: To use ES6 syntax you must provide the "type" : "module" property in package.json.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h3&gt;



&lt;p&gt;Let's define the type of post. Create a folder called types in the root of the project. Create a file called &lt;code&gt;post.js&lt;/code&gt; in the &lt;code&gt;types&lt;/code&gt; folder.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;post.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  GraphQLID,
  GraphQLNonNull,
  GraphQLObjectType,
  GraphQLString,
} from "graphql";

export const PostType = new GraphQLObjectType({
  name: "Post",
  fields: () =&amp;gt; ({
    id: {
      type: new GraphQLNonNull(GraphQLID),
    },
    title: {
      type: new GraphQLNonNull(GraphQLString),
    },
    content: {
      type: new GraphQLNonNull(GraphQLString),
    },
  }),
});


export const PostSubscription = new GraphQLObjectType({
  name: "PostSubscription",
  fields: () =&amp;gt; ({
    id: {type: new GraphQLNonNull(GraphQLID)},
    title: {type: new GraphQLNonNull(GraphQLString)},
    content: {type: new GraphQLNonNull(GraphQLString)},
  }),
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's define a query type, which is used to get the post, in the same folder.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;query.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  GraphQLID,
  GraphQLObjectType,
  GraphQLList,
} from "graphql";
import { PostType } from "./post.js";
import { getPost, getPosts } from "../resolvers/resolvers.js";


const Query = new GraphQLObjectType({
  name: "Query",
  fields: () =&amp;gt; ({
    post: {
      type: PostType,
      args: {
        id: {
          type: GraphQLID,
        },
      },
      resolve: (parent, args) =&amp;gt; getPost(args.id),
    },
    posts: {
      type: new GraphQLList(PostType),
      resolve: () =&amp;gt; getPosts(),
    },
  }),
});


export default Query;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We defined the PostType and the Query type. The PostType is used to define the data that the server can return. The Query type is used to define the data that the client can request. Also, we defined the PostSubscription type, which is used to define the data that the client can subscribe to. The resolvers are defined in the resolvers.js file, for better usability and separation of concerns.&lt;/p&gt;

&lt;p&gt;Let's create a mutation type, which is used to create, update and delete a new post, in the same folder.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mutation.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  GraphQLID,
  GraphQLNonNull,
  GraphQLObjectType,
} from "graphql";
import { addPost, updatePost, deletePost } from "../resolvers/resolvers.js";
import { PostType } from "./post.js";
import { InputPostType } from "./inputPost.js";


const Mutation = new GraphQLObjectType({
  name: "Mutation",
  fields: () =&amp;gt; ({
    addPost: {
      type: new GraphQLNonNull(PostType),
      args: {
        input: {
          type: new GraphQLNonNull(InputPostType),
        },
      },
      resolve: async (parent, args, {pubsub}) =&amp;gt; {
          const {title, content} = args.input;

          return addPost(title, content, pubsub);
      }
    },
    updatePost: {
      type: PostType,
      args: {
        input: {
          type: new GraphQLNonNull(InputPostType),
        },
      },
      resolve: async (parent, , {pubsub}) =&amp;gt; {
            const {id, title, content} = args.input;

            return updatePost(id, title, content, pubsub);
      },
    },
    deletePost: {
      type: new GraphQLNonNull(PostType),
      args: {
        id: {
          type: new GraphQLNonNull(GraphQLID),
        },
      },
      resolve: (parent, args, {pubsub}) =&amp;gt; {
          const { id } = args;
          return deletePost(id, pubsub);
      },
    },
  }),
});


export default Mutation;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Arguments are defined in the InputPost type. The InputPost is used to define the data that the client can send to the server. Arguably, the InputPost is not necessary, but it's good practice to define the data that the client can send to the server.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;inputPost.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  GraphQLID,
  GraphQLNonNull,
  GraphQLInputObjectType,
  GraphQLString,
} from "graphql";


export const InputPostType = new GraphQLInputObjectType({
  name: "InputPost",
  fields: () =&amp;gt; ({
    id: {
      type: new GraphQLNonNull(GraphQLID),
    },
    title: {
      type: new GraphQLNonNull(GraphQLString),
    },
    content: {
      type: new GraphQLNonNull(GraphQLString),
    },
  }),
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, we can create a subscription type, which is used to subscribe to the post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;subscription.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { GraphQLNonNull, GraphQLObjectType } from "graphql";
import { PostSubscription } from "./post.js";


const Subscription = new GraphQLObjectType({
  name: "Subscription",
  fields: () =&amp;gt; ({
    post_added: {
      type: new GraphQLNonNull(PostSubscription),
      subscribe: (parent, args, {pubsub}) =&amp;gt; pubsub.asyncIterator("NEW_POST"),
      },
    post_updated: {
        type: new GraphQLNonNull(PostSubscription),
        subscribe: (parent, args, {pubsub}) =&amp;gt; pubsub.asyncIterator("POST_UPDATED"),
      },
    post_deleted: {
            type: new GraphQLNonNull(PostSubscription),
            subscribe: (parent, args, {pubsub}) =&amp;gt; pubsub.asyncIterator("POST_DELETED"),
        },
    },
  }),
});


export default Subscription;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#resolvers"&gt;
  &lt;/a&gt;
  Resolvers
&lt;/h3&gt;



&lt;p&gt;Resolvers are defined in the resolvers.js file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;resolvers.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { posts } from "../data/posts.js";

// Queries
export const getPosts = () =&amp;gt; posts;

export const getPost = (id) =&amp;gt; {
  if (id &amp;lt; posts.length) {
    return posts[id - 1];
  }
};


// Mutations
export const addPost = async (title, content, pubsub) =&amp;gt; {
  const id = posts.length + 1;
  const newPost = {id, title, content};
  posts.push(newPost);
  await pubsub.publish("NEW_POST", {post_added: newPost});
  return newPost;
};

export const updatePost = async (id, title, content, pubsub) =&amp;gt; {
  const post = posts.find(post =&amp;gt; post.id === parseInt(id));

  if (post) {
    post.title = title;
    post.content = content;
  }
  await pubsub.publish("POST_UPDATED", {post_updated: post});
  return post;
};


export const deletePost = async (id, pubsub) =&amp;gt; {
  const post = posts.find(post =&amp;gt; post.id === parseInt(id));

  if (!post) {
      throw new Error("Post not found");
  }
    posts.splice(posts.indexOf(post), 1);

  await pubsub.publish("POST_DELETED", {post_deleted: post});
  return post;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Data is defined in the data.js file. You can find the data in the Github repository.&lt;br&gt;
Pubsub is a feature that publishes events to which clients can subscribe. Each of these events has a name, which is used to subscribe to the event (NEW_POST, POST_UPDATED, POST_DELETED). Based on the name, the asyncIterator method of the pubsub object is called and sends the event to the client. In the end, it remains to create a server to implement the subscription.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#server"&gt;
  &lt;/a&gt;
  Server
&lt;/h3&gt;



&lt;ul&gt;
&lt;li&gt;index.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { GraphQLSchema, execute, subscribe } from "graphql";
import { WebSocketServer } from "ws";
import express from "express";
import { graphqlHTTP } from "express-graphql";
import { PubSub } from "graphql-subscriptions";
import Query from "./types/query.js";
import Mutation from "./types/mutation.js";
import Subscription from "./types/subscription.js";
import expressPlayground from "graphql-playground-middleware-express";
import { SubscriptionServer } from "subscriptions-transport-ws";

const app = express();
const pubsub = new PubSub();
const graphQLPlayground = expressPlayground.default;

// define the GraphQL schema
const schema = new GraphQLSchema({
  query: Query,
  mutation: Mutation,
  subscription: Subscription,
});


ap.use("/graphql", graphqlHTTP({
  schema,
  context: { pubsub },
}));

app.use("/playground", graphQLPlayground({
  endpoint: "/graphql",
  subscriptionEndpoint: `/graphql`,
}));


const server = app.listen(4000, () =&amp;gt; {

const wss = new WebSocketServer({
    server,
    path: "/graphql",
});

SubscriptionServer.create(
    {
        schema,
        execute,
        subscribe,
        onConnect: () =&amp;gt; {
           return { pubsub }
        },
    },
    wss,
);



  console.log("Server is running on http://localhost:4000");
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, open the browser and go to &lt;a href="http://localhost:4000/playground"&gt;http://localhost:4000/playground&lt;/a&gt;. Enter the fields relevant to the Subscription type and click on the Run button. Event listening will be started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yq-cLGLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dragardelo/image/upload/v1640002054/blog/Subscription_cup8uu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yq-cLGLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dragardelo/image/upload/v1640002054/blog/Subscription_cup8uu.png" alt="Subscription" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, open another tab and create a post. The post will be added to the list of posts. the event will be published and should appear in the Subscription tab. This way, you can listen to the update and delete events, as well as the creation of a new post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsQ5Qc-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dragardelo/image/upload/v1640010441/blog/Subscription_2_elmimj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsQ5Qc-W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dragardelo/image/upload/v1640010441/blog/Subscription_2_elmimj.png" alt="Subscription_2" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The complete code can be seen in the Github repository &lt;a href="https://github.com/ogurenko/graphql-api-subscription"&gt;Link&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>beginners</category>
      <category>node</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
