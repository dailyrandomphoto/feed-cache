<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The simple tricks to change your website theme based on day and night</title>
      <author>lakshmanan-arumugam</author>
      <pubDate>Tue, 11 May 2021 18:53:42 +0000</pubDate>
      <link>https://dev.to/lakshmananarumugam/the-simple-tricks-to-change-your-website-theme-based-on-day-and-night-23l0</link>
      <guid>https://dev.to/lakshmananarumugam/the-simple-tricks-to-change-your-website-theme-based-on-day-and-night-23l0</guid>
      <description>&lt;p&gt;Hi everyone, every website have a theme options. so, a website user able to choose their preferred theme like dark, light..etc., This is existing followed approach in everyone website.&lt;/p&gt;

&lt;p&gt;how is it (we show the website theme based on the user day and night). I just tried. if you like it use in your website. give some different experience to your website user.&lt;/p&gt;

&lt;p&gt;Let's jump into the implementation part:&lt;/p&gt;

&lt;p&gt;For now, I take a simple coming soon html template for with dark and light theme.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/explore-free-projects/embed/zYZvewO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The above page theme change based on body attribute data-theme: "dark-theme" / "light-theme". &lt;/p&gt;

&lt;p&gt;by default show &lt;code&gt;light-theme&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Now, coming to main point how we change website theme based on day and night.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function setThemePreference() {
  var d = new Date();
  /*
  * The getHours() method returns the hour (from 0 to 23) of the specified date and time.
  * Day = 0 - 11
  * Night = 12 - 23
  */
  var currentHour = d.getHours();

  /*
  * The dark theme load early morning and night
  * The light theme load morning and evening
  */

  if(currentHour &amp;gt;= 19 || currentHour &amp;lt;= 6) {
    document.body.setAttribute("data-theme", "dark_theme") 
  }else {
    document.body.setAttribute("data-theme", "light_theme") 
  }
}

window.onload = setThemePreference;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all. &lt;/p&gt;

&lt;p&gt;The workable version of the (codepen URL)[&lt;a href="https://codepen.io/explore-free-projects/pen/zYZvewO"&gt;https://codepen.io/explore-free-projects/pen/zYZvewO&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How to Ace the Behavioural Interview</title>
      <author>Sandra Spanik</author>
      <pubDate>Tue, 11 May 2021 18:42:34 +0000</pubDate>
      <link>https://dev.to/sanspanic/how-to-ace-the-behavioural-interview-15g1</link>
      <guid>https://dev.to/sanspanic/how-to-ace-the-behavioural-interview-15g1</guid>
      <description>&lt;p&gt;As you might have already guessed, this article is not about technical interviews, coding challenges, let alone about (&lt;em&gt;shudders&lt;/em&gt;) algorithms. I'm not qualified to give anyone advice on above, but having transitioned to tech from mental health, I do know a thing or two about human behaviour. By extension, I'm declaring myself qualified to dish out advice on behavioural interviews. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This article is about all aspects of the interview process that are NOT strictly coding-related, and will be particularly useful to those who are transitioning careers to tech from a different industry.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tech-recruitment-process"&gt;
  &lt;/a&gt;
  The Tech Recruitment Process
&lt;/h3&gt;

&lt;p&gt;Typically, interviews in the tech industry have at least 4 rounds, although of course the exact schedule will vary from company to company.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Application/Recruiter Email&lt;/li&gt;
&lt;li&gt;The Recruiter Screening Call &lt;/li&gt;
&lt;li&gt;The Technical Interview/The Takeaway Coding Challenge&lt;/li&gt;
&lt;li&gt;The Behavioural Interview&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Rounds 1, 2 and 4 all have to do with who you are as a person, as much as they have to do with your skills. There is a 100% likelihood you will have to tell your interviewers about yourself and your background, and unless you come across as someone your interviewers would enjoy working with, no amount of skills will help you land your dream role. It's not easy to get an offer, especially if you're switching careers from a different industry, so being prepared to talk about yourself eloquently might well be what distinguishes you from your competition. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XtB0qy4kx8jCM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XtB0qy4kx8jCM/giphy.gif" alt="https://media.giphy.com/media/XtB0qy4kx8jCM/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interviewing-well-is-a-skill"&gt;
  &lt;/a&gt;
  Interviewing Well is a Skill.
&lt;/h3&gt;

&lt;p&gt;The good news is that just like any other skill, it's one you can improve with practice. It certainly took me a lot of practice to sound confident and convincing in interview situations - I'm still not amazing at it. The last in-person interview I went to pre-career-switch to tech ended in tears - not only did I come across as an idiot, I also knocked over a glass of water onto the interviewer sat across me. &lt;/p&gt;

&lt;p&gt;Why was it such a nightmare? Because I hated the sound of the job, and, as a result, was woefully underprepared to talk about myself and my motivation for applying to it. &lt;em&gt;Why did you apply for it, if you hated the sound of it&lt;/em&gt;, I hear you ask? &lt;em&gt;Excellent&lt;/em&gt; &lt;em&gt;question. I had no idea what I was doing with my life&lt;/em&gt;, I hear myself answer. &lt;/p&gt;

&lt;p&gt;This brings me to my first piece of advice, which I'll kick the useful part of this article off with. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-make-sure-you-like-what-youre-applying-to"&gt;
  &lt;/a&gt;
  1. Make Sure You Like What You're Applying To.
&lt;/h3&gt;

&lt;p&gt;If you don't show enthusiasm for the role or find yourself having to fake it, your interviewers will sense this and offer the role to a more motivated candidate. If you hate the way social media has contributed to the polarisation of society, try not to apply for a job at Facebook, unless you believe you can fix it (&lt;em&gt;please... someone fix it. anyone..?&lt;/em&gt; ). If the sound of working for a local start-up that creates a productivity management tool sounds boring beyond belief to you, manage your own productivity better by saving yourself the hassle of an application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-ten-applications-a-day-keep-the-salary-at-bay"&gt;
  &lt;/a&gt;
  2. Ten Applications A Day Keep the Salary At Bay.
&lt;/h3&gt;

&lt;p&gt;I see a lot of well-intentioned advice encouraging candidates to apply to ten positions a day. In my potentially controversial opinion, this is complete nonsense. In the best case scenario, you'll hear back from numerous companies, which will mean that you're now involved in too many recruitment processes at once. This won't give you enough time to do your due diligence and bring your best self to each interview. In the worst case scenario, you've spread yourself too thin and given each application so little thought that you barely hear back from anyone. I'd recommend you go for quality instead of quantity. One or two applications per day are plenty, especially if you're tailoring your CVs and cover letters uniquely to each position you apply to. And if that's something you're not doing, then you're doing it wrong.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-prepare-answers-to-common-questions-in-advance"&gt;
  &lt;/a&gt;
  3. Prepare Answers to Common Questions in Advance.
&lt;/h3&gt;

&lt;p&gt;The chance of you not hearing the following words from an interviewer at some point during the process is precisely zero : &lt;strong&gt;s*o, could you please tell us a bit about yourself&lt;/strong&gt;*... Knowing this gives you the power to absolutely ace this question. Below is a list of other guaranteed questions you might want to prepare for. The list should be particularly relevant to those who are transitioning careers, i.e. the target audience of this article. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tell us a bit about yourself.&lt;/li&gt;
&lt;li&gt;What prompted you to start coding? &lt;/li&gt;
&lt;li&gt;What do you particularly like about front-end/back-end/data science/whatever-the-job-is? &lt;/li&gt;
&lt;li&gt;Tell me about a time in your life when you successfully worked as part of a team.&lt;/li&gt;
&lt;li&gt;Tell me about a time in your life when you successfully dealt with a challenging situation. &lt;/li&gt;
&lt;li&gt;What made you apply to this particular position, in our particular company? &lt;/li&gt;
&lt;li&gt;What are your favourite coding-related resources? &lt;/li&gt;
&lt;li&gt;Do you have any questions for us? &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;I can pretty much guarantee that most of above questions, or some permutations thereof, will be asked.&lt;/strong&gt; There is no reason you should have to think about these on the spot and struggle with a coherent reply. Take your time to think about these questions beforehand, and write your answers out. Read them, tweak them for maximum impact, commit them to memory. &lt;/p&gt;

&lt;p&gt;Every interview is slightly different so you will still get ample space to improvise, but &lt;strong&gt;pre-empting as many questions as you can will make you a better candidate&lt;/strong&gt;. This seems like extremely obvious advice, but many still don't follow it - make sure you slot yourself into the category of those who do to capitalise on this opportunity. I'd argue that preparing replies to commonly asked questions is &lt;strong&gt;the one easiest and most impactful step&lt;/strong&gt; any candidate can take to stand out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-talk-to-yourself-out-loud-seriously"&gt;
  &lt;/a&gt;
  4. Talk to Yourself. Out Loud. Seriously.
&lt;/h3&gt;

&lt;p&gt;When preparing for your interview, don't do it in silence. Practice your replies out loud, and get more familiar with what and how you want to convey your points. &lt;strong&gt;Interviews are by default a performative action, and like every performance, the more you do it, the better you get at it&lt;/strong&gt;. Some even go as far as to advise candidates to record themselves and analyse how they come across - I'd say that's a step too far, but there's nothing wrong with standing in front of a mirror (or a willing other) and rattling your script down until you're happy with your "act". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif" alt="https://media.giphy.com/media/3o7aD0QILFVJQEOb2E/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-do-some-detective-work"&gt;
  &lt;/a&gt;
  5. Do Some Detective Work.
&lt;/h3&gt;

&lt;p&gt;In this situation only, being a stalker is a perfectly acceptable way to be. Researching your interview panel is useful for two reasons. Firstly, you might get a better idea of what life at the company you're applying to is like, and what your job might entail. Having this knowledge will help you craft better answers during the interview.  You might even pick up an impressive tidbit of information that you can impress the panel with during your interview. Secondly, you might get a better sense of the type of person the company hires. If you see any red flags here, run. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif" alt="https://media.giphy.com/media/3ohc0Rnm6JE0cg0RvG/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-leverage-your-nontech-background"&gt;
  &lt;/a&gt;
  6. Leverage Your Non-Tech Background.
&lt;/h3&gt;

&lt;p&gt;No CS degree? No problem! Whatever it is you've been doing with your life, you must have learned a thing or two. The trick is to tailor your story towards the job you want and make your diverse background sound like a benefit, rather than a drawback of hiring you. &lt;/p&gt;

&lt;p&gt;Did you work in hospitality before? You must know how to deal with people and be able to spontaneously improvise solutions to tricky situations really effectively! Were you in customer service? Your communication skills must be off the charts. Were you an athlete or a musician? Wow, I bet you have a tons of discipline and will code us all under the table in a couple of years. Did you spend a couple of years traveling? How resourceful and adaptive that must make you! Are you perhaps a parent? You win by default, you literally created a human being. You must be incredibly organised and excellent at time management to juggle all that AND change your career. &lt;/p&gt;

&lt;p&gt;Soft skills are important in any environment, and software engineering is no exception. Make your background work for you! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif" alt="https://media.giphy.com/media/l0ExghDSRxU2g55sc/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-bring-your-whole-self"&gt;
  &lt;/a&gt;
  7. Bring Your Whole Self.
&lt;/h3&gt;

&lt;p&gt;Don't hide your personality - display it proudly! &lt;em&gt;Unless your personality sucks, in which case, definitely hide your personality&lt;/em&gt;. But seriously, your future employers are interested in who you are as a person as much as they are interested in your skills. You won't exist in a vacuum, on the contrary, you will constantly be interacting with others and contributing to a team, so being a person who's easy to get on with will go a long way. &lt;/p&gt;

&lt;p&gt;You don't have to rely on solely professional examples to illustrate who you are - you are way more than just your previous jobs or studies. Feel free to draw on other areas of your life for examples of what makes you uniquely you. For example, I have a thing for acrobatics and enjoy balancing people on my shoulders. During my interview, I used the example of acrobatics to illustrate my approach to teamwork - in acrobatics, communication is just as important as skill and no human pyramid would ever go up would the entire team not be on the same page regarding effective communication. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif" alt="https://media.giphy.com/media/SGsdST7lHYafsTQ1j4/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-the-fear-wont-persevere"&gt;
  &lt;/a&gt;
  8. The Fear Won't Persevere.
&lt;/h3&gt;

&lt;p&gt;There is an aspect of interviewing that is unique to the interview itself and cannot be replicated during solo practice in front of a mirror -  I mean the nerve-wracking, anxiety-inducing, "this-is-a-live-situation-and-I-only-have-one-chance" part of it all. I don't know about you, but I'm pretty much shaking before any interview. Even if on the surface I look calm and ready, my knees are weak, my palms are sweaty, there's vomit on my sweater already (mom's spaghetti). &lt;/p&gt;

&lt;p&gt;Jokes aside, some adrenaline is helpful and leads you to think clearer, but too much of it can muddle your thoughts. I've found it helpful to internally reframe The Fear™  as simply Extreme Excitement™. &lt;em&gt;I'm not dreading this and shaking out of fear, I just can't wait to seize this opportunity, that's all!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This, too, is a practicable skill. Even if you tend to get very unsettled by interviews at the moment, it doesn't mean you always will. The more interview processes you go through, the more practice you get with regulating your interview feelings, meaning you will interview better in the future. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif" alt="https://media.giphy.com/media/xT0xey2FaDj3GQmFs4/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-normalise-rejection"&gt;
  &lt;/a&gt;
  9. Normalise Rejection.
&lt;/h3&gt;

&lt;p&gt;If you get rejected, you're just one interview closer to the interview that will result in a job offer. I know, this is easier said than done. But try to bear in mind that you're not alone. The struggle is real for all of us. Rejection is tough, but completely normal - just another day at the office, even for experienced developers. But equally importantly, don't beat yourself up over feeling down. We all have different emotional spans, and being someone who takes rejection to heart more significantly than others does not make you a worse (or better) candidate. Your feelings are valid, so accept them and let yourself experience them fully, prior to moving on. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif" alt="https://media.giphy.com/media/12EFa8Vc5kVlOU/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-always-ask-for-feedback"&gt;
  &lt;/a&gt;
  10. Always Ask For Feedback.
&lt;/h3&gt;

&lt;p&gt;If you've spent weeks of your life interviewing for a company and made it all the way through to the behavioural interview, the least the company can do after deciding to offer the job to someone else is provide you with useful feedback. &lt;strong&gt;If they don't do this, it means you likely dodged a bullet anyways&lt;/strong&gt;. Frequently, the feedback you will receive will be useful and inform your next attempt. Other times, the feedback will be that you were &lt;strong&gt;this&lt;/strong&gt; close to getting an offer, but someone else with the slightest bit of more directly relevant experience was in the end deemed a better choice. Whilst this type of feedback is not super useful, it should hopefully serve to raise your spirits and reassure you that you're very, very close. Either way, asking for feedback can only result in positive outcomes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif" alt="https://media.giphy.com/media/3otPoScZw3enH8ZGKY/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-dont-lie"&gt;
  &lt;/a&gt;
  11. Don't Lie.
&lt;/h3&gt;

&lt;p&gt;Last but not least, be honest - with yourself and with your interviewers. Instead of pretending you are really into animations, when in reality you've barely ever encountered an SVG before, is unnecessary. At best, you might get offered the job and realise you've sold yourself as an expert when in reality you have no idea what you're doing, in which case you'll be found out immediately. At worst, faking expertise might lead to you coming across as cocky and never getting offered the job in the first place. &lt;/p&gt;

&lt;p&gt;Nobody, I repeat, NOBODY, is an expert at everything. Senior devs get better at knowing exactly what it is they don't know, which makes it easier to ask the right questions and seek out answers in the right places. But even seniors would be lying if they claimed they're the absolute bee's knees at every single topic. If you're only just starting your tech career, it's much wiser to openly admit your technical gaps and frame them as areas of growth you are aware of and excited to explore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif" alt="https://media.giphy.com/media/Q9kgQp6ptfcLS/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#still-with-me"&gt;
  &lt;/a&gt;
  Still with me?
&lt;/h3&gt;

&lt;p&gt;Wow, you must really want that job. Now go get it! Let me know if you found this article useful in the comments, and feel free to connect with me on &lt;a href="https://twitter.com/sansPanicDev"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/sandra-spanikova-6738aa1b7/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>motivation</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>dev.to staff</author>
      <pubDate>Tue, 11 May 2021 18:17:11 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-322d</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-322d</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-this-is-preparation"&gt;
  &lt;/a&gt;
  Now this is preparation
&lt;/h2&gt;

&lt;p&gt;Wow, &lt;a class="mentioned-user" href="https://dev.to/suprabhasupi"&gt;@suprabhasupi&lt;/a&gt;
! What a thorough guide to some of the React/Redux interview questions our community might encounter in the future. Thanks for this! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/suprabhasupi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdOZR6Yq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Oa9V032i--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/80451/3034728c-5307-4467-a67e-b9c00d6d33ed.png" alt="suprabhasupi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/suprabhasupi/react-redux-interview-questions-with-answers-13ba" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React/Redux Interview Questions with answers 🚀&lt;/h2&gt;
      &lt;h3&gt;Suprabha ・ May 7 ・ 21 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#an-evergreen-solution-to-a-common-web-dev-problem"&gt;
  &lt;/a&gt;
  An evergreen solution to a common web dev problem
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/bholmesdev"&gt;@bholmesdev&lt;/a&gt;
 has put together some "easy wins" for optimizing image file formats and sizes with the picture element &lt;em&gt;and&lt;/em&gt;  an automation process that you can use to your build setup of choice. Super helpful. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bholmesdev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-zQ0THr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--othUiuX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/142865/eae5c7d3-b7c3-44b1-ae9f-00e87ffc2d2c.jpg" alt="bholmesdev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/bholmesdev/picture-perfect-image-optimization-for-any-web-framework-2o77" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Picture perfect image optimization for any web framework&lt;/h2&gt;
      &lt;h3&gt;Ben Holmes ・ May 5 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#eleventy&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-next-step"&gt;
  &lt;/a&gt;
  The Next step
&lt;/h2&gt;

&lt;p&gt;If you're comfortable with the React framework library, this post by &lt;a class="mentioned-user" href="https://dev.to/olenadrugalya"&gt;@olenadrugalya&lt;/a&gt;
 is a fantastic way of familiarizing yourself with NextJS and its features.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/olenadrugalya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hA7FvS0u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--exTrSsNL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/443240/50a350f7-8199-4912-9add-bb54336cf107.jpg" alt="olenadrugalya image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/olenadrugalya/introduction-to-nextjs-3gi4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introduction to NextJS&lt;/h2&gt;
      &lt;h3&gt;Olena Drugalya ・ May 4 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#golden-rules-for-code-reviews"&gt;
  &lt;/a&gt;
  Golden rules for code reviews
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pavel_polivka"&gt;@pavel_polivka&lt;/a&gt;
 provides some really useful things to keep in mind the next time you are conducting a code review. You might even start enjoying them 😉 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pavel_polivka" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c-38J5xr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4IMf8hkB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/459371/ca45340e-2896-45d6-9cfa-c5d5a075b161.jpg" alt="pavel_polivka image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pavel_polivka/how-to-be-good-at-code-reviews-2lpl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to be good at Code Reviews&lt;/h2&gt;
      &lt;h3&gt;Pavel Polívka ・ May 5 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codereview&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-lookback"&gt;
  &lt;/a&gt;
  The lookback
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/adriantwarog"&gt;@adriantwarog&lt;/a&gt;
's mantra (&lt;em&gt;"1) Always improve, 2) Learn with projects, 3) Stay healthy, 4) Apply yourself, 5) Network, 6) Don't Burnout&lt;/em&gt;), gained from years of being a dev, is relevant to all of us. Thanks, Adrian!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/adriantwarog" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---c448bcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MyCRR8L9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/315465/bf5cc9f2-09da-451d-95dd-110563cf0a62.jpg" alt="adriantwarog image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/adriantwarog/what-i-learned-after-10-years-of-development-3an" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What I learned after 10 years of development&lt;/h2&gt;
      &lt;h3&gt;Adrian Twarog ・ May 9 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#opening-the-door-to-open-source"&gt;
  &lt;/a&gt;
  Opening the door to open source
&lt;/h2&gt;

&lt;p&gt;This is a fantastic "who, what, when, where, why" of contributing to open source by &lt;a class="mentioned-user" href="https://dev.to/ceeoreo"&gt;@ceeoreo&lt;/a&gt;
. Whether you've been meaning to contribute to open source projects for a while or you want to convince someone else in your life to do so, this post is a great resource. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ceeoreo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnpPqWlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xZCqZv2b--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/102841/e1a65308-9b86-49be-8dec-3a6ecac71489.jpeg" alt="ceeoreo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/codesandboxio/how-to-make-your-first-open-source-contribution-2oim" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Make Your First Open Source Contribution&lt;/h2&gt;
      &lt;h3&gt;Ceora Ford ・ May 6 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mastering-puppeteer"&gt;
  &lt;/a&gt;
  Mastering Puppeteer
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/sudarshansb143"&gt;@sudarshansb143&lt;/a&gt;
 thinks Puppeteer is one of the greatest tools available on the web in order to perform the automation regarding website or In-Browser Activities. By the end of this article, you might agree!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sudarshansb143" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGhxdEMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JJHy9OW4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618863/6be21068-6dfc-4fbb-808a-fa8b696b717c.jpg" alt="sudarshansb143 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sudarshansb143/productivity-hacks-using-puppeteer-81d" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Productivity Hacks Using Puppeteer  &lt;/h2&gt;
      &lt;h3&gt;Sudarshan Sawandkar ・ May 5 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>What is BEM in CSS?</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Tue, 11 May 2021 18:04:57 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/what-is-bem-in-css-43c7</link>
      <guid>https://dev.to/whitep4nth3r/what-is-bem-in-css-43c7</guid>
      <description>&lt;p&gt;Have you ever worked on an application with one huge CSS file and found that when you changed a style rule in one place, something unexpected happened somewhere else? I had this problem &lt;em&gt;a lot&lt;/em&gt; in my early days of front end development. It was frustrating! So what can you do to stop this from happening?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-need-to-scope-your-style-rules"&gt;
  &lt;/a&gt;
  You need to scope your style rules!
&lt;/h2&gt;

&lt;p&gt;To &lt;strong&gt;scope your CSS&lt;/strong&gt; means to encapsulate style rules in a systematic way so that they apply to one particular chunk of HTML only. CSS-in-JS solutions such as &lt;a href="https://styled-components.com/"&gt;Styled Components&lt;/a&gt; or &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS modules&lt;/a&gt; that ship with front end frameworks have largely solved this problem by scoping styles to your component templates as standard. This means you don't need to worry about classes in one component affecting the styling of another component — even if you use the same class name. Nice!&lt;/p&gt;

&lt;p&gt;But what if you're just starting out, and you want to focus on building out pure CSS in a systematic way without getting bogged down with CSS-in-JS?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-in-pure-css"&gt;
  &lt;/a&gt;
  Working in pure CSS
&lt;/h2&gt;

&lt;p&gt;In order to scope your styles in pure CSS, the aim is to declare your CSS classes specifically and solely for individual HTML components. Style rules should be purposefully verbose and self-documenting, without relying on inheritance or default browser behaviour. This type of system discourages the use of utility classes reused across multiple components because this is where you can run into the problems described at the beginning of the post. If you change the style properties of a utility class used in multiple components, &lt;em&gt;it could affect the layout of your whole application&lt;/em&gt; — sometimes with very undesirable results!&lt;/p&gt;

&lt;p&gt;Let's take a look at how we can harness the power of a system like &lt;strong&gt;BEM&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-bem-stand-for"&gt;
  &lt;/a&gt;
  What does BEM stand for?
&lt;/h2&gt;

&lt;p&gt;BEM stands for &lt;strong&gt;block, element, modifier&lt;/strong&gt;, and it's a super-handy system to help you scope CSS style properties to blocks of HTML. What's more, it encourages you to make your HTML and CSS descriptive and self-documenting — helping identify the purpose and intended function of the CSS classes in the code itself.&lt;/p&gt;

&lt;p&gt;Other class naming conventions exist alongside BEM to help you scope styles when writing HTML and CSS — such as OOCSS and SMACSS. You can even roll your own system! But the most important thing to remember is to use a system, stick to that system, and &lt;em&gt;make it work for you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So, how do we work with BEM?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#block-element-modifier"&gt;
  &lt;/a&gt;
  Block, element, modifier
&lt;/h2&gt;

&lt;p&gt;Let's take a look at the building blocks of BEM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#block-a-chunk-of-html-to-which-you-want-to-scope-styles"&gt;
  &lt;/a&gt;
  Block: a chunk of HTML to which you want to scope styles
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#element-any-element-inside-that-block-namespaced-with-your-block-name"&gt;
  &lt;/a&gt;
  Element: any element inside that block, namespaced with your block name
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.block__elementOne&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.block__elementTwo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modifier-a-flag-to-add-styles-to-an-element-without-creating-a-separate-css-class"&gt;
  &lt;/a&gt;
  Modifier: a flag to add styles to an element, without creating a separate CSS class
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.block__elementOne--modifier {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bem-syntax-conventions"&gt;
  &lt;/a&gt;
  BEM syntax conventions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use one or two underscores to separate the block name from the element name&lt;/li&gt;
&lt;li&gt;Use one or two dashes to separate the element name and its modifier&lt;/li&gt;
&lt;li&gt;Use descriptive class names in camelCase&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bem-in-context"&gt;
  &lt;/a&gt;
  BEM in context
&lt;/h2&gt;

&lt;p&gt;In context, your HTML using the above class names might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block__elementOne"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is an element inside a block.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"block__elementOne block__elementOne--modifier"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is an element inside a block, with a modifier.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In a real-life example, with more realistic class names, this might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container__paragraph"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a paragraph inside a container.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container__paragraph container__paragraph--bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    This is a paragraph inside a container, with a modifier that adds bold styling.
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the fully-declarative approach, where you don't rely on inheritance or default browser styles, your CSS classes might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container__paragraph&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container__paragraph--bold&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how any default browser behaviour we might take for granted has been declared in the above classes — such as &lt;code&gt;display: block&lt;/code&gt; on the &lt;code&gt;.container &amp;lt;div&amp;gt;&lt;/code&gt; element. This is an extremely useful way to ensure that if you need to switch up the HTML elements in your components — for example swapping the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; (default &lt;code&gt;display: block&lt;/code&gt;) for a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; (default &lt;code&gt;display: inline&lt;/code&gt;) in the above example — the resulting styles of your components are not affected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Using BEM is not going to solve &lt;em&gt;all&lt;/em&gt; your CSS problems (good luck with centring those &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements in your layouts!), but it can help you take a step in the right direction to making your CSS readable, descriptive, and safe from any unexpected results. Again, the most important thing to remember is to use a system, stick to that system, and &lt;em&gt;make it work for you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Check out my latest YouTube video that supports this post. Subscribe for more regular front end web development tips!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SND9SDdY0UM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And remember — build stuff, learn things, love what you do!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>CCS: Call for Papers</title>
      <author>Pachi 🪐 (she/her/ela)</author>
      <pubDate>Tue, 11 May 2021 17:50:11 +0000</pubDate>
      <link>https://dev.to/newrelic/ccs-call-for-papers-f9f</link>
      <guid>https://dev.to/newrelic/ccs-call-for-papers-f9f</guid>
      <description>&lt;p&gt;Hello and welcome back to our Content Creation Series!&lt;br&gt;
Today we will be talking about Call for Papers. What is a call for paper you ask?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is your ticket to speak in a conference!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nowadays with most events happening online, you can apply to speak in any conference as long as you speak the language. Public speaking is a great way to create not only content, but connections as well.&lt;/p&gt;

&lt;p&gt;Public speaking was one of my 2020 goals, but not on the top list because the idea of actually doing it was &lt;em&gt;scary&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But when my favorite conference, &lt;a href="https://codelandconf.com/"&gt;Codeland&lt;/a&gt; opened their call for papers, I really wanted to give it a try.&lt;/p&gt;

&lt;p&gt;Did I get accepted? &lt;strong&gt;Nope,&lt;/strong&gt; also, they went all online.&lt;/p&gt;

&lt;p&gt;But I learned a lot in the process and more after, and I wanted to share some advice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-have-to-be-an-expert"&gt;
  &lt;/a&gt;
  You don't have to be an Expert
&lt;/h2&gt;

&lt;p&gt;And this is usually the first thing that stops us. Like, I am not good enough at anything, so what will I talk about?&lt;/p&gt;

&lt;p&gt;Truth is, there will be always someone that knows more than you, but guess what? It goes the other way around too! People start in tech every day, so there is always someone learning from 0 and they may learn from you.&lt;/p&gt;

&lt;p&gt;Don't think about what you are an expert of, think in the lines of what you are passionate about, what are you comfortable with, what would you like to share?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brainstorm"&gt;
  &lt;/a&gt;
  Brainstorm
&lt;/h2&gt;

&lt;p&gt;Now, the first actual step is the Brainstorm.&lt;/p&gt;

&lt;p&gt;I know it seems obvious, but we often overthink this.&lt;/p&gt;

&lt;p&gt;So here is a little exercise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Get a pen and paper (yes, the real stuff),&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put a timer on for 15 minutes,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write down ANYTHING and everything that comes in mind that you could possibly talk about.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-Try to have at least 20 items on your list, but the more the merrier friend!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember, you don't have to be a PRO.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You may even use something You would like to learn more about, and working on this talk/workshop will help you to learn more about it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In case you need some help, here are some inspiring questions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What got you into Programming?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What keeps you in it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do you love about it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do you want to learn next?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are you learning currently?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What sorts of things do you love sharing with others about Programming?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What cool things have you built?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Which tools do you use all the time?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#classifying-your-ideas-and-picking-the-topic"&gt;
  &lt;/a&gt;
  Classifying your ideas and picking THE topic
&lt;/h2&gt;

&lt;p&gt;Okay, so now you have a nice long list full of ideas.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/lx7AtejahSmgIWmLX5/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lx7AtejahSmgIWmLX5/giphy.gif" alt="Person making a decision"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good ideas, random ideas, bad ideas... &lt;br&gt;
I bet some don't even make much sense at all and that is OK, that is why we brainstorm to begin with.&lt;/p&gt;

&lt;p&gt;But Pachi, now I have a gigantic list, how do I choose?&lt;/p&gt;

&lt;p&gt;How, indeed?&lt;/p&gt;

&lt;p&gt;Now you can get your laptop out if you want, or just keep the pen and paper, either is fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are going to classify your ideas.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, let's write out the ideas you think are bad ideas or the ones that don't make much sense.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now write down the ones that you think are good and you feel can actually lead somewhere.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last but not least, what is left? Probably topics you can improve or work in the near future. &lt;strong&gt;Save those.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How many "good" ideas do you have?&lt;/p&gt;

&lt;p&gt;If you have one or two, congrats, &lt;strong&gt;you have found your Topic&lt;/strong&gt; if not...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-based-on-where-you-wanna-present-it"&gt;
  &lt;/a&gt;
  Choosing based on where you wanna present it
&lt;/h2&gt;

&lt;p&gt;If you have more than that, we may still want to narrow it down.&lt;/p&gt;

&lt;p&gt;For that, let's now think about the conference you wanna speak.&lt;/p&gt;

&lt;p&gt;For the sake of this example, Codeland is the conference, and we will focus on Talk rather than a workshop.&lt;/p&gt;

&lt;p&gt;Let's go to their website, check their CFP and see what they are looking for:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Talks are 15 minutes. Pick from our themes below:&lt;br&gt;
&lt;strong&gt;Be Amazed&lt;/strong&gt;&lt;br&gt;
Exciting applications for new (non-proprietary) technologies.&lt;br&gt;
&lt;strong&gt;The Big Picture&lt;/strong&gt;&lt;br&gt;
Thought-provoking stories about how code is affecting society&lt;br&gt;
&lt;strong&gt;Deep Dive&lt;/strong&gt;&lt;br&gt;
Dives into fundamental concepts that could affect how we think about software development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now we know that the talks are 15 minutes and have an idea of what they are looking for. Which of our topics fits in? And from those, which one can you talk more comfortably about?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And ta daaaan, you have your topic! YEY!!!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-review"&gt;
  &lt;/a&gt;
  Let's review
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;We brainstorm and come up with as many ideas as we can, even if some are terrible, that is ok (check that list of questions for extra help), &lt;/li&gt;
&lt;li&gt;Classify those ideas, and see what you can work with right now,&lt;/li&gt;
&lt;li&gt;Think about where you want to present, and see which of your ideas fit their requirements and audience,&lt;/li&gt;
&lt;li&gt;Choose the one topic you will work with! (&lt;em&gt;Save the rest for later&lt;/em&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;All you need to get started is a topic!&lt;/p&gt;

&lt;p&gt;I hope this will help you to find the one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yey, I am soo happy for you.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/XbxZ41fWLeRECPsGIJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/XbxZ41fWLeRECPsGIJ/giphy.gif" alt="happy child"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are still in doubt in between a few, feel free to shout out and maybe I can help you to validate your ideas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#speaking-of-conferences"&gt;
  &lt;/a&gt;
  Speaking of conferences...
&lt;/h1&gt;

&lt;p&gt;I will be speaking on Future Stack this Month, and I would love for you to come watch! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/futurestack-relicans"&gt;FutureStack 2021&lt;/a&gt; is a free, online conference where New Relic is bringing together Data Nerds to learn, share, and get inspired about observability — while we have fun! &lt;br&gt;
&lt;a href="https://bit.ly/futurestack-relicans"&gt;You can sign up here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Xoxo,&lt;/p&gt;

&lt;p&gt;Pachi&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>events</category>
      <category>career</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Stateful, Serverless Database in React with the useReturn hook</title>
      <author>Michael Bagley</author>
      <pubDate>Tue, 11 May 2021 17:47:59 +0000</pubDate>
      <link>https://dev.to/mbagley1020/a-stateful-serverless-database-in-react-with-the-usereturn-hook-1p28</link>
      <guid>https://dev.to/mbagley1020/a-stateful-serverless-database-in-react-with-the-usereturn-hook-1p28</guid>
      <description>&lt;p&gt;As React developers, we often depend on the &lt;strong&gt;state&lt;/strong&gt; of the UI to make specific decisions about the functionality and business logic of our applications. This functionality includes how we query the data used in a given component.&lt;/p&gt;

&lt;p&gt;Keeping the data in a component fresh traditionally requires the use of callbacks, the &lt;code&gt;useEffect&lt;/code&gt; hook, or other observational methods, &lt;strong&gt;but what if our query was a hook in itself?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, in that case, a given query could &lt;strong&gt;automatically be re-fetched&lt;/strong&gt; whenever a stateful dependency changes. What if I also said this hook would be subscribed to any other uses of the database &lt;em&gt;across&lt;/em&gt; your project, re-fetching a &lt;strong&gt;return&lt;/strong&gt; query if an &lt;strong&gt;insert&lt;/strong&gt;, &lt;strong&gt;update&lt;/strong&gt;, or &lt;strong&gt;delete&lt;/strong&gt; was done somewhere else that could affect our query?&lt;/p&gt;

&lt;p&gt;Let's explore &lt;a href="https://easybase.io/react-database-app-tutorial/"&gt;Easybase's &lt;strong&gt;useReturn&lt;/strong&gt;&lt;/a&gt; hook which performs both of these tasks with an easy-to-use query builder to safely perform CRUD operations, in-code!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEasybase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;easybase-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EasybaseProvider&lt;/span&gt; &lt;span class="na"&gt;ebconfig&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ebconfig&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minRating&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMinRating&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useReturn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useEasybase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReturn&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BOOKS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                           &lt;span class="c1"&gt;// Select query&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rating&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;minRating&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;// rating &amp;gt; minRating&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                         &lt;span class="c1"&gt;// Only return 10&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minRating&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;                         &lt;span class="c1"&gt;// Dependencies&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Spinner&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;minRating&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setMinRating&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Minimum Rating"&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Card&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Example&lt;/code&gt; component automatically refreshes the given query from our Easybase table in the &lt;code&gt;frame&lt;/code&gt; variable! &lt;strong&gt;Two events will cause this refresh:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A variable in the dependencies array changes (similar to &lt;code&gt;useEffect&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Another instance of &lt;code&gt;db()&lt;/code&gt; was used to perform an operation that may affect the current query&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Easybase Table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NUrsWE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01su89pis5uwdradlamx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NUrsWE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01su89pis5uwdradlamx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can use the &lt;code&gt;Card&lt;/code&gt; component to demonstrate how the &lt;strong&gt;useReturn&lt;/strong&gt; hook subscribes to other uses of &lt;a href="https://easybase.github.io/EasyQB/"&gt;&lt;code&gt;db()&lt;/code&gt;&lt;/a&gt; across the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;released&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_key&lt;/span&gt; &lt;span class="p"&gt;}){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useEasybase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteButtonClicked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BOOKS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;_key&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;one&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;deleteButtonClicked&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Rating: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;rating&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Released: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;released&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aAl68mWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en2yyh7gg7o6hjuqs25x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aAl68mWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en2yyh7gg7o6hjuqs25x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each element from Easybase has a &lt;strong&gt;persistent, unique identifier&lt;/strong&gt; called &lt;code&gt;_key&lt;/code&gt; which we can use to &lt;a href="https://easybase.github.io/EasyQB/docs/update_queries.html"&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/a&gt; or &lt;a href="https://easybase.github.io/EasyQB/docs/delete_queries.html"&gt;&lt;strong&gt;Delete&lt;/strong&gt;&lt;/a&gt; specific records.&lt;/p&gt;

&lt;p&gt;Executing the &lt;code&gt;deleteButtonClicked&lt;/code&gt; function automatically refreshes the data in the &lt;strong&gt;useReturn&lt;/strong&gt; hook without callbacks! The &lt;strong&gt;useReturn&lt;/strong&gt; hook is subscribed to all other uses of &lt;code&gt;db()&lt;/code&gt; across the project that may affect the given query.&lt;/p&gt;




&lt;p&gt;I hope this brief introduction to the useReturn hook demonstrates how easy it is to have a stateful, automatically updating database frame in our components. For a more in-depth walkthrough, &lt;a href="https://easybase.io/react/"&gt;check out this piece here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for Reading!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Don't waste time building another API, let the machines make them for you with the Booster Framework!</title>
      <author>Javier Toledo</author>
      <pubDate>Tue, 11 May 2021 17:37:35 +0000</pubDate>
      <link>https://dev.to/boostercloud/don-t-waste-time-building-another-api-let-the-machines-make-them-for-you-with-the-booster-framework-4d2c</link>
      <guid>https://dev.to/boostercloud/don-t-waste-time-building-another-api-let-the-machines-make-them-for-you-with-the-booster-framework-4d2c</guid>
      <description>&lt;p&gt;Building a great API is not trivial, you have to design the data structure, choose the right connection mechanism, implement handlers for every endpoint, serialize/deserialize the data and validate it before accepting it in your business logic.&lt;/p&gt;

&lt;p&gt;In addition to that, it is often necessary to build API clients for front-end applications or for other services in order to make use of the functionality offered by your service.&lt;/p&gt;

&lt;p&gt;If you use &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;, the second part can definitely be simplified, as you can use any &lt;a href="https://github.com/apollographql/apollo-client"&gt;standard GraphQL client&lt;/a&gt; to query the system, but &lt;a href="https://blog.logrocket.com/why-you-shouldnt-use-graphql/"&gt;manually building and maintaining schemas and resolvers is still such a hassle that some teams might prefer to stay in REST&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#boost-your-api-with-cqrs"&gt;
  &lt;/a&gt;
  Boost your API with CQRS!
&lt;/h1&gt;

&lt;p&gt;The Booster Framework introduces a very different approach to building APIs: &lt;strong&gt;not doing it at all!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is only possible thanks to the opinionated implementation of &lt;a href="https://www.martinfowler.com/bliki/CQRS.html"&gt;the CQRS pattern&lt;/a&gt; and Booster's inference capabilities. Let's walk through &lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture"&gt;the structure of a typical Booster application&lt;/a&gt; before going back to APIs.&lt;/p&gt;

&lt;p&gt;In a Booster application, most functionality is defined in commands. A &lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture?id=_1-command-and-command-handlers"&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; is a data structure that has a handler, like this one that processes a backflip:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PerformABackflip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;personAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PerformABackflip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;luck&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personAge&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;luck&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PersonSurvivedABackflip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;callAnAmbulance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AmbulanceCalled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a command handler is processed, it finishes by writing one or more events into the event store. In this case, a &lt;code&gt;PersonSurvivedABackflip&lt;/code&gt; event for lucky or young people, or an &lt;code&gt;AmbulanceCalled&lt;/code&gt; for the rest of us 😅.&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture?id=_2-events"&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; is just a data structure that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Event&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PersonSurvivedBackflip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="cm"&gt;/* We define the `entityID` method to help Booster match 
  the event with the corresponding entity */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;entityID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These events are later &lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture?id=_4-entities-and-reducers"&gt;reduced into entities&lt;/a&gt; that represent the current state. The reduction is carried out by reducer functions that look like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Entity&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;backflipTrials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;backflipSuccesses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Reduces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PersonSurvivedBackflip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;reduceSurvival&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PersonSurvivedBackflip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;buildNextPersonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Reduces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AmbulanceCalled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;reduceFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AmbulanceCalled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;buildNextPersonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;buildNextPersonObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;backflipTrials&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;backflipSuccesses&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;successes&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;personName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;successes&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#securing-queries-with-read-models"&gt;
  &lt;/a&gt;
  Securing queries with Read Models
&lt;/h1&gt;

&lt;p&gt;At this point, the CQRS design helped us to separate the data schema that the system accepts (commands) from the state data schema (entities). This in itself already simplifies the API design: The API schema could just match the command and entity schemas, and we could call that a nice API. But before calling it a day, we need to make an extra consideration; Allowing direct API access to entities would mean no restrictions on data access, so private fields like password hashes or bank accounts would become accessible. That's why Booster adds Read Models to the mix.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.booster.cloud/#/chapters/03_booster-architecture?id=_5-read-models-and-projections"&gt;&lt;code&gt;ReadModels&lt;/code&gt;&lt;/a&gt; are eventual consistent caches of the internal state. They're not only a way to filter which fields you want to make accessible, but they can also aggregate related data or make small data transformations to optimize reads. Accessing read models is highly performant and they're updated in real-time when data changes, pushing these changes to the client applications. &lt;/p&gt;

&lt;p&gt;A typical read model that projects a single entity would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ReadModel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PersonReadModel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;backflipTrials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;backflipSuccesses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Projects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;projectPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currentState&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;PersonReadModel&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ProjectionResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PersonReadModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PersonReadModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backflipTrials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;entity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backflipSuccesses&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#inferring-apis-from-code"&gt;
  &lt;/a&gt;
  Inferring APIs from code!
&lt;/h1&gt;

&lt;p&gt;At this point, we could build a very nice, useful, and secure API by just copying the schemas from the classes decorated as &lt;code&gt;Command&lt;/code&gt; or &lt;code&gt;ReadModel&lt;/code&gt;, and &lt;a href="https://docs.booster.cloud/#/chapters/04_features?id=graphql-api"&gt;that's exactly what Booster does for you&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Booster analyzes the class structure of all classes decorated as &lt;code&gt;@Command&lt;/code&gt; or &lt;code&gt;@ReadModel&lt;/code&gt; in compile-time, generating metadata that is used in deploy time to &lt;a href="https://docs.booster.cloud/#/chapters/02_getting-started?id=_6-deployment"&gt;generate a GraphQL schema and provision all the cloud resources required to make the application work&lt;/a&gt;, including API gateways, lambda functions, containers, permissions, and even the database tables to store the events.&lt;/p&gt;

&lt;p&gt;For some people, this might look similar to maintaining the schema in a regular GraphQL schema file, because, at the end of the day, you're still expressing the schemas as &lt;code&gt;Command&lt;/code&gt; and &lt;code&gt;ReadModel&lt;/code&gt; classes, but Booster brings many extra advantages to the table:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Commands, Read Models, and all their usages are &lt;strong&gt;type-checked in compile-time&lt;/strong&gt;, reducing or eliminating the likelihood of making mistakes.&lt;/li&gt;
&lt;li&gt;No errors can be introduced when serializing/deserializing data because this is &lt;strong&gt;done transparently&lt;/strong&gt; by the framework.&lt;/li&gt;
&lt;li&gt;When you update a command or a read model, &lt;strong&gt;the API is updated automatically&lt;/strong&gt;, you don't need to change any other files.&lt;/li&gt;
&lt;li&gt;Resolvers are hidden under &lt;strong&gt;higher-level abstractions&lt;/strong&gt; like commands or read models, so you don't need to deal with low-level protocol nuances.&lt;/li&gt;
&lt;li&gt;All Read Models &lt;strong&gt;support WebSockets by default&lt;/strong&gt;, so there is no need to implement any extras for real-time support in your applications.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize, by writing highly semantic code and letting the machine do the heavy lifting, &lt;a href="https://booster.cloud"&gt;Booster&lt;/a&gt; allows you to build fully functioning real-time APIs in a breeze, making everything else work out of the box, and saving a ton of time that you can use to add new use cases, write better tests, or manage elusive corner cases.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-it"&gt;
  &lt;/a&gt;
  Try it!
&lt;/h1&gt;

&lt;p&gt;Booster is a 100% open-source project developed by &lt;a href="https://www.theagilemonkeys.com"&gt;The Agile Monkeys&lt;/a&gt;. You can &lt;a href="https://docs.booster.cloud/#/chapters/02_getting-started?id=installing-booster"&gt;get its full potential for free and with no hidden fees&lt;/a&gt;. The typical Booster application can be run on the free tier in &lt;a href="https://aws.amazon.com/"&gt;AWS&lt;/a&gt;, but it also has experimental support for &lt;a href="https://azure.microsoft.com/en-us/"&gt;Azure&lt;/a&gt; and &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;, so you can run it locally using &lt;a href="https://minikube.sigs.k8s.io/docs/"&gt;Minikube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Learn more about Booster on &lt;a href="https://booster.cloud"&gt;the official website&lt;/a&gt;, &lt;a href="https://docs.booster.cloud/#/"&gt;the documentation&lt;/a&gt;, or &lt;a href="https://github.com/boostercloud/booster"&gt;the Github project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you try it out, be sure to let us know what you thought of it on &lt;a href="https://discord.gg/bDY8MKx"&gt;the project’s Discord channel&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>api</category>
      <category>booster</category>
      <category>framework</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Strongly Typed Mongoose Models</title>
      <author>Kinanee Samson</author>
      <pubDate>Tue, 11 May 2021 17:16:04 +0000</pubDate>
      <link>https://dev.to/kalashin1/strongly-typed-mongoose-models-484j</link>
      <guid>https://dev.to/kalashin1/strongly-typed-mongoose-models-484j</guid>
      <description>&lt;p&gt;Good day guys, quite recently i made a post about setting up a nodejs with typescript, the article also talked about incorporating an express server plus mongodb and mongoose, incase you missed it you can read it &lt;a href="https://dev.to/kalashin1/setting-up-node-js-express-mongodb-and-mongoose-with-typescript-1c5h"&gt;here&lt;/a&gt;. In this article i am going to be focusing on utilizing the cool type system that come with TypeScript to build strongly typed mongoose models. &lt;/p&gt;

&lt;p&gt;By the way what the heck is mongoose? In case you are not familiar with mongoose, it is a javascript library that allows one to define a schema for modeling our data when we are working with mongodb. Most people would say one of the drawbacks of working with mongodb is that you can't define how your data will look like i.e you don't explicitly define the schema of your data. Personally i don't see this as a drawback but it can lead to all sort of headaches if you are not careful, you don't want a collection to be having some documents that contain a field for age while other documents do not, or you might even store the wrong data type for a field, say a string where a number is expected.&lt;/p&gt;

&lt;p&gt;Mongoose provides a solution for this by allowing us to define a schema for our data, this means that it allows us to define the structure of data so that all documents in a collection all have the same format to avoid inconsistencies in the collection. Mongoose also allows us to easily query our mongodb with it's set of already defined query functions and if you want something more granular you can extend the queries by defining your query helpers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-mongodb-and-mongoose"&gt;
  &lt;/a&gt;
  Installing Mongodb And Mongoose
&lt;/h3&gt;

&lt;p&gt;I would suggest that you spend some time going through the &lt;a href="https://mongoosejs.com/"&gt;official documentary&lt;/a&gt; to get more understanding about what you can do with mongoose. To use mongoose first you need to install mongoose, mongodb and the type definition for each respectively, you can see this &lt;a href="https://dev.to/kalashin1/setting-up-node-js-express-mongodb-and-mongoose-with-typescript-1c5h"&gt;article&lt;/a&gt; to learn how to install mongoose and mongodb with TypeScript. You have to ensure that you have TypeScript installed on the project because we are going to be utilizing the built in type system that comes along with TypeScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-to-a-mongodb-database"&gt;
  &lt;/a&gt;
  Connecting To A Mongodb Database
&lt;/h3&gt;

&lt;p&gt;We need to connect to a mongodb database using mongoose, the code block below demonstrates how to go about that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;your connection string to your mongodb database&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useCreateIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`app running on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt; Welcome &amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h3&amp;gt; We are building strongly typed mongoose models &amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have basic understanding of express and mongodb then the above wouldn't be too much of a problem to understand and for simplicity's sake we will focus our attention on only mongoose and not express or how a node js server works. If everything goes according to plan and your server is up and running, you should see &lt;code&gt;app running on port 3000&lt;/code&gt; in your terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-mongoose-schema"&gt;
  &lt;/a&gt;
  Creating a Mongoose Schema
&lt;/h3&gt;

&lt;p&gt;What the heck is a mongoose schema? A mongoose schema is basically an Object that will serve as the template from which we are going to create our Model. The model is just another name for a collection. Mongoose doesn't call them collections, they call them models while the schema is just the actual format that every document should look like. Well then let's create a schema;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create a Schema you need to import the Schema from mongoose, i destructured here to get the Schema but you could also do &lt;code&gt;import mongoose from 'mongoose'&lt;/code&gt; and then &lt;code&gt;const heroSchema = new mongoose.Schema({})&lt;/code&gt;. When we are creating a schema we pass in an object that has properties that will define the future structure of documents that will be a hero. We specified the data type that each field should hold using the type. This ensures that we can only store strings inside name field and so on and so forth. The required property ensures that we provide a value for this particular field when we are creating a new document to be added to the collection, if we don't it will throw off an error. We could also handle that error gracefully like the Queen of England. But i won't go into that here. Let's see how we can create a model and add a document to it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hero&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroDetails&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroDetails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clark Kent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHero&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have created our model but one thing, since we are working with TypeScript, naturally you would expect to see auto-completion and intellisence for the hero, but sadly we don't, and if we try to access a property on the current hero we get an error in our editor. This is because by default TypeScript will implicitly infer the Document type to our newly created hero. The hero has those properties we specified in the schema but TypeScript doesn't know that because by default the Document type doesn't have properties. How do we work around that? We need to create an interface that will extend from the Document interface, then we specify the contract on the interface and by contract i mean the values that any object that will implement our interface is supposed to have. We can now explicitly infer our schema and our model to be of that type. Here's a code example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Interface for documents, &lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;heroInterface&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Interface for collections strong typing to heroInterface&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;userInterface&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Explicitly typing our user to &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;heroInterface&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;heroInterface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hero&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;heroSchema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// explicitly typing the hero model to be of our heroModel type&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createHero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroDetails&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="nx"&gt;heroInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;heroModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroDetails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Clark Kent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHero&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have created an interface that extends from the Document class, this ensures that when we explicitly define the type for our &lt;code&gt;userSchema&lt;/code&gt; we pass in the &lt;code&gt;userInterface&lt;/code&gt; and we also ensure that the createHero function also returns a &lt;code&gt;userInterface&lt;/code&gt; now we can access the fields on the hero like the name and we get auto-completion and intellisence. Likewise we also strongly type our model, when you create a model you can explicitly type that model to a Document interface and or a Model interface. This just means providing interfaces that extends from those interface we can tell the editor more about about the model or the document.;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;userInterface&lt;/code&gt;, so we get the all the fields on the document&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;userModel&lt;/code&gt; so we get access to all methods on the model itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you create a new Schema, you can strongly type that schema to an interface that extends from the Document. Likewise models, we can strongly type a model to an interface that extends from the Model class. The beauty of this approach is that when working with a model or a document, you get access to the properties of the document and or instance/static methods defined on the model or the document.&lt;/p&gt;

&lt;p&gt;That's for that, i hope you learnt something today and this was helpful to you in some form. Feel free to extend this with your means on strongly typing your mongoose models in the comment section.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>node</category>
      <category>mongodb</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What you should know about Reactjs if you are a mobile developer</title>
      <author>Ignacio Mattos</author>
      <pubDate>Tue, 11 May 2021 17:07:46 +0000</pubDate>
      <link>https://dev.to/cloudx/what-you-should-know-about-reactjs-if-you-are-a-mobile-developer-44lc</link>
      <guid>https://dev.to/cloudx/what-you-should-know-about-reactjs-if-you-are-a-mobile-developer-44lc</guid>
      <description>&lt;p&gt;If you are a Mobile developer, it is very likely that, at some point, you will be asked to switch to web development, or even to develop an hybrid app.&lt;br&gt;
Has this already happened to you? You surely have noticed that there are a few differences between each type of app that you should consider before facing a new web project.&lt;/p&gt;

&lt;p&gt;In this post I’ll try to show some of those differences as we can see the similarities we can find among them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The great similarities between this two tools are most related with the fact that &lt;em&gt;React Native&lt;/em&gt; is a framework that implements &lt;em&gt;Reactjs&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pr1Pwrz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lhrk8ktmej9m209429h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pr1Pwrz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lhrk8ktmej9m209429h.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#some-of-the-main-diffs"&gt;
  &lt;/a&gt;
  Some of the main diffs
&lt;/h2&gt;

&lt;p&gt;These are some of the most visible things you’ll notice at first glance once you switch to &lt;em&gt;Reactjs&lt;/em&gt;. &lt;br&gt;
However, I’m not making the deepest possible comparison here, so some of you guys will probably find a more consistent way to make an intensive comparison.&lt;/p&gt;

&lt;p&gt;Anyway, I think you will find some of these points quite useful.&lt;/p&gt;

&lt;p&gt;At first, something important here is that, as &lt;em&gt;React Native&lt;/em&gt; is a &lt;a href="https://sofienebk.medium.com/what-is-the-difference-between-a-framework-and-library-2b712a1a1c41"&gt;&lt;em&gt;framework&lt;/em&gt;&lt;/a&gt;, you should have almost everything you need to develop an app from scratch in it. This is something that won’t happen with &lt;em&gt;Reactjs&lt;/em&gt;, which is just a &lt;em&gt;JS&lt;/em&gt; library. &lt;/p&gt;

&lt;p&gt;What does it mean? Basically in &lt;em&gt;React Native&lt;/em&gt; you use some features and components that are integrated with the framework and are not able outside it.&lt;br&gt;
For example, in &lt;em&gt;RN&lt;/em&gt; you use react-navigation to switch between your app screens, which is something that we won't have in &lt;em&gt;Reactjs&lt;/em&gt;, so it may be replaced by the implementation of &lt;a href="https://nextjs.org/"&gt;&lt;em&gt;Nextjs&lt;/em&gt;&lt;/a&gt; and its router.&lt;br&gt;
Or remember the &lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt; component? That is also a &lt;em&gt;RN&lt;/em&gt; component, so we'll need to use a Map instead. &lt;/p&gt;

&lt;p&gt;However, I didn’t say that external libraries implementation was forbidden or something. Even more, something that won't happen in &lt;em&gt;Reactjs&lt;/em&gt; is that, unlike &lt;em&gt;RN&lt;/em&gt;, the components style won't differ according to the OS nor the platform they are rendered in.&lt;/p&gt;

&lt;p&gt;And that's the point where you'll be pleased to know that there are some Component Libraries like &lt;em&gt;Chakra&lt;/em&gt;, &lt;em&gt;Bootstrap&lt;/em&gt; and &lt;a href="https://www.codeinwp.com/blog/react-ui-component-libraries-frameworks/"&gt;&lt;em&gt;many others&lt;/em&gt;&lt;/a&gt; you might have met in mobile development that, combined with some &lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;&lt;em&gt;JSX&lt;/em&gt;&lt;/a&gt;, will allow you to display your web app quickly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-components"&gt;
  &lt;/a&gt;
  The components
&lt;/h3&gt;

&lt;p&gt;Another thing you should know is that, unlike &lt;em&gt;React Native&lt;/em&gt;, &lt;em&gt;Reactjs&lt;/em&gt; uses a virtual DOM that compiles your &lt;em&gt;javascript&lt;/em&gt; code to &lt;em&gt;HTML&lt;/em&gt; and renders the app.&lt;br&gt;
This doesn’t happen in &lt;em&gt;RN&lt;/em&gt;: here you don’t have a thing like a DOM, and the &lt;em&gt;React-Native&lt;/em&gt; components are formed only by &lt;em&gt;JSX&lt;/em&gt;.&lt;br&gt;
You will notice that &lt;em&gt;HTML&lt;/em&gt; thing when you try to debug your app in the browser, so if you have skipped the basics, it is time to start reading.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In &lt;em&gt;Reactjs&lt;/em&gt;, for example, you won’t have a &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; component, so you should learn what a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ves82Hq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mwpa2ui21qiz3fdgu1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Ves82Hq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mwpa2ui21qiz3fdgu1y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-styling"&gt;
  &lt;/a&gt;
  The styling
&lt;/h3&gt;

&lt;p&gt;What happens with the &lt;em&gt;CSS&lt;/em&gt;? Are you used to the &lt;em&gt;React Native&lt;/em&gt; &lt;em&gt;StyleSheet&lt;/em&gt; class? Forget about it, it won’t accompany you anymore in &lt;em&gt;Reactjs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how you style a component using a &lt;em&gt;React Native&lt;/em&gt; StyleSheet class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="nx"&gt;A287&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="nx"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="na"&gt;decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Native&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;em&gt;this is the way&lt;/em&gt; you will do the same using basic &lt;em&gt;CSS&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="nx"&gt;A287&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="nx"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This must be imported from the &lt;code&gt;.css&lt;/code&gt; file to be able to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;Reactjs&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-you-wishing-to-start-a-web-app-yet-or-what"&gt;
  &lt;/a&gt;
  Are you wishing to start a web app yet or what?
&lt;/h2&gt;

&lt;p&gt;As you can see, it is not that difficult to switch to web development if you’ve learned the basics of &lt;em&gt;React&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Even the hardest issues are a matter of time until you get used to some new practices.&lt;/p&gt;

&lt;p&gt;If it’s helpful to say it, when I started programming in &lt;em&gt;React Native&lt;/em&gt;, it was very nice to avoid downloading an intricate and annoying emulator to run my code. As you are going to work with a browser, the only thing you'll have to think about is where to put your &lt;code&gt;console.log&lt;/code&gt;’s: no &lt;em&gt;Reload&lt;/em&gt; button, no external programs and no native APIs.&lt;/p&gt;

&lt;p&gt;So, if you think there is no such big deal to replace a &lt;code&gt;View&lt;/code&gt; by a &lt;code&gt;div&lt;/code&gt;, I hope I can see the progress of some React engineers here! ;)&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>mobile</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS and HTML Interview Questions and Answers [2020]</title>
      <author>angelo.miranda</author>
      <pubDate>Tue, 11 May 2021 17:07:26 +0000</pubDate>
      <link>https://dev.to/angelomiranda/css-and-html-interview-questions-and-answers-270l</link>
      <guid>https://dev.to/angelomiranda/css-and-html-interview-questions-and-answers-270l</guid>
      <description>&lt;p&gt;My last post 📮 on &lt;a href="https://dev.to/angelomiranda/top-10-javascript-interview-questions-and-answers-you-should-know-junior-and-senior-3943"&gt;JavaScript Interview Questions and Answers (Junior and Senior)&lt;/a&gt; got good feedback from dev.to community so I decided to complete the entire package. &lt;/p&gt;

&lt;p&gt;I have been interviewed and also interviewed engineers numerous 💯 times. Below are the most commonly asked HTML and CSS questions and answers that I have shortlisted that often come up that may be asked on your next front-end interview. &lt;/p&gt;

&lt;p&gt;Feel free to bookmark 🔖 if you don't need this for now. You may need to refresh/review down the road.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-interview-questions"&gt;
  &lt;/a&gt;
  CSS Interview Questions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-css-box-model"&gt;
  &lt;/a&gt;
  What is CSS Box model?
&lt;/h3&gt;

&lt;p&gt;The box model is a box that wraps around every HTML element.&lt;br&gt;
The box contains content, padding, border, and margin.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Content of the box is where text and images appear&lt;/li&gt;
&lt;li&gt;Padding is the area around the content. The padding is transparent&lt;/li&gt;
&lt;li&gt;Border is the border that goes around the padding and content&lt;/li&gt;
&lt;li&gt;Margin is the area outside the border. The margin is transparent&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#what-is-a-css-sprite"&gt;
  &lt;/a&gt;
  What is a CSS sprite?
&lt;/h3&gt;

&lt;p&gt;CSS sprites combine multiple images into one single larger image. This would only require one server request resulting in a faster loading time. Without CSS sprites, each image will send out individual server requests. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-a-css-preprocessor"&gt;
  &lt;/a&gt;
  What is a CSS preprocessor?
&lt;/h3&gt;

&lt;p&gt;A CSS preprocessor is a program that lets you generate CSS from the preprocessor’s own unique syntax. There are many CSS preprocessors to choose from and each one will add some features that don’t exist in pure CSS such as variables, mixin, nesting selector, and many more. These features make the CSS structure more readable and easier to maintain.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#explain-the-concept-of-specificity-in-css"&gt;
  &lt;/a&gt;
  Explain the concept of specificity in CSS.
&lt;/h3&gt;

&lt;p&gt;Specificity is the means by which browsers decide which CSS property values are the most relevant to an element that will be applied. Specificity applies a weight to a given CSS declaration, determined by the number of each selector type in the matching selector. When multiple declarations have equal specificity, the last declaration found in the CSS is applied to the element. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-important"&gt;
  &lt;/a&gt;
  What is !important?
&lt;/h3&gt;

&lt;p&gt;Important is used to provide more weight (importance) than normal property. &lt;br&gt;
It is used for overriding other styles that are declared elsewhere in order to achieve a certain design.&lt;br&gt;
We can think of important as the main priority so it needs to be applied and ignore other rules.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#explain-the-difference-between-visibility-hidden-and-display-none"&gt;
  &lt;/a&gt;
  Explain the difference between visibility: hidden and display: none?
&lt;/h3&gt;

&lt;p&gt;visibility: hidden hides the element, but it occupies space and affects the layout of the document.&lt;br&gt;
display: none also hides the element but not occupy space. It will not affect the layout of the document.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-the-different-ways-to-position-a-certain-element-in-css"&gt;
  &lt;/a&gt;
  What are the different ways to position a certain element in CSS?
&lt;/h3&gt;

&lt;p&gt;Position can be static, relative, absolute, fixed, and sticky&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static   is the default position value. The element will flow into the page as it normally would. The top, right, bottom, left and z-index properties do not work with static positioning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Relative element is adjusted relative to itself, without changing the layout &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Absolute element is removed from the flow of the page and positioned at a specified position relative to its closest positioned ancestor if any, or otherwise relative to the initial containing block. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fixed element is also removed from the flow of the page.  It is positioned relative to the viewport and doesn’t move when scrolled.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sticky element is a hybrid of relative and fixed positioning. The element is treated as relative positioned until it crosses a specified threshold, at which point it is treated as fixed positioned.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#what-does-boxsizing-borderbox-do"&gt;
  &lt;/a&gt;
  What does box-sizing: border-box do?
&lt;/h3&gt;

&lt;p&gt;This tells the browser to account for any border and padding with the element's width and height. This makes dealing with the sizes of elements much easier. It will also eliminate a number of pitfalls you can stumble while laying out your content.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-inline-inlineblock-and-block"&gt;
  &lt;/a&gt;
  What is the difference between inline, inline-block, and block?
&lt;/h3&gt;

&lt;p&gt;Block elements always start on a new line. They will also take space of an entire row. &lt;/p&gt;

&lt;p&gt;Inline elements don't start on a new line, These elements appear on the same line with the content and tags beside them.&lt;/p&gt;

&lt;p&gt;Inline-block elements are similar to inline elements, except they can have padding and margins added on all four sides.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-pseudoelement"&gt;
  &lt;/a&gt;
  What is pseudo-element?
&lt;/h3&gt;

&lt;p&gt;A pseudo-element allows you to manipulate parts of an element in a special way. You can use only one pseudo-element in a selector but It must appear after the simple selectors in the statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;   &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-pseudoclass"&gt;
  &lt;/a&gt;
  What is pseudo-class?
&lt;/h3&gt;

&lt;p&gt;A pseudo-class is a selector that selects elements that are in a specific state. Like regular classes, you can chain together as many pseudo-classes as you want in a selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;   &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-flexbox-and-grid"&gt;
  &lt;/a&gt;
  What is the difference between Flexbox and Grid?
&lt;/h3&gt;

&lt;p&gt;flexbox is a one-dimensional layout to create either a row or a column layout while grid Is a two-dimensional layout that can handle both row and column layout.&lt;/p&gt;

&lt;p&gt;Both approaches makes it easy to design and build a layout on web pages without writing a lot of CSS. &lt;/p&gt;

&lt;p&gt;A general rule to follow is to use flexbox if you need to define a layout as a row or a column. &lt;/p&gt;

&lt;p&gt;Use a grid If you want to define a grid and place the content into it.&lt;/p&gt;

&lt;p&gt;You can also mix these two together.&lt;/p&gt;

&lt;p&gt;Don't like reading and prefer a video? No problem, got you covered - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/x7kitMtqCtE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#html-interview-questions"&gt;
  &lt;/a&gt;
  HTML Interview Questions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-html-entities"&gt;
  &lt;/a&gt;
  What are HTML Entities?
&lt;/h3&gt;

&lt;p&gt;HTML entities are a piece of text ("string") that begins with an ampersand ( &amp;amp; ) and ends with a semicolon ( ; ) . They are frequently used to display reserved (which would otherwise be interpreted as HTML code), and invisible characters (like non-breaking spaces).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-semantic-elements-in-html"&gt;
  &lt;/a&gt;
  What are semantic elements in HTML?
&lt;/h3&gt;

&lt;p&gt;Semantic elements are HTML elements that represent its meaning to the browser and developer about its contents. Elements like , , and &lt;/p&gt;
&lt;p&gt; are semantic elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-meta-tags"&gt;
  &lt;/a&gt;
  What are meta tags?
&lt;/h3&gt;

&lt;p&gt;Meta tags are HTML tags that can be included in webpages that describe what the web page is about. These tags are not displayed on the page itself but are read by search engines like google.com and web crawlers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-two-types-of-web-storage-in-html5"&gt;
  &lt;/a&gt;
  What are two types of Web Storage in HTML5?
&lt;/h3&gt;

&lt;p&gt;Session Storage stores data of the current session. Data stored in session storage is cleared automatically when the browser is closed.&lt;br&gt;
Local Storage data is not deleted automatically when the current browser window is closed.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-web-workers"&gt;
  &lt;/a&gt;
  What are web workers?
&lt;/h3&gt;

&lt;p&gt;A web worker is a JavaScript code that runs on a separate thread. It is used to compute long and heavy tasks as it doesn’t affect the performance of the page.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-html"&gt;
  &lt;/a&gt;
  What is HTML?
&lt;/h3&gt;

&lt;p&gt;HTML or HyperText Markup Language is the standard markup language for creating web pages. It is used to structure a web page and its content.&lt;br&gt;
(Add this on top right card)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-html-attributes"&gt;
  &lt;/a&gt;
  What are HTML attributes?
&lt;/h3&gt;

&lt;p&gt;HTML attributes are additional information on html tags that change the way the html element behaves or is displayed. Attributes are specified directly after the opening name of the tag, inside the two angled brackets.&lt;br&gt;
(Add this on top right card)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are%C2%A0dataattributes-good-for"&gt;
  &lt;/a&gt;
  What are data-attributes good for?
&lt;/h3&gt;

&lt;p&gt;Data attribute lets you assign custom data to an element to store more information or data when no suitable HTML5 element or attribute exists.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-id-and-the-class-attribute"&gt;
  &lt;/a&gt;
  What is the difference between   ‘id’ and the ‘class’ attribute?
&lt;/h3&gt;

&lt;p&gt;ID is only used to identify one single element. Class can be used to identify more than one HTML element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-is-the-purpose-of-the%C2%A0alt%C2%A0attribute-on-images"&gt;
  &lt;/a&gt;
  What is the purpose of the alt attribute on images?
&lt;/h3&gt;

&lt;p&gt;The alt attribute provides alternative information in case the user cannot view the image. This attribute can be also used for accessibility.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-are-the-differences-between-inline-and-blocklevel-elements"&gt;
  &lt;/a&gt;
  What are the differences between inline and block-level elements?
&lt;/h3&gt;

&lt;p&gt;Inline elements just take up the space that is absolutely necessary for the content and does not start from a new line. Block elements start on a new line and consume the full width of the page available.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-can-we-create-a-hyperlink-in-html"&gt;
  &lt;/a&gt;
  How can we create a hyperlink in HTML?
&lt;/h3&gt;

&lt;p&gt;An anchor tag or &lt;a&gt; tag is used to create hyperlinks. This creates a path between two different HTML web pages.&lt;br&gt;
(Add this on top right card)&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#name-the-three-list-types-in-html"&gt;
  &lt;/a&gt;
  Name the three list types in HTML
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ordered list displays elements in a numbered format where order of items matter&lt;/li&gt;
&lt;li&gt;Unordered list displays elements in a bulleted format where order of items does not matter &lt;/li&gt;
&lt;li&gt;Definition list displays elements in definition form like in a dictionary. It contains key-value pairs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't like reading and prefer a video? No problem, got you covered - &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/e2RoTljg3BM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Besides the list of HTML and CSS questions I have, is there anymore questions you asked or you have been asked that you may want to add? Please add it on the discussion below.&lt;/p&gt;

&lt;p&gt;Thank you and happy coding!&lt;/p&gt;



</description>
      <category>jobinterview</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How I got better at e-learning by ignoring the completion bar</title>
      <author>miffens</author>
      <pubDate>Tue, 11 May 2021 17:03:21 +0000</pubDate>
      <link>https://dev.to/miffens/how-i-got-better-at-e-learning-by-ignoring-the-completion-bar-5060</link>
      <guid>https://dev.to/miffens/how-i-got-better-at-e-learning-by-ignoring-the-completion-bar-5060</guid>
      <description>&lt;p&gt;Intellectually ambitious but with limited spoons, I've experienced the blessing and curse that is the abundance of e-learning resources. With these resources accessible as e-books, video lessons, and interactive exercises that tailor to all levels, it paints the picture that anyone could learn this desired skill, if only they had the discipline to finish it all.&lt;/p&gt;

&lt;p&gt;However, in striving to meet all needs, course curricula extend to such a length that the time commitment to complete all of it becomes a hurdle. It's common to bookmark or purchase but never begin, or fade out within the first 10%.&lt;/p&gt;

&lt;p&gt;After trial and error, I found that this linear, 100%-completion oriented approach was a red herring goal I needed to unlearn. If I lose steam on a course, it's usually not a lack of discipline, &lt;strong&gt;but a signal the current lessons aren't valuable enough to me for the effort I have to invest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here are some ways I've responded to that signal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Skip ahead to lessons that sound more interesting.&lt;/strong&gt; These may require skipped lessons as a prerequisite. With a better understanding of the other lesson's purpose, I have renewed motivation to work through it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Know when to prioritize breadth.&lt;/strong&gt; Full absorption of every lesson through replay and exercises without peeking at the answer might have caused too much friction. If deep understanding isn’t urgent, I'll decide that a single pass is enough on the remainder. In contrast to fizzling out early on over-engagement and being unaware of the other course topics, I can recognize key words and know exactly where to go for deeper understanding.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Know when to prioritize depth.&lt;/strong&gt; Identifying the 2 out of 10 chapters most relevant to me and deciding the other 8 would give diminishing returns is liberating. Then, I can study those two extra carefully and move on to the next course sooner.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Research a different course/ learning medium.&lt;/strong&gt; Learning from another resource that offers a more intuitive teaching style for me could save tons of energy.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Identify other higher priorities.&lt;/strong&gt; Am I unmotivated because there's no real urgency? Is there another more fulfilling place to spend the same time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These approaches have helped me maintain momentum that I otherwise would have lost, and see self-experimentation an investment to account for in my learning pace expectations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-design-challenge-for-elearning-platforms"&gt;
  &lt;/a&gt;
  A Design Challenge for E-Learning Platforms
&lt;/h2&gt;

&lt;p&gt;As an e-learner, my main goal is to upskill through a learning path that works best for me. But what does the typical resource signal with its user interface? Completion is everything. Follow the path. Stay the Course. Get that check mark of success.&lt;/p&gt;

&lt;p&gt;Completion bars, next lesson autoplay, disabling future lessons until preequisites are met, make the cherrypicking approach not readily discoverable. Furthermore, even if I know I extracted the most valuable pieces of the course, the unsatisfying misalignment in the sad faded unwatched videos and the happy checked ones make me feel like a poor student.&lt;/p&gt;

&lt;p&gt;What would a site that facilitates and rewards a variety of learning styles and goals look like? How could a user interface celebrate nonlinear, cherrypicked learning? Could a workflow guide users through that curation process, or self discovery of one's learning style?&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>mentalhealth</category>
      <category>productivity</category>
      <category>ux</category>
    </item>
    <item>
      <title>10 reasons why I love Material-UI</title>
      <author>Anjan Shomodder</author>
      <pubDate>Tue, 11 May 2021 17:01:30 +0000</pubDate>
      <link>https://dev.to/thatanjan/10-reasons-i-love-material-ui-15c8</link>
      <guid>https://dev.to/thatanjan/10-reasons-i-love-material-ui-15c8</guid>
      <description>&lt;p&gt;I tried material-ui for the first time back in 2020 for one of my project. From then I have really become a fan of it. It is really beautiful and elegant.  Material ui has everything that you need for a modern website.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-why-would-you-want-to-use-a-ui-framework-instead-of-custom-css-styling"&gt;
  &lt;/a&gt;
  Now why would you want to use a ui framework instead of custom css styling?
&lt;/h3&gt;

&lt;p&gt;The reason might be: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You are not good at css or you don't like it.&lt;/li&gt;
&lt;li&gt;Css from scratch is too much work.&lt;/li&gt;
&lt;li&gt;You are in a hurry.&lt;/li&gt;
&lt;li&gt;You are terrible at design and so on...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see 10 reasons why you should try material-ui:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Beautiful design: Material-ui is based on Material design. And It is developed by Google. It is well tested design by professionals. And it is so beautiful. If you have visit any kind of google website, you will find a common design. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-gSkxL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bj13ymg0g98yxzieups.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-gSkxL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bj13ymg0g98yxzieups.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is material design. It is clean, colors are good for the eyes and nice animations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Huge amount of Components: Material-ui has huge amount of components. It has everything that you need. You can create from simple to complex websites easily.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS in JS: It simply means writing your css styles with javascript but with much more flexiblity. It gives you unique class names. You can use them for making the styles scoped to the component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customizable: You can customize Material-ui however you want. You can use custom css with makeStyles. Or you can customize the whole theme. You can change every style of any class.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grid System: This is my favorite feature of this framework. You can create complex responsive layout with Material-ui Grid.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Icons: Material-ui comes with over 1000 icons. They are really customizable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tree Shaking: It removes all the unused code from package for the production build. That's how website can load faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great Docs: Material-ui docs are one of the best docs I have ever seen. It has everything that you need to know.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript support: Material-ui supports typescript out of the box. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Great Community: Material-ui is very popular and it has a large and great community. If you face any problem, the community members will try their best to help you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is why you should use Nextjs. Nextjs is the most popular framework for React because of its awesome features. And there are more things to explore.&lt;/p&gt;

&lt;p&gt;So, if you are using nextjs, why are you using it?  And if you haven't tried it, then which of its feature is more interesting to you? Are you going to try it?&lt;/p&gt;

&lt;p&gt;Please put your answers on the comment box. I would love to hear from you. Also if you like this blog then give it a 💖 reaction. If you have any question, then you can connect to me on any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.  &lt;/p&gt;

&lt;p&gt;I am creating a course about material-ui. In this course, you are going to learn about everything you need to know about material-ui. I would highly recommend you to watch the series.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=grjle8AcQRs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgD1wdbU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://img.youtube.com/vi/grjle8AcQRs/0.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So SUBSCRIBE to my youtube channel &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am writing this blog on my website. I would be glad if you visit the&lt;br&gt;
website &lt;a href="https://culescoding.space/"&gt;Cules Coding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until then, stay safe and be happy 🙂&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#who-am-i"&gt;
  &lt;/a&gt;
  Who am I?
&lt;/h4&gt;

&lt;p&gt;My name is Anjan. I am a full stack web developer from Dhaka, Bangladesh.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-problems-do-i-solve"&gt;
  &lt;/a&gt;
  What problems do I solve?
&lt;/h4&gt;

&lt;p&gt;I can create complex full stack web applications like social media application, blogging, e-commerce website and many more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;I love to solve problems and develop new ideas. I also enjoy sharing my knowledge to other people who are wiling to learn. That's why I write blog posts and run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#think-we-should-work-together"&gt;
  &lt;/a&gt;
  Think we should work together?
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#feel-free-to-contact-me"&gt;
  &lt;/a&gt;
  Feel free to contact me
&lt;/h5&gt;

&lt;p&gt;Email: &lt;a href="mailto:anjancules@gmail.com"&gt;anjancules@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;portofolio: &lt;a href="https://anjan.vercel.app/"&gt;anjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#about-my-channel"&gt;
  &lt;/a&gt;
  About My channel:
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#why-would-you-subscribe-to-cules-coding"&gt;
  &lt;/a&gt;
  Why would you subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt; Cules Coding &lt;/a&gt; will teach you full stack development. I will teach you not only the basic concepts but also the advanced concepts that other youtube channels don't cover. I will also teach you Data Structures and Algorithms with abstraction and without Math. You will also find many tutorials about developer tools and technologies. I also explain advanced concepts and technologies with simplicity.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-what-are-you-waiting-for"&gt;
  &lt;/a&gt;
  So what are you waiting for?
&lt;/h4&gt;

&lt;p&gt;Subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; so that my friend you don't miss any of these cool stuffs.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>material</category>
    </item>
  </channel>
</rss>
