<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to do wiring in VanillaJS</title>
      <author>Tarandeep Singh</author>
      <pubDate>Mon, 09 Aug 2021 23:46:54 +0000</pubDate>
      <link>https://dev.to/tarandeep_singh/how-to-do-wiring-in-vanillajs-36gh</link>
      <guid>https://dev.to/tarandeep_singh/how-to-do-wiring-in-vanillajs-36gh</guid>
      <description>&lt;p&gt;After an unbelievable start to my blogging journey, with my first two blogs crossing over 120+ bookmarks combined, here I am with my third blog! This time around we are going to touch on the basics of JavaScript.&lt;/p&gt;

&lt;p&gt;"VanillaJS" is a term that developers use to describe regular JavaScript. It means using the inbuilt JavaScript methods and objects without any additional libraries or frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-vanillajs"&gt;
  &lt;/a&gt;
  Why VanillaJS?
&lt;/h3&gt;

&lt;p&gt;So why use VanillaJS instead of libraries or frameworks? Well, we gotta admit libraries like ReactJS are just amazing but VanillaJS is faster than any other JavaScript framework because it has fewer overheads. Moreover, Using frameworks or libraries in JS is a little like using Bootstrap or Tailwind in CSS, we might miss out on the fundamentals, it eliminates control over your abilities to solve the problem in a different most probably in a better way. For beginners, it's better to start off with VanillaJS and then shift to any framework with the confidence of knowing what actually is going on in that framework!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-wiring"&gt;
  &lt;/a&gt;
  What is wiring?
&lt;/h3&gt;

&lt;p&gt;Wiring is basically connecting different components with a wire. Pretty much like we did in electric circuits while studying physics! Remember connecting a bulb, switch and battery using a wire? That's it! So connecting different code components like input, output and processing is what we are aiming for.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZITgZWUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejdn2b8folbqi9vi77mc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZITgZWUT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejdn2b8folbqi9vi77mc.jpg" alt="circuit image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wiring-a-button"&gt;
  &lt;/a&gt;
  Wiring a Button
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a button in HTML &amp;amp; give it an id &lt;code&gt;&amp;lt;button id="btn-click"&amp;gt;Click&amp;lt;/button&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Refer button using &lt;code&gt;querySelector()&lt;/code&gt; in "app.js" &lt;code&gt;var btnClick = document.querySelector("#btn-click");&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add event listener to button &lt;code&gt;btnClick.addEventListner("click", function clickEventHandler() {
})&lt;/code&gt;
If you are an absolute beginner then do read about the querySelector(), event listener &amp;amp; callbacks in JavaScript at &lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Docs&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#wiring-a-textarea-input"&gt;
  &lt;/a&gt;
  Wiring a textarea input
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;textarea&lt;/code&gt; input tag &amp;amp; give it an id &lt;code&gt;&amp;lt;textarea id="txt-input"&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now refer it in js file &lt;code&gt;var txtInput = document.querySelector("#txt-input");&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Read the &lt;code&gt;value&lt;/code&gt; of the tag. You can do this only inside event. For this we are using the same event listener we wrote in 3rd point of 'Wiring a Button' &lt;code&gt;btnClick.addEventListner("click", function clickEventHandler() { txtInput.value;
})&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#wiring-a-div-to-show-output"&gt;
  &lt;/a&gt;
  Wiring a div to show output
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create an output &lt;code&gt;div&lt;/code&gt; with an id &lt;code&gt;&amp;lt;div id="output"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Refer it in js &lt;code&gt;var outputDiv = document.querySelector("#output");&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;innerText&lt;/code&gt; to write to this div dynamically when button click happens &lt;code&gt;btnClick.addEventListner("click", function clickEventHandler() { outputDiv.innerText = txtInput,value;
})&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now our wiring is complete and the web app is ready to take input in &lt;code&gt;textarea&lt;/code&gt; and &lt;code&gt;onclick&lt;/code&gt; of a button it'll show output in our output &lt;code&gt;div&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;Using this simple concept I have made two fun translator web apps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Minion Translator: &lt;a href="https://minions-bananas.netlify.app/"&gt;See it in action!&lt;/a&gt; | &lt;a href="https://github.com/Tarandeep-s1ngh/Banana-language-translator"&gt;View Source Code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Yoda Translator: &lt;a href="https://yodatalks.netlify.app/"&gt;See it in action!&lt;/a&gt; | &lt;a href="https://github.com/Tarandeep-s1ngh/Yoda-Speak-Translator"&gt;View Source Code&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfFS06qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwf8b6zrmjqai2jue9w.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfFS06qG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwf8b6zrmjqai2jue9w.jpg" alt="minion translator app image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this one! You can check out my other blogs &lt;a href="https://dev.to/tarandeep_singh"&gt;here.&lt;/a&gt;&lt;br&gt;
Do tell me in the comments if you would like the next blog to be on ReactJS!&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/Tarandeep_s1ngh"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/tarandeep-s1ngh/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>In Memory of Abel Wang</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 09 Aug 2021 22:58:28 +0000</pubDate>
      <link>https://dev.to/n3wt0n/in-memory-of-abel-wang-fam</link>
      <guid>https://dev.to/n3wt0n/in-memory-of-abel-wang-fam</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abel Wang&lt;/strong&gt; (1972-2021) was Principal Program Manager, Technical Assistant to the CTO of Azure at Microsoft. &lt;/p&gt;

&lt;p&gt;For many years he was a DevOps enthusiast, and in fact he worked as DevOps Lead and Advocate in the Donovan Brown's team until the recent promotion.&lt;/p&gt;

&lt;p&gt;You may know him by his nickname &lt;em&gt;AbelSquidHead&lt;/em&gt;. He used to be a speaker at many technical events and conferences, and also either a host or guest of countless videos.&lt;/p&gt;

&lt;p&gt;Abel was hands down one of the &lt;strong&gt;most passionate DevOps practitioners&lt;/strong&gt; I've ever had the pleasure to listen to. Actually, he was one of the most passionate people in everything he did.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;He passed away in July 2021&lt;/strong&gt;, cancer took him away.&lt;/p&gt;

&lt;p&gt;This is my small tribute to him, to one of the best of us all.&lt;/p&gt;

&lt;p&gt;In memory of Abel Wang. Rest in Peace. You are and will always be &lt;strong&gt;sorely missed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ortp-e5T_8Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/Ortp-e5T_8Q"&gt;Link to the video: https://youtu.be/Ortp-e5T_8Q&lt;/a&gt;&lt;/p&gt;

</description>
      <category>abel</category>
      <category>devops</category>
      <category>microsoft</category>
      <category>abelsquidhead</category>
    </item>
    <item>
      <title>Metodologías CSS</title>
      <author>Marcial Ambriz</author>
      <pubDate>Mon, 09 Aug 2021 22:25:56 +0000</pubDate>
      <link>https://dev.to/marskdev/metodologias-css-2pg2</link>
      <guid>https://dev.to/marskdev/metodologias-css-2pg2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#metodolog%C3%ADas-css"&gt;
  &lt;/a&gt;
  Metodologías CSS
&lt;/h1&gt;

&lt;p&gt;Una de las cosas difíciles en el desarrollo web y programación en general es el nombramiento de las cosas y el nombramiento en CSS no es diferente.&lt;/p&gt;

&lt;p&gt;Cuando trabajas en un proyecto pequeño el nombramiento no es una prioridad pero si es una buena practica, todo cambia cuando se convierte en un proyecto grande, entonces el nombramiento se vuelve primordial, mantener el rastro de todos los selectores se vuelve un caos sin una convención de nombres, usar alguna hará la tarea fácil.&lt;/p&gt;

&lt;p&gt;El código se volverá sencillo de leer, mantener y modificar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qu%C3%A9-es-la-convenci%C3%B3n-de-nombres"&gt;
  &lt;/a&gt;
  ¿Qué es la convención de nombres?
&lt;/h2&gt;

&lt;p&gt;Una convención de nombres es un conjunto de reglas para la elección de la secuencia de caracteres que se utilice para identificadores que denoten variables, tipos, funciones y otras entidades en el código fuente y la documentación.&lt;/p&gt;

&lt;p&gt;Algunas de las razones para utilizar esta metodología son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reducir el esfuerzo para leer y entender el código fuente.&lt;/li&gt;
&lt;li&gt;Mejorar la claridad y apariencia del código fuente.&lt;/li&gt;
&lt;li&gt;Ayuda a evitar conflictos de nombres.&lt;/li&gt;
&lt;li&gt;Mejora la comprensión en la reutilización de código.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://es.wikipedia.org/wiki/Convenci%C3%B3n_de_nombres_(programaci%C3%B3n)"&gt;Ver en Wikipedia&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;En lenguajes de programación como JavaScript se utilizan convenciones para nombrar variables, tipos, funciones y algunos otros, dependiendo el caso de uso es el tipo de convención que se utiliza.&lt;/p&gt;

&lt;p&gt;En CSS se utiliza kebab-case, este es una convención bastante estándar en CSS, lo podemos ver incluso en las propiedades de los selectores.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#metodolog%C3%ADas-que-puedes-implementar"&gt;
  &lt;/a&gt;
  Metodologías que puedes implementar
&lt;/h2&gt;

&lt;p&gt;Los siguientes son convenciones de nombres que puedes usar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#BEM"&gt;BEM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#bem"&gt;
  &lt;/a&gt;
  BEM
&lt;/h3&gt;

&lt;p&gt;BEM (Bloque, Elemento, Modificador) tiene un enfoque en componentes en el desarrollo web. La idea de esta metodología es separar la interfaz de usuario dentro de bloques independientes. Esto hace el desarrollo de interfaces fácil y rápido incluso con una UI compleja y permite la reutilización de código creando pequeños componentes.&lt;/p&gt;

&lt;p&gt;Estos son los 3 problemas que esta convención de nombres trata de resolver:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Saber lo que hace un selector con solo mirar su nombre.&lt;/li&gt;
&lt;li&gt;Tener una idea donde puede ser usado un selector con solo mirarlo.&lt;/li&gt;
&lt;li&gt;Saber la relación entre los nombres de las clases con solo mirarlas.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-post__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Tittle Post&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-post__body card-post__body_hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here should there some text.&lt;span class="nt"&gt;&amp;lt;p/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El bloque describe el propósito, el elemento compone una parte del bloque, separado con doble guión bajo &lt;code&gt;__&lt;/code&gt; y el modificador define la apariencia separado por un solo guión bajo &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sintaxis"&gt;
  &lt;/a&gt;
  Sintaxis
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.block__element_modifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;En la comunidad de BEM hay otra forma de separar el modificador con dos guiones &lt;code&gt;--&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.block__element--modifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Conoce más sobre &lt;a href="https://en.bem.info"&gt;BEM&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smacss"&gt;
  &lt;/a&gt;
  SMACSS
&lt;/h3&gt;

&lt;p&gt;SMACSS (Scalable and Modular Architecture for CSS) es una guía que estructura los estilos en categorías. Es una forma de examinar el proceso de diseño y adaptarlos a un pensamiento flexible. Esta metodología trata de documentar el diseño con un enfoque coherente para el desarrollo los estilos de un sitio.&lt;/p&gt;

&lt;p&gt;Hay 5 tipos de categorías:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Base&lt;/li&gt;
&lt;li&gt;Layout&lt;/li&gt;
&lt;li&gt;Module&lt;/li&gt;
&lt;li&gt;State&lt;/li&gt;
&lt;li&gt;Theme&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;La idea de esta metodología es dividir código en categorías. El mayor propósito es codificar patrones para su reutilización.&lt;/p&gt;

&lt;p&gt;Conoce más sobre &lt;a href="http://smacss.com"&gt;SMACSS&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#itcss"&gt;
  &lt;/a&gt;
  ITCSS
&lt;/h3&gt;

&lt;p&gt;ITCSS representa un triangulo invertido de CSS y la principal filosofía es ayudarte a organizar los archivos CSS del proyecto de tal manera que des un mejor trato al global name-space, la cascada y los selector específicos.&lt;/p&gt;

&lt;p&gt;Conoce más sobre &lt;a href="https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/"&gt;ITCSS&lt;/a&gt; mira  &lt;a href="https://dev.to/helleworld_/how-i-use-itcss-to-organize-my-sass-styles-1iec"&gt;como usarlo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#oocss"&gt;
  &lt;/a&gt;
  OOCSS
&lt;/h3&gt;

&lt;p&gt;OOCSS (Object-Oriented CSS) tiene el propósito de fomentar la reutilización de código y el fácil mantenimiento de las hojas de estilos.&lt;/p&gt;

&lt;p&gt;OCSS se centra en dos principales principios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separación de la estructura de la apariencia.&lt;/li&gt;
&lt;li&gt;Separar el contenedor del contenido.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conoce más sobre &lt;a href="https://www.smashingmagazine.com/2011/12/an-introduction-to-object-oriented-css-oocss/"&gt;OOCSS&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amcss-suit-css-amp-acss"&gt;
  &lt;/a&gt;
  AMCSS, SUIT CSS &amp;amp; ACSS
&lt;/h3&gt;

&lt;p&gt;Estas tres ultimas considero que es avanzado para principiantes. Pero si tienes curiosidad puedes pasar a visitarlos &lt;a href="https://amcss.github.io"&gt;AMCSS&lt;/a&gt; , &lt;a href="https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md"&gt;SUIT CSS&lt;/a&gt; &lt;a href="https://acss.io"&gt;ACSS&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fuentes"&gt;
  &lt;/a&gt;
  Fuentes
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Organizing"&gt;MDN&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>sass</category>
    </item>
    <item>
      <title>Understand One-way Data Binding in React the easy way!</title>
      <author>Parnika-Gupta</author>
      <pubDate>Mon, 09 Aug 2021 22:07:40 +0000</pubDate>
      <link>https://dev.to/parnikagupta/one-way-data-binding-in-react-30ea</link>
      <guid>https://dev.to/parnikagupta/one-way-data-binding-in-react-30ea</guid>
      <description>&lt;p&gt;React is a popular JavaScript library for many reasons and one of the reasons is “one-way data binding”. If you want to understand React to its core, you should read along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s a one-way road for the data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React apps are made up of carefully organized components. These components receive arguments(props) and return information using the return value of the render function. When data flows from the parent to the child component, it is known as the unidirectional flow of data.&lt;/p&gt;

&lt;p&gt;Parent component passes information to child component using props. But it is also possible that a child component might end up requiring to change something in the UI. What to do in that case?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it possible to pass data from the child to parent component?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What if clicking a button in the child component changes the text in the parent component? How do we make sure that the parent component is aware that a button is clicked that is supposed to change its text?&lt;/p&gt;

&lt;p&gt;This is achieved by the parent component by passing a callback function as a prop when calling the child component. The child component now calls this function when the button is clicked. This provides the parent component with all the required information about the state of the child component or the user actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before anything else, it is essential to understand which UI component should be changed based on the user input. This is where the concept of “state” comes in.&lt;/p&gt;

&lt;p&gt;As we already discussed, we need to change the text in the parent component that is currently “Hello” to “World”. So, that is our element of the state.&lt;/p&gt;

&lt;p&gt;Now, which component should the state live in? The child? The parent? Um.. so here are a few steps that would make it easier for you to decide where the state should reside:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See which component renders something based on the state.&lt;/li&gt;
&lt;li&gt;Identify the highest component in the hierarchy that relies on the state.&lt;/li&gt;
&lt;li&gt;The state lives in either the highest component in the hierarchy or some other higher component.&lt;/li&gt;
&lt;li&gt;If you are unable to find a component worthy of owning the state, you can create a completely new component whose whole purpose is to hold the state. Then you can add this component as the highest component in the hierarchy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our case, it is easy to identify that the state should reside in the “Parent” component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [text, setText] = useState(“Hello”);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, what do we do to the “Parent” component? We pass the callback function as a prop from the parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Child changeText={(text) =&amp;gt; setText(text)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need a callback function in the “Child” component that is triggered when the button is clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button onClick={() =&amp;gt; props.changeText(“World”)}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all individual elements in place, here is what the JavaScript files look for each component:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Parent.js&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from “react”;
import Child from “./Child”;
function Parent(props) {
const [text, setText] = useState(“Hello”);
return (
&amp;lt;div&amp;gt;
&amp;lt;h1&amp;gt;{text}&amp;lt;/h1&amp;gt;
&amp;lt;Child changeText={(text) =&amp;gt; setText(text)} /&amp;gt;
&amp;lt;/div&amp;gt;
);
}
export default Parent;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Child.js&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from “react”;
function Child(props) {
return (
&amp;lt;div&amp;gt;
&amp;lt;button onClick={() =&amp;gt; props.changeText(“World”)}&amp;gt;
Change the text
&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
);
}
export default Child;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;App.js&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Parent from “./Parent”;
function App() {
return (
&amp;lt;&amp;gt;
&amp;lt;div className=”App”&amp;gt;
&amp;lt;Parent /&amp;gt;
&amp;lt;/&amp;gt;
);
}
export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the “Parent” component, the content inside the heading tag is supposed to change, initially, it is set to “Hello”. Now when the button(in the child component) is clicked, it triggers the onClick event listener that calls the callback function passed from the “Parent” to the “Child” component, which changes the text to “World” and re-renders the component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React follows the unidirectional approach, meaning that data flows from parent to child and not vice versa but if you really need to manipulate your parent component based on something in the child component, you can use a callback function and pass it as a prop from the parent to child.&lt;/p&gt;

&lt;p&gt;This function updates the state in the parent component and once the state is changed, it passes down as props again. This allows the components to re-render and display the required results.&lt;/p&gt;

&lt;p&gt;Here I explained passing data from child to parent component using functional components, the same can be achieved using class components as well.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Node.js with MySQL database.</title>
      <author>popoola Temitope</author>
      <pubDate>Mon, 09 Aug 2021 21:13:20 +0000</pubDate>
      <link>https://dev.to/popoolatopzy/connecting-node-js-with-mysql-database-36dh</link>
      <guid>https://dev.to/popoolatopzy/connecting-node-js-with-mysql-database-36dh</guid>
      <description>&lt;p&gt;Connecting node.js project with MySQL database is easy, follow the following steps to connect to the the database&lt;/p&gt;

&lt;p&gt;&lt;code&gt;By reading this article I believe you have installed nodee Js on your system and familiar with it.&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt; Step1&lt;/h4&gt;

&lt;p&gt;Open your code editor.&lt;/p&gt;

&lt;h4&gt; Step2&lt;/h4&gt;

&lt;p&gt;Create a new project&lt;br&gt;
Open your command prompt or terminal and enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; mkdir project_name
 cd project_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt; Step3&lt;/h4&gt;

&lt;p&gt;Create project file.&lt;br&gt;
enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into the command prompt or terminal.&lt;/p&gt;

&lt;h4&gt; Step4&lt;/h4&gt;

&lt;p&gt;To be able to connect to mysql database you need to install MySQL module into your project.&lt;/p&gt;

&lt;p&gt;To do this is very simple, open your CMD or terminal and enter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; npm install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this command will install the module into your project.&lt;/p&gt;

&lt;h4&gt; Step5&lt;/h4&gt;

&lt;p&gt;Now we can open connection From our project code to mysql database&lt;br&gt;
add the code below to your app.js code to open a connection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mysql&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creating a mysql connection&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createConnection&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db_username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db_password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;db_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt; Step6&lt;/h4&gt;

&lt;p&gt;Let create a simple database and table&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database connected successful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CREATE TABLE books (book_name VARCHAR(255), book_description VARCHAR(255))&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Table created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can leave a comment...&lt;br&gt;
Thanks❤️&lt;/p&gt;

</description>
      <category>node</category>
      <category>mysql</category>
    </item>
    <item>
      <title>[Video] Learn how to debug web projects end-to-end in VS Code in 5 minutes</title>
      <author>Christian Heilmann</author>
      <pubDate>Mon, 09 Aug 2021 21:02:21 +0000</pubDate>
      <link>https://dev.to/codepo8/video-learn-how-to-debug-web-projects-end-to-end-in-vs-code-in-5-minutes-1kpa</link>
      <guid>https://dev.to/codepo8/video-learn-how-to-debug-web-projects-end-to-end-in-vs-code-in-5-minutes-1kpa</guid>
      <description>&lt;p&gt;This weekend I released a video on the &lt;a href="https://www.youtube.com/channel/UCs5Y5_7XK8HLDX0SLNwkd3w"&gt;YouTube Channel&lt;/a&gt; of &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt; that shows end-to-end web project debugging. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vRNdnv_-X18"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In five minutes I walk through debugging a web project bit by bit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I open a project inside VS Code by opening its folder. The demo used is a simple, plain Vanilla JS/CSS/HTML ToDo app you can &lt;a href="https://github.com/codepo8/simple-to-do"&gt;download/fork on GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I open a Terminal inside VS Code and start a local server. I use the server that comes with PHP as it already on my computer (for now - MacOS will soon deprecate this option)&lt;/li&gt;
&lt;li&gt;Instead of opening the project in the browser, I use the &lt;a href="https://code.visualstudio.com/docs/nodejs/browser-debugging"&gt;run and debug workflow&lt;/a&gt; of VS Code to open a dedicated browser instance to debug this project with. If I have a Chromium based browser on my device and have it set as my default browser, this will be the one VS Code uses. In my case, this opens a new window of Microsoft Edge, as this is my main browser on this MacOS computer (yes, it runs on Mac for over 1.5 years now). I use Edge to show extra functionality later that is only supported in this Chromium based browser.&lt;/li&gt;
&lt;li&gt;Having a dedicated browser instance also means that I get the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/"&gt;Browser Developer Tools Console&lt;/a&gt; functionality now inside the Debug Console of Visual Studio Code. The Debug Console shows any &lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/console/console-log"&gt;console.log&lt;/a&gt; messages from my JavaScript and I can also interact with the document in the browser using the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/console/utilities"&gt;Console convenience methods&lt;/a&gt; like &lt;code&gt;$&lt;/code&gt; for &lt;code&gt;querySelector()&lt;/code&gt;. I have full access to the window object and can change the DOM and the styles of the document in a programatic way.&lt;/li&gt;
&lt;li&gt;In addition to console.log() debugging I also have the opportunity to use &lt;a href="https://code.visualstudio.com/Docs/editor/debugging"&gt;breakpoint debugging&lt;/a&gt; instead, which gives me a lot more insight and also has the benefit of halting the execution of my script until I found out what's going on.&lt;/li&gt;
&lt;li&gt;As I am using Microsoft Edge as the debugging browser I also get an inspect button on the debugger toolbar. This one gives me access to the Edge Developer Tools right inside Visual Studio Code. This functionality is powered by the &lt;a href="https://aka.ms/devtools-for-code"&gt;Edge Tools for VS Code&lt;/a&gt; extension which gets installed for me the first time I select the inspect button&lt;/li&gt;
&lt;li&gt;Once the extension runs, I can access and change the DOM and the CSS of the current project right inside Visual Studio Code using the same tools I normally use in the browser. &lt;/li&gt;
&lt;li&gt;I also have access to the Network tool to inspect any Network requests and see if there are any issues of content not being loaded.&lt;/li&gt;
&lt;li&gt;In order to automate the process of starting the browser and opening the localhost address next time, I can also get the debugger extension to generate a launch.json file for me. Once I have that, next time all of the above happens automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to learn more about the JavaScript debugger in VS Code, you can check the documentation here or talk to &lt;a href="https://twitter.com/connorpeet"&gt;Connor Peet&lt;/a&gt; on Twitter. For the Edge DevTools for VS Code integration you can &lt;a href="https://docs.microsoft.com/en-us/microsoft-edge/visual-studio-code/microsoft-edge-devtools-extension"&gt;read the extension documentation&lt;/a&gt; and &lt;a href="https://github.com/microsoft/vscode-edge-devtools"&gt;check the code on GitHub&lt;/a&gt;. We're also welcoming filing any issues on GitHub and you can talk to me, &lt;a href="https://twitter.com/codepo8"&gt;codepo8&lt;/a&gt; on Twitter or the team at &lt;a href="https://twitter.com/edgedevtools"&gt;EdgeDevTools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A special thank you to the team involved in all this work, James Lissiak, Michael Liao, Vidal Guillermo Diazleal Ortega, Brandon Goddard, Olivia Flynn, Tony Ross, Rob Paveza, Jason Stephen, Connor Peet and of course the VS Code team. &lt;/p&gt;

</description>
      <category>debugging</category>
      <category>javascript</category>
      <category>dom</category>
      <category>css</category>
    </item>
    <item>
      <title>Move Fast, Break Things &amp; Win: How Facebook Builds Software</title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 09 Aug 2021 20:48:01 +0000</pubDate>
      <link>https://dev.to/linearb/move-fast-break-things-win-how-facebook-builds-software-2966</link>
      <guid>https://dev.to/linearb/move-fast-break-things-win-how-facebook-builds-software-2966</guid>
      <description>&lt;p&gt;Founder, professional poker player, podcaster and author, Jeff Meyerson, “broke his brain” to bring you the inside-story of Facebook.&lt;/p&gt;

&lt;p&gt;Interviewing more than two dozen Facebook engineers, Jeff spent two and a half years writing his new book &lt;a href="https://www.google.com/search?q=jeff+meyerson+Move+Fast%3A+How+Facebook+Builds+Software&amp;amp;rlz=1C1JZAP_enUS848US852&amp;amp;sxsrf=ALeKk00ivMbSB6KbO7TMGpD_-S1QgPQODg%3A1628534355776&amp;amp;ei=U3YRYenuLpuJwbkPz76NqAo&amp;amp;oq=jeff+meyerson+Move+Fast%3A+How+Facebook+Builds+Software&amp;amp;gs_lcp=Cgdnd3Mtd2l6EAM6BwgjELADECc6CQgAELADEAcQHjoHCAAQsAMQQzoICAAQgAQQsAM6BQgAEIAEOgoIABCABBCHAhAUOgUILhCABEoECEEYAVDvBliHC2DeFGgAcAB4AIABtwWIAZIJkgEHMC4zLjUtMZgBAKABAaABAsgBCsABAQ&amp;amp;sclient=gws-wiz&amp;amp;ved=0ahUKEwip5J6ey6TyAhWbRDABHU9fA6UQ4dUDCA4&amp;amp;uact=5"&gt;Move Fast: How Facebook Builds Software&lt;/a&gt;. Written from Facebook’s own view of their software strategy and tactics, Move Fast explores the product strategy, cultural principles, and technologies that made Facebook the dominant social networking company.&lt;/p&gt;

&lt;p&gt;Jeff joined Dev Interrupted to give us insight into his book and the secrets behind Facebook’s success, the founding story of the Software Daily podcast, the inside scoop on his new company SuperCompute, and how the skills and logic behind poker translate to software engineering.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2DlVeUI9A9NoXN1rg1zGzL"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The intersection of poker and software engineering&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Founding story of the Software Daily podcast&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to think about winning a market&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First steps to take when founding a company&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Product, culture and engineering — How do they relate?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is the Facebook the Goldman Sach’s of software?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why Facebook’s secret sauce is it’s onboarding process, not marketing&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O59fhwsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhfm87jqm0b10pu0y2gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O59fhwsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhfm87jqm0b10pu0y2gh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT:&lt;/strong&gt; An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-server"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Server
&lt;/h2&gt;

&lt;p&gt;With over 1500 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzMuW5P1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a05i5erbpgoseb7nhlzd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzMuW5P1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a05i5erbpgoseb7nhlzd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/podcast/move-fast-break-things-win-how-facebook-builds-software"&gt;https://devinterrupted.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>New Beginnings</title>
      <author>Jonathan Cohen</author>
      <pubDate>Mon, 09 Aug 2021 20:21:24 +0000</pubDate>
      <link>https://dev.to/jdc1492/new-beginnings-4ooo</link>
      <guid>https://dev.to/jdc1492/new-beginnings-4ooo</guid>
      <description>&lt;p&gt;As a dev, I find myself constantly thinking about the variety of languages that are out there and if there's one that I would "prefer" over the others. While I can see why that mindset could be a harmful one to a developers.....development, it's still a thought that occasionally crosses my mind. In cases like these it never hurts to feed the curiosity though. &lt;/p&gt;

&lt;p&gt;I recently started a Udemy Python Course. I decided to finally take the chance to see what it was all about. So far I've been able to successfully create a bandname generator. To achieve this, I had to become familiar with the print function, the input function and variable assignment within the language.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: I've been working within an environment on &lt;a href="https://replit.com/"&gt;Replit.com&lt;/a&gt; So for right now the playground is set up for me. As I learn how to run a script in console I will, then, be more detailed about all the proper steps.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Already bringing an understanding of strings from my time in JS and Ruby helped to get a quick understanding of using print(). Using it to print the greeting of the generator my first line of code was simply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Welcome to the Band Name Generator.")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After, there are 2  questions that gets asked about the name of your hometown and the name of your pet. Following both questions, on a new line you see the program continuing to run awaiting for the user to type the response and press enter. After inputting both responses the user is then met with their possible band name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;city = input("What's name of the city you grew up in?\n")

pet = input("What's your pet's name?\n")

print("Your band name could be " + street + " " + pet)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final print statement, without variable assignment, could definitely be a very wordy line of code. Instead, we assign the results of the input function(what the user inputs when prompted) to the variables city and pet. Finally we use string concatenation within the second print function to tie the final line of the generator together. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:With concatenation you should be mindful to think of spacing within the sentence.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Your band name could be Charleston Folly
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Improving microservice architecture with GraphQL API gateways</title>
      <author>Matt Angelosanto</author>
      <pubDate>Mon, 09 Aug 2021 20:20:32 +0000</pubDate>
      <link>https://dev.to/logrocket/improving-microservice-architecture-with-graphql-api-gateways-gb6</link>
      <guid>https://dev.to/logrocket/improving-microservice-architecture-with-graphql-api-gateways-gb6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/alecbrunelle/"&gt;Alec Brunelle&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;As your organization grows, it's common for multiple API services to be created, each one providing its own feature set. Alongside these services, you’ll want to provide different client apps for your users to use your product. Eventually, your architecture might look like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nurV3but--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/microservice-architecture-chart.png" alt="microservice architecture org chart"&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Every client app has different needs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There are many reasons why this happens. Over time, team structure may have directed service creation, and at the time, it was easier to have a single team own a single codebase instead of having a web of teams to service ownership.&lt;/p&gt;

&lt;p&gt;Another reason could be that different features in your product had different scaling concerns. For example, your analytics stack may have drastically different needs than your user login stack, and it doesn't make sense to combine the two.&lt;/p&gt;

&lt;p&gt;Whatever the reasons are, this type of architecture will slow down future development for both the backend service teams and frontend client teams. Client apps will need to interface with multiple protocols, use different authentication strategies, worry about which API gives them what type of data, and potentially make multiple API calls to retrieve data for a single page.&lt;/p&gt;

&lt;p&gt;Instead of refactoring every API service or re-building the entire architecture — which is costly and risky — &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/direct-client-to-microservice-communication-versus-the-api-gateway-pattern"&gt;API gateways&lt;/a&gt; can help in this situation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-graphql-api-gateways"&gt;
  &lt;/a&gt;
  What are GraphQL API gateways?
&lt;/h2&gt;

&lt;p&gt;API gateways are nothing new to microservices. I've seen many developers use them to provide a single interface (and protocol) for client apps to get data from multiple sources.&lt;/p&gt;

&lt;p&gt;They can solve the problems previously described by providing a single API protocol, a single auth mechanism, and ensuring that clients only need to speak to one team when developing new features.&lt;/p&gt;

&lt;p&gt;Using GraphQL API gateways, on the other hand, is a relatively new concept that has become popular lately. This is because GraphQL has a few properties that lend themselves beautifully to API gateways.&lt;/p&gt;

&lt;p&gt;A GraphQL API gateway can have a single-defined schema and source data from across many different microservices, so clients can query a combination of fields without knowing where the data is coming from.&lt;/p&gt;

&lt;p&gt;With this feature, discovering how to retrieve data isn't a question of who to talk to, but where it lives in the &lt;a href="https://principledgraphql.com/integrity#1-one-graph"&gt;GraphQL schema&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuPXjTG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/graphQL-schema-data-retrieval.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuPXjTG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/graphQL-schema-data-retrieval.png" alt="A chart depicting graphQL schema data retrieval"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many JavaScript packages that help with development. Some provide a layer of abstraction for implementing a GraphQL API gateway, while others can do much more for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schema-stitching-with-graphql-gateways"&gt;
  &lt;/a&gt;
  Schema stitching with GraphQL gateways
&lt;/h2&gt;

&lt;p&gt;We now need an API gateway service that will be responsible for receiving operations and returning data from both new and legacy services. We can do this in two different ways: &lt;a href="https://www.graphql-tools.com/docs/schema-stitching/"&gt;schema stitching&lt;/a&gt; or &lt;a href="https://principledgraphql.com/integrity#2-federated-implementation"&gt;federation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the sake of time, we will look more closely at schema stitching, but you can learn more about &lt;a href="https://blog.logrocket.com/the-what-when-why-and-how-of-federated-graphql/"&gt;GraphQL federation in this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In terms of which JavaScript package to use, we could write our own custom Node.js GraphQL server with the likes of &lt;a href="https://github.com/apollographql/apollo-server"&gt;Apollo Server&lt;/a&gt; or &lt;a href="https://github.com/mercurius-js/mercurius"&gt;Mercurius&lt;/a&gt;, where we write code to interpret the GraphQL operations coming in from the clients, send it to downstream APIs, and return data mapped to what the client expects.&lt;/p&gt;

&lt;p&gt;This approach is time-intensive but may make sense depending on your situation. The advantage is that it can be tuned specifically to your organization and best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-graphql-mesh-as-a-graphql-api-gateway"&gt;
  &lt;/a&gt;
  Using GraphQL Mesh as a GraphQL API gateway
&lt;/h2&gt;

&lt;p&gt;Libraries like &lt;a href="http://www.graphql-mesh.com/"&gt;GraphQL Mesh&lt;/a&gt;, on the other hand, automatically stitch multiple data sources into one single GraphQL API. This can save development time, but, like libraries that do a lot for you, you may need to provide custom overrides.&lt;/p&gt;

&lt;p&gt;GraphQL Mesh will not only act as our GraphQL API gateway but also as our data mapper. It supports different data sources, such as OpenAPI/Swagger REST APIs, gRPC APIs, databases, GraphQL (obviously), and more. It will take these data sources, transform them into GraphQL APIs, and then stitch them together.&lt;/p&gt;

&lt;p&gt;To demonstrate the power of a library like this, we will create a simple SpaceX Flight Journal API. Our app will record all the SpaceX launches we attended over the years. Here’s the &lt;a href="https://github.com/aleccool213/graphql-mesh-example"&gt;GitHub repo&lt;/a&gt; for this project.&lt;/p&gt;

&lt;p&gt;Our app will use two data sources: a public GraphQL API that tells us about SpaceX launches and a local MongoDB database.&lt;/p&gt;

&lt;p&gt;The GraphQL SpaceX API will be available to us via a proxy (all operation names are the same), but GraphQL Mesh will give us new operations for our MongoDB database connection. It will let us create users and mark the launches we attended.&lt;/p&gt;

&lt;p&gt;First, install the libraries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @graphql-mesh/cli @graphql-mesh/graphql @graphql-mesh/mongoose graphql mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create basic Mongoose models that describe our MongoDB schema:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ./src/models.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LaunchesAttendedSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;spacexLaunchID&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ObjectId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;launches_attended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LaunchesAttended&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LaunchesAttended&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LaunchesAttendedSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;LaunchesAttended&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a GraphQL Mesh config file, &lt;code&gt;.meshrc.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;// .meshrc.yml&lt;/span&gt;
&lt;span class="na"&gt;sources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SpaceX&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;graphql&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://api.spacex.land/graphql/&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;POST&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Mongoose&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;mongoose&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;connectionString&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mongodb://admin:password@localhost:27017/test?authSource=admin&amp;amp;readPreference=primary&amp;amp;appname=MongoDB%20Compass&amp;amp;directConnection=true&amp;amp;ssl=false&lt;/span&gt;
        &lt;span class="na"&gt;models&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;User&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/models.js#User&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;LaunchesAttended&lt;/span&gt;
            &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./src/models.js#LaunchesAttended&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Up the MongoDB database with Docker Compose (&lt;a href="https://github.com/aleccool213/graphql-mesh-example/blob/82deb3a32a94a3cd349541e463e25f2fd84d654f/docker-compose.yml#L4"&gt;example docker-compose.yml here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! Serve up our new GraphQL server with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./node_modules/.bin/graphql-mesh serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take you to a GraphiQL instance, which is a nice interface for querying GraphQL servers. Click on the doc’s &lt;strong&gt;sidebar&lt;/strong&gt; and explore what options we have available. You will notice we have a way to see past launches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--quJYAeXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/GraphQL-GraphiQL-sidebar-API-gateways.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--quJYAeXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/GraphQL-GraphiQL-sidebar-API-gateways.jpeg" alt="GraphiQI past launches sidebar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To test our new capabilities, we can query for past launches, pick an &lt;code&gt;id&lt;/code&gt; from the list, and create a row in the MongoDB database for the user to SpaceX launch reference.&lt;/p&gt;

&lt;p&gt;First, create a user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreateOneUserInput&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;userCreateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;recordId&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, get past launches:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PastLaunches&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;launchesPast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;mission_name&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;launch_date_local&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mark a launch as attended:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;mutation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LaunchesAttendedCreateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CreateOneLaunchesAttendedInput&lt;/span&gt;&lt;span class="p"&gt;!)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;launchesAttendedCreateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;recordId&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, see all the previous launches that you attended:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LaunchesAttended&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;launchesAttendedFindMany&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;spacexLaunchID&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;userId&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In a short time (and after a few config files), we were able to build our own GraphQL API gateway, which stitched together the SpaceX GraphQL API, and a generated GraphQL API from a local MongoDB database, allowing us to create an app that records which launches we attended. This use case was a demonstration of how powerful GraphQL gateways can be for a client’s developer experience.&lt;/p&gt;

&lt;p&gt;Without this gateway, the client would have needed to query two APIs separately. Instead, GraphQL Mesh helped us quickly generate basic CRUD operations we could perform on our Mongo Database, making our app have user-specific features.&lt;/p&gt;

&lt;p&gt;Overall, there are many ways to use API gateways and a plethora of libraries to choose from to assist you in building a distributed system that can be fine-tuned for performance, security, and multi-team organizations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#monitor-failed-and-slow-graphql-requests-in-production"&gt;
  &lt;/a&gt;
  Monitor failed and slow GraphQL requests in production
&lt;/h2&gt;

&lt;p&gt;While GraphQL has some features for debugging requests and responses, making sure GraphQL reliably serves resources to your production app is where things get tougher. If you’re interested in ensuring network requests to the backend or third party services are successful, &lt;a href="https://logrocket.com/signup"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BsjLY60E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbqi8ncnli9u7o0k36qt.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt; &lt;a href="https://logrocket.com/signup"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic GraphQL requests to quickly understand the root cause. In addition, you can track Apollo client state and inspect GraphQL queries' key-value pairs.&lt;/p&gt;

&lt;p&gt;LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. &lt;a href="https://logrocket.com/signup"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Amplify Geo + Amplify CDN + Svelte!</title>
      <author>Nicholas Reid</author>
      <pubDate>Mon, 09 Aug 2021 20:14:16 +0000</pubDate>
      <link>https://dev.to/njreid/amplify-geo-amplify-cdn-svelte-5faa</link>
      <guid>https://dev.to/njreid/amplify-geo-amplify-cdn-svelte-5faa</guid>
      <description>&lt;p&gt;Have you ever wanted to add maps to your Svelte app?&lt;/p&gt;

&lt;p&gt;So, we're already seeing some great feedback on our &lt;a href="https://docs.amplify.aws/cli/geo/maps"&gt;Amplify Geo&lt;/a&gt; developer preview release - thanks to everyone who has taken the time to play with it. I thought I'd share some hacky code I threw together to try out using our new CDN-delivered Amplify libraries in an mostly-unbundled Svelte app. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;CDN-powered unbundling can be &lt;em&gt;nice&lt;/em&gt;&lt;/em&gt;. Until recently, Amplify-powered JS apps have been conventionally bundled at build time. CDN unbundling is particularly handy for Svelte+Rollup, because none of the Amplify libraries need to be parsed each build iteration, meaning lightning-fast refreshes. Also, the resulting bundle is pretty small. My &lt;code&gt;bundle.js&lt;/code&gt; for this app  is just 19Kb, unminified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#1-svelte-starter"&gt;
  &lt;/a&gt;
  1. Svelte Starter
&lt;/h3&gt;

&lt;p&gt;Grab your favorite &lt;a href="https://github.com/sveltejs/template"&gt;Svelte template&lt;/a&gt;. I'm a typescript+pug+stylus weirdo, but the standard Svelte-provided one is a good place to start.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx degit sveltejs/template my-geo-app
cd my-geo-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-add-the-amplify-cdn-libraries-to-your-indexhtml"&gt;
  &lt;/a&gt;
  2. Add the Amplify CDN libraries to your index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My Example Map&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/global.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/build/bundle.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/core/4.2.1-geo/aws-amplify-core.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-ZJ0BipyxRjDHPcTLilxOMRf9grNEwTTUOmr8l8MUprgnpAnpK4Fz20ndOQElCtWb"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/auth/5.0.4-geo/aws-amplify-auth.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-rqyJfFR2070OQyXIQqomdGCYa6TaR/1asvv2oaz9wB6R8YSiIBC08mWwgVtr1NNk"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/maplibre-gl/1.14.0/maplibre-gl.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-jWZKsznBFj0Nl3kUaRKmmk89Hew9zDhTnmOz0pOLceWY7iag+l/8QNPeD0cQYaVG"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/geo/0.0.2-geo.6648/aws-amplify-geo.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-VBNaB4q1F3zSs1BgIf7mYogamWN2lITAmfVw3FyxuyFdyaKucigyjrJ6RmQvdbN2"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.amplify.aws/packages/maplibre-gl-js-amplify/1.0.2/maplibre-gl-js-amplify.umd.min.js"&lt;/span&gt;
      &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-g2Tb3Pa8Gpt7OYj324blBhR91QsJeBhvwWqRwcjRHvWk8XE8rjiUs8E0aW/iDnPe"&lt;/span&gt;
      &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;
      &lt;span class="na"&gt;referrerpolicy=&lt;/span&gt;&lt;span class="s"&gt;"no-referrer"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/build/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-create-an-amplifymap-component"&gt;
  &lt;/a&gt;
  3. Create an AmplifyMap component.
&lt;/h3&gt;

&lt;p&gt;Add a new file called &lt;code&gt;AmplifyMap.svelte&lt;/code&gt; to your &lt;code&gt;src&lt;/code&gt; directory, with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;800px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;600px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AmplifyMapLibreRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;maplibreAmplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AmplifyMapLibreRequest&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initializeMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;AmplifyMapLibreRequest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createMapLibreMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// An HTML Element or HTML element ID to render the map in https://maplibre.org/maplibre-gl-js-docs/api/map/&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;123.1187&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;49.2819&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;us-west-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;initializeMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: {width}; height: {height};"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-add-amplifymap-to-app"&gt;
  &lt;/a&gt;
  4. Add AmplifyMap to App
&lt;/h3&gt;

&lt;p&gt;In your &lt;code&gt;App.svelte&lt;/code&gt;, import the AmplifyMap component you just created, and add it to the template. We're passing static height and width values to the map component, but a better way might be to make it responsive to window resizing by &lt;a href="https://svelte.dev/tutorial/dimensions"&gt;binding them dynamically&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AmplifyMap&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AmplifyMap.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My Example Map&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;AmplifyMap&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"900px"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"600px"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-add-amplify"&gt;
  &lt;/a&gt;
  5. Add Amplify
&lt;/h3&gt;

&lt;p&gt;Last, but most important, you'll need to add AWS Amplify to your project. There are a few ways to do this, but the easiest is via the Amplify CLI. You can just follow the first page of our &lt;a href="https://docs.amplify.aws/lib/geo/getting-started/q/platform/js"&gt;Getting Started guide here&lt;/a&gt;. This takes you through the process of installing the Amplify CLI and provisioning the Amplify Geo backend services in your AWS account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT NOTE&lt;/strong&gt; Because the Geo functionality is under Developer Preview, you need to make sure you have the &lt;code&gt;@geo&lt;/code&gt; branch of the CLI installed, as described in the Geo Getting Started guide. We'll remove this requirement when Geo is generally available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your main.js (or &lt;code&gt;main.ts&lt;/code&gt;) file should look something like this after you've followed the instructions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;//@ts-ignore&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Amplify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_amplify_core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Amplify&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;awsconfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./aws-exports&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;Amplify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;awsconfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-happy-mapping"&gt;
  &lt;/a&gt;
  6. Happy Mapping!
&lt;/h3&gt;

&lt;p&gt;If everything is wired up correctly, when you &lt;code&gt;npm run dev&lt;/code&gt; your app, you should see something like the following in your  &lt;code&gt;localhost:5000&lt;/code&gt; browser session:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lS63BVJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mr5l1qlxdobcv8x79yf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lS63BVJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mr5l1qlxdobcv8x79yf7.png" alt="amplify_geo_svelte"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>aws</category>
      <category>mapping</category>
      <category>cdn</category>
    </item>
    <item>
      <title>Cloud Native Chaos Engineering with Chaos Mesh</title>
      <author>Shardul Srivastava</author>
      <pubDate>Mon, 09 Aug 2021 19:51:35 +0000</pubDate>
      <link>https://dev.to/aws-builders/cloud-native-chaos-engineering-with-chaos-mesh-3a96</link>
      <guid>https://dev.to/aws-builders/cloud-native-chaos-engineering-with-chaos-mesh-3a96</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGIR_DKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs1tq6sy5ex8xiw4x5qt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGIR_DKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gs1tq6sy5ex8xiw4x5qt.jpg" alt="chaos-engineering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Cloud, distributed architectures have grown even more complex and with complexity comes the uncertainty in how the system could fail.&lt;/p&gt;

&lt;p&gt;Chaos Engineering aims to test system resiliency by injecting faults to identify weaknesses before they cause massive outages such as improper fallback settings for a service, cascading failures due to a single point of failure, or retry storms due to misconfigured timeouts.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h4&gt;

&lt;p&gt;Chaos Engineering started at Netflix back in 2010 when Netflix moved from on-prem servers to AWS infrastructure to test the resiliency of their infrastructure. &lt;/p&gt;

&lt;p&gt;In 2012, Netflix open-sourced &lt;a href="https://github.com/Netflix/chaosmonkey"&gt;ChaosMonkey&lt;/a&gt; under Apache 2.0 license as a tool to test the resilience of your application infrastructure. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cloud-native-chaos-engineering-in-cncf-landscape"&gt;
  &lt;/a&gt;
  Cloud Native Chaos Engineering in CNCF Landscape
&lt;/h4&gt;

&lt;p&gt;CNCF focuses on Cloud Native Chaos Engineering defined as engineering practices focused on (and built on) Kubernetes environments, applications, microservices, and infrastructure.&lt;/p&gt;

&lt;p&gt;Cloud Native Chaos Engineering has 4 core principles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open source&lt;/li&gt;
&lt;li&gt;CRDs for Chaos Management &lt;/li&gt;
&lt;li&gt;Extensible and pluggable&lt;/li&gt;
&lt;li&gt;Broad Community adoption&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;CNCF has two sandbox projects for Cloud Native Chaos Engineering &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/chaos-mesh/chaos-mesh"&gt;ChaosMesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/litmuschaos/litmus"&gt;Litmus Chaos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMcN_0sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmb5uh3kd7q6izwjsf3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMcN_0sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmb5uh3kd7q6izwjsf3i.png" alt="cncf-chaos-engineering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#chaos-mesh"&gt;
  &lt;/a&gt;
  Chaos Mesh
&lt;/h4&gt;

&lt;p&gt;Chaos Mesh is a cloud-native Chaos Engineering platform that orchestrates chaos on Kubernetes environments. It is based on &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;Kubernetes Operator pattern&lt;/a&gt; and provides a Chaos Operator to inject into the applications and Kubernetes infrastructure in a manageable way.&lt;/p&gt;

&lt;p&gt;Chaos Operator uses Custom Resource Defition(CRD) to define chaos objects. It provides a variety of these CRDs for fault injection such as :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-pod-chaos-on-kubernetes/"&gt;PodChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-network-chaos-on-kubernetes"&gt;NetworkChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-dns-chaos-on-kubernetes"&gt;DNSChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-http-chaos-on-kubernetes"&gt;HTTPChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-heavy-stress-on-kubernetes"&gt;StressChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-io-chaos-on-kubernetes"&gt;IOChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-time-chaos-on-kubernetes"&gt;TimeChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-kernel-chaos-on-kubernetes"&gt;KernelChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-aws-chaos"&gt;AWSChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-gcp-chaos"&gt;GCPChaos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chaos-mesh.org/docs/simulate-jvm-application-chaos"&gt;JVMChaos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#chaos-mesh-installation"&gt;
  &lt;/a&gt;
  Chaos Mesh Installation
&lt;/h4&gt;

&lt;p&gt;Chaos Mesh can be installed quickly using &lt;a href="https://chaos-mesh.org/docs/quick-start#quick-installation"&gt;installtion script&lt;/a&gt;. However, it's recommended to use Helm 3 chart in production environments.&lt;/p&gt;

&lt;p&gt;To install Chaos Mesh using Helm :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the Chaos Mesh repository to the Helm repository.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm repo add chaos-mesh https://charts.chaos-mesh.org
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It's recommended to install ChaosMesh in a separate namespace, so you can either create a namespace &lt;code&gt;chaos-testing&lt;/code&gt; manually or let Helm create it automatically, if it doesn't exist :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm upgrade &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--install&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     chaos-mesh &lt;span class="se"&gt;\&lt;/span&gt;
     chaos-mesh/chaos-mesh &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-n&lt;/span&gt; chaos-testing &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--create-namespace&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--version&lt;/span&gt; v2.0.0 &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--wait&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you're using GKE or EKS with &lt;code&gt;containerd&lt;/code&gt;, then use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm upgrade &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--install&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     chaos-mesh &lt;span class="se"&gt;\&lt;/span&gt;
     chaos-mesh/chaos-mesh &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-n&lt;/span&gt; chaos-testing &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--create-namespace&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--set&lt;/span&gt; chaosDaemon.runtime&lt;span class="o"&gt;=&lt;/span&gt;containerd &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--set&lt;/span&gt; chaosDaemon.socketPath&lt;span class="o"&gt;=&lt;/span&gt;/run/containerd/containerd.sock &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--version&lt;/span&gt; v2.0.0 &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;--wait&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Verify if pods are running :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl get pods &lt;span class="nt"&gt;-n&lt;/span&gt; chaos-testing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#run-first-chaos-mesh-experiment"&gt;
  &lt;/a&gt;
  Run First Chaos Mesh Experiment
&lt;/h4&gt;

&lt;p&gt;Chaos Experiment describes how and what type of fault is injected. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup a Nginx pod and expose it as a service on port 80.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl run nginx &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nt"&gt;--labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"app=nginx"&lt;/span&gt; &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80 &lt;span class="nt"&gt;--expose&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Open another terminal and setup a test pod to test the connectivity to nginx service :
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl run &lt;span class="nt"&gt;-it&lt;/span&gt; test-connection &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;radial/busyboxplus:curl &lt;span class="nt"&gt;--&lt;/span&gt; sh
curl nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this should show the response like this :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iz1fyzZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd4ilg8fn7zv6o9vzdja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iz1fyzZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yd4ilg8fn7zv6o9vzdja.png" alt="nginx-test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create your first Chaos Experiment by running :
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; - &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOF&lt;/span&gt;&lt;span class="sh"&gt;
apiVersion: chaos-mesh.org/v1alpha1
kind: NetworkChaos
metadata:
  name: nginx-network-delay
spec:
  action: delay
  mode: one
  selector:
    namespaces:
      - default
    labelSelectors:
      'app': 'nginx'
  delay:
    latency: '1s'
  duration: '12s'
&lt;/span&gt;&lt;span class="no"&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will introduce a delay of 1 seconds in the response of nginx service for 12 seconds.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test the response of you nginx service now to see the delay of 1 seconds.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>kubernetes</category>
      <category>chaosengineering</category>
      <category>chaosmesh</category>
      <category>awscommunitybuilder</category>
    </item>
    <item>
      <title>My First Flask Application</title>
      <author>PhylisChumba</author>
      <pubDate>Mon, 09 Aug 2021 19:40:17 +0000</pubDate>
      <link>https://dev.to/phylis/my-first-flask-application-2mm</link>
      <guid>https://dev.to/phylis/my-first-flask-application-2mm</guid>
      <description>&lt;p&gt;INTRODUCTION&lt;/p&gt;

&lt;p&gt;Have you ever wished you knew how to program, but you have no idea where to start from?.&lt;a href="https://twitter.com/lux_academy"&gt;@Lux Tech Academy&lt;/a&gt; will guide you on how to Learn Programming, Software Engineering, Data Science, Data Structures, Algorithms and Developer Relations The Right Way.  &lt;/p&gt;

&lt;p&gt;For the past three weeks during the Python Bootcamp I have;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gained basic Python programming concepts. You can check the python basics &lt;a href="https://dev.to/phylis/python-101-introduction-to-python-2eh4"&gt;Here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learnt how to develop real-world Python applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learnt how  Python object-oriented programming can be applied to develop software more effectively &lt;a href="https://dev.to/phylis/python-classes-and-objects-51on"&gt;Here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learnt how to develop Python functions, and how to use flow control statements in python. &lt;a href="https://dev.to/phylis/introduction-to-control-flow-and-functions-in-python-41cc"&gt;Check it Here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Been able to apply Python programming techniques in specific fields such as Web Development, Data Science, Machine Learning, and AI. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Applying all the basic knowledge  from introduction to python to application of python for web development, This article will provide you with the basic concepts of the Python Flask framework.&lt;/p&gt;

&lt;p&gt;The article is designed for beginners and professionals.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#introduction-to-flask-web-framework"&gt;
  &lt;/a&gt;
  Introduction to Flask Web Framework.
&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;What is a Web Framework?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Web Framework represents a collection of libraries and modules that enable web application developers to write applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is Flask?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flask is a web framework that provides libraries to build lightweight web applications in python.&lt;/li&gt;
&lt;li&gt;It was developed by Armin Ronacher, who led a team of international Python enthusiasts called Poocco. &lt;/li&gt;
&lt;li&gt;Flask is based on the &lt;strong&gt;Werkzeg WSGI&lt;/strong&gt; toolkit and the &lt;strong&gt;Jinja2&lt;/strong&gt; template engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is WSGI?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is an acronym for web server gateway interface which is a standard for python web application development considered as the specification for the universal interface between the web server and web application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What is Jinja2?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;*Jinja2 is a web template engine which combines a template with a certain data source to render the dynamic web pages.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#flask-environment-setup"&gt;
  &lt;/a&gt;
  Flask Environment Setup.
&lt;/h6&gt;

&lt;p&gt;To install flask on the system, we need to have python 3 or higher installed on our system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install virtual environment (virtualenv)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Virtualenv is  is a tool to create isolated Python environments.&lt;br&gt;
It can be installed by using the following command;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it is installed, we can create the new virtual environment into a folder as given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir app   
$ cd app  
$ virtualenv venv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To activate the corresponding environment, use the following command;&lt;br&gt;
On Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ venv/bin/activate 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On Windows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ venv\scripts\activate 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now install the flask by using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install flask  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#first-flask-application"&gt;
  &lt;/a&gt;
  First Flask application
&lt;/h6&gt;

&lt;p&gt;To create your first program in the Flask, open file app.py under the app directory and add the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;  

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#creating the Flask class object   
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#decorator   
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the code  and run this python code on the command line as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aI1Ldbl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dkymempc6v4bsejn1kc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aI1Ldbl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dkymempc6v4bsejn1kc.png" alt="Screenshot (25)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since it is a web application, therefore it is to be run to on the browser at &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;.&lt;br&gt;
The output is;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAwyB-dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1vww1spej5e15kfczsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAwyB-dG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1vww1spej5e15kfczsq.png" alt="Screenshot (24)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To build the python web application, we need to import the Flask module. An object of the Flask class is considered as the WSGI application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We need to pass the name of the current module, i.e. &lt;strong&gt;name&lt;/strong&gt; as the argument into the Flask constructor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The route() function of the Flask class defines the URL mapping of the associated function. The syntax is given below.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It accepts the folowing parameters;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rule:&lt;/strong&gt; It represents the URL binding with the function.&lt;br&gt;
&lt;strong&gt;options:&lt;/strong&gt; It represents the list of parameters to be associated with the rule object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The run method of the Flask class is used to run the flask application on the local development server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;host&lt;/strong&gt; :The default hostname is 127.0.0.1, i.e. localhost.&lt;br&gt;
&lt;strong&gt;port&lt;/strong&gt;: The port number to which the server is listening to. The default port number is 5000.&lt;br&gt;
&lt;strong&gt;debug&lt;/strong&gt;: The default is false. It provides debug information if it is set to true.&lt;br&gt;
&lt;strong&gt;options&lt;/strong&gt;: It contains the information to be forwarded to the server.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>flask</category>
    </item>
  </channel>
</rss>
