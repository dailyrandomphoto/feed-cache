<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Return multiple values from a function in Python</title>
      <author>hrishikesh1990</author>
      <pubDate>Thu, 02 Sep 2021 12:08:19 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/return-multiple-values-from-a-function-in-python-2k60</link>
      <guid>https://dev.to/hrishikesh1990/return-multiple-values-from-a-function-in-python-2k60</guid>
      <description>&lt;p&gt;In this guide, we look at Python: Return multiple values from a function. We explain the various methods in detail and list their shortcomings. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content-python-return-multiple-values"&gt;
  &lt;/a&gt;
  Table of Content - Python return multiple values:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-return-multiple-values"&gt;Python return multiple values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-commaseparated-values-tuples"&gt;Comma-separated values (Tuples)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-python-lists"&gt;Python List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-a-python-dictionary"&gt;Python Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-a-python-data-class"&gt;Using Python Data Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations-and-caveats-python-return-multiple-values"&gt;Limitations and Caveats - Python return multiple values&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-return-multiple-values"&gt;
  &lt;/a&gt;
  Python Return Multiple Values:
&lt;/h2&gt;

&lt;p&gt;Functions are used to perform a specific task which most likely involves returning a particular value. However, a few use-cases may require you to return two or more values. In other programming languages, the code to achieve this might be quite complex but Python provides a few handy methods to return multiple values. &lt;/p&gt;

&lt;p&gt;Most of these methods involve using a collection data type to return these values. We have taken a close look at all of them below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-commaseparated-values-tuples"&gt;
  &lt;/a&gt;
  Using Comma-separated values (Tuples):
&lt;/h2&gt;

&lt;p&gt;In this method, we use Python to return multiple values by simply separating them by commas. Python basically uses a tuple to achieve this. &lt;/p&gt;

&lt;p&gt;The code to achieve this is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Returning Multiple Values using Tuples
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Sum"&lt;/span&gt; 
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Output = Sum 15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A common confusion here is that the syntax of tuple requires a pair of brackets (). Although this is true, Python does not always require brackets to identify a tuple. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-python-lists"&gt;
  &lt;/a&gt;
  Using Python Lists:
&lt;/h2&gt;

&lt;p&gt;Similar to the previous methods, lists can also be used to return multiple values, too. In case you are not familiar with lists, they are a collection of items. They are quite similar to arrays however they can be used to store values of various data types. &lt;/p&gt;

&lt;p&gt;Since they are a collection of items we could add values to the list and return the list. &lt;/p&gt;

&lt;p&gt;The code to return multiple values using list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Returning Multiple Values using List
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;operation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Sum"&lt;/span&gt; 
    &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Output = ["Sum", 15]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this method, you would have to use the index of the list to use the values individually. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-python-dictionary"&gt;
  &lt;/a&gt;
  Using a Python Dictionary:
&lt;/h2&gt;

&lt;p&gt;In the previous method, accessing a particular value would be a hassle. However, this would not be a problem while using dictionaries to return multiple values. This is because we could use relevant key names and they could be accessed easily. &lt;/p&gt;

&lt;p&gt;The code to do so is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Returning Multiple Values using Dictionary
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'operation'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Sum"&lt;/span&gt; 
    &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'total'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Output = {'operation': 'Sum', 'total': 15}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this method, the returned values can easily be accessed within their keys. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-a-python-data-class"&gt;
  &lt;/a&gt;
  Using a Python Data Class:
&lt;/h2&gt;

&lt;p&gt;In this method, we use Data Classes to return multiple values. Data classes are a method of adding specific methods to a user-defined class. This method was introduced in Python version 3.7. &lt;/p&gt;

&lt;p&gt;The code to do so is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#Returning Multiple Values using Data Classes
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;multiplevalues&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;   

&lt;span class="c1"&gt;#passing arguments into the Data Class 
&lt;/span&gt;&lt;span class="n"&gt;all_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiplevalues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Addition"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;all_values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Output
#15
#multiplevalues(operation='Addition', num1=5, num2=10)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#limitations-and-caveats-python-return-multiple-values"&gt;
  &lt;/a&gt;
  Limitations and Caveats - Python return multiple values
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The first two methods, although used extensively, must be used with caution as they do not have the proper names to identify the values and hence can often lead to errors.&lt;/li&gt;
&lt;li&gt;The only difference that list methods have over the tuple method is that lists are mutable. &lt;/li&gt;
&lt;li&gt;The dictionary method is used when you are returning multiple values and find it hard to keep track of their names. &lt;/li&gt;
&lt;li&gt;The Data Class methods can be a little complicated to understand at first, hence I would recommend practicing the other methods and later trying to understand this method. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>EF Core 3.1: Peeking Into Generated SQL </title>
      <author>Timur Khadimullin</author>
      <pubDate>Thu, 02 Sep 2021 12:03:27 +0000</pubDate>
      <link>https://dev.to/timur_kh/ef-core-3-1-peeking-into-generated-sql-31di</link>
      <guid>https://dev.to/timur_kh/ef-core-3-1-peeking-into-generated-sql-31di</guid>
      <description>&lt;p&gt;Writing LINQ that produces optimal SQL can be even harder as developers often don’t have visibility into the process. It becomes even more confusing when the application is designed to run against different databases.&lt;/p&gt;

&lt;p&gt;We often find ourselves questioning whether this particular query will fall in line with our expectations. And until not so long ago our tool of choice was a SQL Profiler, that ships with SQL Server. It’s plenty powerful but has one flaw – it pretty much requires the SQL Server installation. This might be a deal breaker for some clients using other DBs, like Postgres or MySQL (which &lt;a href="https://docs.microsoft.com/en-us/ef/core/providers/?tabs=dotnet-core-cli"&gt;are all supported&lt;/a&gt; by the way).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ef-to-the-resque"&gt;
  &lt;/a&gt;
  EF to the resque
&lt;/h2&gt;

&lt;p&gt;Instead of firing off the profiler and fishing out the batches, we could have Entity Framework itself pass us the result. After all, it needs to build SQL before sending it off the the database, so all we have to do it to ask nicely. Stack Overflow is &lt;a href="https://stackoverflow.com/questions/37527783/get-sql-code-from-an-entity-framework-core-iqueryablet"&gt;quite helpful here&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IQueryableExtensions&lt;/span&gt; &lt;span class="c1"&gt;// this is the EF Core 3.1 version.&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;ToSql&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TEntity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IQueryable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TEntity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TEntity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;var&lt;/span&gt; &lt;span class="n"&gt;enumerator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TEntity&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;relationalCommandCache&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Private&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"_relationalCommandCache"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;selectExpression&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationalCommandCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Private&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SelectExpression&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"_selectExpression"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relationalCommandCache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Private&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IQuerySqlGeneratorFactory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"_querySqlGeneratorFactory"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sqlGenerator&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selectExpression&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CommandText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;Private&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;privateField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;privateField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NonPublic&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nf"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;Private&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;privateField&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;GetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;privateField&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Instance&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;BindingFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NonPublic&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nf"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-usage-is-simple"&gt;
  &lt;/a&gt;
  The usage is simple
&lt;/h2&gt;

&lt;p&gt;Suppose we’ve got the following inputs: One simple table, that we’d like to group by one field and total by another. Database Context is also pretty much boilerplate. One thing to note here is a couple of database providers we are going to try the query against.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeTable&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Foobar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Quantity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyDbContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;DbSet&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SomeTable&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SomeTables&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;LoggerFactory&lt;/span&gt; &lt;span class="n"&gt;DbCommandConsoleLoggerFactory&lt;/span&gt;
        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;LoggerFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ConsoleLoggerProvider&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;DbLoggerCategory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnConfiguring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DbContextOptionsBuilder&lt;/span&gt; &lt;span class="n"&gt;optionsBuilder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//run with SQL Server provider to get T-SQL&lt;/span&gt;
        &lt;span class="n"&gt;optionsBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseNpgsql&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Server=localhost;Port=5432;Database=test;User Id=;Password=;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;//alternatively use other supported provider&lt;/span&gt;
        &lt;span class="c1"&gt;//optionsBuilder.UseSqlServer("Server=.\\SQLEXPRESS;Database=test;Trusted_Connection=true")&lt;/span&gt;
        &lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OnConfiguring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;optionsBuilder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test bench would look something like so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyDbContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;someTableData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SomeTables&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GroupBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Foobar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Foobar&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Quantity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;OrderByDescending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// we've built our query as per normal&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToSql&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// this is the magic&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someTableData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And depending on our choice of provider the output would show ef core generated sql for SQL Server and Postgres&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;        &lt;span class="c1"&gt;-- MSSQL&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TOP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;__p_0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;].[&lt;/span&gt;&lt;span class="n"&gt;Foobar&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;].[&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SomeTables&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;].[&lt;/span&gt;&lt;span class="n"&gt;Foobar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;].[&lt;/span&gt;&lt;span class="n"&gt;Quantity&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;

        &lt;span class="c1"&gt;-- PG SQL&lt;/span&gt;
         &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"Foobar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"Quantity"&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nv"&gt;"Quantity"&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;"SomeTables"&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
        &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"Foobar"&lt;/span&gt;
        &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"Quantity"&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
        &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;__p_0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>efcore</category>
      <category>database</category>
    </item>
    <item>
      <title>A Fun Programming Joke To Start Your Day</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Thu, 02 Sep 2021 12:00:19 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/a-fun-programming-joke-to-start-your-day-b30</link>
      <guid>https://dev.to/dailydeveloperjokes/a-fun-programming-joke-to-start-your-day-b30</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VNGYlRCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1259a922f36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VNGYlRCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1259a922f36.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>⚡ Must read Tech news/tools of the day - Digest #1</title>
      <author>Hackertab 🖥️</author>
      <pubDate>Thu, 02 Sep 2021 12:00:04 +0000</pubDate>
      <link>https://dev.to/hackertab/must-read-tech-news-tools-of-the-day-digest-1-3dbj</link>
      <guid>https://dev.to/hackertab/must-read-tech-news-tools-of-the-day-digest-1-3dbj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" alt="articleImg"&gt;&lt;/a&gt;&lt;br&gt;
Each day we handpick the best web content across different websites eg: Hackernews, Github, Reddit... to help you stay updated with the hottest trends!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#level-up-your-skills-with-these-github-repositories"&gt;
  &lt;/a&gt;
  Level up your 🚀 skills with these Github repositories:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" alt="Github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jina"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/jina-ai/jina"&gt;jina&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 jina-ai | ⭐ +9,734 stars&lt;br&gt;
Cloud-native neural search framework for 𝙖𝙣𝙮 kind of data&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cplusplus"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/TheAlgorithms/C-Plus-Plus"&gt;C-Plus-Plus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 TheAlgorithms | ⭐ +14,495 stars&lt;br&gt;
Collection of various algorithms in mathematics, machine learning, computer science and physics implemented in C++ for educational purposes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#netbox"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/netbox-community/netbox"&gt;netbox&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 netbox-community | ⭐ +8,659 stars&lt;br&gt;
Infrastructure resource modeling for network automation. Open source under Apache 2. Public demo: &lt;a href="https://demo.netbox.dev"&gt;https://demo.netbox.dev&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hottest-devto-posts-"&gt;
  &lt;/a&gt;
  🎉 🔥 Hottest Devto posts :
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#i-joined-postman-focusing-on-open-source"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/alejandra_quetzalli/i-m-joining-postman-focusing-on-open-source-2986"&gt;I joined Postman, focusing on Open Source 👩🏼‍🚀&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 Alejandra Quetzalli 🐾 | 👍 +30 reactions&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZCCZcbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_gdctejW--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwcenbcqsi32ti6658uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZCCZcbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_gdctejW--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwcenbcqsi32ti6658uf.png" alt=""&gt;&lt;/a&gt;Well… the unexpected happened!    I joined Postman to focus on Open Source technologies.   (I've been...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-i-need-math-to-be-a-good-developer"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/codesphere/do-i-need-math-to-be-a-good-developer-ila"&gt;Do I need math to be a good developer?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 Saji Wang | 👍 +31 reactions&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojZqPtN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eKi2pqOc--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u2zha8x0lfl19e9fw78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojZqPtN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eKi2pqOc--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u2zha8x0lfl19e9fw78.png" alt=""&gt;&lt;/a&gt;Written by Dan Parry at Codesphere  There seems to be a common perception that math and coding are...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-shiba-inu-loading-and-error-svgs-to-my-react-site"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/abbeyperini/adding-shiba-inu-loading-and-error-svgs-to-my-react-site-lnj"&gt;Adding Shiba Inu Loading and Error SVGs to My React Site&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 Abbey Perini | 👍 +21 reactions&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBHYmwnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yCpsCRzy--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1pxygzt4l1teaspmhck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBHYmwnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yCpsCRzy--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1pxygzt4l1teaspmhck.png" alt=""&gt;&lt;/a&gt;When I updated the blog section of my portfolio site, I realized I had a great opportunity to draw...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keep-an-eye-on-these-cool-products-too"&gt;
  &lt;/a&gt;
  👀 Keep an eye on these cool products too:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ecommerce-checklist"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/e-commerce-checklist-2?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;E-Commerce Checklist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +158 | 💬 +82 &lt;br&gt;
200+ tools to launch &amp;amp; grow your online store in Notion&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbnA3Bny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/0519781b-c93f-4f2a-8c94-2354b99fe354.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbnA3Bny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/0519781b-c93f-4f2a-8c94-2354b99fe354.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="E-Commerce Checklist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#earnify"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/earnify?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;Earnify&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +84 | 💬 +14 &lt;br&gt;
Keep sales teams happy &amp;amp; accountable with engaging contests&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Die2w3DU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/26057db2-661c-47f4-8609-a05bf85ed184.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Die2w3DU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/26057db2-661c-47f4-8609-a05bf85ed184.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="Earnify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jaadoo"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/jaadoo?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;Jaadoo&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +46 | 💬 +12 &lt;br&gt;
Search and manage your mobile screenshots, magically&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QeBL_EAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ph-files.imgix.net/61c6cb34-6666-4cbb-b25f-07260ab207a9.gif%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QeBL_EAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ph-files.imgix.net/61c6cb34-6666-4cbb-b25f-07260ab207a9.gif%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="Jaadoo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;🙌 Wrap Up!&lt;br&gt;
That was all for this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-hackertab-on-twitter-for-more-tips-hackertabdev"&gt;
  &lt;/a&gt;
  Follow Hackertab on Twitter for more tips: @hackertabdev
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" alt="Hackertab"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://hackertab.dev"&gt;Hackertab&lt;/a&gt; turns your New Tab page into a geeky one that keeps you as a developer updated with the best tools, news, jobs and events.&lt;/p&gt;

</description>
      <category>dev</category>
      <category>github</category>
      <category>producthunt</category>
      <category>hackertab</category>
    </item>
    <item>
      <title>Sveltey: Cli for Svelte-Kit</title>
      <author>Lalit Yalamanchili</author>
      <pubDate>Thu, 02 Sep 2021 11:50:37 +0000</pubDate>
      <link>https://dev.to/lalit64/sveltey-cli-for-svelte-kit-4h75</link>
      <guid>https://dev.to/lalit64/sveltey-cli-for-svelte-kit-4h75</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Hello, Dev Community. This is my first post, so I hope I am doing this right. This is me.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__592673"&gt;
  
    .ltag__user__id__592673 .follow-action-button {
      background-color: #fefefe !important;
      color: #212121 !important;
      border-color: #fefefe !important;
    }
  
    &lt;a href="/lalit64" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0XRTnSSt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1GL318Sn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/592673/3fb82a28-2a06-4b5b-955c-63bc2558b8cc.gif" alt="lalit64 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/lalit64"&gt;Lalit Yalamanchili&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/lalit64"&gt;Hi, I am Lalit. I am 11 years old and I am Learning JavaScript on an intermediate level!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;h3&gt;
  &lt;a href="#what-is-svelte"&gt;
  &lt;/a&gt;
  What is Svelte?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Taken from &lt;a href="https://svelte.dev/"&gt;https://svelte.dev/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Svelte is a radical new approach to building user interfaces. Whereas traditional frameworks like React and Vue do the bulk of their work in the browser, Svelte shifts that work into a compile step that happens when you build your app.&lt;/p&gt;

&lt;p&gt;Instead of using techniques like virtual DOM diffing, Svelte writes code that surgically updates the DOM when the state of your app changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-sveltekit"&gt;
  &lt;/a&gt;
  What is Svelte-Kit?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Taken from &lt;a href="https://kit.svelte.dev/"&gt;https://kit.svelte.dev/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;SvelteKit is a framework for building web applications of all sizes, with a beautiful development experience and flexible filesystem-based routing.&lt;/p&gt;

&lt;p&gt;Unlike single-page apps, SvelteKit doesn't compromise on SEO, progressive enhancement or the initial load experience — but unlike traditional server-rendered apps, navigation is instantaneous for that app-like feel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-sveltey"&gt;
  &lt;/a&gt;
  What is Sveltey
&lt;/h3&gt;

&lt;p&gt;Sveltey is a Cli I made for Svelte-Kit because I found having a cli is much easier than doing everything yourself.&lt;/p&gt;

&lt;p&gt;Sveltey uses the "svelte@next" command line tool to infer the &lt;code&gt;create&lt;/code&gt; command&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;new&lt;/code&gt; command is to create new component in the &lt;br&gt;
&lt;code&gt;./src/components&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading my post. If you want info or want to use my cli. Go to &lt;a href="https://github.com/Lalit64/sveltey"&gt;https://github.com/Lalit64/sveltey&lt;/a&gt; or &lt;a href="https://www.npmjs.com/package/@lalit64/sveltey"&gt;https://www.npmjs.com/package/@lalit64/sveltey&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>cli</category>
      <category>opensource</category>
    </item>
    <item>
      <title>10 Ways to optimise your Database queries</title>
      <author>Ktnl</author>
      <pubDate>Thu, 02 Sep 2021 11:39:08 +0000</pubDate>
      <link>https://dev.to/ktnl/10-ways-to-optimise-your-database-queries-5351</link>
      <guid>https://dev.to/ktnl/10-ways-to-optimise-your-database-queries-5351</guid>
      <description>&lt;p&gt;One of the common things most programmers do is writing database queries. The minimum expectation is to get the expected results from the written query. Say, you write a query and expect it to run only once or to work in a small dataset alone. In these cases, it doesn't matter whether the query is efficient or not. &lt;/p&gt;

&lt;p&gt;But.. but when you hit cases where your query is expected to run many times for fetching live data for a website or arriving at analytics out of your company’s huge data set. Here your queries impact your time and cost. Writing them in an optimised fashion is the way to go.&lt;br&gt;
Most database engines have a query optimiser that interprets or executes your query in the most effective way possible. But there are several strategies that can yield better results in many cases.&lt;/p&gt;

&lt;p&gt;I would like to share ten ways for writing optimised queries. In this blog, I have used Postgres queries as examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Ask for what you need&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following this not only helps in leading a peaceful life, but also in building faster queries :)  &lt;/p&gt;

&lt;p&gt;Most of the time it is tempting to start queries with “SELECT * FROM”. It can be convenient because you don't need to think about which columns you need. But convenience comes with a cost. The cost here is the amount of data your query will process.&lt;/p&gt;

&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM PAYMENT 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT AMOUNT,
    PAYMENT_DATE
FROM PAYMENT; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will load only these two columns. On the other hand, * will process unnecessary data as well. So ask for what you need alone!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. WHERE Vs HAVING&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WHERE and HAVING are used for specifying the conditions to fetch records. But using them interchangeably may cost you. &lt;code&gt;WHERE&lt;/code&gt; fetches the records satisfying the conditions but &lt;code&gt;HAVING&lt;/code&gt; fetches all the records and then applies the condition.&lt;/p&gt;

&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT PAYMENT_DATE, COUNT(AMOUNT)
FROM PAYMENT
GROUP BY PAYMENT_DATE
HAVING PAYMENT_DATE &amp;gt;= '04-02-2007';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT PAYMENT_DATE, COUNT(AMOUNT)
FROM PAYMENT
WHERE PAYMENT_DATE &amp;gt;= '04-02-2007'
GROUP BY PAYMENT_DATE;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use HAVING only when you deal with aggregated results and you cannot use WHERE. Otherwise WHERE clause would be faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. You may know by a handful the whole sack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you like to check, whether records matching your conditions exist in your system, you need not fetch all matching records instead just check for the sample record's existence.&lt;/p&gt;

&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM PAYMENT WHERE PAYMENT_DATE &amp;gt;= '01-01-2021'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT EXISTS 
(SELECT 1 
FROM PAYMENT 
WHERE PAYMENT_DATE &amp;gt;= '01-01-2021');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;EXISTS halts when it hits the first matching record. Also it is not bothered on the data to be fetched to the result set. Hence SELECT 1 (as shown in the example) / 0 / NULL / {any_column} will work and will not affect the execution or result of the query.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. JOIN Vs Subqueries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Subqueries may be easier to write/read but Joins are better optimised by the server. &lt;/p&gt;

&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT P.AMOUNT, P.PAYMENT_DATE 
FROM PAYMENT P
WHERE PAYMENT_DATE &amp;gt;= '04-02-2007' 
AND P.CUSTOMER_ID
IN 
(SELECT C.CUSTOMER_ID 
FROM CUSTOMER C 
WHERE C.LAST_NAME = 'SOTO');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT P.AMOUNT, P.PAYMENT_DATE FROM PAYMENT P
JOIN CUSTOMER C
ON P.CUSTOMER_ID = C.CUSTOMER_ID
WHERE PAYMENT_DATE &amp;gt;= '04-02-2007' AND C.LAST_NAME = 'SOTO';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the data engines evaluate subquery as separate queries. The internal queries are first ran and then from the result set of all, the actual results are derived. On the other hand Join produces the result in one go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. EXISTS Vs DISTINCT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While retrieving DISTINCT records using Join queries, using EXISTS would be more performant.&lt;/p&gt;

&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT DISTINCT C.FIRST_NAME
FROM CUSTOMER C
JOIN PAYMENT P ON P.CUSTOMER_ID = C.CUSTOMER_ID
WHERE AMOUNT = 4.99;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT C.FIRST_NAME FROM CUSTOMER C
WHERE EXISTS (SELECT 1 FROM PAYMENT P
              WHERE P.CUSTOMER_ID = C.CUSTOMER_ID
              AND AMOUNT = 4.99);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The duplicate rows are suppressed using DISTINCT. Similarly EXISTS checks for the existence of rows returned by a subquery and the first occurrence is only considered. DISTINCT sorts the retrieved rows before suppressing the duplicate rows. This sort operation is pretty expensive and can be avoided using EXISTS in this case. Hence EXISTS is preferred over DISTINCT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.UNION vs UNION ALL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are not worried about duplicate records, go for UNION ALL instead of UNION!&lt;/p&gt;

&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT  FIRST_NAME, LAST_NAME, 'ACTOR' AS ROLE  FROM ACTOR
UNION
SELECT FIRST_NAME, LAST_NAME, 'CUSTOMER' AS ROLE FROM CUSTOMER;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT FIRST_NAME, LAST_NAME, 'ACTOR' AS ROLE FROM ACTOR
UNION ALL
SELECT FIRST_NAME, LAST_NAME, 'CUSTOMER' AS ROLE FROM CUSTOMER;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;UNION ALL  performs better than UNION because by using UNION ALL we are avoiding an expensive sort operation. The Sort is done by the DISTINCT operation which is triggered internally by UNION.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.Indexes to retrieve records on demand&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indexes are very useful if you want to retrieve records frequently. If you are looking for a small number of rows having vast column information to be retrieved frequently, then Indexes will make your job faster!&lt;/p&gt;

&lt;p&gt;Say, If you need to retrieve the list of films using titles frequently.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * 
FROM FILM 
WHERE TITLE LIKE '{any_film_prefix}%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will always make a sequential scan which takes time. So if you create an index on the hot field ‘title’,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE AN INDEX ON FILM(TITLE);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same query will be much faster. &lt;/p&gt;

&lt;p&gt;The query planner will be using an Index scan instead of a sequential scan. You can create indexes on multiple columns as well.&lt;/p&gt;

&lt;p&gt;Note: You can check if the query planner is using Index scan or sequential scan by prefixing explain analyse to your query.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;EXPLAIN ANALYSE SELECT * FROM FILM WHERE TITLE LIKE 'Bird%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--owsa9YUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrjac8wv3fqepe0nq35b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--owsa9YUs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrjac8wv3fqepe0nq35b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Few points to keep in mind before going for Indexes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Index scan happens when the retrieved row count is not huge, if it is so, most of the query planners will compare Indexed and sequential scan and go for the latter.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM FILM
WHERE TITLE LIKE '%b%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As it makes more sense to navigate sequentially the huge recordset rather than making the index scan for these many records and then retrieving the records.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Index scan will not work with SQL functions applied on indexed keys.
Even though the below query will perform an Index scan,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM FILM
WHERE FILM_ID BETWEEN 20 AND 30;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While the below query will perform a sequential scan because of mod function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM FILM
WHERE MOD(FILM_ID,2) = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The index comes with the cost. Faster retrieval comes with space costs for storing indexes and maintenance costs for keeping the indexes updated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;8. Use CROSS JOIN - iff needed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This Join results in cartesian product which may not be needed itself. Say you are cross joining film and actor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT FILM.NAME, ACTOR.*
FROM FILM, ACTOR
WHERE ACTOR.ACTOR_ID = FILM.ACTOR_ID;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there are 100 records in the film and actor table each, it would first form 10,000 records (for 1 film record all 100 actor records will be present), and then it filters records having matching actor_id. This will be expensive for huge record sets. &lt;/p&gt;

&lt;p&gt;Instead of&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT FILM.NAME, ACTOR.*
FROM FILM
CROSS JOIN ACTOR
WHERE ACTOR.ACTOR_ID = FILM.ACTOR_ID;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT FILM.NAME, ACTOR.*
FROM FILM
INNER JOIN ACTOR
WHERE ACTOR.ACTOR_ID = FILM.ACTOR_ID;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will form only the required 100 records in one go.&lt;br&gt;
Note: Cross join and ‘,’ can be used for getting the cartesian product result set.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Materialized views&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using views with more joins or complex select values and the underlying data of the view is less frequently modified, then using Materialized view will improve your retrieval performance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE MATERIALIZED VIEW AVAILABLE_FILMS AS
SELECT ARRAY_AGG(F.TITLE) AS FILMS,
    C.NAME AS CATEGORY,
    COUNT(F.TITLE) AS NUMBER_OF_FILMS
FROM FILM F
INNER JOIN FILM_CATEGORY FC ON F.FILM_ID = FC.FILM_ID
INNER JOIN CATEGORY C ON FC.CATEGORY_ID = C.CATEGORY_ID
GROUP BY CATEGORY
HAVING COUNT(F.TITLE) &amp;gt; 15
ORDER BY COUNT(F.TITLE) DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a materialized view is referenced in a query, the data is returned directly from the materialized view, like from a single table. Hence no overhead of joins or select happens every time the data is retrieved.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM AVAILABLE_FILMS;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cost here is maintaining/refreshing the materialized view with updated table values. Materialized views can be updated on a regular basis either through triggers or commit changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REFRESH MATERIALIZED VIEW AVAILABLE_FILMS;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;10. Avoid OR conditions on frequently used queries&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Say you are interested in getting customers whose first name starts with {given_input} or email address starts with {given_input} and has ‘.org’ suffix. &lt;br&gt;
For example the given input is Kim&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT FIRST_NAME,
    LAST_NAME,
    EMAIL
FROM CUSTOMER
WHERE FIRST_NAME LIKE 'Kim%'
AND EMAIL Like 'Kim%.org';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also this query frequently runs. So you would intend to create an index on both columns.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE INDEX ON CUSTOMER(FIRST_NAME, EMAIL);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But this will not work, the query planner will still use sequential scan because the condition here is &lt;code&gt;OR - condition on first_name OR condition on email&lt;/code&gt;.&lt;br&gt;
In this case, creating separate indexes for separate columns alone would not help. A better performance approach will be splitting the queries and running them with union along with separate indexes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE INDEX ON CUSTOMER(EMAIL);

CREATE INDEX ON CUSTOMER(FIRST_NAME);

SELECT FIRST_NAME,
    LAST_NAME,
    EMAIL
FROM CUSTOMER
WHERE EMAIL LIKE 'kim%.org'
UNION
SELECT FIRST_NAME,
    LAST_NAME,
    EMAIL
FROM CUSTOMER
WHERE FIRST_NAME LIKE 'Kim%';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Going by this way, we can accommodate another column to be added in the where clause as well. As mentioned if you don’t mind duplicate records, replace UNION with UNION ALL which is more performant.&lt;/p&gt;

&lt;p&gt;That's it for now! Next time when you get to write SQL queries give these tips a thought, think about your use cases and choose the wiser approach. &lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>sql</category>
      <category>postgres</category>
      <category>database</category>
    </item>
    <item>
      <title>20+ beginner Cloud &amp; DevOps resources that are free!</title>
      <author>Simon Holdorf</author>
      <pubDate>Thu, 02 Sep 2021 11:29:11 +0000</pubDate>
      <link>https://dev.to/simonholdorf/20-beginner-cloud-devops-resources-that-are-free-1oe3</link>
      <guid>https://dev.to/simonholdorf/20-beginner-cloud-devops-resources-that-are-free-1oe3</guid>
      <description>&lt;p&gt;If you want to get started with Cloud &amp;amp; DevOps but don't know where I've compiled some incredible resources for you. Of course, not all of them might be relevant for you so pick those where you can improve your skills!&lt;/p&gt;

&lt;p&gt;Start your journey now!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-introduction-to-cloud-computing-getting-started"&gt;
  &lt;/a&gt;
  1. Introduction to Cloud Computing | Getting started
&lt;/h2&gt;

&lt;p&gt;Introductory course to cloud computing by IBM on course. Great way to get started with the topic!👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.coursera.org/learn/introduction-to-cloud"&gt;https://www.coursera.org/learn/introduction-to-cloud&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-aws-foundations-course-getting-started"&gt;
  &lt;/a&gt;
  2. AWS Foundations Course | Getting started
&lt;/h2&gt;

&lt;p&gt;Learn the fundamentals of the AWS Cloud with this short introduction course. There are many more resources available from AWS and this is a good starting point.👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aws.training/Details/Video?id=49639"&gt;https://www.aws.training/Details/Video?id=49639&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-aws-cloud-practitioner-essentials-getting-started"&gt;
  &lt;/a&gt;
  3. AWS Cloud Practitioner Essentials | Getting started
&lt;/h2&gt;

&lt;p&gt;In this 6-hours long course, you will learn about AWS Cloud concepts, services, security, architecture, pricing, and support. It also helps you prepare for the Certified Cloud Practitioner exam.👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.aws.training/Details/eLearning?id=60697"&gt;https://www.aws.training/Details/eLearning?id=60697&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-madebygps-getting-started"&gt;
  &lt;/a&gt;
  4. MadeByGPS | Getting Started
&lt;/h2&gt;

&lt;p&gt;This awesome repository is based on practical experience going from service desk to cloud engineering. This can be your starting point for an incredible career! 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/madebygps/self-taught-guide-to-cloud-computing"&gt;https://github.com/madebygps/self-taught-guide-to-cloud-computing&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-google-cloud-training-learning-paths"&gt;
  &lt;/a&gt;
  5. Google Cloud Training | Learning Paths
&lt;/h2&gt;

&lt;p&gt;Google is offering some great and mostly free resources to get you started with cloud computing and its platform.👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/training"&gt;https://cloud.google.com/training&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-azure-learning-paths"&gt;
  &lt;/a&gt;
  6. Azure | Learning Paths
&lt;/h2&gt;

&lt;p&gt;With these (mostly) free resources from Microsoft, you can grow your skills to build and manage applications in the cloud, on-premises, and at the edge. 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/learn/azure/"&gt;https://docs.microsoft.com/en-us/learn/azure/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-azure-devops-labs-handson"&gt;
  &lt;/a&gt;
  7. Azure DevOps Labs | Hands-On
&lt;/h2&gt;

&lt;p&gt;Azure provides great hands-on labs that will help you to get started with Azure DevOps services. You just need a valid Azure Account (12 months free!) 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://azuredevopslabs.com/default.html"&gt;https://azuredevopslabs.com/default.html&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-aws-workshops-handson"&gt;
  &lt;/a&gt;
  8. AWS Workshops | Hands-On
&lt;/h2&gt;

&lt;p&gt;100+ hands-on workshops created by AWS experts 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://workshops.aws/"&gt;https://workshops.aws/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-devops-exercises-handson"&gt;
  &lt;/a&gt;
  9. DevOps Exercises | Hands-On
&lt;/h2&gt;

&lt;p&gt;This is a great repo by containing exercises and questions including answers to help you understand DevOps better and even prepare for interviews. 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bregman-arie/devops-exercises"&gt;https://github.com/bregman-arie/devops-exercises&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-qwiklabs-handson"&gt;
  &lt;/a&gt;
  10. Qwiklabs | Hands-On
&lt;/h2&gt;

&lt;p&gt;Qwiklabs provides a lot of learning materials for the major cloud providers and quite a lot of them are free. You can even join the free GCP program to earn a GCP skill badge 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://go.qwiklabs.com/qwiklabs-free"&gt;https://go.qwiklabs.com/qwiklabs-free&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#11-devops-the-hard-way-handson"&gt;
  &lt;/a&gt;
  11. DevOps - The Hard Way | Hands-On
&lt;/h2&gt;

&lt;p&gt;A great repository containing free labs, documentation, diagrams, and docs for setting up an entire workflow and DevOps environment from a real-world perspective in AWS. 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS"&gt;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#12-tutorialsdojo-exams-guides-amp-cheat-sheets"&gt;
  &lt;/a&gt;
  12. Tutorialsdojo | Exams, Guides &amp;amp; Cheat Sheets
&lt;/h2&gt;

&lt;p&gt;Tutorialsdojo provides outstanding resources to prepare for AWS and other certification exams and many of them are free! 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tutorialsdojo.com/"&gt;https://tutorialsdojo.com/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#13-techworld-with-nana-youtube-channel"&gt;
  &lt;/a&gt;
  13. Techworld with Nana | Youtube Channel
&lt;/h2&gt;

&lt;p&gt;Nana is one of my favorite creators around DevOps. She provides top-notch material, definitely sub to her Youtube 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA"&gt;https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#14-gps-youtube-channel"&gt;
  &lt;/a&gt;
  14. GPS | Youtube Channel
&lt;/h2&gt;

&lt;p&gt;Gwyneth provides lots of useful information and steps to enter the world of cloud &amp;amp; DevOps 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCbjgKwnWnGG7sKCPTRgrFcw"&gt;https://www.youtube.com/channel/UCbjgKwnWnGG7sKCPTRgrFcw&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#15-corey-shafer-youtube-channel"&gt;
  &lt;/a&gt;
  15. Corey Shafer | Youtube Channel
&lt;/h2&gt;

&lt;p&gt;Corey provides plenty of tutorials regarding, Git, Python, Linux, Terminal Commands, SQL, ... check this out 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g"&gt;https://www.youtube.com/channel/UCCezIgC97PvUuR4_gbFUs5g&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#16-cloud-advocate-youtube-channel"&gt;
  &lt;/a&gt;
  16. Cloud Advocate | Youtube Channel
&lt;/h2&gt;

&lt;p&gt;Krishna creates videos around the major cloud providers every week, check him out 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCjfE5EmNU1kyf1wwrtYlnGQ"&gt;https://www.youtube.com/channel/UCjfE5EmNU1kyf1wwrtYlnGQ&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#17-freecodecamp-youtube-channel"&gt;
  &lt;/a&gt;
  17. FreeCodeCamp | Youtube Channel
&lt;/h2&gt;

&lt;p&gt;The freecodecamp youtube channel provides lots of videos around cloud, programming languages, etc. 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#18-edureka-youtube-channel"&gt;
  &lt;/a&gt;
  18. Edureka | Youtube Channel
&lt;/h2&gt;

&lt;p&gt;Edureka provides a lot of great video series about cloud, DevOps, and many more topics.👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCkw4JCwteGrDHIsyIIKo4tQ"&gt;https://www.youtube.com/channel/UCkw4JCwteGrDHIsyIIKo4tQ&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#19-the-cloudcast-podcast"&gt;
  &lt;/a&gt;
  19. The Cloudcast | Podcast
&lt;/h2&gt;

&lt;p&gt;Co-hosted by Aaron Delp and Brian Gracely, the podcast revolves around cloud computing, AWS, Azure, big data, AI, ML, ...👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.thecloudcast.net/"&gt;https://www.thecloudcast.net/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#20-cloud-unfiltered-podcast-podcast"&gt;
  &lt;/a&gt;
  20. Cloud Unfiltered Podcast | Podcast
&lt;/h2&gt;

&lt;p&gt;Hosted by Cisco, this podcast is a series of interviews with the people working to move cloud technology and implementation forward.👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cisco.com/c/en/us/solutions/cloud/podcasts.html"&gt;https://www.cisco.com/c/en/us/solutions/cloud/podcasts.html&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#21-cloud-computing-reddit-community"&gt;
  &lt;/a&gt;
  21. Cloud Computing Reddit | Community
&lt;/h2&gt;

&lt;p&gt;This is a group of 16.2K people sharing news, articles, and tools covering cloud computing, grid computing, and distributed computing.👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.reddit.com/r/cloudcomputing/"&gt;https://www.reddit.com/r/cloudcomputing/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#22-aws-stash-website-resources"&gt;
  &lt;/a&gt;
  22. AWS Stash Website | Resources
&lt;/h2&gt;

&lt;p&gt;AWS provides a collection of all their videos, keynotes, blogs, whitepapers, tech talks, and more!👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://awsstash.com/"&gt;https://awsstash.com/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#23-aws-certifications-reddit-community"&gt;
  &lt;/a&gt;
  23. AWS Certifications Reddit | Community
&lt;/h2&gt;

&lt;p&gt;A great and warm place to see how others prepared for the exams. People share their learning, prep material, and cheer each other up.👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.reddit.com/r/AWSCertifications/"&gt;https://www.reddit.com/r/AWSCertifications/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Quality over quantity here - only hand-picked, top-notch resources have made it to this list! 💯&lt;/p&gt;

&lt;p&gt;If you like this, kindly suggest following me on &lt;a href="https://twitter.com/simonholdorf"&gt;Twitter&lt;/a&gt; 🧡&lt;/p&gt;

&lt;p&gt;Have other resources? Please share 👇 &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>cloud</category>
      <category>devops</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building Conway's Game of Life in Javascript</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 02 Sep 2021 11:24:07 +0000</pubDate>
      <link>https://dev.to/codesphere/building-conway-s-game-of-life-in-javascript-4gon</link>
      <guid>https://dev.to/codesphere/building-conway-s-game-of-life-in-javascript-4gon</guid>
      <description>&lt;p&gt;Conway's Game of Life has amazed Computer Scientists and Mathematicians for over half a century now. For those who don't know, the Game of Life is a zero-player game that follows four simple rules and can end in chaotic, beautiful, and mind-blowing outcomes. This simple game can even be used to simulate a Turing machine (you can essentially program using the game).&lt;/p&gt;

&lt;p&gt;Today, I'm going to be showing you how you can make this game yourself with only 100 lines of Javascript.&lt;/p&gt;

&lt;p&gt;You can get a feel for the game here: &lt;a href="https://playgameoflife.com/"&gt;https://playgameoflife.com/&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-conways-game-of%C2%A0life"&gt;
  &lt;/a&gt;
  What is Conway's Game of Life?
&lt;/h3&gt;

&lt;p&gt;Conway's Game of Life starts with a 2d grid, and each cell in the grid being either alive or dead. The grid will then evolve after each iteration based on the following rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Any living cell with less than 2 live neighbors dies&lt;/li&gt;
&lt;li&gt;Any living cell with 2 or 3 live neighbors continues to be alive&lt;/li&gt;
&lt;li&gt;Any dead cell with three live neighbors becomes a live cell&lt;/li&gt;
&lt;li&gt;Any live cell with more than 3 live neighbors dies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Following these rules, each cell counts the number of live cells adjacent to it and determines its upcoming status.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tech-well-be%C2%A0using"&gt;
  &lt;/a&gt;
  Tech We'll Be Using
&lt;/h3&gt;

&lt;p&gt;To create our Game of Life Simulator, we are going to be using Javascript in conjunction with the following tools:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#p5js"&gt;
  &lt;/a&gt;
  P5.js
&lt;/h4&gt;

&lt;p&gt;P5.js is an easy-to-use javascript graphics library. It is going to make displaying our cells extremely easy. You can check it out here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://p5js.org/"&gt;https://p5js.org/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codesphere"&gt;
  &lt;/a&gt;
  Codesphere
&lt;/h4&gt;

&lt;p&gt;Codesphere is a no-config cloud provider that will allow us to deploy our app seamlessly. We're going to use it to host our Game of Life simulator. You can learn more here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://link.codesphere.com/CZ"&gt;https://codesphere.com&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h4&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#cool-starting-grids"&gt;
  &lt;/a&gt;
  Cool Starting Grids
&lt;/h4&gt;

&lt;p&gt;And there we go! We've created Conway's Game of Life with some pretty rudimentary javascript! Here are some cool creations you can create:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5W3eTi0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvdotq074o9yglx70v1x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5W3eTi0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvdotq074o9yglx70v1x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jV4V9LGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28pybnkukn7xlk85vjap.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jV4V9LGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28pybnkukn7xlk85vjap.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aWWKXcnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu7mvqzseuhjaw6novif.gif" alt="Alt Text"&gt;
&lt;/h2&gt;

&lt;p&gt;These are just the tip of the iceberg! By adjusting the grid length and survival rules there is literally an infinite number of patterns you can generate.&lt;/p&gt;




&lt;p&gt;Hope you enjoyed it!&lt;/p&gt;

&lt;p&gt;Happy coding from your good friends at &lt;a href="https://link.codesphere.com/CZ"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>p5</category>
      <category>javascript</category>
      <category>gamedev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Automating quality checks for Kubernetes YAMLs</title>
      <author>Wojtek Krzywiec</author>
      <pubDate>Thu, 02 Sep 2021 10:44:43 +0000</pubDate>
      <link>https://dev.to/wkrzywiec/automating-quality-checks-for-kubernetes-yamls-398</link>
      <guid>https://dev.to/wkrzywiec/automating-quality-checks-for-kubernetes-yamls-398</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="//unsplash.com/@tegethoff"&gt;Mark Tegethoff&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If you have ever wondered how to make sure that your YAML Kubernetes objects are defined correctly and are following industry best practices, this blog post is for you. In a few paragraphs, I'll show you how to create a GitHub Actions workflow that will first analyze K8s object definitions using Datree, then deploy it on a cluster and run some tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It doesn't matter if you've just started your journey with Kubernetes or you're already an expert in it; writing object definitions is not an easy task. You can very easily make a mistake that could be very costly, if deployed to a production environment. And if you're just starting to learn Kubernetes, you might need help understanding which metadata and specifications should be provided, but, by design, are not mandatory.&lt;/p&gt;

&lt;p&gt;The ideal way to navigate these challenges would be to have an experienced colleague perform a review of your code changes. But sometimes you don't have such a person around, or it's very hard to get feedback from them. And even if you do have an amazing person to help you, it still won't prevent you from making mistakes from time to time. &lt;/p&gt;

&lt;p&gt;Instead, I would like to show you another approach: create a simple, automated quality check of your K8s object definitions using &lt;a href="https://www.datree.io/?utm_source=Wojtek&amp;amp;utm_medium=devto+article&amp;amp;utm_campaign=Automating+quality+check+for+Kubernetes+YAMLs&amp;amp;utm_id=influencer"&gt;Datree.io&lt;/a&gt;, &lt;a href="https://cloud.google.com/kubernetes-engine"&gt;Google Kubernetes Engine&lt;/a&gt; and &lt;a href="https://github.com/features/actions"&gt;Github Actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll build a GitHub Actions workflow which will be triggered after each change made on the &lt;em&gt;master&lt;/em&gt; branch. The workflow will have two stages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Datree&lt;/em&gt; analysis of missing configurations, and quality check,&lt;/li&gt;
&lt;li&gt;Deployment and testing an example application in a real cluster (&lt;em&gt;GKE&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So roll up your sleeves and let's automate it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workflow-structure"&gt;
  &lt;/a&gt;
  Workflow structure
&lt;/h3&gt;

&lt;p&gt;First of all you need a GitHub repository to hold our YAML files. I'm using my old project - &lt;a href="https://github.com/wkrzywiec/k8s-helm-helmfile"&gt;k8s-helm-helmfile&lt;/a&gt;. This repository has three folders, each containing a different approach to deploy applications into Kubernetes clusters. You can read more about those approaches in my previous blog posts about &lt;a href="https://wkrzywiec.medium.com/deployment-of-multiple-apps-on-kubernetes-cluster-walkthrough-e05d37ed63d1"&gt;vanilla K8s&lt;/a&gt;, &lt;a href="https://wkrzywiec.medium.com/how-to-deploy-application-on-kubernetes-with-helm-39f545ad33b8"&gt;Helm&lt;/a&gt; and &lt;a href="https://medium.com/swlh/how-to-declaratively-run-helm-charts-using-helmfile-ac78572e6088"&gt;helmfile&lt;/a&gt; deployments.&lt;/p&gt;

&lt;p&gt;To keep this blog post short, I'll show how to create a workflow that will use Helm to deploy an application, but you can easily do this with other approaches, such as those mentioned previously.&lt;/p&gt;

&lt;p&gt;The first step is to create a workflow definition file. In the root folder of a repository create a new directory &lt;em&gt;./github/workflows&lt;/em&gt; inside of which there will be a &lt;code&gt;master.yaml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Quality check&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;master'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It contains following specifications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; - name of our workflow&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;on&lt;/code&gt; - a condition based on which a workflow will be triggered. A workflow will only be started when changes are committed on the &lt;code&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that, you can move on to the best part - defining jobs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#datree-analysis"&gt;
  &lt;/a&gt;
  Datree analysis
&lt;/h3&gt;

&lt;p&gt;In this part you will use a free tool called &lt;em&gt;Datree&lt;/em&gt;, which analyzes K8s definitions and will stop the workflow if it finds any problems. It's very important to have a safety net like this, so you can feel confident that even if you make a mistake, or aren’t aware of best practices, an assistant will keep you on track. &lt;/p&gt;

&lt;p&gt;Before defining a GitHub workflow, let's install &lt;em&gt;Datree&lt;/em&gt; locally. To do that, go to their &lt;a href="https://www.datree.io/?utm_source=Wojtek&amp;amp;utm_medium=devto+article&amp;amp;utm_campaign=Automating+quality+check+for+Kubernetes+YAMLs&amp;amp;utm_id=influencer"&gt;official website&lt;/a&gt; which will guide you how to install the &lt;em&gt;Datree&lt;/em&gt; CLI. I'm using Linux (or to be precise, WSL), so only the following command is necessary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; curl https://get.datree.io | /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After couple of seconds Datree will be installed. &lt;/p&gt;

&lt;p&gt;To test it out, go to the folder where Kubernetes YAML files are located and run &lt;em&gt;Datree&lt;/em&gt; test command (in my case I'm using a vanilla K8s file from &lt;a href="https://github.com/wkrzywiec/k8s-helm-helmfile"&gt;k8s-helm-helmfile project&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; datree &lt;span class="nb"&gt;test &lt;/span&gt;adminer-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where the &lt;code&gt;adminer-deployment.yaml&lt;/code&gt; file is a Kubernetes object definition. &lt;/p&gt;

&lt;p&gt;Here is the output that I got:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uFJOCqJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m5xi01xgh0e0ksmnqx9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uFJOCqJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m5xi01xgh0e0ksmnqx9.png" alt="datree-test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, &lt;em&gt;Datree&lt;/em&gt; has prepared a short summary of how many rules this YAML file violates. It provides a very useful explanation with a hint on how to fix them.&lt;/p&gt;

&lt;p&gt;Starting from here, you can work on each issue to make these tests pass. It's a great way to learn and practise. But what if you deliberately chose not to comply with some of the rules? Luckily, &lt;em&gt;Datree&lt;/em&gt; gives a possibility to prepare a custom policy, a set of rules against which YAML files will be checked.&lt;/p&gt;

&lt;p&gt;To set up a policy, you need to go to your dashboard. Your personal link to it is located at the end of each scan, in the summary table, in the last row called &lt;code&gt;See all rules in policy&lt;/code&gt; (I've marked it in a previous screenshot). It will take you to a login page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5PFiq96U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xelxmef6icptu225cgx3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5PFiq96U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xelxmef6icptu225cgx3.PNG" alt="login-page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you need to login. For convenience, I would suggest using the GitHub account. After successful authorization you will reach a &lt;em&gt;Policies&lt;/em&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06wssFIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qbfyn3ahvue92qo1a5d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06wssFIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qbfyn3ahvue92qo1a5d.PNG" alt="datree-policies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can inspect all the rules that you can turn on and off. By default, only some of them are enabled. To activate or deactivate them, use the toggle button visible next to the rule name.&lt;/p&gt;

&lt;p&gt;If a name of a rule is too enigmatic, you can check its details by clicking on its name. It will then show more information and a sample output when this rule is violated. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4csrd07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89zc7kpto2byjjso0thd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4csrd07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89zc7kpto2byjjso0thd.PNG" alt="datree-rule"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another cool feature is that you can define your own tips on how to fix a problem. The defaults should be enough, but if you prefer to extend it, view it in your own language, or add a link to a blog post, Stack Overflow discussion or any other online material, you can put it here by simply clicking an &lt;em&gt;Edit&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;Finally, you can create your own set of rules, known as policies, to run for different applications, environments and stages. Simply click the &lt;em&gt;Create Policy&lt;/em&gt; button at the top of the page.&lt;/p&gt;

&lt;p&gt;Let's now check the second page, available on the left panel, called &lt;em&gt;History&lt;/em&gt;. As the name might suggest, here you can see a convenient summary of all previous test runs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1NxyySPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69nkkly5k1ff1q6abs3d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1NxyySPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69nkkly5k1ff1q6abs3d.PNG" alt="datree-history"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before writing this post, I’d already played around with &lt;em&gt;Datree&lt;/em&gt;, which is why I already have several test runs listed in the history panel, but in your case you should have only one.&lt;/p&gt;

&lt;p&gt;That would be it for a quick tour around &lt;em&gt;Datree&lt;/em&gt; dashboard! &lt;/p&gt;

&lt;p&gt;Now let's build a GitHub Actions workflow. &lt;/p&gt;

&lt;p&gt;First, provide your &lt;em&gt;Datree&lt;/em&gt; token as an environment variable in a workflow. To achieve this, click on your avatar in the top right corner of the &lt;em&gt;Datree&lt;/em&gt; dashboard, then click &lt;strong&gt;Settings&lt;/strong&gt;. It'll guide you to the page where you can find your token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8JmJDhZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2p6f2ahpdtd3bwww5lw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8JmJDhZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2p6f2ahpdtd3bwww5lw.png" alt="datree-token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve copied the token, go to your GitHub project/repository’s &lt;strong&gt;Settings&lt;/strong&gt; page. Then select &lt;strong&gt;Secrets&lt;/strong&gt; and click the &lt;strong&gt;New repository secret&lt;/strong&gt; button. &lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Name&lt;/strong&gt; field put &lt;code&gt;DATREE_TOKEN&lt;/code&gt; and in the &lt;strong&gt;Value&lt;/strong&gt; field a token copied from &lt;em&gt;Datree&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBKqBZOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drd2msj27pjevkwqe0vs.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBKqBZOv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drd2msj27pjevkwqe0vs.PNG" alt="github-secret"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can move on to the workflow's definition file and define the first job:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;datree&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Validate Helm charts&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dtzar/helm-kubectl:3.6.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's called &lt;code&gt;datree&lt;/code&gt;, it runs on the latest Ubuntu inside a &lt;a href="https://hub.docker.com/r/dtzar/helm-kubectl/"&gt;dtzar/helm-kubectl&lt;/a&gt; Docker container. I've selected this setup because I would like to run tests against Helm release (and not vanilla K8s as it was done previously). The reason to choose this Docker image is because it contains necessary dependencies (K8s and Helm), so I can skip their installation and make my workflow faster.&lt;/p&gt;

&lt;p&gt;Let’s define the next three steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout 🛎️&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Datree 🔨&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;helm plugin install https://github.com/datreeio/helm-datree&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Datree test 🔥&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;DATREE_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DATREE_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;helm datree test ./helm/app -- --values ./helm/adminer.yaml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the first one, &lt;code&gt;actions/checkout@v2&lt;/code&gt;, you get code from the repository. In step two, you instal the &lt;a href="https://hub.datree.io/helm-plugin?utm_source=Wojtek&amp;amp;utm_medium=devto+article&amp;amp;utm_campaign=Automating+quality+checks+for+Kubernetes+YAMLs&amp;amp;utm_id=influencer"&gt;Datree Helm plugin&lt;/a&gt; to run &lt;em&gt;Datree&lt;/em&gt; tests using Helm. In the third step, you run actual tests using a Helm CLI. The &lt;code&gt;DATREE_TOKEN&lt;/code&gt; environment variable is added to it so the result will be linked with a &lt;em&gt;Datree&lt;/em&gt; account. &lt;/p&gt;

&lt;p&gt;Finally, in an actual run script, I provide the location of a Helm template and the location of testing &lt;code&gt;values.yaml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;After that you can commit changes and push it to GitHub. It should trigger a workflow, which will be available in the &lt;strong&gt;Actions&lt;/strong&gt; tab.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HLcSSDUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7xh2v531ulost9ky22r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HLcSSDUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7xh2v531ulost9ky22r.PNG" alt="github-datree-fail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, several tests are failing, demonstrated by the failing status of a workflow. To find out more, click on the failing job. It will take you to the console output, where you can investigate what went wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Mer1XRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xe3r20z44t3os1cr3po.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Mer1XRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3xe3r20z44t3os1cr3po.PNG" alt="github-datree-fail-details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As well as checking policy check result(s) in the workflow's console, you can go back to &lt;a href="https://app.datree.io/cli/invocations"&gt;the History page&lt;/a&gt; in the &lt;em&gt;Datree&lt;/em&gt; dashboard and analyze errors there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4RFMRC1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0a2rrs2m1cba0ta6jy2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4RFMRC1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0a2rrs2m1cba0ta6jy2.PNG" alt="datree-fail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have a similar screen to mine, stop here, correct mistakes and push changes to GitHub. If you feel that some rules are obsolete for you, turn them off in the &lt;em&gt;Datree&lt;/em&gt; dashboard, but do not turn off too many!&lt;/p&gt;

&lt;p&gt;After fixing all the issues and re-running the workflow, the previously marked red exes [X] will become green check marks [V], indicating that the workflow has passed the validation and policy check.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MV7s-fEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ffa7tcuzol6r1l6v2og.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MV7s-fEJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ffa7tcuzol6r1l6v2og.PNG" alt="github-datree-success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And some details about a job:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PdM2neQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib5lwgs6flr3wczw41b4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PdM2neQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ib5lwgs6flr3wczw41b4.PNG" alt="github-datree-success-details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The successful result will be also visible in the &lt;em&gt;Datree&lt;/em&gt; dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNo6X_kS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h8ge9rhf8lv79exyiuo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNo6X_kS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h8ge9rhf8lv79exyiuo.PNG" alt="datree-success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome! We can now move on to the next part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-on-gke"&gt;
  &lt;/a&gt;
  Testing on GKE
&lt;/h3&gt;

&lt;p&gt;After making sure that templates are okay from &lt;em&gt;Datree&lt;/em&gt;’s point of view, move to deploying them to a real Kubernetes cluster (which is not production) and then check if everything is working there, e.g. if a website is available over the internet, etc.&lt;/p&gt;

&lt;p&gt;First step would be to have a cluster. I've picked &lt;em&gt;Google Kubernetes Engine&lt;/em&gt; (&lt;em&gt;GKE&lt;/em&gt;) because of its &lt;a href="https://cloud.google.com/free/docs/gcp-free-tier/#kubernetes-engine"&gt;free tier&lt;/a&gt;, but if you have your own cluster (on AWS or any other cloud provider) just use it.&lt;/p&gt;

&lt;p&gt;Right now I'll follow with steps that are necessary to set up a job for &lt;em&gt;GKE&lt;/em&gt;, so if you already have a &lt;em&gt;GKE&lt;/em&gt; or any other Kubernetes cluster up and running, skip this part.&lt;/p&gt;

&lt;p&gt;Before adding a new job to a workflow, you need to set up couple of things in &lt;em&gt;GKE&lt;/em&gt; (these instructions are based on official &lt;a href="https://cloud.google.com/kubernetes-engine/docs/quickstart"&gt;GKE Quickstart guide&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a Google Cloud account. &lt;a href="https://cloud.google.com"&gt;You can start from the main page&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;Create or select an already existing Google Cloud project. It can be done either from &lt;a href="https://console.cloud.google.com/home/"&gt;Google Cloud console&lt;/a&gt; or &lt;a href="https://console.cloud.google.com/projectselector2/home/dashboard"&gt;from Google project selector&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Enable billing for a project. You will need to provide your credit card information, &lt;a href="https://cloud.google.com/billing/docs/how-to/modify-project"&gt;like it's described here&lt;/a&gt;, but don't worry, you won't be charged anything. This step is just to verify that you're a human.&lt;/li&gt;
&lt;li&gt;Enable &lt;em&gt;GKE&lt;/em&gt; APIs, which &lt;a href="https://console.cloud.google.com/flows/enableapi?apiid=artifactregistry.googleapis.com,container.googleapis.com"&gt;can be done on this page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until now, all configuration was carried out in a web browser, but now you need to move to either &lt;a href="https://cloud.google.com/shell"&gt;Google Cloud Shell&lt;/a&gt;, or &lt;a href="https://cloud.google.com/sdk/docs/install"&gt;install Cloud SDK&lt;/a&gt; and follow the instructions in a terminal:&lt;/p&gt;

&lt;p&gt;Set up basic configuration in &lt;code&gt;gcloud&lt;/code&gt; tool, like default project, region and zone. In my case, the project name is &lt;code&gt;k8s-helm-helmfile&lt;/code&gt; and the region is &lt;code&gt;europe-central2&lt;/code&gt;, but for you it may be different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; gcloud config &lt;span class="nb"&gt;set &lt;/span&gt;project k8s-helm-helmfile

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; gcloud config &lt;span class="nb"&gt;set &lt;/span&gt;compute/region europe-central2

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; gcloud config &lt;span class="nb"&gt;set &lt;/span&gt;compute/zone europe-central2-a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an &lt;a href="https://cloud.google.com/iam/docs/service-accounts"&gt;IAM Service Account&lt;/a&gt;, which is an account which will be used in GitHub Action workflow. I've called mine &lt;code&gt;helm-github-actions-service&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; gcloud iam service-accounts create helm-github-actions-service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get an email from the newly created Service Account. You will need it for the next step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; gcloud iam service-accounts list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Assign roles to a Service Account, where &lt;code&gt;&amp;lt;EMAIL&amp;gt;&lt;/code&gt; tag is taken from previous step:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; gcloud projects add-iam-policy-binding k8s-helm-helmfile &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--member&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;serviceAccount:&amp;lt;EMAIL&amp;gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;roles/container.admin &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;roles/storage.admin &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;roles/container.clusterAdmin &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;roles/iam.serviceAccountUser &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;roles/container.developer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Export the Service Account Key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; gcloud iam service-accounts keys create key.json &lt;span class="nt"&gt;--iam-account&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;EMAIL&amp;gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GKE_SA_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;key.json | &lt;span class="nb"&gt;base64&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add it as a GitHub Secret to a project (the same way as for &lt;code&gt;DATREE_TOKEN&lt;/code&gt;) with &lt;code&gt;GKE_SA_KEY&lt;/code&gt; as key. To see the value of the exported key you can use the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;printenv &lt;/span&gt;GKE_SA_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything is set up, now go back to workflow definition where you first created a Kubernetes cluster on &lt;em&gt;GKE&lt;/em&gt;, deploy a sample Helm release, and test it. &lt;/p&gt;

&lt;p&gt;First create a new job called &lt;code&gt;gke&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;gke&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test Helm chart on GKE&lt;/span&gt; 
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;datree&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;PROJECT_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;k8s-helm-helmfile&lt;/span&gt;
      &lt;span class="na"&gt;GKE_CLUSTER&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;helm-test&lt;/span&gt;
      &lt;span class="na"&gt;GKE_REGION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;europe-central2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly to the previous example, you have &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;runs-on&lt;/code&gt; configurations. There is also a &lt;code&gt;needs&lt;/code&gt; configuration, which means that in order to run this job, the &lt;code&gt;datree&lt;/code&gt; job needs to first be completed successfully. This prevents spinning up clusters and deploying a sample application if something goes wrong during a &lt;em&gt;Datree&lt;/em&gt; check. The last part of job configuration are environment variables (&lt;code&gt;env&lt;/code&gt;), which will be used in workflow steps. They're my GCP project id, K8s cluster name, and my &lt;em&gt;GKE&lt;/em&gt; region.&lt;/p&gt;

&lt;p&gt;Moving on to the next steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout 🛎️&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup gcloud CLI ⚡&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;google-github-actions/setup-gcloud@master&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;service_account_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GKE_SA_KEY }}&lt;/span&gt;
      &lt;span class="na"&gt;project_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.PROJECT_ID }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first one is for getting code from the project.&lt;br&gt;
The second is to configure (login and set up project) Google Cloud CLI which will be used in following steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Autopilot GKE cluster 🔨&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;gcloud container clusters create-auto ${{ env.GKE_CLUSTER }} \&lt;/span&gt;
    &lt;span class="s"&gt;--project=${{ env.PROJECT_ID }} \&lt;/span&gt;
    &lt;span class="s"&gt;--region=${{ env.GKE_REGION }}&lt;/span&gt;

  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Config kubectl for GKE cluster ⚡&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;google-github-actions/get-gke-credentials@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;cluster_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.GKE_CLUSTER }}&lt;/span&gt;
      &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.GKE_REGION }}&lt;/span&gt;
      &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GKE_SA_KEY }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above steps create a new GKE cluster and configure kubectl so it's connected with the newly created cluster. With that, you can move on to the step where an adminer Helm release will be installed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy test Helm release 🚀&lt;/span&gt;
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deliverybot/helm@v1&lt;/span&gt;
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;adminer&lt;/span&gt;
    &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt;
    &lt;span class="na"&gt;chart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./helm/app&lt;/span&gt;
    &lt;span class="na"&gt;helm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;helm3&lt;/span&gt;
    &lt;span class="na"&gt;value-files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./helm/adminer.yaml&lt;/span&gt;
    &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;app:&lt;/span&gt;
          &lt;span class="s"&gt;service:&lt;/span&gt;
            &lt;span class="s"&gt;type: LoadBalancer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stop here and analyze what's going on. First of all, you’re using the &lt;a href="https://github.com/deliverybot/helm"&gt;deliverybot/helm&lt;/a&gt; GitHub Actions, which provides a convenient way to use Helm. By adding a few parameters, you can deploy an application onto a Kubernetes cluster. The entire list of available parameters can be found on &lt;a href="https://github.com/deliverybot/helm"&gt;the official website&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In the above example, I've used the following steps alone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;release&lt;/code&gt; - a release name,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;namespace&lt;/code&gt; - specifies the K8s namespace where the app will be installed,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;chart&lt;/code&gt; - gives information about the location of a Helm chart,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;helm&lt;/code&gt; - indicates which version of Helm will be used,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value-files&lt;/code&gt; - file used to override the default values from a Helm chart, in my case it's an Adminer's values.yaml file (the Helm chart I use for testing, which deploys popular database client - &lt;a href="https://www.adminer.org"&gt;Adminer&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;values&lt;/code&gt; - this parameter works pretty the same as previous one - it's used to override the default values from a Helm chart, but instead of doing it with a file, we can directly specify values that need to be overridden; here, I'm overriding only the Service kind, as by default it's a &lt;code&gt;ClusterIP&lt;/code&gt;, but I don't want to change it in the adminer.yaml file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After successful installation, our workflow can proceed with tests. I've decided to run a very simple test, which only checks if a page is opening, but you can of course build a more sophisticated test chain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test installed application 🔥&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
&lt;span class="s"&gt;export IP_ADDRESS=$(kubectl get services -o=jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')&lt;/span&gt;
    &lt;span class="s"&gt;echo "$IP_ADDRESS"&lt;/span&gt;
    &lt;span class="s"&gt;curl http://"$IP_ADDRESS":8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line in a testing script is for finding out under which IP address the adminer application is exposed. The second is for debugging, and the last for actual testing.&lt;/p&gt;

&lt;p&gt;Once the tests are done, you need to destroy a cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Delete cluster GKE Cluster 💥&lt;/span&gt;
  &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ always() }}&lt;/span&gt;
  &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;gcloud container clusters delete ${{ env.GKE_CLUSTER }} --zone=${{ env.GKE_REGION }} --quiet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;if: ${{ always() }}&lt;/code&gt; part is very important here. It makes sure that even if any of the previous steps fail, this one will always run. Otherwise you could end up with a bill from Google at the end of a month.&lt;/p&gt;

&lt;p&gt;After commiting changes and pushing them to GitHub, a workflow will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8abH7UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/184zx9c54jvoa2daaayz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8abH7UC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/184zx9c54jvoa2daaayz.PNG" alt="github-full"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First a &lt;em&gt;Datree&lt;/em&gt; step is executed, then the installation is done on &lt;em&gt;GKE&lt;/em&gt;. To check the details of the second step, click on its name. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pHAgFSGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu83t5ktcwkk2j7oamqd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHAgFSGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yu83t5ktcwkk2j7oamqd.PNG" alt="github-gke-success-details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;And that's it for today! I hope that this blog post encourages you to build something like this on your own, give &lt;em&gt;Datree&lt;/em&gt; (or any other static code analysis tool) a try, and set up a cluster for automated tests, so you will feel more confident about the changes you made in your code base. It can all be set up and operational in a flash.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>datree</category>
      <category>github</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>Infinite scrolling in React with intersection observer</title>
      <author>Yogini Bende</author>
      <pubDate>Thu, 02 Sep 2021 10:43:48 +0000</pubDate>
      <link>https://dev.to/ms_yogii/infinite-scrolling-in-react-with-intersection-observer-22fh</link>
      <guid>https://dev.to/ms_yogii/infinite-scrolling-in-react-with-intersection-observer-22fh</guid>
      <description>&lt;p&gt;Hello folks, &lt;/p&gt;

&lt;p&gt;Few days back I came across the use-case of infinite scroll in React. For this, I used Intersection Observer and found different ways of implementing it in infinite scrolling.&lt;/p&gt;

&lt;p&gt;Before we dive in, let's first understand our problem statement better. Consider an API which gives you list of users and some of their basic details. The task here is to show list of all users in cards. Simple right?&lt;/p&gt;

&lt;p&gt;Now, consider there are thousands of users and the API we are using is paginated. In this case, there will be these two ways to use our paginated API - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use next/prev buttons to go through different pages&lt;/li&gt;
&lt;li&gt;Use infinite scroll&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As the article title says, we are going with 2nd approach.😅 &lt;br&gt;
Now, let's see how?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We will be calling our API to get first 25 results. &lt;/li&gt;
&lt;li&gt;Once the user scrolls through the list and reach to the last element, we will make another API call and pull next set of users in the view. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, even if user keep scrolling, they will always see list of users until they reach till the end. &lt;/p&gt;

&lt;p&gt;Before moving to the implementation part, let me give you the brief idea of Intersection Observer&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-intersection-observer"&gt;
  &lt;/a&gt;
  What is Intersection Observer?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The Intersection Observer is a **browser API&lt;/em&gt;* that provides a way to asynchronously observe or detect visibility of two elements in relation to each other.*&lt;/p&gt;

&lt;p&gt;As per MDN, this API is mostly used for performing visibility related tasks which includes lazy-loading of images and implementing "infinite scrolling" web sites, where more and more content is loaded and rendered as you scroll.&lt;/p&gt;

&lt;p&gt;You can check detailed information of Intersection Observer &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-infinite-scroll"&gt;
  &lt;/a&gt;
  Implementing Infinite Scroll
&lt;/h2&gt;

&lt;p&gt;For the infinite scrolling we will be using an open source &lt;a href="https://randomuser.me/"&gt;RandomUserAPI&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For &lt;em&gt;basic project setup&lt;/em&gt;, I created a simple React project with &lt;em&gt;create-react-app&lt;/em&gt; and added &lt;em&gt;Tailwind CSS&lt;/em&gt; to it. Also, for calling APIs, I added &lt;a href="https://axios-http.com/"&gt;axios&lt;/a&gt; to the same project. &lt;/p&gt;

&lt;p&gt;I have divided the implementation in 2 steps as follows - &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-calling-api-storing-and-displaying-data"&gt;
  &lt;/a&gt;
  1. Calling API, storing and displaying data.
&lt;/h3&gt;

&lt;p&gt;With our basic setup in place, let's see the first version of code where we are calling a user API to get the list of users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TOTAL_PAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAllUsers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPageNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`https://randomuser.me/api/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;results=25&amp;amp;seed=abc`&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setAllUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;TOTAL_PAGES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;callUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p-4 border border-gray-500 rounded bg-white flex items-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
                        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;w-16 h-16 rounded-full border-2 border-green-600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ml-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-base font-bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-sm text-gray-800&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-sm text-gray-500 break-all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mx-44 bg-gray-100 p-6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-3xl text-center mt-4 mb-10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grid grid-cols-3 gap-4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;})}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how our page will look like 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f6E7GxMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldsdlrd47oiw6fhijw46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f6E7GxMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ldsdlrd47oiw6fhijw46.png" alt="This is how our page will look like"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is pretty straightforward. In the &lt;code&gt;callUser&lt;/code&gt; function, we are calling the API and storing the result in &lt;code&gt;allUsers&lt;/code&gt; state. Below, we are showing each user from the &lt;code&gt;allUsers&lt;/code&gt; array using a card component &lt;code&gt;UserCard&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;You will see one &lt;em&gt;const&lt;/em&gt; defined on top of the component &lt;code&gt;TOTAL_PAGES&lt;/code&gt;, this is to restrict total number of pages we want to traverse throughout application. In real-world applications, this won't be needed as the API will give you the details of total pages available. &lt;/p&gt;

&lt;p&gt;Also, you might have notice, we have defined a state to store page number but till now, haven't used it correctly. This is because we want to change this page number from our intersection observer. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-adding-intersection-observer-and-incrementing-page-number"&gt;
  &lt;/a&gt;
  2. Adding Intersection Observer and incrementing page number
&lt;/h3&gt;

&lt;p&gt;To do an infinite scroll, we need to increment page number count when last element of the list is visible to user. This will be done by intersection observer. &lt;/p&gt;

&lt;p&gt;Our intersection observer will observe if the last element is visible or not, if it is, we will increment the page number by 1. As our useEffect will run on change in page number, the API will get called and hence we will get list of more users. &lt;/p&gt;

&lt;p&gt;After understanding this logic, let's see the working code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAllUsers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPageNum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLastElement&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;setPageNum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`https://randomuser.me/api/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;results=25&amp;amp;seed=abc`&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nx"&gt;setAllUsers&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;TOTAL_PAGES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;callUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;currentObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;currentObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastElement&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p-4 border border-gray-500 rounded bg-white flex items-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
                        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;picture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;w-16 h-16 rounded-full border-2 border-green-600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                        &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ml-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-base font-bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-sm text-gray-800&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-sm text-gray-500 break-all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mx-44 bg-gray-100 p-6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-3xl text-center mt-4 mb-10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grid grid-cols-3 gap-4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                    &lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;allUsers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                            &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                            &lt;span class="nx"&gt;pageNum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;TOTAL_PAGES&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
                                &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setLastElement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserCard&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserCard&lt;/span&gt;
                                &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                                &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;})}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageNum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;TOTAL_PAGES&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-center my-10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;♥&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand the code in-depth. &lt;/p&gt;

&lt;p&gt;We have defined the Intersection Observer and stored it to const &lt;code&gt;observer&lt;/code&gt;. The intersection observer have a callback function which accept array of all the intersecting objects. But since, we will be passing only last element to it, we are always checking the 0th entry of this array. If that element intersects means become visible, we will increment the page number. &lt;/p&gt;

&lt;p&gt;We have added one more state &lt;code&gt;lastElement&lt;/code&gt; and initialised it to &lt;code&gt;null&lt;/code&gt;. Inside the page, we will be passing last element of the array to this state.&lt;/p&gt;

&lt;p&gt;Hence, when the value of &lt;code&gt;lastElement&lt;/code&gt; state will be changed calling another useEffect (with &lt;code&gt;lastElement&lt;/code&gt; in dependency-array). In this useEffect, if we get value of lastElement we will pass that element to our intersection observer to observe. Our observer will then check the intersection of this element and increment the page count once this happens.&lt;/p&gt;

&lt;p&gt;As the page number changes, the API will be called and more users will be fetched. Notice the small change we did to add these new users to existing state and avoiding duplications. &lt;/p&gt;

&lt;p&gt;And The app will run effortlessly and you can now see infinite scroll in action!🥁&lt;/p&gt;

&lt;p&gt;That is it for now! &lt;strong&gt;If you want to see the full code for this, you can check that in my &lt;a href="https://github.com/ms-yogi/React-InfiniteLoading"&gt;Github repository here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thank you so much for reading this article. Let me know your thoughts on this and you can follow me on &lt;a href="https://twitter.com/hey_yogini"&gt;twitter&lt;/a&gt; for more daily updates 😇&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Happy coding and keep learning 🙌 *&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Automatically change your wallpaper on Linux</title>
      <author>Rob OLeary</author>
      <pubDate>Thu, 02 Sep 2021 10:15:40 +0000</pubDate>
      <link>https://dev.to/robole/automatically-change-your-wallpaper-on-linux-24n5</link>
      <guid>https://dev.to/robole/automatically-change-your-wallpaper-on-linux-24n5</guid>
      <description>&lt;p&gt;Having a beautiful wallpaper (desktop image) can boost your work environment aesthetic. I like the idea of swapping out the image regularly to keep things looking &lt;em&gt;fresh&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I'm going to write a short script to set the desktop background to a random image, and use &lt;a href="https://en.wikipedia.org/wiki/Cron"&gt;cron&lt;/a&gt; to run it regularly. First, I will look at doing this in &lt;a href="https://en.wikipedia.org/wiki/GNOME"&gt;Gnome&lt;/a&gt;, the default desktop environment for Ubuntu and some other distros. Then, I will look at an option that works in different desktop environments using a command-line tool instead (no scripting required).&lt;/p&gt;

&lt;p&gt;This is what we want to happen on a schedule:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uak6qEPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdwrxdht72qn3p5knu9l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uak6qEPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdwrxdht72qn3p5knu9l.gif" alt="demo of changing wallpaper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gnome"&gt;
  &lt;/a&gt;
  Gnome
&lt;/h2&gt;

&lt;p&gt;Gnome 3 has a &lt;code&gt;gsettings&lt;/code&gt; command-line tool to view and change user settings. If you are using an older version of a distro, you may be using Gnome 2. If that is the case, you will need to use &lt;code&gt;gconftool&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;User data is stored as key-value pairs. We just need to find the right keys to set.&lt;/p&gt;

&lt;p&gt;The keys we are interested in are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;picture-options&lt;/code&gt;: The rendering method. This decides what to do with the image if it is smaller or bigger than the screen resolution. I find that &lt;code&gt;scaled&lt;/code&gt; works best most of the time: it centers the image and leaves it as its natural size if it is smaller, and it downscales the image if it is bigger.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;picture-uri&lt;/code&gt;: The URI of the image file to display.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/pictures/wallpapers"&lt;/span&gt;
&lt;span class="nv"&gt;pic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; &lt;span class="nv"&gt;$folder&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt; | &lt;span class="nb"&gt;shuf&lt;/span&gt; &lt;span class="nt"&gt;-n1&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# values for picture-options: ‘none’, ‘wallpaper’, ‘centered’, ‘scaled’, ‘stretched’, ‘zoom’, ‘spanned’&lt;/span&gt;
gsettings &lt;span class="nb"&gt;set &lt;/span&gt;org.gnome.desktop.background picture-options scaled
gsettings &lt;span class="nb"&gt;set &lt;/span&gt;org.gnome.desktop.background picture-uri &lt;span class="s2"&gt;"file://&lt;/span&gt;&lt;span class="nv"&gt;$pic&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the &lt;code&gt;folder&lt;/code&gt; variable to point to a folder with images on your machine, and give the script a spin! Ensure the script has the 'execute' permission set by running &lt;code&gt;sudo chmod +x /home/your-name/.local/bin/change-wallpaper&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, we just need to set up a &lt;a href="https://www.hivelocity.net/kb/what-is-cron-job/"&gt;cron job&lt;/a&gt; to run the script regularly. To make it work as a cron job, we need to set &lt;strong&gt;DBUS_SESSION_BUS_ADDRESS&lt;/strong&gt; environment variable to ensure we can communicate with Gnome from another process. Open crontable with &lt;code&gt;crontab -e&lt;/code&gt; and add the following lines to set-up a hourly job:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0 * * * * env DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus /home/your-name/.local/bin/change-wallpaper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not familiar with cron, you can use &lt;a href="https://crontab.guru/"&gt;crontab.guru&lt;/a&gt; to help you make a different schedule.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-desktop-environments"&gt;
  &lt;/a&gt;
  Other Desktop Environments
&lt;/h2&gt;

&lt;p&gt;If you are using a lightweight desktop manager such Openbox or Fluxbox, you will find that there is no way that you can set the wallpaper. In this case, Nitrogen will come in handy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/l3ib/nitrogen"&gt;Nitrogen&lt;/a&gt; is a simple, lightweight application that allows you to change the background of your desktop with a nice set of options.&lt;/p&gt;

&lt;p&gt;To get the same result as the previous section, we run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nitrogen &lt;span class="nt"&gt;--random&lt;/span&gt; &lt;span class="nt"&gt;--set-scaled&lt;/span&gt; ~/pictures/wallpapers/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets run it as a hourly cron job again. First, open crontable with &lt;code&gt;crontab -e&lt;/code&gt; and add the following lines to set-up a hourly job:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0 * * * * env DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus nitrogen --random --set-scaled ~/pictures/wallpapers 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not familiar with cron, you can use &lt;a href="https://crontab.guru/"&gt;crontab.guru&lt;/a&gt; to help you make a different schedule.&lt;/p&gt;




&lt;p&gt;You can find both examples in this repo: &lt;a href="https://github.com/robole/bash-scripts"&gt;https://github.com/robole/bash-scripts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thats it! Enjoy your virtual view!&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Rodando um servidor de minecraft no Azure</title>
      <author>Andre Racz</author>
      <pubDate>Thu, 02 Sep 2021 10:15:05 +0000</pubDate>
      <link>https://dev.to/andreracz/rodando-um-servidor-de-minecraft-no-azure-5f8f</link>
      <guid>https://dev.to/andreracz/rodando-um-servidor-de-minecraft-no-azure-5f8f</guid>
      <description>&lt;p&gt;Para inaugurar o meu blog aqui no dev.to, decidi escrever um artigo mais leve, unindo duas grandes paixões: Minecraft e Containers!&lt;/p&gt;

&lt;p&gt;Eu comecei a jogar Minecraft ainda na versão beta, em 2010, por indicação do meu amigo Thiago Duarte. Na época joguei um pouco, mas acabei perdendo o interesse. Na época paguei 5 dólares pela licença. &lt;/p&gt;

&lt;p&gt;Com a pandemia, e buscando atividades para fazer com meu filho, lembrei que tinha conta no Minecraft, e começamos a jogar em familia, eu, ele e minha esposa, mas sempre tinhamos o problema de quem ia rodar o servidor, acabava que alguém sempre um de nós tinha que deixar o servidor aberto no computador, mesmo que não quisesse jogar.&lt;/p&gt;

&lt;p&gt;Para resolver isso, resolvi subir um servidor de Minecraft na Azure, aproveitando o benefício de ser MCT (Microsoft Certified Trainer) e ter alguns créditos todos os meses. &lt;/p&gt;

&lt;p&gt;Inicialmente, subi o servidor em uma VM, baixando localmente o servidor, o Java e rodando tudo manual, mas o processo é muito lento e manual, então, sendo um grande fã de containers, fui correr atrás de como rodar ele em containers. Por sorte, temos uma ótima imagem docker para rodar um servidor de minecraft, com todas as opções possíveis, que pode ser visto neste excelente repositório do github: &lt;a href="https://github.com/itzg/docker-minecraft-server"&gt;itzg/docker-minecraft-server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esse container permite rodar o servidor de minecraft com poucas configurações, e é fácil rodar a versão tradicional (vanilla), assim como várias opções com mods. &lt;/p&gt;

&lt;p&gt;Inicialmente, aproveitei a VM que tinha, instalei o docker e comecei a rodar lá o container, mas sempre ficou a idéia de como rodar ele no &lt;a href="https://azure.microsoft.com/pt-br/services/container-instances/"&gt;Azure Container Instances (ACI)&lt;/a&gt;. Como não achei nenhum tutorial fácil de como fazer isso, resolvi escrever esse artigo, e aproveitei para aprender um pouco sobre o &lt;a href="https://github.com/Azure/bicep"&gt;bicep&lt;/a&gt;, nova linguagem para fazer o deploy na Azure.&lt;/p&gt;

&lt;p&gt;Para rodar o servidor do minecraft no ACI, e manter os dados salvos quando baixamos ele, precisamos de 2 recursos, um Container Group que vai rodar o servidor e uma Storage Account, que vai guardar os arquivos entre as paradas do servidor.&lt;/p&gt;

&lt;p&gt;O primeiro recurso que temos é a storage account, onde declaramos apenas o tipo, localidade, nome e SKU (desculpem pela falta de syntax highlight, o dev.to não suporta ainda a linguagem bicep):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resource storageAccount 'Microsoft.Storage/storageAccounts@2021-04-01' = {
  name: 'exemplominestorage'
  location: 'brazilsouth'
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Além disso, precisamos declarar um storage share (compartilhamento do Azure Files), que será anexado ao container. Esse share depende da storage account, e declara o nome do share apenas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resource storageShare 'Microsoft.Storage/storageAccounts/fileServices/shares@2019-06-01' = {
  name:  'exemplominestorage/default/minecraftdata'
  dependsOn: [ 
    storageAccount 
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por fim declaramos o ContainerGroup, ele depende do storage share, declara um container e liga o storage share nele, alem de colocar algumas variaveis de ambiente mais comuns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var whitelist = ''//coloque aqui seus usuarios separados com ,

resource containerGroup 'Microsoft.ContainerInstance/containerGroups@2019-12-01' = {
  name: 'exemplomine'
  location: 'brazilsouth'
  dependsOn: [
    storageShare 
  ]
  properties: {
    containers: [
      {
        name: 'exemplomine'
        properties: {
          image: 'itzg/minecraft-server'
          environmentVariables: [
            {
                name: 'WHITELIST' // Lista de jogadores que podem conectar
                value: whitelist
            }
            {
                name: 'OPS' // Lista de jogadores que podem dar comandos
                value: whitelist
            }
            {
                name: 'MAX_PLAYERS' // Quantidade maxima de jogadores
                value: '2'
            }
            {
                name: 'ENABLE_COMMAND_BLOCK'
                value: 'true'
            }
            {
                name: 'MOTD' // Mensagem mostrada no server
                value: 'Ola da Azure'
            }
            {
                name: 'MEMORY' // Memoria alocada no java
                value: '3G' // Usar menos memoria que a disponivel no container, não funciona se for o mesmo
            }
            {
              name: 'EULA' // é obrigatorio o aceite do EULA do minecraft
              value: 'true'
            }
            {
              name: 'VERSION' // Versao do minecraft a ser rodada
              value: 'LATEST'
            }

          ]
          resources: {
            requests: { // CPU e memória alocada para o minecraft
              cpu: 1 
              memoryInGB: 4
            }
          }
          ports: [
            {
              port: 25565 // Liberar a porta para acesso publico
            }
          ]
          volumeMounts: [ // Ligar o volume de dados no container
            {
              name: 'acishare'
              mountPath: '/data'
              readOnly: false
            }
          ]
        }
      }
    ]
    osType: 'Linux'
    ipAddress: { // Liberar a porta no firewall e dar um nome publico pra ele
      type: 'Public'
      ports: [
        {
          protocol: 'TCP'
          port: 25565
        }
      ]
      dnsNameLabel: 'exemplomine'
    }
    restartPolicy: 'Never'
    volumes: [
      { // Ligacao com o fileshare criado
        name: 'acishare'
        azureFile: {
          readOnly: false
          shareName: 'minecraftdata' // nome do share
          storageAccountName: storageAccount.name // account
          storageAccountKey: listKeys(storageAccount.name, storageAccount.apiVersion).keys[0].value // obtem dinamicamente a chave de acesso para o account
        }
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pronto, depois disso é só compilar o bicep e transformá-lo em ARM template, e de posse do ARM, importar ele como template na Azure.&lt;/p&gt;

&lt;p&gt;Se você preferir usar um ARM pronto, é só clicar nesse botão, preencher as variáveis e fazer o deploy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fandreracz%2Fminecraft-on-azure%2Fmaster%2Fvanilla-aci.json"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08261hFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aka.ms/deploytoazurebutton" alt="Deploy to Azure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois de terminado o deploy, entre no recurso criado, obtenha o FQDN:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u5WiqbFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3hp0ofr4luovwam03bb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5WiqbFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3hp0ofr4luovwam03bb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Acesse no modo multiplayer do minecraft, em Add Server, digite o nome e a URL do seu servidor, clique em Done:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ivO_-0cn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g55zhf8saggghj2y0ba2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ivO_-0cn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g55zhf8saggghj2y0ba2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, seu server está pronto para iniciar. Happy Mining!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfkvcuYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u17l0txi4vq5i6bhcztx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfkvcuYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u17l0txi4vq5i6bhcztx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não esqueça de parar o servidor quando não estiver usando, para não gastar seus créditos! &lt;/p&gt;

&lt;p&gt;Deixo aqui também o link pro github que criei com esse projeto, já com parametros para facilitar a nossa vida: &lt;a href="https://github.com/andreracz/minecraft-on-azure"&gt;andreracz/minecraft-on-azure&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Se você quer ver mais posts, sobre como rodar servidores com MODs, como automatizar a subida e a descida to Container, ou outros sobre Minecraft, deixe seu like e comente neste post!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>minecraft</category>
      <category>docker</category>
      <category>containers</category>
    </item>
  </channel>
</rss>
