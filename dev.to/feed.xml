<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>6 figure job in 6 months</title>
      <author>Amritanshu Dev Rawat</author>
      <pubDate>Tue, 22 Jun 2021 03:35:01 +0000</pubDate>
      <link>https://dev.to/amritanshu/6-figure-job-in-6-months-2g2b</link>
      <guid>https://dev.to/amritanshu/6-figure-job-in-6-months-2g2b</guid>
      <description>&lt;p&gt;&lt;strong&gt;Yes you heard it right "6 figure job in 6 months".&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How can you achieve that?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Choose Your Stack&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Web Dev - html, CSS, JavaScript, etc..&lt;/li&gt;
&lt;li&gt;App Dev - native, hybrid etc..&lt;/li&gt;
&lt;li&gt;Design - Figma, Photoshop , etc..&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Work Hard Daily On Your Stack&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Give 6+ hrs daily &lt;/li&gt;
&lt;li&gt;Build Projects&lt;/li&gt;
&lt;li&gt;Follow people with the same stack&lt;/li&gt;
&lt;li&gt;Increase your social presence&lt;/li&gt;
&lt;li&gt;Be consistent&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Challenge yourself&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;In twitter you can follow 100DaysOfCode challenge or make your own and upload your progress daily&lt;/li&gt;
&lt;li&gt;You have to be better then the previous day, keep track of your progress.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Motivation&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Daily hard work is the only key to reach you at the top.&lt;/li&gt;
&lt;li&gt;Think what makes you different from other. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Points To Remember&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;There will be ups and downs for sure, your mind will say no it's not working but you have to do it, remember all the past hard work and the time you spent, see the progress that you were tracking you will notice you have come too far, don't quit at later stages.&lt;/li&gt;
&lt;li&gt;Every field out there have potential to give you a good amount of money, if you choose one and master it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/NewGenDeveloper"&gt;https://twitter.com/NewGenDeveloper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>motivation</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why Web developers still use Ruby on Rails?</title>
      <author>Eric The Coder</author>
      <pubDate>Tue, 22 Jun 2021 03:14:14 +0000</pubDate>
      <link>https://dev.to/ericchapman/why-web-developers-still-use-ruby-on-rails-1a95</link>
      <guid>https://dev.to/ericchapman/why-web-developers-still-use-ruby-on-rails-1a95</guid>
      <description>&lt;p&gt;Follow me!: &lt;a href="https://twitter.com/EricTheCoder_"&gt;Follow @EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
Many new web developers have absolutely no idea what is Ruby on Rails.

&lt;p&gt;I encourage those people do their research and learn more about this beautiful web framework.&lt;/p&gt;

&lt;p&gt;Ruby is a programming language and Rails is a framework to create web applications.&lt;/p&gt;

&lt;p&gt;Others web frameworks like Laravel, Django, Adonis use many concepts used by Rails. &lt;/p&gt;

&lt;p&gt;Rails is in some way the father of those modern frameworks. Rails inspire a lot of modern web development concepts.&lt;/p&gt;

&lt;p&gt;With Rails you can build a fullstack web application. You can even do frontend web app (SPA like React and Vue) with only using html/css and ruby code.&lt;/p&gt;

&lt;p&gt;Rails are old but Rails is not what it was when introduce. Rails have evolved over the year to add all the modern goodies. Rails are now at version 6 and version 7 is just around the corner. &lt;/p&gt;

&lt;p&gt;So why use it? Why not use a Node.js/Express app or any other more popular backend frameworks?&lt;/p&gt;

&lt;p&gt;I guess the reason can be different for every Rails developers, but for my part I choose Rails when I need development speed and efficiency! No other framework can build a web app faster than Rails.&lt;/p&gt;

&lt;p&gt;For that specific reason Rails is use by a lot of startup companies. &lt;/p&gt;

&lt;p&gt;Ruby on Rails is also used by some giant companies like Shopify, GitHub, Air B&amp;amp;B and a lot lot more.&lt;/p&gt;

&lt;p&gt;I also like the Ruby language a lot. Do yourself a favour and take a deep look at the Ruby language. &lt;/p&gt;

&lt;p&gt;Are Rails best for all projects? Of course not, but with the right project is still no 1 even after all those years.&lt;/p&gt;

&lt;p&gt;If you are a Ruby on Rails developer, please leave in the comments section why for you Rails is still one of your favorite framework?&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Build serveless real-time chat application with Web PubSub and Static Web Apps</title>
      <author>Yan Jin</author>
      <pubDate>Tue, 22 Jun 2021 02:53:52 +0000</pubDate>
      <link>https://dev.to/azure/build-serveless-real-time-chat-application-with-web-pubsub-and-static-web-apps-glc</link>
      <guid>https://dev.to/azure/build-serveless-real-time-chat-application-with-web-pubsub-and-static-web-apps-glc</guid>
      <description>&lt;p&gt;With the growth of internet and mobile, building the cross platform real-time chat experience into your application also becomes a very common need, for example patient and doctor chat in healthcare, customer support chat in eCommerce, student and teacher chat in remote education, players chat in eGaming, instant chat for social media or live video stream, and so on. The real-time chat experience offers several values to your application to help your customers success:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instant and efficient communication to faster problem resolution.
&lt;/li&gt;
&lt;li&gt;Collaboration and purposeful conversation to overcome business challenges. &lt;/li&gt;
&lt;li&gt;Smooth built-in experience to improve the customer service and loyalty. &lt;/li&gt;
&lt;li&gt;Cross platform support to empower the customer to discovery easily. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, there are some fundamental and critical needs for an application with build-in real-time chat experience:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Real-time chat experience with users. &lt;/li&gt;
&lt;li&gt;Management of user and group.
&lt;/li&gt;
&lt;li&gt;Notification and popup.
&lt;/li&gt;
&lt;li&gt;AI-enabled, e.g., language moderator, bot, etc.
&lt;/li&gt;
&lt;li&gt;Typing indicator.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it is not easy to build these functionalities into your application from scratch. You may have the issues to achieve the real-time performance, handles hosting, scalability, load balancing and other infrastructure related challenges, adapt with multiple client platforms, etc. Now, the Azure Web PubSub service which is a fully managed service give the opportunity to you to enable the real-time capability to your application with native and serverless WebSockets support. &lt;/p&gt;

&lt;p&gt;Let’s follow with &lt;a href="https://twitter.com/BenCodeGeek"&gt;Ben Coleman&lt;/a&gt; together to build a serverless Chatr web application and learn how does he leverage the advantages of the Azure Web PubSub and Azure Static Web Apps to achieve this easily and quickly. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-chatr"&gt;
  &lt;/a&gt;
  What's the Chatr?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://chatr.benco.io/"&gt;Chatr&lt;/a&gt; is a simple real-time, multi-user chat application, highlighting the ease of building applications on top of two of Azure services: &lt;a href="https://azure.microsoft.com/services/web-pubsub/"&gt;Azure Web PubSub&lt;/a&gt; and &lt;a href="https://azure.microsoft.com/services/app-service/static/"&gt;Azure Static Web Apps&lt;/a&gt;. The Chatr application provides many of the features you might expect; a way to sign in and authenticate, group chats, user to user private chats, a global online user list, idle (away from keyboard) detection and more. However it was built to be a way to learn and showcase possibilities rather than a fully fledged and production grade chat system. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wyjbKOQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/287807iB0F45BC03F96DD74/image-size/medium%3Fv%3Dv2%26px%3D400" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wyjbKOQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/287807iB0F45BC03F96DD74/image-size/medium%3Fv%3Dv2%26px%3D400" alt="Chatr Application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chatr consists of four components: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client or frontend, which users interact with – This is written in JavaScript and uses Vue.js &lt;/li&gt;
&lt;li&gt;The backend service, which provides message processing &amp;amp; event handling, written in Node.js &lt;/li&gt;
&lt;li&gt;A globally available but secure Websockets service – provided by Azure Web PubSub &lt;/li&gt;
&lt;li&gt;Persistence state storage and key value store – provided by Azure Table Storage &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A diagram will help illustrate how these all interact, and some of the main message &amp;amp; data flows. Let’s explore these components in more detail.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jQpCWjfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/287759i888989074CA0312D/image-size/large%3Fv%3Dv2%26px%3D999" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jQpCWjfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://techcommunity.microsoft.com/t5/image/serverpage/image-id/287759i888989074CA0312D/image-size/large%3Fv%3Dv2%26px%3D999" alt="Chatr diagram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#use-web-pubsub-to-build-the-scalable-backend"&gt;
  &lt;/a&gt;
  Use Web PubSub to build the scalable backend
&lt;/h2&gt;

&lt;p&gt;The Azure WebPubSub service works hand in hand with the Chatr backend, to provide the core chat functionality. This is done through &lt;a href="https://azure.github.io/azure-webpubsub/references/protocol-cloudevents"&gt;‘event handlers’ within Azure WebPub sub&lt;/a&gt;, these handlers enable an upstream service to receive client side WebSocket messages as “events”. These events are HTTP messages, which the service can then react to. These events supports both a range of built-in system events (e.g. client connecting or disconnecting) but also custom application specific events, in the case of Chatr there are many of these such events, for example “joinChat” or “userEnterIdle” etc. &lt;/p&gt;

&lt;p&gt;The backend uses the service client of the &lt;a href="https://azure.github.io/azure-webpubsub/references/server-sdks/js-server-sdks#service-client-library"&gt;Web PubSub SDK for Node.js&lt;/a&gt;, which can be instantiated easily. Here we are storing configuration details such as the connection string in an Azure Function App Settings, and obtain it them securely through environmental variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { WebPubSubServiceClient } = require('@azure/web-pubsub')
const CONN_STR = process.env.PUBSUB_CONNECTION_STRING 
const HUB = process.env.PUBSUB_HUB 
const serviceClient = new WebPubSubServiceClient(CONN_STR, HUB) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within the Function itself we can handle any event sent to us from clients by binding to HTTP trigger POST requests and processing them as follows. For example, the code below shows how Chatr handles when a user has created a new shared group-chat. When doing so they send an event called “createChat”, when handling this we get the properties we require from both the headers and the HTTP body, (the special 'ce' headers are populated by Azure Web PubSub), then store into state and finally notify all clients about the new chat with an outbound message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ce-eventname&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ce-userid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;createChat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="c1"&gt;// Build custom event payload &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;chatPayload&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; 
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; 
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; 
    &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 

  &lt;span class="c1"&gt;// ... Update state, removed for brevity ... &lt;/span&gt;

  &lt;span class="c1"&gt;// Send message to all clients with custom JSON payload &lt;/span&gt;
  &lt;span class="c1"&gt;// Will be routed via Azure Web PubSub with WebSocket protocol &lt;/span&gt;
  &lt;span class="nx"&gt;serviceClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendToAll&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
    &lt;span class="na"&gt;chatEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chatCreated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chatPayload&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#build-frontend-with-extensive-platform-and-host-easily-with-static-web-apps"&gt;
  &lt;/a&gt;
  Build frontend with extensive platform and host easily with Static Web Apps
&lt;/h2&gt;

&lt;p&gt;The Chatr frontend consists of a JavaScript static app or SPA (single page application) built on the Vue.js framework, this is hosted using the Azure Static Web App service as a set of HTML and JS files. This Azure service aside from just hosting static content, also provides Chatr a means to sign in and authenticate users and also a way to host the backend Azure Function service. The frontend establishes a secure connection to Azure Web PubSub using WebSockets, no SDK or client libraries are required making it quick easy to use. Let's walk through the frontend together. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-connection-between-application-and-backend-service"&gt;
  &lt;/a&gt;
  Setup connection between application and backend service
&lt;/h3&gt;

&lt;p&gt;The clients first request a way to access to Azure Web PubSub by calling a REST endpoint on our backend which in turn obtains a client access URL (which includes an access token) this is done using the same serviceClient described above, as this is done server side it provides a way to restrict access and secure the application. In the case of Chatr all users are permitted to request an access URL. The userId in the code below has been &lt;a href="https://docs.microsoft.com/en-us/azure/static-web-apps/authentication-authorization"&gt;fetched previously through a call to Azure Static WebApps&lt;/a&gt;, for the purposes of Azure Web PubSub. It’s simply a string and has no special meaning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Get URL &amp;amp; token to connect to Azure Web Pubsub &lt;/span&gt;
&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/getToken?userId=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 

&lt;span class="c1"&gt;// Now connect to Azure Web PubSub using the URL we obtained &lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;json.webpubsub.azure.v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We only use standard modern JavaScript APIs like fetch and WebSocket this means the Chatr frontend can be deployed without any bundling or WebPack stage. Also note how we use the ‘json.webpubsub.azure.v1' subprotocol when establishing the connection, this &lt;a href="https://azure.github.io/azure-webpubsub/references/pubsub-websocket-subprotocol.html"&gt;extension to plain WebSockets provides a range of additional capabilities&lt;/a&gt; which are used by Chatr such as; client to client messaging (without a round trip to the server), a means to join send messages to groups (which is how Chatr provides group chats) and also a way to send custom events which are routed to the service as described above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#send-custom-event-or-message"&gt;
  &lt;/a&gt;
  Send custom event or message
&lt;/h3&gt;

&lt;p&gt;Sending a custom event from the client is very simple, for example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createChat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chatName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chatId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Chat messages between users are sent a very similar way, except leveraging the 'sendToGroup' message type. Rather than plain text strings (which are also supported) we enrich the messages we send with meta data such as the userId of who sent the message and send a JSON payload. It’s important to note these messages are not relayed by the Chatr backend we described above, they are handled entirely by the Azure Web PubSub service without any backend or server code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sendToGroup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chatId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;dataType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;fromUserId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We’ve just scratched the surface of what the Chatr sample app does, and we’ve not covered details such as how state is stored using Azure Tables or how the authentication wrappers of Azure Static WebApps are used.  However I hope what we have shown illustrates some of the power and flexibility of Azure Web PubSub. If you are looking for more details about this application, you can refer to the &lt;a href="https://github.com/benc-uk/chatr"&gt;Chatr repo on GitHub&lt;/a&gt; where the code is hosted, along with information and docs on how to deploy it to Azure and run it yourself. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;If you are trying to build your first real-time application with Azure Web PubSub, you could also get more helpful resources from the &lt;a href="https://azure.microsoft.com/services/web-pubsub/#documentation"&gt;getting stated contents&lt;/a&gt;. We are looking forward your feedback and ideas to help us become better via &lt;a href="https://feedback.azure.com/forums/934191-azure-web-pubsub-service"&gt;Azure Feedback Forum&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More Information
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This blog is also posted on &lt;a href="https://techcommunity.microsoft.com/t5/apps-on-azure/build-serveless-real-time-chat-application-with-web-pubsub-and/ba-p/2433211"&gt;Tech Community&lt;/a&gt; and you could also get more blogs about the Web PubSub and its new features here.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>serverless</category>
      <category>azure</category>
      <category>javascript</category>
    </item>
    <item>
      <title>String Prototype Capitalize</title>
      <author>Dimas Andhika</author>
      <pubDate>Tue, 22 Jun 2021 02:40:15 +0000</pubDate>
      <link>https://dev.to/dimasngoding/string-prototype-capitalize-5dhn</link>
      <guid>https://dev.to/dimasngoding/string-prototype-capitalize-5dhn</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note: This article is intended for Indonesians&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perkenalan"&gt;
  &lt;/a&gt;
  Perkenalan
&lt;/h1&gt;

&lt;p&gt;Javascript mempunyai banyak built in function pada prototype. Ada di array, string, object, dan lain2. Salah satu contohnya adalah &lt;code&gt;String.prototype.toUpperCase()&lt;/code&gt; yang memungkinkan kita membuat string menjadi huruf besar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stringprototypetouppercase"&gt;
  &lt;/a&gt;
  String.prototype.toUpperCase()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ini teks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'INI TEKS'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tapi pada suatu saat kita mungkin perlu mengubah string menjadi huruf kapital, tetapi javascript tidak punya builtin function seperti itu. Jadi solusinya adalah kita membuat function sendiri seperti pada contoh berikut:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contoh-function-capitalize"&gt;
  &lt;/a&gt;
  Contoh Function Capitalize
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}${&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ini teks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'Ini teks'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ini bekerja dengan baik tetapi tidak seperti yang kita harapkan. Contoh yang saya buat diatas merupakan function biasa, yang bisa menjadikan kode kita sulit dibaca jika sudah terdapat banyak function. Lalu gimana cara kita dapat membuat function seperti &lt;code&gt;.toUpperCase()&lt;/code&gt;? Caranya seperti berikut:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stringprototypecapitalize"&gt;
  &lt;/a&gt;
  String.prototype.capitalize()
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ini teks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'Ini teks'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isi functionnya sama dengan yang kita buat pada contoh diatas ini, tetapi penulisan kode menjadi lebih rapih karena kita mendefinisikannya langsung ke prototype, ini seakan2 menjadikan capitalize seperti function bawaan javascript. &lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#penjelasan"&gt;
  &lt;/a&gt;
  Penjelasan
&lt;/h3&gt;

&lt;p&gt;Tetapi jika dilihat ada yang berubah, kita memakai keyword &lt;code&gt;this&lt;/code&gt; pada kode diatas karena &lt;code&gt;this&lt;/code&gt; pada kode diatas mereferensikan ke string yang kita beri method capitalize, contoh:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ini teks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'ini teks'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Jadi &lt;code&gt;this&lt;/code&gt; pada kode diatas digunakan untuk menangkap stringnya, dan karena itu pula kita tidak dapat menggunakan arrow function karena keyword &lt;code&gt;this&lt;/code&gt; akan berisi &lt;code&gt;undefined&lt;/code&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Publish A Static React/Node.js App Using cPanel (the easy way)</title>
      <author>neethap</author>
      <pubDate>Tue, 22 Jun 2021 01:09:31 +0000</pubDate>
      <link>https://dev.to/neethap/how-to-publish-a-static-react-node-js-app-using-cpanel-the-easy-way-199o</link>
      <guid>https://dev.to/neethap/how-to-publish-a-static-react-node-js-app-using-cpanel-the-easy-way-199o</guid>
      <description>&lt;p&gt;I've been stuck on this problem recently and finally figured it out a week in. Except the solution surely took less than ten minutes so I decided to share the wisdom.&lt;/p&gt;

&lt;p&gt;Pro-tip: &lt;b&gt;Forget the Setup Node.js App feature&lt;/b&gt; on your cPanel. Instead, you want to focus your attention on the &lt;em&gt;build&lt;/em&gt; folder. When you run &lt;em&gt;yarn run build&lt;/em&gt;, you are effectively generating static files to be used in production. &lt;/p&gt;

&lt;p&gt;Once I made all my changes locally, I used the following steps to deploy my site:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;On your local machine&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;1)&lt;/b&gt; In your &lt;em&gt;package.json&lt;/em&gt;, add the line &lt;em&gt;"homepage":"&amp;lt;yourdomain&amp;gt;"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;2)&lt;/b&gt; In your VSCode terminal, run &lt;em&gt;yarn run build&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;     You should see something like this:&lt;/p&gt;

&lt;p&gt;     &lt;em&gt;The project was built assuming it is hosted at &amp;lt;yourdomain&amp;gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you're seeing '/' or anything else in place of your domain, run &lt;em&gt;export PUBLIC_URL=&amp;lt;yourdomain&amp;gt;&lt;/em&gt; first, then run &lt;em&gt;yarn run build&lt;/em&gt; again. This time, you should see your domain.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;3)&lt;/b&gt; Go into the directory &lt;em&gt;/&amp;lt;yourproject&amp;gt;/build/&lt;/em&gt;, highlight all the files and folders, right-click and navigate to &lt;em&gt;Send to &amp;gt; Compressed (zipped) folder&lt;/em&gt; to generate a zipped folder.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;On your cPanel&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;4)&lt;/b&gt; Got into the directory &lt;em&gt;/home/&amp;lt;yourusername&amp;gt;/&amp;lt;yourdomain&amp;gt;/&lt;/em&gt; and &lt;em&gt;Upload&lt;/em&gt; the zipped folder. Then, extract its contents like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jdNksK4L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub7m1p5m4dspg4huyjso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jdNksK4L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub7m1p5m4dspg4huyjso.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember to delete the .zip folder, and voila! You're done!&lt;/p&gt;

&lt;p&gt;A few notes to keep in mind here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For some, it may take a while to load under your actual domain or in the same browser with all that cPanel activity. I used Incognito mode and other devices to check visit my domain and see the updates.&lt;/li&gt;
&lt;li&gt;I have not tried this with a full stack application (keyword: static) as of yet. Though I will be confronting it in the near future so stay tuned!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Test your C# Skills</title>
      <author>Swati</author>
      <pubDate>Tue, 22 Jun 2021 00:58:57 +0000</pubDate>
      <link>https://dev.to/swatisinghpuri/test-your-c-skills-52nh</link>
      <guid>https://dev.to/swatisinghpuri/test-your-c-skills-52nh</guid>
      <description>&lt;p&gt;My journey with learning .NET stack started with C# concepts. As I did not have any adequate financial support or the dedicated environment of people sharing same goals. I was left with no option but to self-teach myself the concepts/logic and internet was my only friend and mentor. &lt;/p&gt;

&lt;p&gt;I have made a small test platform using HTML, CSS and JS where one can test their basic knowledge of C# programming. It is completely beginner friendly MCQ based application. Let me give a little overview of C#.&lt;/p&gt;

&lt;p&gt;C# is a programming language developed by Microsoft that runs on the .NET Framework. C# is used to develop web applications, desktop &amp;amp; mobile apps, games and more. It is known as Step sibling of Java as it resembles with syntaxes, semantics of Java and is OOP’s based with advance features of garbage collection and compilers generating IL code. It is foundation base for creating apps on .Net. &lt;/p&gt;

&lt;p&gt;A C# developer should be aware of basic of C# concepts as CLS, CTS, boxing, unboxing, casting, string, arrays to advance concepts as inheritance, interface, abstraction, multithreading, generics, exception handling, delegates, and events. Although, this test app is beginner friendly so even if you are not much comfortable with C# advance topics, you could practise the test. Below is the link for Test your C# Skills application.&lt;br&gt;
&lt;a href="https://swati-quizapp.netlify.app"&gt;https://swati-quizapp.netlify.app&lt;/a&gt; &lt;/p&gt;

</description>
      <category>csharp</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Filter javascript</title>
      <author>Augusto Araujo da Rocha</author>
      <pubDate>Tue, 22 Jun 2021 00:41:08 +0000</pubDate>
      <link>https://dev.to/augustoaraujoo/filter-javascript-4b9g</link>
      <guid>https://dev.to/augustoaraujoo/filter-javascript-4b9g</guid>
      <description>&lt;p&gt;Aqui vai algumas dicas de como utilizar o método "filter" em seu código !&lt;br&gt;
este comando irá filtrar os "dados" que você deseja , para uma visualização ou etc...&lt;/p&gt;

&lt;p&gt;vamos começar ! &lt;/p&gt;

&lt;p&gt;const car =[&lt;br&gt;
{type:"ferrari",modelo:"f420",estadoDeVenda:"vendido"}{type:"volks",modelo:"v10",estadoDeVenda:"indisponível"}&lt;br&gt;
]&lt;/p&gt;

&lt;p&gt;o exemplo abaixo vai retornar apenas o "estadoDeVenda", pois estamos utilizando o método 'filter' , neste caso eu quero que retorne apenas os 'carros' que foram vendidos&lt;/p&gt;

&lt;p&gt;const venda = car⇒car.estadoDeVenda === 'vendido'&lt;br&gt;
console.log(carro.filter(Vendas))&lt;/p&gt;

&lt;p&gt;outro exemplo &lt;br&gt;
sem criar uma variável&lt;/p&gt;

&lt;p&gt;console.log(carro.filter(function(p){&lt;br&gt;
return p.estadoVenda === 'vendido'})) &lt;/p&gt;

&lt;p&gt;Eai gostou dessas dicas ? caso algo não ficou claro para você deixe seu feedback !&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Day 6 of #100DaysOfCode!
</title>
      <author>Christian Falucho</author>
      <pubDate>Tue, 22 Jun 2021 00:10:25 +0000</pubDate>
      <link>https://dev.to/cfalucho/day-6-of-100daysofcode-1m0m</link>
      <guid>https://dev.to/cfalucho/day-6-of-100daysofcode-1m0m</guid>
      <description>&lt;h3&gt;Today's progress🏍&lt;/h3&gt;

&lt;p&gt;I worked on inheritance, DRY (Don't Repeat Yourself) and supertype (parent). The benefit of inheritances and DRY is so that you don't rewrite code and it is about writing less code on your application. This way you deal with less problems (bugs) and write cleaner code. You can just imagine code can get extremely complex as it continues to grows. So it's better to find ways to minify it.&lt;/p&gt;

&lt;h3&gt;What I learned&lt;/h3&gt;

&lt;p&gt;I learned more about objects, prototypes and inheritances. The examples I worked on will hopefully explain how inheritance works and the benefits of it.&lt;/p&gt;

&lt;p&gt;So what is &lt;code&gt;inheritance&lt;/code&gt; in Object-oriented programming? Inheritance allows for one class to inherit (or obtain) the attributes and methods of another class. The class whose properties and methods are &lt;strong&gt;inherited&lt;/strong&gt; is known as the &lt;code&gt;Parent&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The example below shows two &lt;em&gt;object constructors&lt;/em&gt; and they both have a something in common, which is the &lt;code&gt;drive&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Car(){}

Car.prototype = {
   constructor: Car,
   drive: () =&amp;gt; {
     console.log("Vroom vroom")
   }
}

function Motorcycle() {}

Motorcycle.prototype = {
   constructor: Motorcycle,
   drive: () =&amp;gt; {
     console.log("Vroom vroom")
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we know both vehicles can both be driven and make the sound &lt;em&gt;Vroom vroom&lt;/em&gt;, we can simplify and reduce the code by using the DRY principle and create a supertype (or parent) called &lt;code&gt;Vehicle&lt;/code&gt; and removing the drive method from both Car and Motorcycle and putting it in Vehicle.&lt;/p&gt;

&lt;p&gt;So let's go ahead and create that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//child object
function Car(){}

Car.prototype = {
   constructor: Car,
   drive: () =&amp;gt; {
     console.log("Vroom vroom")
   }
}

//child object
function Motorcycle() {}

Motorcycle.prototype = {
   constructor: Motorcycle,
   drive: () =&amp;gt; {
     console.log("Vroom vroom")
   }
}

// parent object
function Vehicle() {}

Vehicle.prototype = {
   constructor: Vehicle,
   drive: () =&amp;gt; {
     console.log("Vroom vroom")
   }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Inheritance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We created a supertype, used the DRY principle and now we want to apply inheritance. In other words, we want to inherit from the supertype, in this case the &lt;code&gt;Vehicle&lt;/code&gt; object. We can create a new instance of Animal simply by using a the method&lt;br&gt;
&lt;code&gt;Object.create(obj)&lt;/code&gt;. This will create a new object and set &lt;code&gt;obj&lt;/code&gt; as the new object's prototype. &lt;/p&gt;

&lt;p&gt;Here is what that looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Car.prototype = Object.create(Vehicle.prototype)

let honda = new Car();

console.log(honda.drive());
//output: "Vroom vroom"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The subtype (or child) &lt;code&gt;Car&lt;/code&gt; is now an instance of Vehicle. When we create a new &lt;code&gt;Car&lt;/code&gt; object and store it into variable honda. &lt;code&gt;honda&lt;/code&gt; now inherits all of &lt;code&gt;Vehicle&lt;/code&gt;'s properties and thus can perform the &lt;code&gt;drive()&lt;/code&gt; method.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>100daysofcode</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Redesigning the Design Interview</title>
      <author>Daniel Sandoval</author>
      <pubDate>Mon, 21 Jun 2021 23:51:59 +0000</pubDate>
      <link>https://dev.to/d3sandoval/redesigning-the-design-interview-21pb</link>
      <guid>https://dev.to/d3sandoval/redesigning-the-design-interview-21pb</guid>
      <description>&lt;p&gt;&lt;em&gt;Author's Note: This post has some interactive elements and is best viewed on the &lt;a href="https://desandoval.net/posts/redesigning-the-design-interview/"&gt;canonical URL&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As the first designer at a growing startup (Discuss.io) and as a consultant for much larger companies (Liberty Mutual, Humana, USAF), I've seen first hand how difficult it can be to hire designers. Now, as the first designer at another growing startup (Chipper Cash), I have a lot more of a say in how we hire for our design team.&lt;/p&gt;

&lt;p&gt;Over the past few months, throughout dozens of interviews, I've reflected on the ways that the design industry creates unnecessary barriers within our hiring practices. Having been on both sides of the table, I'd like to share what problems we've identified in the "standard" design interview loop and how we're working to address these problems at Chipper Cash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-standard-design-interview-loop"&gt;
  &lt;/a&gt;
  The "standard" design interview loop
&lt;/h2&gt;

&lt;p&gt;Below, I've outlined what most designers go through when they're looking for a new job...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4z8oorB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://desandoval.net/img/redesigning-the-design-interview/InterviewLoop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4z8oorB1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://desandoval.net/img/redesigning-the-design-interview/InterviewLoop.png" alt="Depiction of current interview loop for designers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hiring starts with an application screening - where the recruiter or hiring manager takes a look at a large number of candidates' resumes and portfolios. Based on a rubric (or sometimes just a "gut feel"), these screeners will select a handful of candidates to move onto at least one "screening" call with the recruiter and/or hiring manager.&lt;/p&gt;

&lt;p&gt;If this screening goes well, the candidate is usually required to do a portfolio review with all or some of the members of the "interview loop" - the members of the company that are responsible for asking questions of the candidate and helping the hiring manager make their decision.&lt;/p&gt;

&lt;p&gt;Then the most time-consuming part of the loop begins. Sometimes combined with the portfolio review, the whiteboard interview is a chance for candidates to solve a problem that they will likely never face in the role they're being hired for. Over the course of an hour, the candidate is asked to "redesign an ATM" or "design an app to coordinate ping-pong games at the office".&lt;/p&gt;

&lt;p&gt;If the whiteboard challenge is overcome, the candidate is then sent home with a "take home assignment". Sometimes the assignment is just a higher fidelity version of the whiteboard challenge, other times it's a completely new assignment. Either way, the candidate is expected to come back with some polished work to present to the next round of interviewers so that they can defend their design decisions, discuss how they might test them, and answer any number of hypotheticals that the company has written in their interview guide.&lt;/p&gt;

&lt;p&gt;Finally, the candidate is allowed to participate in the types of interviews that are more common across all industries. These "culture" and "technical" interviews usually have questions like, "Tell me about a time that you had to settle a dispute" or "Compare the differences between mobile-first and responsive design." These interviews are usually the first chance that a candidate has to meet the people that they might actually work with on a daily basis, ask about the company itself and how their potential future colleagues feel about their jobs.&lt;/p&gt;

&lt;p&gt;At most large companies (&lt;a href="https://medium.muz.li/my-google-interview-experience-ux-design-e0ef0ec32973"&gt;like Google&lt;/a&gt;), it can take 8-12 weeks from the first interview until the offer is negotiated and signed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-with-the-standard-interview-loop"&gt;
  &lt;/a&gt;
  Problems with the "standard" interview loop
&lt;/h2&gt;

&lt;p&gt;For those just entering the field, this process can feel like a lot of new things, all at once. For designers who are looking for a new job, the amount of time required to change jobs can make it difficult (if not impossible) to transition to a new position or company.&lt;/p&gt;

&lt;p&gt;But the process outlined above is not just overwhelming. It's also...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inequitable - Not everyone has the time to create/update their portfolio, schedule time off at their existing job or work on "take home" assignments outside of work. By insisting that this amount of work is required to be hired, we're screening out candidates who are working multiple jobs or in hostile work environments, have family to take care of, or have hobbies outside of work.&lt;/li&gt;
&lt;li&gt;Disrespectful - When a candidate is rejected after 5-10 hours of time dedicated to the process over multiple weeks, it can feel like a complete waste of time. When design challenges are actually representative of a "real world" situation for the company, &lt;a href="https://slate.com/human-interest/2019/03/job-interview-work-assignments-free-labor.html"&gt;it can also feel like candidates are being asked to work for free&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Focused on the wrong things - Not all design roles are the same. Some roles are more UX-oriented while others focus on visuals. Due to the collaborative nature of design, past work shown in a portfolio review rarely represents the skills required for a given role and is &lt;a href="https://articles.uie.com/reviewing-ux-portfolios-4-high-risk-hiring-mistakes/"&gt;usually judged on a surface level&lt;/a&gt; - prioritizing work that "looks good" over the actual design process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combined with the fact that many candidates are applying to multiple positions at once, these problems beg the question...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-do-this-to-each-other"&gt;
  &lt;/a&gt;
  Why do we do this to each other?
&lt;/h2&gt;

&lt;p&gt;After reflecting on all the ways that this hiring process disadvantages diverse applicants, I had to take a step back and ask how we got here. What are we trying to achieve with the current hiring process?&lt;/p&gt;

&lt;p&gt;At Chipper, we identified that we were really interested in three things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoiding misalignment

&lt;ul&gt;
&lt;li&gt;Does the candidate share our values?&lt;/li&gt;
&lt;li&gt;Can they resolve conflicts cross-culturally?&lt;/li&gt;
&lt;li&gt;Can we afford them?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strong foundations in the design process

&lt;ul&gt;
&lt;li&gt;Can they break down problems into more accomplishable steps?&lt;/li&gt;
&lt;li&gt;Can they prioritize problems based on user needs?&lt;/li&gt;
&lt;li&gt;Do they respond well to feedback?&lt;/li&gt;
&lt;li&gt;Can they "ship it" (e.g. work with devs, adjust to business constraints, etc.)?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Filling gaps in our team

&lt;ul&gt;
&lt;li&gt;What skills do they have already (UX? Visual? Platform-specific expertise?)&lt;/li&gt;
&lt;li&gt;What skills do they want to learn/grow in to? (IC? Manager? New design skillsets?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-were-trying"&gt;
  &lt;/a&gt;
  What we're trying
&lt;/h2&gt;

&lt;p&gt;By listing out these goals, we were able to reframe them in a "how might we" statement:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How might we create a more &lt;strong&gt;equitable&lt;/strong&gt; hiring process that &lt;strong&gt;respects candidates' time&lt;/strong&gt; while ensuring that we hire designers with the &lt;strong&gt;skills, values and interests&lt;/strong&gt; needed for the roles we're trying to fill?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a few rounds of experimentation, we came up with a process that requires no "take home" work, combines the "culture", "technical", and "whiteboard" interviews into a series of interviews with the minimal number of interviewers...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xr03EXbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://desandoval.net/img/redesigning-the-design-interview/InterviewLoop-Before.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xr03EXbz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://desandoval.net/img/redesigning-the-design-interview/InterviewLoop-Before.png" alt="Interview Loop before changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---xQMdV-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://desandoval.net/img/redesigning-the-design-interview/InterviewLoop-New.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---xQMdV-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://desandoval.net/img/redesigning-the-design-interview/InterviewLoop-New.png" alt="Interview loop after changes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First off, the hiring manager decides on the priorities for the role in concert with our Talent team (the "recruiters"). Application materials are reviewed according to the requirements of the job post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For more visual roles, portfolios will be reviewed. Otherwise, they are not.&lt;/li&gt;
&lt;li&gt;Years of experience are not used to screen candidates in/out of the role.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then candidates get to talk to a member of the Talent team. The role is discussed in detail and the timing of the interview loop is agreed on. This call is to make sure the candidate understands the scope of the position before they commit to the rest of the interview loop.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;For roles &lt;em&gt;with&lt;/em&gt; a visual design focus:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The hiring manager call is framed with the prompt, "Show me one project that stands out to you as your best work. Feel free to skip the process, if that's not relevant. There will be a more formal portfolio review in the full-day interview. "&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For roles &lt;em&gt;without&lt;/em&gt; a visual design focus:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The call with the hiring manager starts with, "Please share one or two projects that you think demonstrate your understanding of research, design and collaboration. You can show these if you want, or speak to them. "&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-portfolio-review-is-for-visual-design-roles-only"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The portfolio review is for visual design roles only&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In this panel-style, the candidate shares 2-4 pieces of work that demonstrate their understanding of research, design and collaboration with all members of the interview loop. The graders that are assigned for this interview have an understanding of Chipper's Design Principles and how to look for them within a portfolio.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-take-home-assignment-is-replaced-by-two-workshop-style-interviews"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The "take home" assignment is replaced by two "workshop" style interviews&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;First, a member of the Product or Growth team presents a business problem framed by data. The candidate can ask questions, discuss options and frame a problem that can be solved by design.&lt;/p&gt;

&lt;p&gt;Then, a follow up call with a member of the Design team starts by asking the candidate to introduce the problem in the context of a &lt;a href="https://www.nngroup.com/articles/facilitating-design-studio-workshop/"&gt;Design Studio&lt;/a&gt;. The candidate &lt;em&gt;and the interviewer&lt;/em&gt; must then sketch mutliple possible solutions to the design problem and share their sketches with one another.&lt;/p&gt;

&lt;p&gt;At the end, the candidate is asked imagine how the solution(s) might be built and next steps they'd take if it were there project.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#there-are-only-two-other-interviews"&gt;
  &lt;/a&gt;
  &lt;strong&gt;There are &lt;em&gt;only two&lt;/em&gt; other interviews&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;One is the "Values" interview. Usually run by a member of our Operations team, this interview focuses on common and unique situations that occur in a remote startup. Candidates are asked how they might deal with them or have dealt with them in the past.&lt;/p&gt;

&lt;p&gt;The other interview is with a member of our Engineer team. In this call, the candidate and interviewer discuss tradeoffs between the worlds of design and engineering. Past experiences are compared to ideal situations as the interview focuses on how the two roles are involved in product development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;With less steps and specific goals for each interview, we were easily able to incorporate our company's goals for interviewing designers into this more streamlined process. The recruiter screen up-front gives candidates an opportunity to opt-out early if they feel like the role isn't a good fit for them, or ask for accommodations if the timing/approach doesn't work for them.&lt;/p&gt;

&lt;p&gt;We already have a number of plans to modify the "design studio" interview to work for disabled candidates - including a text-only &lt;a href="http://www.dowdydesign.com/blog-1"&gt;script writing&lt;/a&gt; studio that assesses the same skills without the visual element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do you think?&lt;/strong&gt; Do you prefer this approach? Did we miss something totally obvious? Feel free to &lt;a href="//mailto:daniel@desandoval.net"&gt;reach out&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>design</category>
      <category>interview</category>
      <category>management</category>
    </item>
    <item>
      <title>Full GitHub Actions Course [FREE] 💥📽️🚀</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 21 Jun 2021 23:24:30 +0000</pubDate>
      <link>https://dev.to/n3wt0n/full-github-actions-course-free-p5g</link>
      <guid>https://dev.to/n3wt0n/full-github-actions-course-free-p5g</guid>
      <description>&lt;p&gt;In this GitHub Actions Tutorial you will be able to go from zero to hero in 90 minutes. By the end of this course, you will have a &lt;strong&gt;deep understanding&lt;/strong&gt; of the concepts and a great overall big picture of how GitHub Actions works and is used in the whole software development process.&lt;/p&gt;

&lt;p&gt;And the best part? &lt;strong&gt;&lt;em&gt;It is completely free, and takes only 90 minutes&lt;/em&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;The course is a &lt;strong&gt;mix of theoretic explanations and hands-on demos&lt;/strong&gt; to follow along, so you get your first hands-on experience with Actions and feel more confident using it in your projects.&lt;/p&gt;

&lt;p&gt;The course is available here: 🤓&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TLB5MY9BBa4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TLB5MY9BBa4"&gt;Link to the video: https://youtu.be/TLB5MY9BBa4&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#course-overview"&gt;
  &lt;/a&gt;
  Course Overview 📘
&lt;/h3&gt;

&lt;p&gt;This is what this course is all about:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-github-actions-overview"&gt;
  &lt;/a&gt;
  1. GitHub Actions Overview
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;What is GitHub Actions&lt;/li&gt;
&lt;li&gt;Advantages of GitHub Actions over other CI platforms&lt;/li&gt;
&lt;li&gt;Key functionalities of GitHub Actions&lt;/li&gt;
&lt;li&gt;Actions components: Events, Triggers, Workflows, Actions&lt;/li&gt;
&lt;li&gt;Types of Actions: JavaScript vs Container&lt;/li&gt;
&lt;li&gt;Actions Creation: Monolithic vs Chainable&lt;/li&gt;
&lt;li&gt;Starter workflows&lt;/li&gt;
&lt;li&gt;GitHub Actions Syntax&lt;/li&gt;
&lt;li&gt;Governance of GitHub Actions&lt;/li&gt;
&lt;li&gt;Debug and Troubleshooting&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-actions-ci-cd-amp-release"&gt;
  &lt;/a&gt;
  2. Actions CI, CD &amp;amp; Release
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;CI Workflows structure&lt;/li&gt;
&lt;li&gt;Matrix build&lt;/li&gt;
&lt;li&gt;CI Workflows examples: Docker, Web Apps, etc.&lt;/li&gt;
&lt;li&gt;CD Workflows structure&lt;/li&gt;
&lt;li&gt;CD Workflows examples: Docker, Azure, AWS, Serverless, ECS, Kubernetes, etc.&lt;/li&gt;
&lt;li&gt;GitHub Actions Environments overview&lt;/li&gt;
&lt;li&gt;Protection Rules and Approvals&lt;/li&gt;
&lt;li&gt;Deployment Logs overview&lt;/li&gt;
&lt;li&gt;GitHub Actions Environments: creation, management, and usage&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#3-selfhosted-runners"&gt;
  &lt;/a&gt;
  3. Self-Hosted Runners
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Difference between Hosted runners and Self-hosted runners&lt;/li&gt;
&lt;li&gt;Configure Self-hosted runners&lt;/li&gt;
&lt;li&gt;Runner Groups and why to use them&lt;/li&gt;
&lt;li&gt;Best practices for Self-hosted runners&lt;/li&gt;
&lt;li&gt;Dynamically scale Self-hosted runners&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#4-secret-management"&gt;
  &lt;/a&gt;
  4. Secret Management
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Actions Secrets Overview&lt;/li&gt;
&lt;li&gt;Type of Secrets: Organization vs Repository vs Environment&lt;/li&gt;
&lt;li&gt;Limitation of GitHub Secrets&lt;/li&gt;
&lt;li&gt;Secrets: creation, management, and usage&lt;/li&gt;
&lt;li&gt;Third party actions for secrets (Azure KeyVault, and more)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#5-advanced-github-actions"&gt;
  &lt;/a&gt;
  5. Advanced GitHub Actions
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;API availability&lt;/li&gt;
&lt;li&gt;Passing Parameters to Actions&lt;/li&gt;
&lt;li&gt;Repository Dispatch with custom events&lt;/li&gt;
&lt;li&gt;Control the flow of the workflow with Conditionals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TLB5MY9BBa4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>tutorial</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Insertion sort algorithm</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 21 Jun 2021 22:54:52 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/insertion-sort-algorithm-2gj3</link>
      <guid>https://dev.to/ayabouchiha/insertion-sort-algorithm-2gj3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition-of-insertion-sort"&gt;
  &lt;/a&gt;
  Definition of insertion sort
&lt;/h2&gt;

&lt;p&gt;Insertion sort is a type of sorting algorithms that works like &lt;em&gt;the process of sorting playing cards&lt;/em&gt;, it &lt;strong&gt;divides&lt;/strong&gt; the array into two parts, part of &lt;em&gt;sorted numbers&lt;/em&gt; and other of &lt;strong&gt;unsorted numbers&lt;/strong&gt;, the numbers that are in the wrong order ( &lt;em&gt;numbers that exist in the unsorted part&lt;/em&gt; ) are inserted to the sorted part in the correct position.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-and-space-complexity-of-insertion-sort"&gt;
  &lt;/a&gt;
  Time and Space complexity of insertion sort
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;time Complexity&lt;/th&gt;
&lt;th&gt;Space Complexity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#algorithm-explanation-using-an-example"&gt;
  &lt;/a&gt;
  Algorithm explanation using an example
&lt;/h2&gt;

&lt;p&gt;let's suppose we have an unsorted array [&lt;strong&gt;7&lt;/strong&gt;,&lt;em&gt;4,12,3&lt;/em&gt;],&lt;br&gt;
the sorted part is 7 (bold styling), the unsorted part is from 4 to 3 (italic styling).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;(4 &amp;lt; 7) that's why we will insert 4 in the sorted part before 7
so the array will be [&lt;strong&gt;4,7&lt;/strong&gt;,&lt;em&gt;12,3&lt;/em&gt;]&lt;/li&gt;
&lt;li&gt;(12 &amp;gt; 7) therefore will keep it in the same position so the array will be [&lt;strong&gt;4,7,12&lt;/strong&gt;,&lt;em&gt;3&lt;/em&gt;]&lt;/li&gt;
&lt;li&gt;since 3 is smaller than 12,7 and 4, it will be in the first position, so the final array is [&lt;strong&gt;3,4,7,12&lt;/strong&gt;]&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#implementation-of-insertion-sort-algorithm-using-python"&gt;
  &lt;/a&gt;
  Implementation of insertion sort algorithm using python
&lt;/h2&gt;

&lt;p&gt;if you're not familiar with python, you can find the implementaion of insertion sort algorithm in other programming languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://initjs.org/insertion-sort-in-javascript-6c48563b4643"&gt;javascript&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/cplusplus-program-to-implement-insertion-sort"&gt;c++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/insertion-sort-in-chash"&gt;c#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/insertion-sort-in-java"&gt;java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3resource.com/php-exercises/searching-and-sorting-algorithm/searching-and-sorting-algorithm-exercise-3.php"&gt;php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=&amp;gt; python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insertionSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [ name ]            =&amp;gt; insertion sort
        [ type ]            =&amp;gt; sorting algorithms
        [ time complexity ] =&amp;gt; O(n^2)
        [ space complexity ]=&amp;gt; O(1)
        [ params ]          =&amp;gt; (items) list to sort
        [ return ]          =&amp;gt; sorted list
        [ code reference link ] =&amp;gt; ("https://www.geeksforgeeks.org/insertion-sort/")       
    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/insertion-sort/"&gt;https://www.geeksforgeeks.org/insertion-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/data_structures_algorithms/insertion_sort_algorithm.htm"&gt;https://www.tutorialspoint.com/data_structures_algorithms/insertion_sort_algorithm.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JecAk1FAOck"&gt;https://www.youtube.com/watch?v=JecAk1FAOck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OGzPmgsI-pQ"&gt;https://www.youtube.com/watch?v=OGzPmgsI-pQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JU767SDMDvA"&gt;https://www.youtube.com/watch?v=JU767SDMDvA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Special thanks to &lt;a href="//www.geeksforgeeks.org"&gt;geeksforgeeks&lt;/a&gt;.&lt;br&gt;
Have a good day :)&lt;br&gt;
#day_9&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>codenewbie</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Authentication vs Authorization </title>
      <author>OdunayoO</author>
      <pubDate>Mon, 21 Jun 2021 22:33:00 +0000</pubDate>
      <link>https://dev.to/odunayoo_/authentication-vs-authorization-2nfk</link>
      <guid>https://dev.to/odunayoo_/authentication-vs-authorization-2nfk</guid>
      <description>&lt;p&gt;As a developer, authorization and authentication are two terms that you might have come across. Although they are related, they mean different things, confusing if the basic idea is not well understood.&lt;/p&gt;

&lt;p&gt;To define it, &lt;code&gt;authentication&lt;/code&gt; answers the question, &lt;code&gt;'Who are you?'&lt;/code&gt; while &lt;code&gt;authorization&lt;/code&gt; answers the question; &lt;code&gt;'What are you allowed to do?'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Authentication can be defined as the process of verifying that the user is whom they say they are.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some common examples of authentication are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;password authentication&lt;/li&gt;
&lt;li&gt;biometric authentication&lt;/li&gt;
&lt;li&gt;multi-factor authentication &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Authorization is the process of allowing users to perform specific actions based on the permission(s) they have.&lt;/em&gt; An example is a role-based authorization. Allowing different users to perform specific actions based on their roles; user or admin.&lt;/p&gt;

&lt;p&gt;We can try to understand these concepts better with this scenario.&lt;/p&gt;

&lt;p&gt;Before you board a plane, you have to show a means of identification along with your boarding pass to show that you are whom you say you are; this is authentication. The flight attendant verifies the details you give them, and then if it matches, you are allowed to board.&lt;br&gt;
Once you have successfully boarded, you cannot tell the crew member you would like to fly the plane because you are not allowed to as a passenger. You do not have the permission and the authorization to do so. Only an authorized pilot can do so.&lt;/p&gt;

&lt;p&gt;So this explains the difference between authentication and authorization.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
