<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Make your console messages colorful
</title>
      <author>Sanchithasharma</author>
      <pubDate>Sat, 28 Nov 2020 19:11:53 +0000</pubDate>
      <link>https://dev.to/sanchithasharma/make-your-console-messages-colorful-5h9o</link>
      <guid>https://dev.to/sanchithasharma/make-your-console-messages-colorful-5h9o</guid>
      <description>&lt;p&gt;Got a big list of bugs and bored of debugging? Here are the few tips that makes your life easy that add spice and sunshine to your console messages.&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;%c&lt;/code&gt; directive to apply a CSS style to console output. And here are few ways how it is done.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE : Paste the below console commands in your console window&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('%c Get Riggity Riggity Wrecked Son', 'color: white; background: pink; font-size: 20px')
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o2Ej-E6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/980/1%2A0awR3PruAipU8pNBU8OJ8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o2Ej-E6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/980/1%2A0awR3PruAipU8pNBU8OJ8w.png" alt="Output of the above code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;%c&lt;/code&gt; directive as a prefix to the part of the string you want to add style to.&lt;br&gt;
The text before the directive will not be affected, but the text after the directive will be styled using the CSS declarations in the parameter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#multiple-styles-in-one-console-message" class="anchor"&gt;
  &lt;/a&gt;
  Multiple styles in one console message:
&lt;/h3&gt;

&lt;p&gt;We can add the multiple styles to the multiple strings in the same console command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log("%cIM " + "%cPOSSIBLE", "color: purple; background: pink", "color: yellow; background: black")
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#styling-the-error-and-warning-messages" class="anchor"&gt;
  &lt;/a&gt;
  Styling the error and warning messages:
&lt;/h3&gt;

&lt;p&gt;One can change the styling of the error message and warnings too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.error('%cWubba Lubba Dub Dub!', 'color: whitesmoke; background: black')
console.warn('%c...To Live Is To Risk It All...', 'color: green; font-size: large')
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#push-the-styles-to-an-array-" class="anchor"&gt;
  &lt;/a&gt;
  Push the styles to an array :
&lt;/h3&gt;

&lt;p&gt;We can pass the styles in the array and join it to make a string when we have too many strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var styles = [
    'background: linear-gradient(green, #571402)'
    , 'color: white'
    , 'display: block'
    , 'line-height: 40px'
    , 'text-align: center'
    , 'font-weight: bold'
].join(';');
console.log('%c The Universe Is Basically An Animal... ', styles);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-s-endraw-directive-for-string-to-display-and-raw-c-endraw-to-style-it" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;%s&lt;/code&gt; directive for string to display and &lt;code&gt;%c&lt;/code&gt; to style it:
&lt;/h3&gt;

&lt;p&gt;We can use &lt;code&gt;%s&lt;/code&gt; string to pass the string and apply styles to it. And this is how you do it. Assign the string to be printed and the styles to the variables respectively and call those in console command at once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;styles = 'font-weight: bold; font-size: 50px;color: red; text-shadow: 3px 3px 0 rgb(217,31,38) , 6px 6px 0 rgb(226,91,14) , 9px 9px 0 rgb(245,221,8) , 12px 12px 0 rgb(5,148,68) '
message = 'Wubba Lubba Dub Dub!'
console.log('%c %s', styles, message)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exUO_4XQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/980/1%2AfiUZta8iV1K-01V99gcXCA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exUO_4XQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/980/1%2AfiUZta8iV1K-01V99gcXCA.png" alt="Output for the above code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s all for today.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;References:&lt;br&gt;
1) &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/console#Usage"&gt;https://developer.mozilla.org/en-US/docs/Web/API/console#Usage&lt;/a&gt;&lt;br&gt;
2) &lt;a href="https://www.samanthaming.com/tidbits/40-colorful-console-message/"&gt;https://www.samanthaming.com/tidbits/40-colorful-console-message/&lt;/a&gt;&lt;br&gt;
3) &lt;a href="https://developers.google.com/web/tools/chrome-devtools/console/console-write#styling_console_output_with_css"&gt;https://developers.google.com/web/tools/chrome-devtools/console/console-write#styling_console_output_with_css&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>I wrote a DAILY blog post for 100 days, here's what happened...</title>
      <author>Facundo Gauna</author>
      <pubDate>Sat, 28 Nov 2020 18:57:13 +0000</pubDate>
      <link>https://dev.to/fgauna12/i-wrote-a-daily-blog-post-for-100-days-here-s-what-happened-3673</link>
      <guid>https://dev.to/fgauna12/i-wrote-a-daily-blog-post-for-100-days-here-s-what-happened-3673</guid>
      <description>&lt;p&gt;On November 28th, 2019, I started an experiment of blogging daily for 100 days. I had been listening to many podcasts/books by &lt;a href="https://seths.blog/"&gt;Seth Godin&lt;/a&gt;. He challenges listeners to blog daily for 100 days and see what happens. As far as I can tell, Seth Godin has been writing daily for over well over 7 years.&lt;/p&gt;

&lt;p&gt;Blogging daily was like a Bootcamp. As you would expect, I got better at the act of writing. But, there were some things I really did not expect. If you're someone who's been meaning to blog, or you battle with perfectionism or self-criticism, then read on.&lt;/p&gt;

&lt;p&gt;I had a few &lt;em&gt;rules&lt;/em&gt; during the experiment. Most of them came from Seth.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Publish daily blog posts including weekends and holidays. Try to plan ahead during the holiday season if I'm going to be too busy.&lt;/li&gt;
&lt;li&gt;Do not try to make money on ads.&lt;/li&gt;
&lt;li&gt;Do not promote each blog post to try to get more viewership. &lt;strong&gt;It's ok to blog into the void.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Offer my opinions and beliefs. Try to add value with my perspective. Do not try to re-document something already documented, it doesn't help people.&lt;/li&gt;
&lt;li&gt;Try to help &lt;em&gt;someone&lt;/em&gt; with the post, even if it's one person. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-found-my-voice" class="anchor"&gt;
  &lt;/a&gt;
  I found my voice
&lt;/h2&gt;

&lt;p&gt;Before the experiment, &lt;strong&gt;I wrote 14 blog posts in two years&lt;/strong&gt;. I still remember my first blog post. I spent most of a Saturday writing and re-writing and re-writing, trying to express my opinion. Then that evening, I remember a sinking feeling and starting over the next day with a whole different topic. &lt;a href="https://gaunacode.com/testingwithrepositorypattern"&gt;The result was this&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It took 8 hours of work.&lt;/p&gt;

&lt;p&gt;I had a tough time forming ideas, explaining them, and presenting them. I had a hard time telling stories. I had the same problem at work too. Often, my ideas were passed up because I could not present them to my peers in an effective way. They often could not see the value even though I believed strongly in some of these ideas.&lt;/p&gt;

&lt;p&gt;Blogging daily forced me to write and hit the "publish" button. It helped me let go of the perfectionism and self-criticism that made me rewrite my first blog post. &lt;strong&gt;I just had to write&lt;/strong&gt;. Once it was published, I could decide if that blog post was something I liked and I could improve the next day.&lt;/p&gt;

&lt;p&gt;I experimented with two main styles of posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Talking about a concept/idea/opinion (without code)&lt;/li&gt;
&lt;li&gt;How-to article (with code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the beginning, I wrote a lot of blogposts around concepts/ideas/opinions. It felt therapeutic because they were pent up ideas that I always thought about.&lt;br&gt;
 Soon, after I ran out of concepts, I started trying to write more about "how-to" do something. In the beginning, I would try to explain things I knew really really well.&lt;/p&gt;

&lt;p&gt;In the end, it took me about 1 hour to write a blog post centered around an opinion. I could think about these ideas throughout the day and I did not have to create code samples. It took around 2 hours to write a "How-to" blog post  &lt;em&gt;if&lt;/em&gt; I knew the topic really well and I didn't have to learn something new. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-pushed-me-to-help-people" class="anchor"&gt;
  &lt;/a&gt;
  It pushed me to help people
&lt;/h2&gt;

&lt;p&gt;After the first 30 days or so, I needed inspiration on what to write next. I started to reach out to friends, clients, and colleagues to see what they were up to. There were about 10 individuals who I stayed in contact with and took an interest in.&lt;/p&gt;

&lt;p&gt;If they told me they were struggling with something I knew about, I wrote a blog post. Then, I would say, "Look, here's a blog post I wrote about that thing we were talking about. Let me know if it helps."   &lt;/p&gt;

&lt;p&gt;It also helped me with the act of writing. To me, writing is so much easier if I know "who" I'm writing for. In most cases, I was writing to help a specific individual.&lt;/p&gt;

&lt;p&gt;For example, as I am writing right now, I am thinking of a few friends. I have inspired them to blog and a few have created their own blog sites. Most of them started creating the sites but never finished them. A few, have blogs but very few blog posts. One was told that they did not get a job because their blog did not reflect the experience they claimed to have for the job. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#went-from-60-viewsweek-to-12k-viewsweek" class="anchor"&gt;
  &lt;/a&gt;
  Went from ~60 views/week to ~1.2k views/week
&lt;/h2&gt;

&lt;p&gt;But here's the kicker: &lt;strong&gt;no self-promotion&lt;/strong&gt;.  I did not Tweet or post on LinkedIn about new blog posts. This was one of the rules of the experiment. I would only share my blog post when I was helping someone directly.&lt;/p&gt;

&lt;p&gt;Where did the other views come from? Search.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqqKHhxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l33w7h91xpichk6dfczi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqqKHhxs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l33w7h91xpichk6dfczi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It took about 6 months for search engines to catch up. It is a slow and steady trickle of traffic. Not for the dopamine junkies.&lt;/p&gt;

&lt;p&gt;I stopped blogging daily in March 2020 and traffic keeps coming. People are finding the site and reading.&lt;/p&gt;

&lt;p&gt;Recently, a co-corker was surprised to find out that he was sharing my blog post with someone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Zbx6B2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/23eybo48n7c915atrrug.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Zbx6B2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/23eybo48n7c915atrrug.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He ran across my most popular blog post right now. I do remember writing &lt;em&gt;that post&lt;/em&gt; and thinking to myself: "Man, I'm truly writing this for [person]. I wonder if anyone else will find this. It's so niched."  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-realized-i-needed-a-morning-routine" class="anchor"&gt;
  &lt;/a&gt;
  I realized I needed a morning routine
&lt;/h2&gt;

&lt;p&gt;On the last day of the experiment, I reflected:   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I’ve hit publish from the back of Lyfts, from airports, from hotel rooms, from the train, from my home office, from my couch, in between holiday gatherings, first thing in the morning, and last thing at night. It’s been close. It’s hard on my family when I didn’t plan. Saturdays are still hard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was not sustainable. My wife was also committed to this experiment, it was not only me. It was tough on her. If I ever wanted to publish content at any cadence with a full-time job, I would need a routine. It needed to be sustainable.&lt;/p&gt;

&lt;p&gt;So, after the experiment, I did not continue to publish daily. I focused on creating a morning routine so that I would have 1-2 hours before the workday. I put a strong limit on the hours I worked. Any type of overtime meant that it would eat into my morning routine.  &lt;/p&gt;

&lt;p&gt;The current iteration of my morning routine is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My 3-month old daughter wakes up at 5 am or 6 am.&lt;/li&gt;
&lt;li&gt;I take my daughter, play with her, make coffee, listen to NPR while my wife sleeps.&lt;/li&gt;
&lt;li&gt;After an hour, I will start writing, coding, or whatever else my current side project is. (I'm writing while I'm wearing my daughter and she sleeps)&lt;/li&gt;
&lt;li&gt;At 7:45-8:00 am, I wake my second daughter and I take her for a morning run.&lt;/li&gt;
&lt;li&gt;8:30-8:45 am - Second coffee and shower.&lt;/li&gt;
&lt;li&gt;9:00 am - Workday starts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-needed-to-protect-my-time" class="anchor"&gt;
  &lt;/a&gt;
  I needed to protect my time
&lt;/h2&gt;

&lt;p&gt;Sometimes, I would get so busy during the day and realize that it was almost over and I didn't get done half the things I wanted to do. Then, I was tempted to work overtime to catch up.&lt;/p&gt;

&lt;p&gt;Sometimes, I would get distracted and forget to do the things I needed to do. Then, it was a rush to try to get it done. I seemed to have the anxiety of all the things that were in-flight and how I might forget them.&lt;/p&gt;

&lt;p&gt;I came across an idea: &lt;strong&gt;Time is the only resource you cannot get more of.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can get more money, experience, skill, etc. You cannot get more time. It's one of our most precious resources. &lt;/p&gt;

&lt;p&gt;Besides, remember how sometimes I would write late at night or while in a Lyft? I was not making time to blog and my time was really not under my control.&lt;/p&gt;

&lt;p&gt;So, I implemented techniques discussed in &lt;a href="https://www.amazon.com/Indistractable-Control-Your-Attention-Choose/dp/194883653X"&gt;Indistractible&lt;/a&gt;. I block out time for many things.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsngj3ZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l31jsfixfdvcpibtqg86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsngj3ZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l31jsfixfdvcpibtqg86.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's low tech. Ugly.&lt;br&gt;&lt;br&gt;
 Maybe... it's making your skin crawl. But, it works for me.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;I am less anxious&lt;/strong&gt;. When I commit to something in the future, I set time aside for it. It could be later that day, the next day, next week, or in the next couple of weeks. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;I over-commit less&lt;/strong&gt;. I open my calendar and try to book it. If I don't have time, then I say so. If it's my boss, I try to negotiate what's the priority so that I can move things around in my calendar.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It protects my calendar from unexpected meetings&lt;/strong&gt;. People are often forced to schedule a time for next week. If they want to meet sooner, then they have to ask me when it's a good time &lt;em&gt;for me&lt;/em&gt;. I control my time. This was really useful in a larger organization where there's a lot of people that want to talk to you via meetings.&lt;/li&gt;
&lt;li&gt;Ever have a meeting where you think... "this could have been an email"? Less of these will happen. &lt;/li&gt;
&lt;li&gt;In my day job, time is literally money. I am a consultant and my company charges for the time I spend on projects. This helps me ensure that I put time-management at the forefront. &lt;/li&gt;
&lt;li&gt;When I have less anxiety that I am getting done what I need to get done, I can spend my free time happily. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#i-became-much-better-at-communicating-remotely" class="anchor"&gt;
  &lt;/a&gt;
  I became much better at communicating remotely
&lt;/h2&gt;

&lt;p&gt;Many people complain about meetings meetings meetings. To get anything done, many companies have meetings to talk about problems and solutions. Then there are more meetings before the meetings. Then there are meetings to plan work. Then there are meetings to reflect on work. And, so on and on.   &lt;/p&gt;

&lt;p&gt;To break away from the synchronous communication of meetings, we need asynchronous communication. The best way for that is - &lt;strong&gt;writing&lt;/strong&gt;.   &lt;/p&gt;

&lt;p&gt;At work, I can write very descriptively very quickly. I can write detailed documentation, show my work, provide instructions very clearly. It's like I'm writing tiny little blog posts all the time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0SeV9Pza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/591g0k49fxhqji0s3ulg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0SeV9Pza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/591g0k49fxhqji0s3ulg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That Slack post, took me about 10 minutes. Mostly, because I had to fetch the names of the Azure resources. It's a tiny little blog post that I will use in final documentation later. In the past, it would have taken me about a half-hour. Besides, it avoided a meeting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0rM2QBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i80xdk1ffqexmzn102kp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0rM2QBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i80xdk1ffqexmzn102kp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was an email to the client. Also, took about 5-10 minutes. In the past, it would have taken me about a half-hour.  &lt;/p&gt;

&lt;p&gt;I used to &lt;strong&gt;dread&lt;/strong&gt; writing emails like this. Now, I enjoy it. Sometimes, I think it helps me more than it helps the reader. I often find myself referring back to my own blog posts, emails, slack messages to remind myself of my work. It's very useful in a world of interruptions and context-switching.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-realized-i-needed-to-leave-my-job" class="anchor"&gt;
  &lt;/a&gt;
  I realized I needed to leave my job
&lt;/h2&gt;

&lt;p&gt;I was writing about topics that were not supposed to be my core competency in my day job. I was either not excited or did not have much to share in the areas that were &lt;em&gt;supposed&lt;/em&gt; to be my core competencies. For me, it signaled that I was spread too thin and I was filling myself with knowledge in too many areas. Jack of all trades, master of none.&lt;/p&gt;

&lt;p&gt;At one point, I was trying to find a headline for my blog to describe the stream of information. The best I could come up with was: "Azure. DevOps. Kubernetes." &lt;/p&gt;

&lt;p&gt;But, I really wanted to focus on one of those parts. I did not feel like I could best serve clients if I was spread too thin. So, I started looking to see what it would mean to try to focus.  &lt;/p&gt;

&lt;p&gt;In mid-2020, I made the jump to a small consulting company, &lt;a href="https://boxboat.com"&gt;BoxBoat&lt;/a&gt;, that focuses on Kubernetes consulting. I further try to specialize in helping clients with Kubernetes on Azure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#readers-started-reaching-out" class="anchor"&gt;
  &lt;/a&gt;
  Readers started reaching out
&lt;/h2&gt;

&lt;p&gt;I had people, whom I never met, email me at my personal and work emails. They would thank me and sometimes ask additional questions. &lt;/p&gt;

&lt;p&gt;I'm not really sure where they found my email. I didn't advertise it anywhere. Maybe, they took a guess at it. So, unless I'm missing something, I think these people were going out of their way to send me a note or ask for help. Anyway, I'm delighted.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zyJfWqGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8uqvazw7nvhxl5chozd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zyJfWqGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8uqvazw7nvhxl5chozd9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then after a few exchanges...  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TYszaFaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ucb6tlewmg7trgmy0s4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYszaFaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ucb6tlewmg7trgmy0s4g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The best way I can summarize the experience was a Bootcamp to get a blog jumpstarted that also taught me how to serve an audience. And, I had a few little surprises along the way.&lt;/p&gt;

&lt;p&gt;If you're someone who's been meaning to start a blog, maybe you have a burial ground of drafts, then this experiment could be great for you. Commit to it and see what you learn.    &lt;/p&gt;

&lt;p&gt;For what it's worth, I've tried 100 days of running daily and 100 days of doing the dishes daily. I could &lt;strong&gt;not&lt;/strong&gt; do the dishes daily.   &lt;/p&gt;

&lt;p&gt;Thanks for reading. And, if you're interested in building cloud-native apps on Azure, subscribe to my blog at &lt;a href="https://gaunacode.com"&gt;https://gaunacode.com&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;If you want to see what I'm up to, follow me on &lt;a href="https://www.linkedin.com/in/facundogauna/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/gaunacode"&gt;Twitter&lt;/a&gt;.        &lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>All the use cases of useState I use in my projects.</title>
      <author>Gautham Vijayan</author>
      <pubDate>Sat, 28 Nov 2020 17:45:34 +0000</pubDate>
      <link>https://dev.to/gautham495/all-the-use-cases-of-usestate-i-use-in-my-projects-22o7</link>
      <guid>https://dev.to/gautham495/all-the-use-cases-of-usestate-i-use-in-my-projects-22o7</guid>
      <description>&lt;p&gt;In this post I will discuss the ways in which I use &lt;strong&gt;useState&lt;/strong&gt; in my projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. To get API data from backend and store it in state.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setdata&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;apiurl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;setdata&lt;/span&gt;&lt;span class="p"&gt;([{...&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;},[])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As I use MongoDB most of the time, the data which comes from the backend is in &lt;strong&gt;object/JSON&lt;/strong&gt; form.&lt;/p&gt;

&lt;p&gt;So to send the data from &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The frontend in forms and &lt;/li&gt;
&lt;li&gt;To get the data from the backend, &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I initialize a null or an empty state and get that backend data or the frontend data and push it to the useState variable and display it with map function.&lt;/p&gt;

&lt;p&gt;I use &lt;strong&gt;map function&lt;/strong&gt; because I initialized an empty array and inserted object data into it as map function works only for arrays.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spread operator [...]&lt;/strong&gt; is used here because when we want to get data from an API we will not require all the data present inn it and want only a select few.&lt;/p&gt;

&lt;p&gt;So to persist the existing data in the array we use spread operator.&lt;/p&gt;

&lt;p&gt;I have added spread operator here just to show there is an use case for it in useState as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. For True or false values.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setopen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;wish&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;}&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Literally the most used use case of &lt;strong&gt;useState&lt;/strong&gt; in workflow.&lt;/p&gt;

&lt;p&gt;Whenever the logic permits to have a boolean condition such as show something when I click a button, I just plugin this condition to get the job done!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Regular State management and to pass as props&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setdata&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This one is the most basic one which all of React developers use, but just to aid beginners I have mentioned it here.&lt;/p&gt;

&lt;p&gt;Like the first use case I mentioned above, I can just pass data into an empty array and pass it as props to another component and use my data there.&lt;/p&gt;

&lt;p&gt;This will be very useful if you want to create a card like component with map function and output it in the frontend which I do all the time.&lt;/p&gt;

&lt;p&gt;And that's some of my most used useState use cases I have mentioned here.&lt;/p&gt;

&lt;p&gt;There are a lot more ones which more experienced senior react.js developers may use which I do not know.&lt;/p&gt;

&lt;p&gt;If you know any other cases than the mentioned ones here, please mention it in the comments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt; &lt;u&gt;Check out my portfolio: &lt;/u&gt; &lt;a href="https://gautham-portfolio.netlify.app/"&gt;Gautham's portfolio&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;u&gt; Check out my blog: &lt;/u&gt;&lt;a href="https://coding-magnified.tech"&gt;coding-magnified.tech&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-other-articles" class="anchor"&gt;
  &lt;/a&gt;
  &lt;u&gt;My Other Articles: &lt;/u&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/universal-css-properties-everyone-must-use-4kie"&gt;Universal CSS properties everyone must know&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/creating-a-new-react-app-with-create-react-app-4e9m"&gt;Create-react-app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/basic-git-knowledge-for-beginners-m4p"&gt;Git for beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/changing-headers-in-react-with-react-helmet-d0d"&gt;Change headers in react with react-helmet&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/know-how-to-apply-box-shadow-on-all-four-sides-43pn"&gt;Know How to apply box-shadow on all four sides.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/simple-css-selectors-for-beginners-2i44"&gt;Simple CSS Selectors&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/gautham495/css-pseudo-elements-for-beginners-53ob"&gt;CSS Pseudo Elements&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What the #! shebang really does and why it's so important in your shell scripts</title>
      <author>meleu</author>
      <pubDate>Sat, 28 Nov 2020 17:02:24 +0000</pubDate>
      <link>https://dev.to/meleu/what-the-shebang-really-does-and-why-it-s-so-important-in-your-shell-scripts-2755</link>
      <guid>https://dev.to/meleu/what-the-shebang-really-does-and-why-it-s-so-important-in-your-shell-scripts-2755</guid>
      <description>&lt;p&gt;What exactly happens when we run a file starting with &lt;code&gt;#!&lt;/code&gt; (aka shebang), and why some people use &lt;code&gt;#!/usr/bin/env bash&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-raw-endraw-works" class="anchor"&gt;
  &lt;/a&gt;
  How the &lt;code&gt;#!&lt;/code&gt; works
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;#!&lt;/code&gt; shebang is used to tell the kernel which interpreter should be used to run the commands present in the file.&lt;/p&gt;

&lt;p&gt;When we run a file starting with &lt;code&gt;#!&lt;/code&gt;, the kernel opens the file and takes the contents written right after the &lt;code&gt;#!&lt;/code&gt; until the end of the line. For didactic purposes, let's consider it saves in a variable called &lt;code&gt;command&lt;/code&gt; the string starting after the shebang and ending in the end of line.&lt;/p&gt;

&lt;p&gt;After this the kernel tries to run a command with the contents of the &lt;code&gt;command&lt;/code&gt; and giving as the first argument the filename of the file we're trying to execute.&lt;/p&gt;

&lt;p&gt;Therefore, if you have an executable file called &lt;code&gt;myscript.sh&lt;/code&gt; with some shell commands and starting with &lt;code&gt;#!/bin/bash&lt;/code&gt;, when you run it, the kernel will execute &lt;code&gt;/bin/bash myscript.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the examples below you're going to see it very clearly.&lt;/p&gt;

&lt;p&gt;Starting with the classic &lt;code&gt;hello.sh&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Assuming this file has the executable permission, when you type this in the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The kernel will notice the &lt;code&gt;#!&lt;/code&gt; in the very first line and then will get what's after it, in this case &lt;code&gt;/bin/bash&lt;/code&gt;. And then what is executed has the very same effect of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ /bin/bash hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's use another example using &lt;code&gt;#!/bin/cat&lt;/code&gt;. The name of the file is &lt;code&gt;shebangcat&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/cat
All the contents of this file will be
printed in the screen when it's executed
(including the '#!/bin/cat' in the first line).
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's remember:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What's after the shebang: &lt;code&gt;/bin/cat&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Name of the file: &lt;code&gt;./shebangcat&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore this is what's executed: &lt;code&gt;/bin/cat ./shebangcat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See it by yourself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./shebangcat
#!/bin/cat
All the contents of this file will be
printed in the screen when it's executed
(including the '#!/bin/cat' in the first line).
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's take another example to make it very clear that things are like I'm saying. The following file is called &lt;code&gt;shebangecho&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/echo
The contents of this file will *NOT* be
printed when it's executed.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's check:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./shebangecho
./shebangecho
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The output was the name of the file because this is what was executed by the kernel &lt;code&gt;/usr/bin/echo ./shebangecho&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another interesting thing, is that if we pass arguments when calling our script, such arguments will also be passed to the command executed by the kernel. As we can see in the following example called &lt;code&gt;shebangls.sh&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/ls
The contents here doesn't matter.
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, when we run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./shebangls.sh
./shebangls.sh

$ ./shebangls.sh -l
-rwxr-xr-x 1 meleu meleu 41 Nov 28 14:42 ./shebangls.sh

$ ./shebangls.sh notfound
/bin/ls: cannot access 'notfound': No such file or directory
./shebangls.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-some-people-use-raw-usrbinenv-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Why some people use &lt;code&gt;#!/usr/bin/env&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;You probably saw some scripts starting with &lt;code&gt;#!/usr/bin/env bash&lt;/code&gt; where you're used to see just &lt;code&gt;#!/bin/bash&lt;/code&gt;. The reason of this is to increase the portability of the script (even thought it's a debatable matter, as we're going to see below).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;env&lt;/code&gt; command, if used with no arguments, prints a (big) list with all the environment's variables. But if &lt;code&gt;env&lt;/code&gt; is used followed by a command, it runs that command in another instance of the shell.&lt;/p&gt;

&lt;p&gt;🤔 - &lt;strong&gt;OK, but how does that influence portability?!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you use &lt;code&gt;#!/bin/bash&lt;/code&gt; you're clearly saying that &lt;code&gt;bash&lt;/code&gt; is in the &lt;code&gt;/bin/&lt;/code&gt; directory. This seems to be the default in all Linux distributions, but there are other Unix flavors where it can possibly not happen (for example the &lt;code&gt;bash&lt;/code&gt; can be placed in the &lt;code&gt;/usr/bin/&lt;/code&gt;). In systems like that your script starting with &lt;code&gt;#!/bin/bash&lt;/code&gt; would cause a &lt;code&gt;bad interpreter: No such file or directory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you run &lt;code&gt;env bash&lt;/code&gt;, the &lt;code&gt;env&lt;/code&gt; will search for &lt;code&gt;bash&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt; variable, and then run the first one it finds. Usually &lt;code&gt;bash&lt;/code&gt; is in &lt;code&gt;/bin/&lt;/code&gt;, but a user running your script on some other system can have it in &lt;code&gt;/usr/bin/&lt;/code&gt; or even testing an alternative version in &lt;code&gt;/home/user/bin/bash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, in order to make the script have a greater reach and be used in environments other than Linux, some people recommend the use of the &lt;code&gt;env&lt;/code&gt; technique.&lt;/p&gt;

&lt;p&gt;🤔 - &lt;strong&gt;But wait! What guarantees that the &lt;code&gt;env&lt;/code&gt; will always be in the &lt;code&gt;/usr/bin/&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are no guarantees... 😇&lt;/p&gt;

&lt;p&gt;The recomendation is based in what is commonly seen in the Unix systems. I see &lt;code&gt;/usr/bin/env&lt;/code&gt; being used in some modern projects (like &lt;a href="https://github.com/RetroPie/RetroPie-Setup"&gt;RetroPie&lt;/a&gt;), but where it's specially useful is when you need to run a python or even a NodeJS script.&lt;/p&gt;

&lt;p&gt;Let's take this NodeJS usage as an example. I want to call a NodeJS script just by calling the script's filename. Then I could do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cp"&gt;#!/usr/bin/node
&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from NodeJS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The problem is that I usually install node via &lt;a href="https://github.com/nvm-sh/nvm"&gt;Node Version Manager&lt;/a&gt;, instead of using the the distribution's package manager. So, my &lt;code&gt;node&lt;/code&gt; is like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ which node
/home/meleu/.nvm/versions/node/v14.15.1/bin/node
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By any means I want to put &lt;code&gt;#!/home/meleu/.nvm/versions/node/v14.15.1/bin/node&lt;/code&gt; in my script!&lt;/p&gt;

&lt;p&gt;So, the solution here is to use &lt;code&gt;#!/usr/bin/env node&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-if-i-dont-want-to-use-raw-endraw-at-all" class="anchor"&gt;
  &lt;/a&gt;
  And if I don't want to use &lt;code&gt;#!&lt;/code&gt; at all?
&lt;/h2&gt;

&lt;p&gt;I strongly recommend you to never write neither run a shell script without a &lt;code&gt;#!&lt;/code&gt; shebang!&lt;/p&gt;

&lt;p&gt;As we said, the shebang tells to the kernel which interpreter is to be used to run the commands present in the file. If you run a script without specifying the interpreter, the shell will spawn another instance of itself and try to run the commands in the script. Which means that it will execute whatever commands found in the file, even if it was written for zsh, ksh, dash, fish, node, python, or whatever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summing up&lt;/strong&gt;: Always start your scripts with a &lt;code&gt;#!&lt;/code&gt; shebang. Preferably with &lt;code&gt;#!/usr/bin/env&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links" class="anchor"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mywiki.wooledge.org/BashProgramming#Shebang"&gt;http://mywiki.wooledge.org/BashProgramming#Shebang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.bash-hackers.org/scripting/basics#the_shebang"&gt;https://wiki.bash-hackers.org/scripting/basics#the_shebang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.in-ulm.de/~mascheck/various/shebang/4.0BSD_newsys_sys1.c.html"&gt;Here's an email from Dennis Ritchie&lt;/a&gt; in 1980, talking about these "magic characters".&lt;/li&gt;
&lt;li&gt;&lt;code&gt;man env&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexewerlof.medium.com/node-shebang-e1d4b02f731d"&gt;Node.js shebang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>bash</category>
      <category>linux</category>
      <category>unix</category>
      <category>shellscript</category>
    </item>
    <item>
      <title>AWS API Architecture</title>
      <author>Stuart Sewell</author>
      <pubDate>Sat, 28 Nov 2020 16:54:25 +0000</pubDate>
      <link>https://dev.to/stubrew24/aws-api-architecture-57j2</link>
      <guid>https://dev.to/stubrew24/aws-api-architecture-57j2</guid>
      <description>&lt;p&gt;I recently worked on a project which involved separating out the API from a monolith application, containerizing and deploying it to AWS. This was my first experience deploying to AWS, so in order to solidify what I learned during this process I've decided to document some of the resources I used and how they interact with one another.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Az7lrCpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pt54c3ngioormlozwv2j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Az7lrCpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pt54c3ngioormlozwv2j.jpg" alt="API Diagram"&gt;&lt;/a&gt;&lt;/p&gt;
This diagram gives an outline of the architecture and the resources used.



&lt;h2&gt;
  &lt;a href="#regions-amp-availability-zones" class="anchor"&gt;
  &lt;/a&gt;
  Regions &amp;amp; Availability Zones
&lt;/h2&gt;

&lt;p&gt;Regions are a grouping of AWS resources in a certain geographical location. Within each region are clusters of data centres called availability zones.&lt;/p&gt;

&lt;p&gt;Each region contains multiple availability zones which are physically separate from one another to ensure they are isolated from failures in other zones. The zones are then connected through ultra-low-latency networks.&lt;/p&gt;

&lt;p&gt;Any AWS resource you create must be placed inside a VPC subnet (we'll cover this), which must be located within an availability zone. It's often a good idea to launch resources in multiple availability zones to ensure maximum uptime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQbj6A0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u8oiopmn8dofqei0dud0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQbj6A0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u8oiopmn8dofqei0dud0.png" alt="AWS Global Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-private-cloud-vpc" class="anchor"&gt;
  &lt;/a&gt;
  Virtual Private Cloud (VPC)
&lt;/h2&gt;

&lt;p&gt;A VPC is a private virtual network where you can provision AWS resources - in essence your own private area within AWS. You have complete control over this environment including selecting IP addresses, route tables and network gateways.&lt;/p&gt;

&lt;p&gt;Working with subnets we can setup private and public facing environments and control who can access these, and how. A VPC will span all of the availability zones in a region.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subnets" class="anchor"&gt;
  &lt;/a&gt;
  Subnets
&lt;/h2&gt;

&lt;p&gt;A subnet is a sub section of a network and can be either public or private. The key difference being, public subnets have a route to the internet whereas private ones do not and can only communicate with other subnets within the same VPC.&lt;/p&gt;

&lt;p&gt;One or more subnets to each availability zone, but each subnet must reside entirely within one zone, and cannot span zones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-analogy-for-everything-covered-so-far" class="anchor"&gt;
  &lt;/a&gt;
  A quick analogy for everything covered so far
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oIUdeKw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e2gz5n4gs8n22cdt255t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oIUdeKw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e2gz5n4gs8n22cdt255t.jpg" alt="Office Building"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine an office building as being a region - an outer layer that contains many things.&lt;/p&gt;

&lt;p&gt;Each floor is an availability zone. A region can, and most likely will, have more than one zone, much like a building and floors!&lt;/p&gt;

&lt;p&gt;Each department is a VPC, it can span across floors.&lt;/p&gt;

&lt;p&gt;Finally a subnet is the office suite - it can only reside within a single floor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-groups" class="anchor"&gt;
  &lt;/a&gt;
  Security Groups
&lt;/h2&gt;

&lt;p&gt;Security groups act as a virtual a firewall - they allow and deny traffic. They operate on an instance level rather than a subnet level, so you would apply a security group to each instance you launch.&lt;/p&gt;

&lt;p&gt;You apply rules to each security group to allow traffic to and from its instances. These rules can be modified at any time and will instantly apply to all instances associated with that security group. Multiple security groups can be added to each instance.&lt;/p&gt;

&lt;p&gt;By default all inbounded traffic is denied, and all outbound is allowed.&lt;/p&gt;

&lt;p&gt;To continue with our office building analogy, security groups would be the key cards to access different areas of the building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0SrMEZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3tin63x03kiwyg6dvpm0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0SrMEZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3tin63x03kiwyg6dvpm0.jpg" alt="Queens Guard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-load-balancer" class="anchor"&gt;
  &lt;/a&gt;
  Application Load Balancer
&lt;/h2&gt;

&lt;p&gt;An application load balancer is essentially a server which fronts the application and forwards traffic to instances downstream - so in our case the Fargate instances. It's used to spread the load across multiple instances whilst providing a single point of access.&lt;/p&gt;

&lt;p&gt;It will also perform health checks on our instances and if one instance fails the load balancer will direct traffic to the remaining healthy ones. We provide a route - for example '/health', and if this returns a 200 it knows the instance is healthy. &lt;/p&gt;

&lt;p&gt;Other features of the load balancer includes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Providing support for SSL/HTTPS.&lt;/li&gt;
&lt;li&gt;Works across availability zones, so if one zone goes down the load balancer will move all traffic to the other zones.&lt;/li&gt;
&lt;li&gt;Separating public from private traffic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGxRrxTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pag9h4da9xcwby3e159l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGxRrxTO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pag9h4da9xcwby3e159l.jpg" alt="Route 66 Highway"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Route 53 &amp;amp;&amp;amp; Internet Gateways&lt;/p&gt;

&lt;p&gt;Route 53 is a managed DNS - a collection of rules and records mapping IP addresses to URLs. It can be used for both public domain names and private domains - which can only be resolved by instances within the VPC. Route 53 can also provide load balancing through DNS and limited health checks.&lt;/p&gt;

&lt;p&gt;Internet gateways provide the VPC with a route to the internet. If you think of your home network as a subnet, your modem would be the internet gateway proving access to your ISP and the wider internet.&lt;/p&gt;

&lt;p&gt;Only one internet gateway can be applied to any VPC, and a gateway cannot be detached from a VPC whilst there are any active instances still running on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-fargate" class="anchor"&gt;
  &lt;/a&gt;
  AWS Fargate
&lt;/h2&gt;

&lt;p&gt;The final piece of the puzzle is Fargate - "a serverless compute engine for containers that works with both Elastic Container Service (ECS) and Elastic Kubernetes Service". This is where we provision our API containers.&lt;/p&gt;

&lt;p&gt;Fargate is a kind of evolution of Elastic Container Service. It's managed by AWS - removing the need to provision and manage servers, and it scales up and down seamlessly, meaning you only pay for what you use. You can think of it as containers on demand - where everything is managed at a container level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvH5VDc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4sph8sv6dkp6fd2jjmzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvH5VDc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4sph8sv6dkp6fd2jjmzk.png" alt="AWS Fargate Sandwich Quote"&gt;&lt;/a&gt;&lt;/p&gt;
This quote perfectly surmises the reason to choose Fargate.



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hopefully this provides a high level understanding of some of the resources that go into setting up a containerized application on AWS. Of course, the best way to fully grasp these concepts is to dive in and get hands on.&lt;/p&gt;

&lt;p&gt;Here are some resources I have found to be particularly helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLv2a_5pNAko0Mijc6mnv04xeOut443Wnk"&gt;Linux Academy - AWS Essentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://acloudguru.com/aws-cloud-training"&gt;A Cloud Guru - Cloud Training&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLt1SIbA8guuusDOIqQuiFKerF_4_nQ_Xs"&gt;Stephane Maarek - AWS Certified Solutions Architect Associate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And of course, the &lt;a href="https://docs.aws.amazon.com"&gt;AWS Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>architecture</category>
      <category>api</category>
    </item>
    <item>
      <title>What’s Docker? And how to start with it</title>
      <author>Wojtek Krzywiec</author>
      <pubDate>Sat, 28 Nov 2020 15:41:45 +0000</pubDate>
      <link>https://dev.to/wkrzywiec/what-s-docker-and-how-to-start-with-it-2eai</link>
      <guid>https://dev.to/wkrzywiec/what-s-docker-and-how-to-start-with-it-2eai</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@timeasley"&gt;Tim Easley&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;During the last couple of years Docker has became a thing in software developer world. With this post I would like to explain what problem does it solve, how to install it and test on a simple examples. Apart from the technical topics I also would like to elaborate a little bit on the containerization concept of a software.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#container-technology-what-problem-does-it-solve" class="anchor"&gt;
  &lt;/a&gt;
  Container technology. What problem does it solve?
&lt;/h3&gt;

&lt;p&gt;Imagine this scenario. You, as a developer, has finished a new amazing app. Everything was tested and it could be a next big thing. Now your boss is asking you to move it from your development machine (usually local PC) to company’s server (production).&lt;/p&gt;

&lt;p&gt;Would it be a simple copy-pasting task? In some cases it might, but what if on this server runs couple of other applications? It might be some conflicts when for instance, a new software you need to have the 8 Java version, but other applications are using older versions. And number of such conflicts may skyrocket with a complexity of installed application on a server. So instead of quickly moving new solution to a production we would need to consume a lot of time to make sure that our new application would run and also make sure that old ones won’t crash after these changes. So here we have &lt;strong&gt;the old problem —some software works only on my machine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6wcva5sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aureg0w9ISlitYSrgym5uhQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wcva5sG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Aureg0w9ISlitYSrgym5uhQ.jpeg" alt="Source [quick meme](http://www.quickmeme.com/p/3vuukg)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source &lt;a href="http://www.quickmeme.com/p/3vuukg"&gt;quick meme&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Luckily the containers concept was introduced! Instead of moving a finished app from one environment to another we need first to wrap it in a container that handle for us all required dependencies and libraries, so it runs reliably on every machine (Windows, Linux, Mac, cloud, and others)!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But is a the only benefit of the container?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not at all! Apart from that now every software is portable, their development could be more faster than it was. Especially when we develop a microservices , where each service is a separate part of a bigger solution. With this approach we can split large software into smaller parts and each of it could be written in a different technology (Java, Python, R…), so we are able to choose the best tool for a particular problem.&lt;/p&gt;

&lt;p&gt;Moreover the microservice architecture helps with agile approach. For instance if we have an e-commerce website and one of payment method is PayPal, but suddenly customers wants to replace it with another method. Using this approach you won’t need to create a new version of entire app, just the tiny part responsible for payments, which is far less time-consuming.&lt;/p&gt;

&lt;p&gt;And finally, containers technology enables some of the cloud features (like scalability, self-healing), it reduce solution’s time to market, reduce IT infrastructure or issue time resolving.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-role-of-docker" class="anchor"&gt;
  &lt;/a&gt;
  What is a role of Docker?
&lt;/h3&gt;

&lt;p&gt;Ok, so now, what is a role of the Docker in container technology? Basically it’s a tool that allows us to develop, deploy and run software in a container. With Docker we can package up the application with all libraries and dependencies, and unlike virtual machine they don’t require so much resources, so they are faster and more easy to use.&lt;/p&gt;

&lt;p&gt;Let’s move on to show you how Docker really works, but first we must install it on your local machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install-docker" class="anchor"&gt;
  &lt;/a&gt;
  How to install Docker?
&lt;/h3&gt;

&lt;p&gt;Depending on the system you have the installation might be a slightly different. If you’re using a Linux, you’ll be able to install Docker in a terminal, but if you’re using Windows or MacOS you will need to install a Docker Desktop app which is a lightweight Linux virtual machine.&lt;/p&gt;

&lt;p&gt;Here are the instructions how to install Docker on &lt;a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/"&gt;Ubuntu (Linux)&lt;/a&gt;, &lt;a href="https://docs.docker.com/docker-for-windows/install/"&gt;Windows&lt;/a&gt; and &lt;a href="https://docs.docker.com/docker-for-mac/install/"&gt;MacOS.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-first-helloworld-docker-container" class="anchor"&gt;
  &lt;/a&gt;
  Running first, hello-world, Docker container
&lt;/h3&gt;

&lt;p&gt;Everything is set up, so open a terminal (on Windows and Macs, first make sure that Docker is up and running) and type following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker &lt;span class="nt"&gt;--version&lt;/span&gt;

Docker version 18.09.2, build 6247962
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you get similar output as I have it’s installed correctly 💪.&lt;/p&gt;

&lt;p&gt;Now let’s try with a first container, to do that run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker run hello-world

Unable to find image &lt;span class="s1"&gt;'hello-world:latest'&lt;/span&gt; locally
latest: Pulling from library/hello-world
1b930d010525: Pull &lt;span class="nb"&gt;complete 
&lt;/span&gt;Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535
Status: Downloaded newer image &lt;span class="k"&gt;for &lt;/span&gt;hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
    1. The Docker client contacted the Docker daemon.
    2. The Docker daemon pulled the &lt;span class="s2"&gt;"hello-world"&lt;/span&gt; image from the Docker Hub.&lt;span class="o"&gt;(&lt;/span&gt;amd64&lt;span class="o"&gt;)&lt;/span&gt;
    3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading.
    4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
     &lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; ubuntu bash

    Share images, automate workflows, and more with a free Docker ID:
     &lt;span class="o"&gt;[&lt;/span&gt;https://hub.docker.com/]&lt;span class="o"&gt;(&lt;/span&gt;https://hub.docker.com/&lt;span class="o"&gt;)&lt;/span&gt;

    For more examples and ideas, visit:
     &lt;span class="o"&gt;[&lt;/span&gt;https://docs.docker.com/get-started/]&lt;span class="o"&gt;(&lt;/span&gt;https://docs.docker.com/get-started/&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So what happens here? First of all, we’ve pulled a &lt;a href="https://hub.docker.com/_/hello-world"&gt;“hello-world” image&lt;/a&gt; from an official Docker image repository — &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;. A Docker image can be compared to a recipe for a container, it’s an executable file that has all information needed to run an application. &lt;em&gt;Docker Hub&lt;/em&gt; is a an official repository, where some of the images are stored and are available for us.&lt;/p&gt;

&lt;p&gt;In above print out you could found two other terms — &lt;em&gt;Docker client&lt;/em&gt; and &lt;em&gt;Docker daemon&lt;/em&gt;. First one is a terminal, command line application that we’re using to communicate with &lt;em&gt;Docker daemon&lt;/em&gt;, which is a local background service which is responsible for managing the containers.&lt;/p&gt;

&lt;p&gt;Now, after typing &lt;code&gt;docker info&lt;/code&gt; we should get some info about current status of container and images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker info

Containers: 1
Running: 0
Paused: 0
Stopped: 1
Images: 1
....
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another command would be &lt;strong&gt;docker images&lt;/strong&gt; which print for us list of locally saved images&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker images

REPOSITORY    TAG        IMAGE ID        CREATED             SIZE
hello-world   latest    fce289e99eb9    2 months ago         1.84kB
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let’s try something different and run another container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker run busybox &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello Docker funs!"&lt;/span&gt;

Hello Docker funs!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What happened here? A first part is very similar to what we already had — docker run busybox command pulled an image from Ducker Hub and build it to the container. The second part echo "hello Docker funs!" is a command that was ran inside the container!&lt;/p&gt;

&lt;p&gt;Now let’s check out if containers are running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker ps &lt;span class="nt"&gt;-a&lt;/span&gt;

CONTAINER ID  IMAGE      COMMAND          CREATED        STATUS               
5411cd0e5873  busybox    &lt;span class="s2"&gt;"echo 'Hello …"&lt;/span&gt; 3 minutes ago Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;... 
abac886c2a2d  busybox    &lt;span class="s2"&gt;"sh"&lt;/span&gt;            4 minutes ago Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;...                      
9a1437750643  hello-world &lt;span class="s2"&gt;"/hello"&lt;/span&gt;       40 minutes ago Exited &lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Column STATUS is showing that all our images are stopped.&lt;/p&gt;

&lt;p&gt;But what if we want to run multiple commands? Just add -i flag to run method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker run &lt;span class="nt"&gt;-i&lt;/span&gt; busybox

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# ls&lt;/span&gt;
    bin   dev   etc   home  proc  root  sys   tmp   usr   var

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# cd home&lt;/span&gt;

    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  /home &lt;span class="c"&gt;# echo "Hello World!"&lt;/span&gt;
    Hello World!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally let’s do something more complex and run a &lt;a href="https://hub.docker.com/_/tomcat"&gt;container with a Tomcat server.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker run &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; tomcat-server &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8888:8080 tomcat:8.0

Status: Downloaded newer image &lt;span class="k"&gt;for &lt;/span&gt;tomcat:8.0
Using CATALINA_BASE:   /usr/local/tomcat
Using CATALINA_HOME:   /usr/local/tomcat
Using CATALINA_TMPDIR: /usr/local/tomcat/temp
Using JRE_HOME:        /docker-java-home/jre
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;

19-Mar-2019 05:40:43.322 INFO &lt;span class="o"&gt;[&lt;/span&gt;main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"http-apr-8080"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
19-Mar-2019 05:40:43.336 INFO &lt;span class="o"&gt;[&lt;/span&gt;main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ajp-apr-8009"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
19-Mar-2019 05:40:43.348 INFO &lt;span class="o"&gt;[&lt;/span&gt;main] org.apache.catalina.startup.Catalina.start Server startup &lt;span class="k"&gt;in &lt;/span&gt;974 ms

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using above command with parameters we did certain task:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; — it keeps the container up and running,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--name tomcat-server&lt;/code&gt; — in this way we specify the alias (&lt;em&gt;tomcat-server&lt;/em&gt;) of the container,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; — it tells Docker to automatically remove container when it exits&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;-p 8888:8080&lt;/code&gt; — it maps the inside port of the container (8080) to the host (outside) port, so when you type &lt;a href="http://localhost:8888/"&gt;*http://localhost:8888/&lt;/a&gt; *on your local you should get something like this:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nC64yUr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2062/1%2Aaor983vFrTJr4S1Xwoc_1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nC64yUr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2062/1%2Aaor983vFrTJr4S1Xwoc_1g.png" alt="Tomact GUI — so it confirms that you’ve got a running application server on your machine without even installing a thing!"&gt;&lt;/a&gt;&lt;em&gt;Tomact GUI — so it confirms that you’ve got a running application server on your machine without even installing a thing!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before we end our work with Docker for today, it’s a good practice to check whether none of the containers is running on the background. To check it use one of already introduces command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker ps &lt;span class="nt"&gt;-a&lt;/span&gt;

CONTAINER ID    IMAGE        CREATED             STATUS              
91b2db85e50d  tomcat:8.0   8 minutes ago       Up 8 minutes        
e00541868e30  busybox      16 minutes ago      Up 16 minutes  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see on the STATUS print out two containers are still up and running. To stop both of them use following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker stop &lt;span class="si"&gt;$(&lt;/span&gt;docker ps &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-q&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

91b2db85e50d
e00541868e30
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now when you check again none of them are running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; docker ps -

CONTAINER ID   IMAGE      CREATED                STATUS                      
e00541868e30  busybox  21 minutes ago    Exited &lt;span class="o"&gt;(&lt;/span&gt;137&lt;span class="o"&gt;)&lt;/span&gt; 6 seconds ago    
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You may wonder why you don’t see the tomcat-server container. It’s because we’ve added a -rm option when it was ran, so it automatically deletes the container to free space.&lt;/p&gt;

&lt;p&gt;And it’s everything for today! If you’re want more information about the Docker, please be patient. New stories are coming really soon 🙂!&lt;/p&gt;

&lt;p&gt;If you’re interested in Docker topic you can check my other blog posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/@wkrzywiec/database-in-a-docker-container-how-to-start-and-whats-it-about-5e3ceea77e50?source=post_page---------------------------"&gt;Database in a Docker container — how to start and what’s it about&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/@wkrzywiec/how-to-put-your-java-application-into-docker-container-5e0a02acdd6b?source=post_page---------------------------"&gt;How to put your Java application into Docker container&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://medium.com/@wkrzywiec/build-and-run-angular-application-in-a-docker-container-b65dbbc50be8"&gt;Build and run Angular application in a Docker container&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references" class="anchor"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/get-started/"&gt;&lt;strong&gt;Get Started, Part 1: Orientation and setup&lt;/strong&gt;
on docs.docker.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/resources/what-container"&gt;&lt;strong&gt;What is a Container? | Docker&lt;/strong&gt; on docker.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://towardsdatascience.com/learn-enough-docker-to-be-useful-b7ba70caeb4b"&gt;&lt;strong&gt;Learn Enough Docker to be Useful&lt;/strong&gt; on towardsdatascience.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/why-docker"&gt;&lt;strong&gt;Why Docker? | Docker&lt;/strong&gt; on docker.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>microservices</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Collapsing Page Effect</title>
      <author>Johnny Fekete</author>
      <pubDate>Sat, 28 Nov 2020 14:18:13 +0000</pubDate>
      <link>https://dev.to/johnnyfekete/collapsing-page-effect-332a</link>
      <guid>https://dev.to/johnnyfekete/collapsing-page-effect-332a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#fun-with-the-logout-animation" class="anchor"&gt;
  &lt;/a&gt;
  Fun with the Logout Animation
&lt;/h2&gt;

&lt;p&gt;The other day I was working on my startup, and wanted to spice things up&lt;br&gt;
a bit so I created a collapsing page animation for the logout functionality.&lt;br&gt;
Nothing fancy, some CSS transition animation. But when I &lt;a href="https://twitter.com/FullStackMaker/status/1280413902610796544?s=20"&gt;posted it on Twitter&lt;/a&gt;,&lt;br&gt;
it got viral, especially after it was retweeted by Smashing Magazine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76THAgJk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.bonboarding.com/gifs/collapsing-page-effect/collapse.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76THAgJk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.bonboarding.com/gifs/collapsing-page-effect/collapse.gif" alt="Collapsing page effect animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was totally mind-blown by the engagement, and all the positive feedback&lt;br&gt;
(this was my first viral content). Many of the people asked me to share the code,&lt;br&gt;
but instead of just publishing it on github (which I did, and you can access it as&lt;br&gt;
a &lt;a href="https://www.npmjs.com/package/collapsing-page"&gt;NPM package here&lt;/a&gt; - available both for React or plain JavaScript) I decided to write a brief article about it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-notsocomplicated-code" class="anchor"&gt;
  &lt;/a&gt;
  The Not-So-Complicated Code
&lt;/h2&gt;

&lt;p&gt;As a start, I wanted body's &lt;em&gt;all&lt;/em&gt; child elements to collapse, and also all &lt;code&gt;div&lt;/code&gt;'s.&lt;br&gt;
I didn't want to put animation on all elements (eg. headers, links, buttons etc)&lt;br&gt;
because I felt it would make the animation too fractured.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body &amp;gt; *, body div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make sure that the page doesn't get scrolled, I set the position to &lt;code&gt;fixed&lt;/code&gt;.&lt;br&gt;
I also disabled pointer events, so no clicks or other events get triggered&lt;br&gt;
during the animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, before dealing with the actual, I had to measure the total height&lt;br&gt;
of the page (to know, how much should the items "fall" to ensure that all items&lt;br&gt;
will be out of the screen at the end):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So the animation is actually super simple: just loop through the selected&lt;br&gt;
elements and generate some semi-random values, then add them as CSS attributes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// wait between 0 and 3 seconds&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// speed between 2 and 5 seconds&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// rotate with max 15 degrees to either direction&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moveX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// move with 80px to either direction&lt;/span&gt;

  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`transform &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms ease-out`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transitionDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`translateY(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px) translateX(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;moveX&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px) rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This loop just goes through every element and assigns random values for them.&lt;/p&gt;

&lt;p&gt;All of the elements will be transitioned downward with the height of the screen,&lt;br&gt;
therefore even the ones at the top of your page will end up out of the screen at the end.&lt;/p&gt;

&lt;p&gt;Finally, I wanted to keep one item that stayed on the screen behind the collapsing page:&lt;/p&gt;

&lt;p&gt;There are a few important things with it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it should be a child of the body, so it's parent element is not collapsing&lt;/li&gt;
&lt;li&gt;it should have &lt;code&gt;fixed&lt;/code&gt; position&lt;/li&gt;
&lt;li&gt;to achieve the effect that it's in the background behind everything else, you can adjust the &lt;code&gt;z-index&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then just ignore it and it's children elements in the forEach loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Identify the logout screen that should stay in place&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logoutEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#logout-screen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Function that tells if an element is a&lt;/span&gt;
&lt;span class="c1"&gt;// descendant (children, grandchildren etc) of another element&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDescendant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// And the updated forEach loop:&lt;/span&gt;
&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;logoutEl&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isDescendant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logoutEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this element should detect clicks&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// don't continue adding the animation&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// ... add the animation for the other items&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is the basic logic, it's quite simple and all animations are handled by CSS transitions.&lt;/p&gt;

&lt;p&gt;Here's the final code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;collapsePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body &amp;gt; *, body div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logoutEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#logout-screen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDescendant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;logoutEl&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isDescendant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logoutEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pointerEvents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// wait between 0 and 3 seconds&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// speed between 2 and 5 seconds&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rotate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// rotate with max 10 degrees&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;moveX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// move with 50px to either direction&lt;/span&gt;

    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`transform &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms ease-out`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transitionDelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;ms`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`translateY(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
      &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px) translateX(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;moveX&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px) rotate(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;deg)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#things-to-consider" class="anchor"&gt;
  &lt;/a&gt;
  Things to Consider
&lt;/h2&gt;

&lt;p&gt;After the animation is done, all your elements will still be available in the DOM,&lt;br&gt;
just transitioned out of the screen. It is not a problem if you will navigate to&lt;br&gt;
another page after, but it might cause unexpected behavior if you use some&lt;br&gt;
libraries that handle the navigation for you (eg. react-router-dom).&lt;/p&gt;

&lt;p&gt;To solve this issue, I added a reset function to the component, that is triggered&lt;br&gt;
on unmounting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;br&gt;
You can grab the whole code as an &lt;a href="https://www.npmjs.com/package/collapsing-page"&gt;NPM package&lt;/a&gt; - it can be used both as a React component or as a standalone JavaScript function.&lt;br&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While this animation can bring some unexpected delight to your users, be careful with it.&lt;br&gt;
Don't overuse, as the animation takes a few seconds each time. I recommend only using it for logouts,&lt;br&gt;
or when the user deletes something in your web-app (eg. a large project, or even the user's profile).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>animation</category>
      <category>ux</category>
      <category>react</category>
    </item>
    <item>
      <title>Ode to Semantic HTML</title>
      <author>Eevis (she/her)</author>
      <pubDate>Sat, 28 Nov 2020 13:54:18 +0000</pubDate>
      <link>https://dev.to/eevajonnapanula/ode-to-semantic-html-38c3</link>
      <guid>https://dev.to/eevajonnapanula/ode-to-semantic-html-38c3</guid>
      <description>&lt;p&gt;Have you ever created a button out of a div? Added that &lt;code&gt;onClick&lt;/code&gt;-event there, and styled the div to look like a button? Yup, me too. And I'm not proud of it. &lt;/p&gt;

&lt;p&gt;If you wonder why I'm saying I'm not proud of it, here's the reason: It is purely exclusive. If you don't add the correct roles, the tab index, keyboard events, and all that, there are plenty of users who just can't use that button. Heck, some users don't even know that there is a button.&lt;/p&gt;

&lt;p&gt;In this blog post, I will explain what semantic HTML is and what are the benefits of using it. A spoiler alert: They help to communicate that there actually is a button. 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-semantic-html" class="anchor"&gt;
  &lt;/a&gt;
  What is Semantic HTML?
&lt;/h2&gt;

&lt;p&gt;Semantic HTML, or semantic markup, describes its meaning to browser and developer in human- and machine-readable way. So, with semantic elements, a human will know what that element is (for example, a button), and a browser knows how to display and interact with them. An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am a button!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;vs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  I try to be a button!
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As a reader of the code, you probably can assume that the first one is a button from the &lt;code&gt;button&lt;/code&gt;-element. That is a semantic tag. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; however, is not a semantic element, and without that id on the div, you wouldn't be able to say that it is a button (well, it says "I try to be a button!" but the text could be anything). &lt;/p&gt;

&lt;p&gt;From the browser's (or eventually, screen reader's) perspective, that first one is definitely a button, as the semantic tag tells. The latter, however, is just text, so no possibilities of interaction - screen reader users don't know that there is a button at all. Sighted keyboard users see that it is a button (assuming it has been styled as one) but can't interact with it as it does not get focus. &lt;/p&gt;

&lt;p&gt;A note here - not all native elements are semantic elements. Elements like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; don't carry any semantic meaning, and thus are not semantic elements. The elements and features I'm discussing in the next section, are only the ones with semantic meaning. For all the curious ones, every HTML element is explained in the &lt;a href="https://html.spec.whatwg.org/#semantics"&gt;WHATWG HTML Living Standard&lt;/a&gt;. I like the note about the div-element: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Semantics can be communicated through two things - native semantics and semantics added with &lt;a href="https://www.w3.org/TR/wai-aria/"&gt;ARIA (Accessible Rich Internet Applications)&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#native-semantics" class="anchor"&gt;
  &lt;/a&gt;
  Native Semantics
&lt;/h3&gt;

&lt;p&gt;Native semantics come from the HTML elements. The HTML element itself conveys meaning - eg. that it is a button - and does not need any extra (like &lt;code&gt;role="button"&lt;/code&gt;) to be added to the mix. This is maybe even clearer with the &lt;code&gt;code&lt;/code&gt;-element. When the browser encounters a code-block that has been declared with the &lt;code&gt;code&lt;/code&gt;-tag, it knows that there is no need to try to run that code. It is purely for reading and happens to be code. &lt;/p&gt;

&lt;p&gt;Semantic HTML-elements also carry lots of other good things - they are focusable and keyboard usable by default to the extent that particular element should be. There is no need to implement these features. So, in the example of the button, it can be activated with enter and spaceBar, and our code doesn't need to listen to the spacebar or enter key events.&lt;/p&gt;

&lt;p&gt;Other examples of (natively) semantic HTML elements are headings, paragraphs, and landmarks such as &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, and &lt;code&gt;footer&lt;/code&gt;. They can be grouped into several categories such as document metadata, text-level semantics, grouping content, etc. See the &lt;a href="https://html.spec.whatwg.org/#semantics"&gt;WHATWG HTML Living Standard&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;One note about using semantic elements: use them for their semantics, not for their looks. A good example of misuse is using &lt;code&gt;blockquote&lt;/code&gt;-element for the indentation AMD not for implicating a quote. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#semantics-with-aria" class="anchor"&gt;
  &lt;/a&gt;
  Semantics with ARIA
&lt;/h3&gt;

&lt;p&gt;There is another way to add semantics to the elements, and that is with ARIA. For example, a span with the following properties is not understood as a heading by a screen reader:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;I want to be a heading!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But when the semantics are added with ARIA, it becomes a heading from the screen reader's point of view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt; &lt;span class="na"&gt;aria-level=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Yay I'm a heading!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note, however, that the semantic heading tags are the recommended way to communicate headings! And this goes to anything - native semantic HTML elements are preferred over adding semantics with ARIA. The reason for this is that when using ARIA, there are so many things to remember to implement and add compared to the native semantic elements. &lt;/p&gt;

&lt;p&gt;So, when the ARIA would be an appropriate solution compared to semantic HTML? There are several occasions, and a common nominator is that when the semantic elements aren't enough, ARIA should be used. For example, there is no semantic element for a modal dialog. To make it accessible, it would need a few aria-attributes and roles added. If you are curious about what those things are, check out the &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex"&gt;WAI-ARIA Authoring Practices&lt;/a&gt; - they have listed design patterns for different widgets containing the expected keyboard interaction and needed aria-attributes, and have the information for dialogs as well.&lt;/p&gt;

&lt;p&gt;There is a warning to be given when speaking about ARIA. No ARIA is better than bad ARIA - this means that having the wrong aria-attributes in the code can create a really confusing experience for users with assistive technology. Also, when using, for example, roles, be sure to implement all the functionality that is expected from that role - it is frustrating if a screen reader tells that the element is a button, but the keyboard functionality is not implemented. &lt;/p&gt;

&lt;p&gt;So, I want to stress this: adding ARIA adds just &lt;em&gt;information&lt;/em&gt;, not the functionality. When using aria-attributes, be sure to implement all the expected functionality!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-use-semantic-html" class="anchor"&gt;
  &lt;/a&gt;
  Why You Should Use Semantic HTML
&lt;/h2&gt;

&lt;p&gt;The HTML tags we use should describe and convey the meaning of the underlying content. This is helpful in many ways, but the three most important things are 1) making the site accessible, 2) helping with SEO, and 3) making the code easier to read and understand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessibility" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h3&gt;

&lt;p&gt;The first point, making the site accessible, should be every front end developer's goal. I mean, I imagine no one wants to exclude any users, right? Making the site fully accessible to different kinds of users requires a lot of work. Using (native) semantic elements helps you, as you don't have to implement every single interaction by yourself, as the semantic tags provide most of the required functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo" class="anchor"&gt;
  &lt;/a&gt;
  SEO
&lt;/h3&gt;

&lt;p&gt;Semantics also helps with SEO. Search engines crawl through the websites and can only "see" the textual context and DOM, and they index the content they come across. This means that everything that is in textual format counts. For example, giving images descriptive alt-texts, using semantic headings, and so on, help make your DOM machine-readable for crawlers, yielding a better SEO score. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#readable-code" class="anchor"&gt;
  &lt;/a&gt;
  Readable Code
&lt;/h3&gt;

&lt;p&gt;Using semantic elements also helps to make the code more readable. An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Home
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      About
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Contacts
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title of the blogpost&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Cat ipsum dolor sit amet, chase 
    ball of string or try to hold own 
    back foot to clean it
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;vs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/home"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/contacts"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Contacts&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Title of the blogpost&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Cat ipsum dolor sit amet, chase 
      ball of string or try to hold own 
      back foot to clean it
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Which one is easier to read and understand what's going on? I'd say the second.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summingup" class="anchor"&gt;
  &lt;/a&gt;
  Summing-up
&lt;/h2&gt;

&lt;p&gt;So, using semantic HTML is the thing to do for several reasons; It helps to build accessible sites, to get better SEO-scores, and make the code more readable. You can add semantics by using the native elements or with ARIA. If you use ARIA, be sure to use the correct aria-attributes and implement the functionality that is required (so, for example, don't communicate that "this is a button" with &lt;code&gt;role="button"&lt;/code&gt; but then neglect to create the keyboard shortcuts).&lt;/p&gt;

&lt;p&gt;I'm planning to write several blog posts that dive deeper into the design patterns and widgets in &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex"&gt;WAI-ARIA Authoring Practices&lt;/a&gt; and implementing them with React. So stay tuned if you want to know more!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>a11y</category>
      <category>react</category>
    </item>
    <item>
      <title>The Time I Wrote a White Noise Generator To Improve Loading Times</title>
      <author>Miki Stanger</author>
      <pubDate>Sat, 28 Nov 2020 13:10:00 +0000</pubDate>
      <link>https://dev.to/mimafogeus2/the-time-i-wrote-a-white-noise-generator-to-improve-loading-times-j0k</link>
      <guid>https://dev.to/mimafogeus2/the-time-i-wrote-a-white-noise-generator-to-improve-loading-times-j0k</guid>
      <description>&lt;p&gt;The year was 2011. I was a young, &lt;del&gt;aspiring&lt;/del&gt; software developer working in my first position in the industry.&lt;br&gt;
In our app we had a web view, which we could use to display dynamic content. As mobile connections were at 2011 speeds, we had a hard limit on the size of each web view page - including all assets and code. That was usually not a problem, until one day I had to implement a design where the background was a just-slightly-grainy grey.&lt;/p&gt;

&lt;p&gt;Grainy = white noise.&lt;/p&gt;

&lt;p&gt;That was a problem. To understand why, let's talk about image compression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-compression-in-a-nutshell" class="anchor"&gt;
  &lt;/a&gt;
  Image Compression in a Nutshell
&lt;/h2&gt;

&lt;p&gt;The images you see on the web are usually compressed; they can use many different methods in order to save space, but all of them can be categorised into two groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lose some of the data (This is called &lt;strong&gt;lossy compression&lt;/strong&gt;, and includes &lt;a href="https://en.wikipedia.org/wiki/JPEG#JPEG_compression"&gt;JPEG&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/GIF#Compression_example"&gt;GIF&lt;/a&gt;, among others)&lt;/li&gt;
&lt;li&gt;Represent the data in a way that takes less space (this is called &lt;em&gt;lossless&lt;/em&gt; compression, and you might best know it through the &lt;a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics#Compression"&gt;PNG&lt;/a&gt; format)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lossy compression of images is commonly visible. &lt;a href="https://commons.wikimedia.org/wiki/File:Asterisk_with_jpg-artefacts.png"&gt;JPEG artifacts&lt;/a&gt; are a known side effect of JPEG compression, and in GIFs you could recognise "rounding up" of colors, as it's limited to 256 colors. these methods could work fine for many things (e.g. photography in JPEG), but might be too much where small, clean lines/details are needed. Our white-noise-textured background fell in the second category.&lt;/p&gt;

&lt;p&gt;If not JPEG or GIF, I tried to save the background as PNG. The file was BIG.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-cant-losslessly-compress-white-noise" class="anchor"&gt;
  &lt;/a&gt;
  You Can't (Losslessly) Compress White Noise
&lt;/h2&gt;

&lt;p&gt;The main method I know for lossless compression involves finding repeating patterns, replacing them with a shorter representation and keeping the replacement in a dictionary. For example, in the string &lt;code&gt;aaabaaacaaad&lt;/code&gt;, we have the substring &lt;code&gt;aaa&lt;/code&gt; appearing a few times.&lt;br&gt;
We can shorten it by replacing it with a single character; let's call it 1. We now have a compressed string - &lt;code&gt;1b1c1d&lt;/code&gt;, and a dictionary - &lt;code&gt;1:aaa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When displaying the string, we use the dictionary to replace the shorter substring back to the original one, and get &lt;code&gt;aaabaaacaaad&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Different formats differ in the way they find what to replace, how many times they return the process, and what of many other optimisations they use. However, these basics are commonly used.&lt;/p&gt;

&lt;p&gt;Back to our noisy image - white noise is, by definition, random; it is a noise generated by receiving different values in a range with equal probability. Being random, the chance for repeating patterns is very low, and lossless compression in the way we described is not very effective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-if-we-wont-load-this-at-all" class="anchor"&gt;
  &lt;/a&gt;
  What If We Won't Load This At All?
&lt;/h2&gt;

&lt;p&gt;We'll still have noise, don't worry, but we'll have to deal with it differently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load the page, with a background color or image, but without the noise.&lt;/li&gt;
&lt;li&gt;Use a canvas to generate white noise&lt;/li&gt;
&lt;li&gt;Give the canvas a very low opacity&lt;/li&gt;
&lt;li&gt;Position it above the background&lt;/li&gt;
&lt;li&gt;Mission accomplished!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;White noise, being simply a uniform random grey value on each pixel, is very easy to generate. You iterate over the canvas' width and height, and color each pixel in a random shade of grey.&lt;/p&gt;

&lt;p&gt;It worked! The total page size was now small enough to fit our hard size limit. However, my state of the art iPhone 4, and all other mobile devices we've tested, took a noticeable time to run this code. This wasn't a good user experience, so we've had to find another solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tiles" class="anchor"&gt;
  &lt;/a&gt;
  Tiles
&lt;/h2&gt;

&lt;p&gt;The next plan was to use the existing generator to generate a much smaller area of white noise, and use it as a tile, a repeating background. As it has a low opacity and was used as a texture, people wouldn't easily see it repeats, and we'd have a nice, elegant background texture that is quick to generate.&lt;br&gt;
This also meant that I couldn't simply use the canvas above the background, as I'd then have to fill it. Instead, I used an invisible canvas to generate the white noise tile, then used that tile, in the format of a &lt;a href="https://css-tricks.com/data-uris/"&gt;data URI&lt;/a&gt;, as a background to a different element.&lt;br&gt;
Thankfully, canvases have long provided this functionality &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL"&gt;natively&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the process we ended up with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load the page, with a background color or image, but without the noise.&lt;/li&gt;
&lt;li&gt;Use an invisible canvas to generate a low-opacity white noise tile.&lt;/li&gt;
&lt;li&gt;Get the canvas image as a &lt;a href="https://css-tricks.com/data-uris/"&gt;data URI&lt;/a&gt;, and use that as a &lt;a href="https://caniuse.com/?search=multiple%20backgrounds"&gt;second &lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt; for the container element (together with the untextured image), or as a background-image over a color background.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the texture was very subtle, we could get away with texture repetition without it being noticed - as long as the tile wasn't very small. A few attempts to balance tile size (repetition vs. loading speed) and how visible the repetition was, and we've had a working feature :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-we-take-from-this" class="anchor"&gt;
  &lt;/a&gt;
  What Should We Take From This?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It's good to know how things work, even if you only work with them indirectly. By knowing some basics about image compression and white noise, for example, I could find the source of a non-trivial front-end problem, and solve it.&lt;/li&gt;
&lt;li&gt;Beware of focusing too much on the things you directly need for work. Learning a bit about things outside of your daily line of work, in addition to being interesting, could help you out later.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Making a Visual Novel with Unity (1/5) - Introduction to Ink</title>
      <author>Klaudia Bronowicka</author>
      <pubDate>Sat, 28 Nov 2020 12:02:08 +0000</pubDate>
      <link>https://dev.to/k_bronowicka/making-a-visual-novel-with-unity-1-5-introduction-to-ink-2i5b</link>
      <guid>https://dev.to/k_bronowicka/making-a-visual-novel-with-unity-1-5-introduction-to-ink-2i5b</guid>
      <description>&lt;p&gt;Ever tried to develop a game with a deep, branching story and choice based narrative? Ever felt like managing those branches and choices can become overwhelming very quickly? Well, so did I. That's why I created this tutorial series, to show you some great tools and techniques I found when working on my own game. By the end of it, you should have a solid skeleton of your visual novel and will be able to focus on what matters the most - the story.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ink" class="anchor"&gt;
  &lt;/a&gt;
  Ink
&lt;/h1&gt;

&lt;p&gt;If you like narrative games you might have heard of &lt;a href="https://www.inklestudios.com/"&gt;Inkle Studios&lt;/a&gt;. They released Sorcery, 80 days and, most recently, Pendragon. You haven’t? I recommend you check them out.&lt;/p&gt;

&lt;p&gt;What’s interesting is that their games are developed with &lt;a href="https://www.inklestudios.com/ink"&gt;ink&lt;/a&gt;, a scripting language those guys made to help them develop text games more easily. The best part is, it’s open source and free to use!&lt;/p&gt;

&lt;p&gt;Ink allows you to write stories with branching narrative, choices, and dialogues very easily. It comes with Inky - an editor, where you can write stories using Ink, debug them and run in the same window to test your choices etc. There is also Inklewriter, which offers a simple interface to let you create those stories without needing to get deep into the scripting magic. To be honest, I haven’t used it. If your only goal is to write and share some interactive fiction, you might want to give it a go. However, if you’re planning to build an actual story driven game with Unity, read on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#working-with-ink" class="anchor"&gt;
  &lt;/a&gt;
  Working with Ink
&lt;/h1&gt;

&lt;p&gt;Inkle offers an extremely comprehensive &lt;a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md"&gt;documentation&lt;/a&gt; with examples of how to use Ink and all of its features. There is also an example game where they show those features in action. However, if you’re like me, you may find it a little bit daunting to go through all that text and try to make sense of it. That’s why I prepared this small example to show you the basics. Truth to be told, when making my own game, these basics covered 90% of what I needed.&lt;/p&gt;

&lt;p&gt;If you want to follow along, &lt;a href="https://github.com/inkle/inky/releases"&gt;download Inky&lt;/a&gt;, and let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knots" class="anchor"&gt;
  &lt;/a&gt;
  Knots
&lt;/h2&gt;

&lt;p&gt;In Ink, the story is divided into knots. Think of them as scenes within your story. Each scene can have a dialogue, a paragraph of text, some choices, etc. It’s up to you how you want to structure your story. What I found works best is to break into another knot when we get to a choice, a scene change, or when there is a context change (like the player needing to perform an action). How do knots look, you ask? Very good question, you mark them like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;=== knot_title ===&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Here goes knot content&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Simple as that!&lt;/p&gt;

&lt;p&gt;Now, I said that a story is built from multiple knots so you will need a way to move between them. You do it like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-&amp;gt; knot_title&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is also used to tell ink, which knot is the entry point for your story, so make sure you add this line at the top of your script (with the correct title). This is very important, as ink wouldn’t know where to start otherwise!&lt;/p&gt;

&lt;p&gt;Now, let's see an example script. Please feel free to paste the following into your Inky to see it in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-&amp;gt; start_knot // this tells ink where to start the story

=== start_knot ===
Hello from the start knot!
Now we'll go to knot 2!
-&amp;gt; knot_2

=== knot_2 ===
Hello from knot 2!
-&amp;gt; END // this marks the end of the story
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You’ll see knot_2 ends with &lt;code&gt;-&amp;gt; END&lt;/code&gt; line. This is to mark where the story ends. You want to make sure all of your knots have an ending, whether it's moving into the next knot or ending the story (Inky will remind you of that too).&lt;/p&gt;

&lt;p&gt;Okay, so let’s get to that exciting bit now, the choices. In your game, you’re very likely to want to give a player a decision to make. Depending on what they choose, we want to branch off into a different knot. How is that done then?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*** Choice 1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[Continuation for choice 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*** Choice 2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[Continuation for choice 2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Each choice is marked with &lt;code&gt;***&lt;/code&gt; and what follows will only be visible after the player chooses that option. Let’s add that into our example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-&amp;gt; start_knot // this tells ink where to start the story

=== start_knot ===
Hello from the start knot!
Now we'll go to knot 2!

-&amp;gt; knot_2

=== knot_2 ===
Hello from knot 2!
Time for a personality test.
Red pill or blue pill?
*** Red pill
My god, how brave!
-&amp;gt; END // this marks the end of the story
*** Blue pill
Bold move, my friend
-&amp;gt; END // this marks the end of the story
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, you see each choice has its own continuation and we’ve performed our first branching! You can test your story in Inky, on the right hand side section of the window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1co_OFcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kilorfucqavzdjjgkcpq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1co_OFcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kilorfucqavzdjjgkcpq.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can imagine it can get quite difficult to read and (and write) if you add a lot of text for each choice. This is why, as mentioned before, I like to split into further knots after each decision to make it easier to handle. Let’s change our example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-&amp;gt; start_knot // this tells ink where to start the story

=== start_knot ===
Hello from the start knot!
Now we'll go to knot 2!
-&amp;gt; knot_2

=== knot_2 ===
Hello from knot 2!
Time for a personality test.
Red pill or blue pill?
*** Red pill
-&amp;gt; red_pill
*** Blue pill
-&amp;gt; blue_pill

=== red_pill ===
My god, how brave!
-&amp;gt; END

=== blue_pill
Bold move, my friend
-&amp;gt; END
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you see that each option has its own knot. From the player’s point of view, nothing has changed. However, doing things this way will prove very useful when localizing your game (you never know when you might need that!) and even just to make it more readable and easy to work with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choices-matter" class="anchor"&gt;
  &lt;/a&gt;
  Choices matter
&lt;/h2&gt;

&lt;p&gt;We’ve learned how to branch our story based on different choices, but in many cases, you’ll still want to share some same parts of the story afterward. Otherwise, it could get out of hand very quickly. If you want to do that, you just create a new knot and point into it from your choice specific knots.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-&amp;gt; start_knot

=== start_knot ===
Hello from the start knot!
Now we'll go to knot 2!
-&amp;gt; knot_2

=== knot_2 ===
Hello from knot 2!
Time for a personality test.
Red pill or blue pill?
*** Red pill
-&amp;gt; red_pill
*** Blue pill
-&amp;gt; blue_pill

=== red_pill ===
My god, how brave!
-&amp;gt; continue_conversation

=== blue_pill
Bold move, my friend
-&amp;gt; continue_conversation

=== continue_conversation
Alright. You have answered my question.
-&amp;gt; END
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Simple as that! These choices are meant to matter though. For example, what if we want to make a comment based on what the player has done? The most simple way is to check if we’ve visited a specific knot or not (hehe!). This is how to make that check:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ knot_name: [further story content] }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Do you want to check if we’ve NOT visited a knot?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ not knot_name: [further story content] }&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By using this pattern, you can check for many different conditions and define the flow of the story accordingly. Let’s see it in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-&amp;gt; start_knot

=== start_knot ===
Hello from the start knot!
Now we'll go to knot 2!
-&amp;gt; knot_2

=== knot_2 ===
Hello from knot 2!
Time for a personality test.
Red pill or blue pill?
*** Red pill
-&amp;gt; red_pill
*** Blue pill
-&amp;gt; blue_pill

=== red_pill ===
My god, how brave!
-&amp;gt; continue_conversation

=== blue_pill
Bold move, my friend
-&amp;gt; continue_conversation

=== continue_conversation
Alright. You have answered my question.
{ red_pill:
You chose the red pill. But I'm still not sure I can trust you
}
{ not red_pill: -&amp;gt; no_red_pill_comment}
-&amp;gt;END

=== no_red_pill_comment ===
You didn't choose the red pill. I'm not sure I can trust you.
-&amp;gt; END
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You'll notice I’ve used both approaches of typing the text directly after the check and of pointing to another knot. It's up to you how you want to structure your file and what's more convenient for you. Just bear in mind using knots can be a huge help later on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6JtthOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ou6lbnf58ehtbvrjxhq7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6JtthOP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ou6lbnf58ehtbvrjxhq7.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables-and-conditions" class="anchor"&gt;
  &lt;/a&gt;
  Variables and conditions
&lt;/h2&gt;

&lt;p&gt;If you’re familiar with programming, you might have thought the way to check if we’ve seen a knot is similar to ‘if-statements’. That’s exactly what it is and it can be used to check various different conditions! Before we do that though, let’s talk about variables.&lt;/p&gt;

&lt;p&gt;In your story, you might want to keep track of some things like player name, health points, relationship levels between people, experience points, etc. You can do that in ink by using variables. Some example ones can look like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;VAR PlayerName = “John”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;VAR ChoseRedPill = false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;VAR HealthPoints = 50&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we can have various types of variables. They can be numbers, text, or booleans (true/false values). After defining a variable, you can access it anywhere in your story, whether it's to display it, update it or use it to make another decision. Let’s add those variables into our game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Global variables
VAR PlayerName = "John"
VAR ChoseRedPill = false
VAR HealthPoints = 50

-&amp;gt; start_knot

=== start_knot ===
Hello, {PlayerName}! This is the starting knot! // display variable value
Now, we'll go to knot 2!
-&amp;gt; knot_2

=== knot_2 ===
Hello from knot 2!
Time for a personality test.
Red pill or blue pill?
*** Red pill
~ChoseRedPill = true // update variable value
-&amp;gt; red_pill
*** Blue pill
~HealthPoints -= 20 // update variable value
-&amp;gt; blue_pill

=== red_pill ===
My god, how brave!
-&amp;gt; continue_conversation

=== blue_pill
Bold move, my friend
-&amp;gt; continue_conversation

=== continue_conversation
{ HealthPoints &amp;lt; 50: You seem quite weak. I wonder why...}
Alright. You have answered my question.
{ ChoseRedPill:
You chose the red pill. But I'm still not sure I can trust you
}
{not red_pill: -&amp;gt; no_red_pill_comment}
-&amp;gt;END

=== no_red_pill_comment ===
You didn't choose the red pill. I'm not sure I can trust you.
-&amp;gt; END
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, to display a variable within the text, use &lt;code&gt;~VariableName&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To update a variable, use &lt;code&gt;~VariableName = [new value]&lt;/code&gt;. In case of numbers you can use &lt;code&gt;+=&lt;/code&gt; or &lt;code&gt;-=&lt;/code&gt; to increase or decrease the value by a certain amount (e.g. &lt;code&gt;~HealthPoints -= 30&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To check for a condition using variables, follow the same pattern as before, &lt;code&gt;{ condition : result }&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ ChoseRedPill:
You chose the red pill. But I'm still not sure I can trust you
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ HealthPoints &amp;lt; 50: You seem quite weak. I wonder why...}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will make the line appear only when HealthPoints value is lower than 50.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iM5F38P4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/scyb0ebunxiyd1yh6zvv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iM5F38P4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/scyb0ebunxiyd1yh6zvv.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;That’s it for the basics! There is a lot more to cover in regards to Ink, but I’m confident you can start writing great interactive stories or prototypes of your games with just the methods we’ve covered here. However, if you’re interested in learning more Ink magic, check out the &lt;a href="https://github.com/inkle/ink/blob/master/Documentation/WritingWithInk.md"&gt;official documentation&lt;/a&gt;. It’s amazing how much you can do with it!&lt;/p&gt;

&lt;p&gt;Next time, we’ll see how to connect Ink to our Unity project.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-in-this-series" class="anchor"&gt;
  &lt;/a&gt;
  More in this series
&lt;/h3&gt;

&lt;p&gt;Making a Visual Novel with Unity 1/5 - Introduction to ink&lt;br&gt;
Making a Visual Novel with Unity 2/5 - Integration with ink &lt;em&gt;(Coming out 1st Dec)&lt;/em&gt;&lt;br&gt;
Making a Visual Novel with Unity 3/5 - Characters and emotions &lt;em&gt;(Coming out 8th Dec)&lt;/em&gt;&lt;br&gt;
Making a Visual Novel with Unity 4/5 - State handling &lt;em&gt;(Coming out 15th Dec)&lt;/em&gt;&lt;br&gt;
Making a Visual Novel with Unity 5/5 - Localisation &lt;em&gt;(Coming out 22nd Dec)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>unity3d</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Node.js - The EventEmitter</title>
      <author>Matthew Eddy</author>
      <pubDate>Sat, 28 Nov 2020 09:39:16 +0000</pubDate>
      <link>https://dev.to/meddy672/node-js-the-eventemitter-102o</link>
      <guid>https://dev.to/meddy672/node-js-the-eventemitter-102o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mse6DFcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0w9ues4l9z6ssozw55u5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mse6DFcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0w9ues4l9z6ssozw55u5.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h4&gt;

&lt;p&gt;This article is &lt;strong&gt;Part 1&lt;/strong&gt; of &lt;a href=""&gt;Working With Node.js&lt;/a&gt; , a series of articles to help simplify learning Node.js. The topic which I will focus on here will be &lt;a href="https://nodejs.org/dist/latest-v15.x/docs/api/events.html#events_events"&gt;Node.js EventEmitter&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#objectives" class="anchor"&gt;
  &lt;/a&gt;
  Objectives
&lt;/h4&gt;

&lt;p&gt;In this article, we will learn what the Node.js EventEmitter is, and how we can use it. We will start with an introduction, then show some code examples. Finally, we'll learn some fundamental concepts about event emitters and use those concepts to build our own &lt;em&gt;SimpleEmitter&lt;/em&gt; with just plain JavaScript.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#section-1-about-to-the-event-emitter" class="anchor"&gt;
  &lt;/a&gt;
  Section 1 - About To The Event Emitter
&lt;/h4&gt;

&lt;p&gt;In its simplest form, the event emitter in Node.js is just a &lt;strong&gt;Callback&lt;/strong&gt;. To be precise its an array of callbacks. What do we use event emitters for? We actually use them quite often. HTTP &lt;em&gt;server&lt;/em&gt;, &lt;em&gt;response&lt;/em&gt; and &lt;em&gt;request&lt;/em&gt; objects all inherit the event emitter class. Event emitters allow us to incorporate an event driven design pattern on our server or application. This design pattern works very similar to a publisher and subscriber pattern, where the event emitter will publish new messages to all its listeners, and the listeners will respond and react to its caller.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#section-2-working-with-nodejs-event-emitter" class="anchor"&gt;
  &lt;/a&gt;
  Section 2 - Working With Node.js Event Emitter
&lt;/h4&gt;

&lt;p&gt;Creating an event emitter with Node.js is pretty straight forward. The event emitter is a class within the &lt;a href="https://nodejs.org/dist/latest-v15.x/docs/api/events.html#events_events"&gt;events&lt;/a&gt; module, therefore  it must be required.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#indexjs" class="anchor"&gt;
  &lt;/a&gt;
  index.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;simpleEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once we have the emitter imported, we can create a listener and publish messages to the listener. To add listeners we use the &lt;strong&gt;&lt;code&gt;on&lt;/code&gt;&lt;/strong&gt; method of the event emitter followed by the name of the event. You can name your events whatever like as it is only used to identify what listeners will execute when a message is published or sent. I have named listener &lt;strong&gt;my-simple-event&lt;/strong&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#indexjs" class="anchor"&gt;
  &lt;/a&gt;
  index.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;simpleEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Running Simple Event Callback...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see the &lt;strong&gt;&lt;code&gt;on&lt;/code&gt;&lt;/strong&gt; method takes the name of the event to listen to, and a function to run once we send a message to it. Now, we just need to publish a message to that event. We can do that with the &lt;strong&gt;&lt;code&gt;emit&lt;/code&gt;&lt;/strong&gt; method followed by the name of the event. Putting it all together&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#indexjs" class="anchor"&gt;
  &lt;/a&gt;
  index.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;simpleEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Running Simple Event Callback...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Running Simple Event Callback...
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once a message is published with the &lt;strong&gt;&lt;code&gt;emit&lt;/code&gt;&lt;/strong&gt; method, the listener will run the callback function. In its simplest form, this is the Node.js event emitter in action. You can create as many events as you like for as many listeners as you need. You also can supply arguments to the callback function of the listener by passing additional arguments to the &lt;strong&gt;&lt;code&gt;emit&lt;/code&gt;&lt;/strong&gt; method. Lets do that now. I'll create another listener called &lt;strong&gt;another-simple-event&lt;/strong&gt; and I'll pass an object to it using the &lt;strong&gt;&lt;code&gt;emit&lt;/code&gt;&lt;/strong&gt; method.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#indexjs" class="anchor"&gt;
  &lt;/a&gt;
  index.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;simpleEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Running Simple Event Callback...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;another-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doing work on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;another-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Running Simple Event Callback...
 Doing work on  { id: 1, name: 'John Doe' } 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The event emitter class within Node.js has a ton of built-in methods that you can use right out of the box. Below are some commonly used methods.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.dev/learn/the-nodejs-events-module"&gt;on&lt;/a&gt; - will register a listener for that event.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.dev/learn/the-nodejs-events-module"&gt;emit&lt;/a&gt; - will publish or send new messages to it's listeners.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.dev/learn/the-nodejs-events-module"&gt;once&lt;/a&gt; - will run only once and discontinue listening to further messages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.dev/learn/the-nodejs-events-module"&gt;off&lt;/a&gt; - removes all listeners from an event.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, no code is complete without some error handling. If an error occurs while an event is being published then the process will &lt;strong&gt;crash&lt;/strong&gt;. To avoid this you can register an &lt;strong&gt;error&lt;/strong&gt; listener to handle errors. Lets do that now. I'll add a third listener called error which will be used to handle errors for the &lt;code&gt;simpleEmitter&lt;/code&gt;. I'll emit the error before I publish a message to the &lt;i&gt;another-simple-event&lt;/i&gt; listener.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#indexjs" class="anchor"&gt;
  &lt;/a&gt;
  index.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;simpleEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Running Simple Event Callback...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;another-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doing work on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I received the error &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oh oh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;simpleEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;another-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Running Simple Event Callback...
I received the error  oh oh
Doing work on  { id: 1, name: 'John Doe' }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you remove the &lt;strong&gt;error listener&lt;/strong&gt; and run the program again the process will crash and &lt;em&gt;another-simple-event&lt;/em&gt; will not publish a message to its listener.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#section-3-building-an-event-emitter-with-just-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Section 3 - Building An Event Emitter With Just JavaScript
&lt;/h4&gt;

&lt;p&gt;As I stated before, the event emitter is just an &lt;strong&gt;array of callbacks&lt;/strong&gt;. Let me show you what I mean with the code snippet below.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#code-snippet" class="anchor"&gt;
  &lt;/a&gt;
  Code snippet
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mySimpleEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;mySimpleEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the code snippet above, I created an array that contains three functions where each function will do something different. Next, I loop through the array calling each function and for the second index of the array, I pass in a user object. If you run the code above you will receive the output below.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello
{ id: 1, name: 'John Doe' }
World
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;From the code snippet above, we can derive some simple fundamental concepts about the event emitter and thus event driven development. If we have an application that is defined by a set of use cases or events, then we can design our application to work based on those events. Now, in regards to the &lt;code&gt;mySimpleEvent&lt;/code&gt; from the code snippet above, each function represents a listener that is attached to &lt;code&gt;mySimpleEvent&lt;/code&gt;. From there, all we have to do is loop through &lt;code&gt;mySimpleEvent&lt;/code&gt; and call each listener. With this knowledge we can build are own event emitter class, lets do that now. I'll create another file called &lt;em&gt;SimpleEmitter.js&lt;/em&gt;. This class will have two methods &lt;strong&gt;&lt;code&gt;on&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;emit&lt;/code&gt;&lt;/strong&gt; just like the those of Node.js's event emitter class.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#simpleemitterjs" class="anchor"&gt;
  &lt;/a&gt;
  SimpleEmitter.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SimpleEmitter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Lets take a moment to understand the SimpleEmitter class. Each time we call the &lt;strong&gt;&lt;code&gt;on&lt;/code&gt;&lt;/strong&gt; method we check to see if the event name is stored within our event object. If the event name is not found, we create a &lt;strong&gt;key&lt;/strong&gt; for it to reference an array of listeners. Once the &lt;strong&gt;&lt;code&gt;emit&lt;/code&gt;&lt;/strong&gt; method is called, it will check for the event name and if not found the method will end there. If it does find the event name then it will loop through the array and call each listener. Now we just need to use the SimpleEmitter class as we did before. Putting it all together&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#simpleemitterjs" class="anchor"&gt;
  &lt;/a&gt;
  SimpleEmitter.js
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SimpleEmitter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jon Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Running Simple Event Callback&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;another-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doing work on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I received the error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;another-simple-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;myEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oh oh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  Output
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Running Simple Event Callback
I received the error oh oh
Doing work on { id: 1, name: 'John Doe' }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The EventEmitter class within Node.js covers more complex use cases within its application code. However, the fundamentals are the same. Thank you for taking time to read this article and if you found it helpful please leave a rating. If you have a question please post it in the discussion below.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>eventdriven</category>
    </item>
    <item>
      <title>👨‍💻 Basics of Views and Routing in Django ( Part 8 ) - Django For Beginners</title>
      <author>KetanIP</author>
      <pubDate>Sat, 28 Nov 2020 08:43:43 +0000</pubDate>
      <link>https://dev.to/ketanip/basics-of-views-and-routing-in-django-part-8-django-for-beginners-842</link>
      <guid>https://dev.to/ketanip/basics-of-views-and-routing-in-django-part-8-django-for-beginners-842</guid>
      <description>&lt;p&gt;This is part of the series &lt;a href="https://www.ketaniralepatil.com/series/django-for-beginners/"&gt;Django For Beginners&lt;/a&gt; we are going to see about apps in app and we will see about models in django in this part.&lt;/p&gt;

&lt;p&gt;You can this read complete post &lt;a href="https://www.ketaniralepatil.com/python/django/urls-and-views-in-django/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we are going to understand the idea of views and routing from scratch and see some types of responses and then we will learn about basic routing and to separate &lt;code&gt;urls.py&lt;/code&gt; in separate files files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-views-" class="anchor"&gt;
  &lt;/a&gt;
  what are views ?
&lt;/h2&gt;

&lt;p&gt;Views are like middle man between request and response on your server they contain all you logic for a route, we will talk about route later in this post. They essentially process get the data needed for the request and process it and the return it as a response. This response can be of a variety of types, &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; , &lt;code&gt;json&lt;/code&gt; , &lt;code&gt;xml&lt;/code&gt; to name a few. &lt;/p&gt;

&lt;p&gt;Now let's see a example of a view,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World 😊."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I tried to make is as basic as possible. What is happening above is when we receive a request and we call this &lt;code&gt;view function&lt;/code&gt; it will return an simple text response, that is &lt;code&gt;Hello World 😊.&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;You may have noticed about &lt;code&gt;request&lt;/code&gt; argument in the &lt;code&gt;home_response&lt;/code&gt; view above it is compulsory argument it is a &lt;code&gt;dictionary&lt;/code&gt; object and contains lot, by lot, I mean really a lot of information about the request of which most of the times you are not going to use directly.  With &lt;code&gt;request&lt;/code&gt; object we can access headers, user agent, ip, cookies to name a few.&lt;/p&gt;

&lt;p&gt;In above example we returned &lt;code&gt;text&lt;/code&gt; response but it is not what happens in real world, right 🤔 ? In real world scenarios we need to either prove a html response or a &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;xml&lt;/code&gt;  as a response.  So let us see how to pass &lt;code&gt;html&lt;/code&gt; as response for now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;h1&amp;gt;Hello World 😊.&amp;lt;/h1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#returning-html-pages-in-response" class="anchor"&gt;
  &lt;/a&gt;
  Returning HTML Pages in Response
&lt;/h3&gt;

&lt;p&gt;I am lazy so I copied above code and just added &lt;code&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/code&gt; tags around our plane text response and wallah, it is now a &lt;code&gt;html&lt;/code&gt; response but don't you think it would be bad for long  html responses with which we have to deal most of the times, so for that we keep &lt;code&gt;html&lt;/code&gt; away from &lt;code&gt;views&lt;/code&gt; all together so to keep code clean and follow the &lt;code&gt;DRY&lt;/code&gt; principle .  &lt;/p&gt;

&lt;p&gt;Sorry to interrupt you but I want to tell you one thing that I have started a small blog you may continue reading it &lt;a href="https://www.ketaniralepatil.com/python/django/urls-and-views-in-django/"&gt;here&lt;/a&gt; it will help me a lot.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
