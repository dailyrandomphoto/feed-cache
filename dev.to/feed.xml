<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>useReducer instead of useState while calling APIs!</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 27 Apr 2021 11:04:28 +0000</pubDate>
      <link>https://dev.to/ms_yogii/usereducer-instead-of-usestate-while-calling-apis-3e1l</link>
      <guid>https://dev.to/ms_yogii/usereducer-instead-of-usestate-while-calling-apis-3e1l</guid>
      <description>&lt;p&gt;Hello folks! &lt;/p&gt;

&lt;p&gt;It’s been a while since React has introduced Hooks and we all fell in love with it’s patterns and ease of use. Though this is the case, many of us do not leverage all the features, hooks provide and &lt;code&gt;useReducer&lt;/code&gt; is one of them! Because useState is the hook which we learn first, we do not make much use of &lt;code&gt;useReducer&lt;/code&gt; hook. So in this article, I will be focussing on &lt;code&gt;useReducer&lt;/code&gt; and will walk you through the best use-cases to implement it. &lt;/p&gt;

&lt;p&gt;So, let’s dive in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-usereducer"&gt;
  &lt;/a&gt;
  What is useReducer?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;useReducer&lt;/strong&gt; is another hook used for the modern state management in React. This concept was introduced in Redux first and then it is adapted by React as well. Typically, reducer is a function which accepts two arguments - &lt;strong&gt;state&lt;/strong&gt; and &lt;strong&gt;action&lt;/strong&gt;. Based on the action provided, reducer will perform some operations on a state and returns a new updated state. In context of React, &lt;code&gt;useReducer&lt;/code&gt; also performs similar state management. You can read more about useReducer in detail in the &lt;a href="https://reactjs.org/docs/hooks-reference.html#usereducer"&gt;react documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it-for-api-calls"&gt;
  &lt;/a&gt;
  How to use it for API calls?
&lt;/h2&gt;

&lt;p&gt;You must have got the basic idea of useReducer hook till now. Let’s just dive straight into the code and understand how using useReducer will make our code more efficient over useState. &lt;/p&gt;

&lt;p&gt;Let’s first start with an API call using simple useState. It will look something like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user component using useState &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserdetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;setUserdetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;))}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a very basic API call. In real life scenarios, we have to manage more states than this. But for starters, let’s assume we have 3 states to manage and those are dependent on each other. When our application gets more complex, at times, we end up defining more than 7-8 states. In such scenarios, if we are using only useState, then it becomes very tedious to keep track of all the states and to update them synchronously. &lt;/p&gt;

&lt;p&gt;To solve all these problems, a better approach is using useReducer. Let’s see the same API call using useReducer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// user component using useReducer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;CALL_API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;call-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userDetailsReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CALL_API&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userDetailsReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CALL_API&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ACTIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUCCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;getUsers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;))}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are using a dispatch function to call our reducer. Inside the reducer, the switch case is defined to handle the actions provided by the dispatch function. The actions object declared above will make sure that every time we pass predefined action to the dispatch function. You can skip that step and use strings directly. Inside each switch case, we are performing operations on the state given and returning a new state.&lt;/p&gt;

&lt;p&gt;I know your first reaction seeing the code would be, this looks lengthy! But trust me, it makes more sense. The useReducer hook accepts two parameters, a reducer function and initial state. Reducer function will perform all the state updations on the state provided. But what are the benefits of doing this? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;State will update in a single function, based on the action and it will be dependent on previous.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we pass action to the reducer, we tell it what operation to perform on a previous state. This way, we can make sure all the states are in sync with that operation and there is a very less chance of missing any updates on a state. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easy to manage complex states&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As one function is updating states, it is easier to manage complex states containing arrays and objects. We can useReducer effectively to handle updates on objects and arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Easy to test and predictable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reducers are pure functions and perform operations based on predefined actions. Hence, they do not have any side effects and will return the same values when given the same arguments. This makes them predictable and easy to test when implemented. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-choose-usereducer-over-usestate"&gt;
  &lt;/a&gt;
  When to choose useReducer over useState?
&lt;/h2&gt;

&lt;p&gt;useReducers are good to choose over useState but not every time. If your use case is simple, they will add unnecessary complexity to your code. I use this couple of rules to choose useReducer over useState -&lt;br&gt;
   &lt;strong&gt;1. If there are many states dependent on each other.&lt;/strong&gt;&lt;br&gt;
   &lt;strong&gt;2. If the state is a complex object.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope these rules will help you as well to decide which state management hook to go for. If you have any other factor to choose between these two, let me know in the comments. &lt;/p&gt;

&lt;p&gt;Thank you for reading this article! Hope it will help you in some way.&lt;br&gt;
Keep learning 🙌&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Enter Full-Screen Mode with JavaScript - Fullscreen
</title>
      <author>ali-dev-hash</author>
      <pubDate>Tue, 27 Apr 2021 10:49:42 +0000</pubDate>
      <link>https://dev.to/alidevhash/enter-full-screen-mode-with-javascript-fullscreen-55l2</link>
      <guid>https://dev.to/alidevhash/enter-full-screen-mode-with-javascript-fullscreen-55l2</guid>
      <description>&lt;p&gt;Enter Full-Screen Mode with JavaScript - Fullscreen&lt;/p&gt;

&lt;p&gt;demo == &amp;gt; &lt;a href="https://codepen.io/Bilal1909/full/XWpOQEO"&gt;https://codepen.io/Bilal1909/full/XWpOQEO&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;How to use JavaScript to view an element in fullscreen mode&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNLSQrNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/2jtK7XxR/screenshot-codepen-io-2021-04-27-15-43-26-276.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNLSQrNJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/2jtK7XxR/screenshot-codepen-io-2021-04-27-15-43-26-276.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
To open an element in fullscreen, we use the element.requestFullscreen() method:&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;Fullscreen Document&lt;/h1&gt;

&lt;p&gt;&lt;i&gt;To open the whole page in fullscreen, use the document.documentElement instead of document.getElementById("element"). In this example, we also use a close function to close the fullscreen:&lt;/i&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>uiweekly</category>
    </item>
    <item>
      <title>💥 ES6 Symbol 101 #1💥 </title>
      <author>michalpzarzycki</author>
      <pubDate>Tue, 27 Apr 2021 10:42:42 +0000</pubDate>
      <link>https://dev.to/michalpzarzycki/es6-symbol-101-1-2alb</link>
      <guid>https://dev.to/michalpzarzycki/es6-symbol-101-1-2alb</guid>
      <description>&lt;p&gt;Symbols are one of the new features of ES6. Originally they were intended to help create private components of the object, but the concept was abandoned and today they are mainly used as non-text object property names, which, in combination with their other features, allows us to create a values which guaranteed to be unique.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-symbol"&gt;
  &lt;/a&gt;
  Create a Symbol
&lt;/h1&gt;

&lt;p&gt;As Symbol is primitive value, the way it is created can be a bit confusing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//create a Symbol and empty object&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFirstSymbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="c1"&gt;//add a new property&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myFirstSymbol&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;myFirstName&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;//"Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Symbol, unlike other primitive values, has no literal form like:&lt;br&gt;
&lt;code&gt;let string = "Hi!"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;let number = 42&lt;/code&gt;&lt;br&gt;
&lt;code&gt;let bool = false&lt;/code&gt;&lt;br&gt;
Which may be a certain difficulty in working with it. Fortunately, the description of the symbol and the (explicit or implicit) method called &lt;code&gt;toString()&lt;/code&gt; come in handy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mySecondSymbol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey, I'm second!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//console.log calls `toString()` method implicitly&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mySecondSymbol&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//"Symbol("Hey, I'm second!")"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is worth noting that the symbol description itself is completely optional, it cannot be used to access the Symbol, and it does not affect the Symbol itself in any other way. Its only purpose is to help us work with the code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#share-a-symbol"&gt;
  &lt;/a&gt;
  Share a Symbol
&lt;/h1&gt;

&lt;p&gt;Speaking of working with code, what if I want to use the same Symbol in many different parts of my application? Maybe I should create my own separate file for such global Symbols? An interesting option, but completely unnecessary. The ES6 specification offers us the possibility of storing Symbols in the Global Symbol Register(GSR), which, due to being global, is open to the public.&lt;/p&gt;

&lt;p&gt;To create / get / work with shared symbols, you only need to know two methods: &lt;code&gt;Symbol.for()&lt;/code&gt;, &lt;code&gt;Symbol.keyFor()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Symbol.for()&lt;/code&gt; first searches the GSR to see if there is a Symbol with the given key ("userID"). If so, this method will return an existing Symbol, if not, the Symbol will be created and registered in GRS, and then returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qwerty123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userId_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userId_2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;//qwerty123 &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userId_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Symbol.keyFor()&lt;/code&gt; method is used to retrieve a Symbol key that already exists in the GRS. If we use it for a Symbol that is not shared, this method will return undefined&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;symbol_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;the best Symbol&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;symbol_1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;//'the best Symbol'&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;symbol_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;the best Symbol&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;symbol_2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;//'the best Symbol'&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;symbol_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;the best Symbol&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;symbol_3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#where-is-my-property"&gt;
  &lt;/a&gt;
  Where is my property?
&lt;/h1&gt;

&lt;p&gt;In order to maintain functionality with ES5, some methods may not "see" Symbols. It is worth remembering about it when we start using them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;symbolProp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;symbolProp&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I AM SYMBOL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Strings are cool&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;69&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//no Symbol 😞&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ["prop2", "prop3", "prop4"]&lt;/span&gt;

&lt;span class="c1"&gt;//still no Symbol 😞&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//["prop2", "prop3", "prop4"]&lt;/span&gt;

&lt;span class="c1"&gt;//..again 😞😞&lt;/span&gt;
&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "{\"prop2\":\"Strings are cool\",\"prop3\":false,\"prop4\":69}"&lt;/span&gt;

&lt;span class="c1"&gt;//😞😞😞&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="c1"&gt;// Strings are cool&lt;/span&gt;
 &lt;span class="c1"&gt;// false&lt;/span&gt;
 &lt;span class="c1"&gt;// 69&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the ES6 specification, the &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt; method was added to return an array of all symbol properties found directly upon a given object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//😍😍😍&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertySymbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [Symbol(prop1)]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Working with symbols can be tricky, but if you need unique values in your code, they're very helpful. I hope I was able to encourage you to use them.&lt;/p&gt;

&lt;p&gt;Thanks for reading 😊 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Get to MDN faster: mdn.io</title>
      <author>Siddharth</author>
      <pubDate>Tue, 27 Apr 2021 10:14:19 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/get-to-mdn-faster-mdn-io-4ep0</link>
      <guid>https://dev.to/siddharthshyniben/get-to-mdn-faster-mdn-io-4ep0</guid>
      <description>&lt;p&gt;Today I discovered this gem of a site: &lt;a href="//mdn.io"&gt;mdn.io&lt;/a&gt;, &lt;a href="https://github.com/lazd/mdn.io#user-content-deployment:~:text=The%20%22I'm%20feeling%20lucky%22%20URL%20shortener,-mdn.io"&gt;The "I'm feeling lucky" URL Shortener&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Mozilla Developer Network is an awesome JavaScript resource. When looking for JavaScript references on something like Function.apply, you might use a search engine with "apply site:developer.mozilla.org" and click the first result.&lt;/p&gt;

&lt;p&gt;mdn.io does that for you.&lt;/p&gt;

&lt;p&gt;You can try out a bunch of urls. Try visiting&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//mdn.io/bind"&gt;mdn.io/bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//mdn.io/closure"&gt;mdn.io/closure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//mdn.io/cross%20origin%20sharing"&gt;mdn.io/cross origin sharing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On it's &lt;a href="https://github.com/lazd/mdn.io"&gt;repo&lt;/a&gt;, It says that mdn.io uses DuckDuckGo's Bang! functionality to redirect you to the first search result.&lt;/p&gt;

&lt;p&gt;It's really nice someone has made this.&lt;/p&gt;

</description>
      <category>todayilearned</category>
    </item>
    <item>
      <title>SQL &amp; database monthly wrap up - April 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Tue, 27 Apr 2021 09:59:50 +0000</pubDate>
      <link>https://dev.to/helenanders26/sql-database-monthly-wrap-up-april-2021-2288</link>
      <guid>https://dev.to/helenanders26/sql-database-monthly-wrap-up-april-2021-2288</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of your friendly mods looking after the #sql, #postgres, #mysql, and #database tags. &lt;/p&gt;

&lt;p&gt;At the end of each month, I'll be showcasing some of the great posts, projects, and insights from the data community. &lt;/p&gt;




&lt;p&gt;To get us started we have &lt;a href="https://dev.to/seattledataguy"&gt;SeattleDataGuy&lt;/a&gt; with a post and a tool to assist you as a new data engineer. This pyramid can be thought of as a hierarchy of skill set needs to build a solid foundation as you move onto more specific skills.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/seattledataguy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67hnf1V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gLF4qTmT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/177966/0f8eb580-5b46-4ba7-8390-18d85b04c7be.jpg" alt="seattledataguy image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/seattledataguy/what-skills-do-data-engineers-need-the-data-engineering-skill-pyramid-8hk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What Skills Do Data Engineers Need - The Data Engineering Skill Pyramid&lt;/h2&gt;
      &lt;h3&gt;SeattleDataGuy ・ Apr 16 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#analytics&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/nehalahmadkhan"&gt;Nehal&lt;/a&gt; with a project showing how to model many-to-many relationships where categories can have multiple products, and products can be in multiple categories. Check it out to see if it could be useful for a future project.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/nehalahmadkhan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fhcWGDcW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SltFeIGc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/587755/dbf4dd6f-adbe-470e-a8ce-7392a1c7a601.png" alt="nehalahmadkhan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nehalahmadkhan/many-to-many-relationship-in-mongodb-nodejs-express-mongoose-4djm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Many-to-Many relationship in MongoDB . Nodejs | Express | Mongoose&lt;/h2&gt;
      &lt;h3&gt;Nehal Ahmad ・ Apr  3 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mongodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://dev.to/thepolyglotprogrammer"&gt;João Henrique&lt;/a&gt; then shares part three in the "Writing a SQLite clone from scratch in Rust" series. In this post, you'll define the limitations of some data structures, break down the problem into smaller pieces, and learn how to deal with tables and indexes.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/thepolyglotprogrammer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWkY7Ojz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2lfRTKeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/188861/6e9a0d7b-d05d-4845-b440-1dc579e76e28.JPG" alt="thepolyglotprogrammer image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thepolyglotprogrammer/what-would-sqlite-look-like-if-written-in-rust-part-3-ool" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What would SQLite look like if written in Rust? — Part 3&lt;/h2&gt;
      &lt;h3&gt;João Henrique Machado Silva ・ Apr  7 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#rust&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Moving on to &lt;a href="https://dev.to/ineeader"&gt;Inee&lt;/a&gt; and a post with some learnings on LIKE. Check it out for tips on how to get started with wildcards and some great examples.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/ineeader" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asAuXB1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TfMchJZt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/493736/0698eadb-2da7-4548-a80f-1473e5ec6e02.jpeg" alt="ineeader image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ineeader/like-so-confused-j1j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Like, so confused...&lt;/h2&gt;
      &lt;h3&gt;Inee Ader 🐌 ・ Apr  5 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#operator&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#like&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqlite&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/cassidycodes"&gt;Cassidy&lt;/a&gt; and the story of performance challenges, the EXPLAIN plan, slow indexes, and some experimentation. Give it a read for a great data story.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/cassidycodes" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lz7L0drF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--62pMcmkY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/293850/db5bf988-b467-4070-8f68-dbbda167446b.jpeg" alt="cassidycodes image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/cassidycodes/one-weird-trick-for-speeding-up-order-by-that-you-probably-shouldn-t-use-4pk5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;One WEIRD Trick for Speeding Up ORDER BY That You Probably Shouldn't Use&lt;/h2&gt;
      &lt;h3&gt;Cassidy K (she/her) ・ Apr  9 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#postgres&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#performance&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Our last post is from Joe and the &lt;a href="https://dev.to/onesignal"&gt;OneSignal&lt;/a&gt; team. This post is packed full of lessons learned from five years of scaling PostgreSQL. In this article, you'll read about the challenges the team has dealt with and the solutions they've put in place by figuring it out the hard way. Read the whole post from the top, or jump in at any point to learn something new.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/jwilm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i65OUmsk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bE8F7tR0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/617459/d134cc26-ac70-4fb0-9066-d2202c5807f2.jpeg" alt="jwilm image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/onesignal/lessons-learned-from-5-years-of-scaling-postgresql-4fed" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Lessons Learned From 5 Years of Scaling PostgreSQL&lt;/h2&gt;
      &lt;h3&gt;Joe Wilm ・ Apr 19 ・ 18 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#engineering&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#postgres&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;








&lt;p&gt;That's all for this month! For more from the data community check out the #sql, #postgres, #mysql, and #database tags, and follow &lt;a href="https://twitter.com/TheDatabaseDev"&gt;@TheDatabaseDev on Twitter&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJnjqEMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6m19oidtq78smktb9haq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJnjqEMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6m19oidtq78smktb9haq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>sql</category>
      <category>database</category>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Chrome Extensions Every Developer should be Using</title>
      <author>lary mak</author>
      <pubDate>Tue, 27 Apr 2021 09:52:15 +0000</pubDate>
      <link>https://dev.to/larymak/chrome-extensions-every-developer-should-be-using-38e0</link>
      <guid>https://dev.to/larymak/chrome-extensions-every-developer-should-be-using-38e0</guid>
      <description>&lt;p&gt;Back in the days when I began learning to code I happened to have noticed a lot of staff from the tutorials I used to follow:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;most sites were in dark mode,
&lt;/li&gt;
&lt;li&gt;they easily got website's colors&lt;/li&gt;
&lt;li&gt;page colors
Am pretty sure you have encountered similar events and perhaps wondered how do they easily get this corresponding recourses they need?
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Out of this curiosity I had to do some digging to find out what extensions they are using, and along the process I found pretty cool and amazing extensions and I will share them with you.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cool-chrome-extensions-for-every-developer"&gt;
  &lt;/a&gt;
  COOL CHROME EXTENSIONS FOR EVERY DEVELOPER
&lt;/h4&gt;

&lt;p&gt;First and foremost am sure almost every developer lives in the 'Dark mode' misconception. Of which is an amazing view to work with, So what are some themes to enable this:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/dark-mode-for-chrome/cjjfaljaaljdjknnmhoajnmgbdcchmpp"&gt;Dark Mode for Chrome&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J97OFDSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98unhyz52dqopolupt6c.jpg" alt="Alt Text"&gt;
With over 500k users this extension is able to turn on dark mode to all webpages. All you need to do is press the extension icon to enable/disable dark mode.
Other extensions with this capability:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/night-eye-dark-mode-on-an/alncdjedloppbablonallfbkeiknmkdi"&gt;Night Eye&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/dark-theme-for-chrome/pjbgfifennfhnbkhoidkdchbflppjncb"&gt;Dark Theme for Chrome&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/night-shift-redux/ocginjipilabheemhfbedijlhajbcabh"&gt;Night Shift Redux&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp"&gt;ColorZilla&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Nsj8y_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp6mmzbe10g9qr0ydu4a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Nsj8y_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hp6mmzbe10g9qr0ydu4a.jpg" alt="Alt Text"&gt;&lt;/a&gt; &lt;br&gt;
This is a very useful tool more so for web developers and designers. Looking for a specific color code is not easy but with this tool it allows you to select a color on a page, and it gives you the color codes immediately.&lt;br&gt;&lt;br&gt;
Its features include:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Eyedropper - get the color of any pixel on the page
* Advanced Color Picker (similar to Photoshop's)
* Ultimate CSS Gradient Generator
* Webpage Color Analyzer - get color palette of any site
* Palette Viewer with 7 pre-installed palettes
* Color History of recently picked colors    
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"&gt;React Developer Tools&lt;/a&gt;&lt;br&gt;&lt;br&gt;
What this tool does once its installed, whenever you visit a site that is build using the React technology it will show you by the extension icon 'glowing'. It also allows you to inspect react components on the site using Chrome developer tools.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip"&gt;WhatRuns&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qpKf_Uu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdggx5eb64whwou9g2he.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpKf_Uu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdggx5eb64whwou9g2he.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
This extension is almost similar to with the React one, the only difference is that this does not only look for react but the entire technology that has been used to build a site.&lt;br&gt;
It gives you site details including: fonts used, framework, programming language used, if the site is running an SEO and Analytics plugin etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/selectorshub/ndgimibanhlabgdgjcpbbndiehljcpfh"&gt;SelectorsHub&lt;/a&gt; &lt;br&gt;
What this extension does, although it's not largely none it's useful when you need to find Xpath and cssSelectors of a site mostly needed when doing web scrapping  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/responsive-web-design-tes/enhcpefphhaiikpobimgcakinhabgiib"&gt;Responsive Web Design Tester&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8yQS1Wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5abt1g1c89qgxicz5tj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8yQS1Wp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5abt1g1c89qgxicz5tj.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Responsive Web Design Tester is a quick and easy way to test your responsive website.&lt;br&gt;
Test your mobile site on different devices.&lt;br&gt;
This extension reflects both the size and the browser of the mobile device.&lt;br&gt;
Quickly preview your websites design at the dimensions they will be seen on popular devices. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh"&gt;JSON Viewer&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dGusKfgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eixynwiil9w67dw6dwj1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGusKfgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eixynwiil9w67dw6dwj1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
It is a Chrome extension for printing JSON and JSONP.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/css-peeper/mbnbehikldjhnfehhnaidhjhoofhpehk"&gt;CSS PEEPER&lt;/a&gt; &lt;br&gt;
What this extension does is that it allows you to extract CSS styles and build beautiful style guides. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/gofullpage-full-page-scre/fdpohaocaechififmbbbbbknoalclacl"&gt;GoFullPage&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AGl_OCuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgk209fkk96fxo4pgmbt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGl_OCuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jgk209fkk96fxo4pgmbt.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Capture a screenshot of your current page in entirety and reliably—without requesting any extra permissions!  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Above are some extension I often use, and I will agree they are really amazing.&lt;br&gt;&lt;br&gt;
Which are you going to try out, or which are you already using ?&lt;/p&gt;

&lt;p&gt;Share other extensions down below, and let's find out how cool they are. &lt;br&gt;
If You have read this far I really appreciate, Help me to grow my community:&lt;/p&gt;

&lt;p&gt;Also check out my other article on: &lt;br&gt;
&lt;a href="https://dev.to/larymak/must-have-themes-and-extensions-for-every-developers-visual-studio-code-setup-2igi"&gt;Must have Themes and Extensions for every Developers - Visual studio code setup&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/larymak/7-best-visual-studio-code-extensions-every-web-developer-should-have-2m1c"&gt;7 Best Visual Studio Code Extensions Every Web Developer Should Have.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Connect With me at &lt;a href="https://twitter.com/larymak1"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/nextgencoders/"&gt;Insta&lt;/a&gt; | &lt;a href="https://www.youtube.com/channel/UCrT1ARRZfLOuf6nc_97eXEg"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/hillary-nyakundi-3a64b11ab/"&gt;LinkedIn&lt;/a&gt;  | &lt;a href="https://github.com/larymak"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Ultimate Tips for Choosing Top Mobile App Development Agency</title>
      <author>Best Digital Trendz</author>
      <pubDate>Tue, 27 Apr 2021 09:50:29 +0000</pubDate>
      <link>https://dev.to/best_digital_trendz/ultimate-tips-for-choosing-top-mobile-app-development-agency-1ndk</link>
      <guid>https://dev.to/best_digital_trendz/ultimate-tips-for-choosing-top-mobile-app-development-agency-1ndk</guid>
      <description>&lt;p&gt;It is difficult to choose the right mobile app development agency. Because there are so many companies in the market. The best web and mobile development company provides essential services for building mobile app development intended for mobile devices. As such, working with the right development company is vital to the success of every client project.&lt;/p&gt;

&lt;p&gt;This is a very typical Question to choose the right development agency for your dream project. We describe some Top 5 points for choosing a Top Mobile App Development Agency for your Startup mobile app Project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Choose an Experience Development Agency&lt;/strong&gt;&lt;br&gt;
Maximum clients search for the best experience and professional agencies before gives any project to the agency. Most of the time, clients have high expectations of the project development. For full filled with client need, Agencies and companies have own experienced and professional of their development.&lt;/p&gt;

&lt;p&gt;Read More- &lt;a href="https://bestdigitaltrendz.com/2021/03/15/most-important-reasons-why-choose-magento-for-ecommerce-website-development/"&gt;Why Choose Magento for e-Commerce Website Development&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Agency Portfolio&lt;/strong&gt;&lt;br&gt;
An expert and knowledgeable programmer and developers must possess perfect UI/UX skills. While closely looking at their company testimonials and portfolio. This portfolio shows the company's work with clients and others customers. UI creates a major role in any application development and increases the rate of user interaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. On-Time Project Delivery&lt;/strong&gt;&lt;br&gt;
Project timeline is the most important part of any project development process. Because clients required on-time delivery for their creative development project. You can choose small and large agencies for mobile and app development projects. Their teams are already in place, so you don’t have to go to look for some other company and freelancers to complete a team. Therefore, no time is lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Go for client references&lt;/strong&gt;&lt;br&gt;
Client references show the major role of the development company and agency. The client is looking for a client reference, checking it, and then calling the agency and giving a project for work.&lt;/p&gt;

&lt;p&gt;Read Now- &lt;a href="https://bestdigitaltrendz.com/2021/03/05/top-7-amazing-benefits-of-blockchain-technology-for-businesses/"&gt;Top advantages of Blockchain Technology&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Budget Calculation&lt;/strong&gt;&lt;br&gt;
How much money can you afford to spend on the project? This is an important Question for each client. To start a project, the budget is a significant element before making big investments to make a creative brand. If your budget is $5,000, it is not enough for large software development and IT company then you can choose the best small IT agency. and If your budget is less than $1,000, then you can hire the best freelancer for project development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
In the end, choosing the best app development agency for your business or startup depends on your project. Freelancers are affordable but they do not work with one employer. Small web app development agencies are the best option for your next project. because they have dedicated teams with different expertise and professional experience. &lt;br&gt;
If you like this blog then you can submit any feedback and suggestion in the comment box.&lt;/p&gt;

</description>
      <category>howtochooseappagency</category>
      <category>choosemobileapp</category>
      <category>tips</category>
      <category>mobileappagency</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / Static vs Dynamic typing</title>
      <author>Nikita Kozlov</author>
      <pubDate>Tue, 27 Apr 2021 09:49:44 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-static-vs-dynamic-typing-2d5k</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-static-vs-dynamic-typing-2d5k</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
Is JavaScript a statically or a dynamically typed language?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
JavaScript is a dynamically typed language, but TypeScript is a statically typed language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
In dynamically typed languages all type checks are performed in a runtime, only when your program is executing. So this means you can just assign anything you want to the variable and it will work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Hello world&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {key:'value'}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we take a look at Typescript, it is a statically typed language, so all checks will be performed during compile/build run before we actually execute our program.&lt;/p&gt;

&lt;p&gt;So the previous code with added variable &lt;code&gt;a&lt;/code&gt; type won't work. Even from the JavaScript standpoint it is valid (except types) and will run without any errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fc9hMdWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wugrp9jyagvmw2fy4dt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fc9hMdWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wugrp9jyagvmw2fy4dt9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In TypeScript, you can specify variable type manually or it may be calculated automatically. In the following example, notice that there are no type definitions, but TypeScript still knows that &lt;code&gt;a&lt;/code&gt; is a numeric variable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ufNx4UvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo8mtv13tq02hb23uwt4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ufNx4UvE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oo8mtv13tq02hb23uwt4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life applications:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this section, we are stepping into a middle ground zone, because debates about what is better or worse are still around.&lt;/p&gt;

&lt;p&gt;// Personal opinion start&lt;/p&gt;

&lt;p&gt;Both statically and dynamically typed languages have their own advantages.&lt;/p&gt;

&lt;p&gt;JavaScript (dynamic typing):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faster prototyping, because you don't care about types.&lt;/li&gt;
&lt;li&gt;Easier learning curve, because you need to learn fewer things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TypeScript (static typing):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Richer code completion, because you know all methods for all variables right away.&lt;/li&gt;
&lt;li&gt;Better maintainability, you only need a type definition to understand what something is doing, e.g. API response type definition, function params, and return type, ...&lt;/li&gt;
&lt;li&gt;Easier to catch &lt;strong&gt;simple&lt;/strong&gt; errors like mistypes (users vs usrs).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;// If you add other pros in the comments, I will add them here.&lt;/p&gt;

&lt;p&gt;Btw nor JavaScript, nor TypeScript won't allow you to not write tests. Even TypeScript with its type system won't let you catch all the errors during build time, only simple ones.&lt;/p&gt;

&lt;p&gt;// Personal opinion end&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/JavaScript"&gt;Wiki/JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other posts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-higher-order-functions-38kb"&gt;JS interview in 2 minutes / Higher Order Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-value-vs-reference-5a8k"&gt;JS interview in 2 minutes / value vs reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/kozlovzxc/js-interview-in-2-minutes-vs-1f58"&gt;JS interview in 2 minutes / == vs ===&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Btw, I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt;. Let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Free Tailwind dashboard template</title>
      <author>Pasquale Vitiello</author>
      <pubDate>Tue, 27 Apr 2021 09:46:11 +0000</pubDate>
      <link>https://dev.to/pacovitiello/free-tailwind-dashboard-template-31m5</link>
      <guid>https://dev.to/pacovitiello/free-tailwind-dashboard-template-31m5</guid>
      <description>&lt;p&gt;Hey guys,&lt;/p&gt;

&lt;p&gt;As the title says, I made a free dashboard template using Tailwind CSS + React!&lt;/p&gt;

&lt;p&gt;It comes with several pre-coded charts/graphs that I developed using the awesome Chart.js 3 library!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live demo: &lt;a href="https://mosaic.cruip.com/"&gt;https://mosaic.cruip.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Download on Github: &lt;a href="https://github.com/cruip/tailwind-dashboard-template"&gt;https://github.com/cruip/tailwind-dashboard-template&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use it for whatever you want, and feel free to share your comments and feedback below 🙂 &lt;/p&gt;

</description>
      <category>showdev</category>
      <category>react</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A developer-first layout engine for web</title>
      <author>forsigner</author>
      <pubDate>Tue, 27 Apr 2021 09:39:57 +0000</pubDate>
      <link>https://dev.to/forsigner/a-developer-first-layout-engine-for-web-1c86</link>
      <guid>https://dev.to/forsigner/a-developer-first-layout-engine-for-web-1c86</guid>
      <description>&lt;p&gt;First of all, this article has a bit of a headline, and I apologize to the readers. The headline of this article is &lt;strong&gt;the layout engine&lt;/strong&gt;. But I suggest that you must read this headline party article, and you will definitely gain something after reading it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-write-this-article"&gt;
  &lt;/a&gt;
  Why write this article?
&lt;/h2&gt;

&lt;p&gt;A few days ago, I released one of my front-end open source projects named: &lt;a href="https://github.com/forsigner/fower"&gt;Fower&lt;/a&gt;. Many users have asked me what is the difference between Fower and Tailwindcss. My answer is that Fower has the same philosophy in utilty-first. In fact, CSS framework with the utilty-first concept has existed for a long time, such as: &lt;a href="https://acss.io/"&gt;ACSS&lt;/a&gt;, &lt;a href="https://tachyons.io/"&gt;Tachyons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the biggest differences between Fower and Tailwindcss is that Fower provides a very easy-to-use layout tool: Fower Layout toolkit, which is the reason for writing this article. Below I will share in detail the original intention of developing the Fower layout and its design ideas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-layout-history"&gt;
  &lt;/a&gt;
  Web layout history
&lt;/h2&gt;

&lt;p&gt;Let's briefly review the history of Web layout. During the entire evolution of Web layout, we have experienced no layout, table layout, positioning layout, floating layout, Flexbox layout, and Grid layout.&lt;br&gt;
I will not elaborate on the characteristics and advantages and disadvantages of each layout here. I will only talk about my personal views and conclusions: at the current stage, considering the functionality, ease of use, browser compatibility, etc., using Flexbox layout is the best choice. Some people who are interested in learning more can read the following article.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://grid-layout.com/history.html"&gt;Web layout history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox"&gt;Flexbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"&gt;CSS Grid Layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#the-core-of-the-layout"&gt;
  &lt;/a&gt;
  The core of the layout
&lt;/h2&gt;

&lt;p&gt;In my opinion, the core of layout is to deal with the spatial relationship between container and items in a certain direction (x, y). There are four essential elements here: container, element, direction, and spatial relationship. In fact, this is also the core of flexbox layout. Almost all concepts and usages of flexbox layout are developed around these four elements. When we get a design draft, if we can quickly identify the containers and elements in it, and clarify their spatial relationship, we can quickly build the interface.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#layout-in-sketch-and-figma"&gt;
  &lt;/a&gt;
  Layout in Sketch and Figma
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oJuE-272--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgwy5t6n5v9to3agvsys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oJuE-272--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgwy5t6n5v9to3agvsys.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9W196Cps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk3gw01sl2f2azsv6j7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9W196Cps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk3gw01sl2f2azsv6j7m.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figma and Sketch are two very well-known design software. We can see that they consistently use very vivid directives in the processing of element spatial relations: align to top, align to right, align to bottom, align to left , Align base on space. This is also the most intuitive way.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#layout-in-swift-ui-and-flutter"&gt;
  &lt;/a&gt;
  Layout In Swift UI and Flutter
&lt;/h2&gt;

&lt;p&gt;Now we look at two modern UI solutions: Swift UI and Flutter, how they deal with UI layout.&lt;/p&gt;

&lt;p&gt;In Swift UI, we can see keywords such as HStack, VStack, aligment, space, etc. We found that Swift UI is also developed around four elements: container, element, direction, and spatial relationship:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;struct&lt;/span&gt; &lt;span class="nx"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;HStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;VStack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;CalendarView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nx"&gt;Spacer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;VStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Event title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;Spacer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Flutter, we can see keywords such as Row, Column, aligment, and space. We find that Flutter is also developed around the four elements of container, element, direction, and spatial relationship:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;mainAxisAlignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spaceEvenly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images/pic1.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images/pic2.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images/pic3.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;mainAxisAlignment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spaceEvenly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images/pic1.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images/pic2.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images/pic3.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We found that the layout concept of Swift UI and Flutter is very similar to Flexbox layout. In addition, we found that their layout code is directly attached to the container and elements, unlike the traditional Web, where the style code needs to be separated into a single CSS File. Fower and Swift UI and Fluter use similar concepts, style is part of the container and elements, which is also the choice of modern UI development&lt;/p&gt;

&lt;p&gt;Some references:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.swiftbysundell.com/articles/swiftui-layout-system-guide-part-1/"&gt;https://www.swiftbysundell.com/articles/swiftui-layout-system-guide-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flutter.dev/docs/development/ui/layout"&gt;https://flutter.dev/docs/development/ui/layout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-flexbox-layout"&gt;
  &lt;/a&gt;
  Disadvantages of Flexbox layout
&lt;/h2&gt;

&lt;p&gt;The above mentioned the layout methods of design software and modern UI frameworks. They are very similar to the Flexbox layout concept. What are the shortcomings of the Flexbox layout?&lt;/p&gt;

&lt;p&gt;Although Flexbox is excellent, but for me, it has one of the biggest shortcoming that it's not developer-first. Flexbox layout is not easy to use enough, and the developer experience is not good enough.&lt;/p&gt;

&lt;p&gt;Flexbox has many concepts: main axis, cross axis, direction, align-item, justify-content, flex-start, flex-end, flex-center, etc. The biggest problem is that when the direction of the main axis changes, attributes such as &lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt; make the presentation of the UI very inconsistent with human intuition. Especially for me who are not always writing UI (I often need to write backend, do miscellaneous, etc.), every once in a while, I may forget the usage of &lt;code&gt;align-items&lt;/code&gt;, &lt;code&gt;justify-content&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-ideal-layout-design-plan"&gt;
  &lt;/a&gt;
  My ideal layout (design plan)
&lt;/h2&gt;

&lt;p&gt;Above we talked about the shortcomings of Flexbox layout: not developer-first.&lt;/p&gt;

&lt;p&gt;My ideal layout method should be as easy to use as modern design software. We only need to pay attention to the four elements of the layout: container, element, direction, and spatial relationship. The usage is to find the container and the element, set the direction of the element in the container, and then set the spatial relationship.&lt;/p&gt;

&lt;p&gt;The core here is how to express spatial relationships. I think the most intuitive way of expression is to design software. I abstract this way of expression as: &lt;strong&gt;toCenter&lt;/strong&gt;, &lt;strong&gt;toCenterX&lt;/strong&gt;, &lt;strong&gt;toCenterY&lt;/strong&gt;, &lt;strong&gt;toTop&lt;/strong&gt;, &lt;strong&gt;toRight&lt;/strong&gt;, &lt;strong&gt;toBottom&lt;/strong&gt;, &lt;strong&gt;toLeft&lt;/strong&gt;, &lt;strong&gt;toBetween&lt;/strong&gt;, &lt;strong&gt;toAround&lt;/strong&gt;, &lt;strong&gt;toEvenly&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;toCenter&lt;/strong&gt;, make children elements align to center, see &lt;a href="https://fower.vercel.app/docs/to-center"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toCenterX&lt;/strong&gt;, make children elements align to center horizontal, see &lt;a href="https://fower.vercel.app/docs/to-center-x"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toCenterY&lt;/strong&gt;, make children elements align to center vertical, see &lt;a href="https://fower.vercel.app/docs/to-center-y"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toTop&lt;/strong&gt;, make children elements align to left, see &lt;a href="https://fower.vercel.app/docs/to-left"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toRight&lt;/strong&gt;, make children elements align to right, see &lt;a href="https://fower.vercel.app/docs/to-right"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toBottom&lt;/strong&gt;, make children elements align to bottom, see &lt;a href="https://fower.vercel.app/docs/to-bottom"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toLeft&lt;/strong&gt;, make children elements align to left, see &lt;a href="https://fower.vercel.app/docs/to-left"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toBetween&lt;/strong&gt;, make children elements space between, see &lt;a href="https://fower.vercel.app/docs/to-between"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toEvenly&lt;/strong&gt;, make children elements space evenly, see &lt;a href="https://fower.vercel.app/docs/to-evenly"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;toAround&lt;/strong&gt;, make children elements space around, see &lt;a href="https://fower.vercel.app/docs/to-around"&gt;Online Demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of whether your container is horizontal (row) or vertical (column), the expressions of these directives such as toRight and toBottom will conform to your visual habits.&lt;/p&gt;

&lt;p&gt;Why is this abstract expression better? I think there are several advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is more in line with human intuition. You only need to remember to deal with the spatial relationship according to the direction, such as: toRight, toBotom, etc. There is nothing more in line with human intuition. The other advantage is that your memory burden will become very small.&lt;/li&gt;
&lt;li&gt;Less code, better maintainability, higher development efficiency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My ideal way of writing code (pseudo code):&lt;/p&gt;

&lt;p&gt;1.The following code will automatically center the elements in the container horizontally and vertically, and the container direction is row by default, so it can be omitted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;toCenter&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemA&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The effect is as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KVhInsi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15q9rp9igliteeeakn66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KVhInsi0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15q9rp9igliteeeakn66.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.The following code will align the three elements A, B, C to the right in the container. The container defaults to row, so it can be omitted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;toRight&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemA&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemB&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemC&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The effect is as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7T1lmiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lfdv5cr75hdfunwtb9s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7T1lmiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lfdv5cr75hdfunwtb9s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.The following code will align the two elements A and B to the right in the container. This time we declare column, so the elements are arranged vertically:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;column&lt;/span&gt; &lt;span class="na"&gt;toRight&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemA&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemB&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The effect is as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L2SCcI_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucq0d2jod905ntve95v1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L2SCcI_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucq0d2jod905ntve95v1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.Use composition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;toBetween&lt;/span&gt; &lt;span class="na"&gt;toCenterY&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemA&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemB&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemC&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The effect is as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUnUsG4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdrurgwpsqyp2icghltq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUnUsG4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdrurgwpsqyp2icghltq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are just four pseudo-code examples. In fact, you can use "toLeft", "toRight" and other directives to implement most of the UI layout.&lt;/p&gt;

&lt;p&gt;Above, we abstracted the expression of spatial relations and applied directives to the container. Let's take a look at a layout effect, how would you build it with code?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWHXmHpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8etoyhuw8d89ocqj70a9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWHXmHpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8etoyhuw8d89ocqj70a9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me talk about my ideal plan, the pseudo code is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt; &lt;span class="na"&gt;toBetween&lt;/span&gt; &lt;span class="na"&gt;toCenterY&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemA&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemB&lt;/span&gt; &lt;span class="na"&gt;selfBottom&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemC&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Container&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we abstract another type of directives: &lt;strong&gt;selfTop&lt;/strong&gt;, &lt;strong&gt;selfRight&lt;/strong&gt;, &lt;strong&gt;selfBottom&lt;/strong&gt;, &lt;strong&gt;selfLeft&lt;/strong&gt;, &lt;strong&gt;selfStretch&lt;/strong&gt;. These directives can act on elements to individually control the alignment of elements.&lt;/p&gt;

&lt;p&gt;So we have some directives that act on elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;selfTop&lt;/strong&gt;, make elements seft align to top&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;selfRight&lt;/strong&gt;, make elements seft align to right&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;selfBottom&lt;/strong&gt;, make elements seft align to bottom&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;selfLeft&lt;/strong&gt;, make elements seft align to left&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;selfStretch&lt;/strong&gt;, make elements seft to Stretch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, summarize our layout tool design plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Container&lt;/strong&gt; Direction control directives, use &lt;strong&gt;row&lt;/strong&gt;, &lt;strong&gt;column&lt;/strong&gt;, if not declared, the default is &lt;strong&gt;row&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Container&lt;/strong&gt; Alignment directives for internal elements: &lt;strong&gt;toCenter&lt;/strong&gt;, &lt;strong&gt;toCenterX&lt;/strong&gt;, &lt;strong&gt;toCenterY&lt;/strong&gt;, &lt;strong&gt;toTop&lt;/strong&gt;, &lt;strong&gt;toRight&lt;/strong&gt;, &lt;strong&gt;toBottom&lt;/strong&gt;, &lt;strong&gt;toLeft&lt;/strong&gt;, &lt;strong&gt;toBetween&lt;/strong&gt;, &lt;strong&gt;toAround&lt;/strong&gt;, &lt;strong&gt;toEvenly&lt;/strong&gt;, these directives can be used to control the alignment of sub-elements, and have nothing to do with row and column directions&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Element&lt;/strong&gt; Self-alignment directives: &lt;strong&gt;selfTop&lt;/strong&gt;, &lt;strong&gt;selfRight&lt;/strong&gt;, &lt;strong&gt;selfBottom&lt;/strong&gt;, &lt;strong&gt;selfLeft&lt;/strong&gt;, &lt;strong&gt;selfStretch&lt;/strong&gt;. These directives individually control the alignment of the element itself&lt;/li&gt;
&lt;li&gt;When any &lt;strong&gt;container&lt;/strong&gt; instruction is used, the flexbox layout will be triggered automatically, no need to manually set the &lt;code&gt;display: flex;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above 4 design concepts are my personal ideal layout.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fower-layout"&gt;
  &lt;/a&gt;
  Fower Layout
&lt;/h2&gt;

&lt;p&gt;Back to our title: &lt;strong&gt;A developer-first layout engine for web&lt;/strong&gt;. In fact, flex layout cannot be called a layout engine, so what is it? Maybe we call it a layout toolkit will be more appropriate.&lt;/p&gt;

&lt;p&gt;The layout engine here refers to: &lt;a href="https://fower.vercel.app/docs/fower-layout-introduction"&gt;Fower layout toolkit&lt;/a&gt;，A layout tool based on flexbox.&lt;/p&gt;

&lt;p&gt;The biggest feature of Fower layout is developer-first, it is very simple to use and in line with people's intuition.&lt;/p&gt;

&lt;p&gt;For more detailed information about Fower Layout, you can look at the introduction of the official document: &lt;a href="https://fower.vercel.app/docs/fower-layout-introduction"&gt;Fower Layout Introduction&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>react</category>
      <category>vue</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Useful Links by CodeWithMosh HTML&amp;CSS Courses</title>
      <author>annadema</author>
      <pubDate>Tue, 27 Apr 2021 09:33:10 +0000</pubDate>
      <link>https://dev.to/annadema/sites-by-codewithmosh-html-css-courses-2691</link>
      <guid>https://dev.to/annadema/sites-by-codewithmosh-html-css-courses-2691</guid>
      <description>&lt;h2&gt;
  &lt;a href="#webdev-fundamentals"&gt;
  &lt;/a&gt;
  WebDev Fundamentals
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://validator.w3.org/"&gt;https://validator.w3.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jigsaw.w3.org/css-validator/"&gt;https://jigsaw.w3.org/css-validator/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/"&gt;https://unsplash.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pexels.com/"&gt;https://www.pexels.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/the-shapes-of-css/"&gt;https://css-tricks.com/the-shapes-of-css/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necolas.github.io/normalize.css/"&gt;https://necolas.github.io/normalize.css/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cssgradient.io/"&gt;https://cssgradient.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tipography"&gt;
  &lt;/a&gt;
  Tipography
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.fontsquirrel.com/"&gt;https://www.fontsquirrel.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://type-scale.com/"&gt;https://type-scale.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://caniuse.com/"&gt;https://caniuse.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flaticon.com/"&gt;https://www.flaticon.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cssspritestool.com/"&gt;http://cssspritestool.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cssportal.com/image-to-data/"&gt;https://www.cssportal.com/image-to-data/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bennettfeely.com/clippy/"&gt;https://bennettfeely.com/clippy/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://responsivebreakpoints.com/"&gt;https://responsivebreakpoints.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudconvert.com/"&gt;https://cloudconvert.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.svgbackgrounds.com/"&gt;https://www.svgbackgrounds.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fontawesome.com/"&gt;https://fontawesome.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>course</category>
      <category>resources</category>
      <category>images</category>
    </item>
    <item>
      <title>AWS monthly wrap up - April 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Tue, 27 Apr 2021 09:13:29 +0000</pubDate>
      <link>https://dev.to/aws-heroes/aws-monthly-wrap-up-april-2021-3kfg</link>
      <guid>https://dev.to/aws-heroes/aws-monthly-wrap-up-april-2021-3kfg</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of your AWS Heroes! At the end of each month, I'll be showcasing some of the great posts, projects, and insights from the AWS community right here on Dev.to. &lt;/p&gt;




&lt;p&gt;To get us started we have &lt;a href="https://dev.to/sowmenappd"&gt;Sowmen&lt;/a&gt; with a deep dive into Docker, NGINX, and load balancing with AWS ELB. Check out the post for how to build a highly available system that is able to withstand spiky and heavy traffic over prolonged durations of operation.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/sowmenappd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zrC_nzxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rvyahjUU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/394556/89714ff4-10ba-4d3c-bc04-8647d94c4d50.jpeg" alt="sowmenappd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sowmenappd/build-a-highly-available-node-js-application-using-docker-nginx-and-aws-elb-3cjp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a highly available Node.js application using Docker, NGINX and AWS ELB&lt;/h2&gt;
      &lt;h3&gt;Sowmen Rahman ・ Apr 15 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nginx&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/rinkiyakedad"&gt;Arsh&lt;/a&gt; with an introduction to Terraform. Arsh will be writing more about Terraform in the coming weeks so check out this post, and stay tuned for more.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/rinkiyakedad" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXli1qCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--b2nfmkP3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/488212/3af8842e-6458-4746-afc9-43ce6a9659d0.jpeg" alt="rinkiyakedad image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rinkiyakedad/introduction-to-terraform-545n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introduction To Terraform &lt;/h2&gt;
      &lt;h3&gt;Arsh Sharma ・ Apr  4 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#terraform&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kubernetes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;AWS Community Builder &lt;a href="https://dev.to/aditmodi"&gt;Adit&lt;/a&gt; then shares how to get started with containers on AWS. If you've ever been curious about Elastic Kubernetes Service (EKS), Elastic Container Service (ECS), and Elastic Beanstalk this is a great place to start.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/aditmodi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/introduction-to-containers-with-aws-og4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introduction to Containers with AWS&lt;/h2&gt;
      &lt;h3&gt;Adit Modi ・ Apr 16 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Moving on to our next post from &lt;a href="https://dev.to/dabit3"&gt;Nader&lt;/a&gt; and a walkthrough of how to build a Neptune-backed AppSync GraphQL API with AWS CDK, AWS AppSync, and AWS Lambda. Check it out for a great tutorial, plus a video as well.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gYALFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YawV5F9h--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/41231eb2-054b-4417-bc35-814e491a2d5d.jpeg" alt="dabit3 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dabit3/building-a-graphql-api-on-aws-with-amazon-neptune-graph-database-and-cdk-428a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building a GraphQL API on AWS with Amazon Neptune Graph Database and CDK&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit ・ Apr  1 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#graphql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#fullstack&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This next post by &lt;a href="https://dev.to/aspittel"&gt;Ali&lt;/a&gt; from the AWS Amplify team showcases Amplify DataStore with an offline note editor tutorial. Having a performant offline app is important for global accessibility and leads to a better experience for users in areas with spotty internet and mobile connection. &lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/aspittel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsknEIX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--stJcpewb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/38627/77a2a5e7-603e-41b4-afcc-f7aff468ae2f.jpg" alt="aspittel image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws/building-an-offline-ready-form-with-vanilla-javascript-3nhd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Building an Offline-Ready Form With Vanilla JavaScript&lt;/h2&gt;
      &lt;h3&gt;Ali Spittel ・ Apr 19 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have AWS Community Builder &lt;a href="https://dev.to/allenheltondev"&gt;Allen&lt;/a&gt; with another excellent article on architecture, this time with serverless focus. Check it out for more on the core pillars of the Well-Architected model through a serverless application lens.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/allenheltondev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18SGl2wG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Kc2FhiE1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/153157/a3f68892-e297-4ebe-8084-96d7b28f3c6b.jpg" alt="allenheltondev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/solutions-architect-tips-decoding-the-aws-serverless-design-princples-413n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Solutions Architect Tips - Decoding the AWS Serverless Design Principles&lt;/h2&gt;
      &lt;h3&gt;Allen Helton ・ Mar 30 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Our last post is from &lt;a href="https://dev.to/taylorreece"&gt;Taylor&lt;/a&gt; from Prismatic with a post on how their infrastructure has evolved over time. Taylor goes into what went well in Lambda, and why they made the decision to migrate some services to AWS Elastic Container Service (ECS).&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/taylorreece" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8XMk17tW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9QMfuOT7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/501945/d325f92d-44ed-447b-96fe-e9de3588969c.jpeg" alt="taylorreece image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/prismatic/why-we-moved-from-lambda-to-ecs-4m96" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why We Moved From Lambda to ECS&lt;/h2&gt;
      &lt;h3&gt;Taylor Reece ・ Apr 21 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Don't forget to check out &lt;a href="https://www.theelastic.guru/teamelasticguru/200-of-free-aws-credits-up-for-grabs-5hka"&gt;The Elastic Guru&lt;/a&gt;, a community created to help young people and students get started with AWS.&lt;/p&gt;

&lt;p&gt;As part of that mission, they are giving away $200 of free AWS credits. To be in to win all you need to do is introduce yourself in the welcome thread on The Elastic Guru forum by 31/5/2021.&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/leewynne" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nvpmw0U8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OQxO631L--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/19958/2d274278-fcb9-491b-87ec-5b62714bb501.JPG" alt="leewynne image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/leewynne/200-of-free-aws-credits-up-for-grabs-4pj7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Just a heads up. Our Forem powered community (focused on AWS) is giving away free AWS credits&lt;/h2&gt;
      &lt;h3&gt;lee ・ Apr 15 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#awsheroes&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





</description>
      <category>aws</category>
      <category>bestofdev</category>
    </item>
  </channel>
</rss>
