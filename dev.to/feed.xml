<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>An Effective Strategy To Learn Vue.js In Less Than Seven Days</title>
      <author>Roberto Hernandez</author>
      <pubDate>Tue, 18 May 2021 18:21:25 +0000</pubDate>
      <link>https://dev.to/blarzhernandez/an-effective-strategy-to-learn-vue-js-in-less-than-seven-days-4dp6</link>
      <guid>https://dev.to/blarzhernandez/an-effective-strategy-to-learn-vue-js-in-less-than-seven-days-4dp6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#no-bs-here-the-action-plan-and-strategy-i-followed-to-achieve%C2%A0it"&gt;
  &lt;/a&gt;
  No BS. Here the action plan and strategy I followed to achieve it
&lt;/h2&gt;

&lt;p&gt;Learning &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; in less than seven days was one of my recent challenges. At first, I was skeptical about if I was going to able to achieve it.&lt;br&gt;
Before following the next pragmatic methodology to learn Vue.js that we are going to reveal throughout this post I have I wrong believe.&lt;/p&gt;

&lt;p&gt;I thought that those who are knowledgeable in different areas were born with a special power. I was completely wrong.&lt;/p&gt;

&lt;p&gt;As someone said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Everything is difficult until you know how to do it."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After I finished university and obtained a master's degree in Computer Science, I dug into the self-taught journey.&lt;/p&gt;

&lt;p&gt;Over this journey, I realized that the difference between super learners and others is basically the way both learn.&lt;/p&gt;

&lt;p&gt;I knew nothing about building a learning map based on your personal needs and even less about how to identify what drives me (if it is an internal or external force).&lt;/p&gt;

&lt;p&gt;As cliche as it sounds, setting the right mindset plays a big role in achieving your goal in less time and effort.&lt;br&gt;
If we are now jumping on the technical and explicit things related to Vue.js, there will be a few crucial things to consider.&lt;/p&gt;

&lt;p&gt;Choosing the official documentation and a video course format will save you a lot of time, so you can get familiar with the main concepts faster.&lt;br&gt;
Anyway, let's jump to the exact action plan I followed to learn Vue.js in less than seven days.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer:
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt; This is just a guide to give you a list of key factors to succeed while learning Vue.js.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The outcome might vary depending on different factors like your level of experience (in this case, mainly with JavaScript, HTML, and CSS). In my case, I learned the Vue.js fundamentals and got a decent code velocity, but more complex concepts were digested as long I continued developing Vue.js projects.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There two crucial stages you need to focus on if you want to learn anything faster.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#planning-and-strategy%C2%A0stage"&gt;
  &lt;/a&gt;
  Planning and Strategy Stage
&lt;/h1&gt;

&lt;p&gt;The plan and the strategy you're going to stick to will play a big role in how fast you can grasp all Vue.js-related concepts and elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-a-learning%C2%A0map"&gt;
  &lt;/a&gt;
  Build a learning map
&lt;/h2&gt;

&lt;p&gt;Picking a course and going straight into it is one of the common mistakes we make when learning something new.&lt;/p&gt;

&lt;p&gt;Do you want to fix that? So then start by building a learning map. It will help you to get an understanding of all the things you are trying to learn.&lt;/p&gt;

&lt;p&gt;Simply put, it is a personalized guide based on your own needs.&lt;/p&gt;

&lt;p&gt;OK, all of this sounds good, but how do I really build a learning map? No worries, let's jump to it right now.&lt;/p&gt;

&lt;p&gt;To build a learning map to learn Vue.js, there are three main things you have to consider so you can boost your learning speed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-what-drives-you-to%C2%A0learn"&gt;
  &lt;/a&gt;
  1. What drives you to learn?
&lt;/h3&gt;

&lt;p&gt;The first thing to do to build a learning map is to be completely honest about what drives you to learn. Is this an internal or external force?&lt;/p&gt;

&lt;p&gt;If this is an internal force, that means you have a genuine passion for the frontend and you are probably fully focused on mastering every detail of the Vue.js framework.&lt;/p&gt;

&lt;p&gt;An external motivation means you are learning it because the company needs you to learn it for an incoming project or because it is a trending and on-demand framework and you want to get on that train.&lt;/p&gt;

&lt;p&gt;Yet you are not interested enough in learning it.&lt;/p&gt;

&lt;p&gt;Why is it so crucial to know the type of motivation?&lt;br&gt;
That's simple. Because there might be a few sections or things that are irrelevant for the type of motivation, so you can skip them for later.&lt;/p&gt;

&lt;p&gt;With a clear idea of what drives you to learn, you can now devote your time and energy to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-build-a-learning-structure"&gt;
  &lt;/a&gt;
  2. Build a learning structure
&lt;/h3&gt;

&lt;p&gt;The idea behind building a learning structure is to find the fastest route to grasp a topic. By doing this, you will speed up your understanding of how Vue.js works and all concepts involved in it.&lt;/p&gt;

&lt;p&gt;There are two things you need to consider when building a learning structure: concepts and facts.&lt;/p&gt;

&lt;p&gt;Concepts are all the fundamentals and principles about Vue.js you need to understand, whereas a fact is all the truthful things you must remember about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concepts-and-facts-to-learn-about%C2%A0vuejs"&gt;
  &lt;/a&gt;
  Concepts and facts to learn about Vue.js
&lt;/h3&gt;

&lt;p&gt;What is the right version to learn (as of this writing)? Vue 2 or 3?&lt;/p&gt;

&lt;p&gt;What is a common/popular tech stack of an app based on Vue.js?&lt;br&gt;
Get familiar with the most common and used Vue.js concepts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#facts-and%C2%A0dilemmas"&gt;
  &lt;/a&gt;
  Facts and dilemmas
&lt;/h3&gt;

&lt;p&gt;Let's start out by talking about a few things you will probably stumble upon just after you start learning the Vue.js ecosystem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-right-vue-version-to%C2%A0learn"&gt;
  &lt;/a&gt;
  What is the right Vue version to learn?
&lt;/h3&gt;

&lt;p&gt;When I was starting out learning Vue.js, this was a question that quickly came ups so you might have the same dilemma too.&lt;/p&gt;

&lt;p&gt;Research and dive into it a little bit without worrying too much. The idea is to be clear why you're choosing either version 2 or 3.&lt;/p&gt;

&lt;p&gt;I suggest you just make a comparison at a high level. For instance, the following Reddit threads will give you insight into the difference between both versions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.reddit.com/r/vuejs/comments/g1v72x/start_with_vue_3_or_learn_vue_2_first/"&gt;Learn Vue 2 or 3?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.reddit.com/r/vuejs/comments/hx0bh1/im_currently_learning_vue_2_and_ive_heard_vue_3/"&gt;Should I learn Vue 2 or 3&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-commonpopular-tech-stack-of-an-app-based-on%C2%A0vuejs"&gt;
  &lt;/a&gt;
  What is a common/popular tech stack of an app based on Vue.js?
&lt;/h3&gt;

&lt;p&gt;Knowing what to learn is crucial to boost your learning speed.&lt;br&gt;
You need to have an idea of what is a common tech stack when building Vue.js apps so you can devote time and energy to those specific elements.&lt;/p&gt;

&lt;p&gt;Here is a common Vue.js stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Framework: Vue 2/3&lt;/li&gt;
&lt;li&gt;Routing: vue-router&lt;/li&gt;
&lt;li&gt;Bundler: WebPack&lt;/li&gt;
&lt;li&gt;UI kit/framework: Element UI, Vuetify.&lt;/li&gt;
&lt;li&gt;State management: VueX&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#common-concepts"&gt;
  &lt;/a&gt;
  Common concepts
&lt;/h3&gt;

&lt;p&gt;Now that you have a better understanding of the right Vue.js version and the stack you want to focus on, it is time to jump to the fundamentals, concepts, and unique things that belong to Vue.js.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Vue instance: Every Vue.js app starts by creating a new &lt;code&gt;Vue&lt;/code&gt; instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data and methods: When a &lt;code&gt;Vue&lt;/code&gt; instance is created, it adds all properties found in its &lt;code&gt;data object to&lt;/code&gt;Vue's reactivity` system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Instance Lifecycle Hooks (different than lifecycle Hooks): This is a series of steps that run whenever the Vue instance is created ( &lt;code&gt;init, beforeCreate, created&lt;/code&gt;, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lifecycle hooks: Functions that give users the ability to add their own code at a specific stage ( &lt;code&gt;mounted, updated, destroyed&lt;/code&gt;, etc. ).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Template syntax: Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance's data. The template syntax includes interpolations, directives, and shorthand (e.g. &lt;code&gt;v-bind, v-on&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Computed properties: Allow you to handle complex logic and operations. They are calculations that will be cached based on their dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Watchers: Allow you to perform asynchronous or expensive operations in response to changing data. They allow you to track any property and react to any change on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class and style binding: Allow you to manipulate classes and inline style. You can pass data to apply specific classes or styles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conditional rendering: Vue.js allows you to condition whether or not to show a block, component, or element using different directives such as &lt;code&gt;v-if, v-else, v-show, and v-for&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Event handling: Listening to events from the DOM, event handlers, inline handlers, event modifiers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Form input binding: Use the v-model directive to create two-way data binding on form input.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Components Basics: Components are reusable Vue instances with a name like &lt;code&gt;&amp;lt;button-counter&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Passing data to child components with props: Props are custom attributes you can register on a component. Props passed down to a child component become properties on that child component.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These concepts are the most common or useful when starting with Vue.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-choose-the-right-resources"&gt;
  &lt;/a&gt;
  3. Choose the right resources
&lt;/h2&gt;

&lt;p&gt;By building a learning structure, you figured out the fastest route to learn Vue.js. Now it is time to research the right resources and methods other effective learners are using. As Scott Young, the author of the &lt;a href="https://www.scotthyoung.com/blog/ultralearning/"&gt;Ultralearning book&lt;/a&gt;, says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Spending one or two hours figuring out the right resources and 'how do people get good at this,' is a very useful investment."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#vuejs-official-guide-36%C2%A0hours"&gt;
  &lt;/a&gt;
  Vue.js official guide (~3–6 hours)
&lt;/h3&gt;

&lt;p&gt;I suggest you start off by reading the &lt;a href="https://vuejs.org/v2/guide/"&gt;Vue.js official documentation&lt;/a&gt;. Since it is your first time with Vue.js, you probably will not be able to grasp and digest all the information. No worries. That's fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choose-a-highly-rated-video-course-1015%C2%A0hours"&gt;
  &lt;/a&gt;
  Choose a highly rated video course (~10–15 hours)
&lt;/h3&gt;

&lt;p&gt;Again, at this point in your learning journey, you shouldn't worry about all the items in the course.&lt;/p&gt;

&lt;p&gt;A video course will help you to speed the learning process up. It will help you to bridge the understanding gap you had after you read the Vue.js official guide.&lt;/p&gt;

&lt;p&gt;The goal of the course is to understand the Vue.js fundamentals. It should take roughly 10–15 effective hours. While doing this, try to use the Pomodoro technique in order to avoid burnout.&lt;/p&gt;

&lt;p&gt;I suggest taking the following Vue.js courses. A few of them are free and others are quite cheap, so there are no excuses.&lt;/p&gt;

&lt;p&gt;Courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.udemy.com/course/vuejs-2-the-complete-guide/"&gt;Develop with VueJS 2 (Complete Vue.js Router and Vuex Course)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.vuemastery.com/"&gt;Vue Mastery&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.pluralsight.com/courses/vuejs-fundamentals"&gt;Vue.js Fundamentals&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#execution-stage"&gt;
  &lt;/a&gt;
  Execution Stage
&lt;/h1&gt;

&lt;p&gt;At this point, you have the right mindset, a learning map, and the right resources to crush the Vue.js roadmap.&lt;/p&gt;

&lt;p&gt;In order to grasp as much of Vue's world as possible, you need to follow a series of steps. The time to execute the plan has arrived.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Keep in mind that all the following steps are required from day 0 to day 7.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#teach-it-to-yourself-or-to-a-child-part-of-the-feynman-technique"&gt;
  &lt;/a&gt;
  Teach it to yourself or to a child (part of the &lt;a href="https://medium.com/taking-note/learning-from-the-feynman-technique-5373014ad230"&gt;Feynman technique&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;If you can explain what you have learned in plain English, there is no doubt you have achieved two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You are clear about the topic and its elements. You can't explain what you don't understand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You stored that knowledge in your long-term memory rather than in your working memory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For any confusing or unclear concepts, try to explain them to yourself or to a child without using jargon or dense vocabulary. I usually practice this with my &lt;a href="https://medium.com/better-code-and-life/how-to-explain-to-a-2-half-years-old-kid-what-is-a-promise-in-javascript-1c3c931ac23"&gt;four-year-old son&lt;/a&gt;. It is not easy at all. But when he is able to get an idea of what I am talking about, I understand that I grasped it too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-live-on%C2%A0youtube"&gt;
  &lt;/a&gt;
  Go live on YouTube
&lt;/h3&gt;

&lt;p&gt;Really? No worries. You don't need to expose yourself - at least for now.&lt;/p&gt;

&lt;p&gt;Again, this is a matter of measuring how much you understand the topic you are learning. You don't need to go live on YouTube but live on private mode.&lt;/p&gt;

&lt;p&gt;Confused? Let me explain.&lt;/p&gt;

&lt;p&gt;Whenever I am learning something new, one effective thing I do is to record myself. I try to explain a confusing or complex topic and then see how well I did.&lt;/p&gt;

&lt;p&gt;I use YouTube for simplicity and quick access, but you can record yourself using your laptop's tools if you want or use whatever method you feel comfortable with. Check the screenshot below. I was recording how to know when to use a computed property and a watcher.&lt;/p&gt;

&lt;p&gt;I went live on YouTube but using private visibility. If you consider your explanation good enough, you can even publish it or just have it there for future access.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nIo7D34Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A66E5bBqIK3rDvIK4rpUjjw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nIo7D34Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A66E5bBqIK3rDvIK4rpUjjw.png" alt="Trying to explain when to use Vue.js computed properties and watchers. Screenshot by the author."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-down-what-you-have%C2%A0learned"&gt;
  &lt;/a&gt;
  Write down what you have learned
&lt;/h3&gt;

&lt;p&gt;You might not be a writer, but that doesn't mean you can't put your learning process on record and most importantly create the neural connections in your brain to store that knowledge in your long-term memory.&lt;/p&gt;

&lt;p&gt;Indeed, this article was the result of learning Vue.js. I documented the most important lessons, concepts, and elements of the process.&lt;/p&gt;

&lt;p&gt;That helped me to remember things easily.&lt;br&gt;
Blogging what you are learning will help in different areas, and it might end up becoming something meaningful to you at some point. That's what I went through - I am now a writer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-practice-practice"&gt;
  &lt;/a&gt;
  Practice, practice, practice
&lt;/h3&gt;

&lt;p&gt;This is so obvious. Once you have a better understanding of Vue's ecosystem, you should implement a project. I recommend starting from a basic one to a mid-level project.&lt;/p&gt;

&lt;p&gt;There's no silver bullet. You will need to practice over and over. That is part of our dev journey. We will never be prepared enough. We will need to re-learn and come back several times.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h1&gt;

&lt;p&gt;Learning Vue.js in less than seven days was an amazing experience. As I outlined throughout this article, that doesn't mean I am the boss of Vue.js now.&lt;/p&gt;

&lt;p&gt;It means I grasped the relevant concepts and elements because I built a learning map that sped up my learning process.&lt;/p&gt;

&lt;p&gt;Determining if your motivation to learn is internal or external is a key factor to decide what resources to include and what you have to leave out.&lt;/p&gt;

&lt;p&gt;All the prior points are about the plan and strategy to follow. They will boost your learning process with Vue.js or any JS framework or topic you are learning.&lt;/p&gt;

&lt;p&gt;Yet the execution stage is what will help you to crush your learning process.&lt;/p&gt;

&lt;p&gt;When learning Vue.js, try to explain to yourself or to a child confusing or complex concepts without using dense vocabulary or jargon.&lt;/p&gt;

&lt;p&gt;Also, try to record yourself or write down what you have learned in plain English. When you force your brain to explain a concept in your own words, you create neural connections that help you to store it in your long-term memory.&lt;/p&gt;

&lt;p&gt;** Happy coding! **&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If this post turned out helpful share it to reach more devs. Also feel free to reach me on &lt;a href="//www.mullinstack.com"&gt;my blog&lt;/a&gt; and &lt;a href="https://medium.com/@blarz"&gt;Medium&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 18 May 2021 18:05:25 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1mnn</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-1mnn</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-educational-purposes"&gt;
  &lt;/a&gt;
  For educational purposes 👀
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/hotpotatoc"&gt;@hotpotatoc&lt;/a&gt;
 made a clone of Twitter using VueJS as its frontend and Golang as its backend server. Super cool!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hotpotatoc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZO3z6fO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s---J3HYwZV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386058/8ac55134-c938-4ce3-b00e-029f9ed03c44.jpg" alt="hotpotatoc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hotpotatoc/i-made-a-twitter-clone-with-vuejs-and-go-59jf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I made a Twitter Clone with VueJS and Go&lt;/h2&gt;
      &lt;h3&gt;Juan Christian ・ May 14 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#go-with-the-flow"&gt;
  &lt;/a&gt;
  Go with the flow
&lt;/h2&gt;

&lt;p&gt;— the git flow, that is. &lt;a class="mentioned-user" href="https://dev.to/theowlsden"&gt;@theowlsden&lt;/a&gt;
 reviews the basics of Git-flow and how it can help you in this article. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theowlsden" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpaqbVBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--i1FKrDD3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/603640/5e20119b-e2b7-43b5-a49b-c434f77c4340.jpg" alt="theowlsden image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theowlsden/git-flow-non-technical-intro-3ahh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Git-flow, non-technical intro.&lt;/h2&gt;
      &lt;h3&gt;Shaquil Maria ・ May 11 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#todayilearned&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#detect-advise-fix"&gt;
  &lt;/a&gt;
  Detect, advise, fix
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/opinionatedpie"&gt;@opinionatedpie&lt;/a&gt;
 has rounded up five tools that help you do all three when it comes to security vulnerabilities 🔥 &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/opinionatedpie" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzmuzWwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3eavZjGF--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/623404/139b8342-1247-452a-84cb-4444b371aede.jpg" alt="opinionatedpie image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/opinionatedpie/5-developer-tools-for-detecting-and-fixing-security-vulnerabilities-h1j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 developer tools for detecting and fixing security vulnerabilities&lt;/h2&gt;
      &lt;h3&gt;ingrid.e ・ May 12 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tooling&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#with-great-power-comes-great-complexity"&gt;
  &lt;/a&gt;
  With great power comes great... complexity
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/aveuiller"&gt;@aveuiller&lt;/a&gt;
, our head Kubernetes chef, is here to help us wade through the (at times, murky) waters of this powerful orchestrator. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/aveuiller" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYn4usij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Gc0lXF1S--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/611814/c894717f-b91b-48a0-a003-d2fa070edc1e.jpeg" alt="aveuiller image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aveuiller/kubernetes-apprentice-cookbook-4j6h" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Kubernetes: Apprentice Cookbook&lt;/h2&gt;
      &lt;h3&gt;Antoine Veuiller ・ May 11 ・ 17 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kubernetes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#open-source-culture-and-communication"&gt;
  &lt;/a&gt;
  Open source culture and communication
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pragativerma18"&gt;@pragativerma18&lt;/a&gt;
's informative post explains a handful of open-source nuances with the goal of helping us arrive at a deeper understanding of the community. Love it!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pragativerma18" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kl_m4K1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JR-0Kc_W--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/242611/68277387-0fa0-4c79-ad6f-4be3ddc940b7.jpeg" alt="pragativerma18 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pragativerma18/open-source-best-practices-902" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Open Source Best Practices&lt;/h2&gt;
      &lt;h3&gt;Pragati Verma ・ May 15 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#on-your-markdown-get-set-go"&gt;
  &lt;/a&gt;
  On your mark(down), get set... go!
&lt;/h2&gt;

&lt;p&gt;Check out &lt;a class="mentioned-user" href="https://dev.to/alagrede"&gt;@alagrede&lt;/a&gt;
's awesome .md-based note-taking app &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/alagrede" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7S1Xj1Iu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jFtj15DP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/47181/032821dc-6e13-4359-94f8-9596b45fb7ad.jpg" alt="alagrede image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/alagrede/dev-tool-a-markdown-editor-for-developers-1j13" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Dev tool: A Markdown editor for developers 🔥&lt;/h2&gt;
      &lt;h3&gt;Anthony Lagrede ・ May 11 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-ethereum-guide-for-devs-that-youve-been-waiting-for"&gt;
  &lt;/a&gt;
  The Ethereum guide for DEVs that you've been waiting for
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dabit3"&gt;@dabit3&lt;/a&gt;
 to the rescue.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gYALFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YawV5F9h--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/41231eb2-054b-4417-bc35-814e491a2d5d.jpeg" alt="dabit3 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dabit3/how-to-get-into-ethereum-crypto-web3-as-a-developer-9l6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Get Into Ethereum | Crypto | Web3 as a Developer&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit ・ May 12 ・ 10 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cryptocurrency&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Is it worth it to cross-post on Medium in 2021?</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Tue, 18 May 2021 18:01:39 +0000</pubDate>
      <link>https://dev.to/jmfayard/is-it-worth-it-to-cross-post-on-medium-in-2021-5dn4</link>
      <guid>https://dev.to/jmfayard/is-it-worth-it-to-cross-post-on-medium-in-2021-5dn4</guid>
      <description>&lt;p&gt;Maybe, sometimes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-writing"&gt;
  &lt;/a&gt;
  The writing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;👍🏼 Copy-pasting from DEV basically works&lt;/li&gt;
&lt;li&gt;🤔 Except when you use DEV liquid tags, but that's understandable&lt;/li&gt;
&lt;li&gt;👎🏻👎🏻 But Medium still does not support code snippets in 2021 and that's super lame. Instead of your article being a single source of truth, you have your article plus ten outside gist&lt;/li&gt;
&lt;li&gt;🤔 Remember to use the option &lt;strong&gt;Customize Canonical Link&lt;/strong&gt; to an URL on your personal website&lt;/li&gt;
&lt;li&gt;😃 Don't have a personal website yet? The wonderful people at DEV/forem have partnered with Stackbit. I use it for &lt;a href="https://jmfayard.dev/"&gt;https://jmfayard.dev/&lt;/a&gt; with great joy. See &lt;a href="https://dev.to/connecting-with-stackbit"&gt;https://dev.to/connecting-with-stackbit&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👎🏻👎🏻 Medium uses a &lt;a href="https://www.darkpatterns.org/"&gt;Dark Design Pattern&lt;/a&gt; to hide the &lt;strong&gt;Customize Canonical Link&lt;/strong&gt; option. It's hidden in a submenu &lt;strong&gt;....&lt;/strong&gt;, then the 10th entry called &lt;strong&gt;More settings&lt;/strong&gt;, then you have to scroll completely to the bottom, wait it's still hidden behind &lt;strong&gt;Advanced Settings&lt;/strong&gt;, then it's still hidden behind a checkbox, and only then do you find &lt;strong&gt;Customize Canonical Link&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-paywall"&gt;
  &lt;/a&gt;
  The paywall
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;👎🏻 As a reader, I hate the Medium Paywall&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤔 But that would be OK if it actually gives writers sustainable income. There is a paywall to access the Financial Times articles, and it segregates between users who don't want to pay and hate it, and users who get lots of value from the FT and pay. And that's OK.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👍🏼 And sometimes, you get real money on Medium. My article &lt;a href="https://betterprogramming.pub/what-is-your-current-salary-is-a-red-flag-that-you-dont-want-to-work-there-8a4f19a91bf"&gt;“What’s Your Current Salary?” Is a Red Flag That You Don’t Want to Work There&lt;/a&gt; got 21K view and I earned with it $923.36 to this day&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤔 But wait, there is a catch, it happened only once, and I have basically given up retrying&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👎🏻 And that's because on Medium, &lt;strong&gt;Publications have all the power&lt;/strong&gt;. If you publish on your own name, unless you are a celebrity, which I assume lots of my readers are, you will get few views and peanuts in terms of dollar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤔 Isn't that normal if we follow the analogy of the FT paywall? Well no, let's be real here, Medium publications will not play the role of improving your writing the way a professional editor with a set of rules would. It's just one or few guys (probably not lots of women) who earn lots of followers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👎🏻 But actually publications don't earn the followers either, they just rent it to Medium. My friend at &lt;a href="https://blog.kotlin-academy.com/"&gt;https://blog.kotlin-academy.com/&lt;/a&gt; would like to move away from Medium, but it's only possible if you don't care about loosing all your readers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👎🏻 And I really disliked the experience of submitting to publications. You put lots of work in your content, you click submit, a random number of days later you get a message "&lt;em&gt;Thank you, but I will pass on this one&lt;/em&gt;".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;😃 On the other hand, if the publication owner is a friend, I would cross post to his publication.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;🤔 I'm not sure readers get a ton of value from the content behind the paywall anyway. For example, my article &lt;a href="https://dev.to/jmfayard/what-is-your-current-salary-is-a-red-flag-that-you-don-t-want-to-work-here-3aji"&gt;&lt;em&gt;What's Your Current Salary&lt;/em&gt; is available freely on DEV&lt;/a&gt;, and intentionally so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👎🏻👎🏻 Medium uses another &lt;a href="https://www.darkpatterns.org/"&gt;Dark Design Pattern&lt;/a&gt; to confuse people into using the paywall whether they want it or not. I have just published an article today under my company account &lt;a href="https://medium.zenika.com/15-command-line-tools-which-spark-joy-in-your-terminal-ec420d770bcc"&gt;https://medium.zenika.com/15-command-line-tools-which-spark-joy-in-your-terminal-ec420d770bcc&lt;/a&gt; It's part of the paywall, not because we chose to because even after following the help page, neither my colleague in charge of the publication nor I can find how to deactivate it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Cross-posting to Medium can be interesting for reach and sometimes for money, but there are big cons as well.&lt;/p&gt;

&lt;p&gt;In general, it's not an enjoyable experience.&lt;/p&gt;

&lt;p&gt;If you work at Medium, I think you should protest the lack of code snippets and even more against the dark patterns designed to screw the writers.&lt;/p&gt;

</description>
      <category>meta</category>
      <category>writing</category>
      <category>watercooler</category>
      <category>healthydebate</category>
    </item>
    <item>
      <title>CI for Dotnet project with GitHub Action</title>
      <author>ohalay</author>
      <pubDate>Tue, 18 May 2021 17:59:00 +0000</pubDate>
      <link>https://dev.to/ohalay/ci-for-dotnet-project-with-github-action-5hmp</link>
      <guid>https://dev.to/ohalay/ci-for-dotnet-project-with-github-action-5hmp</guid>
      <description>&lt;p&gt;Я розкажу як можна автоматизувати роботу використовуючи можливості GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-ci-for-dotnet"&gt;
  &lt;/a&gt;
  Implement CI for dotnet
&lt;/h2&gt;

&lt;p&gt;Для створення СI ми будемо використовувати функціональність &lt;a href="https://docs.github.com/en/actions/guides/building-and-testing-net"&gt;GitHub Actions&lt;/a&gt;. GitHub actions - надає можливість автоматизації процесів розробки. GitHub Actions оперує концепцією workflow, що є по-суті одиницею автоматизації. Workflow запускається подіями (push, pull_request, cron та інші). GitHub Actions, як і більшість CI систем використовує &lt;code&gt;.yml&lt;/code&gt; синтаксис для опису одиниць автоматизації. Є два способи як можна створити workflow: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Вручну&lt;/li&gt;
&lt;li&gt;Безпосередньо з GitHub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Для створення CI необхідно вибрати свій репозиторій в GitHub перейти на вкладку &lt;strong&gt;Actions&lt;/strong&gt; далі &lt;strong&gt;New workflow&lt;/strong&gt; і обрати &lt;strong&gt;NET&lt;/strong&gt;. Після цього залишилось тільки зробити &lt;strong&gt;commit&lt;/strong&gt; обраного файлу.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Описана автоматизація запускається кожного разу коли ми робимо &lt;em&gt;pull_request&lt;/em&gt; чи &lt;em&gt;push&lt;/em&gt; в гілку &lt;em&gt;master&lt;/em&gt; і збирає наш проект потім запускає тести. Щоб трохи покращити наш процес GitHub має функцію &lt;strong&gt;Branch protection rule&lt;/strong&gt;, яка дозволяє налаштувати правила для наших pull_request. Для нас є цікавою опція &lt;strong&gt;Require status checks to pass before merging&lt;/strong&gt;, за допомогою якої можна заборонити &lt;strong&gt;merge&lt;/strong&gt; коли наш &lt;strong&gt;build workflow&lt;/strong&gt; виконався неуспішно.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--apAL3X1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1ZiB2g5YuSajrVpjzwOCrpdvUK0p170YK" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apAL3X1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://drive.google.com/uc%3Fid%3D1ZiB2g5YuSajrVpjzwOCrpdvUK0p170YK" alt="check"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Якщо нам необхідно додати нову автоматизацію, то вона має знаходитися в папці &lt;code&gt;.github\workflows&lt;/code&gt;. І нашою вишенькою буде &lt;code&gt;badge&lt;/code&gt; який ми можемо додати до нашого репозиторія про результат виконання. Для цього необхідно  перейти на вкладку &lt;strong&gt;Actions&lt;/strong&gt; вибрати наш Action - &lt;strong&gt;Build&lt;/strong&gt; та в меню обрати &lt;strong&gt;Create status badge&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;В загальному досить зручний інструмент, зіткнувся тільки з однією проблемою, я створював тестовий &lt;code&gt;workflows&lt;/code&gt;, який я потім видалив з репозиторія, але він залишився у вкладці &lt;em&gt;Actions&lt;/em&gt;, щоб видалити його звідти необхідно видалити всі запуски цієї одиниці автоматизації.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#add-sonar%D1%81loud"&gt;
  &lt;/a&gt;
  Add Sonarсloud
&lt;/h2&gt;

&lt;p&gt;Sonarсloud - статичний аналізатор коду, що надає інформацію про покриття тестами, дублювання, підтримуваність та безпеку коду. Він має хорошу інтеграцію з GitHub. Для того щоб додати наш репозиторій до &lt;em&gt;Sonarсloud&lt;/em&gt; необхідно зробити наступні кроки:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Логуємось в &lt;a href="https://sonarcloud.io/"&gt;https://sonarcloud.io/&lt;/a&gt; використовуючи &lt;em&gt;GitHub&lt;/em&gt; і обираємо &lt;em&gt;репозиторій&lt;/em&gt; який ми хочемо проаналізувати.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0dmP6Kg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uozxkh9ebp6ija1r7vq1.PNG" alt="sonar"&gt;
&lt;/li&gt;
&lt;li&gt;Вибираємо CI &lt;em&gt;GitHab Actions&lt;/em&gt; і записуємо &lt;code&gt;SONAR_TOKEN&lt;/code&gt; в &lt;em&gt;GitHub Secrets&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-onz1Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7d1ti8bnjcsy9254p0i.PNG" alt="secret"&gt;
&lt;/li&gt;
&lt;li&gt;Далі вибираємо &lt;code&gt;NET&lt;/code&gt; і копіюємо згенерований &lt;code&gt;.yml&lt;/code&gt; до нашого репозиторію. Необхідно тільки замінити &lt;code&gt;&amp;lt;your clean build command&amp;gt;&lt;/code&gt; на наші команди для побудови &lt;code&gt;dotnet build&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Аналізатор коду готовий до роботи і можна використовувати &lt;code&gt;badge&lt;/code&gt; для метрик. Щоб додати покриття тестами необхідно згенерувати результат запуску тестів в зрозумілому для &lt;em&gt;sonarcloud&lt;/em&gt; форматі це наприклад &lt;strong&gt;opencover&lt;/strong&gt;. Для цього необхідно додати конфігурацію для opencover&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;run: |
  .\.sonar\scanner\dotnet-sonarscanner begin /k:"ohalay_TestSonarCloud" /o:"ohalay" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.language="cs" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"
  dotnet build
  dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
  .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Даний інструмент хороший тим, що дозволяє знайти проблеми в коді, що вже в нашому репозиторії та в коді, який ще не потрапив в наш репозиторій (&lt;em&gt;pull_request&lt;/em&gt;). Також працюючи з sonarcloud наткнувся на проблему, коли тести виконуються не успішно, а сам запуск одиниці автоматизації залишається успішним, щоб це виправити необхідно перенести запуск тестів в окремий крок.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#add-dependabot"&gt;
  &lt;/a&gt;
  Add Dependabot
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically"&gt;Dependabot&lt;/a&gt; - функціонал GitHub який автоматично моніторить і оновлює версії пакетів створюючи &lt;em&gt;pull_request&lt;/em&gt; для цього. Щоб додати цей функціонал до реопзиторія необхідно перейти на вкладку &lt;strong&gt;Settings&lt;/strong&gt; вибрати &lt;strong&gt;Security &amp;amp; analysis&lt;/strong&gt; і ввімкнути &lt;strong&gt;Dependabot security updates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWMmCUrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq4l9tkq3172eookkeym.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWMmCUrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq4l9tkq3172eookkeym.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Після цього залишається тільки додати файл конфігурації до нашого репозиторія &lt;code&gt;.github/dependabot.yml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: 2
updates:

  - package-ecosystem: "github-actions"
    directory: "/"
    target-branch: "master"
    schedule:
      interval: "daily"

  - package-ecosystem: "nuget"
    directory: "/"
    target-branch: "master"
    schedule:
      interval: "daily"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Зараз в нашому репозиторію версії &lt;code&gt;nuget&lt;/code&gt; та &lt;code&gt;github-actions&lt;/code&gt; пакетів оновлюються автоматично. Важливо є те, що &lt;code&gt;dependabot.yml&lt;/code&gt; обов'язково має знаходитись в &lt;em&gt;master&lt;/em&gt; гілці. І щоб &lt;em&gt;dependabot&lt;/em&gt; мав доступ завантажувати результати аналізу в &lt;em&gt;sonatcloud&lt;/em&gt;, то необхідно додати йому &lt;code&gt;SONAR_TOKEN&lt;/code&gt;. Також зіткнувся з проблемою, коли хотів налаштувати автоматичне оновлення пакетів лиши &lt;em&gt;minor&lt;/em&gt; версії, поки цей &lt;a href="https://github.com/dependabot/dependabot-core/issues/2219"&gt;функціонал ще в розробці&lt;/a&gt; єдиний варіант для кожного пакету вказати максимальну версію до якої можна оновлювати.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#add-codeql"&gt;
  &lt;/a&gt;
  Add CodeQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://securitylab.github.com/tools/codeql/"&gt;CodeQL&lt;/a&gt; - семантичний аналізатор коду, який дозволяє виявити потенційні вразливості в коді. Додати його можна перейшовши на вкладку &lt;strong&gt;Security&lt;/strong&gt; вибрати &lt;strong&gt;Code scanning alerts&lt;/strong&gt; і додати одиницю автоматизації для цього.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzXZIcYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktardzyeabcuupadvg3a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzXZIcYR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktardzyeabcuupadvg3a.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Конфігурація виглядає наступним чином&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: CodeQL

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: github/codeql-action/init@v1
      with:
        languages: csharp
    - uses: github/codeql-action/autobuild@v1
    - uses: github/codeql-action/analyze@v1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Перевагою такого підходу є те що всі налаштування знаходяться в одному місці, в нашому репозиторії і таким чином їх зручно підтримувати.&lt;br&gt;
Трохи про ціни:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Actions - 2000 безкоштовних хвилин в місяць для приватних репозиторіїв з &lt;em&gt;free GitHub plan&lt;/em&gt; (публічні безкоштовно)&lt;/li&gt;
&lt;li&gt;SonarCloud -  безкоштовний для публічних проектів&lt;/li&gt;
&lt;li&gt;Dependabot - безкоштовний, зараз є частиною GitHub&lt;/li&gt;
&lt;li&gt;CodeQL - використовує хвилини з GitHub Actions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Приклад GitHub проекту, який містить описану вище конфігурацію &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ohalay"&gt;
        ohalay
      &lt;/a&gt; / &lt;a href="https://github.com/ohalay/TestSonarCloud"&gt;
        TestSonarCloud
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Test SonarCloud&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ohalay/TestSonarCloud/actions/workflows/build.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PaEIElNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ohalay/TestSonarCloud/actions/workflows/build.yml/badge.svg" alt="Build"&gt;&lt;/a&gt;
&lt;a href="https://github.com/ohalay/TestSonarCloud/actions/workflows/codeql-analysis.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tx7nqvPl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ohalay/TestSonarCloud/actions/workflows/codeql-analysis.yml/badge.svg" alt="CodeQL"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/60fa641d68392f7b6ec27edc15eadb257f99fe4dc05f06bec6c653d102c6c2a7/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d62756773" alt="Bugs"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a83a25398e9897b658ae21d93aaa212875fdd6e6fa8a1f90a98fe578ce10a741/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d636f64655f736d656c6c73" alt="Code Smells"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/91614f860afad6b209cf33bd4dcd5633fe8636aeb3852a3f9cd53c32589de2b3/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d636f766572616765" alt="Coverage"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/50bf4cf05f59dc7a9158d1df8cdd434750e17f5995aac3ed0a520dcb378857a5/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d6475706c6963617465645f6c696e65735f64656e73697479" alt="Duplicated Lines (%)"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b34f2e9ad829efcad0649b9ed1d0e1ab82a9be875481c97a929e8b172444267f/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d6e636c6f63" alt="Lines of Code"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7a92c3924a96027137a44d9132f23e4936d6e74fa681f3437ed147e0827fd2fa/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d7371616c655f726174696e67" alt="Maintainability Rating"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/10ee6b8f7c6ad87d068a09883a38c6083bff99dc03c40458b9c669ad66a9cb59/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d616c6572745f737461747573" alt="Quality Gate Status"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c63f26110f76d1628363dc504fe85244c383675eb43f8abb687c350dc7fe26c/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d72656c696162696c6974795f726174696e67" alt="Reliability Rating"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/00ec9decedfd44ec5de4b117de341a1ddebd229b39d5231772a52c94d2a456e5/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d73656375726974795f726174696e67" alt="Security Rating"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9de67c080af5d85fc265777a7e73eb7e4ca51d38ed83c24c08e0818bdd68aefb/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d7371616c655f696e646578" alt="Technical Debt"&gt;&lt;/a&gt;
&lt;a href="https://sonarcloud.io/dashboard?id=ohalay_TestSonarCloud" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c5d194e35562c7cfb3aed1b884ef19a77661a52a2e7c111c271758eb83ec996/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d6f68616c61795f54657374536f6e6172436c6f7564266d65747269633d76756c6e65726162696c6974696573" alt="Vulnerabilities"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Simple API porject to test Github Action with SonarCloud&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ohalay/TestSonarCloud"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>dotnet</category>
      <category>ukrainian</category>
      <category>github</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Random Open-source Projects</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 18 May 2021 17:54:37 +0000</pubDate>
      <link>https://dev.to/sm0ke/random-open-source-projects-54b5</link>
      <guid>https://dev.to/sm0ke/random-open-source-projects-54b5</guid>
      <description>&lt;p&gt;Hello coders,&lt;/p&gt;

&lt;p&gt;This article presents a shortlist with a few (really) nice &lt;strong&gt;open-source projects&lt;/strong&gt; published on Github by coding gurus and small companies. The sources can be used just for fun, to code other projects on top, or just to analyze the sources and learn programming. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.loopple.com/"&gt;Loople&lt;/a&gt; - Drag and Drop builder for dashboards&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://editorjs.io/"&gt;Editor.js&lt;/a&gt; - a nice block styled editor&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://material-tailwind.com/"&gt;Material Tailwind&lt;/a&gt; - components library for Tailwind CSS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackedit.io/"&gt;Stack Edit&lt;/a&gt; - In-browser Markdown editor&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://demo.themesberg.com/pixel-bootstrap-5-ui-kit/html/pages/landing-freelancer.html"&gt;Pixel Lite&lt;/a&gt; - a nice Bootstrap 5 design (MIT License)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#loople"&gt;
  &lt;/a&gt;
  Loople
&lt;/h2&gt;

&lt;p&gt;This project provides a drag &amp;amp; drop builder for dashboards where users can add/remove widgets, menus, sidebar using Bootstrap components. Once the page is edited, the code is available for download - the product is still in BETA.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.loopple.com/"&gt;Loople&lt;/a&gt; - official homepage&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.loopple.com/builder"&gt;Loople&lt;/a&gt; - DYI builder&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gkqWcTl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2rwqovwke3p72su2idc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkqWcTl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2rwqovwke3p72su2idc.gif" alt="Loople - DYI Dashboard Builder."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#editorjs"&gt;
  &lt;/a&gt;
  Editor.Js
&lt;/h2&gt;

&lt;p&gt;Editor.js is a block-styled editor for rich media stories. It outputs clean data in JSON instead of heavy HTML markup. Designed to be API extendable and pluggable - the product has 15k+ stars on Github&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://editorjs.io/"&gt;EditorJS&lt;/a&gt; - project HOMEpage&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codex-team/editor.js"&gt;EditorJS&lt;/a&gt; - Github repository&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MIs2wcD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye6upo0ec0cyslphqvbs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MIs2wcD5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ye6upo0ec0cyslphqvbs.png" alt="EditorJS - Block Styled Editor."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#material-tailwind"&gt;
  &lt;/a&gt;
  Material Tailwind
&lt;/h2&gt;

&lt;p&gt;Easy to use components library for Tailwind CSS and Material Design. It features multiple React components, all written with Tailwind CSS classes and Material Design guidelines.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://material-tailwind.com/"&gt;Material Tailwind&lt;/a&gt; - product homepage&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/creativetimofficial/material-tailwind"&gt;Material Tailwind&lt;/a&gt; - Github repository (MIT License)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V28qaR-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zubo54ct8zjzn4fq9w7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V28qaR-k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zubo54ct8zjzn4fq9w7.png" alt="Material Tailwind - UI Kit."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#pixel-lite"&gt;
  &lt;/a&gt;
  Pixel Lite
&lt;/h2&gt;

&lt;p&gt;A modern Bootstrap 5 design that comes with a few nice pages and UI components. Pixel is a free, fully responsive, modern Bootstrap UI Kit that will help you build creative and professional websites. Use our components and sections, switch some Sass variables to build and arrange pages to best suit your needs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://demo.themesberg.com/pixel-bootstrap-5-ui-kit/html/pages/landing-freelancer.html"&gt;Pixel Lite&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/themesberg/pixel-bootstrap-ui-kit"&gt;Pixel Lite&lt;/a&gt; - source code published on Github (MIT License) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZSRFZhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyxnmfuclyt1dld6wuxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZSRFZhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyxnmfuclyt1dld6wuxw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#stack-edit"&gt;
  &lt;/a&gt;
  Stack Edit
&lt;/h2&gt;

&lt;p&gt;Full-featured, open-source Markdown editor based on PageDown, the Markdown library used by Stack Overflow and the other Stack Exchange sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://stackedit.io/"&gt;Stack Edit&lt;/a&gt; - product HOMEpage&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/benweet/stackedit"&gt;Stack Edit&lt;/a&gt; - source code published on Github - 18k stars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xAAay_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7mejfyeoi1jkrzp3y1b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xAAay_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7mejfyeoi1jkrzp3y1b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published on Dev.to&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/next-js-templates-a-curated-list-56fo"&gt;NextJS Templates&lt;/a&gt; - free &amp;amp; commercial products&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Dashboards&lt;/a&gt; - provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>5 CSS Bad Coding Habits</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 18 May 2021 17:52:20 +0000</pubDate>
      <link>https://dev.to/melnik909/5-css-bad-coding-habits-1he3</link>
      <guid>https://dev.to/melnik909/5-css-bad-coding-habits-1he3</guid>
      <description>&lt;p&gt;A lot of time I check HTML/CSS and I got a collection of mistakes. And I'd like to share my collection of CSS bad habits that I saw in the majority of cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-properties-for-all-elements-and-then-reset-one-of-them"&gt;
  &lt;/a&gt;
  Defining properties for all elements and then reset one of them
&lt;/h2&gt;

&lt;p&gt;I face how people set some property and then reset it. That leads me to confuse because I like shortly CSS. And I want to show my vision in the following example.&lt;/p&gt;

&lt;p&gt;There is an issue when you should set margins between elements. How people do. At first, they set to all elements and then reset from the first or last element. So they'll get 2 at-rules.&lt;/p&gt;

&lt;p&gt;But there are selectors such as the nth-child/nth-of-type selectors, the :not() pseudo-class, or the next-sibling combinator (known as +) that help to write same in 1 at-rule.&lt;/p&gt;

&lt;p&gt;This lifehack helps me to save the compact size of my CSS. So I hope you'll apply it in your work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/*or*/&lt;/span&gt;
&lt;span class="nc"&gt;.item&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/*or*/&lt;/span&gt;
&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#defining-display-block-to-absolutely-positioned-or-fixed-positioned-elements"&gt;
  &lt;/a&gt;
  Defining display: block to absolutely positioned or fixed positioned elements
&lt;/h2&gt;

&lt;p&gt;The popular mistake that I often meet is you add display: block to elements with position: absolute or position: fixed. You shouldn't do that because browser sets display: block itself for elements with position: absolute or position: fixed. &lt;/p&gt;

&lt;p&gt;That can't be changed. Besides, the inline or inline-block value will be changed to block, inline-flex -&amp;gt; flex, inline-grid -&amp;gt; grid, and inline-table -&amp;gt; table for the same reason.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/*or*/&lt;/span&gt;
&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/*or*/&lt;/span&gt;
&lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-transform-translate50-50-approach-for-centering"&gt;
  &lt;/a&gt;
  Using the transform: translate(-50%, -50%) approach for centering
&lt;/h2&gt;

&lt;p&gt;For a long time, there is the approach of centering elements using the transform property. I'm sure you wrote transform: translate(-50%, -50%) at least once.&lt;/p&gt;

&lt;p&gt;In this approach we have to use the set of 5 properties. I'd like to share the approach that'll allow reducing the code to the two properties.&lt;/p&gt;

&lt;p&gt;You probably heard auto margins is one of the main benefits of flexbox. That's happened because it's works predictable. We don't need to know the element's width and height so that it's centered.&lt;/p&gt;

&lt;p&gt;We just write margin: auto, if there is free space a browser will display by the center. If no, anyway, a browser will display it accurately.&lt;/p&gt;

&lt;p&gt;So that's my favorite way that will help in 100% of cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#defining-width-100-to-blocklevel-elements"&gt;
  &lt;/a&gt;
  Defining width: 100% to block-level elements
&lt;/h2&gt;

&lt;p&gt;There is a popular practice of using flexbox to create a multi-column grid that transforms to a single column. I think using flexbox for a multi-column grid is ok but not for creating a single-column. &lt;/p&gt;

&lt;p&gt;In this case grid's items stretch out for on parent width using width: 100%. But we forget grid's items are block-level elements that stretch that way by default. &lt;/p&gt;

&lt;p&gt;So we don't need to use the width: 100%. Just use flexbox only when you need to create a multi-column grid.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1024px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1024px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#defining-display-block-to-flexitems"&gt;
  &lt;/a&gt;
  Defining display: block to flex-items
&lt;/h2&gt;

&lt;p&gt;There is an important feature when we use flexbox. When you write display: flex for the element all its child elements (flex items) are blockified. &lt;/p&gt;

&lt;p&gt;What does it mean? All flex items that are set the display property with the inline, inline-block, inline-flex, inline-grid, or inline-table values will be changed. The inline and inline-block will changed to block, inline-flex -&amp;gt; flex, inline-grid -&amp;gt; grid and inline-table -&amp;gt; table. &lt;/p&gt;

&lt;p&gt;So don't use the inline-* values and your code will be saved clear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you like these tips go to read others on my &lt;a href="https://www.linkedin.com/in/melnik909/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Document and Test Django APIs with Swagger (Part 1)</title>
      <author>Rajesh Joshi</author>
      <pubDate>Tue, 18 May 2021 17:45:31 +0000</pubDate>
      <link>https://dev.to/rajeshj3/document-and-test-django-apis-with-swagger-part-1-2le7</link>
      <guid>https://dev.to/rajeshj3/document-and-test-django-apis-with-swagger-part-1-2le7</guid>
      <description>&lt;p&gt;Building APIs with Django Rest Framework is one of the Best Technology to work with, you have so much ways to build an API. But the problem arises when your APIs are not properly documented. But we have Swagger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  INDEX
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Setting the Environment&lt;/li&gt;
&lt;li&gt;Configuring Django&lt;/li&gt;
&lt;li&gt;Creating Models and Serializers&lt;/li&gt;
&lt;li&gt;Building APIs&lt;/li&gt;
&lt;li&gt;Building Documentation&lt;/li&gt;
&lt;li&gt;Testing our APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Swagger is one of the widely used API documentation and Testing tool. In this series we are going to use “drf-yasg2” as a Wrapper for our Django / DRF Project.&lt;/p&gt;

&lt;p&gt;Following is a Snapshot of API Documentation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CK3bMeDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjxgbfa129vr7qarbr5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CK3bMeDv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjxgbfa129vr7qarbr5i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-the-environment"&gt;
  &lt;/a&gt;
  Setting the Environment
&lt;/h2&gt;

&lt;p&gt;Start by creating a fresh Django Project. For the shake of learning we are going to create APIs for a TODO Application, In which users can Create, Read, Update and Delete (CRUD) TODOs.&lt;/p&gt;

&lt;p&gt;Create Python Virtual Environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Activate the Virtual Environment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ./env/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, install modules&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;django djangorestframework drf-yasg2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create Django project “myapp” in present working directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startproject myapp &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create Django app “todos“&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;django-admin startapp todos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Register “todos” and “drf_yasg2” in django’s settings.py (myapp/settings.py)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="s"&gt;'rest_framework'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'drf_yasg2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'todos'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, add the following code block in the same file (settings.py)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;REST_FRAMEWORK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'DEFAULT_PERMISSION_CLASSES'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;SWAGGER_SETTINGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="s"&gt;'SECURITY_DEFINITIONS'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;'Bearer'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'apiKey'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Authorization'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'in'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'header'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Edit the project’s urls.py file (myapp/urls.py)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re_path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;drf_yasg2.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;drf_yasg2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;

&lt;span class="n"&gt;schema_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_schema_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"MyApp Docs."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;default_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'v1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'admin/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

    &lt;span class="n"&gt;re_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^swagger/$'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_ui&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'swagger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'schema-swagger-ui'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run Django Migrations&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate

Applying contenttypes.0001_initial... OK
Applying auth.0001_initial... OK
Applying admin.0001_initial... OK
Applying admin.0002_logentry_remove_auto_add... OK
Applying admin.0003_logentry_add_action_flag_choices... OK
Applying contenttypes.0002_remove_content_type_name... OK
Applying auth.0002_alter_permission_name_max_length... OK
Applying auth.0003_alter_user_email_max_length... OK
Applying auth.0004_alter_user_username_opts... OK
Applying auth.0005_alter_user_last_login_null... OK
Applying auth.0006_require_contenttypes_0002... OK
Applying auth.0007_alter_validators_add_error_messages... OK
Applying auth.0008_alter_user_username_max_length... OK
Applying auth.0009_alter_user_last_name_max_length... OK
Applying auth.0010_alter_group_name_max_length... OK
Applying auth.0011_update_proxy_permissions... OK
Applying auth.0012_alter_user_first_name_max_length... OK
Applying sessions.0001_initial... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run Django Development Server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visit &lt;a href="http://127.0.0.1:8000/swagger/"&gt;http://127.0.0.1:8000/swagger/&lt;/a&gt; You should see blank API Documentation/Testing Web Page&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DABCJRV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vsepy82wie0r2ye1i5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DABCJRV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4vsepy82wie0r2ye1i5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! 🎉🎉🎉 You have Successfully generated API Documentation / Testing Page&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What’s Next?
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://stackless.tech/document-and-test-django-apis-with-swagger-part-2/"&gt;Next Tutorial&lt;/a&gt;, We’ll Create Models, Serializers and Views for our TODO Application.&lt;/p&gt;

&lt;p&gt;Thank you&lt;br&gt;
With ❤️ Team &lt;a href="https://stackless.tech/"&gt;Stackless Tech&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to build a React CRUD todo app (add localstorage)</title>
      <author>Joseph Lynn</author>
      <pubDate>Tue, 18 May 2021 17:45:12 +0000</pubDate>
      <link>https://dev.to/joelynn94/how-to-build-a-react-crud-todo-app-localstorage-4pjh</link>
      <guid>https://dev.to/joelynn94/how-to-build-a-react-crud-todo-app-localstorage-4pjh</guid>
      <description>&lt;p&gt;In this series, we will build a todo application. &lt;/p&gt;

&lt;p&gt;To begin, we will go over a very basic way to build this application and revise as we gain more knowledge.&lt;/p&gt;

&lt;p&gt;I suggest following along and if you get stuck, you can fork the code from &lt;a href="https://codesandbox.io/s/build-a-todo-app-with-react-cc4l8"&gt;the Code Sandbox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous post, we created a very simple todo app that can add new todos. Lets now add a simple storage option for the todo list. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-adding-the-useeffect-hook"&gt;
  &lt;/a&gt;
  1. Adding the useEffect hook
&lt;/h1&gt;

&lt;p&gt;We are going to use the useEffect hook to add to our application. This useEffect hook will be responsible to save new todos into local storage. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"&gt;see MDN docs on JSON.stringify&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// useEffect to run once the component mounts&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// localstorage only support storing strings as keys and values&lt;/span&gt;
    &lt;span class="c1"&gt;// - therfore we cannot store arrays and objects without converting the object&lt;/span&gt;
    &lt;span class="c1"&gt;// into a string first. JSON.stringify will convert the object into a JSON string&lt;/span&gt;
    &lt;span class="c1"&gt;// reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// add the todos as a dependancy because we want to update&lt;/span&gt;
    &lt;span class="c1"&gt;// localstorage anytime the todos state changes&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now this is what we should have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// don't forget to import useEffect from react&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// need a state to keep track of todos&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="c1"&gt;// need state to keep track of the value in the input&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// useEffect to run once the component mounts&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// local storage only support storing strings as keys and values&lt;/span&gt;
    &lt;span class="c1"&gt;// - therfore we cannot store arrays and objects without converting the object&lt;/span&gt;
    &lt;span class="c1"&gt;// into a string first. JSON.stringify will convert the object into a JSON string&lt;/span&gt;
    &lt;span class="c1"&gt;// reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// add the todos as a dependancy because we want to update the&lt;/span&gt;
    &lt;span class="c1"&gt;// local storage anytime the todos state changes&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// function to get the value of the input and set the new state&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleInuptChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// set the new state value to what's currently in the input box&lt;/span&gt;
    &lt;span class="nx"&gt;setTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// function to create a new object on form submit&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleFormSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// prevent the browser default behavior or refreshing the page on submit&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// don't submit if the input is an empty string&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// set the new todos state (the array)&lt;/span&gt;
      &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="c1"&gt;// copy the current values in state&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// setting a basic id to identify the object&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="c1"&gt;// set a text property to the value of the todo state and &lt;/span&gt;
          &lt;span class="c1"&gt;// trim the whitespace from the input&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// clear out the input box&lt;/span&gt;
    &lt;span class="nx"&gt;setTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* create a form element and pass the handleFormSubmit function 
      to the form using the onSubmit prop */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleFormSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* create an input element - make sure to add the value prop 
        with the state value passed in and the onChange prop to update
        the state every time something is typed in the input */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Create a new todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleInuptChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* create a ul to hold all of the list items */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo-list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* map over the todos array which creates a new li element for every todo
        (make sure to add the "key" prop using the unique todo.id value to the li element)
        remember this is an array of objects - so we need to access the property 
        "text" to get the value we want to display */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-restoring-todos-from-localstorage-lazy-initial-state"&gt;
  &lt;/a&gt;
  2. Restoring todos from localstorage (lazy initial state)
&lt;/h1&gt;

&lt;p&gt;We are going to change the initial state to what's saved in localstorage. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://reactjs.org/docs/hooks-reference.html#lazy-initial-state"&gt;see react docs on lazy initial state&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse"&gt;see MDN docs on JSON.parse()&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// because localstorage is synchronous - that could slow down the application&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of using an just an empty array as the initial state - we can use a function in its place,&lt;/span&gt;
  &lt;span class="c1"&gt;// which will only be executed on the initial render&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// get the todos from local storage&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savedTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// if there are todos stored&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;savedTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// return the parsed the JSON object back to a javascript object&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;savedTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// otherwise&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// return an empty array&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-put-it-all-together"&gt;
  &lt;/a&gt;
  3. Put it all together
&lt;/h1&gt;

&lt;p&gt;Now we should have simple storage solution for out todos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// don't forget to import useEffect from react&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// need state to keep track of todos&lt;/span&gt;
  &lt;span class="c1"&gt;// because localstorage is synchronous - that could slow down the application&lt;/span&gt;
  &lt;span class="c1"&gt;// instead of using an just an empty array as the initial state - we can use a function in its place,&lt;/span&gt;
  &lt;span class="c1"&gt;// which will only be executed on the initial render&lt;/span&gt;
  &lt;span class="c1"&gt;// reference: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// get the todos from local storage&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;savedTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// if there are todos stored&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;savedTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// return the parsed the JSON object back to a javascript object&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;savedTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// otherwise&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// return an empty array&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="c1"&gt;// need state to keep track of the value in the input&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// useEffect to run once the component mounts&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// local storage only support storing strings as keys and values&lt;/span&gt;
    &lt;span class="c1"&gt;// - therfore we cannot store arrays and objects without converting the object&lt;/span&gt;
    &lt;span class="c1"&gt;// into a string first. JSON.stringify will convert the object into a JSON string&lt;/span&gt;
    &lt;span class="c1"&gt;// reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// add the todos as a dependancy because we want to update the&lt;/span&gt;
    &lt;span class="c1"&gt;// local storage anytime the todos state changes&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// function to get the value of the input and set the new state&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleInuptChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// set the new state value to what's currently in the input box&lt;/span&gt;
    &lt;span class="nx"&gt;setTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// function to create a new object on form submit&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleFormSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// prevent the browser default behavior or refreshing the page on submit&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// don't submit if the input is an empty string&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// set the new todos state (the array)&lt;/span&gt;
      &lt;span class="nx"&gt;setTodos&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="c1"&gt;// copy the current values in state&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// setting a basic id to identify the object&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="c1"&gt;// set a text property to the value of the todo state and&lt;/span&gt;
          &lt;span class="c1"&gt;// trim the whitespace from the input&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// clear out the input box&lt;/span&gt;
    &lt;span class="nx"&gt;setTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* create a form element and pass the handleFormSubmit function 
      to the form using the onSubmit prop */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleFormSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* create an input element - make sure to add the value prop 
        with the state value passed in and the onChange prop to update
        the state every time something is typed in the input */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Create a new todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleInuptChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* create a ul to hold all of the list items */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo-list&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* map over the todos array which creates a new li element for every todo
        (make sure to add the "key" prop using the unique todo.id value to the li element)
        remember this is an array of objects - so we need to access the property 
        "text" to get the value we want to display */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the second post in this series. Keep in mind that in this post, we added slightly more functionality to the app. We will continue to add more functionality in the coming posts. &lt;/p&gt;

&lt;p&gt;Thanks for reading! &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How we got rid of cookie consent banners and why  </title>
      <author>aclarembeau</author>
      <pubDate>Tue, 18 May 2021 17:34:47 +0000</pubDate>
      <link>https://dev.to/aclarembeau/how-we-got-rid-of-cookie-consent-banners-and-why-106i</link>
      <guid>https://dev.to/aclarembeau/how-we-got-rid-of-cookie-consent-banners-and-why-106i</guid>
      <description>&lt;p&gt;When building &lt;a href="https://datelist.io"&gt;Datelist&lt;/a&gt;, there is one thing I was sure of: to build great software, you need great UX. Software should be focused on bringing the most value possible to our users, with the less friction possible. And, when I talk about friction, there is one thing that always hurts: cookie consent banners. &lt;/p&gt;

&lt;p&gt;I'll not try making a UX/UI lesson about them: first of all because I wouldn't be able to do so, but you don't need to be an expert to understand why they're bad. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nobody reads them, it just interrupts the user flow &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to studies "&lt;a href="https://www.businessinsider.com/deloitte-study-91-percent-agree-terms-of-service-without-reading-2017-11?IR=T"&gt;You're not alone, no one reads terms of service agreements&lt;/a&gt;". That's the same for the cookie policy. &lt;/p&gt;

&lt;p&gt;When building my app, I didn't want to find the best way to make it as hidden as possible or finding the best copy to force the users to accept something they wouldn't even read. &lt;/p&gt;

&lt;p&gt;If you think more carefully about that, there is something deeply wrong with the way we force people to accept cookies on websites. &lt;/p&gt;

&lt;p&gt;The solution was simple: &lt;strong&gt;Just get rid of cookies&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Despite anyone could find it, there is probably a mental shift to do when building apps these days. &lt;a href="https://blog.google/products/ads-commerce/a-more-privacy-first-web/"&gt;Third party cookies are not there for a long time anymore&lt;/a&gt;, so, when building an app, let's forget the classical "include those many scripts in your header" pattern, and let's build apps that don't use marketing cookies. That's not that hard, and it will save you problems later. &lt;/p&gt;

&lt;p&gt;Bonus point: If you still need google analytics for your website, but don't want to use it for retargeting, you can keep doing it using the &lt;a href="https://goenning.net/2021/02/01/cookieless-google-analytics/#:~:text=Without%20cookies%20the%20script%20is,machine%20during%20the%20first%20visit."&gt;Cookieless Google Analytics Setup&lt;/a&gt; ;) &lt;/p&gt;

</description>
      <category>privacy</category>
      <category>webdev</category>
      <category>ux</category>
    </item>
    <item>
      <title>Getting started with the Notion API JavaScript SDK</title>
      <author>Craig Holliday</author>
      <pubDate>Tue, 18 May 2021 17:30:57 +0000</pubDate>
      <link>https://dev.to/craigaholliday/getting-started-with-the-notion-api-javascript-sdk-c50</link>
      <guid>https://dev.to/craigaholliday/getting-started-with-the-notion-api-javascript-sdk-c50</guid>
      <description>&lt;p&gt;The &lt;a href="https://www.notion.so/Getting-started-with-the-Notion-API-JavaScript-SDK-237536a12289464fa7ebfc3c70284343"&gt;public beta for the Notion API&lt;/a&gt; went live recently and it is going to make Notion 10x more powerful.&lt;/p&gt;

&lt;p&gt;That means it is the perfect time to jump on the bandwagon and start building integrations of your own.&lt;/p&gt;

&lt;p&gt;In this post let's go over how to get started with the Notion API by using the &lt;a href="https://github.com/makenotion/notion-sdk-js"&gt;Notion JavaScript SDK&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#account-setup"&gt;
  &lt;/a&gt;
  Account setup
&lt;/h2&gt;

&lt;p&gt;This is covered better with gifs in the &lt;a href="https://developers.notion.com/docs/getting-started"&gt;official getting started page&lt;/a&gt; so read through that for more detailed instructions.&lt;/p&gt;

&lt;p&gt;Here is a short outline of setting up your account and first integration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a Notion account (If you don't already have one)&lt;/li&gt;
&lt;li&gt;Create a workspace or log into one as an Admin&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.notion.com/docs/getting-started#create-a-new-integration"&gt;Create a new integration&lt;/a&gt;. Save the &lt;code&gt;Internal Integration Token&lt;/code&gt; because we will be using that later.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.notion.com/docs/getting-started#share-a-database-with-your-integration"&gt;Share a database with your integration&lt;/a&gt;. You have to share databases with the integration for security purposes. You can have tons of databases on a single Notion account so it wouldn't be the best if an integration received access to everything connected to one account.&lt;/li&gt;
&lt;li&gt;Copy the &lt;code&gt;Database ID&lt;/code&gt;. When I set this up I had Notion up in my browser so the URL with the &lt;code&gt;Database ID&lt;/code&gt; looked like this &lt;code&gt;https://www.notion.so/${DATABASE_ID}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You are ready to go!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#ways-to-explore-the-notion-api"&gt;
  &lt;/a&gt;
  Ways to explore the Notion API
&lt;/h2&gt;

&lt;p&gt;Before going into our example I want to say there are so many cool ways to explore the Notion API.&lt;/p&gt;

&lt;p&gt;We will be using the &lt;a href="https://github.com/makenotion/notion-sdk-js"&gt;Notion JavaScript SDK&lt;/a&gt; but there is also a &lt;a href="https://www.postman.com/notionhq/workspace/notion-s-public-api-workspace/overview"&gt;Postman Workspace&lt;/a&gt; which I highly recommend taking a look at.&lt;/p&gt;

&lt;p&gt;There are also a couple of &lt;a href="https://developers.notion.com/page/examples"&gt;integration examples&lt;/a&gt; you can check out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-project"&gt;
  &lt;/a&gt;
  Example Project
&lt;/h2&gt;

&lt;p&gt;Let's hop into some code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h3&gt;

&lt;p&gt;Navigate to where you want to create your project.&lt;/p&gt;

&lt;p&gt;Create your example folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir notion-api-example &amp;amp;&amp;amp; cd notion-api-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize your project with NPM. (Using &lt;code&gt;-y&lt;/code&gt; to say yes to all default configuration options)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install the &lt;a href="https://github.com/makenotion/notion-sdk-js"&gt;Notion JavaScript SDK&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @notionhq/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an index file for our code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we will add a script to our &lt;code&gt;package.json&lt;/code&gt; to run our code.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;"start": "node index.js"&lt;/code&gt; and your &lt;code&gt;package.json&lt;/code&gt; should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"notion-api-example"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@notionhq/client"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^0.1.3"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#actual-code"&gt;
  &lt;/a&gt;
  Actual code
&lt;/h3&gt;

&lt;p&gt;Now open up &lt;code&gt;index.js&lt;/code&gt; and paste the code below. Then replace &lt;code&gt;INTERNAL_INTEGRATION_TOKEN&lt;/code&gt; with the token we saved in the setup and &lt;code&gt;DATABASE_ID&lt;/code&gt; with the Database ID we saved in the setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Require the Client object from the Notion JS SDK&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@notionhq/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Create a notion client&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INTERNAL_INTEGRATION_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;databaseId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DATABASE_ID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// Call `retrieve` on `databases` to retrieve a database object.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;databases&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;database_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;databaseId&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this code in place, we can now execute it by running the start script &lt;code&gt;npm run start&lt;/code&gt;. If the database id and your integration token are entered correctly you should see a log of the JSON representing the retrieved database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refactor-and-creating-a-page"&gt;
  &lt;/a&gt;
  Refactor and creating a page
&lt;/h3&gt;

&lt;p&gt;Before we wrap up, let's refactor what we currently have and add a function to create a new page in our database.&lt;/p&gt;

&lt;p&gt;Change all the code in &lt;code&gt;index.js&lt;/code&gt; to the code below.&lt;/p&gt;

&lt;p&gt;This is a lot of code so check the added comments for what each piece of the code is doing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@notionhq/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INTERNAL_INTEGRATION_TOKEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// 1. Refactor `retrieveDatabase` to a function&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;retrieveDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;databaseId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;databases&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;database_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;databaseId&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 2. Build a `createPageInDatabase` function&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createPageInDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;databaseId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The parent object to add to. Here just the ID of the database but this can also be the id of a page.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;database_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;databaseId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Properties object. This has to match properties in the database.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Awesome New Page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Children object that contains all the awesome Notion block objects.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heading_2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;heading_2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My awesome cool page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paragraph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I created my awesome new page while following along with the KoalaTea Getting started with the Notion API JavaScript SDK blog post. Now I should go read more KoalaTea blog posts. 😄&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://koalatea.io/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="c1"&gt;// The page object where we put all our other objects together to create a new page.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Finally the request to create a page.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{})(&lt;/span&gt;&lt;span class="nx"&gt;createPageInDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DATABASE_ID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now executing this code (&lt;code&gt;npm run start&lt;/code&gt;) we should get a response telling us that a new page was created in our database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-do-now"&gt;
  &lt;/a&gt;
  What to do now?
&lt;/h2&gt;

&lt;p&gt;Now that you have gotten started with the Notion API you should look at the &lt;a href="https://developers.notion.com/reference"&gt;API documentation&lt;/a&gt; and &lt;a href="https://developers.notion.com/page/examples"&gt;code samples&lt;/a&gt; to see more fleshed-out details of what you can do with the API.&lt;/p&gt;

&lt;p&gt;After you have read through the rest of the documentation you should build a project. I suggest you try to build a CMS which is a fantastic project to explore the Notion API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cms-with-the-notion-api"&gt;
  &lt;/a&gt;
  CMS with the Notion API
&lt;/h3&gt;

&lt;p&gt;Here are some steps to build a Notion CMS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fastify.io/"&gt;Build a simple Fastify server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Start with your database but take a look at &lt;a href="https://developers.notion.com/docs/authorization"&gt;user authentication&lt;/a&gt; so others could use the CMS.&lt;/li&gt;
&lt;li&gt;Build simple routes to retrieve data from a database based on certain property filters.&lt;/li&gt;
&lt;li&gt;Create routes to add pages to the database with just the title and description. (Adding blocks seems more complicated for the first project)&lt;/li&gt;
&lt;li&gt;Deploy to &lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; or &lt;a href="https://www.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;If you have trouble, 🌟 &lt;a href="https://twitter.com/TheMrHolliday"&gt;ping me on Twitter&lt;/a&gt; 🌟&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.notion.so/Getting-started-with-the-Notion-API-JavaScript-SDK-237536a12289464fa7ebfc3c70284343"&gt;Public beta for the Notion API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.notion.com/docs/getting-started"&gt;Official getting started page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/makenotion/notion-sdk-js"&gt;Notion JavaScript SDK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.postman.com/notionhq/workspace/notion-s-public-api-workspace/overview"&gt;Postman Workspace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.notion.com/reference"&gt;API documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/"&gt;Build a simple Fastify server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌟 &lt;a href="https://twitter.com/TheMrHolliday"&gt;ping me on Twitter&lt;/a&gt; 🌟&lt;/p&gt;

&lt;p&gt;🌟🌟🌟&lt;/p&gt;

&lt;p&gt;My brother and I write all the time about React, TypeScript, R, Data Science, you name it on our blog so check it out:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://koalatea.io"&gt;KoalaTea.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌟🌟🌟&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The database for developers is here</title>
      <author>etnoctua</author>
      <pubDate>Tue, 18 May 2021 17:18:51 +0000</pubDate>
      <link>https://dev.to/planetscale/the-database-for-developers-is-here-17c4</link>
      <guid>https://dev.to/planetscale/the-database-for-developers-is-here-17c4</guid>
      <description>&lt;p&gt;Our team has worked at companies like YouTube, Amazon, Facebook, DigitalOcean, and GitHub, and we've always had to solve the same problem — database scaling.&lt;/p&gt;

&lt;p&gt;The story is the same each time... The day 1 stack is chosen to optimize for developer velocity to get that MVP out the door. After some success, years 3 or 4 are spent paying down immense technical debt — mostly due to that early database choice.&lt;/p&gt;

&lt;p&gt;Now with &lt;a href="https://bit.ly/2RYoazq"&gt;PlanetScale&lt;/a&gt;, there is a better way. Built on the Vitess engine that powers companies like YouTube, GitHub, and Square, our new database platform is fully integrated with the developer workflow and is set up to take you from idea to IPO.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2RYoazq"&gt;Try out our free Developer plan today&lt;/a&gt; and check out the new functionality that will change how you work with your database, like live database branching and non blocking schema changes.&lt;/p&gt;

</description>
      <category>database</category>
      <category>mysql</category>
      <category>cloud</category>
      <category>serverless</category>
    </item>
    <item>
      <title>How create CPF Input Mask on Salesforce Aura Framework</title>
      <author>Roger Rosset</author>
      <pubDate>Tue, 18 May 2021 17:10:57 +0000</pubDate>
      <link>https://dev.to/rrosset91/how-create-cpf-input-mask-on-salesforce-aura-framework-cno</link>
      <guid>https://dev.to/rrosset91/how-create-cpf-input-mask-on-salesforce-aura-framework-cno</guid>
      <description>&lt;p&gt;Brazilians systems that are related to person accounts and customer information, always use CPF inputs, and this type of input has it's own definitions. One of them is about the pattern.&lt;/p&gt;

&lt;p&gt;When it comes to provide custom masks within Salesforce Aura lightning inputs, everything goes into a dark zone. One often used workaround, is to use custom regex &lt;code&gt;pattern&lt;/code&gt; attribute with &lt;code&gt;patternMismatch&lt;/code&gt; message:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;messageWhenPatternMismatch="CPF Inválido. Por favor utilize o padrão 000.000.000-00"&lt;/code&gt;&lt;br&gt;
&lt;code&gt;pattern="[0-9]{3}.[0-9]{3}.[0-9]{3}-[0-9]{2}"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It works, but in terms of UX we can say it is not one of the best solutions possible. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NWuFgPKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/K8DpfWB5/invalid-cpf-mask.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NWuFgPKN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/K8DpfWB5/invalid-cpf-mask.png" alt="invalid-cpf-mask.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When working with Salesforce, specially Aura and LWC, we are always being careful about limitations, and Shadow Dom, so there is no default way to implement input masks as would be possible using pure JavaScript for example.&lt;/p&gt;

&lt;p&gt;The good news is that after a little and simple development using pure JavaScript with Aura peculiarities, you can implement a automatic CPF input mask into your &lt;code&gt;lightning:input&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;First of all, you need to create the following attribute:&lt;br&gt;
&lt;code&gt;&amp;lt;aura:attribute name="cpfValue" type="String" default=""/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that, create your lightning:input field that will be used to store the CPF information. The type here will be default, because we need the special characters on this input, otherwise, we would set the type as number, but it's not the case.&lt;br&gt;
&lt;code&gt;&amp;lt;lightning:input aura:id="cpf" label="{!v.cpfLabel}" value="{!v.cpfValue}" onchange="{!c.handleCpfChange}" class="input sfdc_usernameinput sfdc" maxlength="14" required="true"/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In my case, all the inputs uses a defined label that comes from the design file, but you don't have to worry about this. The attributes that are needed for this implementation to work, is:&lt;br&gt;
-maxlength&lt;br&gt;
-value&lt;br&gt;
-aura:id&lt;br&gt;
-onchange&lt;/p&gt;

&lt;p&gt;Now, going to the js controller, we will have the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    handleCpfChange: function (component, event){
        let inputCpf = event.getParam("value");
        component.set("v.cpfValue", inputCpf);
        let size = component.get("v.cpfValue").length;
        if(size === 3 || size === 7){
            component.set("v.cpfValue", inputCpf+'.');
        }
        if(size === 11){
            component.set("v.cpfValue", inputCpf+'-');
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this code is doing, is running every time the value on the cpf field changes, by the &lt;code&gt;onchange&lt;/code&gt; attributed that we've set before. Each time it runs, it will save the event value on the &lt;code&gt;inputCpf&lt;/code&gt; variable, and set the attribute &lt;code&gt;v.cpfValue&lt;/code&gt; with that variable value. Also, each time it will read for the length of the attribute, and when this length reaches 3 or 7, it will understand that it's time to put a dot, and when it reaches a size of 11, it will understand that it's time to put a slash.&lt;/p&gt;

&lt;p&gt;So, there you have. A custom made and ready to go CPF input mask. You can also use this logic to develop your own custom masks, the reasoning will be the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/BRwH4VH17HrLfZQneJ/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/BRwH4VH17HrLfZQneJ/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this be useful!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#roger-rosset"&gt;
  &lt;/a&gt;
  Roger Rosset
&lt;/h4&gt;

</description>
      <category>salesforce</category>
      <category>aura</category>
      <category>javascript</category>
      <category>inputmask</category>
    </item>
  </channel>
</rss>
