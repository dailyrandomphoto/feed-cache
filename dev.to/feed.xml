<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Switching accounts in dev.to </title>
      <author>Darsh</author>
      <pubDate>Wed, 08 Sep 2021 15:04:06 +0000</pubDate>
      <link>https://dev.to/programmerno24/switching-accounts-in-dev-to-19o</link>
      <guid>https://dev.to/programmerno24/switching-accounts-in-dev-to-19o</guid>
      <description>&lt;p&gt;Switching account feature is available in G-Mail, Youtube etc &lt;/p&gt;

&lt;p&gt;I want that feature in dev.to&lt;/p&gt;

&lt;p&gt;A quick reply(about when will the work start or it wont start) would be appreciated.&lt;/p&gt;

&lt;p&gt;Thanks for reading my post please press the like and the unicorn button while going.&lt;br&gt;
Thank you&lt;br&gt;
Darsh kulthia&lt;/p&gt;

</description>
      <category>help</category>
      <category>discuss</category>
      <category>accounts</category>
    </item>
    <item>
      <title>Building a client side router in React with event hooks (pt1: events)</title>
      <author>Mike Talbot</author>
      <pubDate>Wed, 08 Sep 2021 14:58:29 +0000</pubDate>
      <link>https://dev.to/miketalbot/building-a-client-side-router-in-react-with-event-hooks-pt1-events-56m7</link>
      <guid>https://dev.to/miketalbot/building-a-client-side-router-in-react-with-event-hooks-pt1-events-56m7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;I'm making a pluggable widget component with front end and serverless back end parts.  This article is the first in the series and covers the usage of custom events in React to build a router.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling events in React&lt;/li&gt;
&lt;li&gt;Raising custom events&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;I'm embarking on a collaborative project to build a serverless widget for the &lt;a href="https://4c.rocks"&gt;4C&lt;/a&gt; content creator community that I've recently joined.&lt;/p&gt;

&lt;p&gt;The first thing that this project needs is a router on the client side and as I thought I'd use React, the first thing I thought of was React Router.  But then I thought, it's just a client side router and that might make an interesting opportunity to get into the heart of that problem and allow me to understand Routers more.&lt;/p&gt;

&lt;p&gt;There's also a thing about React Router I don't like so much.  I always end up writing a wrapper around it so I can dynamically register routes in a declarative fashion rather than imperatively writing them inside the JSX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// What I want&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./something-that-declares-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/some/route/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SomeComponent&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Rather than&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./something-that-declares-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;declaredRoutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./declared-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SomeComponent&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/some/route/:id"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;declaredRoutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; 
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-router"&gt;
  &lt;/a&gt;
  What is a router?
&lt;/h2&gt;

&lt;p&gt;So ok, what do we want from a router?  We want to be able to specify a pattern of URLs supplied to our app in order to convert them into some function to be called.  The function should also be able to take parameters from a route so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   /some/:id/route?search&amp;amp;sort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Calls some registered function or component with the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt; parameters from a url like this &lt;code&gt;/some/abc123/route?search=something&amp;amp;sort=name,desc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/some/:id/route?search&amp;amp;sort&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShowInfo&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ShowInfo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="cm"&gt;/* something */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-url"&gt;
  &lt;/a&gt;
  The URL
&lt;/h2&gt;

&lt;p&gt;So for routes to work we have to deal with the &lt;code&gt;window.location&lt;/code&gt; object and know when it changes... either because we've navigated ourselves or the user has pressed the &lt;em&gt;Back&lt;/em&gt; or &lt;em&gt;Forward&lt;/em&gt; buttons.&lt;/p&gt;

&lt;p&gt;From the &lt;code&gt;location&lt;/code&gt; we will need to match routes based on the &lt;code&gt;pathname&lt;/code&gt; and extract variables from the &lt;code&gt;pathname&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; properties to pass to our component.&lt;/p&gt;

&lt;p&gt;The browser gives us an &lt;code&gt;onpopstate&lt;/code&gt; event when the user navigates using the buttons, but there is no event for the navigation to a new URL so we are going to have to deal with that ourselves. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's keep our code simple by faking &lt;code&gt;onpopstate&lt;/code&gt; events when the user navigates around our app using links.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like events, I use events everywhere in my code to loosely couple components.  We've seen above that we will need to raise and handle events quite frequently so the first step on the journey is to build some tools to aid with that process.  &lt;/p&gt;

&lt;p&gt;In this first part of the article we will create some useful functions to raise, handle and debounce events both inside and outside React components.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The Plan
&lt;/h3&gt;

&lt;p&gt;Because we are working with browser standard events I decided to just press the existing methods on &lt;code&gt;window&lt;/code&gt; into service.  However, I want to be able to pass custom properties to a handler function as additional parameters, rather than creating dozens of custom events, so we will decorate up standard &lt;code&gt;Event&lt;/code&gt; instances with the parameters passed along with the event, we'll do this so we don't accidentally conflict with any standard properties.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%C2%A0handling-events"&gt;
  &lt;/a&gt;
   Handling events
&lt;/h3&gt;

&lt;p&gt;Our first function is then one to attach a handler and deal with these extra properties, returning a method to detach the handler later.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we create an inner handler that uses a &lt;code&gt;_parameters&lt;/code&gt; property on the event object to pass additional parameters to the handler.&lt;/p&gt;

&lt;p&gt;Turning this into a hook for React is then child's play:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#raising-events"&gt;
  &lt;/a&gt;
  Raising events
&lt;/h3&gt;

&lt;p&gt;Writing a function to raise these events with custom parameters is also pretty easy:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note how we return the first parameter - that's an Inversion of Control helper, we might be raising events looking for return values, and this gives us an easy way of doing that.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Another choice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By returning the first parameter we write a lot less boilerplate.&lt;/p&gt;

&lt;p&gt;When we are working with events like &lt;code&gt;onPopState&lt;/code&gt; we also want to decorate the event object with parameters (like the &lt;code&gt;state&lt;/code&gt; for the &lt;code&gt;location&lt;/code&gt;) so we do need another function to deal with this circumstance, that we will use every now and again:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;raiseWithOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This one is very similar, just it decorates the custom event with the options object passed in.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-redrawing-things-when-events-happen"&gt;
  &lt;/a&gt;
  Bonus: Redrawing things when events happen
&lt;/h2&gt;

&lt;p&gt;We may well want to get our React components to redraw based on events that have changed some global state.  There's an easy way to do that with a &lt;code&gt;useRefresh&lt;/code&gt; hook that can either cause a refresh or register a function that will refresh after a sub function is called.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;subParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;](...&lt;/span&gt;&lt;span class="nx"&gt;subParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;refreshFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// eslint-disable-next-line react-hooks/exhaustive-deps&lt;/span&gt;
        &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;refreshFunction&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This creates us a utility function that causes React to redraw the component.  It's handy for lots of things but here we can just use it to do a refresh on an event:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="nx"&gt;useEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onPopState&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;useRefresh&lt;/code&gt; function takes a list of other functions to call.  This is sometimes useful, especially for debugging&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Redrawing X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the returned function can be made to wrap a refresh around something:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="c1"&gt;// do something with global state on window.location.search&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Set X&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this first part we've seen how to easily raise and handle events in React.  Below is the running widget that uses these techniques.  &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/miketalbot"&gt;
        miketalbot
      &lt;/a&gt; / &lt;a href="https://github.com/miketalbot/cccc-widget"&gt;
        cccc-widget
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/BIr6y6QZhjz1fEJ-h4wJ_/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>September 2021: Azure SQL News Update</title>
      <author>Anna Hoffman</author>
      <pubDate>Wed, 08 Sep 2021 14:15:31 +0000</pubDate>
      <link>https://dev.to/azure/september-2021-azure-sql-news-update-4fim</link>
      <guid>https://dev.to/azure/september-2021-azure-sql-news-update-4fim</guid>
      <description>&lt;p&gt;Today and every Wednesday Data Exposed goes live at 9AM PT on &lt;a href="https://docs.microsoft.com/en-us/learn/tv/"&gt;LearnTV&lt;/a&gt;. Every 4 weeks, we’ll do a News Update. We’ll include product updates, videos, blogs, etc. as well as upcoming events and things to look out for. We’ve included an &lt;a href="https://bit.ly/2WtkHbm"&gt;iCal file&lt;/a&gt;, so you can add a reminder to tune in live to your calendar. If you missed the episode, you can find them all at &lt;a href="https://aka.ms/AzureSQLYT"&gt;https://aka.ms/AzureSQLYT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read this blog to get all the updates and references mentioned in the show. Here’s the September  2021 update:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product updates&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This month did not contain a ton of product-specific updates, however there is one that we highlighted on the show – the Public Preview announcement of the Azure SQL Migration extension in Azure Data Studio! For those of you that follow Data Exposed, &lt;a href="https://youtu.be/Quh8Ge3y3X0"&gt;you may have seen this already, Rajesh Setlem gave us a sneak peek&lt;/a&gt;. As part of this Public Preview announcement, the extension will support migrations for both online (for migrations that require minimal downtime) and offline (for migrations where downtime persists through the duration of the migration) modes. You can use the extension to migrate to either Azure SQL Managed Instance or SQL Server on Azure VMs. Mohamed Kabiruddin came on the show to tell us all about what this means and how it works. For more information, check the documentation (&lt;a href="https://aka.ms/azuresqlmigrationextension"&gt;https://aka.ms/azuresqlmigrationextension&lt;/a&gt;) or the release blog (&lt;a href="https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Faka.ms%2Fazuresqladsmigration&amp;amp;data=04%7C01%7CAnna.Hoffman%40microsoft.com%7Cca60d1a4c9e5435d047008d969a890db%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637656995131785772%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;amp;sdata=RkzQxaluxw%2F0ixJMaVbjlB5tpIrxnXcEkTZ6ka3CN7k%3D&amp;amp;reserved=0"&gt;https://aka.ms/azuresqladsmigration&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Not really a product update, but some serious product speed! We had SQL community member Henk van der Valk, founder of &lt;a href="https://www.fulldata.nl/"&gt;FullData&lt;/a&gt;, on the show to talk about ways to maximize performance of SQL Server running on Azure VMs. And when I say maximizing performance … I mean breaking world records, so this was a cool segment. You can see his full blog on the topic &lt;a href="https://www.fulldata.nl/blog/"&gt;here&lt;/a&gt; and you can contact Henk at &lt;a href="//mailto:info@fulldata.nl"&gt;info@fulldata.nl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last but certainly not least, we had Niko Neugebaur on the show to talk about a blog series on &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/bg-p/AzureSQLBlog"&gt;Azure SQL Techcommunity&lt;/a&gt; where he breaks down fundamentals to understanding Azure SQL Managed Instance. I’ve really enjoyed getting hands on and following the blog series; last month Niko was featured as my pick of the month! You can find all the blogs at &lt;a href="https://aka.ms/sqlmi-howto"&gt;https://aka.ms/sqlmi-howto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Videos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We continued to release new and exciting Azure SQL episodes this month. Here is the list, or you can just see the &lt;a href="https://microsoft.sharepoint.com/teams/SQLServerAdoption/Shared%20Documents/YouTube/Data%20Exposed%20News%20Blogs/aka.ms/dataexposedyt"&gt;playlist&lt;/a&gt; we created with all the episodes!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  [MVP Edition] Taiob Ali: Managing SQL Server Agent jobs with Notebook Jobs in Azure Data Studio&lt;/li&gt;
&lt;li&gt;  Alexandra Ciortea and Steven Marturano: Migrating to SQL: New Conversion Reports in SSMA (Ep. 7)&lt;/li&gt;
&lt;li&gt;  Pam Lahoud: Azure SQL VM: Get the best price-performance for your SQL Server workloads on Azure VM (Ep. 4)&lt;/li&gt;
&lt;li&gt;  David Pless: Azure SQL VM: Use Azure Monitor to Track VM Cache Health (Ep. 3)&lt;/li&gt;
&lt;li&gt;  Pam Lahoud: Azure SQL VM: What is SQL Server IaaS Extension (Ep. 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve also had some great Data Exposed Live sessions. Subscribe to our &lt;a href="https://aka.ms/azuresqlyt"&gt;YouTube channel&lt;/a&gt; to see them all and get notified when we stream. Here are some of the recent live streams.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Deep Dive: Why and How Customers are Using Azure SQL Hyperscale, Denzil Ribeiro and Davide Mauri&lt;/li&gt;
&lt;li&gt;  Azure SQL Security: Network Security (Ep. 4), Rohit Nayak&lt;/li&gt;
&lt;li&gt;  Azure Data Studio Power Hour, Alan Yu, Drew Skwiers-Koballa, Julie Koesmarno, Udeesha Gautam, and Vasu Bhog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Blogs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As always, our team is busy writing blogs to share with you all. Blogs contain announcements, tips and tricks, deep dives, and more. Here’s the list I have of SQL-related topics you might want to check out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Azure Blog, data-related

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/microsoft-named-a-leader-in-the-forrester-wave-streaming-analytics-q2-2021/"&gt;Microsoft named a Leader in The Forrester Wave™: Streaming Analytics, Q2 2021&lt;/a&gt;, Jean-Sebastien Brunner&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/discover-and-assess-aspnet-apps-atscale-with-azure-migrate/"&gt;Discover and assess ASP.NET apps at-scale with Azure Migrate&lt;/a&gt;, Vineet Vikram&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/innovate-securely-with-azure/"&gt;Innovate securely with Azure&lt;/a&gt;, Scott Woodgate&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/azure-government-top-secret-now-generally-available-for-us-national-security-missions/"&gt;Azure Government Top Secret now generally available for US national security missions&lt;/a&gt;, Tom Keane&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/accelerate-application-modernization-with-azure-migrate-app-containerization/"&gt;Accelerate application modernization with Azure Migrate: App Containerization&lt;/a&gt;, Rahul Gupta&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/5-reasons-to-attend-the-azure-data-governance-digital-event/"&gt;5 reasons to attend the Azure data governance digital event&lt;/a&gt;, Cindy Na&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  SQL Server Tech Community

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/sql-server/released-microsoft-data-sqlclient-4-0-preview-1/ba-p/2685322"&gt;Released: Microsoft.Data.SqlClient 4.0 Preview 1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/sql-server/sql-server-3rd-party-backend-for-django-v1-0-released/ba-p/2654239"&gt;SQL Server 3rd Party Backend for Django v1.0 Released&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Microsoft SQL Server Blog

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://cloudblogs.microsoft.com/sqlserver/2021/08/30/move-sql-server-licenses-without-software-assurance-to-azure/"&gt;Move SQL Server licenses without Software Assurance to Azure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cloudblogs.microsoft.com/sqlserver/2021/08/24/microsoft-at-data-platform-virtual-summit-2021/"&gt;Microsoft at Data Platform Virtual Summit 2021&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Azure SQL Tech Community

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/improved-columnstore-data-loading-using-query-store-hints/ba-p/2704677"&gt;Improved columnstore data loading using Query Store hints&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/azure-sql-managed-instance-introduction-to-sqlmiops/ba-p/2687265"&gt;Azure SQL Managed Instance – introduction to #SQLMIOPS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/how-to-determine-the-timestamp-of-the-last-sql-mi-failover/ba-p/2670361"&gt;How-to determine the timestamp of the last SQL MI failover&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/learn-how-azure-sql-works-with-azure-purview-on-at-the-azure/ba-p/2645462"&gt;Learn how Azure SQL works with Azure Purview on at the Azure Data Governance event on September 28&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/how-to-find-out-reserved-and-available-disk-space-on-sql-mi/ba-p/2636930"&gt;Reserved &amp;amp; available Disk Space information for Azure SQL MI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Azure SQL Devs’ Corner

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://devblogs.microsoft.com/azure-sql/launch-build-serverless-full-stack-applications-in-azure/"&gt;LAUNCH: Build serverless, full stack applications in Azure&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Azure Database Support (SQL-related posts)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-database-support-blog/troubleshooting-azure-active-directory-integrated-authentication/ba-p/2670162"&gt;Troubleshooting Azure Active Directory Integrated Authentication in Azure SQL&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-database-support-blog/restore-database-across-servers-azure-sql-database-and-azure-sql/ba-p/2636181"&gt;Restore database across servers(Azure SQL Database and Azure SQL managed instance)- Azure Automation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/azure-database-support-blog/database-parameterization/ba-p/2672647"&gt;Database Parameterization&lt;/a&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Upcoming events&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As always, there are a lot of events coming up this month. Here are a few to put on your calendar and register for from the Azure Data team:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;September 13-18:&lt;/strong&gt; &lt;a href="https://dataplatformgeeks.com/dps2021/microsoft-at-dps/"&gt;Data Platform Summit 2021&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 13-23:&lt;/strong&gt; &lt;a href="https://azuresummit.live/"&gt;Cloud Summit 2021&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 15&lt;/strong&gt;: &lt;a href="https://musiccitytech.com/"&gt;Music City Tech 2021&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 15:&lt;/strong&gt; &lt;a href="https://www.redhat.com/en/events/webinar/lower-sql-server-costs-with-operational-efficiencies"&gt;RedHat Webinar&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 16:&lt;/strong&gt; &lt;a href="https://www.meetup.com/cloud-data-driven/events/276201694"&gt;Cloud Data Driven User Group&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 28:&lt;/strong&gt; &lt;a href="https://azuredatagovernance.eventcore.com/auth/login"&gt;Maximize the Value of Your Data in the Cloud Digital event&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 29:&lt;/strong&gt; &lt;a href="https://datadrivencommunity.com/"&gt;Future Data Driven 2021&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 29&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/en-us/events/learntv/azure-serverless-conf-september-2021/"&gt;Azure Serverless Conf&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;In addition to these upcoming events, here’s the schedule for &lt;a href="https://aka.ms/dataexposedlive"&gt;Data Exposed Live&lt;/a&gt;:&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 8:&lt;/strong&gt; &lt;a href="https://youtu.be/PpyAnS7Rbd8"&gt;Ask the Experts: SQL Server on Azure Virtual Machine&lt;/a&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://bit.ly/2Wi19d7"&gt;Submit&lt;/a&gt; your questions today!
&lt;strong&gt;September 15:&lt;/strong&gt; &lt;a href="https://youtu.be/IImnbYDdugw"&gt;Deep Dive: Modernize your Oracle Workloads to Azure SQL&lt;/a&gt;
&lt;strong&gt;September 22:&lt;/strong&gt; &lt;a href="https://youtu.be/jCc6uBCOOfE"&gt;Deep Dive: Deploy IoT Solutions with Azure SQL Database&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plus find new, on-demand Data Exposed episodes released every Thursday, 9AM PT at &lt;a href="https://aka.ms/dataexposedyt"&gt;https://aka.ms/dataexposedyt&lt;br&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Featured Microsoft Learn Module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn with us! This month I highlighted the module: &lt;a href="https://docs.microsoft.com/learn/modules/build-full-stack-apps/"&gt;Build full stack applications with Azure Static Web Apps and Azure SQL Database&lt;/a&gt;. In the language of your choice, you’ll deploy an Azure Static Web App, which combines the power of Azure Functions and Azure Web Apps into one service managed by GitHub Actions. This application surfaces real-time bus data and geofences stored in an Azure SQL Database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anna’s Pick of the Month&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This month I am highlighting Azure Serverless Conf which is happening in all time zones LIVE on September 29-30&lt;sup&gt;th&lt;/sup&gt;. I have had the pleasure and honor to work with other teams to get this created, and I think you all will really love the great cross-service solutions approach to many of the sessions. To register and for more information, head over to the main site: &lt;a href="https://aka.ms/azureserverlessconf"&gt;https://aka.ms/azureserverlessconf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Until next time…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s it for now! Be sure to check back next month for the latest updates, and tune into Data Exposed Live every Wednesday at 9AM PST on &lt;a href="https://docs.microsoft.com/en-us/learn/tv/"&gt;LearnTV&lt;/a&gt;. We also release new episodes on Thursdays at 9AM PST and new #MVPTuesday episodes on the last Tuesday of every month at 9AM PST at &lt;a href="https://aka.ms/dataexposedyt"&gt;aka.ms/DataExposedyt&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Free Responsive Admin Dashboard using React and Styled Components</title>
      <author>Kishan Sheth</author>
      <pubDate>Wed, 08 Sep 2021 14:11:12 +0000</pubDate>
      <link>https://dev.to/koolkishan/free-responsive-admin-dashboard-using-react-and-styled-components-2397</link>
      <guid>https://dev.to/koolkishan/free-responsive-admin-dashboard-using-react-and-styled-components-2397</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B_RNoAScPMI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>💥Non-standard way to use more space of screens in your Flutter app💥</title>
      <author>Stanislav Ilin</author>
      <pubDate>Wed, 08 Sep 2021 14:10:58 +0000</pubDate>
      <link>https://dev.to/frezyx/non-standard-way-to-use-more-space-of-screens-in-your-flutter-app-32in</link>
      <guid>https://dev.to/frezyx/non-standard-way-to-use-more-space-of-screens-in-your-flutter-app-32in</guid>
      <description>&lt;p&gt;I create my first package for Flutter&lt;br&gt;
The package allows you to combine a BottomSheet and a BottomNavigationBar. In addition, you can use this combination on every screen.&lt;/p&gt;

&lt;p&gt;😳Custom bottom Sheet under Bottom Navigation Bar😳&lt;br&gt;
😩Sounds sucks? 😉First of all look at &lt;a href="https://github.com/Frezyx/bottom_bar_with_sheet"&gt;screens in repository&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Show some ❤️ and star the repo to support the project!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>android</category>
      <category>github</category>
    </item>
    <item>
      <title>How to Launch An Adult Fanclub Subscription App like OnlyFans?</title>
      <author>Emma Isabella</author>
      <pubDate>Wed, 08 Sep 2021 14:07:06 +0000</pubDate>
      <link>https://dev.to/emmaisa59135261/how-to-launch-an-adult-fanclub-subscription-app-like-onlyfans-50gd</link>
      <guid>https://dev.to/emmaisa59135261/how-to-launch-an-adult-fanclub-subscription-app-like-onlyfans-50gd</guid>
      <description>&lt;p&gt;A subscription-based social media app like OnlyFans has gained immense popularity over the past few years. Undoubtedly, entertainment-related apps will get a wider reach among people. &lt;/p&gt;

&lt;p&gt;An app like OnlyFans paves the way to connect the content creators like celebrities with their followers, building a fan base. &lt;/p&gt;

&lt;p&gt;The demand for such apps soared tremendously amidst the pandemic as celebrities looked for an alternative way to generate revenue. This is because almost every business was shut down in this crucial situation. The app provides a vast space for models, actors, musicians, and artists to utilize to gain their followers and earn profits by posting content.    &lt;/p&gt;

&lt;p&gt;This blog guides you through every nook and cranny of developing a similar adult fan club subscription app, OnlyFans Clone. Let’s have a look at it.&lt;/p&gt;

&lt;h2&gt;Follow the quick steps to develop an app like OnlyFans&lt;/h2&gt;

&lt;h4&gt;Step 1 - Market study&lt;/h4&gt;

&lt;p&gt;Before developing a subscription-based app, you must go ahead with conducting market research. The adult entertainment industry’s net value will be $803.6 million by 2021. Apart from knowing the present market value, forecasting it will be beneficial. This will ensure that you are getting into a successful venture or not. &lt;/p&gt;

&lt;h4&gt;Step 2 - Target audience preferences&lt;/h4&gt; 

&lt;p&gt;Secondly, it is important to identify your target audience and understand their demands. You can certainly check out the customer feedback on your competitors' apps. This way, you can know the audience preferences and come up with a unique business strategy.&lt;/p&gt;

&lt;h4&gt;Step 3 - Competitors analysis&lt;/h4&gt;

&lt;p&gt;It is a crucial step you should take in order to establish a successful venture. Well, try to find the strengths and weaknesses of your competitors. Try to avoid these shortcomings in your app. Inspect the strategies they follow and take them into consideration as a success mantra. Take OnlyFans as an example. This platform allows the content creators to sell video clips and photos to their subscribers, paying a subscription fee. Look into the app’s working model to get insights for framing your app’s model.  &lt;/p&gt;

&lt;h4&gt;Step 4 - Feature-set integration&lt;/h4&gt;

&lt;p&gt;Prior to implementing the app idea, draft the business plan. For this, the very first thing you concentrate on is to choose the right set of features. Some of the must-have features that you need not omit in your OnlyFans Clone app are Creator profile, Private chats, Multiple payments, Buy content, many more. To stand apart from the competition, think about adding new features to make your premium subscription social media app unique.   &lt;/p&gt;

&lt;h4&gt;Step 5 - Intuitive design&lt;/h4&gt;

&lt;p&gt;The common saying is, "the first impression is always the best," so make sure the user interface is simple, intuitive, and appealing. There may be a high probability that you may lose the users if the app’s user interface is not good. A user-friendly interface is one of the reasons behind the app’s success. &lt;/p&gt;

&lt;h4&gt;Step 6 - App platform&lt;/h4&gt;

&lt;p&gt;Based on the set of audiences you need to target, you can deploy the app on popular platforms. It includes Android, iOS, and Windows. When you consider to catch the attention of wider users, it is preferable to launch the app on Android as well as iOS. Ensure you have a sufficient budget for app deployment.&lt;/p&gt;

&lt;h4&gt;Step 7 - Technology stack&lt;/h4&gt;
 

&lt;p&gt;It is mandatory to use the up-to-date technology stack for developing an app like OnlyFans. This is highly recommended for better app performance. The technology stack varies according to the features &amp;amp; functionality you choose for the app. Standard technology stacks are listed below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Database - MySQL&lt;/li&gt;
&lt;li&gt;Programming language - JQuery, Node.js, Swift&lt;/li&gt;
&lt;li&gt;Cloud solution - Google Cloud, Amazon Web Services&lt;/li&gt;
&lt;li&gt;Framework - Flutter&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Step 8 - Avenues of revenue model&lt;/h4&gt;

&lt;p&gt;You have to decide on the monetization strategies to implement. Some popular revenue streams you could consider for the celebrity subscription app are subscription charges, in-app purchases charges, and in-app advertising charges. You can even look at other revenue streams based on your app’s architecture.  &lt;/p&gt;

&lt;h4&gt;Step 9 - App development cost estimation&lt;/h4&gt;

&lt;p&gt;Planning the budget will be helpful as you may not be stuck in between developing an app like OnlyFans. The app development cost relies on the following major factors.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App platform&lt;/li&gt;
&lt;li&gt;App features &amp;amp; functionality&lt;/li&gt;
&lt;li&gt;Technology stack&lt;/li&gt;
&lt;li&gt;App size &amp;amp; complexity&lt;/li&gt;
&lt;li&gt;Third-party service integration&lt;/li&gt;
&lt;li&gt;Company’s geographic location&lt;/li&gt;
 &lt;/ul&gt;

&lt;p&gt;In a nutshell, it depends on your business requirements, how you want the app to be designed &amp;amp; developed. &lt;/p&gt;

&lt;h4&gt;Step 10 - Suitable technology partner&lt;/h4&gt;

&lt;p&gt;Last but not least, it would be imperative to choose a suitable technology partner, ensuring the well-experienced app developers to craft your app. Two ways you could opt for app development. One conventional approach is building the app from scratch and another modern approach is choosing the OnlyFans Clone.&lt;/p&gt;

&lt;p&gt;Among these, the most chosen approach is the second one. This is because there is no need for much time and money. You can get a ready-made subscription-based app at a nominal price. With some tweaks, the price will elevate considerably.    &lt;/p&gt;

&lt;h3&gt;Concluding thoughts&lt;/h3&gt;

&lt;p&gt;Hopefully, this blog has given insightful information into the development of an app like OnlyFans. Briefly saying, the demand for premium subscription-based celebrity apps grows with each passing year. If you are wise enough to leverage this opportunity, choose the OnlyFans Clone Script, a custom-built &amp;amp; ready-to-launch app solution that empowers you to launch your app in no time. Be sure that you choose the best app development company. Get the app well-crafted based on your needs &amp;amp; demands. &lt;/p&gt;

&lt;p&gt;Website: 🔗 &lt;a href="https://www.uberlikeapp.com/onlyfans-clone"&gt;https://www.uberlikeapp.com/onlyfans-clone&lt;/a&gt; &lt;/p&gt;

</description>
      <category>devops</category>
      <category>ios</category>
      <category>android</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Welcome Thread - v141</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 08 Sep 2021 13:55:34 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v141-1g2c</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v141-1g2c</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOG9Gias--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/26xBwdIuRJiAIqHwA/giphy.gif%3Fcid%3Decf05e47u5ffs28zwycy9zwz1tiuksw5hfww4dn729tqsv30%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOG9Gias--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/26xBwdIuRJiAIqHwA/giphy.gif%3Fcid%3Decf05e47u5ffs28zwycy9zwz1tiuksw5hfww4dn729tqsv30%26rid%3Dgiphy.gif%26ct%3Dg" alt="Radish saying hello"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Listen to S6E5 of DevDiscuss: "When You Should Start Thinking About Performance" with Todd Underwood</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 08 Sep 2021 13:52:46 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-s6e5-of-devdiscuss-when-you-should-start-thinking-about-performance-with-todd-underwood-2j6i</link>
      <guid>https://dev.to/devteam/listen-to-s6e5-of-devdiscuss-when-you-should-start-thinking-about-performance-with-todd-underwood-2j6i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#listen-to-devdiscuss-s6e5-right-here-on-on-dev"&gt;
  &lt;/a&gt;
  Listen to DevDiscuss S6E5 right here on on DEV:
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s6-e5-when-you-should-start-thinking-about-performance"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E5 - When You Should Start Thinking About Performance&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e5-when-you-should-start-thinking-about-performance" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e5-when-you-should-start-thinking-about-performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e5-when-you-should-start-thinking-about-performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e5-when-you-should-start-thinking-about-performance" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e5-when-you-should-start-thinking-about-performance"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s6-e5-when-you-should-start-thinking-about-performance"&gt;
      &lt;img id="episode-profile-image" alt="S6:E5 - When You Should Start Thinking About Performance" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This week, we talk about web performance: from its history to present-day processes&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/jgaskins"&gt;@jgaskins&lt;/a&gt;
 — Head of SRE @ Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guest"&gt;
  &lt;/a&gt;
  Guest:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/tmu"&gt;Todd Underwood&lt;/a&gt;, Director at Google where he leads machine learning for site reliability engineering (SRE). Todd is also the engineering site lead for Google’s Pittsburgh office.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy this week's episode of DevDiscuss! Let us know your thoughts in the comments below — or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" alt="Speakers"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e5-when-you-should-start-thinking-about-performance/id1513053883?i=1000534674918"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/004qpDsS4RSbulJBIs1YaH"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzQ2?sa=X&amp;amp;ved=0CAQQkfYCahcKEwionb3Lwu_yAhUAAAAAHQAAAAAQQg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s6e5-when-you-should-start-01SCKw_29qi/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=165656085"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/221"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season six sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt; &amp;amp; &lt;a href="https://www.scoutapm.com/devdiscuss"&gt;Scout APM&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>UI Dev Newsletter #73</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Wed, 08 Sep 2021 13:45:55 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-73-3cne</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-73-3cne</guid>
      <description>&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3n7I3Su"&gt;Reducing Carbon Emissions On The Web&lt;/a&gt;&lt;br&gt;
Berwyn Powell shares his thoughts and experiences about making websites environmentally friendly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3zPYQwG"&gt;Understanding Z-Index in CSS&lt;/a&gt;&lt;br&gt;
Ahmad Shadeed shares a visual guide on how z-index and stacking contexts work in CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WYPh0b"&gt;Exploring the CSS Paint API: Blob Animation&lt;/a&gt;&lt;br&gt;
Temani Afif explains how to use the powerful Paint API and math to make a blob animation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3BPCXyl"&gt;Creating Accessible CSS Art&lt;/a&gt;&lt;br&gt;
Álvaro Montoro shares some tips and best practices to make CSS art more accessible for everyone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3BJbv5d"&gt;Element diversity&lt;/a&gt;&lt;br&gt;
Manuel Matuzović shares a list of reasons why we use divs and explains why we shouldn't use divs so much.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3jKYkuk"&gt;Stop! Put Down That Ternary, Lines Are Free&lt;/a&gt;&lt;br&gt;
Simon Barker explains why we should strive to write code that is understandable to the team's newest and least experienced members by writing more readable code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3n6dDjx"&gt;High performance bracket pair colorization&lt;/a&gt;&lt;br&gt;
Visual Studio Code starts to support native bracket pair colorization in the last update.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2X2oqAm"&gt;Wavy Dividers Generator&lt;/a&gt;&lt;br&gt;
Eugene Zolotarenko shares a tool for generating wavy dividers with ease.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfpromotion"&gt;
  &lt;/a&gt;
  Self-promotion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3tiqgZA"&gt;You want enabling CSS selectors, not disabling ones&lt;/a&gt;&lt;br&gt;
Chris Coyier shares one of my articles about a selector that does a job without disabling the particular rule.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy coding!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buttondown.email/starbist"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything you need to know about server side rendering</title>
      <author>Anjan Shomooder</author>
      <pubDate>Wed, 08 Sep 2021 13:02:41 +0000</pubDate>
      <link>https://dev.to/thatanjan/everything-you-need-to-know-about-server-side-rendering-1jop</link>
      <guid>https://dev.to/thatanjan/everything-you-need-to-know-about-server-side-rendering-1jop</guid>
      <description>&lt;p&gt;In this blog, I will explain everything you need to know about server-side rendering.&lt;/p&gt;

&lt;p&gt;I have created a video about it already. Feel free to check that out. And if you like the video then don't forget to SUBSCRIBE to my channel.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LuG1KNowti4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-serverside-rendering-work"&gt;
  &lt;/a&gt;
  How does server-side rendering work?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Abstractly There are two entities on the internet. One is the Client and another one is Server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First, the client(browser) sends a request to the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server then check the request and sends the HTML file as a response.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Browser starts parsing the HTML from top to bottom. When the parser sees the link tag for CSS it blocks the parsing process and starts downloading the CSS files. Then it starts parsing the CSS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the CSS parsing is completed, the parser starts parsing the HTML again. As the parser parsing the HTML, the browser dom gets pained with content. Also with styles. Because the CSS is already parsed. That is why we put the CSS link tag at the top part of the HTML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the dom is pained with the content, your webpage is now viewable. Then the parser comes across the script tag at the bottom of the HTML. Now the browser will start downloading the JavaScript and then will parse the JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The JavaScript might be big and might take some time depends on how big the files are. Parsing Javascript is a heavier task than parsing HTML and CSS. That's why we put the script tag at the bottom of the HTML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the parsing is completed, the webpage is now both viewable and interactive.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#this-is-a-visual-representation-of-the-serverside-rendering-process-with-react"&gt;
  &lt;/a&gt;
  This is a visual representation of the server-side rendering process with react.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGEH18nN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k48w5ip0hsughbloc3ji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGEH18nN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k48w5ip0hsughbloc3ji.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server-side-rendering-pros"&gt;
  &lt;/a&gt;
  Server Side Rendering Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Great SEO. Because the content is already present on the HTML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initial load is fast. Not the whole application data is not served by the browser. Only the necessary data for the page is sent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User doesn't have to see a blank page on the initial load. Because the content is rendered by HTML not JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No need for external libraries or frameworks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#server-side-rendering-cons"&gt;
  &lt;/a&gt;
  Server Side Rendering cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Frequent server calls.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slow navigation to any routes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Page refresh while visiting any routes (not necessarily).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bad user Experience when data changes frequently.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, that's all you need to know about servers side rendering I guess.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made a video about how to build a carousel postcard with React, Material-UI, and Swiper.js.&lt;br&gt;
If you are interested you can check the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also demo the application form &lt;a href="https://insta-carousel-demo.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" alt="Screenshot of Insta Carousel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;If you have any questions, please comment down below.&lt;br&gt;
You can reach out to me on social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.&lt;br&gt;
Stay safe. Goodbye.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;br&gt;
I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="https://www.facebook.com/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt; Eslint, prettier setup with TypeScript and react &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Be_C_Op8Tx8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ag3je1g0BN8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B3HX2rWyKlU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/C6VytdSDNSk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Create trippy loop in UrpflanzeJS - Tutorial #1 </title>
      <author>Gennaro</author>
      <pubDate>Wed, 08 Sep 2021 12:38:50 +0000</pubDate>
      <link>https://dev.to/genbs/create-trippy-loop-in-urpflanzejs-tutorial-1-16g1</link>
      <guid>https://dev.to/genbs/create-trippy-loop-in-urpflanzejs-tutorial-1-16g1</guid>
      <description>&lt;p&gt;Urpflanze is a library to create images or animations using code. You can find the &lt;a href="https://docs.urpflanze.org/urpflanze/"&gt;documentation here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can start writing code from the template on &lt;a href="https://codepen.io/pen/?template=GRErJJy&amp;amp;editors=0010"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/pen/?template=GRErJJy&amp;amp;editors=0010"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJf_dKgo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/v8jCsZ7g/btn.png" alt="btn.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's what we're going to talk about today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-a-scene"&gt;Create a Scene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repetitions-and-transformations"&gt;Repetitions and transformations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encapsulation-of-a-shape"&gt;Encapsulation of a shape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#animations"&gt;Animations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#result"&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn Urpflanze your way, try experimenting by changing values and don't forget to have fun 😜&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-scene"&gt;
  &lt;/a&gt;
  Create a Scene
&lt;/h2&gt;

&lt;p&gt;Urpflanze is based on point manipulation, so all transformations are done through the CPU.&lt;br&gt;
It will be up to the Drawer to render the scene.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more informations: &lt;a href="https://docs.urpflanze.org/core/"&gt;Core&lt;/a&gt;, &lt;a href="https://docs.urpflanze.org/drawer-canvas/"&gt;Drawer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this part we create a Scene with a triangle inside&lt;br&gt;
and we instantiate the drawer by connecting it to the body of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scene&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;triangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Triangle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;triangle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;drawer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DrawerCanvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;drawer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startAnimation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSO5NmB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/gk8hMxtY/urpflanze-trippy-loop-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSO5NmB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/gk8hMxtY/urpflanze-trippy-loop-1.png" alt="urpflanze-trippy-loop-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#repetitions-and-transformations"&gt;
  &lt;/a&gt;
  Repetitions and transformations
&lt;/h2&gt;

&lt;p&gt;First we repeat the triangle (one row and eight columns), scaling it at each &lt;a href="https://docs.urpflanze.org/urpflanze/#/en/Manage-repetitions"&gt;repetition&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the value of scale will be 1 for the last repetition when repetition.offset will be 1 and 0.1 for firt repetition when repetition.offset will be 0&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;triangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Triangle&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;repetitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;repetition&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;repetition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// trick for one row instead of repetition.col.offset&lt;/span&gt;
  &lt;span class="na"&gt;sideLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bAH2keUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/KYC9sLqv/urpflanze-trippy-loop-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bAH2keUO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/KYC9sLqv/urpflanze-trippy-loop-2.png" alt="urpflanze-trippy-loop-2.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#encapsulation-of-a-shape"&gt;
  &lt;/a&gt;
  Encapsulation of a shape
&lt;/h2&gt;

&lt;p&gt;In Urpflanze it is possible to encapsulate any shape or group of shapes (&lt;a href="https://docs.urpflanze.org/urpflanze/#/en/Creating-a-scene"&gt;more details here&lt;/a&gt;) with the &lt;code&gt;Shape&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;The properties will be set on each repetition of the shape passed to the &lt;code&gt;shape&lt;/code&gt; property&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;triangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Triangle&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="cm"&gt;/* */&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;triangle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- Set shape&lt;/span&gt;

  &lt;span class="na"&gt;repetitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;rotateZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toRadians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// scene.add(triangle)&lt;/span&gt;
&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3615_q31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Vv8KzwPx/urpflanze-trippy-loop-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3615_q31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/Vv8KzwPx/urpflanze-trippy-loop-3.png" alt="urpflanze-trippy-loop-3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#animations"&gt;
  &lt;/a&gt;
  Animations
&lt;/h2&gt;

&lt;p&gt;We can animate all properties by passing a function instead of a static value (&lt;a href="https://docs.urpflanze.org/urpflanze/#/en/Drawer-and-animations"&gt;📃&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;For animations we will use the built-in &lt;a href="https://docs.urpflanze.org/animation/"&gt;@urpflanze/animation&lt;/a&gt; library&lt;/p&gt;



&lt;p&gt;Let's go back to the triangle and give movement to the position from where the scale starts.&lt;br&gt;
If you are familiar with CSS you will know the &lt;code&gt;transform-origin&lt;/code&gt; property.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Urpflanze.Animation[cosp|sinp](&amp;lt;time&amp;gt;, &amp;lt;period duration&amp;gt;, &amp;lt;phase&amp;gt;, &amp;lt;normalize&amp;gt;)&lt;/code&gt; return value between 0 and 1 in  milliseconds&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;triangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Triangle&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;repetitions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;repetition&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;repetition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;sideLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;

  &lt;span class="na"&gt;transformOrigin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cosp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toRadians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sinp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toRadians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.6&lt;/span&gt; 
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we can add a spacing movement of the triangles and the rotation of the whole shape&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
  &lt;span class="na"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Loop&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;displace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UncontrolledLoop&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toRadians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally we can give a small deviation to the rotation of the triangles&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
  &lt;span class="na"&gt;rotateZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Animation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sinp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scene&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toRadians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;Urpflanze&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toRadians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Output of each separate stage: transformOrigin | distance + displace | rotateZ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--he_N4ad2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.postimg.cc/Zqnq3bfS/urpflanze-trippy-loop-4-5-6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--he_N4ad2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.postimg.cc/Zqnq3bfS/urpflanze-trippy-loop-4-5-6.gif" alt="urpflanze-trippy-loop-4-5-6.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;Combining everything together the result will be this&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/UrpflanzeJS/embed/GRENeBg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is my first tutorial and I would like to premise that &lt;em&gt;I am not an artist&lt;/em&gt;, I would like to see how you would use this library.&lt;/p&gt;

&lt;p&gt;You can send me your experiments by tagging on various social networks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/urpflanzejs/"&gt;Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.instagram.com/urpflanzejs/"&gt;Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/urpflanzejs"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the next video I was thinking of showing how to export the Scene (video, gif, zip, SVG, GCODE)&lt;/p&gt;



&lt;p&gt;If you like the project and want to support me, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Leave feedback in the comments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contribute with a PR (&lt;a href="https://github.com/urpflanze-org"&gt;Github&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/urpflanze-org"&gt;
        urpflanze-org
      &lt;/a&gt; / &lt;a href="https://github.com/urpflanze-org/core"&gt;
        core
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create 2d primitive shapes, encapsulate and repeat them by handling each repetition and generate recursive shapes
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/urpflanze-org"&gt;
        urpflanze-org
      &lt;/a&gt; / &lt;a href="https://github.com/urpflanze-org/drawer-canvas"&gt;
        drawer-canvas
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Draw Urpflanze scene in browser or Node and export image, zip, video or GIF
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Donate to these links&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.paypal.me/genbs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRvoUTDQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/donate-paypal-003087.svg%3Flogo%3Dpaypal" alt="Paypal"&gt;&lt;/a&gt; &lt;a href="https://ko-fi.com/urpflanze"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UdHdpsBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/donate-ko--fi-29abe0.svg%3Flogo%3Dko-fi" alt="Kofi"&gt;&lt;/a&gt; &lt;a href="https://explorer.btc.com/btc/address/1CSQq4aMmsA71twvyZHZCjmeB2AmQGCPNq"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkTvs6r---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/bitcoin-1CSQq4aMmsA71twvyZHZCjmeB2AmQGCPNq-f7931a.svg%3Flogo%3Dbitcoin" alt="Bitcoin"&gt;&lt;/a&gt; &lt;a href="https://etherscan.io/address/0x9086c4bb7015c1d6dc79162d02e7e1239c982c01"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmoHOd9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/ethereum-0x9086c4bb7015c1d6dc79162d02e7e1239c982c01-ecf0f1.svg%3Flogo%3Dethereum" alt="Ethereum"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>creativecoding</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Apple iPhone 13 launch | Launch Event On September 14</title>
      <author>TodayTrend</author>
      <pubDate>Wed, 08 Sep 2021 12:37:51 +0000</pubDate>
      <link>https://dev.to/todaytrend/apple-iphone-13-launch-launch-event-on-september-14-3h9m</link>
      <guid>https://dev.to/todaytrend/apple-iphone-13-launch-launch-event-on-september-14-3h9m</guid>
      <description>&lt;p&gt;iPhone 13 launch: The Apple event is scheduled for September 14, where we expect new iPhones to launch. The &lt;a href="https://www.frontendtrick.com"&gt;iPhone&lt;/a&gt; 13 series is likely to go on sale in India from October 1, 2021.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Feq-CJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or24845zzg72f00xpq5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Feq-CJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or24845zzg72f00xpq5y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
The iPhone 13 dispatch is on. Apple just put it down on the calendar for another item dispatch, and we're almost certain another &lt;a href="https://www.frontendtrick.com"&gt;iPhone&lt;/a&gt; will lead the procession of gadgets Apple makes certain to flaunt. Not that we're uninformed on what's in store — a consistent drumbeat of holes and tales has given us a lovely complete image of what the new &lt;a href="https://www.frontendtrick.com"&gt;iPhone&lt;/a&gt; will resemble when we will see it in the tissue one week from now.&lt;/p&gt;

&lt;p&gt;At the Spring Stacked occasion recently, Macintosh uncovered the iPad Professional (2021) that appeared with the M1 chip — the silicon that the organization at first presented on its MacBooks and Macintosh smaller than usual last year. It additionally presented the iMac (2021) that has a thin plan and is controlled by a similar M1 chip. &lt;/p&gt;

&lt;p&gt;Now, there are now various bits of gossip twirling about the new &lt;a href="https://www.frontendtrick.com"&gt;iPhone&lt;/a&gt; too. As indicated by a posting spotted by an insider, the &lt;a href="https://www.frontendtrick.com"&gt;iPhone&lt;/a&gt; 13 will dispatch with a further developed MagSafe charger. Insider Imprint Gurman likewise tipped in his PowerOn pamphlet that the new iPhone 13 will get a satellite network highlight. This element will clearly come in select business sectors to give availability even without cell inclusion. &lt;/p&gt;

&lt;p&gt;It was likewise reputed that the iPhone 13 series will accompany further developed batteries, in spite of the fact that there were additionally worries that Apple will be influenced by the worldwide chip lack as different producers have been, and that this would affect the provisions of the telephone.&lt;/p&gt;

&lt;p&gt;For More Information &lt;a href="https://www.frontendtrick.com"&gt;Visit Our Website&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
