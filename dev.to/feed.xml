<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>400 (!) EC2 instance types: the good, the bad, and the ugly</title>
      <author>CAST AI</author>
      <pubDate>Thu, 27 May 2021 13:00:02 +0000</pubDate>
      <link>https://dev.to/castai/400-ec2-instance-types-the-good-the-bad-and-the-ugly-25in</link>
      <guid>https://dev.to/castai/400-ec2-instance-types-the-good-the-bad-and-the-ugly-25in</guid>
      <description>&lt;p&gt;A DevOps life isn’t a piece of cake in AWS. How are you supposed to make sense of EC2 instance types when you’re looking at almost 400 different ones? &lt;/p&gt;

&lt;p&gt;Picking the &lt;a href="https://cast.ai/blog/how-to-choose-the-best-vm-for-the-job/"&gt;right VM type for the job&lt;/a&gt; that doesn’t burn a hole in your pocket is a challenge. But there are a few things you can do to make your life easier (and gain points with your financial department).&lt;/p&gt;

&lt;p&gt;Careful choice of EC2 instances is definitely worth your time because &lt;strong&gt;compute is the biggest part of your cloud bill&lt;/strong&gt;. If you manage to optimize it, you’ll open the doors to dramatic reductions of your cloud costs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you’ll find inside:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#basicfacts"&gt;Before we get started: 5 basic facts about Amazon EC2 instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#howtochoose"&gt;How to choose the EC2 instance types with cost optimization in mind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#tip1"&gt;Identify your application’s requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#tip2"&gt;Shop around for EC2 instance families&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#tip3"&gt;Choose your instance size with cost savings in mind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#tip4"&gt;Weigh the pros and cons of different pricing models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#tip5"&gt;Reduce costs with CPU bursting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#tip6"&gt;Optimize your storage choice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#tip7"&gt;Use Spot Instances (even for production workloads)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cast.ai/blog/400-ec2-instance-types-the-good-the-bad-and-the-ugly/#tip8"&gt;Automate it all&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#before-we-get-started-5-basic-facts-about-amazon-ec2-instances"&gt;
  &lt;/a&gt;
  Before we get started: 5 basic facts about Amazon EC2 instances
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Amazon Elastic Compute Cloud ( EC2) is a service that delivers compute capacity in the cloud to help teams benefit from &lt;strong&gt;easy-to-scale cloud computing&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;AWS currently offers &lt;strong&gt;nearly 400 different instances&lt;/strong&gt; with choices across storage options, networking, operating systems.&lt;/li&gt;
&lt;li&gt;Users can choose from machines located in &lt;strong&gt;24 regions and 77 availability zones&lt;/strong&gt; all over the world.&lt;/li&gt;
&lt;li&gt;EC2 instances use &lt;strong&gt;two types of processors:&lt;/strong&gt; Intel Xeon and AMD EPYC, and Arm-based AWS Graviton.&lt;/li&gt;
&lt;li&gt;To match your use case, you can choose from &lt;strong&gt;5 different EC2 instance families&lt;/strong&gt; optimized for compute, memory, storage, accelerated computing or general purpose.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-the-ec2-instance-types-with-cost-optimization-in-mind"&gt;
  &lt;/a&gt;
  How to choose the EC2 instance types with cost optimization in mind
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-identify-your-applications-requirements"&gt;
  &lt;/a&gt;
  1. Identify your application’s requirements
&lt;/h3&gt;

&lt;p&gt;Some teams make the mistake of choosing EC2 instances that are too large. They want to be on the safe side in case their application’s requirements increase. But why overprovision when you can use a burstable instance or delegate the task to incredibly cost-effective spot instances when needed?&lt;/p&gt;

&lt;p&gt;Other teams are tempted to use more affordable instances. But what if they start running memory-intensive applications and encounter performance issues?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It all starts with knowing your workload requirements well. Make a deliberate effort to get only what your application really needs. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Identify the minimum requirements of your workload and pick EC2 instance types that meets them across these dimensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vCPU count&lt;/li&gt;
&lt;li&gt;vCPU architecture&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;SSD storage &lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s say that you’ve done your homework and came up with a set of targeted instance types. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cpu-vs-gpu-which-one-should-you-pick"&gt;
  &lt;/a&gt;
  CPU vs. GPU – which one should you pick?
&lt;/h3&gt;

&lt;p&gt;If you’re looking for an instance to support a machine learning application, for GPU instead of CPU. GPU-dense instance types train models much faster. Interestingly, the GPU wasn’t initially designed for machine learning – it was designed to display graphics. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about running predictions?&lt;/strong&gt; Is investing specialized instance types worth it? AWS has introduced a new instance type designed for inference, AWS EC2 Inf. It supposedly delivers up to 30% higher throughput and 45% lower cost per inference than EC2 G4 instances. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And what’s the hype around Arm all about? The EC2 A1 family is powered by the Graviton2 Arm processor. Since Arm is less power-hungry, it’s also cheaper to run and cool. Cloud providers usually charge less for this type of processor. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But if you’d like to use it, you might have to re-architect your delivery pipeline to compile your application for Arm. On the other hand, if you’re already running an interpreted stack like Python, Ruby or NodeJS, your applications will likely run on Arm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-shop-around-for-ec2-instance-types-and-families"&gt;
  &lt;/a&gt;
  2. Shop around for EC2 instance types and families
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqxxlpLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/146w9vjva5k3np8wmsc9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqxxlpLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/146w9vjva5k3np8wmsc9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-choose-your-instance-size-with-cost-savings-in-mind"&gt;
  &lt;/a&gt;
  3. Choose your instance size with cost savings in mind
&lt;/h3&gt;

&lt;p&gt;EC2 instance types come in one or more sizes, so scaling resources to match your workload’s requirements is easy.&lt;/p&gt;

&lt;p&gt;But size isn’t the only factor that determines the cost.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS rolls out different computers to provide compute capacity. And the chips in those computers have different performance characteristics. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might get an instance running on an older-generation processor that is slightly slower or a new-generation one that is a bit faster. The instance type you pick might come with strong performance characteristics your application doesn’t really need. And you won’t even know it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to verify this? Benchmarking is the best approach.&lt;/strong&gt; It means that you drop the same workload on every machine type you want to examine and check its performance characteristics. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s an example of benchmarking&lt;/strong&gt;&lt;br&gt;
To understand instance performance, we developed a metric called Endurance Coefficient. Here’s how we calculate it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We measure how much work an instance type can carry out in 12 hours and how variable the CPU performance is. &lt;/li&gt;
&lt;li&gt;A sustained base load needs stability. A workload that experiences traffic or batch job occasionally can get away with lower stability. &lt;/li&gt;
&lt;li&gt;In our calculation, instances with stable performance are close to 100 and ones with random performance edge closer to 0 value.
We tested the DigitalOcean s1_1 machine and – as you can see – it achieved a pretty high endurance coefficient of &lt;strong&gt;0.97107 (97%).&lt;/strong&gt; The AWS t3_medium_st instance delivered a less stable result with the endurance coefficient of &lt;strong&gt;0.43152 (43%).&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uTQ2-7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqkjruvovv451n2s93tk.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wdrz0ccu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qijbf3uybc7o02dgg4x7.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-weigh-the-pros-and-cons-of-different-pricing-models"&gt;
  &lt;/a&gt;
  4. Weigh the pros and cons of different pricing models
&lt;/h3&gt;

&lt;p&gt;Next, you have to select an &lt;a href="https://cast.ai/blog/crash-course-amazon-ec2-pricing-and-cutting-your-aws-bill/"&gt;EC2 pricing&lt;/a&gt; model that matches your needs and budget. AWS offers the following models:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ondemand-instances"&gt;
  &lt;/a&gt;
  On-Demand instances
&lt;/h4&gt;

&lt;p&gt;You pay only for the resources that you actually use. No need to worry about long-term binding contracts or upfront payments. Increase or reduce your usage just-in-time. But this flexibility comes with a high price tag. Workloads with fluctuating traffic spikes benefit the most from On-Demand instances.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reserved-instances"&gt;
  &lt;/a&gt;
  Reserved Instances
&lt;/h4&gt;

&lt;p&gt;Buy capacity upfront in a given availability zone with a large discount off the On-Demand price. The larger your upfront payment, the larger the discount. But if go for it, you’re also committing to a specific instance or family. And you can’t change that later if your requirements change. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#savings-plans"&gt;
  &lt;/a&gt;
  Savings Plans
&lt;/h4&gt;

&lt;p&gt;Get the Reserved Instances discounts but commit to use a given amount of compute power per hour (not specific instance types and configurations). Anything extra will be billed at the high On-Demand rate. &lt;/p&gt;

&lt;p&gt;But wait, didn’t you migrate to the cloud to avoid CAPEX in the first place? Resourced Instances and Savings Plans pose risk of &lt;a href="https://cast.ai/blog/vendor-lock-in-and-how-to-break-free/"&gt;vendor lock-in&lt;/a&gt;. The resources you get today might make little sense for your company doesn the line. Three years is an eternity in cloud computing.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOCpnzq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9eqzph6cz5g9tnmbrol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOCpnzq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9eqzph6cz5g9tnmbrol.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#spot-instances"&gt;
  &lt;/a&gt;
  Spot instances
&lt;/h4&gt;

&lt;p&gt;Bidding on spare compute is a smart move, you can save up to 90% off the On-Demand pricing. But AWS can pull the plug on your instance any time and give you just 2 minutes to prepare for it. You need to come up with a strategy to deal with that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn more about spot instances here: &lt;a href="https://cast.ai/blog/how-to-reduce-cloud-costs-by-90-spot-instances-and-how-to-use-them/"&gt;Spot instances: How to reduce AWS, Azure, and GCP costs by 90%&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#dedicated-host"&gt;
  &lt;/a&gt;
  Dedicated host
&lt;/h4&gt;

&lt;p&gt;A physical server that brings an instance capacity that is fully dedicated to you. You can reduce costs by using your own licenses to slash costs and get the resiliency and flexibility of the cloud. It’s pricey, but a good match for applications that have to achieve compliance and, for example, not share hardware with other tenants. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-slash-costs-with-cpu-bursting"&gt;
  &lt;/a&gt;
  5. Slash costs with CPU bursting
&lt;/h3&gt;

&lt;p&gt;Burstable performance instances were designed to give you a baseline level of CPU performance together with the possibility of bursting to a higher level when the need arises.&lt;/p&gt;

&lt;p&gt;Burstable instances in families T2, T3, T3a, and T4g are a good fit for low-latency interactive applications, microservices, small/medium databases, and product prototypes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bursting can happen if you have credits. The number of accumulated CPU credits depends on your instance type. Generally, larger instances collect more credits per hour. But note that there’s a cutoff to the number of credits that can be collected (and naturally, it’s higher for larger instances)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#restarting-instances-leads-to-losing-credits"&gt;
  &lt;/a&gt;
  Restarting instances leads to losing credits:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Restarting an instance in T2 family means that you immediately lose all the accrued credits.&lt;/li&gt;
&lt;li&gt;If you restart an instance in T3 and T4 families, your credits will still be there for seven days (and then you’ll lose them). &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We examined burstable instances AWS offers and discovered that if you load your instance for 4 hours or more per day (on average), you’re better off with a non-burstable instance. But if you run an e-commerce business and experience traffic spikes once in a while, a burstable instance is cost-effective.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#side-note-vcpu-capacity-is-limited"&gt;
  &lt;/a&gt;
  Side note: vCPU capacity is limited
&lt;/h4&gt;

&lt;p&gt;Our tests revealed that compute capacity tends to increase linearly during the first four hours. After that, the increase is limited and the amount of available compute goes down by nearly 90% by the end of the day.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuUFA72v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rot4h0fd89oofe3vwk3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuUFA72v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rot4h0fd89oofe3vwk3r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-optimize-storage-choices-for-ec-instance-types"&gt;
  &lt;/a&gt;
  6. Optimize storage choices for EC instance types
&lt;/h3&gt;

&lt;p&gt;To maximize cloud cost savings, be careful about data storage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure that the EC2 instance types you choose have a &lt;strong&gt;storage throughput your application needs.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Avoid expensive products like &lt;strong&gt;premium SSD&lt;/strong&gt; unless you plan to use them to the fullest.&lt;/li&gt;
&lt;li&gt;Be careful about &lt;strong&gt;egress traffic.&lt;/strong&gt; In a single-cloud scenario, you pay egress costs between various availability zones, which most often costs some $0.01/GB. But in a multi-cloud setup, you’ll be charged more – for example $0.02 for using direct fiber.
### 7. Use Spot Instances (even for production workloads)
Spot Instances are a great way to save up on your AWS bill. By bidding on instances AWS isn’t using, you can get up to a 90% discount on the On-Demand pricing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-first-step-is-qualifying-your-workload-for-spot-instances-is-it-spotready-answer-these-questions-to-find-out"&gt;
  &lt;/a&gt;
  The first step is qualifying your workload for Spot Instances. Is it spot-ready? Answer these questions to find out:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;How much time does your workload need to finish the job? &lt;/li&gt;
&lt;li&gt;Is it mission- and time-critical?&lt;/li&gt;
&lt;li&gt;Can it tolerate interruptions gracefully? &lt;/li&gt;
&lt;li&gt;Is it tightly coupled between nodes? &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you have a strategy in place for moving your workload when AWS pulls the plug? &lt;br&gt;
Once you determine that your workload is a good candidate for Spot Instances, here are a few helpful pointers:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consider &lt;strong&gt;less popular Spot Instances&lt;/strong&gt; as your chances of getting interrupted are lower. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check an instance’s &lt;strong&gt;frequency of interruption&lt;/strong&gt; (the rate at which this instance reclaimed capacity during the trailing month). You can check it in AWS Spot Instance Advisor:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9OKiQoX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76luagb89sf4daljojzj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9OKiQoX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76luagb89sf4daljojzj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t be afraid of &lt;strong&gt;using Spot Instances for more important workloads.&lt;/strong&gt; AWS offers special Spot Instances that guarantee uninterrupted operation for up to 6 hours. They’re a bit more expensive but you still achieve 30-50% cost savings. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When bidding your price on a Spot Instance, set the value &lt;strong&gt;equal to On-Demand pricing.&lt;/strong&gt; Otherwise, you risk that your workload is interrupted when the price increases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set up groups called &lt;strong&gt;AWS Spot Fleets&lt;/strong&gt; to boost your chances of snatching a Spot Instance. This is how you can request multiple instance types simultaneously. You’ll pay the maximum price per hour for the entire fleet, not specific spot pool (i.e. instances of the same type and with the same OS, availability zone, and network).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8-automate-it-all"&gt;
  &lt;/a&gt;
  8. Automate it all
&lt;/h2&gt;

&lt;p&gt;Luckily, you can use intelligent cloud optimization tools to get your hands on the best instances and avoid locking yourself into a long-term expensive commitment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The CAST AI instance selection algorithm cherry-picks the most cost-effective EC2 instance types and sizes that meet your application’s requirements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#free-savings-report-for-kubernetes-clusters"&gt;
  &lt;/a&gt;
  Free savings report for Kubernetes clusters
&lt;/h4&gt;

&lt;p&gt;If you run Kubernetes on EKS, start by analyzing your clusters to identify potential savings.&lt;/p&gt;

&lt;p&gt;It’s free of charge, you can &lt;a href="https://cast.ai/eks-optimizer/"&gt;do it here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ec2</category>
      <category>devops</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>#30DaysOfAppwrite : Appwrite for Production</title>
      <author>kodumbeats</author>
      <pubDate>Thu, 27 May 2021 12:38:54 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-appwrite-for-production-56hi</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-appwrite-for-production-56hi</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focused at giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#appwrite-for-production"&gt;
  &lt;/a&gt;
  Appwrite for Production
&lt;/h1&gt;

&lt;p&gt;Welcome to Day 27 👋. Now that we've covered many of the capabilities of Appwrite, we should discuss running Appwrite in production once your app is finally ready for users.&lt;/p&gt;

&lt;p&gt;First and foremost, good security is a moving target. Appwrite provides a suite of APIs that abstracts many security requirements of your application, but hosting software online means exposing a computer to the internet. While we can't cover everything, let's discuss some security best practices when running Appwrite in production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-server"&gt;
  &lt;/a&gt;
  The Server
&lt;/h2&gt;

&lt;p&gt;Before we discuss the steps to run Appwrite in production, we need to talk about the &lt;em&gt;system&lt;/em&gt; on which Appwrite will run. These tips assume you're running Appwrite on a Linux-based server, but the principles apply to any operating system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updates"&gt;
  &lt;/a&gt;
  Updates
&lt;/h3&gt;

&lt;p&gt;Most security breaches occur on systems that run out-of-date, insecure versions of their software. The problem is understandable - it's hard to keep up with system updates. Running updates on a &lt;a href="https://man7.org/linux/man-pages/man5/crontab.5.html"&gt;cron&lt;/a&gt; schedule isn't the best either though, as security updates are best installed immediately. Use tools like Ubuntu's &lt;a href="https://help.ubuntu.com/community/AutomaticSecurityUpdates"&gt;&lt;code&gt;unattended-upgrades&lt;/code&gt;&lt;/a&gt; and Fedora's &lt;a href="https://fedoraproject.org/wiki/AutoUpdates"&gt;&lt;code&gt;dnf-automatic&lt;/code&gt;&lt;/a&gt; packages to run with the latest updates for your software.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#firewall-and-ssh"&gt;
  &lt;/a&gt;
  Firewall and SSH
&lt;/h3&gt;

&lt;p&gt;A security best practice is a deny-by-default security policy - we should only give explicit access to the services we want. Appwrite considers this in its default configuration: the only service exposed to the outside world is what we need, the &lt;a href="https://traefik.io/traefik/"&gt;Traefik&lt;/a&gt; proxy. So, if Appwrite is the only service we want to publicly expose on the server, we can use firewall tools to block access to any other unused ports.&lt;/p&gt;

&lt;p&gt;If you use SSH to administer your system, don't forget to leave that open in your firewall! SSH is considered a private service, meaning that it should be publicly accessible, but only to authorized accounts. The best practice is to use cryptographic tools like &lt;a href="https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys"&gt;SSH keys&lt;/a&gt; instead of passwords, as they're much, much harder to falsify.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-reading"&gt;
  &lt;/a&gt;
  More Reading
&lt;/h3&gt;

&lt;p&gt;Here are some additional resources that go into more detail about best practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/security/"&gt;Docker security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/recommended-security-measures-to-protect-your-servers"&gt;DigitalOcean Recommended Security Measures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#securing-appwrite"&gt;
  &lt;/a&gt;
  Securing Appwrite
&lt;/h2&gt;

&lt;p&gt;Now, let's discuss setting up Appwrite for production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  Environment Variables
&lt;/h3&gt;

&lt;p&gt;You can easily configure Appwrite for production with the many environment variables that it offers. The following variables should be set in the hidden &lt;code&gt;.env&lt;/code&gt; file in your &lt;code&gt;appwrite&lt;/code&gt; installation directory when deploying for production:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;_APP_ENV&lt;/code&gt;: Change to &lt;code&gt;production&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_APP_OPTIONS_ABUSE&lt;/code&gt;: Enables abuse checks and ratelimiting for the API. Set to &lt;code&gt;enabled&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_APP_OPTIONS_FORCE_HTTPS&lt;/code&gt;: Forces connections to use HTTPS for secure data transfer. Set to &lt;code&gt;enabled&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_APP_OPENSSL_KEY_V1&lt;/code&gt;: This is the secret used to encrypt secrets like sessions and passwords. Change this to something secure and random, and &lt;strong&gt;keep it safe and backed up&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_APP_DOMAIN&lt;/code&gt;: Set this to &lt;a href="https://appwrite.io/docs/custom-domains"&gt;your domain name&lt;/a&gt; for Appwrite to auto-generate an SSL certificate.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#restrict-console-access"&gt;
  &lt;/a&gt;
  Restrict Console Access
&lt;/h4&gt;

&lt;p&gt;Three environment variables are available to restrict access to the Appwrite console:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_APP_CONSOLE_WHITELIST_EMAILS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_APP_CONSOLE_WHITELIST_IPS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_APP_CONSOLE_WHITELIST_ROOT&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set the &lt;code&gt;_ROOT&lt;/code&gt; var to &lt;code&gt;enabled&lt;/code&gt; if you only want a single account to have access to the console. For multiple users, you can restrict access to specific email and IP addresses with their respective environment variables.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#antivirus"&gt;
  &lt;/a&gt;
  Antivirus
&lt;/h4&gt;

&lt;p&gt;For production, you can enable &lt;code&gt;clamav&lt;/code&gt; scanning of uploaded files for any known malicious objects. Set &lt;code&gt;_APP_STORAGE_ANTIVIRUS&lt;/code&gt; to &lt;code&gt;enabled&lt;/code&gt; and &lt;a href="https://github.com/appwrite/appwrite/blob/master/docker-compose.yml#L417-L423"&gt;uncomment the service&lt;/a&gt; in &lt;code&gt;docker-compose.yml&lt;/code&gt; to use this feature. Don't forget to also uncomment &lt;code&gt;clamav&lt;/code&gt; in the &lt;a href="https://github.com/appwrite/appwrite/blob/master/docker-compose.yml#L74"&gt;&lt;code&gt;depends_on&lt;/code&gt; section&lt;/a&gt; of the main &lt;code&gt;appwrite&lt;/code&gt; service. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h4&gt;

&lt;p&gt;Cloud Functions can be customized to suit the needs of your production system, largely for controlling resources available to Function executions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;_APP_FUNCTIONS_CPUS&lt;/code&gt;: The maximum number of CPU cores that Cloud Functions can use.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_APP_FUNCTIONS_MEMORY&lt;/code&gt;: The maximum memory available to Cloud Functions (in megabytes).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_APP_FUNCTIONS_CONTAINERS&lt;/code&gt;: The maximum number of containers Appwrite keeps alive, defaults to 10. Increase this number to increase the number of warm functions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;_APP_FUNCTIONS_RUNTIMES&lt;/code&gt;: A list of available runtimes for new Cloud Functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;All Appwrite environment variables can be found in our &lt;a href="https://appwrite.io/docs/environment-variables"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>flutter</category>
      <category>30daysofappwrite</category>
    </item>
    <item>
      <title>Visualize the architecture of your Ruby app in RubyMine, in 2 ¹/₂ minutes</title>
      <author>Kevin Gilpin</author>
      <pubDate>Thu, 27 May 2021 12:34:22 +0000</pubDate>
      <link>https://dev.to/appland/visualize-the-architecture-of-your-ruby-app-in-rubymine-in-2-minutes-5emj</link>
      <guid>https://dev.to/appland/visualize-the-architecture-of-your-ruby-app-in-rubymine-in-2-minutes-5emj</guid>
      <description>&lt;p&gt;&lt;a href="https://plugins.jetbrains.com/plugin/16701-appmap"&gt;AppMap&lt;/a&gt; is an open source RubyMine plugin which helps you improve your code by showing you how it behaves, feature by feature, as you work. It does this by automatically generating interactive maps of architecture and code behavior right in your editor.&lt;/p&gt;

&lt;p&gt;This 2 ¹/₂ minute video shows how to install the AppMap plugin, how to configure it to map your Ruby application, and how to navigate your code using the interactive diagrams.&lt;/p&gt;

&lt;p&gt;It uses the Rails Sample App as an example program.&lt;/p&gt;

&lt;p&gt;Here are the step-by-step instructions that are demonstrated in the video, or you can follow the &lt;a href="https://appland.com/docs/quickstart/"&gt;Quickstart AppMap instructions&lt;/a&gt; directly in your RubyMine IDE.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYr6a8ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01p0d6p5b4k4b1chmt9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYr6a8ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01p0d6p5b4k4b1chmt9n.png" alt="How AppMap works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AppMap works by recording code execution paths of your app and visualizing them in interactive diagrams directly in your code editor. A good way to create AppMaps is by recording unit, functional or integration test cases. The Rail Sample App project uses minitest tests, which will be a source of AppMaps in this demo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-the-appmap-plugin"&gt;
  &lt;/a&gt;
  Install the AppMap plugin
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;00:03&lt;/code&gt; Installing AppMap from the JetBrains Marketplace takes only a moment: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the RubyMine preferences&lt;/li&gt;
&lt;li&gt;Select Plugins, click on the Marketplace tab and search for &lt;code&gt;AppMap&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Install&lt;/code&gt; button, then click on &lt;code&gt;Restart IDE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HdhVwvQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yl6rkjdut9gvvix0pfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdhVwvQb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yl6rkjdut9gvvix0pfc.png" alt="AppMap in Marketplace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the IDE restarts, the AppMap plugin is installed and ready for viewing AppMaps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-appmap-for-the-rails-sample-app-recording"&gt;
  &lt;/a&gt;
  Configure AppMap for the Rails Sample App recording
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-add-appmap-gem-appmap-railtie-and-appmap-for-minitest"&gt;
  &lt;/a&gt;
  1. Add appmap gem, appmap railtie and appmap for minitest
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;00:10&lt;/code&gt; In the first step, instrument the application for AppMap recording. Add the appmap gem to the Gemfile and run &lt;code&gt;bundle&lt;/code&gt; to install.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'appmap'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;00:18&lt;/code&gt; Next, add the appmap railtie. The railtie will only be activated if the appmap gem is in the bundle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'appmap/railtie'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sx"&gt;%w[test development]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;member?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;00:27&lt;/code&gt; The Rails Sample App uses minitest. To &lt;code&gt;test_helper.rb&lt;/code&gt;, add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'appmap/minitest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should be placed before any of the application code is loaded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-configure-appmapyml"&gt;
  &lt;/a&gt;
  2. Configure appmap.yml
&lt;/h3&gt;

&lt;p&gt;The AppMap framework uses a file called &lt;code&gt;appmap.yml&lt;/code&gt; to determine which code to map. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;00:42&lt;/code&gt; Create a new file &lt;code&gt;appmap.yml&lt;/code&gt; in the root folder of your project. You should add all the source folders and gems of your project that you want to capture. Here is an example for the Rails Sample App that is used in this demo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sample_app_6th_ed&lt;/span&gt;
&lt;span class="na"&gt;packages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app/controllers&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app/helpers&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app/jobs&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app/mailers&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app/models&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;image_processing&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mini_magick&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;active_storage_validations&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bcrypt&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;gem&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;will_paginate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#record-appmaps-from-tests"&gt;
  &lt;/a&gt;
  Record AppMaps from tests
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;00:58&lt;/code&gt; Now you are ready to record an appmap.  To get a recording, run a test with the environment variable &lt;code&gt;APPMAP=true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is easy to modify the test Run configuration to include the APPMAP variable in RubyMine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxTzbZQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fyzblj14fei55jgs7fn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxTzbZQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fyzblj14fei55jgs7fn.png" alt="Test run configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the test is run, an AppMap will be recorded in the &lt;code&gt;tmp/appmap/minitest&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXlgDGgo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ct0aiymyucsjz2nj30r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXlgDGgo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ct0aiymyucsjz2nj30r.png" alt="Run test in RubyMine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: you can run the tests and record AppMaps directly from the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ APPMAP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#open-a-generated-appmap-in-rubymine"&gt;
  &lt;/a&gt;
  Open a generated AppMap in RubyMine
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;01:17&lt;/code&gt; Open the AppMaps view - click on the &lt;code&gt;AppMaps&lt;/code&gt; tab in the UI. Or, press &lt;code&gt;CTRL or COMMAND + SHIFT + A&lt;/code&gt;, then type "AppMaps" in the search box and pick the `AppMaps View" from the list.&lt;/p&gt;

&lt;p&gt;Select an AppMap from the list of all AppMaps found in the project folders, or search for an AppMap with a specific phrase in its name.&lt;/p&gt;

&lt;p&gt;Double click on an AppMap in the list, an interactive diagram viewer opens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_XTC-u6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg810oay44z58x21v5io.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_XTC-u6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg810oay44z58x21v5io.png" alt="Dependency Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interact-with-the-appmap-diagram"&gt;
  &lt;/a&gt;
  Interact with the AppMap diagram
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;01:20&lt;/code&gt; Discover how the Rails Sample Application works in the AppMap diagrams. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start with the big picture of your software design and view all code components in the Dependency Map - Web Service endpoints, Java packages/classes/functions and SQL commands and their inter-dependencies&lt;/li&gt;
&lt;li&gt;Navigate to sources of classes and functions directly from the diagrams so you don't have to look for them manually&lt;/li&gt;
&lt;li&gt;Drill down the execution details of code and SQL in the execution Trace.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_WYHK_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/699dc2hx58tkglvxv54u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_WYHK_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/699dc2hx58tkglvxv54u.png" alt="Execution Trace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or, you can use a bottom-up approach. Let's say you want to know what code modifies data in the database. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start with a SQL command of interest - like an UPDATE&lt;/li&gt;
&lt;li&gt;View how it's connected to other calls in the Trace, then backtrack to its calling component and open its source file &lt;/li&gt;
&lt;li&gt;See how it is connected to other code and Web Service endpoints.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNNla9Ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7seitl8ikhf67nunidk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNNla9Ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7seitl8ikhf67nunidk.png" alt="Trace with source code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more-about-appmap"&gt;
  &lt;/a&gt;
  Learn more about AppMap
&lt;/h2&gt;

&lt;p&gt;This is only a small demonstration of the AppMap capabilities. For more information, step-by-step instructions and practical how-tos, check out the &lt;a href="https://appland.com/docs"&gt;AppMap documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acknowledgements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://dev.to/ptrdvrk"&gt;Petr&lt;/a&gt; and Dan for all their hard work on this video!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>🦋Email Validation made simple in Flutter</title>
      <author>Luciano Jung</author>
      <pubDate>Thu, 27 May 2021 12:30:52 +0000</pubDate>
      <link>https://dev.to/lucianojung/email-validation-made-simple-in-flutter-5hjh</link>
      <guid>https://dev.to/lucianojung/email-validation-made-simple-in-flutter-5hjh</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@inlytics?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;inlytics | LinkedIn Analytics Tool&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/login?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Welcome to my first article about Flutter package testing. Each week, I will test another package published under pub.dev.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-validator"&gt;
  &lt;/a&gt;
  Email Validator
&lt;/h2&gt;

&lt;p&gt;This week’s package provides you with one easy-to-use function to validate an email input. The author mentions that this is a simple (but “correct”) Dart class for email validation without using regular expressions. We’ll come back later to why he calls it correct.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-purpose"&gt;
  &lt;/a&gt;
  The Purpose
&lt;/h2&gt;

&lt;p&gt;I think the purpose of this package is very clear. For example, if you want to register a user with an email address and a password, you have to verify that the email address is valid. If it’s not, you can give your user a hint that they have to check their email address again for any spelling mistakes. Not all backend systems support email validation while creating a new user. According to your app’s user experience, it’s also much better to help your user when they’ve finished the email address input and want to start filling in a password.&lt;br&gt;
Most of the time, you start searching for an email validation right when you need it. Looking at Stack Overflow, the most upvoted response for this scenario is a complex regex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-scope"&gt;
  &lt;/a&gt;
  Package Scope
&lt;/h2&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#head-over-to-medium-to-read-the-whole-post-for-free"&gt;
  &lt;/a&gt;
  Head over to Medium to read the whole post for free:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://betterprogramming.pub/how-to-validate-emails-in-flutter-957ae75926c9?sk=8cd64b19f4f1eb8bba3ac297cb78e8dd"&gt;https://betterprogramming.pub/how-to-validate-emails-in-flutter-957ae75926c9?sk=8cd64b19f4f1eb8bba3ac297cb78e8dd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>programming</category>
      <category>android</category>
      <category>dart</category>
    </item>
    <item>
      <title>Top 10 Tricky InterView Question About JavaScript</title>
      <author>MD. Kais</author>
      <pubDate>Thu, 27 May 2021 12:13:22 +0000</pubDate>
      <link>https://dev.to/mdkais/top-10-tricky-interview-question-about-javascript-59k8</link>
      <guid>https://dev.to/mdkais/top-10-tricky-interview-question-about-javascript-59k8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#truthy-vs-falsy"&gt;
  &lt;/a&gt;
  Truthy vs Falsy:
&lt;/h2&gt;

&lt;p&gt;As well as a type, each value also has an inherent boolean value, generally known as either &lt;em&gt;truthy&lt;/em&gt; or &lt;em&gt;falsy&lt;/em&gt;. Some of the rules are a little bizarre so understanding the concepts and effect on comparison helps when debugging JavaScript applications.&lt;/p&gt;

&lt;p&gt;The following values are &lt;strong&gt;always falsy&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt; (zero)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;''&lt;/code&gt; or &lt;code&gt;""&lt;/code&gt; (empty string)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything else is &lt;strong&gt;truthy&lt;/strong&gt;. That includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;'0'&lt;/code&gt; (a string containing a single zero)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;'false'&lt;/code&gt; (a string containing the text “false”)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[]&lt;/code&gt; (an empty array)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{}&lt;/code&gt; (an empty object)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;function(){}&lt;/code&gt; (an “empty” function)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything else is truthy.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#null-vs-undefined"&gt;
  &lt;/a&gt;
  Null vs Undefined
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#when-it-cause-undefined"&gt;
  &lt;/a&gt;
  when it cause undefined?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;declare but don't put a value.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//undefined;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Don't return a function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//undefined; //cause no retrun from the function.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;don't return a value
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//undefined; //cause no retrun a  value from the function.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;if the value is not there
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kais&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;01213&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//undefined;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;if you set the value as undefined?
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//undefined;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-we-get-null"&gt;
  &lt;/a&gt;
  when we get null?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;when we set the value as null
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in code: &lt;a href="https://github.com/Md-Kais/javaScript_interview/blob/main/nullVsundefined.js"&gt;https://github.com/Md-Kais/javaScript_interview/blob/main/nullVsundefined.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#double-equal-vs-triple-equal"&gt;
  &lt;/a&gt;
  Double equal vs Triple Equal
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//tripleEqualVsDoubleEqual&lt;/span&gt;
&lt;span class="c1"&gt;//popular interview ques&lt;/span&gt;
&lt;span class="c1"&gt;//double equal never check data type of this variable{values};&lt;/span&gt;
&lt;span class="c1"&gt;//triple equal checks {data type+value}(strictly checks)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;double match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//double match cause 0 means false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;triple match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//0 is number and false is boolean type(never match);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kice&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nx"&gt;kice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;double match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//value matches&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;kice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;triple match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//triple never match cause kais is number and kice is boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//ALL  triple match is double match  but all double match isnot triple match&lt;/span&gt;
&lt;span class="c1"&gt;//as a jr. ,you use triple equal&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rais&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kais&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;kice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;double match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//value matches&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rais&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;rice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;triple match&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//triple matches cause of datatype+value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#scope"&gt;
  &lt;/a&gt;
  Scope:
&lt;/h2&gt;




&lt;ul&gt;
&lt;li&gt;Local Scope&lt;/li&gt;
&lt;li&gt;Global Scope&lt;/li&gt;
&lt;li&gt;Function Scope: Each Object/ function create a function scope&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#global-scop"&gt;
  &lt;/a&gt;
  Global Scop
&lt;/h3&gt;




&lt;ul&gt;
&lt;li&gt;When programmer declare a undeclared variable inside a function then it creates a global scope and become a global variable; Using Strict mode to solve this problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In "Strict Mode", undeclared variables are not automatically global. 'use strict'; at the top of the code makes it strict mode. more at: &lt;a href="https://www.w3schools.com/js/js_strict.asp"&gt;https://www.w3schools.com/js/js_strict.asp&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;carName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Volvo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rohit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//rohit;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//error; variable not declared.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//Volvo. cause creates a global variable.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When programmer create a variable name using var. It becomes global variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#local-scope"&gt;
  &lt;/a&gt;
  Local Scope
&lt;/h3&gt;




&lt;ul&gt;
&lt;li&gt;Variables declared within a JavaScript function, become &lt;strong&gt;LOCAL&lt;/strong&gt; to the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Local variables have &lt;strong&gt;Function scope&lt;/strong&gt;: They can only be accessed from within the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;carName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Volvo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//global scope.&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rohit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//friend is a local variable&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//rohit;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//error; variable not declared.It's Local variable.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;carName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//Volvo. cause undeclaration creates a global variable.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#the-lifetime-of-javascript-variables"&gt;
  &lt;/a&gt;
  the Lifetime of JavaScript Variables
&lt;/h3&gt;




&lt;p&gt;The lifetime of a JavaScript variable starts when it is declared.&lt;/p&gt;

&lt;p&gt;Local variables are deleted when the function is completed.&lt;/p&gt;

&lt;p&gt;In a web browser, global variables are deleted when you close the browser window (or tab).&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#scope-problem"&gt;
  &lt;/a&gt;
  scope problem
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;down&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ?&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ?&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ?&lt;/span&gt;
&lt;span class="c1"&gt;//1,2,1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closuremain-confusing-part"&gt;
  &lt;/a&gt;
  Closure(main CONFUSING PART)
&lt;/h2&gt;




&lt;p&gt;Closure means that things which creates a Unique Environment Inside an Environment. it means there is a part &lt;code&gt;[[ environment ]]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;definition&lt;/code&gt; if you a function within a function , execution of the inner function will create a scope inside of the outer function-a nested scope. Because the inside function is enclosed by outer function scope, the inner function&lt;br&gt;
&lt;a href="https://www.thatjsdude.com/images/scope/closureTwoFunc.png"&gt;https://www.thatjsdude.com/images/scope/closureTwoFunc.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.thatjsdude.com/jsConcepts/concepts/scope.html"&gt;https://www.thatjsdude.com/jsConcepts/concepts/scope.html&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//creates closure&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//to skip undefined replying&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//you call a function inside a function. so, you call the outer function is or not . the inner function execute.&lt;/span&gt;

&lt;span class="c1"&gt;//make a complex closure function;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;panda&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;penty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;penty&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;penty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;




&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;penty1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;panda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;penty2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;panda&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty2&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty2&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty2&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;penty1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQAaCjm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3gqf2haikmmyugodw0r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQAaCjm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3gqf2haikmmyugodw0r.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#difference-between-bindcallapply"&gt;
  &lt;/a&gt;
  Difference Between Bind,Call,Apply
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#what-is-bind"&gt;
  &lt;/a&gt;
  what is bind?
&lt;/h3&gt;

&lt;p&gt;ans:&lt;br&gt;
      1. Bind an object to a function.&lt;br&gt;
      2.reference it using 'this'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//bind reduce the code repitition and make code DRY&lt;/span&gt;
&lt;span class="c1"&gt;//bind is calling a function without owner of this function&lt;/span&gt;
&lt;span class="c1"&gt;//suppose rohit has an axe . and you land it to kais. and kais can chope the wood but kais is not the owner of the axe&lt;/span&gt;
&lt;span class="c1"&gt;// so bind is a function calling.&lt;/span&gt;

&lt;span class="c1"&gt;//lets call two object&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22222&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2333&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;printObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c_1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ans_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;printObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c_2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ans_1&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="nx"&gt;ans_2&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;printObject&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;//undifined, undifined . cause this or object can't mention before&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#call-vs-apply"&gt;
  &lt;/a&gt;
  Call vs Apply
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//call vs Apply&lt;/span&gt;
&lt;span class="c1"&gt;// call -&amp;gt; c, comma&lt;/span&gt;
&lt;span class="c1"&gt;//apply -&amp;gt; a, array&lt;/span&gt;
&lt;span class="c1"&gt;//call and apply is almost same. you have to call a object like this : &lt;/span&gt;
&lt;span class="c1"&gt;//call:&lt;/span&gt;
&lt;span class="c1"&gt;//syntax: name_of_the-object_where_original_function_is_created.function_name.call(where_u_apply,data1,data2,data3,........................,dataN);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;normalPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Md.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kais&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="c1"&gt;//anonymus function;&lt;/span&gt;
    &lt;span class="na"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5500&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;heroPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Masfdsdaf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ksfsadfd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="c1"&gt;//anonymus function;&lt;/span&gt;
    &lt;span class="na"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;netSalary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TAX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tips&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dutyless&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;TAX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;tips&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;dutyless&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//call-&amp;gt;comma&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroPerson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;netSalary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normalPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="c1"&gt;//4795&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroPerson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;netSalary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="c1"&gt;//9795&lt;/span&gt;
&lt;span class="c1"&gt;//apply-&amp;gt; array&lt;/span&gt;
&lt;span class="c1"&gt;//data is passed by the help of array&lt;/span&gt;
&lt;span class="c1"&gt;//syntax: name_of_the-object_where_original_function_is_created.function_name.call(where_u_apply,[data1,data2,data3,........................,dataN]);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroPerson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;netSalary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normalPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;&lt;span class="c1"&gt;//4795&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroPerson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;netSalary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heroPerson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;&lt;span class="c1"&gt;//9795&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#this-keywordimportant"&gt;
  &lt;/a&gt;
  this keyword(important)
&lt;/h2&gt;




&lt;p&gt;which is left side of the dot , this keyword follow that .&lt;/p&gt;

&lt;p&gt;if there is no context , then &lt;code&gt;this&lt;/code&gt; refers the whole window.&lt;/p&gt;

&lt;p&gt;if there is an element , then &lt;code&gt;this&lt;/code&gt; refers the that element.&lt;/p&gt;

&lt;p&gt;if there is an object, then &lt;code&gt;this&lt;/code&gt; refers that object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kuddus Ali&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;// this myObject er jonno kaj korbe. &lt;/span&gt;
                &lt;span class="c1"&gt;// kintu amra jodi ei method ta onno object er jonno declare kori, tahole this oi method er hoye kaj korbe. &lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mr. &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// console.log(myObject.getFullName);&lt;/span&gt;
        &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anotherObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bidyut Ali&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;anotherObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// console.log(anotherObject.getFullName);&lt;/span&gt;
        &lt;span class="nx"&gt;anotherObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// ekhane add method or function er bam pashe kono object dot(.) diye jukto nai, tai this er value ta hobe window. &lt;/span&gt;

        &lt;span class="nx"&gt;anotherObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// add function ta ke anotherObject er sum method hisebe declare korlam. &lt;/span&gt;

        &lt;span class="nx"&gt;anotherObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// ekhane sum() function er bame dot(.) diye anotherObject ase. &lt;/span&gt;
        &lt;span class="c1"&gt;// tai seta this hisebe jabe add function er vitor. &lt;/span&gt;

        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I will come after 5 seconds delay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//The keyword  you use to refer to an object through which they were invoked is this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#event-loop-stack-and-queue"&gt;
  &lt;/a&gt;
  Event Loop , Stack and Queue
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZMVc-h3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8j5hrmyfd5h0aqjw47f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZMVc-h3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8j5hrmyfd5h0aqjw47f.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Event loop means, how javascript works when execute that code. JavaScript event loops works in a stack way. It reads all the code. then start executing. Which comes first that execute last. Look at the video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZcei9s2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oi8l0n3rh0hdjqzopu2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZcei9s2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3oi8l0n3rh0hdjqzopu2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;video link :  &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ&amp;amp;vl=en"&gt;https://www.youtube.com/watch?v=8aGhZQkoFbQ&amp;amp;vl=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--31gBUttq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9txynelbrah59bkws324.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--31gBUttq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9txynelbrah59bkws324.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#callback-function"&gt;
  &lt;/a&gt;
  Callback Function
&lt;/h2&gt;




&lt;p&gt;A callback is a function passed as an argument to another function&lt;/p&gt;

&lt;p&gt;This technique allows a function to call another function&lt;/p&gt;

&lt;p&gt;A callback function can run after another function has finished&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#callback-function-sequence"&gt;
  &lt;/a&gt;
  Callback Function Sequence
&lt;/h3&gt;

&lt;p&gt;JavaScript functions are executed in the sequence they are called. Not in the sequence they are defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hellp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kais&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rohit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//hellpkais;&lt;/span&gt;
&lt;span class="c1"&gt;//hellprohit;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dom-api"&gt;
  &lt;/a&gt;
  DOM API
&lt;/h2&gt;




&lt;p&gt;DOM→ Document Object Model.&lt;/p&gt;

&lt;p&gt;There are three types of things we have to care about when we create any website. They are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Content&lt;/li&gt;
&lt;li&gt;Presentation&lt;/li&gt;
&lt;li&gt;Behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We know content is controlled by HTML, presentation by CSS where the behavior which is the most important factor for a dynamic website is controlled by JavaScript. Now to make them work altogether, we need something that could be accessed by all of the technology we use(HTML, CSS, JavaScript). What if we create and control all of the 3 concerns using just this 'something'. This will be much easier. From here the idea of the DOM first came. This 'something' we were talking about is nothing but DOM API.&lt;/p&gt;

&lt;p&gt;When we create any content for the Internet using HTML, the browsers convert them to a document object which contains all the elements we mentioned in the content as nodes. If we assign different styles to an individual element, this gets also saved in its node in the DOM.&lt;/p&gt;

&lt;p&gt;Now here is the good thing. We can access any of the contents and presentations using JavaScript to manipulate them for different conditions, in other words adding behaviour to make the content dynamic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="na"&gt;DOCTYPE&lt;/span&gt; &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;DOM Page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The main heading&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"highlight"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;An interesting summary of this content.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      Some supplementary details to accompany our discussion.
             It also has a &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;link&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;.
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"widget"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;School&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Color&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;UNC Chapel Hill&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Carolina Blue&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NC State&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Wolfpack Red&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above HTML will look like this in the DOM object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BfcvzQbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ahty6n5qs5e2kl7ufqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfcvzQbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ahty6n5qs5e2kl7ufqu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image and the code are taken from &lt;a href="https://web-fundamentals.dev/dom-api"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Error Handling In React.</title>
      <author>Barnabas Babatunde</author>
      <pubDate>Thu, 27 May 2021 12:03:47 +0000</pubDate>
      <link>https://dev.to/barnabas19/error-handling-in-react-3h0a</link>
      <guid>https://dev.to/barnabas19/error-handling-in-react-3h0a</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this article, we are going to cover the basics of error handling in React. At the end of this article, you should:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;know what an error boundary is, and how to build one.&lt;/li&gt;
&lt;li&gt;know the two methods involved in error handling phase of a React component:- &lt;code&gt;componentDidCatch(error, info)&lt;/code&gt; and &lt;code&gt;static getDerivedStateFromError(error)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;become a better React developer 😁&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Let's dive in.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#error-boundaries-the-what"&gt;
  &lt;/a&gt;
  Error Boundaries: The What.
&lt;/h3&gt;

&lt;p&gt;Error boundaries are class components designed to catch run-time errors anywhere in the React component tree, and display a fallback view (user interface) in the event of such errors. It usually implements either one or both of the (lifecycle) methods:- &lt;code&gt;componentDidCatch&lt;/code&gt; or &lt;code&gt;getDerivedStateFromError&lt;/code&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#error-boundaries-the-why"&gt;
  &lt;/a&gt;
  Error Boundaries: The Why.
&lt;/h3&gt;

&lt;p&gt;When an error occurs at run-time, React basically unmounts the entire component tree, leaving our application broken, with an error message popping up:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6ydotfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rz6v2qrwipja5cttz2u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6ydotfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rz6v2qrwipja5cttz2u.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Take for instance, an e-commerce application. We definitely do not want our customers to have something like that pop up on their devices whenever an error occurs in the application. Instead, we want to prepare (beforehand) a fallback view, and render that view in case an error occurs in production. We can achieve this with error boundaries!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-componentdidcatch-endraw-and-raw-getderivedstatefromerror-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;componentDidCatch&lt;/code&gt; and &lt;code&gt;getDerivedStateFromError&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These are two lifecycle methods implemented in an error boundary. Recall that an error boundary is simply a React class component. &lt;code&gt;getDerivedStateFromError&lt;/code&gt; is used to render a fallback view whenever an error occurs. &lt;code&gt;componentDidCatch&lt;/code&gt; is used to log the error information.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-build-an-error-boundary"&gt;
  &lt;/a&gt;
  Let's Build An Error Boundary
&lt;/h3&gt;

&lt;p&gt;First, we create a component called &lt;code&gt;Demo&lt;/code&gt; in &lt;code&gt;Demo.js&lt;/code&gt; file, and mount the component in our &lt;code&gt;App.js&lt;/code&gt; file. All &lt;code&gt;Demo&lt;/code&gt; does is render a simple view.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;Demo.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error occurred&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;This is a &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; text&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;code&gt;App.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x2OqpJjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9gmzrmhw9zewhjjnkmz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2OqpJjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9gmzrmhw9zewhjjnkmz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Now, let's mount two more instances of &lt;code&gt;Demo&lt;/code&gt; in &lt;code&gt;App&lt;/code&gt;. We now have a total number of three &lt;code&gt;Demo&lt;/code&gt; components in &lt;code&gt;App&lt;/code&gt;. One out of the three components throws an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This crashes the entire application:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ia3p-5hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daj5i65wslajotdkco1s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ia3p-5hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daj5i65wslajotdkco1s.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;We do not want our entire application to crash just because of one (or few) component(s) that has/have an error.&lt;/strong&gt; Instead, we wrap that component with an error boundary. By wrapping such component with an error boundary, only that component is affected (and handled). The remaining components still remain unaffected.&lt;br&gt;
As the name implies - &lt;strong&gt;error boundary&lt;/strong&gt;, we are setting boundaries around errors😃&lt;/p&gt;

&lt;p&gt;Let's now go ahead and build our error boundary! Go back to your text editor and create a new file. Name it whatever you like. But I'll call mine &lt;code&gt;ErrorBoundary.js&lt;/code&gt; for semantics. In &lt;code&gt;ErrorBoundary.js&lt;/code&gt;, I will create a class component called &lt;code&gt;ErrorBoundary&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;throwsError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getDerivedStateFromError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;throwsError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;componentDidCatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;throwsError&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Oops! An error occurred&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Afterwards, I will import my &lt;code&gt;ErrorBoundary&lt;/code&gt; component in &lt;code&gt;App&lt;/code&gt; and wrap all three &lt;code&gt;Demo&lt;/code&gt; components with &lt;code&gt;ErrorBoundary&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ErrorBoundary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: &lt;br&gt;&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt;: In the development environment, we still see the error. This is because React still wants you to know the source of your errors and make sure you fix them, while building your application. &lt;strong&gt;Error boundaries are only useful in production environments&lt;/strong&gt;. So, it's an intended behaviour:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_xe9fFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu0ym1dfy4403srorp19.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_xe9fFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu0ym1dfy4403srorp19.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, you can click on the close button at the top right, so that you can see your fallback view in action:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--twAD0U9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d7103qh0jx702s9zy0l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twAD0U9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d7103qh0jx702s9zy0l.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
We can see how our fallback view is gracefully rendered. You can be as creative as you like with your fallback user interface.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#let-us-walk-through-the-raw-errorboundary-endraw-component-source-code"&gt;
  &lt;/a&gt;
  Let us walk through the &lt;code&gt;ErrorBoundary&lt;/code&gt; component source code:
&lt;/h4&gt;

&lt;p&gt;Within the class, we define a &lt;code&gt;constructor&lt;/code&gt; which initializes the class with some state. In &lt;code&gt;this.state&lt;/code&gt; object, we set a state property &lt;code&gt;throwsError&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; initially.&lt;/p&gt;

&lt;p&gt;Next we define a method &lt;code&gt;static getDerivedStateFromError(error)&lt;/code&gt;. This method receives a parameter &lt;code&gt;error&lt;/code&gt;. Within the function body, we returned a new state object which has a property called &lt;code&gt;throwsError&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. This new state object will be used to change &lt;code&gt;this.state.throwsError&lt;/code&gt; (initially set to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;constructor&lt;/code&gt;) to &lt;code&gt;true&lt;/code&gt; whenever a component throws an error.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
A change in state (&lt;code&gt;this.state.throwsError&lt;/code&gt;) will trigger a rerender lifecycle, causing our fallback view to be displayed.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
In the &lt;code&gt;render()&lt;/code&gt; method, we create our desired fallback view (the &lt;code&gt;h1&lt;/code&gt; tag) which will display when &lt;code&gt;this.state.throwsError&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Or else, display the actual child components (&lt;code&gt;this.props.children&lt;/code&gt;) when there is no error.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;componentDidCatch&lt;/code&gt; method, we simply log the &lt;strong&gt;error&lt;/strong&gt; and the &lt;strong&gt;error information&lt;/strong&gt; to the console.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#where-should-you-place-your-error-boundaries"&gt;
  &lt;/a&gt;
  Where Should You Place Your Error Boundaries?
&lt;/h3&gt;

&lt;p&gt;What we initially did was enclose all the &lt;code&gt;Demo&lt;/code&gt; components with our error boundary. So if there is an error in any component (within the error boundary), &lt;strong&gt;everything&lt;/strong&gt; within the error boundary (including healthy components) will be hidden and the fallback view rendered. Not ideal!&lt;br&gt;
We should isolate each &lt;code&gt;Demo&lt;/code&gt; component with an error boundary so only the faulty component gets hidden by the fallback view.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Let us edit our &lt;code&gt;App.js&lt;/code&gt; file by wrapping each &lt;code&gt;Demo&lt;/code&gt; component with our error boundary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Demo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ErrorBoundary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Demo&lt;/span&gt;  &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
Now, we can see that only the third &lt;code&gt;Demo&lt;/code&gt; component (which has an error) gets hidden by the fallback view:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtE7NTW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/john5ibb1z5xusodq7g2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtE7NTW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/john5ibb1z5xusodq7g2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
The placement of your error boundary is totally up to you. But it is reasonable to isolate your components so that other components do not get affected when one or few component(s) throw(s) an error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion.
&lt;/h3&gt;

&lt;p&gt;In the last few minutes, we have learned what an error boundary is, and the lifecycle methods it implements. We have also seen how to create and use it in our react applications. Hopefully, you now have the basic skills to handle errors in your React projects ✨✨&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Mistakes people do on Twitter when trying to grow their account</title>
      <author>Pasca Vlad</author>
      <pubDate>Thu, 27 May 2021 12:00:03 +0000</pubDate>
      <link>https://dev.to/pascavld/5-mistakes-people-do-on-twitter-when-trying-to-grow-their-account-1opk</link>
      <guid>https://dev.to/pascavld/5-mistakes-people-do-on-twitter-when-trying-to-grow-their-account-1opk</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-they-are-not-consistent"&gt;
  &lt;/a&gt;
  1. They are not consistent
&lt;/h3&gt;

&lt;p&gt;If you want to grow on any social media platform, not only Twitter, you need to be consistent&lt;/p&gt;

&lt;p&gt;Post a Tweet every single day&lt;/p&gt;

&lt;p&gt;Not only that Twitter algorithm will push your tweets more if you are consistent but you will also grow faster&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-they-dont-engage-with-bigger-accounts"&gt;
  &lt;/a&gt;
  2. They don't engage with bigger accounts
&lt;/h3&gt;

&lt;p&gt;In the beginning, no one will see your tweets&lt;/p&gt;

&lt;p&gt;Unfortunately, this is the truth&lt;/p&gt;

&lt;p&gt;To grow in the beginning, you need to engage with a bigger account&lt;/p&gt;

&lt;p&gt;Reply to their tweets and add value&lt;/p&gt;

&lt;p&gt;Do this until you get to over 1000 followers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-they-use-a-lot-of-hashtags"&gt;
  &lt;/a&gt;
  3. They use a lot of hashtags
&lt;/h3&gt;

&lt;p&gt;Using more than 2 hashtags on your posts is useless&lt;/p&gt;

&lt;p&gt;You could use at max 2 hashtags until you get to 1000-1500 followers&lt;/p&gt;

&lt;p&gt;But after that drop them&lt;/p&gt;

&lt;p&gt;They just make your posts look spammy and no one wants to engage with spammy tweets&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-they-have-a-bad-bio"&gt;
  &lt;/a&gt;
  4. They have a bad bio
&lt;/h3&gt;

&lt;p&gt;Your bio should tell others who you are, what's your content is about, and what they get if they follow you&lt;/p&gt;

&lt;p&gt;Don't use hashtags in your bio&lt;/p&gt;

&lt;p&gt;Keep it simple and don't talk about useless stuff&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-they-dont-know-how-to-format-their-tweets"&gt;
  &lt;/a&gt;
  5. They don't know how to format their tweets
&lt;/h3&gt;

&lt;p&gt;You need to add more spaces between in your tweets&lt;/p&gt;

&lt;p&gt;Like I do&lt;/p&gt;

&lt;p&gt;This will make your tweets easier to read and people will engage more with them&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>socialmedia</category>
      <category>content</category>
      <category>audience</category>
    </item>
    <item>
      <title>How to make style checkbox in HTML. Pure CSS</title>
      <author>Techy Programmers</author>
      <pubDate>Thu, 27 May 2021 11:53:40 +0000</pubDate>
      <link>https://dev.to/kunaal438/how-to-make-style-checkbox-in-html-pure-css-1gcf</link>
      <guid>https://dev.to/kunaal438/how-to-make-style-checkbox-in-html-pure-css-1gcf</guid>
      <description>&lt;p&gt;Hello, glad you are here. I am kunaal and today we will see how to style checkbox in HTML. How we can easily make our own custom checkbox for website. You can see demo below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kunaal_kumar/embed/vYxJrGK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial-"&gt;
  &lt;/a&gt;
  Video Tutorial -
&lt;/h1&gt;

&lt;p&gt;If you find this article hard or for better explanation. You can watch video tutorial.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/St-DDo3hB_M"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like the video tutorial. Please consider subscribing my youtube channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;Inside body tag lets make some check boxes&lt;/p&gt;

&lt;p&gt;HTML&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"checkbox2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"checkbox2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#6da8ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;110px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;110px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.circle&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff6262&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.circle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.circle&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#6fff57&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
I hope you understood everything. If you have any doubt or you find any mistake that I made or you have any suggestion feel free to ask me in comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in programming and want to know how I a 15yr old teen do coding make these design. You can follow me on my Instagram. I am also planning to post my game development stuff on Instagram.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/TechyProgrammers/"&gt;My youtube Channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/techy_programmers/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Use components without a frontend framework</title>
      <author>Malte Riechmann</author>
      <pubDate>Thu, 27 May 2021 11:49:25 +0000</pubDate>
      <link>https://dev.to/visuellverstehen/use-components-without-a-frontend-framework-4338</link>
      <guid>https://dev.to/visuellverstehen/use-components-without-a-frontend-framework-4338</guid>
      <description>&lt;h2&gt;
  &lt;a href="#frontend-frameworks"&gt;
  &lt;/a&gt;
  Frontend frameworks
&lt;/h2&gt;

&lt;p&gt;Within this post, I will show you one, of many ways to use components without a frontend framework. Do not get me wrong, I like frameworks like Vue.js, React, or Angular. At our company, we write JavaScript with Vue.js on a daily basis.&lt;/p&gt;

&lt;p&gt;But sometimes those frameworks are too much. Especially when building simple websites instead of complex web applications. In these cases, we do not use a framework at all and just write HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;If your source code gets messy there is often an easy way to improve it. Move your source code into smaller chunks – &lt;a href="https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm"&gt;divide and conquer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Splitting your source code into multiple components is a well-known way to structure your project. Things get isolated, readable, clear, reusable, extendable, and maintainable. In fact, that is what most of the frontend frameworks do themselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#welcome-to-bem"&gt;
  &lt;/a&gt;
  Welcome to BEM
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/bem-101/"&gt;BEM (Block Element Modifier)&lt;/a&gt; is a methodology to organize your frontend. It is mostly known in the world of CSS, but I am going to show you how to use it for JavaScript, too. Please remember, BEM is a methodology and not a framework. It will come with zero dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-card-block"&gt;
  &lt;/a&gt;
  A card block
&lt;/h2&gt;

&lt;p&gt;In BEM the components are called blocks. It is just different terminology for the same thing.&lt;/p&gt;

&lt;p&gt;Now, imagine a card block (&lt;a href="https://jsfiddle.net/3stx2jqa/"&gt;source code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdSq2ay1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26ltrld7bskr6nd9sl4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdSq2ay1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26ltrld7bskr6nd9sl4g.png" alt="Example of a card block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;

&lt;p&gt;We use HTML for the structure and content of the card block. Of course, you can use programming languages, template engines, or other tools to improve the HTML part of the block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;article class="card card--highlight"&amp;gt;
    &amp;lt;figure class="card__figure"&amp;gt;
        &amp;lt;img class="card__image" src="#"&amp;gt;
        &amp;lt;figcaption class="card__caption"&amp;gt;#ffed00&amp;lt;/figcaption&amp;gt;
    &amp;lt;/figure&amp;gt;
    &amp;lt;h2 class="card__headline"&amp;gt;Corporate yellow&amp;lt;/h2&amp;gt;
    &amp;lt;p class="card__description"&amp;gt;This yellow is defined as #ffed00. It is a very nice color. It is one of our corporate colors at visuellverstehen.&amp;lt;/p&amp;gt;
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h3&gt;

&lt;p&gt;We use CSS for the presentation and style of the card block. Of course, you can use pre processors, post processors, or other tools to make CSS more comfortable to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.card {
  font-family: sans-serif;
  line-height: 1.5;
  padding: 1rem;
  max-width: 20rem;
  border: 0.25rem solid #f6f6f6;
}

.card.card--highlight {
  border-color: #ffed00;
}

.card__figure {
  margin: 0;
}

.card__image {
  display: block;
  width: 100%;
  height: 6rem;
}

.card__caption {
  padding-top: 0.5rem;
  padding-bottom: 0.5rem;
}

.card__headline {
  font-size: 1.5rem;
  font-weight: bold;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;

&lt;p&gt;We use JavaScript for the functionality of the card block. Of course, you can use all kinds of tools to improve how you write JavaScript (Babel, TypeScript, ESLint, webpack, …).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function () {

  var initializeCard = function($card) {
    console.log('Do whatever this $card block should be doing.');
  };

  document.addEventListener('DOMContentLoaded', function() {
    var $cards = document.querySelectorAll('.card');

    for (var i = $cards.length - 1; i &amp;gt;= 0; i--) {
      initializeCard($cards[i]);
    }
  });

}());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes blocks have to communicate with each other. For that, there are at least two good options: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent"&gt;Custom events&lt;/a&gt; and &lt;a href="https://css-tricks.com/build-a-state-management-system-with-vanilla-javascript/"&gt;stage management&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-the-basics"&gt;
  &lt;/a&gt;
  Learn the basics
&lt;/h2&gt;

&lt;p&gt;It is remarkable how much can be done just using HTML, CSS, and JavaScript. That is one reason why I encourage everyone to &lt;a href="https://dev.to/visuellverstehen/but-first-learn-the-basics-1113"&gt;learn the basics&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Ruby and computer science: a self-learning curriculum</title>
      <author>Felipe Vogel</author>
      <pubDate>Thu, 27 May 2021 11:39:49 +0000</pubDate>
      <link>https://dev.to/fpsvogel/ruby-and-computer-science-a-self-learning-curriculum-4da9</link>
      <guid>https://dev.to/fpsvogel/ruby-and-computer-science-a-self-learning-curriculum-4da9</guid>
      <description>&lt;p&gt;It's been exactly one year since I started studying part-time to get into software development, and I thought it would be useful to write out my curriculum. I am learning Ruby, Rails, and a healthy dose of computer science. I'm also putting this &lt;a href="https://github.com/fpsvogel/learn-ruby-and-cs"&gt;on GitHub&lt;/a&gt; where I will continue to update it, but below is my progress as of now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objections"&gt;
  &lt;/a&gt;
  Objections
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Why Ruby?? Isn't JavaScript the obvious choice for web development?&lt;/em&gt; Ruby is a good first language to master because its ecosystem is stable, the community is more experienced, and for me Ruby is more enjoyable to write. Not convinced? &lt;a href="https://medium.com/learn-love-code/why-teach-ruby-bac8416c77ba"&gt;Read this&lt;/a&gt; or &lt;a href="https://youtu.be/IlVfHG-pAag?t=1534"&gt;watch this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;OK, but why so many books and courses?? Isn't practice more important than reading?&lt;/em&gt; Yes, you should be spending more time coding than reading, but starting a project and getting into a coding routine is easy, whereas knowing what to read is not at all obvious at the beginning. Hence the larger space devoted to books and courses here. Besides the obvious reasons to undertake serious study (to learn from the masters, and to spice up my resume), I also simply enjoy knowing how things work under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preliminaries"&gt;
  &lt;/a&gt;
  Preliminaries
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you've never written a line of code in your life, you may want to start with the free &lt;a href="https://pine.fm/LearnToProgram/"&gt;Learn to Program&lt;/a&gt;. I studied some computer science in high school, so I had a bit of a head start.&lt;/li&gt;
&lt;li&gt;If you are a working adult, make sure your day job is conducive to part-time studying. Last year I was a first-year schoolteacher. That meant hours of grading in the evenings and on weekends, which would have made studying impossible. For this and other reasons I switched to a remote tech support job, which freed up my evenings and weekends (and early mornings, with no commute).&lt;/li&gt;
&lt;li&gt;Find a system for keeping &lt;em&gt;organized&lt;/em&gt; notes, code snippets, and articles/videos saved for later. I use a simple text file (&lt;a href="https://illdoitlater.xyz/t/plaintext"&gt;similar to this&lt;/a&gt;), which is more effortless than any knowledge base app that I've tried.&lt;/li&gt;
&lt;li&gt;It's worth dipping into the Ruby and wider programming communities. Here are my favorites:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackernewsletter.com/"&gt;Hacker Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/t/newsletter"&gt;DEV newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ruby: &lt;a href="https://www.reddit.com/r/ruby"&gt;Reddit&lt;/a&gt;, &lt;a href="https://discord.gg/tSFdeuVfpc"&gt;Discord&lt;/a&gt;, &lt;a href="https://www.rubyonrails.link/"&gt;Slack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Rails: &lt;a href="https://www.reddit.com/r/rails"&gt;Reddit&lt;/a&gt; and &lt;a href="https://discord.gg/AuDNwjsyfm"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;others on Discord: &lt;a href="https://discord.gg/Cugms94QFM"&gt;Bridgetown&lt;/a&gt;, &lt;a href="https://discord.com/invite/stimulus-reflex"&gt;StimulusReflex&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Last but not least, take care of yourself! Studying (especially while working) can easily be overdone. Exercise and get plenty of sleep. If you develop wrist pain from computer use, act swiftly: get an ergonomic mouse and keyboard, do daily RSI stretches, and start using a break app such as &lt;a href="https://workrave.org/"&gt;Workrave&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So without further ado, here are my recommendations from what I studied. Resources that are free of charge are marked with a star (⭐). If you need more free resources, see the links to other lists at the bottom. You may be able to find the books for free (from your local library or more dubious sources) but be sure to buy them when you can, to support the authors. 🙂&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-basics"&gt;
  &lt;/a&gt;
  Frontend basics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[x] Treehouse's &lt;a href="https://teamtreehouse.com/tracks/front-end-web-development"&gt;Frontend Web Development&lt;/a&gt; track, or The Odin Project's ⭐&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations"&gt;Foundations&lt;/a&gt; + ⭐&lt;a href="https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/html-and-css"&gt;HTML and CSS&lt;/a&gt; + ⭐&lt;a href="https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/javascript"&gt;JavaScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;Build a blog from scratch:&lt;/strong&gt; &lt;a href="https://fpsvogel.netlify.app"&gt;Here it is&lt;/a&gt;, and &lt;a href="https://fpsvogel.netlify.app/posts/2020-07-23-zs.html"&gt;here's how I built it&lt;/a&gt;. I am also posting daily discoveries on Twitter, where—confession—&lt;a href="https://twitter.com/fpsvogel/status/1389915714098802692"&gt;I sometimes talk to myself&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ruby"&gt;
  &lt;/a&gt;
  Ruby
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[x] &lt;strong&gt;Basics:&lt;/strong&gt; &lt;a href="https://www.manning.com/books/the-well-grounded-rubyist-third-edition"&gt;The Well-Grounded Rubyist&lt;/a&gt; or ⭐&lt;a href="https://www.theodinproject.com/courses/ruby-programming"&gt;The Odin Project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;Guided practice:&lt;/strong&gt; ⭐&lt;a href="https://exercism.io/my/tracks/ruby"&gt;Exercism&lt;/a&gt;, then ⭐&lt;a href="https://www.codewars.com"&gt;CodeWars&lt;/a&gt; if you want more. Be sure to take notes each time you learn something new in an exercise, and &lt;a href="https://fpsvogel.netlify.app/posts/2020-11-03-exercism-ruby.html"&gt;write up a reflection&lt;/a&gt; at the end.&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;OOP:&lt;/strong&gt; &lt;a href="https://www.poodr.com"&gt;Practical Object-Oriented Design: An Agile Primer Using Ruby&lt;/a&gt; (a.k.a. POODR), then &lt;a href="https://sandimetz.com/99bottles-sample-ruby"&gt;99 Bottles of OOP&lt;/a&gt;. More than any other books, these are worth the price tag.&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;Ruby app:&lt;/strong&gt; Apply those OOP lessons. I made a CLI (command-line interface) &lt;a href="https://fpsvogel.netlify.app/posts/2021-05-19-my-first-ruby-app-lessons-learned.html"&gt;app that gives statistics on a reading log&lt;/a&gt;. Along the way I also &lt;a href="https://fpsvogel.netlify.app/posts/2020-12-21-ruby-functional-programming.html"&gt;published a Ruby gem&lt;/a&gt;, though in the end I abandoned it because I realized it did more harm than good. All part of the learning process…&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;Design patterns:&lt;/strong&gt; &lt;a href="https://www.oreilly.com/library/view/head-first-design/9781492077992/"&gt;Head First Design Patterns&lt;/a&gt;. Also ⭐&lt;a href="https://refactoring.guru/"&gt;Refactoring.Guru&lt;/a&gt; for a catalog of code smells, refactoring recipes, and design patterns.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Bridgetown apps:&lt;/strong&gt; I'm remaking my blog on ⭐&lt;a href="https://github.com/bridgetownrb/bridgetown"&gt;Bridgetown&lt;/a&gt; (an updated Jekyll), then I'll use Bridgetown to make a couple of static web apps.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Rails:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;[ ] ⭐&lt;a href="https://gorails.com/series/rails-for-beginners"&gt;Rails for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.udemy.com/course/ruby-on-rails-6-learn-20-gems-build-an-e-learning-platform/"&gt;A general Rails course on Udemy&lt;/a&gt; (or &lt;a href="https://www.udemy.com/courses/search/?duration=extraLong&amp;amp;q=ruby+on+rails&amp;amp;ratings=4.0&amp;amp;sort=newest&amp;amp;src=ukw"&gt;find a newer one&lt;/a&gt; if that one is of date by the time you read this)&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.railstutorial.org"&gt;Ruby on Rails Tutorial&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] ⭐&lt;a href="https://www.railscodealong.com/"&gt;Rails Code Along&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.udemy.com/course/professional-rails-5-development-course/"&gt;Dissecting Ruby on Rails&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] ⭐&lt;a href="https://launchschool.com/books/demystifying_rails"&gt;Demystifying Rails&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Rails app:&lt;/strong&gt; And use &lt;a href="https://docs.stimulusreflex.com/"&gt;StimulusReflex&lt;/a&gt; to build a reactive frontend.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Deployment:&lt;/strong&gt; &lt;a href="https://deploymentfromscratch.com/"&gt;Deployment from Scratch&lt;/a&gt; and &lt;a href="https://leanpub.com/deploying_rails_applications"&gt;Deploying Rails Applications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Open source contributions:&lt;/strong&gt; ⭐&lt;a href="https://www.firsttimersonly.com/"&gt;First Timers Only&lt;/a&gt; is a good place to start.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Polishing up—books:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;a href="https://www.packtpub.com/product/polished-ruby-programming/9781801072724"&gt;Polished Ruby Programming&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://github.com/thoughtbot/ruby-science"&gt;Ruby Science&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://pragprog.com/titles/ppmetr2/metaprogramming-ruby-2/"&gt;Metaprogramming Ruby&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.railsspeed.com/"&gt;The Complete Guide to Rails Performance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.speedshop.co/2021/01/14/announcing-apocrypha.html"&gt;The Ruby on Rails Performance Apocrypha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Polishing up—screencasts and courses:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;[ ] ⭐&lt;a href="https://web-crunch.com/collections"&gt;Web-Crunch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] ⭐&lt;a href="https://thoughtbot.com/blog/announcing-upcase-is-free"&gt;Upcase&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://gorails.com"&gt;GoRails&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.driftingruby.com/"&gt;Drifting Ruby&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.rubytapas.com/"&gt;RubyTapas&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog"&gt;Destroy All Software&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;[ ] ⭐&lt;strong&gt;Polishing up—podcasts:&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;[ ] &lt;a href="https://remoteruby.transistor.fm/episodes"&gt;Remote Ruby&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://5by5.tv/rubyonrails"&gt;Ruby on Rails Podcast&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;a href="https://www.bikeshed.fm/"&gt;The Bike Shed&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#meanwhile-computer-science"&gt;
  &lt;/a&gt;
  Meanwhile, computer science
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[x] &lt;strong&gt;Computers 101:&lt;/strong&gt; &lt;a href="https://www.charlespetzold.com/code/"&gt;Code: The Hidden Language of Computer Hardware and Software&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;Algorithms I:&lt;/strong&gt; &lt;a href="https://www.amazon.com/Data-Structures-Algorithms-Java-2nd/dp/0672324539"&gt;Data Structures and Algorithms in Java&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;Usability:&lt;/strong&gt; &lt;a href="https://sensible.com/dont-make-me-think/"&gt;Don't Make Me Think&lt;/a&gt; and &lt;a href="https://www.nngroup.com/books/design-everyday-things-revised/"&gt;The Design of Everyday Things&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;Operating Systems:&lt;/strong&gt; &lt;a href="http://pages.cs.wisc.edu/~remzi/OSTEP/"&gt;Operating Systems: Three Easy Pieces&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[x] &lt;strong&gt;Networks:&lt;/strong&gt; &lt;a href="https://gaia.cs.umass.edu/kurose_ross/eighth.htm"&gt;Computer Networking: A Top-Down Approach&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Computer Architecture:&lt;/strong&gt; &lt;a href="https://mitpress.mit.edu/books/elements-computing-systems-second-edition"&gt;The Elements of Computing Systems: Building a Modern Computer from First Principles&lt;/a&gt; (plus the &lt;a href="https://www.nand2tetris.org/"&gt;site&lt;/a&gt; and free accompanying course: &lt;a href="https://www.coursera.org/learn/build-a-computer"&gt;part 1&lt;/a&gt;, &lt;a href="https://www.coursera.org/learn/nand2tetris2"&gt;part 2&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Software Architecture:&lt;/strong&gt; &lt;a href="https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/"&gt;Designing Data-Intensive Applications&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Databases:&lt;/strong&gt; ⭐&lt;a href="http://www.redbook.io/"&gt;Readings in Database Systems&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Compilers:&lt;/strong&gt; ⭐&lt;a href="https://craftinginterpreters.com/"&gt;Crafting Interpreters&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Math:&lt;/strong&gt; &lt;a href="https://www-cs-faculty.stanford.edu/~knuth/gkp.html"&gt;Concrete Mathematics: A Foundation for Computer Science&lt;/a&gt;. The math review that I'm doing leading up to this is proving to be a journey in itself, to be outlined in a future post.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Algorithms II:&lt;/strong&gt; &lt;a href="https://www.algorist.com/"&gt;The Algorithm Design Manual&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;??:&lt;/strong&gt; ⭐&lt;a href="https://sarabander.github.io/sicp/html/index.xhtml"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; (and &lt;a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/"&gt;video lectures&lt;/a&gt;). I have often seen this recommended, but its exact subject matter (and whether reading it amounts to anything more than a badge of honor) so far eludes me. Which, I'm sure some would retort, only shows how small my mind still is at this point.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#other-programmingcs-resource-lists"&gt;
  &lt;/a&gt;
  Other programming/CS resource lists
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teachyourselfcs.com/"&gt;Teach Yourself CS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/P1xt/p1xt-guides"&gt;p1xt Computer Science and Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ossu/computer-science"&gt;Open Source Society University&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>books</category>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>Why JavaScript not Python for Web Development?</title>
      <author>Atul Bhatt</author>
      <pubDate>Thu, 27 May 2021 11:37:08 +0000</pubDate>
      <link>https://dev.to/atulbhattsystem32/why-javascript-not-python-for-web-development-16k9</link>
      <guid>https://dev.to/atulbhattsystem32/why-javascript-not-python-for-web-development-16k9</guid>
      <description>&lt;p&gt;So today one of my friend asked me &lt;code&gt;how to start web development in python❔&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And I told him about &lt;code&gt;Flask and Django&lt;/code&gt; because those are the one I have heard of and kinda actually tried.&lt;/p&gt;

&lt;p&gt;But then I ❓ him for whom he is asking this for?&lt;/p&gt;

&lt;p&gt;He replied for one of his friend.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Then I quickly asked him why didn't he suggest him to try JavaScript for that. (He himself is a React Native developer)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He said that this friend of his knows Python and he just 💕 it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So in short his friend is in 💕 with Python and we all know that Love makes you blind🙈.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So my friends, this article is an attempt to save so many friends like this from being &lt;code&gt;in 💕 with a language so much&lt;/code&gt; that they would &lt;code&gt;try to do everything possible with that language only&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Most of these people are &lt;code&gt;college or university students&lt;/code&gt;. I mean it's &lt;code&gt;not wrong to learn python and do development with it.&lt;/code&gt; But what I'm giving here is a &lt;code&gt;single advice with list✔️ of reasons&lt;/code&gt; that you surely need in your college times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WImkKG_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07n1x6z652y9u9mrzh51.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WImkKG_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07n1x6z652y9u9mrzh51.PNG" alt="wanted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This above image is from &lt;code&gt;2020 Developer Survey by StackOverflow.&lt;/code&gt;&lt;br&gt;
Python is the &lt;code&gt;most wanted language.&lt;/code&gt; But who is the second one?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tjsfFz5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk0gy4vvaweuoczr8zyr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tjsfFz5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk0gy4vvaweuoczr8zyr.PNG" alt="developer survey 2020"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in between I'll be throwing more images from 2020 Developer Survey by StackOverflow. Don't ignore🤷‍♂️ them.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🙊 &lt;strong&gt;Secret&lt;/strong&gt; 🙊: I was also &lt;code&gt;badly&lt;/code&gt; but &lt;code&gt;not 🙈&lt;/code&gt; in &lt;code&gt;love&lt;/code&gt; with python, and &lt;code&gt;TypeScript is secretly🤐 JavaScript&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;⚠️&lt;strong&gt;Warning&lt;/strong&gt;⚠️: &lt;em&gt;This article is not at all about Why Python for Web Development not JavaScript? However, I would be glad😊 to read if you have some points on it. So don't hesitate to comment them 👇.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now let's jump🦘 into the Reasons:&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1jobs-jobs-jobs-"&gt;
  &lt;/a&gt;
  1.Jobs, Jobs, Jobs 💲💲💹.
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Majority of the people in this category are college students. And when it comes for the time of getting jobs &lt;code&gt;you won't find as many Job in Web Development through Python&lt;/code&gt; as many you would get being a developer using a JS library.&lt;br&gt;
See for yourself who is the king.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRZmjsKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n29hlmomixuxhscbbphv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRZmjsKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n29hlmomixuxhscbbphv.PNG" alt="most popular"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2learning-curve"&gt;
  &lt;/a&gt;
  2.Learning Curve
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;As a developer who was always in awe with how &lt;code&gt;easy and cool&lt;/code&gt; is Python. Believe me. JavaScript is not at all disappointing. You may find it even cooler😎.&lt;br&gt;
And don't you worry, &lt;code&gt;JavaScript won't ask you to put that Semi-colon&lt;/code&gt; &lt;strong&gt;;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#3web-runs-on-browsers"&gt;
  &lt;/a&gt;
  3.Web runs on browsers🌐.
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;So if you are thinking of &lt;code&gt;web development as your future&lt;/code&gt; then you shouldn't forget the fundamentals of Web. &lt;code&gt;Web browser understands JavaScript.&lt;/code&gt; They don't❌ understand any other languages and that's a full stop🛑.&lt;br&gt;
In simple words &lt;code&gt;you can't escape learning JavaScript&lt;/code&gt;.&lt;br&gt;
And don't make me mention that, &lt;code&gt;"Everyone use web browsers to access the web."&lt;/code&gt; &lt;strong&gt;Oops!😅 I did it.&lt;/strong&gt;&lt;br&gt;
Does that OOPS reminds you of something. Nevermind.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#4be-choosy"&gt;
  &lt;/a&gt;
  4.Be Choosy.
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;When I ask someone about doing web development in Python, the only terms I get to hear are Flask and Django and TBH now I don't get to hear it all🙄.&lt;br&gt;
You can &lt;code&gt;choose so many good frameworks and library in JavaScript&lt;/code&gt; that are so good in what they do, that it will become difficult for you to decide which one to choose🤯.&lt;br&gt;
And if you're confused then stackoverflow survey can give you a hint💡.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vWbqbQqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoc50jki1d9ujqe3slzz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vWbqbQqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hoc50jki1d9ujqe3slzz.PNG" alt="race web dev"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bonus point:&lt;/strong&gt; &lt;code&gt;You can even do backend with JavaScript.&lt;/code&gt; &lt;code&gt;Node JS&lt;/code&gt; is there waiting for you to try it out.-&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#5from-web-to-mobile"&gt;
  &lt;/a&gt;
  5.From Web🌐 to Mobile📱.
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;You can even get into &lt;code&gt;Native Mobile app development via JS using React Native&lt;/code&gt;. And not just Gimmicky mobile app development but a proper one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Below is the link to the sources of my Screenshot:&lt;br&gt;
&lt;a href="https://insights.stackoverflow.com/survey/2020"&gt;StackOverflow 2020 Survey&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#i-hope-you-enjoyed-reading-this-article-this-article-is-my-personal-opinion-but-a-strong-one-with-facts-and-figures-i-dont-hate-python-but-its-just-that-i-moved-on-it-was-hard-but-i-did"&gt;
  &lt;/a&gt;
  I hope you enjoyed🍿 reading this article. This article is my personal🙍 opinion but a strong one with facts and figures. I don't hate python but it's just that I moved on. It was hard😓 but I did.
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#we-should-raw-treat-languages-like-crushes-not-life-partners-endraw-shower-some-love-if-you-read-it-till-end-and-raw-share-it-with-someone-who-really-need-to-read-this-endraw-"&gt;
  &lt;/a&gt;
  We should &lt;code&gt;treat languages like Crushes not life partners😜&lt;/code&gt;. Shower some love if you read it till end. And &lt;code&gt;share it with someone who really need to read this&lt;/code&gt;.
&lt;/h5&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Run Ansible playbook on mac1.metal instances fleet with AWS Systems Manager</title>
      <author>Serhii Vasylenko</author>
      <pubDate>Thu, 27 May 2021 11:35:13 +0000</pubDate>
      <link>https://dev.to/aws-builders/run-ansible-playbook-on-mac1-metal-instances-fleet-with-aws-systems-manager-36j6</link>
      <guid>https://dev.to/aws-builders/run-ansible-playbook-on-mac1-metal-instances-fleet-with-aws-systems-manager-36j6</guid>
      <description>&lt;p&gt;In days of containers and serverless applications, Ansible looks not such a trendy thing.&lt;/p&gt;

&lt;p&gt;But still, there are cases when it helps, and there are cases when it combines very well with brand new product offerings, such as EC2 Mac instances.&lt;/p&gt;

&lt;p&gt;The more I use mac1.metal in AWS, the more I see that Ansible becomes a bedrock of software customization in my case.&lt;/p&gt;

&lt;p&gt;And when you have a large instances fleet, the &lt;a href="https://aws.amazon.com/systems-manager/"&gt;AWS Systems Manager&lt;/a&gt; becomes your best friend (the sooner you get along together, the better).&lt;/p&gt;

&lt;p&gt;So is it possible to use Ansible playbooks for mac1.metal on a big scale, with the help of AWS Systems Manager? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-available-out-of-the-box"&gt;
  &lt;/a&gt;
  (Not) Available out of the box
&lt;/h2&gt;

&lt;p&gt;AWS Systems Manager (SSM hereafter) has a pre-defined, shared Document that allows running Ansible playbooks.&lt;br&gt;
It’s called “AWS-RunAnsiblePlaybook,” and you can find it in AWS SSM → Documents → Owned by Amazon.&lt;/p&gt;

&lt;p&gt;However, this Document is not quite “friendly” to macOS. When the SSM agent calls Ansible on the Mac EC2 instance, it does not recognize the Ansible installed with Homebrew (de-facto most used macOS package manager).&lt;/p&gt;

&lt;p&gt;So if you try to run a command on the mac1.metal instance using this Document, you will get the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Ansible is not installed. Please &lt;span class="nb"&gt;install &lt;/span&gt;Ansible and rerun the command.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The root cause is trivial: the path to Ansible binary is not present on the list of paths available to the SSM agent by default.&lt;/p&gt;

&lt;p&gt;There are several ways to solve that, but I believe that the most convenient one would be to create your custom Document — a slightly adjusted version of the default one provided by AWS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-own-ssm-document-for-ansible-installed-with-homebrew"&gt;
  &lt;/a&gt;
  Creating own SSM Document for Ansible installed with Homebrew
&lt;/h2&gt;

&lt;p&gt;All you need to do is clone the Document provided by AWS and change its code a little — replace the callouts of &lt;code&gt;ansible&lt;/code&gt; with the full path to the binary.&lt;/p&gt;

&lt;p&gt;Navigate to AWS SSM → Documents → Owned by Amazon and type &lt;code&gt;AWS-RunAnsiblePlaybook&lt;/code&gt; in the search field.&lt;/p&gt;

&lt;p&gt;Select the Document by pressing the circle on its top-right corner and then click Actions → Clone document.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gp9Auf-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r00epai0mgtyjj4ecqrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gp9Auf-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r00epai0mgtyjj4ecqrb.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give the new SSM Document a name, e.g., &lt;code&gt;macos-arbitrary-ansible-playbook&lt;/code&gt;, and change the &lt;code&gt;ansible&lt;/code&gt; callouts (at the end of the code) with the full path to the ansible symlink made by Homebrew which is &lt;code&gt;/usr/local/bin/ansible&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the complete source code of the Document with adjusted Ansible path:&lt;/p&gt;

&lt;p&gt;
  Click to see the Document source code
  &lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"schemaVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Use this document to run arbitrary Ansible playbooks on macOS EC2 instances. Specify either YAML text or URL. If you specify both, the URL parameter will be used. Use the extravar parameter to send runtime variables to the Ansible execution. Use the check parameter to perform a dry run of the Ansible execution. The output of the dry run shows the changes that will be made when the playbook is executed."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"parameters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"playbook"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"String"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(Optional) If you don't specify a URL, then you must specify playbook YAML in this field."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"displayType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"textarea"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"playbookurl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"String"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(Optional) If you don't specify playbook YAML, then you must specify a URL where the playbook is stored. You can specify the URL in the following formats: http://example.com/playbook.yml or s3://examplebucket/plabook.url. For security reasons, you can't specify a URL with quotes."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"allowedPattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;s*$|^(http|https|s3)://[^']*$"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"extravars"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"String"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(Optional) Additional variables to pass to Ansible at runtime. Enter a space separated list of key/value pairs. For example: color=red or fruits=[apples,pears]"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"foo=bar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"displayType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"textarea"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"allowedPattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^((^|&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;s)&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;w+=(&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;S+|'.*'))*$"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"String"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;" (Optional) Use the check parameter to perform a dry run of the Ansible execution."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"allowedValues"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"True"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"False"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"timeoutSeconds"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"String"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"(Optional) The time in seconds for a command to be completed before it is considered to have failed."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"3600"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"mainSteps"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"aws:runShellScript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"runShellScript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"inputs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"timeoutSeconds"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"runCommand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"#!/bin/bash"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"/usr/local/bin/ansible --version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"if [$? -ne 0]; then"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Ansible is not installed. Please install Ansible and rerun the command&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt;&amp;amp;2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"fi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"execdir=$(dirname $0)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"cd $execdir"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"if [-z ''] ; then"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" if [[&lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt; == http*]]; then"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" wget '' -O playbook.yml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" if [$? -ne 0]; then"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;There was a problem downloading the playbook. Make sure the URL is correct and that the playbook exists.&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt;&amp;amp;2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" fi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" elif [[&lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt; == s3*]] ; then"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" aws --version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" if [$? -ne 0]; then"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;The AWS CLI is not installed. The CLI is required to process Amazon S3 URLs. Install the AWS CLI and run the command again.&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt;&amp;amp;2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" fi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" aws s3 cp '' playbook.yml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" if [$? -ne 0]; then"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error while downloading the document from S3&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;gt;&amp;amp;2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" fi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" else"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;The playbook URL is not valid. Verify the URL and try again.&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" fi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"else"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" echo '' &amp;gt; playbook.yml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"fi"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"if [[&lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt; == True]] ; then"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" /usr/local/bin/ansible-playbook -i &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;localhost,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; --check -c local -e &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt; playbook.yml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"else"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;" /usr/local/bin/ansible-playbook -i &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;localhost,&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; -c local -e &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt; playbook.yml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"fi"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-ansible-playbook-to-the-fleet-of-mac1metal"&gt;
  &lt;/a&gt;
  Applying Ansible playbook to the fleet of mac1.metal
&lt;/h2&gt;

&lt;p&gt;Let’s give our new SSM Document a try! (I suppose you have at least one mac1 instance running, right?)&lt;/p&gt;

&lt;p&gt;In AWS SSM, go to the Run Command feature, then click on the Run Command button.&lt;/p&gt;

&lt;p&gt;On the new panel, type the name of your Document (&lt;code&gt;macos-arbitrary-ansible-playbook&lt;/code&gt; in this example) in the search field and press enter.&lt;/p&gt;

&lt;p&gt;Select the Document, and you’ll see its parameters and settings.&lt;/p&gt;

&lt;p&gt;The rest is self-explanatory. Enter either a playbook code or a link to the source file, add extra variables if needed, and select the target host or a filtered bunch (I like that feature with tags filtering!). Finally, click on the “Run” orange button to apply your playbook.&lt;/p&gt;

&lt;p&gt;That’s it! Now you can make all your ansible-playbook dreams come true! 😁&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ansible</category>
      <category>macos</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
