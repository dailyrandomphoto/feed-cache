<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JS's Spread Operator (...) in Python? 😰</title>
      <author>Rajesh Joshi</author>
      <pubDate>Tue, 04 Jan 2022 15:33:03 +0000</pubDate>
      <link>https://dev.to/rajeshj3/jss-spread-operator-in-python-beg</link>
      <guid>https://dev.to/rajeshj3/jss-spread-operator-in-python-beg</guid>
      <description>&lt;p&gt;Spread Operator in JavaScript is one of the best thing given by GOD 😝&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-spread-operator-in-js"&gt;
  &lt;/a&gt;
  What is Spread Operator in JS?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Spread operator&lt;/strong&gt; allows an iterable to expand in places where 0+ arguments are expected. It is mostly used in the variable array where there is more than 1 values are expected. It allows us the privilege to obtain a list of parameters from an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Spread Operator&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 1, 2, 3, 4, 5 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-in-python"&gt;
  &lt;/a&gt;
  What is ... in Python?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;...&lt;/strong&gt; or &lt;strong&gt;Ellipsis&lt;/strong&gt; is a Python Object. It has no Methods. It is a singleton Object i.e, provides easy access to single instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# style1
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# style2
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# both the styles are same
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More example&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use an Ellipsis in Numpy To Omit Dimensions&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [[[1.83948755e-01 7.34415667e-04]
#   [7.34273680e-01 3.92355559e-01]
#   [6.73369042e-01 2.93722630e-01]]
#
#  [[8.17789457e-01 1.13353920e-01]
#   [3.53150493e-01 2.70330813e-01]
#   [7.46381962e-01 7.42168707e-01]]]
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# [[6.75415667e-04 4.58155559e-01 9.02622630e-01]
#  [9.13353920e-01 4.70330813e-01 6.42168707e-01]]
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[...,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# [[6.75415667e-04 4.58155559e-01 9.02622630e-01]
# [9.13353920e-01 4.70330813e-01 6.42168707e-01]]
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;Ellipsis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# [[6.75415667e-04 4.58155559e-01 9.02622630e-01]
#  [9.13353920e-01 4.70330813e-01 6.42168707e-01]]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can use &lt;strong&gt;...&lt;/strong&gt; or &lt;strong&gt;Ellipsis&lt;/strong&gt; in place of &lt;code&gt;pass&lt;/code&gt; in python. or use in numpy To omit dimensions.&lt;/p&gt;




&lt;p&gt;Hurray! You just learned &lt;code&gt;What is the difference between JS Spread Operator and ... Python.&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick tutorial. If so, then please don't forget to drop a Like ❤️&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; 🤩, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! 😃💻&lt;/p&gt;

</description>
    </item>
    <item>
      <title>16 basic commands to get started with GIT</title>
      <author>NoviceDev</author>
      <pubDate>Tue, 04 Jan 2022 15:03:54 +0000</pubDate>
      <link>https://dev.to/novicedev/16-basic-commands-to-get-started-with-git-415b</link>
      <guid>https://dev.to/novicedev/16-basic-commands-to-get-started-with-git-415b</guid>
      <description>&lt;p&gt;As a beginner knowing all the git commands could be overwhelming, but you can get away with some basic git commands at the start.&lt;/p&gt;

&lt;p&gt;In this article, we will go through these 16 basic git commands that you should know as a new developer.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;git clone&lt;/li&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git checkout&lt;/li&gt;
&lt;li&gt;git branch&lt;/li&gt;
&lt;li&gt;git config&lt;/li&gt;
&lt;li&gt;git status&lt;/li&gt;
&lt;li&gt;git diff&lt;/li&gt;
&lt;li&gt;git add&lt;/li&gt;
&lt;li&gt;git commit&lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;li&gt;git remote&lt;/li&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;li&gt;git log&lt;/li&gt;
&lt;li&gt;git rm&lt;/li&gt;
&lt;li&gt;git stash&lt;/li&gt;
&lt;li&gt;git fetch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Original post: &lt;a href="https://www.novicedev.com/blog/16-basic-commands-get-started-git"&gt;https://www.novicedev.com/blog/16-basic-commands-get-started-git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's go through them in little detail...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-git-clone"&gt;
  &lt;/a&gt;
  1. Git clone
&lt;/h2&gt;

&lt;p&gt;Git clone git command is used when you are trying to download a project from a remote repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone &amp;lt;repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-git-init"&gt;
  &lt;/a&gt;
  2. Git init
&lt;/h2&gt;

&lt;p&gt;Git init command is used to convert a directory into a git repository. This command is useful when you are starting a new project or want to initialize git in an existing project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-git-checkout"&gt;
  &lt;/a&gt;
  3. Git checkout
&lt;/h2&gt;

&lt;p&gt;Git checkout command is used to switch your current branch to another one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout &amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With -b option Git checkout branch can also create a new branch from the current branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout -b &amp;lt;new_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-git-branch"&gt;
  &lt;/a&gt;
  4. Git branch
&lt;/h2&gt;

&lt;p&gt;Git branch command is used to list all the branches on your local repository. And the output will highlight the current branch you are in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Git branch command can also be used to create a new branch by adding the name of the new branch at end of the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git branch &amp;lt;new_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-git-config"&gt;
  &lt;/a&gt;
  5. Git config
&lt;/h2&gt;

&lt;p&gt;Git config command is used to set the git user config for the project or globally. At the start of your project make sure you set the correct user.name and user.email for your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config &amp;lt;setting&amp;gt; &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Git config command can also be used to set this config globally. You can find more information about the git config command here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-git-status"&gt;
  &lt;/a&gt;
  6. Git status
&lt;/h2&gt;

&lt;p&gt;Git status command returns the current status of your working directory. This is the best way to know what is modified, added or deleted in your repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#7-git-diff"&gt;
  &lt;/a&gt;
  7. Git diff
&lt;/h2&gt;

&lt;p&gt;Git diff command can be used in many different ways and initially, you can use it to check what is modified in a file or directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git diff &amp;lt;file_name or directory_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#8-git-add"&gt;
  &lt;/a&gt;
  8. Git add
&lt;/h2&gt;

&lt;p&gt;Git add command is used to move new or modified files to the staging area. After this changes can be committed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add &amp;lt;file_name or directory_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to add all files then use the git add command with “.”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9-git-commit"&gt;
  &lt;/a&gt;
  9. Git commit
&lt;/h2&gt;

&lt;p&gt;Once you are done with your changes, the git commit command is used to save your change in the git branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git commit -m “Your commit message.”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#10-git-push"&gt;
  &lt;/a&gt;
  10. Git push
&lt;/h2&gt;

&lt;p&gt;To more your local committed changes to remote use git push command. With this command, you push your local branch to the remote repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#11-git-remote"&gt;
  &lt;/a&gt;
  11. Git remote
&lt;/h2&gt;

&lt;p&gt;Git remote command with different options helps to sync the local repository with the remote repository. You can view, create/add, delete, rename remote to other repositories.&lt;/p&gt;

&lt;p&gt;Git remote command is used to show the remote repository name and URL to which your local repository is connected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# View remote
$ git remote -v

# Add remote
$ git remote add &amp;lt;remote_name&amp;gt; &amp;lt;remote_path&amp;gt;

# Delete remote
$ git remote rm &amp;lt;remote_name&amp;gt;

# Rename remote
$ git remote rename &amp;lt;old_remote_name&amp;gt; &amp;lt;new_remote_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#12-git-pull"&gt;
  &lt;/a&gt;
  12. Git pull
&lt;/h2&gt;

&lt;p&gt;As the name suggests, the git pull command will fetch all the changes from the remote repository and merge them into your local repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#13-git-log"&gt;
  &lt;/a&gt;
  13. Git log
&lt;/h2&gt;

&lt;p&gt;Git log command is used to show commit history in the current branch on your local repository. Commit history will be in chronological order with unique commit hash, commit author and date.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use the git log command with other options to filter the logs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-git-rm"&gt;
  &lt;/a&gt;
  14. Git rm
&lt;/h2&gt;

&lt;p&gt;Git rm command is used to remove files or directories from the git index. Different options can be used with the git rm command to get the desired result.&lt;/p&gt;

&lt;p&gt;And keep in mind the git rm command will also remove files from the working directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git rm &amp;lt;file_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#15-git-stash"&gt;
  &lt;/a&gt;
  15. Git stash
&lt;/h2&gt;

&lt;p&gt;Git stash command is used to save current changes of modified files and get a clean branch.&lt;/p&gt;

&lt;p&gt;You will need git stash when you want to move to a different branch but can't because you have modified changes in your current branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can always come back to your original branch and do the "git stash pop" command to get back your stashed changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-git-fetch"&gt;
  &lt;/a&gt;
  16. Git fetch
&lt;/h2&gt;

&lt;p&gt;Git fetch is used when you want to get updates from a remote repository.&lt;/p&gt;

&lt;p&gt;It works the same as git pull doesn't merge the changes into your local repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git fetch &amp;lt;remote_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These are only the basic git command that every beginner should start with. All these git commands can be used in many different ways by adding arguments with them.&lt;/p&gt;

&lt;p&gt;And you can always test these git commands and get familiar with them by creating a free git repository on &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; or &lt;a href="https://gitlab.com/users/sign_in"&gt;Gitlab&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Create a Simple 🤓 yet Powerful 🚀 Server with Python 🐍</title>
      <author>Rajesh Joshi</author>
      <pubDate>Tue, 04 Jan 2022 14:55:53 +0000</pubDate>
      <link>https://dev.to/rajeshj3/create-a-simple-yet-powerful-server-with-python-2pkp</link>
      <guid>https://dev.to/rajeshj3/create-a-simple-yet-powerful-server-with-python-2pkp</guid>
      <description>&lt;p&gt;Python is very well known for it's simplicity 🤩. Which is a plus point if you are just getting started in the programming world.&lt;/p&gt;

&lt;p&gt;In this post, you'll be learning how to create a simple &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt; 🚀 server in Python 🐍.&lt;/p&gt;

&lt;p&gt;FastAPI is really handy to get started with &lt;code&gt;backend development&lt;/code&gt; in python. In this post, you'll see a simple code demo of FastAPI.&lt;/p&gt;

&lt;p&gt;So let's get started 🚀&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setup-python-environment"&gt;
  &lt;/a&gt;
  Setup Python Environment
&lt;/h2&gt;

&lt;p&gt;Open a directory, open terminal or cmd and write the following command to create a virtual environment with &lt;code&gt;Python v3&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-v&lt;/span&gt; venv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Activate the Virtual Environment&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Windows&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ .\env\Scripts\activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Linux or Mac&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#install-the-dependencies"&gt;
  &lt;/a&gt;
  Install the Dependencies
&lt;/h2&gt;

&lt;p&gt;Install FastAPI and other dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;fastapi &lt;span class="s2"&gt;"uvicorn[standard]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code 🚀
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;main.py&lt;/code&gt; file&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Import FastAPI&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Create FastAPI instance, &lt;code&gt;app&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Write a &lt;code&gt;route&lt;/code&gt;, on which you will be hitting the server (Requesting for some &lt;code&gt;Resource&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a root route (eg. &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, Write a function, which will be trigerred when you hit this &lt;code&gt;API end-point&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full Code 🤓
&lt;/h2&gt;

&lt;p&gt;Combining the above script will result the &lt;code&gt;main.py&lt;/code&gt; a this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#spin-up-the-fastapi-server"&gt;
  &lt;/a&gt;
  Spin up the FastAPI Server 🚀
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;env&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;uvicorn main:app &lt;span class="nt"&gt;--reload&lt;/span&gt;

INFO:     Uvicorn running on http://127.0.0.1:8000 &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
INFO:     Started reloader process &lt;span class="o"&gt;[&lt;/span&gt;28720]
INFO:     Started server process &lt;span class="o"&gt;[&lt;/span&gt;28722]
INFO:     Waiting &lt;span class="k"&gt;for &lt;/span&gt;application startup.
INFO:     Application startup complete.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; in your browser, you'll se your first server serving the clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---O1EWfc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75zoomra5xlrdqyh9bjo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---O1EWfc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75zoomra5xlrdqyh9bjo.png" alt="Hello, World!" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#explore-fastapi"&gt;
  &lt;/a&gt;
  Explore FastAPI 🚀
&lt;/h2&gt;

&lt;p&gt;Now, you have your first server running. You can walk through the &lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI Docs&lt;/a&gt;. and explore the possibilities.&lt;/p&gt;




&lt;p&gt;Hurray! You just learned how to setted up &lt;strong&gt;A Simple 🤓 yet Powerful 🚀 Server with Python 🐍&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;I hope, you guys liked this quick tutorial. If so, then please don't forget to drop a Like ❤️&lt;/p&gt;

&lt;p&gt;And also, help me reach &lt;strong&gt;1k Subscribers&lt;/strong&gt; 🤩, on my &lt;a href="https://www.youtube.com/channel/UCCO4jIqmQVFDmVeeaAO5obA"&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Coding! 😃💻&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to OpenStack with MicroStack</title>
      <author>Donald Sebastian Leung</author>
      <pubDate>Tue, 04 Jan 2022 14:42:44 +0000</pubDate>
      <link>https://dev.to/donaldsebleung/introduction-to-openstack-with-microstack-1f5j</link>
      <guid>https://dev.to/donaldsebleung/introduction-to-openstack-with-microstack-1f5j</guid>
      <description>&lt;p&gt;In this article, we will learn what OpenStack is, followed by a hands-on session where we install MicroStack in our local development environment and explore some basic features of MicroStack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Due to the nature of OpenStack, this hands-on session has non-trivial system requirements on top of knowledge and skill requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#knowledge-and-skill-requirements"&gt;
  &lt;/a&gt;
  Knowledge and skill requirements
&lt;/h3&gt;

&lt;p&gt;It is assumed that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are comfortable with the Linux command line and troubleshooting&lt;/li&gt;
&lt;li&gt;Understand the core concepts behind hardware virtualization; practical experience with a production-grade hypervisor such as VMware Workstation or KVM would be beneficial&lt;/li&gt;
&lt;li&gt;Understand the core concepts behind cloud computing, in particular IaaS; practical experience with a public cloud provider such as AWS, Azure or GCP would be beneficial&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#system-requirements"&gt;
  &lt;/a&gt;
  System requirements
&lt;/h3&gt;

&lt;p&gt;It is assumed that your local development desktop or laptop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has at least 2 CPU cores; 4 or more recommended&lt;/li&gt;
&lt;li&gt;Has at least 8 GiB of RAM; 16 GiB or more recommended&lt;/li&gt;
&lt;li&gt;Has at least 100 GiB of available storage&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is running a sufficiently recent version of Ubuntu, or another Linux distribution where &lt;a href="https://snapcraft.io"&gt;Snap&lt;/a&gt; packages are supported&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In particular, if your desktop / laptop does not satisfy the last requirement (e.g. if you are running Windows or macOS), it should contain enough hardware resources to run a VM satisfying the requirements above, with hardware acceleration and &lt;strong&gt;nested virtualization&lt;/strong&gt; enabled, so that you can run VMs &lt;em&gt;inside&lt;/em&gt; that VM. Either way, &lt;a href="https://dictionary.cambridge.org/dictionary/english/ymmv"&gt;YMMV&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another possible solution if you do not meet the system requirements is to provision a bare metal instance on a public cloud such as AWS, Azure or GCP. For example, AWS offers a range of &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ec2-bare-metal-instances/"&gt;bare metal instances&lt;/a&gt; powered by &lt;a href="https://aws.amazon.com/ec2/nitro/"&gt;AWS Nitro&lt;/a&gt;. However, do note that bare metal pricing is orders of magnitude greater than most other instance types, ranging from USD $4.00 per hour upwards. If you're ready to spend hundreds of dollars on a simple tutorial like this one, by all means, go ahead, so long as &lt;em&gt;you are fully aware that you are solely responsible for any and all monetary costs incurred&lt;/em&gt; ;-)&lt;/p&gt;

&lt;p&gt;With the prerequisites addressed, let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openstack"&gt;
  &lt;/a&gt;
  OpenStack
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://www.openstack.org/"&gt;OpenStack&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The official OpenStack website describes the project as "a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed and provisioned through APIs with common authentication mechanisms". Simply put, it is an open source platform designed to function as a private (or public) cloud. Typically, OpenStack would be deployed on a fleet of production-grade servers in a datacenter (or datacenters), though in this article we'll see how we can set up our own single-node micro cloud with MicroStack, a beta offering (at the time of writing) by &lt;a href="https://canonical.com/"&gt;Canonical&lt;/a&gt;, the company behind one of the most successful Linux distributions ever - Ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UKtDJVOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3rjk6zble8fgi7j0rfy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UKtDJVOf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a3rjk6zble8fgi7j0rfy.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure: Our own (micro) cloud in a &lt;del&gt;bottle&lt;/del&gt; desktop / laptop. How cool is that? Credits to &lt;a href="https://www.stevespanglerscience.com/lab/experiments/cloud-in-a-bottle-experiment/"&gt;Steve Spangler Science&lt;/a&gt; for the image&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OpenStack is a project under the &lt;a href="https://openinfra.dev/"&gt;Open Infrastructure Foundation&lt;/a&gt;, a non-profit organization founded for this purpose, though it has expanded to house related open source projects such as &lt;a href="https://www.airshipit.org/"&gt;Airship&lt;/a&gt; and &lt;a href="https://katacontainers.io/"&gt;Kata Containers&lt;/a&gt; as well. OpenStack is licensed under the open source Apache 2.0 license and its source code can be found &lt;a href="https://github.com/openstack/openstack"&gt;on GitHub&lt;/a&gt; or through the official website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microstack"&gt;
  &lt;/a&gt;
  MicroStack
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://microstack.run/"&gt;MicroStack&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OpenStack is comprised of a collection of components known as &lt;em&gt;services&lt;/em&gt; that can be selectively deployed to provide APIs to access various types of infrastructure resources, which you can learn about &lt;a href="https://www.openstack.org/software/project-navigator/openstack-components#openstack-services"&gt;through the official website&lt;/a&gt;. For this reason, among others, deploying OpenStack is not a trivial task.&lt;/p&gt;

&lt;p&gt;MicroStack is Canonical's &lt;em&gt;distribution&lt;/em&gt; of OpenStack made simple and accessible, similar to how Ubuntu is a distribution of Linux made simple and accessible to the average user (also offered by Canonical). In a moment, we'll see how installing MicroStack is as simple as running a single &lt;code&gt;snap install&lt;/code&gt; command, and initializing it for use is equally simple as well, also requiring a single command. No wonder the project describes itself as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The most straightforward OpenStack ever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apart from being a great introduction to OpenStack, MicroStack can also be used for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Micro-clouds consisting of a small number (not necessarily just 1) of nodes&lt;/li&gt;
&lt;li&gt;Edge computing&lt;/li&gt;
&lt;li&gt;Continuous Integration / Continuous Delivery (CI / CD) pipelines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a larger number of nodes such as would be found in a typical datacenter, other distributions such as &lt;a href="https://ubuntu.com/openstack"&gt;Charmed OpenStack&lt;/a&gt; (also offered by Canonical) or &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform"&gt;Red Hat OpenStack Platform&lt;/a&gt; (RHOP) may be more suitable, many of which are bundled with commercial support.&lt;/p&gt;

&lt;p&gt;Anyway, enough talk - let's get our hands dirty ;-)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-microstack-and-provisioning-our-first-instance"&gt;
  &lt;/a&gt;
  Installing MicroStack and provisioning our first instance
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://ubuntu.com/tutorials/microstack-get-started?&amp;amp;_ga=2.96692955.592365252.1641211146-836258490.1641211146#1-overview"&gt;Get started with MicroStack&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First &lt;a href="https://snapcraft.io/docs/installing-snapd"&gt;ensure snapd is installed on your system&lt;/a&gt;. If you're on a sufficiently recent version of Ubuntu, snapd is already installed by default and you do not have to do anything. Otherwise, you may have refer to the link above and follow the instructions specific to your distribution.&lt;/p&gt;

&lt;p&gt;MicroStack is currently in beta. Install it from the beta channel in devmode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;install &lt;/span&gt;microstack &lt;span class="nt"&gt;--devmode&lt;/span&gt; &lt;span class="nt"&gt;--beta&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that completes, initialize it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;microstack init &lt;span class="nt"&gt;--auto&lt;/span&gt; &lt;span class="nt"&gt;--control&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may take about 20 minutes or more to complete, depending on your hardware specs. On my MacBook Air from 2013 with 4 GiB of RAM and 2 CPU cores (4 CPU threads), it took about 45 minutes and running the above command twice before it successfully executed to completion.&lt;/p&gt;

&lt;p&gt;Once complete, you should see the following line at the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2022-01-03 21:32:49,907 - microstack_init - INFO - Complete. Marked microstack as initialized!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Print a (very long!) help message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's launch our first instance. Here, we use the &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html#cirros-test"&gt;CirrOS&lt;/a&gt; image, a minimal Linux distribution specifically designed as a test image for use in OpenStack. We'll call the instance &lt;code&gt;test&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack launch cirros &lt;span class="nt"&gt;--name&lt;/span&gt; &lt;span class="nb"&gt;test
&lt;/span&gt;Creating &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="s2"&gt;"microstack"&lt;/span&gt; ssh key at /home/donaldsebleung/snap/microstack/common/.ssh/id_microstack
Launching server ...
Allocating floating ip ...
Server &lt;span class="nb"&gt;test &lt;/span&gt;launched! &lt;span class="o"&gt;(&lt;/span&gt;status is BUILD&lt;span class="o"&gt;)&lt;/span&gt;

Access it with &lt;span class="sb"&gt;`&lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; /home/donaldsebleung/snap/microstack/common/.ssh/id_microstack cirros@10.20.20.118&lt;span class="sb"&gt;`&lt;/span&gt;
You can also visit the OpenStack dashboard at https://10.20.20.1:443
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Addendum: the name "CirrOS" is likely inspired by &lt;a href="https://en.wikipedia.org/wiki/Cirrus_cloud"&gt;cirrus clouds&lt;/a&gt; which are thin and wispy in appearance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From the command output depicted above, we see that an SSH key pair was automatically generated for accessing this instance, and the instance IP is &lt;code&gt;10.20.20.118&lt;/code&gt; in my case (yours may differ). Now connect to this instance using the provided SSH private key, replacing the private key path and instance IP as appropriate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; /home/donaldsebleung/snap/microstack/common/.ssh/id_microstack cirros@10.20.20.118
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now explore the instance with a few commands (feel free to try out your own):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;uptime
 &lt;/span&gt;14:08:55 up 5 min,  1 &lt;span class="nb"&gt;users&lt;/span&gt;,  load average: 0.00, 0.00, 0.00
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;whoami
&lt;/span&gt;cirros
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;hostname
test&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;id
&lt;/span&gt;&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000&lt;span class="o"&gt;(&lt;/span&gt;cirros&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000&lt;span class="o"&gt;(&lt;/span&gt;cirros&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000&lt;span class="o"&gt;(&lt;/span&gt;cirros&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;
Linux &lt;span class="nb"&gt;test &lt;/span&gt;4.4.0-28-generic &lt;span class="c"&gt;#47-Ubuntu SMP Fri Jun 24 10:09:13 UTC 2016 x86_64 GNU/Linux&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/os-release
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Buildroot
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2015.05-g31af4e3-dirty
&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buildroot
&lt;span class="nv"&gt;VERSION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2015.05
&lt;span class="nv"&gt;PRETTY_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Buildroot 2015.05"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice. So we see from &lt;code&gt;uname -a&lt;/code&gt; that the CirrOS image was likely derived from Ubuntu in some way.&lt;/p&gt;

&lt;p&gt;Exit the instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit
&lt;/span&gt;Connection to 10.20.20.118 closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We learn from the &lt;a href="https://ubuntu.com/tutorials/microstack-get-started?&amp;amp;_ga=2.27535480.592365252.1641211146-836258490.1641211146#5-launch-and-access-a-vm"&gt;official MicroStack tutorial&lt;/a&gt; that &lt;code&gt;microstack launch&lt;/code&gt; is a wrapper for &lt;code&gt;microstack.openstack server create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;View commands for managing MicroStack instances:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List running instances:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This prints out a table, which could be difficult to read if your terminal width is small.&lt;/p&gt;

&lt;p&gt;List running instances in JSON (much more readable IMO):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"0b433af1-7c28-4662-a917-4fce451bfa1c"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"test"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"ACTIVE"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Networks"&lt;/span&gt;: &lt;span class="s2"&gt;"test=192.168.222.214, 10.20.20.118"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Image"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Flavor"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stop the instance, replacing the instance ID as appropriate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server stop 0b433af1-7c28-4662-a917-4fce451bfa1c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View the instance state again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"0b433af1-7c28-4662-a917-4fce451bfa1c"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"test"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"SHUTOFF"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Networks"&lt;/span&gt;: &lt;span class="s2"&gt;"test=192.168.222.214, 10.20.20.118"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Image"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Flavor"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Restart the instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server start 0b433af1-7c28-4662-a917-4fce451bfa1c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And check the instance state again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"0b433af1-7c28-4662-a917-4fce451bfa1c"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"test"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"ACTIVE"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Networks"&lt;/span&gt;: &lt;span class="s2"&gt;"test=192.168.222.214, 10.20.20.118"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Image"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Flavor"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try SSHing into the instance again to confirm it is back up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; /home/donaldsebleung/snap/microstack/common/.ssh/id_microstack cirros@10.20.20.118
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After you're done exploring, terminate the instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server delete 0b433af1-7c28-4662-a917-4fce451bfa1c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm that the instance has been terminated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great. Now that we've seen some basic commands for dealing with instances, let's go a bit deeper and explore some other common features.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flavor-management"&gt;
  &lt;/a&gt;
  Flavor management
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.openstack.org/nova/rocky/user/flavors.html"&gt;OpenStack Docs: Flavors&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you've dealt with Amazon EC2 before (or a comparable public cloud IaaS provider), you've probably realized by now that OpenStack flavors are analogous to EC2 instance types (or equivalent). Basically, they define the amounts of various hardware resources (compute, network, storage) allocated to an instance, most notably the number of virtual CPU cores and memory. The main difference between EC2 instance types and OpenStack flavors is that the former is predetermined by the public cloud provider, but the latter can be managed by you (subject to the hardware resources available) since you own the cloud ;-)&lt;/p&gt;

&lt;p&gt;Let's dive in with some simple commands. Print a help message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor &lt;span class="nt"&gt;--help&lt;/span&gt;
Command &lt;span class="s2"&gt;"flavor"&lt;/span&gt; matches:
  flavor create
  flavor delete
  flavor list
  flavor &lt;span class="nb"&gt;set
  &lt;/span&gt;flavor show
  flavor &lt;span class="nb"&gt;unset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List the available flavors (in JSON):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"1"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 512,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.small"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 2048,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"3"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.medium"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 4096,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 2,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"4"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.large"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 8192,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 4,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"5"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.xlarge"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 16384,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 8,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we see we have 5 flavors by default:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flavor&lt;/th&gt;
&lt;th&gt;vCPUs&lt;/th&gt;
&lt;th&gt;Memory (MiB)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.tiny&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.small&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.medium&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4096&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.large&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;8192&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m1.xlarge&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;16384&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Not bad for a micro-cloud. The thing is, my development laptop only has 4 GiB of RAM so &lt;code&gt;m1.small&lt;/code&gt; would already be stretching the limits of my physical hardware and anything &lt;code&gt;m1.medium&lt;/code&gt; and above would be out of the question. So let's remove some flavors that we won't be able to use anyway:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor delete m1.xlarge m1.large m1.medium
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm that they have been deleted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"1"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 512,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.small"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 2048,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Display detailed information on remaining flavors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor show m1.tiny &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"OS-FLV-DISABLED:disabled"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"OS-FLV-EXT-DATA:ephemeral"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"access_project_ids"&lt;/span&gt;: null,
  &lt;span class="s2"&gt;"disk"&lt;/span&gt;: 1,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"1"&lt;/span&gt;,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;,
  &lt;span class="s2"&gt;"os-flavor-access:is_public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
  &lt;span class="s2"&gt;"properties"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"ram"&lt;/span&gt;: 512,
  &lt;span class="s2"&gt;"rxtx_factor"&lt;/span&gt;: 1.0,
  &lt;span class="s2"&gt;"swap"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"vcpus"&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor show m1.small &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"OS-FLV-DISABLED:disabled"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"OS-FLV-EXT-DATA:ephemeral"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"access_project_ids"&lt;/span&gt;: null,
  &lt;span class="s2"&gt;"disk"&lt;/span&gt;: 20,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.small"&lt;/span&gt;,
  &lt;span class="s2"&gt;"os-flavor-access:is_public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
  &lt;span class="s2"&gt;"properties"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"ram"&lt;/span&gt;: 2048,
  &lt;span class="s2"&gt;"rxtx_factor"&lt;/span&gt;: 1.0,
  &lt;span class="s2"&gt;"swap"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"vcpus"&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we see a few more properties being printed such as the amount of swap space for that flavor and whether the flavor is publicly accessible.&lt;/p&gt;

&lt;p&gt;I've also just realized that 512 MiB of RAM seems a bit small for proper Ubuntu images that I would like to import and boot later, but 2 GiB of RAM would be a tad too large. What if I could create instances with 1 GiB of RAM? Simple - since I own this cloud, I can just define my own flavor!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor create m1.mini &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--vcpus&lt;/span&gt; 1 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--ram&lt;/span&gt; 1024 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--disk&lt;/span&gt; 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a new flavor &lt;code&gt;m1.mini&lt;/code&gt; with 1 vCPU core, 1 GiB of RAM and 20 GiB of storage.&lt;/p&gt;

&lt;p&gt;Confirm the new flavor is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"1"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.tiny"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 512,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"2"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.small"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 2048,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"7d0de4b8-5c51-408c-9fb1-3d7bf3641e73"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.mini"&lt;/span&gt;,
    &lt;span class="s2"&gt;"RAM"&lt;/span&gt;: 1024,
    &lt;span class="s2"&gt;"Disk"&lt;/span&gt;: 20,
    &lt;span class="s2"&gt;"Ephemeral"&lt;/span&gt;: 0,
    &lt;span class="s2"&gt;"VCPUs"&lt;/span&gt;: 1,
    &lt;span class="s2"&gt;"Is Public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View details on this new flavor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack flavor show m1.mini &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"OS-FLV-DISABLED:disabled"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"OS-FLV-EXT-DATA:ephemeral"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"access_project_ids"&lt;/span&gt;: null,
  &lt;span class="s2"&gt;"disk"&lt;/span&gt;: 20,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"7d0de4b8-5c51-408c-9fb1-3d7bf3641e73"&lt;/span&gt;,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"m1.mini"&lt;/span&gt;,
  &lt;span class="s2"&gt;"os-flavor-access:is_public"&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;,
  &lt;span class="s2"&gt;"properties"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"ram"&lt;/span&gt;: 1024,
  &lt;span class="s2"&gt;"rxtx_factor"&lt;/span&gt;: 1.0,
  &lt;span class="s2"&gt;"swap"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"vcpus"&lt;/span&gt;: 1
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, we've already covered 4 out of 6 (at the time of writing) commands for managing flavors - the remaining two are &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;unset&lt;/code&gt; which deals with modifying details of existing flavors.&lt;/p&gt;

&lt;p&gt;Now let's look at another service - the image service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#image-and-snapshot-management"&gt;
  &lt;/a&gt;
  Image and snapshot management
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html"&gt;Get images&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An image is a template from which an instance is launched. Let's see what operations on images are available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image &lt;span class="nt"&gt;--help&lt;/span&gt;
Command &lt;span class="s2"&gt;"image"&lt;/span&gt; matches:
  image add project
  image create
  image delete
  image list
  image member list
  image remove project
  image save
  image &lt;span class="nb"&gt;set
  &lt;/span&gt;image show
  image &lt;span class="nb"&gt;unset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;View default images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"98a4eb3d-5965-4954-98eb-1ae7f589ce68"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is only one by default, &lt;code&gt;cirros&lt;/code&gt;. View details:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image show cirros &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"checksum"&lt;/span&gt;: &lt;span class="s2"&gt;"443b7623e27ecf03dc9e01ee93f67afe"&lt;/span&gt;,
  &lt;span class="s2"&gt;"container_format"&lt;/span&gt;: &lt;span class="s2"&gt;"bare"&lt;/span&gt;,
  &lt;span class="s2"&gt;"created_at"&lt;/span&gt;: &lt;span class="s2"&gt;"2022-01-03T13:28:32Z"&lt;/span&gt;,
  &lt;span class="s2"&gt;"disk_format"&lt;/span&gt;: &lt;span class="s2"&gt;"qcow2"&lt;/span&gt;,
  &lt;span class="s2"&gt;"file"&lt;/span&gt;: &lt;span class="s2"&gt;"/v2/images/98a4eb3d-5965-4954-98eb-1ae7f589ce68/file"&lt;/span&gt;,
  &lt;span class="s2"&gt;"id"&lt;/span&gt;: &lt;span class="s2"&gt;"98a4eb3d-5965-4954-98eb-1ae7f589ce68"&lt;/span&gt;,
  &lt;span class="s2"&gt;"min_disk"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"min_ram"&lt;/span&gt;: 0,
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
  &lt;span class="s2"&gt;"owner"&lt;/span&gt;: &lt;span class="s2"&gt;"9bfca2a6753d4f869f2e9a74d1604c92"&lt;/span&gt;,
  &lt;span class="s2"&gt;"properties"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"os_hidden"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
    &lt;span class="s2"&gt;"os_hash_algo"&lt;/span&gt;: &lt;span class="s2"&gt;"sha512"&lt;/span&gt;,
    &lt;span class="s2"&gt;"os_hash_value"&lt;/span&gt;: &lt;span class="s2"&gt;"6513f21e44aa3da349f248188a44bc304a3653a04122d8fb4535423c8e1d14cd6a153f735bb0982e2161b5b5186106570c17a9e58b64dd39390617cd5a350f78"&lt;/span&gt;,
    &lt;span class="s2"&gt;"owner_specified.openstack.object"&lt;/span&gt;: &lt;span class="s2"&gt;"images/cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"owner_specified.openstack.sha256"&lt;/span&gt;: &lt;span class="s2"&gt;"a8dd75ecffd4cdd96072d60c2237b448e0c8b2bc94d57f10fdbc8c481d9005b8"&lt;/span&gt;,
    &lt;span class="s2"&gt;"owner_specified.openstack.md5"&lt;/span&gt;: &lt;span class="s2"&gt;"443b7623e27ecf03dc9e01ee93f67afe"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"protected"&lt;/span&gt;: &lt;span class="nb"&gt;false&lt;/span&gt;,
  &lt;span class="s2"&gt;"schema"&lt;/span&gt;: &lt;span class="s2"&gt;"/v2/schemas/image"&lt;/span&gt;,
  &lt;span class="s2"&gt;"size"&lt;/span&gt;: 12716032,
  &lt;span class="s2"&gt;"status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;,
  &lt;span class="s2"&gt;"tags"&lt;/span&gt;: &lt;span class="o"&gt;[]&lt;/span&gt;,
  &lt;span class="s2"&gt;"updated_at"&lt;/span&gt;: &lt;span class="s2"&gt;"2022-01-03T13:28:33Z"&lt;/span&gt;,
  &lt;span class="s2"&gt;"visibility"&lt;/span&gt;: &lt;span class="s2"&gt;"public"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our cloud isn't much use if we can only launch CirrOS instances, which are minimal and only suitable for demo and testing purposes. What if we could import an image for a more popular, practical distribution such as Ubuntu? Fortunately, we can do so with the &lt;code&gt;openstack image create&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image create &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take a moment to skim through the help info. In particular, we see that we can pass a &lt;code&gt;--file &amp;lt;FILE&amp;gt;&lt;/code&gt; option to create a new image from a local disk file.&lt;/p&gt;

&lt;p&gt;Fetch the latest Ubuntu 20.04 LTS cloud image for KVM:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64-disk-kvm.img
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create our image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image create ubuntu-focal &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--disk-format&lt;/span&gt; qcow2 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--file&lt;/span&gt; focal-server-cloudimg-amd64-disk-kvm.img &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm it is created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"98a4eb3d-5965-4954-98eb-1ae7f589ce68"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"cirros"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"6ff67cd2-02b5-4fa2-baf9-65865e8a9b6b"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"ubuntu-focal"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's try to boot an instance from our new image with our newly created &lt;code&gt;m1.mini&lt;/code&gt; flavor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack launch ubuntu-focal &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-n&lt;/span&gt; my-mini-ubuntu &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-f&lt;/span&gt; m1.mini
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;microstack launch&lt;/code&gt; is specific to MicroStack, while &lt;code&gt;openstack server create&lt;/code&gt; is applicable across OpenStack distributions. You may wish to try launching an instance with &lt;code&gt;openstack server create&lt;/code&gt; as an additional exercise.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;SSH into it as usual. Now poke around the instance (feel free to try out your own commands):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;whoami
&lt;/span&gt;ubuntu
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;hostname
&lt;/span&gt;my-mini-ubuntu
&lt;span class="nv"&gt;$ &lt;/span&gt;free &lt;span class="nt"&gt;-m&lt;/span&gt;
              total        used        free      shared  buff/cache   available
Mem:            990         107         508           0         375         862
Swap:             0           0           0
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;df&lt;/span&gt; &lt;span class="nt"&gt;-Th&lt;/span&gt;
Filesystem     Type      Size  Used Avail Use% Mounted on
/dev/root      ext4       20G  1.3G   18G   7% /
devtmpfs       devtmpfs  494M     0  494M   0% /dev
tmpfs          tmpfs     496M     0  496M   0% /dev/shm
tmpfs          tmpfs     100M  476K   99M   1% /run
tmpfs          tmpfs     5.0M     0  5.0M   0% /run/lock
tmpfs          tmpfs     496M     0  496M   0% /sys/fs/cgroup
/dev/loop0     squashfs   68M   68M     0 100% /snap/lxd/21835
/dev/loop1     squashfs   44M   44M     0 100% /snap/snapd/14295
/dev/loop2     squashfs   62M   62M     0 100% /snap/core20/1270
/dev/vda15     vfat      105M  5.2M  100M   5% /boot/efi
tmpfs          tmpfs     100M     0  100M   0% /run/user/1000
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt;
Linux my-mini-ubuntu 5.4.0-1050-kvm &lt;span class="c"&gt;#52-Ubuntu SMP Fri Nov 12 11:00:20 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/os-release
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Ubuntu"&lt;/span&gt;
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"20.04.3 LTS (Focal Fossa)"&lt;/span&gt;
&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ubuntu
&lt;span class="nv"&gt;ID_LIKE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;debian
&lt;span class="nv"&gt;PRETTY_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Ubuntu 20.04.3 LTS"&lt;/span&gt;
&lt;span class="nv"&gt;VERSION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"20.04"&lt;/span&gt;
&lt;span class="nv"&gt;HOME_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://www.ubuntu.com/"&lt;/span&gt;
&lt;span class="nv"&gt;SUPPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://help.ubuntu.com/"&lt;/span&gt;
&lt;span class="nv"&gt;BUG_REPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://bugs.launchpad.net/ubuntu/"&lt;/span&gt;
&lt;span class="nv"&gt;PRIVACY_POLICY_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"&lt;/span&gt;
&lt;span class="nv"&gt;VERSION_CODENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;focal
&lt;span class="nv"&gt;UBUNTU_CODENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;focal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exit the session when done.&lt;/p&gt;

&lt;p&gt;Now that we have a known working Ubuntu image, we probably won't use CirrOS anymore. Delete the image and confirm the deletion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image delete cirros
&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"6ff67cd2-02b5-4fa2-baf9-65865e8a9b6b"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"ubuntu-focal"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now only have the &lt;code&gt;ubuntu-focal&lt;/code&gt; image left.&lt;/p&gt;

&lt;p&gt;Before we conclude our tour of OpenStack, let's look at one more feature: snapshots. Snapshots record the state of an instance at a particular time, so that we can revert to that state later on (if something goes wrong, for example). In fact, as far as OpenStack is concerned, a snapshot is just an image.&lt;/p&gt;

&lt;p&gt;SSH into our &lt;code&gt;my-mini-ubuntu&lt;/code&gt; instance and run the following commands &lt;em&gt;within our instance&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;add-apt-repository ppa:donaldsebleung/misc
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; donaldsebleung-com
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;yes&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; | openssl req &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-x509&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-newkey&lt;/span&gt; rsa:4096 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-keyout&lt;/span&gt; key.pem &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-out&lt;/span&gt; cert.pem &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-sha256&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-days&lt;/span&gt; 365 &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-nodes&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv &lt;/span&gt;key.pem /etc/donaldsebleung-com
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv &lt;/span&gt;cert.pem /etc/donaldsebleung-com
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; &lt;span class="nt"&gt;--now&lt;/span&gt; donaldsebleung-com.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This installs my personal website (shameless promotion here :-P). Check that it is up and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget &lt;span class="nt"&gt;-qO&lt;/span&gt; - https://localhost &lt;span class="nt"&gt;--no-check-certificate&lt;/span&gt;
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE HTML&amp;gt;
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;
    Hyperspace by HTML5 UP
    html5up.net | @ajlkn
    Free &lt;span class="k"&gt;for &lt;/span&gt;personal and commercial use under the CCA 3.0 license &lt;span class="o"&gt;(&lt;/span&gt;html5up.net/license&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exit the session. Now stop our instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server stop my-mini-ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a snapshot &lt;code&gt;donaldsebleung-com&lt;/code&gt; from &lt;code&gt;my-mini-ubuntu&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server image create my-mini-ubuntu &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;--name&lt;/span&gt; donaldsebleung-com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now see that it has been added to our list of images, along with &lt;code&gt;ubuntu-focal&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack image list &lt;span class="nt"&gt;-f&lt;/span&gt; json
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"e58f4ab7-2bb6-4f11-9cfd-0887d1ac9b2c"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"saving"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"ID"&lt;/span&gt;: &lt;span class="s2"&gt;"6ff67cd2-02b5-4fa2-baf9-65865e8a9b6b"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"ubuntu-focal"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Status"&lt;/span&gt;: &lt;span class="s2"&gt;"active"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the status of your snapshot is &lt;code&gt;saving&lt;/code&gt; as shown above, wait a few seconds and query the image list again until the status changes to &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point, if your laptop is resource-constrained like mine (with only 4 GiB of RAM!), you may wish to first terminate your existing &lt;code&gt;my-mini-ubuntu&lt;/code&gt; instance, as we will be launching another instance shortly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server delete my-mini-ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now launch a new instance &lt;code&gt;my-personal-website&lt;/code&gt; from the &lt;code&gt;donaldsebleung-com&lt;/code&gt; snapshot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack launch donaldsebleung-com &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-n&lt;/span&gt; my-personal-website &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-f&lt;/span&gt; m1.mini
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;SSH into the instance. If everything is working as expected, the web server should already be up and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget &lt;span class="nt"&gt;-qO&lt;/span&gt; - https://localhost &lt;span class="nt"&gt;--no-check-certificate&lt;/span&gt;
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;DOCTYPE HTML&amp;gt;
&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;
    Hyperspace by HTML5 UP
    html5up.net | @ajlkn
    Free &lt;span class="k"&gt;for &lt;/span&gt;personal and commercial use under the CCA 3.0 license &lt;span class="o"&gt;(&lt;/span&gt;html5up.net/license&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exit the session.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://opendev.org/x/microstack"&gt;OpenStack in a snap!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Terminate &lt;code&gt;my-personal-website&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;microstack.openstack server delete my-personal-website
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you won't be using MicroStack again in a short while but would like to keep it around for future exploration, disabling the snap could be an option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap disable microstack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, whenever you need MicroStack again, you can re-enable it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap &lt;span class="nb"&gt;enable &lt;/span&gt;microstack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, if you might not use MicroStack again for quite a while and would like to free up disk space (like I do), removing it with the usual &lt;code&gt;snap remove&lt;/code&gt; is an option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;snap remove &lt;span class="nt"&gt;--purge&lt;/span&gt; microstack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What OpenStack is&lt;/li&gt;
&lt;li&gt;MicroStack as an OpenStack distribution that "just works"&lt;/li&gt;
&lt;li&gt;How to install MicroStack, provision our first instance and connect to it&lt;/li&gt;
&lt;li&gt;How to manage instances, flavors, images and snapshots&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this is just the tip of the iceberg. Some things we haven't had the time to look at in this tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identity access management with &lt;a href="https://docs.openstack.org/keystone/latest/"&gt;Keystone&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Advanced networking configuration with &lt;a href="https://docs.openstack.org/neutron/latest/"&gt;Neutron&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Managing OpenStack from the web console with &lt;a href="https://docs.openstack.org/horizon/latest/"&gt;Horizon&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, the compute and image services that we explored are known as &lt;a href="https://docs.openstack.org/nova/latest/"&gt;Nova&lt;/a&gt; and &lt;a href="https://docs.openstack.org/glance/latest/"&gt;Glance&lt;/a&gt; respectively. At the time of writing, MicroStack only comes with these 5 core services, with many additional services left out. This means if you get the chance to try out a proper production-grade OpenStack distribution, you might have the chance to work with other services not available through MicroStack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.openstack.org/software/releases/xena/components/zun"&gt;Zun&lt;/a&gt; for containers&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.openstack.org/software/releases/xena/components/ironic"&gt;Ironic&lt;/a&gt; for bare-metal provisioning&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.openstack.org/software/releases/xena/components/magnum"&gt;Magnum&lt;/a&gt; for container orchestration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... and so on.&lt;/p&gt;

&lt;p&gt;Finally, here are some extra resources for your interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.openstack.org/"&gt;OpenStack official website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/9/html/architecture_guide/index"&gt;Architecture Guide&lt;/a&gt; gives a detailed overview of RHOP with advanced examples beyond the scope of this tutorial&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed this article ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introducing two new Amazon EC2 bare metal instances: &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ec2-bare-metal-instances/"&gt;https://aws.amazon.com/about-aws/whats-new/2021/11/amazon-ec2-bare-metal-instances/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS Nitro: &lt;a href="https://aws.amazon.com/ec2/nitro/"&gt;https://aws.amazon.com/ec2/nitro/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack: &lt;a href="https://www.openstack.org/"&gt;https://www.openstack.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Open Infrastructure Foundation: &lt;a href="https://openinfra.dev/"&gt;https://openinfra.dev/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Airship: &lt;a href="https://www.airshipit.org/"&gt;https://www.airshipit.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Kata Containers: &lt;a href="https://katacontainers.io/"&gt;https://katacontainers.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack on GitHub: &lt;a href="https://github.com/openstack/openstack"&gt;https://github.com/openstack/openstack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;MicroStack: &lt;a href="https://microstack.run/"&gt;https://microstack.run/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack Services: &lt;a href="https://www.openstack.org/software/project-navigator/openstack-components#openstack-services"&gt;https://www.openstack.org/software/project-navigator/openstack-components#openstack-services&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Charmed OpenStack: &lt;a href="https://ubuntu.com/openstack"&gt;https://ubuntu.com/openstack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Red Hat OpenStack Platform: &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform"&gt;https://www.redhat.com/en/technologies/linux-platforms/openstack-platform&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get started with MicroStack: &lt;a href="https://ubuntu.com/tutorials/microstack-get-started?&amp;amp;_ga=2.96692955.592365252.1641211146-836258490.1641211146#1-overview"&gt;https://ubuntu.com/tutorials/microstack-get-started?&amp;amp;_ga=2.96692955.592365252.1641211146-836258490.1641211146#1-overview&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Installing snapd: &lt;a href="https://snapcraft.io/docs/installing-snapd"&gt;https://snapcraft.io/docs/installing-snapd&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CirrOS: &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html#cirros-test"&gt;https://docs.openstack.org/image-guide/obtain-images.html#cirros-test&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack Docs: Flavors: &lt;a href="https://docs.openstack.org/nova/rocky/user/flavors.html"&gt;https://docs.openstack.org/nova/rocky/user/flavors.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get images: &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html"&gt;https://docs.openstack.org/image-guide/obtain-images.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OpenStack in a snap!: &lt;a href="https://opendev.org/x/microstack"&gt;https://opendev.org/x/microstack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Keystone: &lt;a href="https://docs.openstack.org/keystone/latest/"&gt;https://docs.openstack.org/keystone/latest/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Neutron: &lt;a href="https://docs.openstack.org/neutron/latest/"&gt;https://docs.openstack.org/neutron/latest/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Horizon: &lt;a href="https://docs.openstack.org/horizon/latest/"&gt;https://docs.openstack.org/horizon/latest/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Zun: &lt;a href="https://www.openstack.org/software/releases/xena/components/zun"&gt;https://www.openstack.org/software/releases/xena/components/zun&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Ironic: &lt;a href="https://www.openstack.org/software/releases/xena/components/ironic"&gt;https://www.openstack.org/software/releases/xena/components/ironic&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Magnum: &lt;a href="https://www.openstack.org/software/releases/xena/components/magnum"&gt;https://www.openstack.org/software/releases/xena/components/magnum&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Architecture guide: &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/9/html/architecture_guide/index"&gt;https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/9/html/architecture_guide/index&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cloud</category>
      <category>iaas</category>
      <category>openstack</category>
      <category>microstack</category>
    </item>
    <item>
      <title>Stubs vs Mocks in JS</title>
      <author>Lucia Cerchie</author>
      <pubDate>Tue, 04 Jan 2022 14:40:39 +0000</pubDate>
      <link>https://dev.to/cerchie/stubs-vs-mocks-in-js-3fp2</link>
      <guid>https://dev.to/cerchie/stubs-vs-mocks-in-js-3fp2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Resources: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/mocksArentStubs.html"&gt;https://martinfowler.com/articles/mocksArentStubs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/50389981/how-to-properly-mock-es6-classes-with-sinon"&gt;https://stackoverflow.com/questions/50389981/how-to-properly-mock-es6-classes-with-sinon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sinonjs.org/releases/v12.0.1/stubs/"&gt;https://sinonjs.org/releases/v12.0.1/stubs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spin.atomicobject.com/2011/04/28/mocking-objects-with-sinon-js/"&gt;https://spin.atomicobject.com/2011/04/28/mocking-objects-with-sinon-js/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowledge pre-reqs: Basic CoffeeScript testing implementation&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;We see the terms 'mocks' and 'stubs' thrown around a lot in JS testing. There's a difference between them, but sometimes they're used to refer to the same processes, so it can be difficult to tell what it is. This article is my attempt to get closer to the truth.&lt;/p&gt;

&lt;p&gt;From Martin Fowler's &lt;a href="https://martinfowler.com/articles/mocksArentStubs.html"&gt;article on testing&lt;/a&gt;, we see that mocks test using behavior verification while stubs test using state verification. He uses a Java example to illustrate his point. In this article, I'm going to use a JavaScript example to show what he means. &lt;/p&gt;

&lt;p&gt;First of all, we've got to hash out the difference between state verification and behavior verification in the abstract. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-verification"&gt;
  &lt;/a&gt;
  State verification:
&lt;/h3&gt;

&lt;p&gt;tests the state of the object in the system we're testing &lt;em&gt;after&lt;/em&gt; the methods that comprise the behavior are exercised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#behavior-verification"&gt;
  &lt;/a&gt;
  Behavior verification:
&lt;/h3&gt;

&lt;p&gt;tests the behavior of the system being tested. This requires a little more dissection of the system in that we employ a mock, tell it what to expect during setup, and have it self-verify. &lt;/p&gt;

&lt;p&gt;Now let's see how some examples in JS illustrate these definitions. &lt;/p&gt;

&lt;p&gt;(Note that the following examples will be a bit over-engineered since I'm testing a built-in JS method -- but you can see how this would apply to an API or a system with similar complexity). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#state-verification-example"&gt;
  &lt;/a&gt;
  State verification example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@fatso83/mini-mocha&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sinon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sinon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sinonjs/referee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return a string greeting the user with chosen word&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sinon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;classInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetBehavior&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, my stub is created using the sinon library (I'll also use this for my mock example). You can see that I'm checking the state of the value returned from the greet method once it's done executing against the stub in this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;assert.equals(stub(), greeting)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-bump-in-the-road"&gt;
  &lt;/a&gt;
  A Bump in the Road
&lt;/h2&gt;

&lt;p&gt;Now, how would I execute this test using mocks? This example was much more difficult to execute -- among the reasons why is that many developers use the term "mock" as an umbrella for a lot of testing tactics, including "stub". So when I looked up how to do this with mocks, I ended up seeing examples on how to stub! &lt;/p&gt;

&lt;p&gt;I ended up with an example that I couldn't get to work after several hours, so I turned to my friends at &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt; in the #help-and-pairing channel for assistance. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://snikhill.tech/"&gt;Nikhil Seth&lt;/a&gt; refactored my code to the following solution (notably adding the param '1' to my &lt;code&gt;.once()&lt;/code&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mock-verification-example-from-nikhil-seth"&gt;
  &lt;/a&gt;
  Mock verification example from Nikhil Seth
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@fatso83/mini-mocha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sinon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sinon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Test greet using Greeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should verify Greeting.greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newGreeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GREETING INSTANCE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newGreeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Test expects that the `greet` method of newGreeting&lt;/span&gt;
    &lt;span class="c1"&gt;// should be called once.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockedGreetMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sinon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newGreeting&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;greet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockedGreetMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Calling the greet method&lt;/span&gt;
    &lt;span class="nx"&gt;newGreeting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// Checking if the greet method's expectations are met&lt;/span&gt;
    &lt;span class="nx"&gt;mockedGreetMethod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this example employs &lt;em&gt;behavior verification&lt;/em&gt;, testing the behavior of the system being tested. We use a mock, tell it what to expect (that the greet method is executed once) during setup, and have it self-verify using the &lt;code&gt;.verify()&lt;/code&gt; method. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I learned a lot about stubs vs mocks that I never would have, if I hadn't set out to write this blog post! I like to write to synthesize my thoughts since it makes me concretize ideas with examples. Otherwise I might just read a generalized blog post and come away with a fuzzy understanding. If you're learning a new technical concept and you work with a few examples, you'll understand the general concept much better since you've seen it instantiated in different environments. &lt;/p&gt;

&lt;p&gt;PS-- many thanks also to &lt;a href="https://twitter.com/ray_deck"&gt;Ray Deck&lt;/a&gt; for asking pertinent questions when I was stuck! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Solidity Basics for JavaScript Devs Part 3</title>
      <author>K (he/him)</author>
      <pubDate>Tue, 04 Jan 2022 14:24:22 +0000</pubDate>
      <link>https://dev.to/fllstck/solidity-basics-for-javascript-devs-part-3-585</link>
      <guid>https://dev.to/fllstck/solidity-basics-for-javascript-devs-part-3-585</guid>
      <description>&lt;p&gt;I wanted to publish the third part of this series after I finished my first Solidity project alongside the source code of that project.&lt;/p&gt;

&lt;p&gt;Sadly, I got a few issues connecting the frontend to the Hardhat local network.&lt;/p&gt;

&lt;p&gt;Anyway, I figured I could still publish it unfinished; at least all the tests pass, haha.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/kay-is/first-smart-contract"&gt;Here is the link to the repo&lt;/a&gt;. The examples from the book &lt;a href="https://www.amazon.com/Hands-Contract-Development-Solidity-Ethereum/dp/1492045268"&gt;Hands-On Smart Contract Development with Solidity and Ethereum&lt;/a&gt; but rewritten for Hardhat and TypeScript. Again, the frontend doesn't work; I started one with Preact but had some issues with the local network and didn't find the time to solve this.&lt;/p&gt;

&lt;p&gt;Maybe, some of you might figure out how to get the frontend connected to the local network? &lt;/p&gt;

&lt;p&gt;Anyway, here are the last three Solidity tips for you, my fellow JavaScript users!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contracts-have-a-raw-receive-endraw-raw-fallback-endraw-function"&gt;
  &lt;/a&gt;
  Contracts have a &lt;code&gt;receive&lt;/code&gt;/&lt;code&gt;fallback&lt;/code&gt; Function
&lt;/h2&gt;

&lt;p&gt;The EVM calls two special functions when someone sends transactions to your contract that no other functions could handle. They don't need the &lt;code&gt;function&lt;/code&gt; keyword and must be &lt;code&gt;external payable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;MyContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// called when none of the contract's functions
&lt;/span&gt;        &lt;span class="c1"&gt;// match the called function signature
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// called when the call data is empty
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-fallback-function"&gt;
  &lt;/a&gt;
  The Fallback Function
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;fallback&lt;/code&gt; function to delegate calls to different contracts. Since contracts deployed on the Ethereum blockchain are immutable, you need some indirection if you want to upgrade them over time. This can be done with a contract that only implements the &lt;code&gt;fallback&lt;/code&gt; function that will relay calls to any function to a contract address. You can change this address and, in turn, indirectly change the implementation of the contract.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-receive-function"&gt;
  &lt;/a&gt;
  The Receive Function
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;receive&lt;/code&gt; function to handle calls only concerned with Ether and nothing else. For example, when you want to store a token amount into the smart contract's balance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solidity-variables-are-initialized-by-default"&gt;
  &lt;/a&gt;
  Solidity Variables are Initialized by Default
&lt;/h2&gt;

&lt;p&gt;Because solidity uses static typing, the language knows what type every variable at compile time. Each of these types has an initial value the EVM will use when it executes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-values"&gt;
  &lt;/a&gt;
  Initial Values
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;address: &lt;code&gt;0x0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;array (dynamic): &lt;code&gt;[]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;array (fixed): fixed-size array with initial values&lt;/li&gt;
&lt;li&gt;boolean: &lt;code&gt;false&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;enum: first enum element&lt;/li&gt;
&lt;li&gt;function (external): a function that always throws an error&lt;/li&gt;
&lt;li&gt;function (internal): a function that returns initial values if a return is defined&lt;/li&gt;
&lt;li&gt;int: &lt;code&gt;0&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;mapping: empty mapping&lt;/li&gt;
&lt;li&gt;string: &lt;code&gt;""&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;struct: a struct where all members are set to initial values&lt;/li&gt;
&lt;li&gt;uint: &lt;code&gt;0&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#requesting-a-wallet-account-requires-a-manual-call-of-raw-ethrequestaccounts-endraw-"&gt;
  &lt;/a&gt;
  Requesting a Wallet Account Requires a Manual Call of &lt;code&gt;eth_requestAccounts&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Browser extension wallets usually block access to the accounts they manage from websites. The user has to allow the website to access it manually.&lt;/p&gt;

&lt;p&gt;Somehow Ethers.js doesn't ask for permissions automatically when you want to use a wallet account. You have to manually send a request to the wallet before you can use an account/signer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Web3Provider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ethereum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;chainId&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eth_requestAccounts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSigner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The call to the asynchronous &lt;code&gt;send&lt;/code&gt; method will block until the user accepted the request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With this article I finished my first steps into Solidity, smart contract development, and web3 in general. &lt;/p&gt;

&lt;p&gt;I hope, I could clear things up for you and my project helps you to get started!&lt;/p&gt;

&lt;p&gt;I saw thousands of views on this series, so I pursuing more ideas in that direction this year. So if you're a web2 JavaScript developer who wants to learn more about web3, stay tuned!&lt;/p&gt;

</description>
      <category>solidity</category>
      <category>javascript</category>
      <category>web3</category>
    </item>
    <item>
      <title>How do you feel about regex?</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 04 Jan 2022 14:22:52 +0000</pubDate>
      <link>https://dev.to/ben/how-do-you-feel-about-regex-14c2</link>
      <guid>https://dev.to/ben/how-do-you-feel-about-regex-14c2</guid>
      <description>&lt;p&gt;Regex seems to have a broad array of love and hate. How do you feel about it? Do you seek to use or avoid it as a problem solver, and how much do you &lt;em&gt;understand&lt;/em&gt; it?&lt;/p&gt;

</description>
      <category>regex</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Passing Data with Angular Services</title>
      <author>Lorenzo Zarantonello</author>
      <pubDate>Tue, 04 Jan 2022 13:49:19 +0000</pubDate>
      <link>https://dev.to/this-is-angular/passing-data-with-angular-services-4mh</link>
      <guid>https://dev.to/this-is-angular/passing-data-with-angular-services-4mh</guid>
      <description>&lt;p&gt;If you followed this Angularization series, you might have noticed that passing data using @input and @output decorators is not exactly scalable.&lt;/p&gt;

&lt;p&gt;Using services, it is easier to store data and make it available in the application. &lt;/p&gt;

&lt;p&gt;Building on the application that we created in &lt;a href="https://www.vitainbeta.org/2021/12/16/angular-services/"&gt;Introduction to Angular Services&lt;/a&gt; we will add an input element so that users can add a string to a list of items. This is a way to &lt;a href="https://www.vitainbeta.org/2022/01/04/passing-data-with-angular-service/"&gt;pass data using Angular Services&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The input element is in OneComponent, the list of items is stored in a service and it is displayed in AppComponent.&lt;/p&gt;

&lt;p&gt;The final application looks like the one below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MRVzDuQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idqnz9x6biqevxz6nddr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MRVzDuQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idqnz9x6biqevxz6nddr.png" alt="Passing data with angular services app" width="775" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As in &lt;a href="https://www.vitainbeta.org/2021/12/16/angular-services/"&gt;Introduction to Angular Services&lt;/a&gt;, CSS is mainly omitted for clarity. However you can find the whole &lt;a href="https://github.com/lorenzojkrl/coding-events/tree/logging-service-pass-data/angular/logging-service"&gt;code on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-new-service-bookservice"&gt;
  &lt;/a&gt;
  Creating a new Service: BookService
&lt;/h2&gt;

&lt;p&gt;We start by creating a class inside a newly created file called book.service.ts inside src/app.&lt;/p&gt;

&lt;p&gt;The class will get&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;favBooks&lt;/strong&gt;: a private property to store a list of book titles as objects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;getBooksList&lt;/strong&gt;: a method that simply returns favBooks&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;createBook&lt;/strong&gt;: a method that checks that the title is not empty, create a book object and adds it to favBooks
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// book.service.ts

import { Injectable } from '@angular/core';
import { Book } from './models';

@Injectable({ providedIn: 'root' })
export class BookService {
  private favBooks: Book[] = [
    { title: 'Principles' },
    { title: 'The Story of Success' },
    { title: 'Extreme Economies' },
  ];

  getBooksList() {
    return this.favBooks;
  }

  createBook(bookTitle: string) {
    // simple check, title must be at least 1 char
    if (bookTitle.length !== 0) {
      const bookObj = { title: bookTitle };
      this.favBooks.push(bookObj);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that I created a Book type in src/models.ts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-from-user-input"&gt;
  &lt;/a&gt;
  Data from user input
&lt;/h2&gt;

&lt;p&gt;We change OneComponent so that there is an input element where users can write something. Once the user clicks on Add Title, a method (onAddBook) is called. This method (in one.component.ts) calls BookService to create the book object and to add it to favBooks.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-template"&gt;
  &lt;/a&gt;
  HTML template
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// one.component.html

&amp;lt;div&amp;gt;
  &amp;lt;input 
    type="text" 
    placeholder="Write a title" 
    #titleInput /&amp;gt;
  &amp;lt;button (click)="onAddBook()"&amp;gt;Add Title&amp;lt;/button&amp;gt;  
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that I am using &lt;code&gt;#titleInput&lt;/code&gt;. This is used to get direct access to the element in the DOM and it is &lt;a href="https://angular.io/api/core/ElementRef#description"&gt;not a good practice&lt;/a&gt;. However, it is the easiest way to get input data from users and focus on the service itself. &lt;br&gt;
Alternatively, use ngModel or consider Angular forms. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h3&gt;

&lt;p&gt;one.component.ts is using &lt;a href="https://angular.io/api/core/ViewChild#description"&gt;ViewChild&lt;/a&gt; and &lt;a href="https://angular.io/api/core/ElementRef#description"&gt;ElementRef&lt;/a&gt; to get the value of the user input. As said above, this is not the best way to handle data but for the sake of simplicity we will discuss angular forms in another post.&lt;/p&gt;

&lt;p&gt;What we need to know is that &lt;code&gt;this.titleInputReference.nativeElement.value&lt;/code&gt; gets the user data from the input element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// one.component.ts

import { Component, ElementRef, ViewChild } from '@angular/core';
import { BookService } from '../book.service';

@Component({
  selector: 'app-one',
  templateUrl: './one.component.html',
  styleUrls: ['./one.component.css'],
})
export class OneComponent {
  @ViewChild('titleInput')
  titleInputReference!: ElementRef;

  constructor(private bookService: BookService) {}

  onAddBook() {
    this.bookService.createBook(
      this.titleInputReference.nativeElement.value
    );
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;onAddBook() calls the createBook method of bookService and passes the value of the input element i.e. a string the user typed into the input element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-data-in-another-component-appcomponent"&gt;
  &lt;/a&gt;
  Display data in another component: AppComponent
&lt;/h2&gt;

&lt;p&gt;we start by receiving data from the service in AppComponent by declaring the service in the constructor and calling the service in ngOnInit()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// app.component.ts

import { Component, OnInit } from '@angular/core';
import { BookService } from './book.service';
import { Book } from './models';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent implements OnInit {
  title = 'Passing Data with Angular Services';
  booksList: Book[] | undefined;

  constructor(private bookService: BookService) {}

  ngOnInit(): void {
    this.booksList = this.bookService.getBooksList();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we update AppComponent template to display a list of books&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// app.component.html

&amp;lt;div&amp;gt;
  &amp;lt;h1&amp;gt;{{ title }}&amp;lt;/h1&amp;gt;
  &amp;lt;hr /&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;app-one&amp;gt;&amp;lt;/app-one&amp;gt;
    &amp;lt;app-two&amp;gt;&amp;lt;/app-two&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;hr /&amp;gt;
  &amp;lt;div *ngIf="booksList" class="wrapper"&amp;gt;
    &amp;lt;div *ngFor="let book of booksList" class="book"&amp;gt;
      {{ book.title }}
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, we are &lt;a href="https://www.vitainbeta.org/2022/01/04/passing-data-with-angular-service/"&gt;passing data&lt;/a&gt; from a component to another via a service. The same service could provide data to any other component in the application or even get updates from anywhere in the app. &lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Rails Authentication From Scratch (A Complete Guide)</title>
      <author>Steve Polito</author>
      <pubDate>Tue, 04 Jan 2022 13:33:53 +0000</pubDate>
      <link>https://dev.to/stevepolitodesign/rails-authentication-from-scratch-38m2</link>
      <guid>https://dev.to/stevepolitodesign/rails-authentication-from-scratch-38m2</guid>
      <description>&lt;p&gt;If you're like me then you probably take Devise for granted because you're too intimidated to roll your own authentication system. As powerful as Devise is, it's not perfect. There are plenty of cases where I've reached for it only to end up constrained by its features and design, and wished I could customize it exactly to my liking.&lt;/p&gt;

&lt;p&gt;Fortunately, Rails gives you all the tools you need to roll your own authentication system from scratch without needing to depend on a gem. The challenge is just knowing how to account for edge cases while being cognizant of security and best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-build-user-model"&gt;
  &lt;/a&gt;
  Step 1: Build User Model
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Generate User model.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g model User email:string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# db/migrate/[timestamp]_create_users.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;

      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run migrations.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add validations and callbacks.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;before_save&lt;/span&gt; &lt;span class="ss"&gt;:downcase_email&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;format: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;with: &lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MailTo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EMAIL_REGEXP&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;downcase_email&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We prevent empty values from being saved into the email column through a &lt;code&gt;null: false&lt;/code&gt; constraint in addition to the &lt;a href="https://guides.rubyonrails.org/active_record_validations.html#presence"&gt;presence&lt;/a&gt; validation.&lt;/li&gt;
&lt;li&gt;We enforce unique email addresses at the database level through &lt;code&gt;add_index :users, :email, unique: true&lt;/code&gt; in addition to a &lt;a href="https://guides.rubyonrails.org/active_record_validations.html#uniqueness"&gt;uniqueness&lt;/a&gt; validation.&lt;/li&gt;
&lt;li&gt;We ensure all emails are valid through a &lt;a href="https://guides.rubyonrails.org/active_record_validations.html#format"&gt;format&lt;/a&gt; validation.&lt;/li&gt;
&lt;li&gt;We save all emails to the database in a downcase format via a &lt;a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/Callbacks/ClassMethods.html#method-i-before_save"&gt;before_save&lt;/a&gt; callback such that the values are saved in a consistent format.&lt;/li&gt;
&lt;li&gt;We use &lt;a href="https://ruby-doc.org/stdlib-3.0.0/libdoc/uri/rdoc/URI/MailTo.html"&gt;URI::MailTo::EMAIL_REGEXP&lt;/a&gt; that comes with Ruby to valid that the email address is properly formatted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-confirmation-and-password-columns-to-users-table"&gt;
  &lt;/a&gt;
  Step 2: Add Confirmation and Password Columns to Users Table
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create migration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g migration add_confirmation_and_password_columns_to_users confirmation_token:string confirmation_sent_at:datetime confirmed_at:datetime password_digest:string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the migration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# db/migrate/[timestamp]_add_confirmation_and_password_columns_to_users.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddConfirmationAndPasswordColumnsToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:confirmation_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:confirmation_sent_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:datetime&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:confirmed_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:datetime&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_digest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;

    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:confirmation_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;confirmation_token&lt;/code&gt; column will store a random value created through the &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token"&gt;has_secure_token&lt;/a&gt; method when a record is saved. This will be used to identify users in a secure way when we need to confirm their email address. We add &lt;code&gt;null: false&lt;/code&gt; to prevent empty values and also add a unique index to ensure that no two users will have the same &lt;code&gt;confirmation_token&lt;/code&gt;. You can think of this as a secure alternative to the &lt;code&gt;id&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;confirmation_sent_at&lt;/code&gt; column will be used to ensure a confirmation has not expired. This is an added layer of security to prevent a &lt;code&gt;confirmation_token&lt;/code&gt; from being used multiple times.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;confirmed_at&lt;/code&gt; column will be set when a user confirms their account. This will help us determine who has confirmed their account and who has not.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;password_digest&lt;/code&gt; column will store a hashed version of the user's password. This is provided by the &lt;a href="https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password"&gt;has_secure_password&lt;/a&gt; method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Run migrations.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Enable and install BCrypt.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is needed to use &lt;code&gt;has_secure_password&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Gemfile&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'bcrypt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~&amp;gt; 3.1.7'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the User Model.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="no"&gt;CONFIRMATION_TOKEN_EXPIRATION_IN_SECONDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;

  &lt;span class="n"&gt;has_secure_password&lt;/span&gt;
  &lt;span class="n"&gt;has_secure_token&lt;/span&gt; &lt;span class="ss"&gt;:confirmation_token&lt;/span&gt;

  &lt;span class="n"&gt;before_save&lt;/span&gt; &lt;span class="ss"&gt;:downcase_email&lt;/span&gt;

  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;format: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;with: &lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MailTo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EMAIL_REGEXP&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;uniqueness: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;confirm!&lt;/span&gt;
    &lt;span class="n"&gt;update_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;confirmed_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;confirmed?&lt;/span&gt;
    &lt;span class="n"&gt;confirmed_at&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;confirmation_token_is_valid?&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;confirmation_sent_at&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;confirmation_sent_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CONFIRMATION_TOKEN_EXPIRATION_IN_SECONDS&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;confirmed?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;downcase_email&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;has_secure_password&lt;/code&gt; method is added to give us an &lt;a href="https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password"&gt;API&lt;/a&gt; to work with the &lt;code&gt;password_digest&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;has_secure_token :confirmation_token&lt;/code&gt; method is added to give us an &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token"&gt;API&lt;/a&gt; to work with the &lt;code&gt;confirmation_token&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;confirm!&lt;/code&gt; method will be called when a user confirms their email address. We still need to build this feature.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;confirmed?&lt;/code&gt; and &lt;code&gt;unconfirmed?&lt;/code&gt; methods allow us to tell whether a user has confirmed their email address or not.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;confirmation_token_is_valid?&lt;/code&gt; method tells us if the confirmation token is expired or not. This can be controlled by changing the value of the &lt;code&gt;CONFIRMATION_TOKEN_EXPIRATION_IN_SECONDS&lt;/code&gt; constant. This will be useful when we build the confirmation mailer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-3-create-sign-up-pages"&gt;
  &lt;/a&gt;
  Step 3: Create Sign Up Pages
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a simple home page since we'll need a place to redirect users to after they sign up.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g controller StaticPages home
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create UsersController.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g controller Users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Please check your email for confirmation instructions."&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_params&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_confirmation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Build sign-up form.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/shared/_form_errors.html.erb --&amp;gt;
&amp;lt;% if object.errors.any? %&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;% object.errors.full_messages.each do |message| %&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;%= message %&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/users/new.html.erb --&amp;gt;
&amp;lt;%= form_with model: @user, url: sign_up_path do |form| %&amp;gt;
  &amp;lt;%= render partial: "shared/form_errors", locals: { object: form.object } %&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :email %&amp;gt;
    &amp;lt;%= form.text_field :email, required: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :password %&amp;gt;
    &amp;lt;%= form.password_field :password, required: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :password_confirmation %&amp;gt;
    &amp;lt;%= form.password_field :password_confirmation, required: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;%= form.submit "Sign Up" %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update routes.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s2"&gt;"static_pages#home"&lt;/span&gt;
  &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;"sign_up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"users#create"&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"sign_up"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"users#new"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-create-confirmation-pages"&gt;
  &lt;/a&gt;
  Step 4: Create Confirmation Pages
&lt;/h2&gt;

&lt;p&gt;Users now have a way to sign up, but we need to verify their email address to prevent SPAM.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create ConfirmationsController
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails g controller Confirmations
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/confirmations_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfirmationsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Check your email for confirmation instructions."&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_confirmation_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"We could not find a user with that email or that email has already been confirmed."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;confirmation_token: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:confirmation_token&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirmation_token_is_valid?&lt;/span&gt;
      &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirm!&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Your account has been confirmed."&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_confirmation_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"Invalid token."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Build confirmation pages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This page will be used in the case where a user did not receive their confirmation instructions and needs to have them resent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/confirmations/new.html.erb --&amp;gt;
&amp;lt;%= form_with model: @user, url: confirmations_path do |form| %&amp;gt;
  &amp;lt;%= form.email_field :email, required: true %&amp;gt;
  &amp;lt;%= form.submit "Confirm Email" %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update routes.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:confirmations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;param: :confirmation_token&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;create&lt;/code&gt; action will be used to resend confirmation instructions to an unconfirmed user. We still need to build this mailer, and we still need to send this mailer when a user initially signs up. This action will be requested via the form on &lt;code&gt;app/views/confirmations/new.html.erb&lt;/code&gt;. Note that we call &lt;code&gt;downcase&lt;/code&gt; on the email to account for case sensitivity when searching.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;edit&lt;/code&gt; action is used to confirm a user's email. This will be the page that a user lands on when they click the confirmation link in their email. We still need to build this. Note that we're looking up a user through their &lt;code&gt;confirmation_token&lt;/code&gt; and not their email or ID. This is because The &lt;code&gt;confirmation_token&lt;/code&gt; is randomly generated and can't be easily guessed unlike an email or numeric ID. This is also why we added &lt;code&gt;param: :confirmation_token&lt;/code&gt; as a &lt;a href="https://guides.rubyonrails.org/routing.html#overriding-named-route-parameters"&gt;named route parameter&lt;/a&gt;. Note that we check if their confirmation token has expired before confirming their account.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-5-create-confirmation-mailer"&gt;
  &lt;/a&gt;
  Step 5: Create Confirmation Mailer
&lt;/h2&gt;

&lt;p&gt;Now we need a way to send a confirmation email to our users for them to actually confirm their accounts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a confirmation mailer.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g mailer User confirmation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/mailers/user_mailer.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserMailer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationMailer&lt;/span&gt;
  &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="ss"&gt;from: &lt;/span&gt;&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MAILER_FROM_EMAIL&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;

    &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subject: &lt;/span&gt;&lt;span class="s2"&gt;"Confirmation Instructions"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/user_mailer/confirmation.html.erb --&amp;gt;
&amp;lt;h1&amp;gt;Confirmation Instructions&amp;lt;/h1&amp;gt;

&amp;lt;%= link_to "Click here to confirm your email.", edit_confirmation_url(@user.confirmation_token) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/user_mailer/confirmation.text.erb --&amp;gt;
Confirmation Instructions

&amp;lt;%= edit_confirmation_url(@user.confirmation_token) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update User Model.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="no"&gt;MAILER_FROM_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"no-reply@example.com"&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_confirmation_email!&lt;/span&gt;
    &lt;span class="n"&gt;regenerate_confirmation_token&lt;/span&gt;
    &lt;span class="n"&gt;update_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;confirmation_sent_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;UserMailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;deliver_now&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;MAILER_FROM_EMAIL&lt;/code&gt; constant is a way for us to set the email used in the &lt;code&gt;UserMailer&lt;/code&gt;. This is optional.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;send_confirmation_email!&lt;/code&gt; method will create a new &lt;code&gt;confirmation_token&lt;/code&gt; and update the value of &lt;code&gt;confirmation_sent_at&lt;/code&gt;. This is to ensure confirmation links expire and cannot be reused. It will also send the confirmation email to the user.&lt;/li&gt;
&lt;li&gt;We call &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-update_columns"&gt;update_columns&lt;/a&gt; so that the &lt;code&gt;updated_at/updated_on&lt;/code&gt; columns are not updated. This is personal preference, but those columns should typically only be updated when the user updates their email or password.&lt;/li&gt;
&lt;li&gt;The links in the mailer will take the user to &lt;code&gt;ConfirmationsController#edit&lt;/code&gt; at which point they'll be confirmed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Configure Action Mailer so that links work locally.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add a host to the test and development (and later the production) environments so that &lt;a href="https://guides.rubyonrails.org/action_mailer_basics.html#generating-urls-in-action-mailer-views"&gt;urls will work in mailers&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/environments/test.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action_mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_url_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;host: &lt;/span&gt;&lt;span class="s2"&gt;"example.com"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/environments/development.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action_mailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_url_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;host: &lt;/span&gt;&lt;span class="s2"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;port: &lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update Controllers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we can send a confirmation email when a user signs up or if they need to have it resent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/confirmations_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfirmationsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
      &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_confirmation_email!&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
      &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_confirmation_email!&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-6-create-current-model-and-authentication-concern"&gt;
  &lt;/a&gt;
  Step 6: Create Current Model and Authentication Concern
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a model to store the current user.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/current.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Current&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CurrentAttributes&lt;/span&gt;
  &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create a Concern to store helper methods that will be shared across the application.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/concerns/authentication.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Authentication&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:current_user&lt;/span&gt;
    &lt;span class="n"&gt;helper_method&lt;/span&gt; &lt;span class="ss"&gt;:current_user&lt;/span&gt;
    &lt;span class="n"&gt;helper_method&lt;/span&gt; &lt;span class="ss"&gt;:user_signed_in?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reset_session&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;
    &lt;span class="n"&gt;reset_session&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;redirect_if_authenticated&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"You are already logged in."&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_signed_in?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_user&lt;/span&gt;
    &lt;span class="no"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user_signed_in?&lt;/span&gt;
    &lt;span class="no"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Load the Authentication Concern into the Application Controller.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/application_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActionController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Authentication&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Current&lt;/code&gt; class inherits from &lt;a href="https://api.rubyonrails.org/classes/ActiveSupport/CurrentAttributes.html"&gt;ActiveSupport::CurrentAttributes&lt;/a&gt; which allows us to keep all per-request attributes easily available to the whole system. In essence, this will allow us to set a current user and have access to that user during each request to the server.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Authentication&lt;/code&gt; Concern provides an interface for logging the user in and out. We load it into the &lt;code&gt;ApplicationController&lt;/code&gt; so that it will be used across the whole application.

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;login&lt;/code&gt; method first &lt;a href="https://api.rubyonrails.org/classes/ActionController/Metal.html#method-i-reset_session"&gt;resets the session&lt;/a&gt; to account for &lt;a href="https://guides.rubyonrails.org/security.html#session-fixation-countermeasures"&gt;session fixation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We set the user's ID in the &lt;a href="https://guides.rubyonrails.org/action_controller_overview.html#session"&gt;session&lt;/a&gt; so that we can have access to the user across requests. The user's ID won't be stored in plain text. The cookie data is cryptographically signed to make it tamper-proof. And it is also encrypted so anyone with access to it can't read its contents.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;logout&lt;/code&gt; method simply &lt;a href="https://api.rubyonrails.org/classes/ActionController/Metal.html#method-i-reset_session"&gt;resets the session&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;redirect_if_authenticated&lt;/code&gt; method checks to see if the user is logged in. If they are, they'll be redirected to the &lt;code&gt;root_path&lt;/code&gt;. This will be useful on pages an authenticated user should not be able to access, such as the login page.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;current_user&lt;/code&gt; method returns a &lt;code&gt;User&lt;/code&gt; and sets it as the user on the &lt;code&gt;Current&lt;/code&gt; class we created. We use &lt;a href="https://www.honeybadger.io/blog/ruby-rails-memoization/"&gt;memoization&lt;/a&gt; to avoid fetching the User each time we call the method. We call the &lt;code&gt;before_action&lt;/code&gt; &lt;a href="https://guides.rubyonrails.org/action_controller_overview.html#filters"&gt;filter&lt;/a&gt; so that we have access to the current user before each request. We also add this as a &lt;a href="https://api.rubyonrails.org/classes/AbstractController/Helpers/ClassMethods.html#method-i-helper_method"&gt;helper_method&lt;/a&gt; so that we have access to &lt;code&gt;current_user&lt;/code&gt; in the views.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;user_signed_in?&lt;/code&gt; method simply returns true or false depending on whether the user is signed in or not. This is helpful for conditionally rendering items in views.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-7-create-login-page"&gt;
  &lt;/a&gt;
  Step 7: Create Login Page
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Generate Sessions Controller.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g controller Sessions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/sessions_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:redirect_if_authenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_confirmation_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"You must confirm your email before you can sign in."&lt;/span&gt;
      &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Signed in."&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alert&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Incorrect email or password."&lt;/span&gt;
        &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;        
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alert&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Incorrect email or password."&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;destroy&lt;/span&gt;
    &lt;span class="n"&gt;logout&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Signed out."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update routes.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"sessions#create"&lt;/span&gt;
  &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="s2"&gt;"logout"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"sessions#destroy"&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"login"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"sessions#new"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add sign-in form.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/sessions/new.html.erb --&amp;gt;
&amp;lt;%= form_with url: login_path, scope: :user do |form| %&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :email %&amp;gt;
    &amp;lt;%= form.text_field :email, required: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :password %&amp;gt;
    &amp;lt;%= form.password_field :password, required: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;%= form.submit %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;create&lt;/code&gt; method simply checks if the user exists and is confirmed. If they are, then we check their password. If the password is correct, we log them in via the &lt;code&gt;login&lt;/code&gt; method we created in the &lt;code&gt;Authentication&lt;/code&gt; Concern. Otherwise, we render an alert.

&lt;ul&gt;
&lt;li&gt;We're able to call &lt;code&gt;user.authenticate&lt;/code&gt; because of &lt;a href="https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password"&gt;has_secure_password&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Note that we call &lt;code&gt;downcase&lt;/code&gt; on the email to account for case sensitivity when searching.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;destroy&lt;/code&gt; method simply calls the &lt;code&gt;logout&lt;/code&gt; method we created in the &lt;code&gt;Authentication&lt;/code&gt; Concern.&lt;/li&gt;
&lt;li&gt;The login form is passed a &lt;code&gt;scope: :user&lt;/code&gt; option so that the params are namespaced as &lt;code&gt;params[:user][:some_value]&lt;/code&gt;. This is not required, but it helps keep things organized.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-8-update-existing-controllers"&gt;
  &lt;/a&gt;
  Step 8: Update Existing Controllers
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update Controllers to prevent authenticated users from accessing pages intended for anonymous users.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/confirmations_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfirmationsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:redirect_if_authenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirmation_token_is_valid?&lt;/span&gt;
      &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirm!&lt;/span&gt;
      &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we also call &lt;code&gt;login @user&lt;/code&gt; once a user is confirmed. That way they'll be automatically logged in after confirming their email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:redirect_if_authenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-9-add-password-reset-columns-to-users-table"&gt;
  &lt;/a&gt;
  Step 9: Add Password Reset Columns to Users Table
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create migration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g migration add_password_reset_token_to_users password_reset_token:string password_reset_sent_at:datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the migration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# db/migrate/[timestamp]_add_password_reset_token_to_users.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddPasswordResetTokenToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_reset_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_reset_sent_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:datetime&lt;/span&gt;
    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_reset_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;password_reset_token&lt;/code&gt; column will store a random value created through the &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token"&gt;has_secure_token&lt;/a&gt; method when a record is saved. This will be used to identify users in a secure way when they need to reset their password. We add &lt;code&gt;null: false&lt;/code&gt; to prevent empty values and also add a unique index to ensure that no two users will have the same &lt;code&gt;password_reset_token&lt;/code&gt;. You can think of this as a secure alternative to the &lt;code&gt;id&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;password_reset_sent_at&lt;/code&gt; column will be used to ensure a password reset link has not expired. This is an added layer of security to prevent a &lt;code&gt;password_reset_token&lt;/code&gt; from being used multiple times.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Run migration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update User Model.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="no"&gt;PASSWORD_RESET_TOKEN_EXPIRATION_IN_SECONDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;has_secure_token&lt;/span&gt; &lt;span class="ss"&gt;:password_reset_token&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;password_reset_token_has_expired?&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;password_reset_sent_at&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;password_reset_sent_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PASSWORD_RESET_TOKEN_EXPIRATION_IN_SECONDS&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_password_reset_email!&lt;/span&gt;
    &lt;span class="n"&gt;regenerate_password_reset_token&lt;/span&gt;
    &lt;span class="n"&gt;update_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;password_reset_sent_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="no"&gt;UserMailer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;password_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;deliver_now&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update User Mailer.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/mailers/user_mailer.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserMailer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationMailer&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;password_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;

    &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subject: &lt;/span&gt;&lt;span class="s2"&gt;"Password Reset Instructions"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/user_mailer/password_reset.html.erb --&amp;gt;
&amp;lt;h1&amp;gt;Password Reset Instructions&amp;lt;/h1&amp;gt;

&amp;lt;%= link_to "Click here to reset your password.", edit_password_url(@user.password_reset_token) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/user_mailer/password_reset.text.erb --&amp;gt;
Password Reset Instructions

&amp;lt;%= edit_password_url(@user.password_reset_token) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;has_secure_token :password_reset_token&lt;/code&gt; method is added to give us an &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token"&gt;API&lt;/a&gt; to work with the &lt;code&gt;password_reset_token&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;password_reset_token_has_expired?&lt;/code&gt; method tells us if the password reset token is expired or not. This can be controlled by changing the value of the &lt;code&gt;PASSWORD_RESET_TOKEN_EXPIRATION_IN_SECONDS&lt;/code&gt; constant. This will be useful when we build the password reset mailer.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;send_password_reset_email!&lt;/code&gt; method will create a new &lt;code&gt;password_reset_token&lt;/code&gt; and update the value of &lt;code&gt;password_reset_sent_at&lt;/code&gt;. This is to ensure password reset links expire and cannot be reused. It will also send the password reset email to the user. We still need to build this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-10-build-password-reset-forms"&gt;
  &lt;/a&gt;
  Step 10: Build Password Reset Forms
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create PasswordsController.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g controller Passwords
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/passwords_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PasswordsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:redirect_if_authenticated&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirmed?&lt;/span&gt;
        &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_password_reset_email!&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"If that user exists we've sent instructions to their email."&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_confirmation_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"Please confirm your email first."&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"If that user exists we've sent instructions to their email."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;password_reset_token: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password_reset_token&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_confirmation_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"You must confirm your email before you can sign in."&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;password_reset_token_has_expired?&lt;/span&gt;
      &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_password_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"Invalid or expired token."&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;password_reset_token: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password_reset_token&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_confirmation_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"You must confirm your email before you can sign in."&lt;/span&gt;
      &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;password_reset_token_has_expired?&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_password_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"Incorrect email or password."&lt;/span&gt;
      &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;login_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Signed in."&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alert&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sentence&lt;/span&gt;
        &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;        
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alert&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Incorrect email or password."&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;password_params&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_confirmation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;create&lt;/code&gt; action will send an email to the user containing a link that will allow them to reset the password. The link will contain their &lt;code&gt;password_reset_token&lt;/code&gt; which is unique and expires. Note that we call &lt;code&gt;downcase&lt;/code&gt; on the email to account for case sensitivity when searching.

&lt;ul&gt;
&lt;li&gt;Note that we return &lt;code&gt;If that user exists we've sent instructions to their email.&lt;/code&gt; even if the user is not found. This makes it difficult for a bad actor to use the reset form to see which email accounts exist on the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;edit&lt;/code&gt; action renders simply renders the form for the user to update their password. It attempts to find a user by their &lt;code&gt;password_reset_token&lt;/code&gt;. You can think of the &lt;code&gt;password_reset_token&lt;/code&gt; as a way to identify the user much like how we normally identify records by their ID. However, the &lt;code&gt;password_reset_token&lt;/code&gt; is randomly generated and will expire so it's more secure.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;new&lt;/code&gt; action simply renders a form for the user to put their email address in to receive the password reset email.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;update&lt;/code&gt; also ensures the user is identified by their &lt;code&gt;password_reset_token&lt;/code&gt;. It's not enough to just do this on the &lt;code&gt;edit&lt;/code&gt; action since a bad actor could make a &lt;code&gt;PUT&lt;/code&gt; request to the server and bypass the form.

&lt;ul&gt;
&lt;li&gt;If the user exists and is confirmed and their password token has not expired, we update their password to the one they will set in the form. Otherwise, we handle each failure case differently.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Update Routes.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="ss"&gt;:passwords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:create&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;param: :password_reset_token&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; We add &lt;code&gt;param: :password_reset_token&lt;/code&gt; as a &lt;a href="https://guides.rubyonrails.org/routing.html#overriding-named-route-parameters"&gt;named route parameter&lt;/a&gt; to the so that we can identify users by their &lt;code&gt;password_reset_token&lt;/code&gt; and not &lt;code&gt;id&lt;/code&gt;. This is similar to what we did with the confirmations routes and ensures a user cannot be identified by their ID.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Build forms.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/passwords/new.html.erb --&amp;gt;
&amp;lt;%= form_with url: passwords_path, scope: :user do |form| %&amp;gt;
  &amp;lt;%= form.email_field :email, required: true %&amp;gt;
  &amp;lt;%= form.submit "Reset Password" %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/passwords/edit.html.erb --&amp;gt;
&amp;lt;%= form_with url: password_path(@user.password_reset_token), scope: :user, method: :put do |form| %&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :password %&amp;gt;
    &amp;lt;%= form.password_field :password, required: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :password_confirmation %&amp;gt;
    &amp;lt;%= form.password_field :password_confirmation, required: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;%= form.submit "Update Password" %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The password reset form is passed a &lt;code&gt;scope: :user&lt;/code&gt; option so that the params are namespaced as &lt;code&gt;params[:user][:some_value]&lt;/code&gt;. This is not required, but it helps keep things organized.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-11-add-unconfirmed-email-column-to-users-table"&gt;
  &lt;/a&gt;
  Step 11: Add Unconfirmed Email Column To Users Table
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create migration and run migration
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g migration add_unconfirmed_email_to_users unconfirmed_email:string
rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update User Model.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:current_password&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;before_save&lt;/span&gt; &lt;span class="ss"&gt;:downcase_unconfirmed_email&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;format: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;with: &lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MailTo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EMAIL_REGEXP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;allow_blank: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;confirm!&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unconfirmed_or_reconfirming?&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unconfirmed_email: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="n"&gt;update_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;confirmed_at: &lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;confirmable_email&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
      &lt;span class="n"&gt;unconfirmed_email&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;email&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reconfirming?&lt;/span&gt;
    &lt;span class="n"&gt;unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unconfirmed_or_reconfirming?&lt;/span&gt;
    &lt;span class="n"&gt;unconfirmed?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;reconfirming?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;downcase_unconfirmed_email&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We add a &lt;code&gt;unconfirmed_email&lt;/code&gt; column to the &lt;code&gt;users_table&lt;/code&gt; so that we have a place to store the email a user is trying to use after their account has been confirmed with their original email.&lt;/li&gt;
&lt;li&gt;We add &lt;code&gt;attr_accessor :current_password&lt;/code&gt; so that we'll be able to use &lt;code&gt;f.password_field :current_password&lt;/code&gt; in the user form (which doesn't exist yet). This will allow us to require the user to submit their current password before they can update their account.&lt;/li&gt;
&lt;li&gt;We ensure to format the &lt;code&gt;unconfirmed_email&lt;/code&gt; before saving it to the database. This ensures all data is saved consistently.&lt;/li&gt;
&lt;li&gt;We add validations to the &lt;code&gt;unconfirmed_email&lt;/code&gt; column ensuring it's a valid email address.&lt;/li&gt;
&lt;li&gt;We update the &lt;code&gt;confirm!&lt;/code&gt; method to set the &lt;code&gt;email&lt;/code&gt; column to the value of the &lt;code&gt;unconfirmed_email&lt;/code&gt; column, and then clear out the &lt;code&gt;unconfirmed_email&lt;/code&gt; column. This will only happen if a user is trying to confirm a new email address. Note that we return &lt;code&gt;false&lt;/code&gt; if updating the email address fails. This could happen if a user tries to confirm an email address that has already been confirmed. &lt;/li&gt;
&lt;li&gt;We add the &lt;code&gt;confirmable_email&lt;/code&gt; method so that we can call the correct email in the updated &lt;code&gt;UserMailer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We add &lt;code&gt;reconfirming?&lt;/code&gt; and &lt;code&gt;unconfirmed_or_reconfirming?&lt;/code&gt; to help us determine what state a user is in. This will come in handy later in our controllers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Update User Mailer.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/mailers/user_mailer.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserMailer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationMailer&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;confirmation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirmable_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;subject: &lt;/span&gt;&lt;span class="s2"&gt;"Confirmation Instructions"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update Confirmations Controller.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/confirmations_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfirmationsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirmation_token_is_valid?&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirm!&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Your account has been confirmed."&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_confirmation_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"Something went wrong."&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We update the &lt;code&gt;edit&lt;/code&gt; method to account for the return value of &lt;code&gt;@user.confirm!&lt;/code&gt;. If for some reason &lt;code&gt;@user.confirm!&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; (which would most likely happen if the email has already been taken) then we render a generic error. This prevents leaking email addresses.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-12-update-users-controller"&gt;
  &lt;/a&gt;
  Step 12: Update Users Controller
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update Authentication Concern
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/concerns/authentication.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Authentication&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authenticate_user!&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;login_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"You need to login to access that page."&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;user_signed_in?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;authenticate_user!&lt;/code&gt; method can be called to ensure an anonymous user cannot access a page that requires a user to be logged in. We'll need this when we build the page allowing a user to edit or delete their profile.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Add destroy, edit and update methods. Modify create method and user_params.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/users_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UsersController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:authenticate_user!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:destroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:update&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;destroy&lt;/span&gt;
    &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy&lt;/span&gt;
    &lt;span class="n"&gt;reset_session&lt;/span&gt;
    &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Your account has been deleted."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:current_password&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;update_user_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
          &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send_confirmation_email!&lt;/span&gt;
          &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Check your email for confirmation instructions."&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
          &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Account updated."&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:error&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Incorrect password"&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_user_params&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_confirmation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_user_params&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:current_password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_confirmation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:unconfirmed_email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We call &lt;code&gt;redirect_if_authenticated&lt;/code&gt; before editing, destroying, or updating a user since only an authenticated use should be able to do this.&lt;/li&gt;
&lt;li&gt;We update the &lt;code&gt;create&lt;/code&gt; method to accept &lt;code&gt;create_user_params&lt;/code&gt; (formerly &lt;code&gt;user_params&lt;/code&gt;). This is because we're going to require different parameters for creating an account vs. editing an account.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;destroy&lt;/code&gt; action simply deletes the user and logs them out. Note that we're calling &lt;code&gt;current_user&lt;/code&gt;, so this action can only be scoped to the user who is logged in.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;edit&lt;/code&gt; action simply assigns &lt;code&gt;@user&lt;/code&gt; to the &lt;code&gt;current_user&lt;/code&gt; so that we have access to the user in the edit form.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;update&lt;/code&gt; action first checks if their password is correct. Note that we're passing this in as &lt;code&gt;current_password&lt;/code&gt; and not &lt;code&gt;password&lt;/code&gt;. This is because we still want a user to be able to change their password and therefore we need another parameter to store this value. This is also why we have a private &lt;code&gt;update_user_params&lt;/code&gt; method.

&lt;ul&gt;
&lt;li&gt;If the user is updating their email address (via &lt;code&gt;unconfirmed_email&lt;/code&gt;) we send a confirmation email to that new email address before setting it as the &lt;code&gt;email&lt;/code&gt; value.&lt;/li&gt;
&lt;li&gt;We force a user to always put in their &lt;code&gt;current_password&lt;/code&gt; as an extra security measure in case someone leaves their browser open on a public computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Update routes.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;put&lt;/span&gt; &lt;span class="s2"&gt;"account"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"users#update"&lt;/span&gt;
  &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;"account"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"users#edit"&lt;/span&gt;
  &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="s2"&gt;"account"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s2"&gt;"users#destroy"&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create an edit form.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/users/edit.html.erb --&amp;gt;
&amp;lt;%= form_with model: @user, url: account_path, method: :put do |form| %&amp;gt;
  &amp;lt;%= render partial: "shared/form_errors", locals: { object: form.object } %&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :email, "Current Email" %&amp;gt;
    &amp;lt;%= form.text_field :email, disabled: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :unconfirmed_email, "New Email" %&amp;gt;
    &amp;lt;%= form.text_field :unconfirmed_email %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :password, "Password (leave blank if you don't want to change it)" %&amp;gt;
    &amp;lt;%= form.password_field :password %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :password_confirmation %&amp;gt;
    &amp;lt;%= form.password_field :password_confirmation %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;hr/&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :current_password, "Current password (we need your current password to confirm your changes)" %&amp;gt;
    &amp;lt;%= form.password_field :current_password, required: true %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;%= form.submit "Update Account" %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We &lt;code&gt;disable&lt;/code&gt; the &lt;code&gt;email&lt;/code&gt; field to ensure we're not passing that value back to the controller. This is just so the user can see what their current email is.&lt;/li&gt;
&lt;li&gt;We &lt;code&gt;require&lt;/code&gt; the &lt;code&gt;current_password&lt;/code&gt; field since we'll always want a user to confirm their password before making changes.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;password&lt;/code&gt; and &lt;code&gt;password_confirmation&lt;/code&gt; fields are there if a user wants to update their current password.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-13-update-confirmations-controller"&gt;
  &lt;/a&gt;
  Step 13: Update Confirmations Controller
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update edit action.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/confirmations_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfirmationsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;edit&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed_or_reconfirming?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;confirmation_token_is_valid?&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We add &lt;code&gt;@user.unconfirmed_or_reconfirming?&lt;/code&gt; to the conditional to ensure only unconfirmed users or users who are reconfirming can access this page. This is necessary since we're now allowing users to confirm new email addresses.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-14-add-remember-token-column-to-users-table"&gt;
  &lt;/a&gt;
  Step 14: Add Remember Token Column to Users Table
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create migration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g migration add_remember_token_to_users remember_token:string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update migration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# db/migrate/[timestamp]_add_remember_token_to_users.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddRememberTokenToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We add &lt;code&gt;null: false&lt;/code&gt; to ensure this column always has a value.&lt;/li&gt;
&lt;li&gt;We add a &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index"&gt;unique index&lt;/a&gt; to ensure this column has unique data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Run migrations.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the User model.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;has_secure_token&lt;/span&gt; &lt;span class="ss"&gt;:remember_token&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just like the &lt;code&gt;confirmation_token&lt;/code&gt; and &lt;code&gt;password_reset_token&lt;/code&gt; columns, we call &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token"&gt;has_secure_token&lt;/a&gt; on the &lt;code&gt;remember_token&lt;/code&gt;. This ensures that the value for this column will be set when the record is created. This value will be used later to securely identify the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-15-update-authentication-concern"&gt;
  &lt;/a&gt;
  Step 15: Update Authentication Concern
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Add new helper methods.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/concerns/authentication.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Authentication&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt; &lt;span class="ss"&gt;:remember_token&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;regenerate_remember_token&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;regenerate_remember_token&lt;/span&gt;
    &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;remember_token&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_user&lt;/span&gt;
    &lt;span class="no"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user_id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
      &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
      &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;remember_token: &lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;remember&lt;/code&gt; method first regenerates a new &lt;code&gt;remember_token&lt;/code&gt; to ensure these values are being rotated and can't be used more than once. We get the &lt;code&gt;regenerate_remember_token&lt;/code&gt; method from &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token"&gt;has_secure_token&lt;/a&gt;. Next, we assigned this value to a &lt;a href="https://api.rubyonrails.org/classes/ActionDispatch/Cookies.html"&gt;cookie&lt;/a&gt;. The call to &lt;a href="https://api.rubyonrails.org/classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-permanent"&gt;permanent&lt;/a&gt; ensures the cookie won't expire until 20 years from now. The call to &lt;a href="https://api.rubyonrails.org/classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-encrypted"&gt;encrypted&lt;/a&gt; ensures the value will be encrypted. This is vital since this value is used to identify the user and is being set in the browser.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;forget&lt;/code&gt; method deletes the cookie and regenerates a new &lt;code&gt;remember_token&lt;/code&gt; to ensure these values are being rotated and can't be used more than once.&lt;/li&gt;
&lt;li&gt;We update the &lt;code&gt;current_user&lt;/code&gt; method by adding a conditional to first try and find the user by the session, and then fallback to finding the user by the cookie. This is the logic that allows a user to completely exit their browser and remain logged in when they return to the website since the cookie will still be set.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-16-update-sessions-controller"&gt;
  &lt;/a&gt;
  Step 16: Update Sessions Controller
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt; methods.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/sessions_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:authenticate_user!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;only: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:destroy&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
        &lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:remember_me&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;destroy&lt;/span&gt;
    &lt;span class="n"&gt;forget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We conditionally call &lt;code&gt;remember(@user)&lt;/code&gt; in the &lt;code&gt;create&lt;/code&gt; method if the user has checked the "Remember me" checkbox. We still need to add this to our form.&lt;/li&gt;
&lt;li&gt;We call &lt;code&gt;forget(current_user)&lt;/code&gt; in the &lt;code&gt;destroy&lt;/code&gt; method to ensure we delete the &lt;code&gt;remember_me&lt;/code&gt; cookie and regenerate the user's &lt;code&gt;remember_token&lt;/code&gt; token.&lt;/li&gt;
&lt;li&gt;We also add a &lt;code&gt;before_action&lt;/code&gt; to ensure only authenticated users can access the &lt;code&gt;destroy&lt;/code&gt; action.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Add the "Remember me" checkbox to the login form.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- app/views/sessions/new.html.erb --&amp;gt;
&amp;lt;%= form_with url: login_path, scope: :user do |form| %&amp;gt;
  ...
  &amp;lt;div&amp;gt;
    &amp;lt;%= form.label :remember_me %&amp;gt;
    &amp;lt;%= form.check_box :remember_me %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;%= form.submit "Sign In" %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-15-add-friendly-redirects"&gt;
  &lt;/a&gt;
  Step 15: Add Friendly Redirects
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update Authentication Concern.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/concerns/authentication.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Authentication&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authenticate_user!&lt;/span&gt;
    &lt;span class="n"&gt;store_location&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;store_location&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_return_to&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;original_url&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;local?&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;store_location&lt;/code&gt; method stores the &lt;a href="https://api.rubyonrails.org/classes/ActionDispatch/Request.html#method-i-original_url"&gt;request.original_url&lt;/a&gt; in the &lt;a href="https://guides.rubyonrails.org/action_controller_overview.html#session"&gt;session&lt;/a&gt; so it can be retrieved later. We only do this if the request made was a get request. We also call &lt;code&gt;request.local?&lt;/code&gt; to ensure it was a local request. This prevents redirecting to an external application.&lt;/li&gt;
&lt;li&gt;We call &lt;code&gt;store_location&lt;/code&gt; in the &lt;code&gt;authenticate_user!&lt;/code&gt; method so that we can save the path to the page the user was trying to visit before they were redirected to the login page. We need to do this before visiting the login page otherwise the call to &lt;code&gt;request.original_url&lt;/code&gt; will always return the url to the login page.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Update Sessions Controller.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/sessions_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;after_login_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_return_to&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
        &lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:remember_me&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;after_login_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Signed in."&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;after_login_path&lt;/code&gt; variable it set to be whatever is in the &lt;code&gt;session[:user_return_to]&lt;/code&gt;. If there's nothing in &lt;code&gt;session[:user_return_to]&lt;/code&gt; then it defaults to the &lt;code&gt;root_path&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Note that we call this method before calling &lt;code&gt;login&lt;/code&gt;. This is because &lt;code&gt;login&lt;/code&gt; calls &lt;code&gt;reset_session&lt;/code&gt; which would deleted the &lt;code&gt;session[:user_return_to]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-17-account-for-timing-attacks"&gt;
  &lt;/a&gt;
  Step 17: Account for Timing Attacks
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Update the User model.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://edgeapi.rubyonrails.org/classes/ActiveRecord/SecurePassword/ClassMethods.html#method-i-authenticate_by"&gt;Note that this class method will be available in Rails 7.1&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;authenticate_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;passwords&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identifiers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;partition&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;has_attribute?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;has_attribute?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_digest"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;ArgumentError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"One or more password arguments are required"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;passwords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;ArgumentError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"One or more finder arguments are required"&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;identifiers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty?&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifiers&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;passwords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;public_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:"authenticate_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="ss"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;passwords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passwords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;  
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This class method serves to find a user using the non-password attributes (such as email), and then authenticates that record using the password attributes. Regardless of whether a user is found or authentication succeeds, &lt;code&gt;authenticate_by&lt;/code&gt; will take the same amount of time. This prevents &lt;a href="https://en.wikipedia.org/wiki/Timing_attack"&gt;timing-based enumeration attacks&lt;/a&gt;, wherein an attacker can determine if a password record exists even without knowing the password.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Update the Sessions Controller.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/sessions_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SessionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;authenticate_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;password: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unconfirmed?&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;new_confirmation_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;alert: &lt;/span&gt;&lt;span class="s2"&gt;"You must confirm your email before you can sign in."&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;after_login_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_return_to&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt;
        &lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
        &lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:remember_me&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"1"&lt;/span&gt;
        &lt;span class="n"&gt;redirect_to&lt;/span&gt; &lt;span class="n"&gt;after_login_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;notice: &lt;/span&gt;&lt;span class="s2"&gt;"Signed in."&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alert&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Incorrect email or password."&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;:new&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We refactor the &lt;code&gt;create&lt;/code&gt; method to always start by finding and authenticating the user. Not only does this prevent timing attacks, but it also prevents accidentally leaking email addresses. This is because we were originally checking if a user was confirmed before authenticating them. That means a bad actor could try and sign in with an email address to see if it exists on the system without needing to know the password.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-18-account-for-session-replay-attacks"&gt;
  &lt;/a&gt;
  Step 18: Account for Session Replay Attacks
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note that this refactor prevents a user from being logged into multiple devices and browsers at one time.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We're currently setting the user's ID in the session. Even though that value is encrypted, the encrypted value doesn't change since it's based on the user id which doesn't change. This means that if a bad actor were to get a copy of the session they would have access to a victim's account in perpetuity. One solution is to &lt;a href="https://guides.rubyonrails.org/security.html#rotating-encrypted-and-signed-cookies-configurations"&gt;rotate encrypted and signed cookie configurations&lt;/a&gt;. Another solution is to use a rotating value to identify the user (which is what we'll be doing). A third option is to configure the &lt;a href="https://guides.rubyonrails.org/configuring.html#config-session-store"&gt;Rails session store&lt;/a&gt; to use &lt;code&gt;mem_cache_store&lt;/code&gt; to store session data.&lt;/p&gt;

&lt;p&gt;You can read more about session replay attacks &lt;a href="https://binarysolo.chapter24.blog/avoiding-session-replay-attacks-in-rails/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a session_token column to the users table.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g migration add_session_token_to_users session_token:string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update migration.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# db/migrate/[timestamp]_add_session_token_to_users.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddSessionTokenToUsers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;add_column&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:session_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;null: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;add_index&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:session_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;unique: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Similar to the &lt;code&gt;confirmation_token&lt;/code&gt;, &lt;code&gt;password_reset_token&lt;/code&gt; and &lt;code&gt;remember_token&lt;/code&gt;, prevent the &lt;code&gt;session_token&lt;/code&gt; from being null and enforce that it has a unique value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Update User Model.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;has_secure_token&lt;/span&gt; &lt;span class="ss"&gt;:session_token&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update Authentication Concern.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/concerns/authentication.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Authentication&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;reset_session&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;regenerate_session_token&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user_session_token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;session_token&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;
    &lt;span class="n"&gt;reset_session&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;regenerate_session_token&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_user&lt;/span&gt;
    &lt;span class="no"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user_session_token&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
      &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;session_token: &lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:current_user_session_token&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;
      &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;remember_token: &lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We update the &lt;code&gt;login&lt;/code&gt; method by adding a call to &lt;code&gt;user.regenerate_session_token&lt;/code&gt;. This will reset the valid of the &lt;code&gt;session_token&lt;/code&gt; through the &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/SecureToken/ClassMethods.html#method-i-has_secure_token"&gt;has_secure_token&lt;/a&gt; API. We then store that value in the session.&lt;/li&gt;
&lt;li&gt;We updated the &lt;code&gt;logout&lt;/code&gt; method by first setting the &lt;code&gt;current_user&lt;/code&gt; as a variable. This is because once we call &lt;code&gt;reset_session&lt;/code&gt;, we lose access to the &lt;code&gt;current_user&lt;/code&gt;. We then call &lt;code&gt;user.regenerate_session_token&lt;/code&gt; which will update the value of the &lt;code&gt;session_token&lt;/code&gt; on the user that just signed out.&lt;/li&gt;
&lt;li&gt;Finally we update the &lt;code&gt;current_user&lt;/code&gt; method to look for the &lt;code&gt;session[:current_user_session_token]&lt;/code&gt; instead of the &lt;code&gt;session[:current_user_id]&lt;/code&gt; and to query for the User by the &lt;code&gt;session_token&lt;/code&gt; value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Force SSL.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/environments/production.rb&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
 &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;force_ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What's Going On Here?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We force SSL in production to prevent &lt;a href="https://guides.rubyonrails.org/security.html#session-hijacking"&gt;session hijacking&lt;/a&gt;. Even though the session is encrypted we want to prevent the cookie from being exposed through an insecure network. If it were exposed, a bad actor could sign in as the victim.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

</description>
      <category>rails</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I write cover letters for developer roles</title>
      <author>Eliot Sanford</author>
      <pubDate>Tue, 04 Jan 2022 13:33:30 +0000</pubDate>
      <link>https://dev.to/techieeliot/how-i-write-cover-letters-17ke</link>
      <guid>https://dev.to/techieeliot/how-i-write-cover-letters-17ke</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-friend-whos-job-searching-for-developer-jobs-asked-me-recently"&gt;
  &lt;/a&gt;
  A friend who's job searching for developer jobs asked me recently:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#what-points-do-you-try-to-cover-in-your-cover-letters"&gt;
  &lt;/a&gt;
  "What points do you try to cover in your cover letters?"
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#here-are-some-of-my-main-objectives-with-the-cover-letter"&gt;
  &lt;/a&gt;
  Here are some of my main objectives with the cover letter.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#whats-the-goal-of-it"&gt;
  &lt;/a&gt;
  What's the goal of it?
&lt;/h4&gt;

&lt;p&gt;First, understand what the cover letter is doing for you.&lt;/p&gt;

&lt;p&gt;Its goal is not to land you the job. Its purpose is to get you an interview. Approach writing one with that angle.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h4&gt;

&lt;p&gt;Before even laying hands to the keyboard to write a cover letter at all, seek to network with someone to get a referral. &lt;/p&gt;

&lt;p&gt;Probably 9 times out of 10, I don't need to write one because my referral or recruiter is my cover letter. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#when-seeking-a-referral"&gt;
  &lt;/a&gt;
  When seeking a referral
&lt;/h4&gt;

&lt;p&gt;Make sure that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They have a positive reputation (and some respect, gravity, and influence at the company never hurts)&lt;/li&gt;
&lt;li&gt;They know enough about you to vouch for you (reach out to them for a quick call if you don't know them that well yet or haven't spoken with them in a while to talk about how you are qualified)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's still usually a good idea to have a person to reference in the first section that you spoke to about the position. Having a positive existing relationship with someone that they know is a positive step to get what you want from the cover letter anyway -- your foot in the door for an interview. &lt;/p&gt;

&lt;p&gt;Plus, they referred you, so you want them to be contacted and given credit for a kickback when you're hired. That's a great way to say "Thank you!", indirectly.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#youre-applying-so-write-a-cover-letter"&gt;
  &lt;/a&gt;
  You're applying, so write a cover letter
&lt;/h4&gt;

&lt;p&gt;If given the option to write the cover letter, write one.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#things-i-do"&gt;
  &lt;/a&gt;
  Things I do:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Match the title and contact info header from your resume&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Address the person by name (I like to show personality, so I use a waving emoji with my "Hey" but I understand if you want it to be professional)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; A little hack I learned: call the HR contact person to find out who by full name reads the cover letters, find out insider information about the position, and let them know that you'll be applying. I cannot overstate this, but making contact with a human at the company and knowing them by full name, again, it increases your chances of getting your foot in the door.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mention your referral as I detailed above&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explicitly mention the full title of the position with job id number if used and known (including whether its listing has a location, hybrid, or remote)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Offer in one to three sentences max list why you want the role and/or why you're a good fit for the role with the value you bring to the company (specific team if known), especially if you can include things not already stated in your resume&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have a line that says "Here's my qualifications:" (optional, but I always do this because it's great to demonstrate that you meet most if not all the qualifications)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; If at this point, you realize that you've only got 40% of the qualifications for the role, then it's unlikely you'll get the interview. Your chances for successfully getting the interview go way up after if you've hit the threshold of at least 70% of the qualifications. Demonstrating an interest to learn the remaining 30% is typically enough to get your foot in the door.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Share 5-10 bullets after that colon that goes line by line down the job description and tells them your passion for learning something, the number of years experience that you have with it, or detailed explanation of how you are qualified (again, optional, but I think it's helpful to tie things in here that aren't spelled out on your resume)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Say thank you with a salutation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; I've also literally stopped saying "Looking forward to talking with you soon". Instead, I have been referencing this article for months now, &lt;a href="https://www.grammarly.com/blog/i-look-forward-to-hearing-from-you/?utm_source=twitter_share&amp;amp;utm_medium=content"&gt;7 Clever Alternatives to “I Look Forward to Hearing from You”&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add a P.S. that says "I'd welcome an opportunity to talk about what you have in mind for filling this position at [company name]. If you wish to schedule a video interview, I'm free at 3 p.m. Central each weekday the next couple of weeks and please email me at [your email]." (optional thing again — get a feel of whether this is helpful for that company)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep it short and concise (cut out optional bits if too long)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Triple check for typos and grammar&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask a friend or family member to read it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the letter as a PDF to fix the formatting in place&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things I don't do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Continue to apply without at least researching the company&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not even trying to speak with someone about the company&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forget to validate that it's a real position, at a real company, and that it's still open (how deflating to work up a cover letter and the role is closed)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reference the wrong job title and/or job id (spell check can't fix that)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Misspell someone's name or the company's name — even worse using the same cover letter format and including the wrong person or company's name (guilty).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fail to demonstrate that you want the role with reasons&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fail to thank them&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have large blocks of text — few will want to read that so bullets help here&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forget to proofread&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use an unprofessional sounding or off brand email&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send a word document (Only send those to your 3rd party recruiter)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#hope-this-helps-you-i-offer-this-entirely-as-my-opinion-from-my-experience-and-im-open-to-others-thoughts-especially-hiring-managers-or-recruiters-please-leave-a-comment-with-your-feedback"&gt;
  &lt;/a&gt;
  Hope this helps you. I offer this entirely as my opinion from my experience, and I'm open to others thoughts, especially hiring managers or recruiters. Please leave a comment with your feedback.
&lt;/h4&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Death to Tribal Knowledge</title>
      <author>Tyler Hawkins</author>
      <pubDate>Tue, 04 Jan 2022 13:14:45 +0000</pubDate>
      <link>https://dev.to/thawkin3/death-to-tribal-knowledge-d39</link>
      <guid>https://dev.to/thawkin3/death-to-tribal-knowledge-d39</guid>
      <description>&lt;p&gt;Documentation is a struggle for nearly every company. When information is undocumented, it remains as “tribal knowledge,” information that someone new to the company must ask others about in order to learn. This may work fine for a time, but what happens when those with the knowledge are unavailable? Or worse, what happens when those people leave the company? The knowledge leaves with them.&lt;/p&gt;

&lt;p&gt;Ridding your company of tribal knowledge is difficult in practice, but it can be done in three simple steps. First, document the information. Second, make sure people know where to find it. Third, make sure the documentation stays up to date.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-things-documented"&gt;
  &lt;/a&gt;
  Getting Things Documented
&lt;/h2&gt;

&lt;p&gt;Getting started may feel daunting, so the best thing to do is to just start writing something. Ask yourself what you wish you knew when you started at your company. Or better yet, ask a new hire what they are still struggling to understand or find answers to.&lt;/p&gt;

&lt;p&gt;For software engineers, the following topics may be worth documenting:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How do we run our app locally?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What does our release process look like? Are there various environments the code gets promoted to? Do we follow CI/CD best practices? How often does code get deployed to production?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What branching strategy do we use?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What does the code review process look like? Do we have a set of guidelines we all agree to follow?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What version control system do we use?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What browsers and environments do we support?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What does our QA process look like? Do we have dedicated QA engineers, or are software engineers expected to QA their own code?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What browsers or environments do we support? Is our app mobile responsive? Is it a web app, a desktop app, a mobile app, a progressive web app (PWA), or some combination of all of the above?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are our test coverage standards?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is our app accessible? Do we comply with any part of the Web Content Accessibility Guidelines (WCAG)? What screen reader / browser combinations do we support?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do we translate content in our app? What internationalization or localization libraries do we use? Do we work with third-party vendors to translate our text?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do we track our work? Do we use Jira or Workfront or some other tool? Do we practice Scrum? How long is each sprint? How do we estimate our work? What does a story point represent?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What tools do we use for things like error monitoring, logging, or measuring application performance metrics? New Relic, Sentry, Datadog, Splunk, Sumo Logic, etc.?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What Slack channels should I join? Where do I go to ask certain questions?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How often do we hold 1on1s?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the best way to mark time off on shared calendars or submit PTO requests?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What are the core responsibilities of my team? What parts of the app do we own?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What does our app architecture look like?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Document all those things and you’ll be off to a great start! I’m sure you can think of other things that are specific to your organization that are worth documenting as well.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#spreading-the-word"&gt;
  &lt;/a&gt;
  Spreading the Word
&lt;/h2&gt;

&lt;p&gt;Once things are documented, it’s important that people know that the documentation exists and where to find the wiki pages. If people don’t know about the documentation or how to find it, the documentation may as well not exist.&lt;/p&gt;

&lt;p&gt;Keeping the documentation all in one place and making your content searchable is probably the most important problem to solve here. Ideally you should use a platform like Notion or Confluence that everyone in the company can access and contribute to.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keeping-it-fresh"&gt;
  &lt;/a&gt;
  Keeping it Fresh
&lt;/h2&gt;

&lt;p&gt;If you have existing documentation and people know about it, you’re doing great! The last hurdle to overcome is making sure that your documentation stays up to date.&lt;/p&gt;

&lt;p&gt;As time passes, processes change and wikis naturally get out of date. Stale documentation with misleading info is the worst, so finding a good way to keep track of existing documentation and showing ownership in updating it when things change is the problem to solve here.&lt;/p&gt;

&lt;p&gt;New hires in this instance are again one of the best resources you have. If a new hire is setting up their app locally and runs into issues when following the setup documentation, they should take the time to update the documentation with the correct steps. If your company is actively hiring, this ensures that fresh eyes will be following and improving the documentation every month.&lt;/p&gt;

&lt;p&gt;The same goes for every other current employee. Any time someone finds information in a wiki that is incorrect, they should do their due diligence and update the documentation. Ignoring the bad information won’t make things any easier for the next person who stumbles across the same page. But by taking a few minutes to correct any misinformation when it’s noticed, you make life so much easier for the next person.&lt;/p&gt;

&lt;p&gt;The struggle of keeping documentation up to date is more of a people problem than a technical one. Keeping information relevant and accurate requires discipline and a sense of ownership from everyone in the company.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Any time you encounter tribal knowledge, document it. Make sure people know about the documentation. Help create a culture of ownership where updating documentation is something everyone does consistently.&lt;/p&gt;

&lt;p&gt;Death to tribal knowledge!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>leadership</category>
    </item>
    <item>
      <title>5 reasons why I love coding challenges</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 04 Jan 2022 13:04:36 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/5-reasons-why-i-love-coding-challenges-277f</link>
      <guid>https://dev.to/dailydevtips1/5-reasons-why-i-love-coding-challenges-277f</guid>
      <description>&lt;p&gt;Unfortunately the &lt;a href="https://github.com/devadvent"&gt;DevAdventCalendar challenge&lt;/a&gt; by &lt;a href="https://twitter.com/themarcba"&gt;Marc Backes&lt;/a&gt; came to an end.&lt;/p&gt;

&lt;p&gt;I loved every day of this challenge and participated in &lt;a href="https://daily-dev-tips.com/tags/devadvent/"&gt;all of them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this closing article about this series, I'll give you my 5 reasons for loving these coding challenges.&lt;br&gt;
And hopefully, even spark you to try them out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-learn-by-doing"&gt;
  &lt;/a&gt;
  1. Learn by doing
&lt;/h2&gt;

&lt;p&gt;The cool part about coding challenges is you don't have to think about what you will be programming.&lt;br&gt;
Someone spent a lot of time thinking of a problem you will have to solve.&lt;/p&gt;

&lt;p&gt;This is an excellent way of doing since the correct answer (output) is already defined.&lt;br&gt;
It's up to you to learn by doing things until it works.&lt;/p&gt;

&lt;p&gt;When you contribute to open answered challenges, you might even get the chance to compare how you solved the challenge to how other people have done it.&lt;/p&gt;

&lt;p&gt;For me, this is a great way to learn about new concepts that I might not know of.&lt;br&gt;
Or specific methods that are better or faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-are-not-alone"&gt;
  &lt;/a&gt;
  2. You are not alone
&lt;/h2&gt;

&lt;p&gt;As briefly mentioned in point one, you are not doing this alone.&lt;/p&gt;

&lt;p&gt;Multiple people are trying to solve the challenge, and sometimes you might even get stuck, or hey, the challenge might be wrong.&lt;/p&gt;

&lt;p&gt;This is a great way to learn, meet and interact with other developers also trying to solve the challenge.&lt;/p&gt;

&lt;p&gt;I've met some fantastic new people through the DevAdventCalendar challenge, which is the real win for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-certain-things-you-might-not-think-of"&gt;
  &lt;/a&gt;
  3. Certain things you might not think of
&lt;/h2&gt;

&lt;p&gt;When you work as a dev, there might be things you will never touch but are really cool to know.&lt;/p&gt;

&lt;p&gt;For instance, when we used the &lt;a href="https://daily-dev-tips.com/posts/public-solving-linked-list-and-a-train/"&gt;Linked List&lt;/a&gt; for the coding challenge, I've personally never used them, so it's a great way to experience something new in a fun way.&lt;/p&gt;

&lt;p&gt;And to get back to point one and two, I got fantastic feedback on the article I wrote on how I could even improve my code even more.&lt;/p&gt;

&lt;p&gt;And you might get feedback from either the creator or by looking at how other people have solved a particular issue.&lt;/p&gt;

&lt;p&gt;This might give you ideas on how to solve it differently.&lt;br&gt;
You can even take some of these learnings and look at your existing code at work or your own products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-try-out-new-things"&gt;
  &lt;/a&gt;
  4. Try out new things
&lt;/h2&gt;

&lt;p&gt;Another reason to love these challenges is that you can pick one that is not your primary language.&lt;/p&gt;

&lt;p&gt;Let's say you are already a really good JavaScript dev but really want to dive into Python.&lt;/p&gt;

&lt;p&gt;It could be a really great experience to try out a Python coding challenge.&lt;/p&gt;

&lt;p&gt;It's a fun and great way to learn this new language by solving puzzles in a specific language.&lt;/p&gt;

&lt;p&gt;And like mentioned, you might receive feedback on how to do certain things differently in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-you-might-even-win"&gt;
  &lt;/a&gt;
  5. You might even win
&lt;/h2&gt;

&lt;p&gt;Don't tell everyone, but you might even win in some of these challenges.&lt;/p&gt;

&lt;p&gt;For example, the DevAdventCalendar had excellent prices (yes, I also contributed one).&lt;br&gt;
But also keep an eye out for other ones.&lt;/p&gt;

&lt;p&gt;It could be a great way to explore a coding puzzle while even winning some great swag, money, or courses.&lt;/p&gt;

&lt;p&gt;Besides this, some companies also use coding challenges to evaluate new people they might hire.&lt;br&gt;
So you might even be super prepared for your next interview, which makes it win you a job!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Coding challenges are a fantastic, fun, and great experience in the development ecosystem.&lt;/p&gt;

&lt;p&gt;I strongly suggest you try one out and see how you feel about it.&lt;/p&gt;

&lt;p&gt;Let me know if you have already participated in one and your experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>challenge</category>
    </item>
  </channel>
</rss>
