<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Vaccination Game (Canvas API)</title>
      <author>Claudio Bonfati</author>
      <pubDate>Tue, 22 Jun 2021 23:57:57 +0000</pubDate>
      <link>https://dev.to/claudiobonfati/the-vaccination-game-canvas-api-5b9j</link>
      <guid>https://dev.to/claudiobonfati/the-vaccination-game-canvas-api-5b9j</guid>
      <description>&lt;p&gt;Last year I've worked on a project where I had to develop a small game alongside other components. But recently I've decided to isolate this game as a single stand-alone project since it was a good way to share a bit about canvas development and possibly introduce someone that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article is intended to detail the development process of the game and some fundamentals of how to deal with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt; for similar projects.&lt;/p&gt;

&lt;p&gt;First things first, you can take a look at the &lt;a href="https://github.com/claudiobonfati/vaccination-game"&gt;GitHub Project ‚≠ê&lt;/a&gt; or just &lt;a href="https://claudiobonfati.github.io/vaccination-game/"&gt;play the game üéÆ&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before jumping into coding, we must have some things clear in mind, such as the concept of the game, the goal, how to win, and how to lose. If you have played it already, you've probably got it, but here is a quick overview:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The game consists of a population of 54 people separated in a grid system that keeps them apart from each other. As the game starts, 2 random people are infected by a disease. Infected people tend to infect the nearby population by randomly choosing what neighbors they will try to infect and at what speed the disease will reach them. By clicking at the healthy person we can vaccinate them, allowing them to become immune to the disease. The goal is to trap the disease right at the start, preventing it to spread further through the population and then vaccinate all remaining healthy people. I also added a timer of 30 seconds to make things a little bit more interesting.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's start by setting up our Canvas environment. For this project, I've chosed the framework &lt;a href="https://nuxtjs.org/"&gt;NuxtJS&lt;/a&gt; to work with &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; to handle all the interface interactions and also the engine responsible to create the triggers we will be needing later. After this quick introduction, let's start!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#global-wrapper"&gt;
  &lt;/a&gt;
  Global wrapper
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZx6zov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ubjjjpvbbdxykf6yqlh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JZx6zov--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ubjjjpvbbdxykf6yqlh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing - and the most obvious one - is to "create a NuxtJS project". I set it up with nothing different from a simple project, with an index page, global style, and a single component called "Game" to manage all functionalities and interactions.&lt;/p&gt;

&lt;p&gt;But one thing is important to highlight here. The Game component will handle the &lt;em&gt;interactions&lt;/em&gt; with VueJS, but all &lt;em&gt;behaviors&lt;/em&gt; of the game will be set up directly with Canvas API and a javascript Class we will also be creating later. Remember these two terms, the difference between them will get clear as we talk more about canvas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#markup-structure"&gt;
  &lt;/a&gt;
  Markup structure
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zz7V8NjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npffq6vtriq0283wgnr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zz7V8NjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npffq6vtriq0283wgnr9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All HTML needed was created and styled at the Game component. But again, one thing is an important note here. Our game must have some "sections", which are the steps where the player will be. If we take a look that the player's journey, it starts at a &lt;em&gt;welcome page&lt;/em&gt;, then the &lt;em&gt;game&lt;/em&gt; starts and after the timer goes out (or the player vaccinate all the population), it has two possible endings, they will &lt;em&gt;win&lt;/em&gt;, or &lt;em&gt;lose&lt;/em&gt;. These steps are what we called "sections" here.&lt;/p&gt;

&lt;p&gt;To manage these sections, I chosen the &lt;a href="https://greensock.com/gsap/"&gt;GreenSock&lt;/a&gt; javascript library to handle activating (showing) and deactivating (hiding) each section whenever we need it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#things-start-to-get-interesting"&gt;
  &lt;/a&gt;
  Things start to get interesting
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9c-HA-AH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgjm5skgyn4tlzrbezi2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9c-HA-AH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgjm5skgyn4tlzrbezi2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our environment properly set up, we can start talking about the game itself. In a simplistic overview, to work with Canvas we need two main things: a &lt;em&gt;canvas HTML tag&lt;/em&gt; and a &lt;em&gt;javascript function&lt;/em&gt; that will be pointed as our &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; handler, that will create a 2D context allowing us to draw some shapes onto the canvas. And what does this &lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; function do exactly?!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"&lt;strong&gt;requestAnimationFrame()&lt;/strong&gt; is the method from Web API that tells the browser that you wish to perform an animation and requests that the browser calls a specified function to update an animation [...]"&lt;/em&gt; _ by &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame"&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now a non-technical explanation: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"It calls a function over and over again for literally every single frame, and this function will draw an updated image onto the canvas with minor differences from the previous frame, simulating the idea of movement."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's do this at our Game component. We create a canvas HTML tag and a VueJS method called &lt;strong&gt;animate()&lt;/strong&gt;, and the first thing this method does is to "request-animation-frame" pointing itself as the argument so this function can be called for every frame.&lt;/p&gt;

&lt;p&gt;This is the initial setup for all canvas development. From now on we can start looking at our project specifically, but all the concepts that will be detailed here can be applied to different scenarios.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#population-grid"&gt;
  &lt;/a&gt;
  Population grid
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJaDPbyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyf4jlwysk419vn721dk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJaDPbyW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyf4jlwysk419vn721dk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you may have noticed, we will need to create a grid to display the population, with lines and columns. At this point, we need to start talking about the basics of what we can draw on a canvas.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;draw()&lt;/strong&gt; function that we talked about earlier receive as the first argument a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes"&gt;rendering context&lt;/a&gt;, this context is an object with properties and methods that you can use to render graphics inside the canvas element, such as Lines (that can be curved or straight) and Circles. For our game, these are the only two shapes we will be using - since the game is &lt;em&gt;a bunch of lines and circles&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We already have the canvas width and the height values that we used to style it. But now, to create a grid system, we just need to use the power of math to get the starting-point and the ending-point for each line and column. These points are specified as coordinates related to the top side (X-axis) and left side (Y-axis) of the canvas, and that's the part where we start looking at the canvas as a Cartesian Coordinate System that will guide us throughout the next steps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-person"&gt;
  &lt;/a&gt;
  Create a person
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbKQgyYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j0nk19u3t40w01x2zyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbKQgyYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3j0nk19u3t40w01x2zyq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the most interesting parts. As we already defined as the game scope, every person has a predefined (and identical) way to behave and interact with each other, but here is a reminder:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"[...] Infected people tend to infect the nearby population by randomly choosing what neighbors they will try to infect and at what speed the disease will reach them. [...]"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we have a situation like this, the best decision to make is to deal with Classes - where a single structure can have multiple instances.&lt;/p&gt;

&lt;p&gt;Now we can create a javascript class named "Person" in a separated javascript file that will be imported into the Game component. Initially, the class must have at least two things, a &lt;strong&gt;constructor()&lt;/strong&gt;, and a &lt;strong&gt;draw()&lt;/strong&gt; method. The constructor will receive the initial values for each variable the person will need, such as coordinates where it will be placed at the canvas, the current state ("healthy", "infected" or "vaccinated"), what neighbors it will spread the disease when and if infected, the spreading speed, and so on...&lt;/p&gt;

&lt;p&gt;At this &lt;strong&gt;draw()&lt;/strong&gt; method we must create the shapes that will form the face, and this "face" consists of three simple elements (the head, left eye, right eye, and mouth). And since we received the center coordinates for the person at the &lt;strong&gt;constructor()&lt;/strong&gt;, we can again use the power of math to draw all three elements and place them related to this center point.&lt;/p&gt;

&lt;p&gt;It's important to detail here that some aspects of the face will vary based on the person's state property, like the color that will be &lt;em&gt;blue&lt;/em&gt; for healthy people, &lt;em&gt;red&lt;/em&gt; for infected people, and &lt;em&gt;yellow&lt;/em&gt; for the vaccinated ones.&lt;/p&gt;

&lt;p&gt;For now, we must also have in mind that all the population will be instantiated from the Game component, once we have a basic structure for it to work. In fact, thats exactly the next step...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#populate-grid-with-54-people"&gt;
  &lt;/a&gt;
  Populate grid with 54 people
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvKR95SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fphhqgqu4w2hw7vma1b5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvKR95SF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fphhqgqu4w2hw7vma1b5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that the Person class has a simple structure, we can instantiate the population at the Game component. This process will take a bit to finish since this is the moment we need to define no only the center coordinates for each person, but also randomly define the directions it's going to infect its neighbors and randomly define the spreading speed for each "disease arm". &lt;/p&gt;

&lt;p&gt;For this logic to be simulated with javascript, we can use &lt;strong&gt;Math.random()&lt;/strong&gt; method to create a random value from 0 to 1 and pass this value to the Person class.&lt;/p&gt;

&lt;p&gt;There is also one thing that must be clear here. If you recall one detail of the game scope, each person will be able to infect their neighbors by trying to infect them once the disease has reached them. The mechanic behind it is simple: "if the disease arm reaches the neighbor, and it's not vaccinated yet, the neighbor will turn into an infected individual". To create this logic, two things will be needed: the first is that at the Person class we will create a function able to try to infect the current person, and the second thing is that for each person of the population we will need to store the instances of its surrounding neighbors so we can trigger this &lt;strong&gt;tryToInfect()&lt;/strong&gt; method once the disease reaches them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#disease-spreading"&gt;
  &lt;/a&gt;
  Disease spreading
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoPVu5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo8u8r53sxxwdiiokcsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSoPVu5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo8u8r53sxxwdiiokcsl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mathematics starts to have a bigger role here. If you ever thought that you would never use the Pythagorean Theorem in your life, I'll try to convince you otherwise. Looking to a single person, they can try to infect their neighbors in 8 different directions (&lt;em&gt;top&lt;/em&gt;, &lt;em&gt;top-right&lt;/em&gt;, &lt;em&gt;right&lt;/em&gt;, &lt;em&gt;bottom-right&lt;/em&gt;, &lt;em&gt;bottom&lt;/em&gt;, &lt;em&gt;bottom-left&lt;/em&gt;, &lt;em&gt;left&lt;/em&gt;, &lt;em&gt;top-left&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;This article wont turn into an Algebra class, but if you think about it for long enough you will start to see some triangles being formed to define all the 8 arms of the disease related to the center of the face and two close neighbors. The principle that needs to be mentioned is that for each one of these arms we must have stored all the way-points between the center and neighbor's edge in an array so we can control the arm movement and its speed until it reaches the neighbor and try to infect them. And to accomplish that, there isn't much we can do besides applying some algebra formulas to get and store the values.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deliver-the-vaccine-to-the-population"&gt;
  &lt;/a&gt;
  Deliver the vaccine to the population
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--si7GyJza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e58zaub48tgexwaxz5i2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--si7GyJza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e58zaub48tgexwaxz5i2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now it's time to create the &lt;em&gt;interaction&lt;/em&gt; that will wait for the player to click/tap at some person, and the &lt;em&gt;behavior&lt;/em&gt; to apply the vaccine that will be triggered with this &lt;em&gt;interaction&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;First I created a method at the Person class called &lt;strong&gt;applyVaccine()&lt;/strong&gt;. The idea behind it is also simple: "if the person is not 'infected', change its state to 'vaccinated'".&lt;/p&gt;

&lt;p&gt;After creating this method we can create the event listener to wait for the player's interaction to trigger the &lt;strong&gt;applyVaccine()&lt;/strong&gt; method. The trigger can be built receiving the coordinates from the mouse position related to the canvas element, and these coordinates must be compared with the existing center point from every person instantiated. And if the difference between these two points is smaller than the radio of the head circle, the player clicked at a person.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sound-effects-and-scoreboard"&gt;
  &lt;/a&gt;
  Sound Effects and Scoreboard
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVlb_CpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht8wm7y8d90rz69w7glu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVlb_CpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ht8wm7y8d90rz69w7glu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are getting to the end. Now we reached a point where the "soul of the game" is already created, the main &lt;em&gt;interactions&lt;/em&gt; (witch are the functions we've defined at the Game component) and &lt;em&gt;behaviors&lt;/em&gt; (which are the methods created at the Person class), we can focus some effort at the smaller things, such as the scoreboard, the timer, and sound effect management.&lt;/p&gt;

&lt;p&gt;We stored all instances of the Person class, and with this list we can easily retrieve the current state of each one of them, calculate its percentage, and display it on the Scoreboard. It's always important to remember that for all functions that we want to run for each frame, it must be executed at the &lt;strong&gt;animate()&lt;/strong&gt; method, and with the Scoreboard update, it's no different.&lt;/p&gt;

&lt;p&gt;Sounds effects can be easily implemented using &lt;a href="https://www.npmjs.com/package/howler"&gt;Howler.js&lt;/a&gt;, an awesome library able to manage mp3 files in a reliable way across all platforms. It works in a similar way as &lt;a href="https://greensock.com/gsap/"&gt;GreenSock&lt;/a&gt;, we instantiate the audios, and play/pause/restart them whenever it's needed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Working with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API"&gt;Canvas API&lt;/a&gt; usually requires more than we initially think, but between all the math, rules, and exceptions we create, the logic of the game can be found as a simple and straightforward storyline, just like it was described at the beginning of this post.&lt;/p&gt;

&lt;p&gt;As it was mentioned before, I created this game in particular as a stand-alone project with the idea to introduce new developers to canvas development. Trying to accomplish that, the &lt;a href="https://github.com/claudiobonfati/vaccination-game"&gt;‚≠ê GitHub Project ‚≠ê&lt;/a&gt; is full of comments for every function, method, code block, and property that needs guidance describing what it does. With these comments, the whole story I told here can also be found in javascript language right there.&lt;/p&gt;

&lt;p&gt;When looking for the final project I wouldn't say it was easy to develop, there were a ton of problems along the way, crashes, conflicts, things that I initially had no idea how to fix, but as I said at an old article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Start from the basics, recognize how the next step looks like, and work on it. Problems are inevitable and that's what makes each project unique in some way, and winning these small battles is one of the things that motivate us to go to the next one."&lt;/em&gt; _ from &lt;a href="https://dev.to/claudiobonfati/what-if-linkedin-was-beautiful-23go"&gt;What if LinkedIn was beautiful?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's all, everyone. If you made this far, congratulations, and thank you for reading. And also, feel free to &lt;a href="https://www.linkedin.com/in/claudiobonfati/"&gt;connect with me&lt;/a&gt; on LinkedIn.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>vue</category>
      <category>showdev</category>
    </item>
    <item>
      <title>The History Of JavaScript ‚åõ</title>
      <author>Victor Ikechukwu</author>
      <pubDate>Tue, 22 Jun 2021 23:35:48 +0000</pubDate>
      <link>https://dev.to/mr_victor/the-history-of-javascript-1fp3</link>
      <guid>https://dev.to/mr_victor/the-history-of-javascript-1fp3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nowadays JavaScript is everywhere üåç&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hello üëã, Beautiful Coders on the internet üòÉ. In this article, I would share with you a quick yet comprehensive overview of how the most popular and widely used programming language in the world evolved to be what it is today.&lt;/p&gt;

&lt;p&gt;Over the years JavaScript has become the most popular and versatile programming language. Powering over 97% of the web. As a web developer knowing the history of the most popular and in-demand programming language is a plus that will help enhance your understanding of the language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1995-the-birth-of-javascript"&gt;
  &lt;/a&gt;
  1995: The Birth of JavaScript
&lt;/h3&gt;

&lt;p&gt;Back in May 1995, the internet was becoming popular. The web back then was just static pages that were often text-heavy and ugly üòå.&lt;/p&gt;

&lt;p&gt;the best ones had images floated to the left or right. Not exciting when you compare it to the web today ü§î&lt;/p&gt;

&lt;p&gt;The Web needed to be more dynamic. Animations, interactions, and other forms of small automation needed to be the future of the web. To achieve that future the web needed a scripting programming language that ran in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Brendan_Eich"&gt;Brendan Eich&lt;/a&gt; a programmer at Netscape was given the job to make this possible and in just ten days he created the JavaScript programming language (originally called Mocha during its development and then changed to LiveScript )&lt;/p&gt;

&lt;p&gt;On December 4, 1995, the internet saw the first release of the JavaScript programming language&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1996-javascript-vs-java"&gt;
  &lt;/a&gt;
  1996: JavaScript vs. Java
&lt;/h3&gt;

&lt;p&gt;Shortly after its release its name was changed from LiveScript to JavaScript. Many say the reason for the change was to attract developers of another buzzed programming language that was very popular at the time. Which was Java.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The "Java" in JavaScript was just for marketing reasons only üí°.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because the language itself JavaScript has nothing to do with Java! ‚òù&lt;/p&gt;

&lt;p&gt;Java is a statically typed, compiled programming language, on the other hand. (vanilla) JavaScript is dynamically typed, and interpreted at run-time. check this &lt;a href="a%0Ahref=%22https://www.javatpoint.com/difference-between-java-and-javascript%22"&gt;article &lt;/a&gt;for more concise details on the differences btw Java and JavaScript&lt;/p&gt;

&lt;p&gt;Many beginners intertwine the two languages as one üëÄ. But no. JavaScript and Java are actually two complete different programming languages&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1997-ecmascript-is-born-as-the-javascript-standard"&gt;
  &lt;/a&gt;
  1997: ECMAScript Is Born As The JavaScript Standard
&lt;/h3&gt;

&lt;p&gt;A year later, in 1997. JavaScript had experienced rapid growth as many developers adopted the language and more browsers started adding JavaScript support. It became clear that the language would need to be properly maintained and managed. Therefore Netscape and the developers of the language submitted the JavaScript programming language to the standards organization &lt;a href="a%0Ahref=%22https://www.ecma-international.org%22"&gt;European Computer Manufacturers Associate (ECMA) International&lt;/a&gt; a Swiss organization to define international standards for computing. For consideration as the industry standard.&lt;/p&gt;

&lt;p&gt;a technical committee at EMCA known as &lt;a href="https://tc39.es/"&gt;TC39&lt;/a&gt; is the organization behind the standardization of the ECMAScript (JavaScript) specification. The TC39 committee is a group of JavaScript developers, implementers, academics, and more from different companies including Google, Microsoft, Netflix, Facebook, and Paypal. Their job is for creating, approving, and denying language features, to maintain and evolve the definition of JavaScript&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W98VDkng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622409106667/8TVDyA-uh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W98VDkng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622409106667/8TVDyA-uh.jpeg" alt="tc39.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;with that, the first standard version of the JavaScript language that was supported across all browsers ~ ECMAScript 1 or commonly known as ES1 was released&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2009-es5"&gt;
  &lt;/a&gt;
  2009: ES5
&lt;/h3&gt;

&lt;p&gt;In 2009 the JavaScript version ES5 (ECMAScript 5) was released with a lot of new major features like JSON support, Getters &amp;amp; Setters on Objects, new array methods like forEach and map that were not yet wildly supported among different browsers. as a result, it took some years for browsers to support these features.  &lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#as-a-web-developer-you-must-understand-es5-why"&gt;
  &lt;/a&gt;
  As a Web developer, you must understand ES5, why? üëá
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;ES5 is the standard version of JavaScript Programming, as it is fully supported in all major browsers i.e internet explorer.&lt;/li&gt;
&lt;li&gt;Many &lt;code&gt;(old)&lt;/code&gt; codebases are still written in ES5.&lt;/li&gt;
&lt;li&gt;it's better and easier to learn the fundamentals in ES5, and then update to ES6 and ESNext.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2015-anticipated-update-of-the-year-es6es2015"&gt;
  &lt;/a&gt;
  2015: Anticipated Update of the year ~ ES6/ES2015
&lt;/h3&gt;

&lt;p&gt;In June 2015, the much-awaited and anticipated version of the language üòÑ &lt;strong&gt;ES6&lt;/strong&gt; was released &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_FLjluq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622406530419/od92Nllw-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_FLjluq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622406530419/od92Nllw-.gif" alt="Its Like The Album Of The Year&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Which was &lt;strong&gt;the biggest update to the language ever!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ES6 brought new syntax and awesome features to make your code more modern and readable. It allows you to write less code and do more. ES6 introduces many great features like arrow functions, template literals, classes, destructing, Modules‚Ä¶ and more.&lt;/p&gt;

&lt;p&gt;This was(is) a really big deal for the whole JavaScript community.&lt;/p&gt;

&lt;p&gt;Ever since the major 2015 ES6 release, The TC39 committee changed to an annual release cycle. This means a new version of JavaScript with just a few new features is released every year. Instead of shipping a huge new version, with a ton of features every couple of years üòî.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-esnext"&gt;
  &lt;/a&gt;
  What‚Äôs next? ESNext
&lt;/h3&gt;

&lt;p&gt;ESNext is the name that indicates the next version of JavaScript(ECMAScript) that is to be released.&lt;/p&gt;

&lt;p&gt;As of the time of writing, the current ECMAScript version is ES2020(ES11). It was released in June 2020.&lt;/p&gt;

&lt;p&gt;It is usually common for JavaScript editions to be standardized during the summer, so we can expect ECMAScript 2021(ES12) to be released this summer üòâ.&lt;/p&gt;

&lt;p&gt;At the time of writing, ES2020(ES11) has been released, and ESNext is ES2021(ES12)&lt;/p&gt;

&lt;p&gt;Proposals to the ECMAScript standard are organized in stages. Stages 1‚Äì3 are an incubator of new features, and features reaching Stage 4 are finalized as part of the new standard.&lt;/p&gt;

&lt;p&gt;At the time of writing we have several features at Stage 4. The latest versions of the major browsers should already implement most of those.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-javascript"&gt;
  &lt;/a&gt;
  Types of JavaScript
&lt;/h3&gt;

&lt;p&gt;In the industry, you often hear terms like vanilla or plain JavaScript. It‚Äôs just how developers refer to JavaScript without any frameworks or libraries. We know that ECMAScript 2015 or ES6 is the standard version of vanilla JavaScript. But JavaScript also comes in other forms for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJwLfUzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375885446/SekpW5ffc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJwLfUzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375885446/SekpW5ffc.jpeg" alt="typescript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt; was created by Microsoft, it‚Äôs a strict syntactical superset of JavaScript, and adds optional static typing to the language. The browser cannot understand a file written in Typescript so it needs to be compiled into standard JavaScript code so it can run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W8IVWJ8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375963331/UrFuFEGNE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8IVWJ8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375963331/UrFuFEGNE.jpeg" alt="coffee-script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; adds syntax sugar to JavaScript that makes it in an effort to enhance JavaScript‚Äôs brevity and readability. Its also not understood by rowsers and needs complied into standard JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrrNwGgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375998748/fyE6bnpzV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrrNwGgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622375998748/fyE6bnpzV.jpeg" alt="dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dart.dev/"&gt;Dart&lt;/a&gt; is an object-orientated JavaScript language made by Google. Dart is used to create highly complex and easily scalable apps for the web, mobiles. Dart has been approved by ECMA like vanilla JavaScript. Dart uses a different syntax than vanilla JavaScript but it can be translated into vanilla so it can be used in a browser. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mcpJNg3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376024282/WdbHQrOJB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mcpJNg3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376024282/WdbHQrOJB.png" alt="nodejs"&gt;&lt;/a&gt;&lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt; is a cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser. Node.js lets developers use JavaScript to write command-line tools and for server-side scripting‚Äîrunning scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtF91cVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376049961/pC3xXets4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtF91cVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376049961/pC3xXets4.png" alt="reactjs"&gt;&lt;/a&gt;&lt;a href="https://reactjs.org%0A"&gt;React&lt;/a&gt; is a JavaScript front-end library for building user interfaces or UI components. It is maintained by Facebook and a community of individual developers and companies. React is mainly used as a base in the development of single-page or mobile applications. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxniWmCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376070383/zpP12xsUy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxniWmCs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622376070383/zpP12xsUy.jpeg" alt="jquery"&gt;&lt;/a&gt;&lt;a href="https://jquery.com/"&gt;Jquery&lt;/a&gt; was made to simplify JavaScript making it easier to learn. It takes a lot of common JavaScript tasks that need lots of code to write in vanilla and wrap them into a single line. The Jquery contains features like DOM traversal and manipulation, event handling, Animation, and even Ajax. Jquery doesn‚Äôt need to be compiled and will run in all major browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-is-javascript-today"&gt;
  &lt;/a&gt;
  Where is JavaScript Today
&lt;/h3&gt;

&lt;p&gt;Although the origins of JavaScript started in the web browser, it has now evolved beyond that to become a multi-platform language. Supporting all major paradigms of programming.  &lt;/p&gt;

&lt;p&gt;The most common place you‚Äôll encounter JavaScript is on the web. Developers now use JavaScript to make websites more engaging with things like 3D graphics, animations, transitions, and more. It‚Äôs also possible to build native mobile apps that run both on iOS and Android using JavaScript.&lt;/p&gt;

&lt;p&gt;frameworks like React &amp;amp; Ionic. You can even find JavaScript in Desktop applications like the text editor Visual Studio Code üòè and popular messaging apps like Slack. It can be used to control hardware with IoT devices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;I hope this article helped you. Now you have a nice overview of the history/ evolution of the most popular programming language of the web.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a topic that could come up in an interview ü§∑‚Äç‚ôÇÔ∏è, so yeah it's worth knowing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you would like to chat or have any questions, drop them in the comments I‚Äôm always happy to talk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope you learned something new from this, Thanks so much for reading!! ‚ù§ And keep on coding! üë®‚Äçüíª.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enjoyed reading this as much as i enjoyed writing it for you? üòç&lt;/strong&gt;. support me with a coffee üòÉ&lt;a href="https://www.buymeacoffee.com/molipa"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJz-zci7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520Coffee%2520%25E2%2598%2595%2520%26emoji%3D%25F0%259F%258D%25A6%26slug%3Dmolipa%26button_colour%3D40DCA5%26font_colour%3Dffffff%26font_family%3DComic%26outline_colour%3D000000%26coffee_colour%3DFFDD00" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VectorIkechukwu"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOwp8amL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-Follow%2520me%2520on%2520Twitter-1877F2%3Fstyle%3Dflat%26logo%3DTwitter%26logoColor%3Dwhite" alt="Follow me on Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>developers</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Selection sort algorithm </title>
      <author>Aya Bouchiha</author>
      <pubDate>Tue, 22 Jun 2021 23:21:37 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/selection-sort-algorithm-5ke</link>
      <guid>https://dev.to/ayabouchiha/selection-sort-algorithm-5ke</guid>
      <description>&lt;h2&gt;
  &lt;a href="#definition-of-selection-sort"&gt;
  &lt;/a&gt;
  Definition of selection sort
&lt;/h2&gt;

&lt;p&gt;Selection sort is one of the simplest sorting algorithms, it works by continually finding the minimum number in the array and inserting it at the beginning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-and-time-complexity"&gt;
  &lt;/a&gt;
  Space and Time complexity
&lt;/h2&gt;

&lt;p&gt;The time complexity of selection sort is &lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt; and it's space complexity is &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selection-sort-algorithm"&gt;
  &lt;/a&gt;
  Selection sort algorithm
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;itertate from 0 to len(arr) - 1 &lt;/li&gt;
&lt;li&gt;seting to minimunIdx variable the first element index in the unsorted part &lt;/li&gt;
&lt;li&gt;loop trough the unsorted part&lt;/li&gt;
&lt;li&gt;if arr[j] &amp;lt; arr[minimumIdx]  =&amp;gt; minimumIdx = j&lt;/li&gt;
&lt;li&gt;swaping arr[minimumIdx] with the first in the unsorted part (unsortedPart[0])&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-selection-sort-using-python"&gt;
  &lt;/a&gt;
  Implementation of selection sort using python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;selectionSortAlgorithm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
        [ name ] =&amp;gt; Selecion sort
        [ type ] =&amp;gt; Sorting algorithms
        [ time complexity ] =&amp;gt; O(n^2)
        [ space complexity ] =&amp;gt; O(1)
        [ params ] =&amp;gt; ( arr {list} array to sort )
        [ return ] =&amp;gt; sorted list
        [ logic ]  =&amp;gt; (
                1. itertate from 0 to len(arr) - 1 
                2. seting to minimunIdx variable the first element index in the unsorted part 
                3. loop trough the unsorted part
                4. if arr[j] &amp;lt; arr[minimumIdx]  =&amp;gt; minimumIdx = j
                5. swaping arr[minimumIdx] with the first in the unsorted part (unsortedPart[0])
        )
    """&lt;/span&gt;
    &lt;span class="c1"&gt;# itertate from 0 to len(arr) - 1 
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="c1"&gt;# setting to minimunIdx variable the first element index in the unsorted part
&lt;/span&gt;        &lt;span class="n"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="c1"&gt;# loop trough the unsorted part
&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="c1"&gt;# if arr[j] &amp;lt; currentMinimum (arr[minIdx])
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="c1"&gt;# minIdx will be the index of the new minimum
&lt;/span&gt;                &lt;span class="n"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
        &lt;span class="c1"&gt;# swaping the minimum with the first element in the unsorted part
&lt;/span&gt;        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation-of-selection-sort-using-javascript"&gt;
  &lt;/a&gt;
  Implementation of selection sort using javascript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * sort an array using selection sort algorithm
 * time complexity : O(n^2)
 * space complexity : O(1)
 * @param {Array} arr  array to sort
 * @returns {Array} sorted array
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SelectionSortAlgorithm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// iterate from 0 to arr.length - 1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//  setting to minimunIdx variable the first element index in the unsorted part&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//  loop trough the unsorted part&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//  if arr[j] &amp;lt; currentMinimum (arr[minIdx])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// minIdx will be the index of the new minimum&lt;/span&gt;
                &lt;span class="nx"&gt;minIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// swaping the minimum with the first element in the unsorted part&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;minIdx&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exercise"&gt;
  &lt;/a&gt;
  Exercise
&lt;/h2&gt;

&lt;p&gt;sort an array in descending order using the selection sort algorithm&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/python-program-for-selection-sort/"&gt;https://www.geeksforgeeks.org/python-program-for-selection-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.programiz.com/dsa/selection-sort"&gt;https://www.programiz.com/dsa/selection-sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/22898928/selection-sort-in-javascript"&gt;https://stackoverflow.com/questions/22898928/selection-sort-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=EnodMqJuQEo"&gt;https://www.youtube.com/watch?v=EnodMqJuQEo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/selection-sort/"&gt;https://www.geeksforgeeks.org/selection-sort/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xWBP4lzkoyM"&gt;https://www.youtube.com/watch?v=xWBP4lzkoyM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a good day :)&lt;br&gt;
#day_9&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>Not Another Gradient Generator</title>
      <author>Nathaniel</author>
      <pubDate>Tue, 22 Jun 2021 22:27:14 +0000</pubDate>
      <link>https://dev.to/shadowfaxrodeo/not-another-gradient-generator-2mhl</link>
      <guid>https://dev.to/shadowfaxrodeo/not-another-gradient-generator-2mhl</guid>
      <description>&lt;p&gt;The web is full of gradient generators. So I thought I'd make another one: &lt;a href="https://doodad.dev/gradient-generator/"&gt;Not Another Gradient Generator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has some novel features though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generates linear, radial, and &lt;strong&gt;conic&lt;/strong&gt; gradients.&lt;/li&gt;
&lt;li&gt;Allows you to layer gradients to make complex designs.&lt;/li&gt;
&lt;li&gt;Automatically adds colors to prevent gradients looking washed out.&lt;/li&gt;
&lt;li&gt;Exports gradients as CSS, SVG, PNG, and JPEG.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#layered-gradients"&gt;
  &lt;/a&gt;
  Layered Gradients
&lt;/h2&gt;

&lt;p&gt;I started this project with the goal of being able to replicate the instagram logo gradient in CSS. The instagram logo isn't a simple &lt;code&gt;linear&lt;/code&gt; or &lt;code&gt;radial&lt;/code&gt; gradient. It's complex and made by clever graphic designers using expensive software.&lt;/p&gt;

&lt;p&gt;But CSS allows us to layer gradients on top of each other, by combining radial and linear gradients you can approximate the same thing:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8UmNwES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24vtmk35oie7sg05xa0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8UmNwES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24vtmk35oie7sg05xa0p.png" alt="Instagram logo gradient but all washed out"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This almost looks like it, the main issue is that it's all washed out. The colors become less saturated in the middle of the gradient.&lt;/p&gt;

&lt;p&gt;To solve this problem I wrote some code that adds higher saturated colors to fill in the gray-ish bits, and the results were much better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_AknjmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hvjao5y5gew1izojahv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_AknjmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hvjao5y5gew1izojahv.png" alt="Instagram logo gradient in CSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's how it works‚Ä¶&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hsluv-color-interpolation-magic"&gt;
  &lt;/a&gt;
  HSLuv color interpolation magic
&lt;/h2&gt;

&lt;p&gt;CSS and SVG color gradients tend to go gray in the middle where the colors converge. This is because they use the RGB color space. &lt;/p&gt;

&lt;p&gt;Imagine you have a color gradient going from &lt;code&gt;yellow&lt;/code&gt; to &lt;code&gt;blue&lt;/code&gt;. &lt;code&gt;rgb(255, 255, 0) to rgb(0, 0, 255)&lt;/code&gt;. CSS and SVG will interpolate the R, G, and B values seperately. So the middle value of &lt;code&gt;yellow&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt; becomes &lt;code&gt;rgb(128, 128, 128)&lt;/code&gt; which is &lt;code&gt;gray&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oW02NOkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f6okl13uzya5oewhyu8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oW02NOkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f6okl13uzya5oewhyu8.png" alt="Gradient going yellow to blue with gray in the middle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But we know that the middle color of yellow and blue is green. So, to fix that Not Another Gradient Generator converts the colors to HSLuv and more human-friendly color space. Then it adds intermediary colors and converts it back to RGB for use on the interwebs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ekWJzjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cgpxzvnqkfwikcj5tvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ekWJzjH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cgpxzvnqkfwikcj5tvb.png" alt="Gradient going from yellow to blue with green in the middle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's the gist of it.&lt;/strong&gt; I hope you enjoy it, I'll leave you with some other gradients I've created using it:&lt;/p&gt;

&lt;p&gt;Lens Flare (you can add this on top of images)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGT8y_Fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7e3iwapsa7u0cw666as.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGT8y_Fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b7e3iwapsa7u0cw666as.png" alt="Lens flare created with CSS gradients"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This horrible thing that makes me think of old DVD adverts for some reason:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kkl2F8B0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbnz8yvvplzbd6kxp459.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kkl2F8B0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbnz8yvvplzbd6kxp459.png" alt="horrible mess made with css gradients"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one that I dithered using another one of my tools: &lt;a href="https://doodad.dev/dither-me-this/"&gt;dither me this&lt;/a&gt;. Sort of interesting...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVYWBd2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pu60mfzlwcfxuf76ngv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVYWBd2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pu60mfzlwcfxuf76ngv.png" alt="Dithered Gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all folks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1uHlYb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fru8iimazv2n42vo1blh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1uHlYb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fru8iimazv2n42vo1blh.png" alt="Warner Bros that's all folks background recreated with CSS gradients"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know what you think, and if you create a cool gradient, share a link with me in the comments, i'd love to see it.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
      <category>vue</category>
    </item>
    <item>
      <title>How to Create a Todo List with React and Sanity</title>
      <author>Joe Holmes</author>
      <pubDate>Tue, 22 Jun 2021 22:11:41 +0000</pubDate>
      <link>https://dev.to/joeholmes/how-to-create-a-todo-list-with-react-and-sanity-4dpg</link>
      <guid>https://dev.to/joeholmes/how-to-create-a-todo-list-with-react-and-sanity-4dpg</guid>
      <description>&lt;p&gt;Sanity is often described as a "headless CMS"‚Äîa content management system decoupled from its presentation, allowing a developer to create any kind of frontend they desire.&lt;/p&gt;

&lt;p&gt;But most "headless CMS" platforms are rather limited in what they can accomplish. They're usually designed to be blogs, e-commerce stores, or marketing pages‚Äîtry and do something more avant-garde and you may soon find yourself in the weeds.&lt;/p&gt;

&lt;p&gt;Not so with Sanity! With its thoughtful developer experience and lightning-fast APIs, Sanity can also compare favorably to "managed databases" such as &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; and &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt;. Systems like these are designed for more complex, technical applications that require user authentication and dynamically presented data. Sanity can hold its own here!&lt;/p&gt;

&lt;p&gt;Don't believe me? Let's build an app.&lt;/p&gt;

&lt;p&gt;We'll be coding a user authenticated to-do list app with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, &lt;a href="https://magic.link/"&gt;Magic.link&lt;/a&gt;, and Sanity on the backend.&lt;/p&gt;

&lt;p&gt;I've deployed a &lt;a href="https://next-magic-sanity-todo.vercel.app/"&gt;demo version&lt;/a&gt; if you want to check it out yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Intermediate knowledge of &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, including state, context and effect hooks&lt;/li&gt;
&lt;li&gt;Familiarity with &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; for styling&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.sanity.io/docs/cli"&gt;Sanity CLI&lt;/a&gt; installed&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://magic.link"&gt;Magic.link&lt;/a&gt; account created&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clone-starter"&gt;
  &lt;/a&gt;
  Clone starter
&lt;/h2&gt;

&lt;p&gt;I created a simple starter project so we wouldn't lose time writing boilerplate. You can clone it by navigating to your preferred directory and running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bathrobe/magic-next-sanity-todo-starter.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The starter comes with Tailwind CSS for styling and has a basic user authentication flow already implemented, so we won't need to dive into those challenging waters in this post. The auth code is all taken from a &lt;a href="https://vercel.com/blog/simple-auth-with-magic-link-and-nextjs"&gt;very helpful tutorial&lt;/a&gt; on Vercel's website, so consult that if you'd like to know the details.&lt;/p&gt;

&lt;p&gt;Let's first install our project's dependencies by running &lt;code&gt;cd magic-next-sanity-todo-starter&lt;/code&gt; and then &lt;code&gt;npm install&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;When that's done, create a &lt;code&gt;.env.local&lt;/code&gt; file at the root of your project. We'll add the keys one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#register-for-magiclink"&gt;
  &lt;/a&gt;
  Register for Magic.link
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://magic.link"&gt;Magic.link&lt;/a&gt; uses cutting-edge cryptography to take the headache out of user authentication, which is usually one of the most dreaded developer tasks. They utilize some cookie-based blockchain wizardry to remove the need for passwords or outside auth. You do &lt;em&gt;not&lt;/em&gt; need to understand how its innards work in order to use it. Just enjoy!&lt;/p&gt;

&lt;p&gt;Sign up for the free plan at &lt;a href="https://dashboard.magic.link/signup"&gt;https://dashboard.magic.link/signup&lt;/a&gt;. At the time of writing, you're permitted 100 users on the free plan, so it's perfect for our purposes.&lt;/p&gt;

&lt;p&gt;Get your public and secret test keys. You'll need an encryption secret too. You can go to this &lt;a href="https://www.allkeysgenerator.com/Random/Security-Encryption-Key-Generator.aspx"&gt;Encryption Key Generator&lt;/a&gt; and choose any option above 256 bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .env.local

NEXT_PUBLIC_MAGIC_PUB_KEY=pk_test_12345
MAGIC_SECRET_KEY=sk_test_12345
ENCRYPTION_SECRET=random_encryption_string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy-a-todo-schema-from-sanity"&gt;
  &lt;/a&gt;
  Deploy a todo schema from Sanity
&lt;/h2&gt;

&lt;p&gt;If you have not yet done so, remember to download the Sanity CLI. Open your terminal and enter the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @sanity/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't already have a studio you'd like to work with, run &lt;code&gt;sanity init&lt;/code&gt; from the command line and create a new one.&lt;/p&gt;

&lt;p&gt;The command line will ask you for the name of your studio and where you want to store the studio files. In this example I named it "your-studio" and installed it in the same folder where I stored the starter repo.&lt;/p&gt;

&lt;p&gt;When it asks you what schema you'd like to start with, choose the option to install a clean schema with no pre-existing data.&lt;/p&gt;

&lt;p&gt;Take note of what you named the dataset, as you'll add it to the &lt;code&gt;.env&lt;/code&gt; file later.&lt;/p&gt;

&lt;p&gt;Now we'll write a todo schema in our &lt;code&gt;schemas&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// your-studio/schemas/todo.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;document&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo Text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createdAt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Created at&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dueDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Due date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isCompleted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Is completed?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completedAt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Completed At&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userEmail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User Email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the schema to your &lt;code&gt;schema.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// your-studio/schemas/schema.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createSchema&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;part:@sanity/base/schema-creator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;schemaTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all:part:@sanity/base/schema-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;schemaTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="nx"&gt;todo&lt;/span&gt;
  &lt;span class="p"&gt;]),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;sanity deploy&lt;/code&gt;, choose a unique name for your deployed studio, and soon it should be live.&lt;/p&gt;

&lt;p&gt;Alert: Technically, you don't &lt;em&gt;need&lt;/em&gt; to deploy your studio‚Äîsimply accessing the document store and using the APIs is enough for these purposes. But assuming you'd &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-sanity-permissions"&gt;
  &lt;/a&gt;
  Get Sanity permissions
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="https://sanity.io/manage"&gt;sanity.io/manage&lt;/a&gt; and head to Settings &amp;gt; API &amp;gt; Tokens. Add a new token with write permissions and save the key somewhere safe.&lt;/p&gt;

&lt;p&gt;Directly above the tokens field, add &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to your CORS Origins. (If you deploy the app, you'll need to add your live URL to this list as well).&lt;/p&gt;

&lt;p&gt;You can find your project ID at the top of this page, right under the title of your studio. Add all your Sanity variables to your &lt;code&gt;.env.local&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// .env.local&lt;/span&gt;

&lt;span class="nx"&gt;NEXT_PUBLIC_MAGIC_PUB_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;pk_test_12345&lt;/span&gt;
&lt;span class="nx"&gt;MAGIC_SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;sk_test_12345&lt;/span&gt;
&lt;span class="nx"&gt;ENCRYPTION_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;random_encryption_string_from_earlier&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_SANITY_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;your_sanity_id&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_SANITY_DATASET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;your_sanity_dataset&lt;/span&gt;
&lt;span class="nx"&gt;SANITY_WRITE_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;your_sanity_write_key&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All right, we're configured and ready to start coding! Run &lt;code&gt;npm run dev&lt;/code&gt; in your project's root and test it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--welNGnKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb6jeu63jqdr53ddb3vh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--welNGnKB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb6jeu63jqdr53ddb3vh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0l9shXI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uohyc47apwu5c5ejrrpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0l9shXI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uohyc47apwu5c5ejrrpe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1EHVsQ93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fi4l9w4p4os7be8a4k6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1EHVsQ93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3fi4l9w4p4os7be8a4k6.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-input-form"&gt;
  &lt;/a&gt;
  Creating the input form
&lt;/h2&gt;

&lt;p&gt;Let's start with the submit form that sends our todos to the studio. Later we'll fetch the data and display it on our frontend.&lt;/p&gt;

&lt;p&gt;We can look at the finished product to see what we'll be adding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--veD0WKCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20d8fu34ew0uful5a0f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--veD0WKCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20d8fu34ew0uful5a0f7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First we'll use the &lt;code&gt;useState()&lt;/code&gt; hook to store the values of our submit form and todo list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-states-to-store-form-values"&gt;
  &lt;/a&gt;
  Creating states to store form values
&lt;/h3&gt;

&lt;p&gt;Let's import our hook as well as the &lt;code&gt;react-date-picker&lt;/code&gt; library. Then we'll add our states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//we must import the datepicker's css modules manually&lt;/span&gt;
&lt;span class="c1"&gt;//so it plays nice with Next.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-picker/dist/entry.nostyle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-picker/dist/DatePicker.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-calendar/dist/Calendar.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../hooks/useAuth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/Logout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//create a state to store todoList array&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTodoList&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="c1"&gt;//create a state for the text in the todo input form&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserInput&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//create a state for the due date chosen in the datepicker&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDueDate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;//set an error message if either input is missing&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setErrMessage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the existence of our custom &lt;code&gt;useAuth()&lt;/code&gt; hook at the top. More information about custom hooks (as well as a helpful refresher on all things React hooks!) can be found in this &lt;a href="https://www.youtube.com/watch?v=TNhaISOUy6Q"&gt;Fireship video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next we'll define some handlers for our form input and submission button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-raw-handlesubmit-endraw-and-raw-handlechange-endraw-functions"&gt;
  &lt;/a&gt;
  Create &lt;code&gt;handleSubmit&lt;/code&gt; and &lt;code&gt;handleChange&lt;/code&gt; functions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

&lt;span class="c1"&gt;//... right after the useState hooks&lt;/span&gt;

&lt;span class="c1"&gt;//FOR THE INPUT FORM:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setUserInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;//FOR THE SUBMIT BUTTON:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//if either part of the form isn't filled out&lt;/span&gt;
    &lt;span class="c1"&gt;//set an error message and exit&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setErrMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Todo text and due date must be filled out.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;//otherwise send the todo to our api&lt;/span&gt;
            &lt;span class="c1"&gt;// (we'll make this next!)&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="c1"&gt;// await fetchTodos(); //(we'll add this later)&lt;/span&gt;
      &lt;span class="c1"&gt;// Clear all inputs after the todo is sent to Sanity&lt;/span&gt;
      &lt;span class="nx"&gt;setUserInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setErrMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setDueDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;handleChange&lt;/code&gt; stores our text input in a state. &lt;code&gt;handleSubmit&lt;/code&gt; first makes sure both of our fields have been filled out, then posts the todo to our &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;serverless API route&lt;/a&gt; and clears out the inputs.&lt;/p&gt;

&lt;p&gt;You'll notice two things we reference that don't exist yet: the &lt;code&gt;api/todo&lt;/code&gt; route and a &lt;code&gt;fetchTodos()&lt;/code&gt; function. Fret not! We'll get to these in the next section. For now, we'll finish rendering our form.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-input-form"&gt;
  &lt;/a&gt;
  Creating the input form
&lt;/h3&gt;

&lt;p&gt;Replace &lt;code&gt;&amp;lt;p&amp;gt;Todo app will go right here!&amp;lt;/p&amp;gt;&lt;/code&gt; with the form element below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*we flex the text input and datepicker
                    so they display inline. */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-center items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"todo"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"invisible"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your Todo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
              &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-72 h-12 border p-4 border-blue-100"&lt;/span&gt;
              &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
                            &lt;span class="c1"&gt;//our state&lt;/span&gt;
              &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Make coffee."&lt;/span&gt;
                            &lt;span class="c1"&gt;//our function&lt;/span&gt;
              &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"my-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DatePicker&lt;/span&gt;
                &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"p-4"&lt;/span&gt;
                                &lt;span class="c1"&gt;//makes it so we cannot set due date in past&lt;/span&gt;
                &lt;span class="na"&gt;minDate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                                &lt;span class="c1"&gt;//our dueDate state&lt;/span&gt;
                &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setDueDate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;outline&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;none&lt;/span&gt; &lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;ring&lt;/span&gt; &lt;span class="na"&gt;focus&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;800&lt;/span&gt;
                        &lt;span class="na"&gt;px&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;6&lt;/span&gt; &lt;span class="na"&gt;py&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;2&lt;/span&gt; &lt;span class="na"&gt;rounded&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;xl&lt;/span&gt; &lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;500&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;50&lt;/span&gt; &lt;span class="na"&gt;hover&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;800&lt;/span&gt; 
                        &lt;span class="na"&gt;font&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;semibold&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;
                        &lt;span class="c1"&gt;//our function&lt;/span&gt;
            &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Submit
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*error set in handleSubmit*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errMessage&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see a lovely todo input form, with a stylish button lifted almost entirely from Tailwind's helpful docs.&lt;/p&gt;

&lt;p&gt;Remember the serverless API route from earlier? Let's build that now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-our-api-route"&gt;
  &lt;/a&gt;
  Make our API route
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;src/pages/api/todo.js&lt;/code&gt;. Since we'll want full &lt;a href="https://www.codecademy.com/articles/what-is-crud"&gt;CRUD&lt;/a&gt; functionality in our app, we'll need PUT and DELETE requests later. To keep our code clean, we'll use the &lt;code&gt;switch&lt;/code&gt; syntax for the different request types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/api/todo.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../lib/sanity/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;//this JSON arrives as a string,&lt;/span&gt;
      &lt;span class="c1"&gt;//so we turn it into a JS object with JSON.parse()&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;//then use the Sanity client to create a new todo doc&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;userEmail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Todo was created, document ID is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Todo was created, document ID is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error, check console&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, we should be able to submit a todo from our app and have it stored in our Sanity studio. Let's try it out.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm run dev&lt;/code&gt; once more and open up your Sanity studio. If all went well, you should see your new todo inside of Sanity. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EjEPKsmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjvneqz08m1i7nji3cmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EjEPKsmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjvneqz08m1i7nji3cmh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yJ2Zyv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5yfjaoxelqyjdwmqo2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yJ2Zyv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5yfjaoxelqyjdwmqo2n.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great job! Now that Sanity is storing our todo values, we can fetch them and display them on our frontend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-our-todos"&gt;
  &lt;/a&gt;
  Display our todos
&lt;/h2&gt;

&lt;p&gt;We'll define a function that will fetch the latest todos from Sanity and store them in the &lt;code&gt;todoList&lt;/code&gt; state. We want the function to run when the page loads, whenever user data changes, and any time we alter the data (by adding, updating, or deleting todos). To manage this logic, we'll begin by adding a &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;Head back to &lt;code&gt;pages/todos.js&lt;/code&gt; and import&lt;code&gt;useEffect&lt;/code&gt;, as well as our Sanity client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/pages/todos.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../lib/sanity/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right below your &lt;code&gt;useState&lt;/code&gt; hooks add the &lt;code&gt;fetchTodos&lt;/code&gt; function and tack it onto a &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//src/pages/todos.js&lt;/span&gt;

&lt;span class="c1"&gt;//after the useState hooks&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fetchedTodos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//make sure the user is loaded&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//pass userEmail as a query parameter&lt;/span&gt;
      &lt;span class="nx"&gt;fetchedTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;`*[_type=="todo" &amp;amp;&amp;amp; userEmail==$userEmail] | order(dueDate asc)
                {_id, text, createdAt, dueDate, isCompleted, completedAt, userEmail}`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;userEmail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="c1"&gt;//insert our response in the todoList state&lt;/span&gt;
      &lt;span class="nx"&gt;setTodoList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchedTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//now it will fetch todos on page load...&lt;/span&gt;
      &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;//this dependecy array tells React to run the&lt;/span&gt;
        &lt;span class="c1"&gt;//hook again whenever the user loads or changes&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uncomment &lt;code&gt;fetchTodos()&lt;/code&gt; in the &lt;code&gt;handleSubmit&lt;/code&gt; function. Next polyfills the &lt;code&gt;fetch&lt;/code&gt; API for all browsers beforehand, so no need to worry about that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;
&lt;span class="c1"&gt;// in handleSubmit function...&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="c1"&gt;//***uncomment this line now***&lt;/span&gt;
            &lt;span class="c1"&gt;//after submitting, our TodoList will now refresh&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;setUserInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setErrMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setDueDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Immediately after &lt;code&gt;handleSubmit&lt;/code&gt;, let's also add a &lt;code&gt;handleDelete&lt;/code&gt; function that we can pass to our &lt;code&gt;&amp;lt;Todo/&amp;gt;&lt;/code&gt; component. Since we're passing this function straight from the page to &lt;code&gt;&amp;lt;Todo/&amp;gt;&lt;/code&gt; (skipping the &lt;code&gt;&amp;lt;TodoList/&amp;gt;&lt;/code&gt; component), we should use React's &lt;code&gt;useContext&lt;/code&gt; hook. &lt;a href="https://reactjs.org/docs/context.html"&gt;Context&lt;/a&gt; allows us to avoid passing props unnecessarily.&lt;/p&gt;

&lt;p&gt;We'll also pass &lt;code&gt;fetchTodos()&lt;/code&gt; to our context hook, so that we can get fresh data when we toggle a todo's status in its component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//... before the Page component&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TodoContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="c1"&gt;// then, below the handleSubmit function...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDelete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectedTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selectedTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;//todos will refresh after delete, too&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleDelete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* all your rendered JSX */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;TodoContext&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check your console to make sure we fetched it all correctly. After you've confirmed it works, feel free to delete the console log.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IEFxm7_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5mhdindgh0p8wpd221f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IEFxm7_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5mhdindgh0p8wpd221f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very good! It's right there waiting for us. Now that we've fetched the data, we need components to feed it to. That's what we'll build next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-todo-components"&gt;
  &lt;/a&gt;
  Creating todo components
&lt;/h2&gt;

&lt;p&gt;First create a components folder in &lt;code&gt;src&lt;/code&gt;. In it, create a new file called &lt;code&gt;TodoList.js&lt;/code&gt;. This will be a simple component that mainly exists to keep our &lt;code&gt;todos.js&lt;/code&gt; page a little cleaner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/TodoList.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*if there are todos in the list...*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="c1"&gt;//map only the user's todos&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userEmail&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Todo&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="dl"&gt;""&lt;/span&gt;
              &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a todo item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pass the &lt;code&gt;todoList&lt;/code&gt; state in our page component to &lt;code&gt;&amp;lt;TodoList/&amp;gt;&lt;/code&gt;, which maps each item in the array to a &lt;code&gt;&amp;lt;Todo/&amp;gt;&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;The ternary operators may look tricky, but they're only saying, "If the todo list has one or more items, go through each item, double-check that they belong to the current user, then render them with our custom Todo component."&lt;/p&gt;

&lt;p&gt;The unique ID from Sanity is passed as the &lt;code&gt;key&lt;/code&gt; prop in the Todo because React requires it. React has more information about the key prop in their &lt;a href="https://reactjs.org/docs/lists-and-keys.html#basic-list-component"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we need to make &lt;code&gt;Todo.js&lt;/code&gt;. In the same folder, create that file. Remember the context we created in &lt;code&gt;todos.js&lt;/code&gt;? We can now put it into action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/Todo.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import a simple date formatting library&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dayjs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dayjs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// import a trashcan icon for our delete button&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RiDeleteBin5Line&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-icons/ri&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TodoContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../pages/todos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//with useContext we do not need to pass extra props to &amp;lt;TodoList/&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleDelete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TodoContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//setting states for the isCompleted boolean and a date completed&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsCompleted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;completedTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCompletedTime&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//function that syncs the completed checkbox with Sanity&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="c1"&gt;//passes isCompleted React state to Sanity&lt;/span&gt;
        &lt;span class="na"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;completedAt&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// refresh our data&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchTodos&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;//pass our Sanity results back into React&lt;/span&gt;
    &lt;span class="nx"&gt;setIsCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCompletedTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;bg&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;gray&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;50&lt;/span&gt; &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;6&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt; &lt;span class="na"&gt;shadow&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;md&lt;/span&gt; &lt;span class="na"&gt;rounded&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;xl&lt;/span&gt; 
            &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;4&lt;/span&gt; &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;gray&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;200&lt;/span&gt; &lt;span class="na"&gt;flex&lt;/span&gt; &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mx-2 cursor-pointer"&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;
        &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*if todo is done, cross it out and turn it gray*/&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`text-lg mx-2 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
          &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line-through text-gray-500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`text-gray-400 mr-2`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*if todo is done, show completedTime
                    if not done, show due date */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`Done &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dayjs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;completedTime&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MMM D, YYYY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Due &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;dayjs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dueDate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MMM D, YYYY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mx-2"&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;handleDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RiDeleteBin5Line&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Excellent work! All we need to do is add the components to our page and they should render.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-raw-todosjs-endraw-"&gt;
  &lt;/a&gt;
  Updating &lt;code&gt;todos.js&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/todos.js&lt;/span&gt;

&lt;span class="c1"&gt;// ... at the bottom of the imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/TodoList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// ... then directly under the form&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*...*/&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"my-12"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;xl&lt;/span&gt; &lt;span class="na"&gt;font&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;bold&lt;/span&gt; &lt;span class="na"&gt;tracking&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;tight&lt;/span&gt; 
                    &lt;span class="na"&gt;my&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;8&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Your Todos&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;loading...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoList&lt;/span&gt;
              &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;todoList&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todoList&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
//...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run &lt;code&gt;npm run dev&lt;/code&gt; and you should see your todo items appear. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IO4ZG8D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9rnzwzqc82s376f6r9e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IO4ZG8D8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9rnzwzqc82s376f6r9e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë®‚Äçüç≥ üòó&lt;/p&gt;

&lt;p&gt;If you try to toggle or delete them you'll throw an error, because we haven't added the PUT and DELETE API routes yet. Let's do those now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-the-new-routes-to-our-api"&gt;
  &lt;/a&gt;
  Add the new routes to our API
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/pages/api/todo.js&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="c1"&gt;//after the POST request&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="c1"&gt;//create new complete date if Todo is marked as done&lt;/span&gt;
          &lt;span class="na"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isCompleted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completedAt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DELETE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Todo was deleted`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your dev environment is still running, stop and start it again with ctrl/command C and &lt;code&gt;npm run dev&lt;/code&gt;. You should now be able to mark todos complete and delete them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-most-userfriendly-database-in-the-world"&gt;
  &lt;/a&gt;
  The most user-friendly database in the world
&lt;/h2&gt;

&lt;p&gt;If all went well, take a look at your Sanity studio. Your content should update in real-time when the frontend input changes and vice versa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3xNYQrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v9viotk1h5636fgsxcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3xNYQrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v9viotk1h5636fgsxcf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you've got the developer experience of a managed database with the friendly, customizable UI of a content manager. Pretty sweet.&lt;/p&gt;

&lt;p&gt;I've made the &lt;a href="https://github.com/bathrobe/next-magic-sanity-todo"&gt;completed repo&lt;/a&gt; public if you want to give it a look.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;Hopefully this project can serve as a starting point for more ambitious uses of Sanity. There are plenty of ways to improve the app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Right now the only way todos relate to their users is by passing in the user email as a field in individual todos. We should create a &lt;code&gt;user.js&lt;/code&gt; document in &lt;code&gt;schemas&lt;/code&gt; that allows each person to create their own profile. Then that document could be related to each todo of a given user via a reference field.&lt;/li&gt;
&lt;li&gt;Completed todos could be sent to their own list in an archive, instead of being displayed in the same spot on the Todo List component. In other words, instead of all todos appearing under "Your Todos", you could have separate lists for "Pending Todos" and "Completed Todos". This would be great practice if you're trying to develop more advanced React skills.&lt;/li&gt;
&lt;li&gt;For a fun challenge, could you add a pomodoro timer to specified todo lists and display the countdown in the studio? I've found dividing my work periods into smaller, timed chunks has been a big help in staying productive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, feel free to say hi on &lt;a href="https://twitter.com/joeholmesdev"&gt;Twitter&lt;/a&gt;. Happy coding!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Top 3 reasons developers should use social media</title>
      <author>Vikram Aditya</author>
      <pubDate>Tue, 22 Jun 2021 21:48:24 +0000</pubDate>
      <link>https://dev.to/thevik/top-3-reasons-developers-should-use-social-media-1col</link>
      <guid>https://dev.to/thevik/top-3-reasons-developers-should-use-social-media-1col</guid>
      <description>&lt;p&gt;Social media has some great benefits for developers, in their careers and in connecting with their communities. This post kicks off a blog series that will describe the value I‚Äôve gotten from social media and what I‚Äôve learned about specific social media platforms, including tips for using each platform effectively.&lt;/p&gt;

&lt;p&gt;Whether you‚Äôre looking to just keep in touch with other developers or wanting to build up your personal brand, today we‚Äôll focus on ‚Äúwhy social media?‚Äù Read on for my top three reasons why some time on social media is worth it for developers.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#1-connects-you-with-tech-communities"&gt;
  &lt;/a&gt;
  1: Connects you with tech communities
&lt;/h5&gt;

&lt;p&gt;Social media helps you connect with people online around common interests, especially favorite or emerging technologies. It‚Äôs given me a sense of being part of other tech communities, beyond the people I interact with in my day-to-day job and regardless of geography.&lt;/p&gt;

&lt;p&gt;It seems like a long time ago now, but social media today reminds me of when I was first playing video games . The communication mechanisms for that platform were all very open. When you were in a game you could talk with the other players and hear each other reacting to the game real time. Based on your skill level you were grouped up with other people who were very much like you and you‚Äôd find yourself socializing around gaming. It created real connections via the internet. It was one of my first experiences like that, where I built up online friendships with people around a common interest.&lt;/p&gt;

&lt;p&gt;Fast forward to today. The communication mechanisms for gaming aren‚Äôt quite as open, but I‚Äôve found that social media channels, like Twitch, have created a similarly open experience. It‚Äôs mostly text, partly voice, but the feeling is still the same ‚Äî people connecting directly around a common interest, in this case programming. I‚Äôm live streaming what I‚Äôm doing, they‚Äôre seeing me and my screen, and we‚Äôre communicating candidly over chat. We‚Äôre building community. Through Twitch I‚Äôve even made friends, who I‚Äôve later met in person at tech events.&lt;/p&gt;

&lt;p&gt;Also, there‚Äôs something about communication online that removes some of the social barriers, which I love. No need to worry about body language or what socks I‚Äôm wearing. It feels comfortable and more accessible. For people who have that kind of personality, maybe they identify more as an introvert, it can feel relatively easy to connect with people online.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#i-have-a-instagram-theme-page-related-to-programming-you-can-follow-it-if-you-want-to-"&gt;
  &lt;/a&gt;
  I have a &lt;a href="https://www.instagram.com/vikcodes/"&gt;Instagram Theme Page&lt;/a&gt; related to programming, you can follow it if you want to :)
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#2-advances-your-career-while-helping-others-in-the-process"&gt;
  &lt;/a&gt;
  2: Advances your career (while helping others in the process)
&lt;/h5&gt;

&lt;p&gt;Social media is a great way to broadly share your expertise and work ‚Äì through online courses, blogs, video tutorials, whatever ‚Äì picking the channel that best suits the content. This will not only bring value to tech communities you care about, but also to yourself. You‚Äôll build a portfolio that showcases your work online and&lt;/p&gt;

&lt;p&gt;As you share your expertise online, people may start viewing you as someone who can help with certain subjects. It‚Äôs a win-win all around ‚Äî you‚Äôre helping other people and those people can recognize you as a subject matter expert for that topic or technology. If you don‚Äôt show your work, how are people really going to know what you know and how you can contribute?&lt;/p&gt;

&lt;p&gt;For example, if you‚Äôre consistently sharing content about application security, that will help you build up your portfolio and your brand as a person with a depth of knowledge around AppSec. This is valuable if you‚Äôre looking to network and be open to new career opportunities. Recruiters will have more visibility into who you are and what you‚Äôre qualified to do. At Disney, and now Microsoft, it‚Äôs led to working on new projects that I hadn‚Äôt anticipated.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a recent Twitter example of me sharing a VS Code extension I created that allows your Twitch viewers to help in spotting bugs, typos, etc. by sending a command in chat that will highlight the line of code they want you to check. I was able to gauge interest in the extension simply by sharing it via Twitter and received real time feedback from people who were using or planning to use it.&lt;/p&gt;

&lt;p&gt;Social media also helps you be better at your current job. For example, when I first started using Twitter, I was a consumer of sports news ‚Äì football, basketball, whatever sport was in season. I could follow my teams and get the updates on what‚Äôs happening with them. Then, I quickly realized that I should do the same for my job. I can follow experts ‚Äì some who I wouldn‚Äôt otherwise have access to ‚Äì including core contributors to the different libraries, frameworks, or technologies that I use.&lt;/p&gt;

&lt;p&gt;It keeps me current and more impactful at my job. I bring that value back to my own company because I‚Äôm staying in step with the bleeding edge. Since I can tap into ‚Äúwhat‚Äôs next‚Äù via social media, I can ‚Äúfuture-proof‚Äù my work projects, given the insights I have into various project roadmaps. Speaking of the future‚Ä¶&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#3-social-media-is-the-future-and-the-present"&gt;
  &lt;/a&gt;
  3: Social media is the future (and the present)
&lt;/h5&gt;

&lt;p&gt;I get it. Social media can sometimes feel like an online mosh pit. As much as you may be hesitant, social media is where people in tech are connecting and building community. As a society we‚Äôre moving more and more online ‚Äì IoT, the cloud, video streaming services, the list goes on. In the US, approximately 70% of the adult population is on social media and it‚Äôs likely even higher if you look at technology professionals.&lt;/p&gt;

&lt;p&gt;We think of our identities as tied to the physical world, but how do our identities translate online? If you‚Äôre passive about being online, you may be missing out on the opportunity to establish yourself the same way you would offline. Proactively thinking about how and where you want to present yourself on social media gives you control over how you‚Äôre perceived.&lt;/p&gt;

&lt;p&gt;In summary, , why not be proactive and take control over your online identity? And, be authentic in the process. Never portray yourself as something that you‚Äôre not. That will get sniffed out right away.&lt;/p&gt;

&lt;p&gt;Of course, your daily time spent on social media can be guilt inducing. Especially with the new mechanisms to track your time ‚Äì like Screen Time in Apple‚Äôs iOS 12, which tracks how much time you spent on social media or other apps. It can be eye opening and jaw dropping. However, you can treat social media as just another aspect of your work-life balance. Set boundaries and goals and stick to them.&lt;/p&gt;

&lt;p&gt;Are you convinced? If so, this blog series will continue to focus on the future (and present) of social media, looking closer at &lt;br&gt;
specific social platforms and how to use them. We‚Äôll be reviewing best practices for optimizing the time you spend on Twitch, Twitter, Instagram, and more. Check back next month, when we‚Äôll focus on Twitch.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#this-blog-isnt-written-by-me-go-to-the-real-blog"&gt;
  &lt;/a&gt;
  This blog isnt written by me, &lt;a href="https://www.instagram.com/vikcodes/"&gt;Go to the real blog&lt;/a&gt;
&lt;/h5&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tips for someone who wants to be a Developer</title>
      <author>Krowser Web Services </author>
      <pubDate>Tue, 22 Jun 2021 21:23:30 +0000</pubDate>
      <link>https://dev.to/krowser/tips-for-someone-who-wants-to-be-a-developer-19bd</link>
      <guid>https://dev.to/krowser/tips-for-someone-who-wants-to-be-a-developer-19bd</guid>
      <description>&lt;p&gt;Plenty of companies are on the hunt for software developers. So, what are the secrets to software developer success?&lt;/p&gt;

&lt;p&gt;If you want to be a software developer, you won‚Äôt be stuck for company choices. Many of the biggest companies are looking for software developers.&lt;/p&gt;

&lt;p&gt;So, how exactly can you map out a successful career as a software developer? What do you need to know when you‚Äôre just starting out?&lt;/p&gt;

&lt;p&gt;We gleaned a number of tips for someone who wants to be a software developer from those who have walked the path before.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#practice-makes-perfect"&gt;
  &lt;/a&gt;
  Practice makes perfect
&lt;/h1&gt;

&lt;p&gt;Ronan O‚ÄôDulaing is the vice-president of engineering at Globoforce. He said a passion for problem-solving is critical to a successful career in software development. ‚ÄúYou could start by practising coding simple programs every day,‚Äù he said.&lt;/p&gt;

&lt;p&gt;‚ÄúPick problems to solve, perhaps related to your home or your other hobbies, and use your chosen language (Java, C++, C#, JavaScript, Ruby, Python or Scala) to figure them out. There are lots of tutorials online to get you started.‚Äù&lt;/p&gt;

&lt;p&gt;He also suggested attending meet-ups if you want to pursue a career. ‚ÄúThey‚Äôll give you a broad understanding on a range of technology topics, give you a great opportunity to speak to people [and] help you determine where to best employ the skills you‚Äôve acquired.‚Äù&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learn-the-language"&gt;
  &lt;/a&gt;
  Learn the language
&lt;/h1&gt;

&lt;p&gt;William Ho is an innovation software engineer at EY. He said someone at the very beginning of their career should try out and learn about as many different languages as they can, as having a niche skillset can limit future career prospects.&lt;/p&gt;

&lt;p&gt;‚ÄúIn terms of languages, it all depends on your field of interest. If you were looking at web development, you might look at perhaps a .NET language or PHP; if it‚Äôs native mobile, it would be Android or Swift; object-oriented programming, it could be anything from Java, Python, Ruby to C++ etc,‚Äù he said.&lt;/p&gt;

&lt;p&gt;‚ÄúIn terms of career prospects, having an understanding of a mixture of some of the above would put you in a very strong position.‚Äù&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#make-it-work-make-it-correct-make-it-fast"&gt;
  &lt;/a&gt;
  Make it work, make it correct, make it fast
&lt;/h1&gt;

&lt;p&gt;As with every job, there‚Äôs a learning curve. As you progress, you will improve your skills. When it comes to software development, Zendesk developer Jose Narvaez said your goal should be to make it work, make it correct and make it fast ‚Äì in that order.&lt;/p&gt;

&lt;p&gt;‚ÄúIn other words, start with simple solutions, adding the edge cases after you prove the simpler solution works. Once you have confirmed the results are correct for all of your inputs, proceed to measure performance and, only then, optimise accordingly.‚Äù&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#focus-on-the-users-needs"&gt;
  &lt;/a&gt;
  Focus on the user‚Äôs needs
&lt;/h1&gt;

&lt;p&gt;Deloitte‚Äôs Alan Jue Liu believes it is important for someone who wants to be a software developer to understand what software is there for. ‚ÄúIt is to make people‚Äôs job easier, to allow people to do more,‚Äù he said.&lt;/p&gt;

&lt;p&gt;‚ÄúWhen designing software, tackle complexity by distillation and tackle simplicity by thinking holistically. Design better software by always focusing on the needs of your users who will use, maintain, deploy and interact with your software.‚Äù&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#be-aggressive-in-your-development"&gt;
  &lt;/a&gt;
  Be aggressive in your development
&lt;/h1&gt;

&lt;p&gt;When it comes to software development, upskilling, self-learning and personal development are major parts of your career. According to Donal Byrne, a software developer at Jaguar Land Rover, you need to be aggressive about your own learning.&lt;/p&gt;

&lt;p&gt;‚ÄúGetting good grades in a relevant degree isn‚Äôt enough. Go out and start building real pieces of software. Take what you have learned and apply it,‚Äù he said.&lt;/p&gt;

&lt;p&gt;‚ÄúBeing able to do your own independent study/research and then implement it in a real project is by far the best way to improve and display your skills.‚Äù&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#become-an-adaptable-problemsolver"&gt;
  &lt;/a&gt;
  Become an adaptable problem-solver
&lt;/h1&gt;

&lt;p&gt;Steven O‚ÄôKennedy, a technology architecture lead in Accenture, said it‚Äôs important for a software developer to know that it‚Äôs not their job to write code, it‚Äôs their job to find answers to problems.&lt;/p&gt;

&lt;p&gt;‚ÄúAs a developer, understanding when to use technologies or techniques, knowing which are best for what, and knowing what the trade-offs are will make you a better developer, more valuable to your team and more confident in your decisions,‚Äù he said.&lt;/p&gt;

&lt;p&gt;‚ÄúDon‚Äôt be a technology fundamentalist who always tries to fit the problem to the tool they know. Just because your favourite technology/technique can fix a problem does not mean that it‚Äôs the right one to use!‚Äù&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Atajos de Teclado (shortcuts) en Visual Studio Code. </title>
      <author>Gast√≥n Danielsen</author>
      <pubDate>Tue, 22 Jun 2021 21:17:45 +0000</pubDate>
      <link>https://dev.to/gdcodev/atajos-de-teclado-shortcuts-en-visual-studio-code-427l</link>
      <guid>https://dev.to/gdcodev/atajos-de-teclado-shortcuts-en-visual-studio-code-427l</guid>
      <description>&lt;p&gt;Visual Studio Code actualmente en uno de los editores de c√≥digo m√°s utilizado, sobre todo entre los desarrolladores Web, nos permite programar en casi cualquier lenguaje. Tiene muchas caracter√≠sticas que lo hacen el editor de c√≥digo favorito de muchos, ya que es muy personalizable, esto quiere decir que podemos adaptarlo a los gustos personales de cada uno.&lt;/p&gt;

&lt;p&gt;Algo que puede ayudarte a ser mas r√°pido y ahorrar mas tiempo a la hora de moverte o escribir c√≥digo en VSCode sin duda son los atajos de teclado. Ahora veremos en detalle algunos de ellos.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acci√≥n&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Abrir paleta de comandos&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + P&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nueva ventana&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + N&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cerrar ventana&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + W&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ajustes del perfil&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + ,&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#usabilidad"&gt;
  &lt;/a&gt;
  Usabilidad
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acci√≥n&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Crear un nuevo archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + N&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + O&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guardar archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + S&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cerrar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + F4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir Terminal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + '&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Panel de problemas&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + M&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#edici%C3%B3n-b%C3%A1sica"&gt;
  &lt;/a&gt;
  Edici√≥n b√°sica
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acci√≥n&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cortar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Copiar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + C&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Borrar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + K&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insertar linea abajo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insertar linea arriba&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + Enter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Buscar en archivo abierto&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + F&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reemplazar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + H&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linea de comentario&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + /&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bloque de comentario&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Shift + Alt + A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Salto de linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Alt + Z&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seleccionar lineas&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Alt + Click Mouse&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tabular linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tab&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Destabular linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Shift + Tab&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#pantalla"&gt;
  &lt;/a&gt;
  Pantalla
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acci√≥n&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Acercar Zoom&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + +&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alejar Zoom&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + -&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barra lateral&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + B&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir debug&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + D&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Panel de salida&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + U&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control de source&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + G&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acceder a extensiones&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir terminal integrado&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + √ë&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;p&gt;Mas sobre Visual Studio Code: &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üìå Mis Redes: &lt;a href="https://www.facebook.com/gdcode7"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/gastondanielsen/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/gdcodev"&gt;GitHub&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Web Components, comunica√ß√£o entre componentes (parte 5)</title>
      <author>Gabriel Jos√©</author>
      <pubDate>Tue, 22 Jun 2021 21:13:24 +0000</pubDate>
      <link>https://dev.to/gabrieljm/web-components-comunicacao-entre-componentes-parte-5-ido</link>
      <guid>https://dev.to/gabrieljm/web-components-comunicacao-entre-componentes-parte-5-ido</guid>
      <description>&lt;p&gt;Essa √© a quinta parte da s√©rie de tutoriais sobre Web Components, n√£o deixe de ver as outras partes. Neste tutorial vamos ver um pouco mais sobre algumas abordagens de como podemos fazer uma comunica√ß√£o entre nossos componentes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eventos"&gt;
  &lt;/a&gt;
  Eventos
&lt;/h2&gt;

&lt;p&gt;Sim, j√° que todo componente que criamos se trata de um elemento HTML customizado, n√≥s podemos ouvir e disparar eventos como qualquer outro elemento faz, al√©m de adicionar eventos customizados tamb√©m. Eventos ser√£o a forma mais comum que ter√° para fazer a comunica√ß√£o entre os elementos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disparando-eventos"&gt;
  &lt;/a&gt;
  Disparando eventos
&lt;/h3&gt;

&lt;p&gt;Caso voc√™ n√£o sabia n√≥s podemos disparar os eventos do HTML de forma program√°tica, sem a necessidade de intera√ß√µes do usu√°rio.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clickEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com esse simples c√≥digo voc√™ ver√° que o evento atrelado ao bot√£o foi disparado sem que houvesse um real click nele.&lt;/p&gt;

&lt;p&gt;A classe &lt;code&gt;Event&lt;/code&gt; recebe dois par√¢metros, sendo o primeiro o nome do evento e o segundo sendo um objeto de configura√ß√£o para o evento, em que podemos configurar coisas como &lt;code&gt;bubbles&lt;/code&gt;, &lt;code&gt;cancelable&lt;/code&gt;, &lt;code&gt;composed&lt;/code&gt;. Para saber mais olhe: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/Event"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Event/Event&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#criando-eventos-personalizados"&gt;
  &lt;/a&gt;
  Criando eventos personalizados
&lt;/h3&gt;

&lt;p&gt;Utilizando de uma API muito parecida com a de eventos que acabamos de ver, podemos usar a classe &lt;code&gt;CustomEvent&lt;/code&gt; para criar um evento customizado.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formErrorEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form-error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Form Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como pode ver a API √© praticamente a mesma, no caso dos custom events n√≥s podemos passar o atributo &lt;code&gt;detail&lt;/code&gt; em que podemos passar qualquer valor que queremos propagar a outros elementos.&lt;/p&gt;

&lt;p&gt;Essa ali√°s √© uma √≥tima forma para fazer a comunica√ß√£o entre os elementos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exemplo"&gt;
  &lt;/a&gt;
  Exemplo
&lt;/h3&gt;

&lt;p&gt;Um simples exemplo usando um evento customizado:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- HTML --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Javascript&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppForm&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
      &amp;lt;form&amp;gt;
        &amp;lt;input placeholder="Name" /&amp;gt;
        &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
    `&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formErrorEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CustomEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form-error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Empty name field&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formErrorEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AppForm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppRoot&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;app-form&amp;gt;&amp;lt;/app-form&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form-error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ev&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AppRoot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#api-do-componente"&gt;
  &lt;/a&gt;
  API do componente
&lt;/h2&gt;

&lt;p&gt;Eventos s√£o muito √∫teis quando queremos obter o valor do resultado de uma opera√ß√£o feita por outro elemento ou simplesmente de ser notificador quando algo ocorrer. Por√©m, existem situa√ß√µes em que queremos simplesmente que o elemento mude seu comportamento ou estado atual, nessas situa√ß√µes construir uma API √© a melhor forma de comunica√ß√£o, pois n√≥s pedimos ao elemento que ele fa√ßa algo e ele internamente faz o que for necess√°rio para que aquilo ocorra.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exemplo"&gt;
  &lt;/a&gt;
  Exemplo
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- HTML --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Javascript&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;LightSwitch&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Estado do elemento&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;isOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
      &amp;lt;style&amp;gt;
        div {
          width: max-content;
          padding: 14px;
          border-radius: 6px;
        }

        .off {
          background-color: #ddd;
        }

        .on {
          background-color: #08c;
        }
      &amp;lt;/style&amp;gt;
      &amp;lt;div class="off"&amp;gt;
        &amp;lt;button&amp;gt;Toggle&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    `&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="cm"&gt;/*
    M√©todo p√∫blico que pode ser usado
    para mudar o estado do elemento
  */&lt;/span&gt;
  &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;isOn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;isOn&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;isOn&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LightSwitch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppRoot&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
      &amp;lt;light-switch&amp;gt;&amp;lt;/light-switch&amp;gt;
      &amp;lt;button&amp;gt;
        Toggle from outside
      &amp;lt;/button&amp;gt;
    `&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lightSwitch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light-switch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Chamando o m√©todo para alterar o estado do elemento&lt;/span&gt;
        &lt;span class="nx"&gt;lightSwitch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AppRoot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comunica%C3%A7%C3%A3o-por-terceiros"&gt;
  &lt;/a&gt;
  Comunica√ß√£o por terceiros
&lt;/h2&gt;

&lt;p&gt;Por terceiros, me refiro a outros elementos ou estruturas na qual podemos delegar a parte da comunica√ß√£o para uma entidade que n√£o √© diretamente quem queremos impactar. Esse tipo de abordagem √© muito √∫til quando queremos que algo seja refletido em v√°rios elementos de uma vez e/ou quando n√£o sabemos quais elementos ser√£o afetados. √â uma abordagem muito comum para o gerenciamento de estado, seja espec√≠fico a alguns componentes ou um estado global.&lt;/p&gt;

&lt;p&gt;Devo enfatizar que essa √© somente uma forma de gerenciar essa parte de estado compartilhado e afins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exemplo"&gt;
  &lt;/a&gt;
  Exemplo
&lt;/h3&gt;

&lt;p&gt;O exemplo abaixo √© simples, usando um objeto espec√≠fico para manter o estado de um contador e utilizando de eventos para capturar as mudan√ßas que acontecerem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- HTML --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Javascript&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CounterStore&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onCountChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCountChange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;onCountChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCountChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CounterStore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppRoot&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachShadow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
      &amp;lt;div&amp;gt;Count: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;counterStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/div&amp;gt;
      &amp;lt;button&amp;gt;Increment&amp;lt;/button&amp;gt;
    `&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;counterStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;counterStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onCountChange&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shadowRoot&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Count: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;counterStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;AppRoot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclus√£o
&lt;/h2&gt;

&lt;p&gt;Agora voc√™ viu como podemos mexer com a comunica√ß√£o entre nossos Web Components, lembrando que isso que mostrei s√£o s√≥ abordagens e que √© sempre bom lembrar que aqui estamos mexendo com Javascript puro, ent√£o h√° espa√ßo para que voc√™ crie sua pr√≥pria maneira de gerenciar isso. Espero muito que tenha gostado e caso tenha alguma d√∫vida pode deixar nos coment√°rios e at√© o pr√≥ximo!!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>events</category>
      <category>webcomponents</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why Storing Files in the Database Is Considered Bad Practice</title>
      <author>Maxim Orlov</author>
      <pubDate>Tue, 22 Jun 2021 21:10:59 +0000</pubDate>
      <link>https://dev.to/maximization/why-storing-files-in-the-database-is-considered-bad-practice-4a49</link>
      <guid>https://dev.to/maximization/why-storing-files-in-the-database-is-considered-bad-practice-4a49</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published a day earlier at &lt;a href="https://maximorlov.com/why-storing-files-database-bad-practice/"&gt;https://maximorlov.com/why-storing-files-database-bad-practice/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You're already storing structured data in the database, it seems only logical to store files in there as well.&lt;/p&gt;

&lt;p&gt;So you look up how to save files in MongoDB (or PostgreSQL, MySQL, etc.), only to find out that storing files in the database is considered bad practice.&lt;/p&gt;

&lt;p&gt;Other web developers are saying that you shouldn't store files in the database, and they'll frown upon you if you ask them how to.&lt;/p&gt;

&lt;p&gt;But nobody tells you why...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is it because it looks bad to have a very long base64 string in the database?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There has to be more to it than that.&lt;/p&gt;

&lt;p&gt;By the end of this article, you'll find out &lt;em&gt;why&lt;/em&gt; saving files in the database is considered a bad practice.&lt;/p&gt;

&lt;p&gt;You will discover common downsides of storing files in the database. In addition, you will learn a different approach to storing files that's more in line with industry best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#downsides-of-storing-files-in-the-database"&gt;
  &lt;/a&gt;
  Downsides of storing files in the database
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#slower-database-queries"&gt;
  &lt;/a&gt;
  Slower database queries
&lt;/h3&gt;

&lt;p&gt;Storing files in the database slows down overall query performance simply because there is more data transmitted between the application and the database.&lt;/p&gt;

&lt;p&gt;Additionally, files use up RAM which is used internally by the database to improve performance. Frequently accessed data is stored in RAM because it provides much faster reads than disk storage.&lt;/p&gt;

&lt;p&gt;Querying files likely means the database will end up storing those files into RAM. Servers are typically constrained on the amount of RAM available therefore the database ends up prioritising some data over the other. Data that isn't stored in RAM has to be read from disk which is always much slower than RAM.&lt;/p&gt;

&lt;p&gt;In other words, when your database is busy serving files, those resources can't be used to respond to other queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-maintenance-becomes-more-difficult"&gt;
  &lt;/a&gt;
  Database maintenance becomes more difficult
&lt;/h3&gt;

&lt;p&gt;Database administrators will nod at this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The level of knowledge required to maintain a database goes up in proportion to the size of the database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A larger database is more difficult to maintain than a smaller database. A sure way to rapidly increase the size of your database is to store large files in it.&lt;/p&gt;

&lt;p&gt;Backing up a larger database takes more time and results in larger backup files that are slower to move around. Other maintenance tasks also get slower over time and are more likely to fail ‚Äî restoring from backup, adding indexes, database defragmentation, etc.&lt;/p&gt;

&lt;p&gt;Maintenance tasks add a strain to the database while running. This in turn decreases database performance and availability. The longer it takes for a database maintenance task to run, the larger the impact will be on your application and end-users.&lt;/p&gt;

&lt;p&gt;In a replica set, a larger database leads to slower replication times and bigger replication delays. This may cause race conditions and synchronisation problems if your application code doesn't handle that well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#storing-and-serving-files-is-more-complex"&gt;
  &lt;/a&gt;
  Storing and serving files is more complex
&lt;/h3&gt;

&lt;p&gt;To save a file in a database, it often needs to be converted in a way so it can be correctly stored.&lt;/p&gt;

&lt;p&gt;If you choose to store the file as text, you might decide to store it in base64 format for example. You'll need to write some logic in your application to convert files to base64 before they're saved into the database. You also need to handle the reverse case ‚Äî reading from the database and converting from base64 to binary before passing the file on to the client.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Files stored in base64 end up using &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Base64"&gt;33% more space&lt;/a&gt; than their original size.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Storing files as binaries in the database has a similar downside ‚Äî escaping/encoding binary data in your application before sending it off to the database.&lt;/p&gt;

&lt;p&gt;In both cases, you end up with an additional layer in your application that needs to be maintained. None of this is difficult or time-consuming, but it adds complexity and becomes another point of failure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-downsides"&gt;
  &lt;/a&gt;
  Other downsides
&lt;/h3&gt;

&lt;p&gt;The aforementioned points are, what I think, the most important ones when storing files in the database. Below are a few more, but certainly not all, that are worth mentioning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Increased costs.&lt;/strong&gt; Hard disk storage is generally cheap but the equivalent in RAM is significantly more expensive. A larger database will use up more RAM to store indexes and commonly queried data to improve performance. Not to mention a database is already often the largest consumer of RAM in the application stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database limits.&lt;/strong&gt; MongoDB documents are limited to 16MB in size. If you want to store larger files in MongoDB, you have to use &lt;a href="https://docs.mongodb.com/manual/core/gridfs/"&gt;GridFS&lt;/a&gt;. In PostgreSQL, columns are limited to 1GB per row. If the file you want to store is larger, you have to use a dedicated table designed for storing &lt;a href="https://www.postgresql.org/docs/current/largeobjects.html"&gt;large objects&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-can-you-store-files-instead"&gt;
  &lt;/a&gt;
  Where can you store files instead?
&lt;/h2&gt;

&lt;p&gt;Aside from the database, you can store files locally or in the cloud. In both cases, it's common to store a path to the file's location in the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-system"&gt;
  &lt;/a&gt;
  File system
&lt;/h3&gt;

&lt;p&gt;Storing files on the file system is a popular choice. It's convenient to have files stored locally close to your application code. It makes it easy to write/read files without having to send them over the network to an external provider.&lt;/p&gt;

&lt;p&gt;Node.js has the built-in &lt;a href="https://nodejs.org/api/fs.html"&gt;fs module&lt;/a&gt; (&lt;code&gt;fs/promises&lt;/code&gt; with async/await) which makes it easy to interact with the file system. On top of that, there are a few convenient libraries such as &lt;a href="https://github.com/jprichardson/node-fs-extra"&gt;fs-extra&lt;/a&gt; and &lt;a href="https://github.com/substack/node-findit"&gt;findit&lt;/a&gt; that make common tasks straightforward.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Keep in mind that Platform-as-a-Service providers such as Heroku, AWS Elastic Beanstalk and DigitalOcean App Platform have an ephemeral/short-lived file system. Any files saved locally will disappear after deploying or restarting the application. Therefore you can't rely on the file system to store files that need to persist for a longer time. Use a VPS if you want to store files locally, or store files in the cloud instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#cloud-storage"&gt;
  &lt;/a&gt;
  Cloud storage
&lt;/h3&gt;

&lt;p&gt;Cloud storage is the go-to solution for larger applications. It takes away the burden of backups, redundancy, delivery and access control. Small websites can benefit too by using media-focused storage solutions such as Cloudinary (more on that below).&lt;/p&gt;

&lt;p&gt;Here are a few commonly used file/media storage solutions by Node.js developers:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS S3.&lt;/strong&gt; Amazon Web Services (AWS) has the largest market share in the cloud industry and their storage solution is called S3. With AWS S3, files are called objects and they are stored in buckets which are unique URL namespaces. S3 doesn't know the concept of folders because the file system is abstracted away. Use the forward-slash (&lt;code&gt;/&lt;/code&gt;) in your file names and you'll get folder-like navigation in the S3 dashboard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudinary&lt;/strong&gt; is different from the others in this list because it operates at a higher level. Cloudinary is a media storage solution built on top of AWS S3 and optimised for image/video storage. They offer features such as dynamic media transformations, automatic compression and browser-specific media delivery. Cloudinary is great for when you're building a responsive website and want to serve different image sizes for different devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DigitalOcean Spaces&lt;/strong&gt;. DigitalOcean is known for its vast collection of high-quality resources. Anything related to DevOps, they've got you covered. I like them for their clean and intuitive UI. DigitalOcean Spaces is compatible with AWS S3 therefore they have a similar concept of objects and buckets/spaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backblaze B2&lt;/strong&gt; is similar to AWS S3 but &lt;a href="https://www.backblaze.com/b2/cloud-storage-pricing.html"&gt;several times cheaper&lt;/a&gt;. They're known for writing robust software centred on security and encryption. Backblaze can also continuously backup your laptop in the cloud which I've been happily using for many years.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-that-mean-you-should-never-store-files-in-the-database"&gt;
  &lt;/a&gt;
  Does that mean you should never store files in the database?
&lt;/h2&gt;

&lt;p&gt;No. The answer is, as always, it depends.&lt;/p&gt;

&lt;p&gt;On a small scale, the downsides of storing files in the database may not be that important. When you're working on a quick prototype to show to a client, a side project for learning purposes, or an application with a slow growth projection ‚Äî it's more important to deliver quickly and focus on the must-have features. The scale you're optimising for might never arrive in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You've learned what the common downsides of storing files in the database are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Slower database queries&lt;/li&gt;
&lt;li&gt;Database maintenance becomes more difficult&lt;/li&gt;
&lt;li&gt;Storing and serving files is more complex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, you can store files on the file system or in the cloud which is more in line with industry best practices. AWS S3, DigitalOcean Spaces, Cloudinary and Backblaze B2 are popular cloud platforms in the Node.js community.&lt;/p&gt;

&lt;p&gt;However, that isn't to say that you should never store files in the database. Sometimes you have to ship something quickly, and for small applications, these downsides can be manageable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-you"&gt;
  &lt;/a&gt;
  Back to you
&lt;/h2&gt;

&lt;p&gt;Now it's your turn ‚Äî where will you store the files for your next application? In the cloud, on the file system or in the database?&lt;/p&gt;

&lt;p&gt;Whatever you decide, you're now equipped with the knowledge to make a wiser decision than you were before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-upload-a-file-in-nodejs"&gt;
  &lt;/a&gt;
  How do you upload a file in Node.js?
&lt;/h2&gt;

&lt;p&gt;Use this FREE request parsing guide and implement seamless working Node.js APIs that follow the latest best practices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maximorlov.com/request-parsing-nodejs-guide/"&gt;Grab your copy of the FREE guide to Parsing Requests in Node.js&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>node</category>
      <category>database</category>
    </item>
    <item>
      <title>The 4 Types of Activity timeouts in Temporal</title>
      <author>swyx</author>
      <pubDate>Tue, 22 Jun 2021 20:57:31 +0000</pubDate>
      <link>https://dev.to/temporalio/the-4-types-of-activity-timeouts-in-temporal-1p69</link>
      <guid>https://dev.to/temporalio/the-4-types-of-activity-timeouts-in-temporal-1p69</guid>
      <description>&lt;p&gt;One benefit of moving business logic to Temporal is how Temporal implements retries and timeouts for Activities in a standardized way. This has the effect of adding a reliability layer atop unreliable Activities and Workers, in a durable and scalable fashion. However, understanding the terminology can be a bit intimidating at first glance. &lt;/p&gt;

&lt;p&gt;This post (together with the embedded talk) aims to give you a solid mental model on what each Activity timeout does and when to use it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can also set &lt;a href="https://docs.temporal.io/docs/concepts/workflows#timeout-settings"&gt;Workflow timeouts&lt;/a&gt; and &lt;a href="https://docs.temporal.io/docs/concepts/activities#retries"&gt;retry policies&lt;/a&gt; you can set. This post deals only with &lt;em&gt;Activity&lt;/em&gt; timeouts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#talk-version-whiteboard-session"&gt;
  &lt;/a&gt;
  Talk version: whiteboard session
&lt;/h2&gt;

&lt;p&gt;You can watch this 18 minute talk where our CEO Maxim Fateev explains the 4 Types of Activity timeouts you see in Temporal.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JK7WLK3ZSu8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The rest of this post summarizes the main points covered in this whiteboard session, for those who prefer a written version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#written-version-tldr"&gt;
  &lt;/a&gt;
  Written version: TL;DR
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Agm5RLQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122424123-0ab1e300-cfc1-11eb-82c5-cf8856a87242.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Agm5RLQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122424123-0ab1e300-cfc1-11eb-82c5-cf8856a87242.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Temporal has four timeouts ‚Äî two that are commonly used, and two that are useful only in specific cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Schedule-To-Close: Limits the maximum execution time including retries.&lt;/li&gt;
&lt;li&gt;Start-To-Close: Limits the maximum execution time of a single execution. &lt;strong&gt;We recommend ALWAYS setting this!&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Heartbeat: Limits the maximum time between Heartbeats. &lt;em&gt;For long running Activities&lt;/em&gt;, enables a quicker response when s Heartbeat fails to be recorded.&lt;/li&gt;
&lt;li&gt;Schedule-To-Start: Limits the maximum time that an Activity Task can sit in a Task Queue. Mainly to identify whether a Worker is down or for Task routing. &lt;strong&gt;This is rarely needed!&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the precise APIs in the reference documentation for each SDK: &lt;a href="https://www.javadoc.io/doc/io.temporal/temporal-sdk/latest/io/temporal/activity/ActivityOptions.Builder.html"&gt;Java&lt;/a&gt; and &lt;a href="https://pkg.go.dev/go.temporal.io/sdk@v1.7.0/internal#ActivityOptions"&gt;Go&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lifecycle-of-an-activity"&gt;
  &lt;/a&gt;
  Lifecycle of an Activity
&lt;/h2&gt;

&lt;p&gt;To really understand how timeouts work, we should understand the typical lifecycle of an Activity as it journeys through the various parts of the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-workflow-worker"&gt;
  &lt;/a&gt;
  Step 1 - Workflow Worker
&lt;/h3&gt;

&lt;p&gt;An activity &lt;code&gt;SimpleActivity&lt;/code&gt; is first invoked inside a Workflow Worker on Task Queue &lt;code&gt;sampleTaskQueue&lt;/code&gt;. The precise method of invocation differs by SDK, and timeouts are also specified up front as part of Activity options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;ao&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ActivityOptions&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;TaskQueue&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;               &lt;span class="s"&gt;"sampleTaskQueue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;ScheduleToCloseTimeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c"&gt;// ScheduleToStartTimeout: time.Second * 60, // usually not needed! see below&lt;/span&gt;
        &lt;span class="n"&gt;StartToCloseTimeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;HeartbeatTimeout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;       &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;WaitForCancellation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithActivityOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ao&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;workflow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExecuteActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SimpleActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Behind the scenes, the SDK transforms this into a &lt;code&gt;ScheduleActivity&lt;/code&gt; Command, which is sent to the Temporal Server. &lt;br&gt;
This Command includes various metadata, including the activity type (&lt;code&gt;SimpleActivity&lt;/code&gt;), activity task queue (&lt;code&gt;sampleTaskQueue&lt;/code&gt;), and activity ID. A &lt;code&gt;RetryPolicy&lt;/code&gt; was not specified, so Temporal uses &lt;a href="https://docs.temporal.io/docs/concepts/workflows#retry-policy"&gt;the default Retry Policy&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-temporal-server"&gt;
  &lt;/a&gt;
  Step 2 - Temporal Server
&lt;/h3&gt;

&lt;p&gt;Receiving the Command, Temporal Server adds an Activity Task to the &lt;code&gt;Bar&lt;/code&gt; Activity Task Queue.&lt;br&gt;
There is an atomic guarantee that these both happen together, to prevent race conditions. &lt;br&gt;
We explained why this is important and how Temporal accomplishes this in &lt;a href="https://docs.temporal.io/blog/workflow-engine-principles/"&gt;Designing A Workflow Engine&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Activity Execution is now in a &lt;code&gt;SCHEDULED&lt;/code&gt; state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#step-3-activity-worker"&gt;
  &lt;/a&gt;
  Step 3 - Activity Worker
&lt;/h3&gt;

&lt;p&gt;An Activity Worker that has been polling the &lt;code&gt;Bar&lt;/code&gt; Activity Task Queue picks up the Activity Task and begins execution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Activity Execution is now in a &lt;code&gt;STARTED&lt;/code&gt; state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#step-4-temporal-server"&gt;
  &lt;/a&gt;
  Step 4 - Temporal Server
&lt;/h3&gt;

&lt;p&gt;Once the Activity Execution finishes successfully, the Activity Worker sends a &lt;code&gt;CompleteActivityTask&lt;/code&gt; message (together with the result of the Activity Execution) to Temporal Server, which now gives control back to the Workflow Worker to continue to the next line of code and repeat the process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Activity Execution is now in a &lt;code&gt;CLOSED&lt;/code&gt; state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have just described the "Happy Path" of an Activity Execution.&lt;br&gt;
However, what happens when an Activity Worker crashes midway through an execution?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#starttoclose-timeout"&gt;
  &lt;/a&gt;
  Start-To-Close Timeout
&lt;/h2&gt;

&lt;p&gt;We use the Start-To-Close timeout to control the maximum amount of time &lt;strong&gt;a single Activity Execution&lt;/strong&gt; can take. We recommend &lt;strong&gt;always&lt;/strong&gt; setting this timeout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lJeO9AVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122290108-fff64000-cf25-11eb-92b3-0533e41c3fee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lJeO9AVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122290108-fff64000-cf25-11eb-92b3-0533e41c3fee.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The classic example for why the Start-To-Close timeout is relevant, is when an Activity Task has been picked up from the Activity Task Queue (&lt;code&gt;STARTED&lt;/code&gt; state) but the Worker crashes after that (so the Activity Execution never reaches &lt;code&gt;CLOSED&lt;/code&gt; state). &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Without a timeout configured, Temporal would never proactively timeout this Activity Execution to initiate a retry. The Activity Execution becomes "stuck" and the end user would experience an indefinite delay of their Workflow Execution with no feedback.&lt;/li&gt;
&lt;li&gt;With the timeout configured, Temporal registers an &lt;code&gt;ActivityTaskTimedOut&lt;/code&gt; event internally which triggers the Server to attempt a retry based on the Activity Execution's &lt;code&gt;RetryPolicy:&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;The Server adds the Activity Task to the Activity Task Queue again.&lt;/li&gt;
&lt;li&gt;The Server increments the attempt count in the Workflow Execution's mutable state.&lt;/li&gt;
&lt;li&gt;The Activity Task is picked up again by an Activity Worker.&lt;/li&gt;
&lt;li&gt;In the Temporal Server, the Start-To-Close timer is reset and will fire again if this second attempt fails.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The tricky part of setting Start-To-Close is that it needs to be set longer than the maximum &lt;em&gt;possible&lt;/em&gt; Activity Execution, since you want to avoid premature timeouts for Activity Executions that genuinely take that long. &lt;br&gt;
Practically, if an Activity Execution can take anywhere from 5 minutes to 5 hours, you need to set Start-To-Close to be longer than 5 hours.&lt;br&gt;
If you have a long running Activity Execution like that, then we suggest using Heartbeat timeouts.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scheduletoclose-timeout"&gt;
  &lt;/a&gt;
  Schedule-To-Close Timeout
&lt;/h2&gt;

&lt;p&gt;The Schedule-To-Close Timeout is used to control the overall maximum amount of time allowed for an Activity Execution, including all retries.&lt;br&gt;
This timeout only makes sense if the Activity Execution has a &lt;code&gt;RetryPolicy&lt;/code&gt; with &lt;code&gt;MaximumAttempts &amp;gt; 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_isFX5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122290183-0dabc580-cf26-11eb-913d-3dc74d5eb55f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_isFX5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122290183-0dabc580-cf26-11eb-913d-3dc74d5eb55f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you let it, Temporal will retry a failing Activity Execution for up to 10 years! (with exponential backoff up to a defined maximum interval)&lt;br&gt;
Most Temporal developers will want to fine-tune retries to balance the user experience against the unreliability of the Activity Execution.&lt;/p&gt;

&lt;p&gt;While you can control intervals between retries and maximum number of retries in the &lt;code&gt;RetryPolicy&lt;/code&gt;, the Schedule-To-Close Timeout is the best way to control retries based on the overall &lt;em&gt;time that has elapsed&lt;/em&gt;.&lt;br&gt;
We recommend using the Schedule-To-Close Timeout to limit retries rather than tweaking the number of Maximum Attempts, because that more closely matches the desired user experience in the majority of cases.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#heartbeat-timeout"&gt;
  &lt;/a&gt;
  Heartbeat Timeout
&lt;/h2&gt;

&lt;p&gt;For long running Activity Executions, we recommend recording Heartbeats to create more frequent ping-backs from the Activity Worker to the Temporal Server. &lt;br&gt;
Then, set a Heartbeat Timeout to fail the Activity Execution when the Temporal doesn't receive a Heartbeat from your Activity Execution at the expected frequency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5qmCee3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122424268-287f4800-cfc1-11eb-8417-f52743347afc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5qmCee3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122424268-287f4800-cfc1-11eb-8417-f52743347afc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Heartbeats must be recorded from Activity Definitions (Activity code) using SDK APIs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hasWork&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Send heartbeat message to the server.&lt;/span&gt;
    &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RecordHeartbeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;// Do some work.&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting a Heartbeat Timeout enables you to retry Activity Executions more quickly (e.g. the next minute after a Heartbeat is missed) than the Start-To-Close Timeout, which must be set to as long as the longest possible Activity Execution (e.g. five hours later when we are sure the Activity Execution should have been completed).&lt;/p&gt;

&lt;p&gt;There are some minor nuances to Heartbeats that may be of interest:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can freely record Heartbeats as often as you want (e.g. once a minute, or every time a loop iterates).
The SDKs throttle the Heartbeats that get sent back to the Server anyway.&lt;/li&gt;
&lt;li&gt;If a Heartbeat Timeout isn't set and the Activity Execution tries to record a Heartbeat, nothing will be recorded since that information will never be used.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scheduletostart-timeout"&gt;
  &lt;/a&gt;
  Schedule-To-Start Timeout
&lt;/h2&gt;

&lt;p&gt;The Schedule-To-Start Timeout sets a limit on the amount of time that an Activity Task can sit in a Task Queue.&lt;br&gt;
We recommend that most users monitor the &lt;code&gt;temporal_activity_schedule_to_start_latency&lt;/code&gt; metric and set alerts for that as a &lt;a href="https://docs.temporal.io/docs/server/production-deployment/#faq-autoscaling-workers-based-on-task-queue-load"&gt;production scaling&lt;/a&gt; metric, rather than setting an explicit timeout for it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2BSsIz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122290279-287e3a00-cf26-11eb-8dd6-3133016a0bd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2BSsIz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122290279-287e3a00-cf26-11eb-8dd6-3133016a0bd9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a queue timeout, &lt;code&gt;ScheduleToStart&lt;/code&gt; is unique in that it &lt;strong&gt;doesn't result in a retry&lt;/strong&gt; ‚Äî all a retry would do is pop the activity right back on to the same queue!&lt;/p&gt;

&lt;p&gt;The Schedule-To-Start Timeout is most useful when you have a concrete plan to reroute an Activity Task to a different Task Queue, if a given Task Queue is not draining at an expected rate.&lt;br&gt;
You can also reschedule a whole set of other Activity Executions or do other compensation logic based on this timeout.&lt;br&gt;
This is a powerful feature for building ultra-reliable systems, however most users will not need this since you can horizontally scale the number of Workers easily.&lt;/p&gt;

&lt;p&gt;Generally, issues with Schedule-To-Start are better addressed by scaling Activity Workers accordingly, rather than by adding timeouts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-it-all-together-a-recruiting-example"&gt;
  &lt;/a&gt;
  Putting it all together - a recruiting example
&lt;/h2&gt;

&lt;p&gt;We've recently found the terminology of timeouts useful even internally for our recruiting and realized that this could be a relatable analogy for most people.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://temporal.io/careers"&gt;we are hiring heavily at Temporal&lt;/a&gt;, there is a lot of interview scheduling going on intermixed with our regular day jobs. You could model the end-to-end hiring process for a candidate as a single "Workflow" with multiple "Activities": sourcing, interviewing, making a decision, and then the offer process. &lt;/p&gt;

&lt;p&gt;Specifically for the "Activity" of interviewing we've encountered some pain points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Some interviews were scheduled for 90 minutes, which we found to be way too long&lt;/li&gt;
&lt;li&gt;Some interviews had no-shows for any number of reasons ranging from miscommunication to Life‚Ñ¢ getting in the way, and we were unclear on when to call an end to the interview and try to reschedule&lt;/li&gt;
&lt;li&gt;Sometimes a process would just drag out for weeks and weeks, leaving other candidates waiting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To resolve this, we could think about setting some timeout policies (for clarity, none of these are real numbers):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Start-To-Close Timeout of 45 minutes so we don't spend too much time per interview.&lt;/li&gt;
&lt;li&gt;A Heartbeat Timeout of 10 minutes to see if we should cancel on no-shows.&lt;/li&gt;
&lt;li&gt;A Schedule-To-Close Timeout of 4 weeks to limit the length of time we spend accommodating other people's schedules vs our own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXL2iiBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122290324-359b2900-cf26-11eb-93a6-5027fc98593b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXL2iiBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/122290324-359b2900-cf26-11eb-93a6-5027fc98593b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Should we set a Schedule-To-Start timeout? You could imagine candidates sitting a queue waiting to be interviewed, with not enough interviewer "Workers" to process them. A timeout here wouldn't help much, because there's no other queue to put them on. Better to set up monitoring and alerting on Schedule-To-Start latency, and scale up workers accordingly as needed (autoscaling is &lt;a href="https://docs.temporal.io/docs/server/production-deployment/#faq-autoscaling-workers-based-on-task-queue-load"&gt;currently not possible&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>temporal</category>
      <category>architecture</category>
      <category>go</category>
    </item>
    <item>
      <title>Being a developer at a startup is actually pretty great</title>
      <author>Daniel Kaczmarczyk</author>
      <pubDate>Tue, 22 Jun 2021 20:31:10 +0000</pubDate>
      <link>https://dev.to/koan/being-a-developer-at-a-startup-is-actually-pretty-great-3n5m</link>
      <guid>https://dev.to/koan/being-a-developer-at-a-startup-is-actually-pretty-great-3n5m</guid>
      <description>&lt;p&gt;You‚Äôre a developer who is looking for their next role and you are thinking about what kind of companies to talk to. One of the first decisions you have to make is whether to join a startup or a bigger, more established company. Here‚Äôs a quick case for startups:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#biggest-incentives"&gt;
  &lt;/a&gt;
  Biggest Incentives
&lt;/h2&gt;

&lt;p&gt;The earlier you are joining the company, the higher the financial benefits can be. If the startup does well, your share options can be worth a lot of money. The people you‚Äôre going to work with are often very entrepreneurial and innovative (and since you‚Äôre reading this article, you probably are too). You can learn a lot being around other creators, sharing ideas, and discussing things openly. It‚Äôs a stark contrast to more corporate processes and environments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-get-a-lot-of-stuff-done"&gt;
  &lt;/a&gt;
  You get a lot of stuff done!
&lt;/h2&gt;

&lt;p&gt;It‚Äôs not all paperwork and sitting in meetings. At a startup ‚Äúagile‚Äù is an adjective ‚Äî not a time-suck. We release our software early and often, and maintain a very short cycle between pull requests and releases. It‚Äôs a very exciting environment, with a lot of opportunity to see your work come to life ‚Äî and fast! Working for a company that wins a startup competition feels differently than being one of 5000 employees in a giant conglomerate. Although I‚Äôve only experienced the former, I can extrapolate that getting 20% of the credit feels better than getting 0.002% credit.&lt;/p&gt;

&lt;p&gt;If you‚Äôre joining a startup, you can also expect to be able to influence the technology choices, the culture, and many other things that you would not be able to influence otherwise. Most of the processes are a blank slate, which require you to take charge and make the calls yourself. This includes a lot of things ‚Äî hiring decisions, processes, technologies, and the list goes on and on.&lt;/p&gt;

&lt;p&gt;Another great aspect of working at a smaller company is that you‚Äôre much closer to the folks who use your product. Being able to more easily obtain feedback is a gift to help build things that closely align with your user base.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accelerate-your-career"&gt;
  &lt;/a&gt;
  Accelerate your career
&lt;/h2&gt;

&lt;p&gt;At a startup, you have a big impact as an individual contributor. If you‚Äôre joining a team of 5 engineers, you‚Äôll become ~17% of the team, and your work and ideas carry a lot of weight. Taking on this responsibility gives you an opportunity to hone your skills, master more parts of the stack, and gain confidence and great experience. Opportunity presents itself where responsibility is dropped, or, as it is in many startups ‚Äî where someone did not claim responsibility for something yet. There is a lot of joy in diving into a codebase and finding a part of it that can be made better, and there‚Äôs no one but you to guide that part of the project.&lt;/p&gt;

&lt;p&gt;This sounds exciting ‚Ä¶ For some people. Responsibility is a double-edged sword. Being an owner of a feature comes with being able to rule over your domain, but you also need to answer for your decisions. However, most of the time, it‚Äôs very beneficial and a great learning opportunity to lead features and projects. You learn a lot of important lessons very quickly, like having to deal with a lot of existing codebase‚Ä¶ Most of it, written by you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mentorship-and-learning"&gt;
  &lt;/a&gt;
  Mentorship and Learning
&lt;/h2&gt;

&lt;p&gt;Mentorship is critical to accelerating your career. Often your manager (who may be your CTO too), will be in charge of a small team, resulting in a lot of attention given to you. In a corporate role, it‚Äôs not unheard of to be talking to your manager as infrequently as once a month, for an hour. In contrast, it‚Äôs common practice in a startup to give you both a lot of 1:1 time and opportunities to better your craft through their feedback and help.&lt;/p&gt;

&lt;p&gt;With that kind of support and independence, you will find yourself being empowered to choose the projects you want to work on, and choose how exactly you want to do them. From creating a new internal service in a language you like the most, adopting a pattern that you enjoy working with, to suggesting marketing copy changes, the startup life is rife with opportunities to do things the way you like it.&lt;/p&gt;

&lt;p&gt;Another important consideration in whether or not you‚Äôre ready for this kind of job is your willingness to teach yourself anything. Since the team is quite small, even when your mentor makes themselves very available, there will still be a lot of things that you will have to pick up on your own. Where a big company would provide you with a rigorous and lengthy training program, in a startup most often you‚Äôll find yourself having to not only teach yourself what‚Äôs necessary, but also figuring out what it is that you have to learn to fill in the gaps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bad-rap"&gt;
  &lt;/a&gt;
  The bad rap
&lt;/h2&gt;

&lt;p&gt;Startups often get a bad rap. When people complain about working for startups, they often mention long hours and low pay, lousy culture (and no HR department to fix it), opportunity for employees to burnout quickly, and general chaos. As much as many of those points are true for some companies, they‚Äôre not exclusive to startups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;Working at a startup is likely going to be rewarding. The connections you will make with other people are going to be invaluable, and most startups are much more lenient in letting you choose how to do your work, whether that means choosing all of your equipment or setting up your hours according to your lifestyle and preferences. You‚Äôll develop your decisiveness, communication, and adaptability skills. And that‚Äôs all on top of the broad spectrum of technical skills you‚Äôll pick up along the way, alongside with a great job title and a list of achievements that you can confidently say were yours.&lt;/p&gt;




&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/deeheber"&gt;Danielle Heberling&lt;/a&gt; for helping out with the content.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@israelandrxde"&gt;Israel Andrade&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
