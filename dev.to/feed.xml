<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Use Python and Blender to Make More Dynamic Training Data</title>
      <author>Hugo</author>
      <pubDate>Mon, 12 Apr 2021 21:25:35 +0000</pubDate>
      <link>https://dev.to/hugop/use-python-and-blender-to-make-more-dynamic-training-data-56jh</link>
      <guid>https://dev.to/hugop/use-python-and-blender-to-make-more-dynamic-training-data-56jh</guid>
      <description>&lt;p&gt;Tools that make synthetic data generation easy are fundamentally changing the way machine learning work is done. Iterating and improving the dataset over the course of a project is more important to project success than iterating the model architecture. That's why we are releasing &lt;a href="https://github.com/ZumoLabs/zpy"&gt;zpy&lt;/a&gt;, an open source synthetic data toolkit. All developers should have the option of working with dynamic data rather than static data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#software-20"&gt;
  &lt;/a&gt;
  Software 2.0
&lt;/h1&gt;

&lt;p&gt;We are undergoing a phase change in the way software programming works [1]. As we replace our collective software stack with deep learning systems, we are going to fundamentally change many of the core abstractions and workflows that have been part of software development for decades.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ExRUQVaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx7nqqb701o6tbupfy76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ExRUQVaa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx7nqqb701o6tbupfy76.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1: Machine learning introduces a new programming paradigm [2].&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately many deep learning researchers are still stuck in the old software paradigm: spending the majority of their time and effort designing and iterating the algorithm (“Rules” in Figure 1) while using a static dataset like MNIST or ImageNet. Those of us who make machine learning work in the real world though have already come to the realization that the most important part of getting something to work is making a good dataset (“Data” and “Answers” in Figure 1). The data and the labels are really where we should spend the majority of our time and effort.&lt;/p&gt;

&lt;p&gt;Deep learning algorithms are made of the same building blocks: layers of neurons arranged in clever patterns. The exact arrangement of those neurons and the long list of accompanying tricks and widgets has been described as alchemy [3]. Researchers spend a huge amount of effort discovering the arrangements that work best, often keeping the dataset static so they can compare these arrangements quantitatively. In the real world however, engineers often do the opposite: figuring out how to get better data while simply using whatever arrangement is popular at the time.&lt;/p&gt;

&lt;p&gt;This presents a huge need for tools that make it simple to modify, adjust, and create more training data. A need which is being met by the dynamic nature of synthetic data generation. Synthetic data makes it easy to change the annotation style, or add an additional label which can be used as an additional training loss for the model. It also makes it easy to generate more examples of a specific edge case that may be causing issues in production. Synthetic data generation and iteration should be easy, and used in concert with adjustments to the model in order to achieve one’s goals.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;“Free software” means software that respects users’ freedom and community. Roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software. Thus, “free software” is a matter of liberty, not price. To understand the concept, you should think of “free” as in “free speech,” not as in “free beer”. [4]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People want to be able to shape and influence the tools they use. The best way to empower them to do that is to build those tools out in the open. The future of data creation, and thus the future of software, will be open core tools that are created in part by the developer community.&lt;/p&gt;

&lt;p&gt;The best argument for this type of development is the growing popularity of the open core model in the software startup scene. Open core is based around the idea of having the “core” of the software stack being open source and freely available online. Startups that adopt this paradigm sustain themselves by selling additional services or features on top of this open core. This stands in contrast to the more popular SaaS business model where all software is proprietary and is effectively rented out to users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dynamic-data"&gt;
  &lt;/a&gt;
  Dynamic Data
&lt;/h1&gt;

&lt;p&gt;Dynamic data is the future of training deep learning systems. Open source is the future of programming. That’s why we have decided to release &lt;a href="https://github.com/ZumoLabs/zpy"&gt;our data development toolkit zpy&lt;/a&gt; [5] under an open source license. Now everything you need to generate and iterate synthetic data for computer vision is available for free.&lt;/p&gt;

&lt;p&gt;But this is just the beginning of the phase shift we mentioned earlier. Your feedback, commits, and feature requests, will be invaluable as we continue to build a more robust set of tools for generating synthetic data. Meanwhile, if you could use hands on support with a particularly tricky problem, please &lt;a href="https://www.zumolabs.ai/contact?utm_source=dev.to&amp;amp;utm_medium=post"&gt;reach out&lt;/a&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;[1] &lt;a href="https://youtu.be/y57wwucbXR8"&gt;Building the Software 2 0 Stack&lt;/a&gt;. Video Lecture by Andrej Karpathy.&lt;br&gt;
[2] Deep Learning with Python. Book by Francois Chollet.&lt;br&gt;
[3] &lt;a href="https://youtu.be/x7psGHgatGM"&gt;Machine Learning has become Alchemy&lt;/a&gt;. Video Lecture by Ali Rahimi.&lt;br&gt;
[4] &lt;a href="https://www.gnu.org/philosophy/free-sw.html"&gt;“What is free software?”&lt;/a&gt;. Article by the GNU Operating System.&lt;br&gt;
[5] &lt;a href="https://github.com/ZumoLabs/zpy"&gt;zpy&lt;/a&gt;: an open source synthetic data toolkit.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>deeplearning</category>
      <category>python</category>
    </item>
    <item>
      <title>Bezos' Calculator</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 12 Apr 2021 20:54:18 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/bezos-calculator-4b7h</link>
      <guid>https://dev.to/alvaromontoro/bezos-calculator-4b7h</guid>
      <description>&lt;p&gt;Some developers use their weekends to develop cool and grandiose projects to learn new technologies and to double down as second (or third) sources of income... instead, I used this past weekend, to develop a small and silly project.&lt;/p&gt;

&lt;p&gt;I developed a web page that calculates how much money Jeff Bezos makes while you read it: &lt;strong&gt;&lt;a href="http://bezoscalculator.com/"&gt;Bezos' Calculator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It is a mixture of tongue in cheek and social criticism (bubbles pop up with milestones comparing it to other salaries and goods.) The numbers are based on these articles by &lt;a href="https://www.bloomberg.com/news/articles/2020-07-01/bezos-s-wealth-soars-to-171-6-billion-to-top-pre-divorce-record"&gt;Bloomberg&lt;/a&gt; and &lt;a href="https://www.buzzfeed.com/mjs538/jeff-bezos-wealth"&gt;BuzzFeed&lt;/a&gt;, which calculate Jeff Bezos' gains increase by $3,605 every second.&lt;/p&gt;

&lt;p&gt;Initially, the &lt;a href="https://codepen.io/alvaromontoro/pen/ZELrvbo"&gt;counter was animated&lt;/a&gt; like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ZELrvbo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But that animation does not work on Safari, so I opted for going with the non-animated version... for now. I will figure out another animation and replace it.&lt;/p&gt;

&lt;p&gt;One fun thing about the project is how equally it distributed it is:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4XpgV2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpmhqh8oifyzwkpsn795.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4XpgV2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fpmhqh8oifyzwkpsn795.png" alt="Screenshot of Github showing the project languages distribution: CSS is at 34.9%, JavaScript is at 32.8%, and HTML is at 32.3%"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a tiny thing (just one page), so it makes sense that the percentages of HTML, CSS, and JavaScript are more or less proportional. It's just the first time I see it like that. Normally one of the languages would dominate the project.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>An amazing template for your React application</title>
      <author>Mad Devs</author>
      <pubDate>Mon, 12 Apr 2021 19:49:34 +0000</pubDate>
      <link>https://dev.to/maddevs/an-amazing-template-for-your-react-application-2ai4</link>
      <guid>https://dev.to/maddevs/an-amazing-template-for-your-react-application-2ai4</guid>
      <description>&lt;p&gt;When creating a new React project, I faced the same problems every time. I need to build it manually because &lt;code&gt;create-react-app&lt;/code&gt; do not provide everything that we use in real projects. We need to set up data storage, routing, configure REST, styles, etc. This was quite time-consuming, and our team decided to create some templates to quick-start new projects. We’re starting to develop templates for different use cases. In this article, I want to present my work to you: a template for a &lt;code&gt;React&lt;/code&gt; application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology-stack"&gt;
  &lt;/a&gt;
  Technology Stack
&lt;/h2&gt;

&lt;p&gt;Here’s a list of libraries and dependencies used for this template. We’d decided to use minimal dependencies, and you can add anything if you need.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.React-router-dom: Declarative routing for React.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;2.Styled-components: Use the best bits of ES6 and CSS to style your apps without stress. The best CSS-in-JS library for React.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;3.React-use: Some very simple and useful hooks for components that you can build amazing things with.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;4.Prop-types: Runtime type checking for React props and similar objects.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;5.Axios: The best promise-based HTTP client for Javascript.&lt;br&gt;
6.Jest: Delightful JavaScript Testing Framework with a focus on simplicity.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;7.Testing-library: Simple and complete testing utilities that encourage good testing practices.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;8.ESLint+Prettier: Linter to find and fix problems in your JavaScript code. Prettier for code formatting.&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#first-start"&gt;
  &lt;/a&gt;
  First start
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#using-docker-and-dockercompose"&gt;
  &lt;/a&gt;
  Using docker and docker-compose
&lt;/h3&gt;

&lt;p&gt;This option is good in that you don’t need to install a lot of dependencies on your working device. Docker just encapsulates all that trash.&lt;/p&gt;

&lt;p&gt;To start the project with this option, you need to install &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/install/"&gt;docker-compose&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, you just need to run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn docker:dev&lt;/code&gt;&lt;br&gt;
When Docker installs all the necessary dependencies and builds your application, you will see Compiled successfully in your console. Your project is available on 3000 port; you can open it and start developing &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-npm"&gt;
  &lt;/a&gt;
  Using npm
&lt;/h3&gt;

&lt;p&gt;If you can’t or don’t want to use docker, you can use the default method for starting your project using &lt;a href="https://nodejs.org/en/"&gt;Node.JS and npm(yarn)&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;yarn # or npm i&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start the project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;yarn start # or npm start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The application is available at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h3&gt;

&lt;p&gt;We use react-router-dom for routing in the application. All the routes are stored in the &lt;code&gt;src/Router.jsx&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { Route, Switch } from 'react-router-dom'
// pages
import { Main, Todo } from './pages'
function Router() {
  return (
    &amp;lt;Switch&amp;gt;
      &amp;lt;Route exact path='/' component={Main} /&amp;gt;
      &amp;lt;Route exact path='/todo' component={Todo} /&amp;gt;
    &amp;lt;/Switch&amp;gt;
  )
}

export default Router
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-a-new-route"&gt;
  &lt;/a&gt;
  Adding a new route
&lt;/h2&gt;

&lt;p&gt;To create a new route, you need to do the following steps:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;1.Create the new file in the src/pages folder&lt;/code&gt;&lt;br&gt;
&lt;code&gt;2.Add the new created page in the src/pages/index.js file for better importing.&lt;/code&gt;&lt;br&gt;
&lt;code&gt;3.Add the new page in src/Router.jsx file&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#additional-information"&gt;
  &lt;/a&gt;
  Additional information
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Important&lt;/strong&gt;: The pages are used only to logically separate different parts of the application. You don’t need to use the pages as components. You can use &lt;a href="https://www.npmjs.com/package/react-helmet"&gt;react-helmet&lt;/a&gt; to set up the page’s meta-tags (title, description, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h2&gt;

&lt;p&gt;When you work with the components, it’s recommended to use a modern approach with functional components and hooks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s not recommended to use class components because they work too slowly (performance) and won’t be supported&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To create the component, you can use the following &lt;code&gt;CLI-script&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn create:component MyComponent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After using this script, the folder with your component’s name will appear in your &lt;code&gt;src/components&lt;/code&gt; folder. In this case, it will be the &lt;code&gt;src/components/MyComponent&lt;/code&gt; folder.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#components-files-description"&gt;
  &lt;/a&gt;
  Component’s files description
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;index.jsx&lt;/strong&gt;— core file with logic. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react'
import { useMount, useUpdateEffect } from 'react-use'

// view
import TodoList from './TodoList'

function Wrapper() {
  const [todos, setTodos] = useState([])

  const getInitialTodos = () =&amp;gt; {
    // ...some logic to get initialTodos from localStorage
  }

  const saveTodos = () =&amp;gt; {
    // ...some logic to save todos from localStorage
  }

  const addTodo = todo =&amp;gt; setTodos([...todos, todo])
  const removeTodo = todo =&amp;gt; setTodos([...todos.filter(todo =&amp;gt; todo === todo)]);

  // Use mount-hook for calling getInitialTodos() after mount
  useMount(() =&amp;gt; getInitialTodos())

  // Watch todos and save it in localStorage after updating
  useUpdateEffect(() =&amp;gt; saveTodos(), [todos])

  // return view with some props
  return &amp;lt;TodoList todos={todos} addTodo={addTodo} removeTodo={removeTodo} /&amp;gt;
}

export default Wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;[ComponentName].jsx&lt;/code&gt; — view file(markup). Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import PropTypes from 'prop-types'

import TodoItem from '../TodoItem'

// prop-types
const propTypes = {
  todos: PropTypes.arrayOf(PropTypes.object),
}

function TodoList({ todos }) {
  if(!Boolean(todos.length)) return &amp;lt;div className="empty"&amp;gt;No todos :)&amp;lt;/div&amp;gt;
  return (
    &amp;lt;div className="todo-list"&amp;gt;
      {todos.map(todo =&amp;gt; &amp;lt;TodoItem key={todo.id} todo={todo} /&amp;gt;)}
    &amp;lt;/div&amp;gt;
  )
}

TodoList.propTypes = propTypes

export default TodoList
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;[ComponentName].test.jsx&lt;/code&gt; — unit tests&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[ComponentName].styles.js&lt;/code&gt;— styles (styled-components by default)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/typechecking-with-proptypes.html"&gt;PropTypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Hooks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#localstorage"&gt;
  &lt;/a&gt;
  LocalStorage
&lt;/h3&gt;

&lt;p&gt;To work with localStorage you can use additional utilities: &lt;code&gt;loadState&lt;/code&gt; and &lt;code&gt;saveState Example&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { saveState, loadState }  from '../utils/localStorage'
const save = data =&amp;gt; saveState(data, 'key')
const load = () =&amp;gt; loadState('key')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h2&gt;

&lt;p&gt;To build logic within components, people usually use hooks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reactuse"&gt;
  &lt;/a&gt;
  React-use
&lt;/h3&gt;

&lt;p&gt;This is a library of additional react hooks that meet most of the needs so that you do not have to reinvent the wheel every time. &lt;a href="https://github.com/streamich/react-use"&gt;All hooks list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most useful hooks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useDebounce.md"&gt;useDebounce&lt;/a&gt; — for use debounce effect in the component&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md"&gt;useLocalStorage&lt;/a&gt; — for working with localStorage in the component&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useMount.md"&gt;useMount&lt;/a&gt; — mount lifecycle hook&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useUpdateEffect.md"&gt;useUpdateEffect&lt;/a&gt; — update lifecycle hook&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/usePrevious.md"&gt;usePrevious&lt;/a&gt; — store prevState or prevProps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useToggle.md"&gt;useBoolean&lt;/a&gt; — simple state hook for boolean values&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/streamich/react-use/blob/master/docs/useList.md"&gt;useList&lt;/a&gt; — state hook for store arrays with additional utilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#custom-hooks"&gt;
  &lt;/a&gt;
  Custom hooks
&lt;/h4&gt;

&lt;p&gt;Creating custom hooks is a very useful thing as it allows reusing large amounts of code. If you see code that will probably be reused in the future, hook it. This is an example of using a simple custom hook implementing work with API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from 'react'
import { useList, useToggle } from 'react-use'

import fetchImages from './fetchImages'

const useFetchImages = ({ source }) =&amp;gt; {
    const [images, imagesActions] = useList([])
    const [isLoading, toggleLoading] = useToggle(false)
    const [error, setError] = useState(null)

    const fetchImages = async () =&amp;gt; {
        toggleLoading(true)
        try {
            const data = await fetchImages(source)
            imagesActions.set(data)
        } catch(err) {
            setError(err)
        }
        toggleLoading(false)
    }

    return {
        images,
        isLoading,
        error,
        fetchImages,
    }
}

export default useFetchImages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#utilities"&gt;
  &lt;/a&gt;
  Utilities
&lt;/h2&gt;

&lt;p&gt;Utilities are stored in the &lt;code&gt;src/utils&lt;/code&gt; folder in separate files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#available-utilities"&gt;
  &lt;/a&gt;
  Available utilities
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;camelToSnakeCase&lt;/code&gt; and &lt;code&gt;snakeToCamelCase&lt;/code&gt;— transformation of a string into various styles of writing phrases without spaces or punctuation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;normalizeObjectKeys&lt;/code&gt; — transformation of all the object field keys using &lt;code&gt;snakeToCamelCase&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;normalizeCollectionKeys&lt;/code&gt; — transformation of all the elements(Element should be an object) of the array using &lt;code&gt;normalizeObjectKeys&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getRequestParams&lt;/code&gt; — function for getting values of get-parameters from &lt;code&gt;location.search&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;localStorage&lt;/code&gt; — utilities for working with localStorage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  Axios
&lt;/h2&gt;

&lt;p&gt;In working with API requests, the most useful library is axios with &lt;code&gt;async/await&lt;/code&gt; syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Axios&lt;/code&gt; configuration is in the &lt;code&gt;src/config/api.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-function-setapiheader"&gt;
  &lt;/a&gt;
  Additional function setApiHeader
&lt;/h3&gt;

&lt;p&gt;If you need to add a header in the existing axios instance, you can use &lt;code&gt;setApiHeader&lt;/code&gt; function. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { setApiHeader, api } from '../config'

async function authenticate() {
  // Authorization
  const response = await api.post('/auth')

  // Getting token from response
  const { token } = response

  // Set header for the next authenticated requests
  setApiHeader('Authorization', `Bearer ${token}`)
}

authenticate()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Always try to use async/await syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  Environment variables
&lt;/h3&gt;

&lt;p&gt;To work with environment variables, we need to use some config files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.env.example&lt;/code&gt; — for storing examples of variables&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.env&lt;/code&gt; — for variables
To add a new environment variable, you need to do the following steps:&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Add variables into &lt;code&gt;.env.example&lt;/code&gt; file with empty value
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_API_BASE_URL=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add variable with value int &lt;code&gt;.env&lt;/code&gt; file.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REACT_APP_API_BASE_URL=https://google.com/api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Restart the project (required)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the variable into the config (&lt;code&gt;src/config/index.js&lt;/code&gt;) and use it from config&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const config = {
  API_URL: process.env.REACT_APP_API_BASE_URL,
}

axios.get(config.API_URL)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Don’t forget to restart the project after adding/updating any &amp;gt;variables&lt;/p&gt;

&lt;p&gt;Environment variables should be ALWAYS started by REACT_APP_ ; otherwise, they won’t work&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#styles"&gt;
  &lt;/a&gt;
  Styles
&lt;/h2&gt;

&lt;p&gt;To write styles, we can use several approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scss/BEM — default styling&lt;/li&gt;
&lt;li&gt;Css-In-JS (styled-components) — a recommended option that is simpler and more convenient than the previous one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;In testing everything, &lt;code&gt;Jest&lt;/code&gt; and &lt;code&gt;React-testing-library&lt;/code&gt; are used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/docs/en/getting-started"&gt;Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testing-library.com/"&gt;Testing-library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;React-testing library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#unittests-running"&gt;
  &lt;/a&gt;
  Unit-tests running
&lt;/h3&gt;

&lt;p&gt;There are several scripts to run tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;yarn test&lt;/code&gt; — watch-mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yarn test:coverage&lt;/code&gt; — watch-mode+coverage&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yarn test:ci&lt;/code&gt; — without watch-mode + coverage + disable coloring output&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#coverage"&gt;
  &lt;/a&gt;
  Coverage
&lt;/h3&gt;

&lt;p&gt;Coverage generates after running yarn &lt;code&gt;test:coverage command.&lt;/code&gt; You can see expanded coverage in the HTML format in the &lt;code&gt;./coverage&lt;/code&gt; folder.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unit tests also have a minimal coverage threshold. If coverage is less than 80%, the tests will fail&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#formatting"&gt;
  &lt;/a&gt;
  Formatting
&lt;/h2&gt;

&lt;p&gt;Linters are to keep code clean. They prevent shitcode from getting into a repository.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eslint"&gt;
  &lt;/a&gt;
  ESLint
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; is used for linting Javascript code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/eslint-config-airbnb"&gt;Airbnb&lt;/a&gt; config is used as default.&lt;/p&gt;

&lt;p&gt;To run a linter, you can use the following npm-scripts:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn lint:js&lt;/code&gt; —to run a linter&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn lint:js:fix&lt;/code&gt; —to run a linter with autofix&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cssstyledcomponents"&gt;
  &lt;/a&gt;
  CSS(styled-components)
&lt;/h3&gt;

&lt;p&gt;To lint css code, &lt;a href="https://stylelint.io/"&gt;stylelint&lt;/a&gt; is used. The linter checks your code for typos and spelling mistakes. To run the linter, you can use &lt;code&gt;yarn lint:css&lt;/code&gt; script&lt;/p&gt;

&lt;p&gt;Find out how best to use SASS extensions for custom CSS variables &lt;a href="https://maddevs.io/blog/how-to-make-better-use-of-sass-extensions-for-custom-css-variables/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#airbnb-styleguide-links"&gt;
  &lt;/a&gt;
  Airbnb styleguide links
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/airbnb/javascript"&gt;Javascript&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/airbnb/javascript/tree/master/react"&gt;React&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To run both linters, you can use yarn lint:all script&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#jsdoc"&gt;
  &lt;/a&gt;
  JSDoc
&lt;/h2&gt;

&lt;p&gt;The optimal solution to make your code more readable and cleaner is to use JSDoc. The project doesn’t use JSDoc by default, but you can easily add it using the following helpful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jsdoc.app/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/eslint-plugin-jsdoc"&gt;Eslint-plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#running-in-production"&gt;
  &lt;/a&gt;
  Running in production
&lt;/h2&gt;

&lt;p&gt;To run the project in production, you can use yarn docker:prod script. This script does the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download dependencies&lt;/li&gt;
&lt;li&gt;Build the project&lt;/li&gt;
&lt;li&gt;Run nginx to serve static content&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#cypress"&gt;
  &lt;/a&gt;
  Cypress
&lt;/h2&gt;

&lt;p&gt;Cypress is a framework for end-to-end testing based on Javascript.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#why-cypress"&gt;
  &lt;/a&gt;
  Why Cypress?
&lt;/h3&gt;

&lt;p&gt;You can have 100% code coverage with unit tests, which test all your components separately, but your application can still fail when the components start to interact with each other. To prevent possible fails, you need to use e2e tests with Cypress. Cypress can test everything that works in a browser. To install &lt;code&gt;cypress&lt;/code&gt;, you can use the &lt;a href="https://github.com/maddevsio/react-madboiler#cypress"&gt;instructions&lt;/a&gt; in the &lt;a href="https://github.com/maddevsio/react-madboiler"&gt;&lt;code&gt;readme&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h2&gt;

&lt;p&gt;To develop modern, big &lt;code&gt;React&lt;/code&gt; applications, people most often use &lt;code&gt;Typescript&lt;/code&gt; to prevent unexpected errors and problems. &lt;code&gt;Typescript&lt;/code&gt; helps avoid primitive errors and makes &lt;code&gt;Javascript&lt;/code&gt; clearer and more expressive. &lt;code&gt;Typescript&lt;/code&gt; has its disadvantages, but the benefits most often outweigh them. If you want to use &lt;code&gt;Typescript&lt;/code&gt; along with our template, you can use &lt;a href="https://github.com/maddevsio/react-madboiler#how-to-add-typescript"&gt;the instructions&lt;/a&gt; for adding it to a project in &lt;a href="https://github.com/maddevsio/react-madboiler"&gt;&lt;code&gt;readme&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#gitlab-ci"&gt;
  &lt;/a&gt;
  Gitlab CI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.gitlab.com/ee/ci/"&gt;Gitlab CI&lt;/a&gt; is one of the easiest and most convenient tools to check and deploy your code anywhere. In our template, we use several steps to make it easy to deliver your code to production:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;install&lt;/code&gt; — installing dependencies using &lt;code&gt;yarn&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lint&lt;/code&gt; — code linting &lt;code&gt;yarn lint:all&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;test&lt;/code&gt; — running unit tests using yarn &lt;code&gt;test:ci script;&lt;/code&gt; building and &lt;strong&gt;displaying&lt;/strong&gt; coverage&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pages&lt;/code&gt; — building the project &lt;code&gt;yarn build&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pages:deploy&lt;/code&gt; — deploy to gitlab-pages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#additional-tricks"&gt;
  &lt;/a&gt;
  Additional tricks
&lt;/h2&gt;

&lt;p&gt;Here, I’ve collected a few tricks to make the development of your app easier and faster.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  CLI
&lt;/h3&gt;

&lt;p&gt;To create the component, you can use the following &lt;code&gt;CLI-script&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn create:component MyComponent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you use this script, a folder with your component’s name will appear in your &lt;code&gt;src/components&lt;/code&gt; folder. In this case, it will be the &lt;code&gt;src/components/MyComponent&lt;/code&gt; folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vscodesnippets"&gt;
  &lt;/a&gt;
  VSCode-snippets
&lt;/h4&gt;

&lt;p&gt;Here is a list of available snippets to quickly create some entities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;mdocmp&lt;/code&gt; — component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mdstyle&lt;/code&gt; — styled-components file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mdcompunit&lt;/code&gt; — unit tests for component&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mdpage&lt;/code&gt;— page&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mdhook&lt;/code&gt; — custom hook
These snippets are automatically available in your &lt;code&gt;VSCode&lt;/code&gt; because they are set up for the project. You can see and edit any snippet in the &lt;code&gt;.vscode/madboiler-snippets.code-snippets&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#useful-vscode-extensions"&gt;
  &lt;/a&gt;
  Useful VSCode extensions
&lt;/h4&gt;

&lt;p&gt;Here’s a list of the most useful VSCode extensions that make developing your &lt;code&gt;React&lt;/code&gt; application easier and faster:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;vscode-styled-components&lt;/code&gt; — styled-components support&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Visual Studio IntelliCode&lt;/code&gt; — intelliSense for VSCode (AI-assit)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TODO Highlight&lt;/code&gt; — highlight your #todos&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;React PropTypes Intellisense&lt;/code&gt; — intelliSense for PropTypes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Prettier&lt;/code&gt; — for autoformatting&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Path Intellisense&lt;/code&gt; — intelliSense for ES6 imports/exports&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ESLint&lt;/code&gt; — lint highlight&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%D1%81onclusion"&gt;
  &lt;/a&gt;
  Сonclusion
&lt;/h2&gt;

&lt;p&gt;This article shows you the template that we actively use when creating new projects. The template includes everything you need and describes some additional useful things (such as typescript and cypress). Feel free to use our template, and if you have any questions or problems with it, we promise to help you. Thanks for reading!&lt;/p&gt;

&lt;p&gt;Previously published at &lt;a href="https://maddevs.io/blog/amazing-template-for-react-application/?utm_source=devto&amp;amp;utm_medium=react-application"&gt;maddevs.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ember 3.26 Released</title>
      <author>Ember.js</author>
      <pubDate>Mon, 12 Apr 2021 19:34:53 +0000</pubDate>
      <link>https://dev.to/emberjs/ember-3-26-released-2mef</link>
      <guid>https://dev.to/emberjs/ember-3-26-released-2mef</guid>
      <description>&lt;p&gt;Today the Ember project is releasing version 3.26 of Ember.js, Ember Data, and Ember CLI.&lt;/p&gt;

&lt;p&gt;This release kicks off the 3.27 beta cycle for all sub-projects. We encourage our community (especially addon authors) to help test these beta builds and report any bugs before they are published as a final release in six weeks' time. The &lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;You can read more about our general release process here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://emberjs.com/releases/"&gt;Release Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/new-ember-release-process/"&gt;The Ember Release Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/ember-project-at-2-0/"&gt;The Ember Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.emberjs.com/announcing-embers-first-lts/"&gt;Ember LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#emberjs"&gt;
  &lt;/a&gt;
  Ember.js
&lt;/h2&gt;

&lt;p&gt;Ember.js is the core framework for building ambitious web applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-emberjs-326"&gt;
  &lt;/a&gt;
  Changes in Ember.js 3.26
&lt;/h3&gt;

&lt;p&gt;Ember.js 3.26 is an incremental, backwards compatible release of Ember with bug fixes, performance improvements, and minor deprecations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced 5 bug fixes. Here are a few notable ones:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Ember router and the &lt;code&gt;router&lt;/code&gt; service have been updated so that an infinite recursion does not occur when the &lt;code&gt;router&lt;/code&gt; service is injected into &lt;code&gt;app/router.js&lt;/code&gt;. (&lt;a href="https://github.com/emberjs/ember.js/pull/19405"&gt;#19405&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;You can pass to an observer a dependent key whose name includes a colon. (&lt;a href="https://github.com/emberjs/ember.js/issues/19343"&gt;#19343&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The Glimmer VM has been updated to prevent eagerly consuming arguments during modifier destruction. (&lt;a href="https://github.com/emberjs/ember.js/pull/19469"&gt;#19469&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced 0 features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember.js 3.26 introduced several deprecations in preparation for v4.0 release. To learn more how to update your code, please check the provided link to the Deprecations Guide.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Transition methods of controllers and routes have been deprecated. Inject the &lt;code&gt;router&lt;/code&gt; service and use the service's methods instead. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_routing-transition-methods"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19255"&gt;#19255&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Invoking the &lt;code&gt;&amp;lt;LinkTo&amp;gt;&lt;/code&gt; component with positional arguments has been deprecated. Please provide named arguments such as &lt;code&gt;@route&lt;/code&gt;, &lt;code&gt;@model&lt;/code&gt;, &lt;code&gt;@models&lt;/code&gt;, and &lt;code&gt;@query&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_ember-glimmer-link-to-positional-arguments"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19345"&gt;#19345&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;{{with}}&lt;/code&gt; helper has been deprecated, in favor of using &lt;code&gt;{{let}}&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_ember-glimmer-with-syntax"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19346"&gt;#19346&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Implicit injection has been deprecated. In particular, the &lt;code&gt;store&lt;/code&gt; service from Ember Data must be explicitly injected into controllers and routes if they refer to &lt;code&gt;this.store&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_implicit-injections"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19358"&gt;#19358&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Browser support of Internet Explorer 11 has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_3-0-browser-support-policy"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19359"&gt;#19359&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Property fallback for implicit &lt;code&gt;this&lt;/code&gt; has been deprecated. Please review the templates in your app and write &lt;code&gt;this.&lt;/code&gt; when it is appropriate, e.g. change &lt;code&gt;{{localProperty}}&lt;/code&gt; to &lt;code&gt;{{this.localProperty}}&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_this-property-fallback"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19371"&gt;#19371&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ember Classic has been deprecated.&lt;/strong&gt; (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_editions-classic"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19372"&gt;#19372&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In preparation for v4.0 release, developers are encouraged to update their app to Ember Octane by following these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;config/optional-features.json&lt;/code&gt;, update the feature flags for Octane.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"application-template-wrapper"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jquery-integration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"template-only-glimmer-components"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Specify the Octane edition in &lt;code&gt;package.json&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ember"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"edition"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"octane"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check the &lt;a href="https://guides.emberjs.com/release/upgrading/current-edition/"&gt;official upgrade guide&lt;/a&gt; and seek help in the &lt;code&gt;#help&lt;/code&gt; channel on &lt;a href="https://discord.gg/emberjs"&gt;Ember Discord&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(list continued from above)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Component managers that use the &lt;code&gt;v3.4&lt;/code&gt; capabilities should update to the most recent component capabilities available, which is currently &lt;code&gt;v3.13&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_manager-capabilities-components-3-4"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19373"&gt;#19373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Modifier managers that use the &lt;code&gt;v3.13&lt;/code&gt; capabilities should update to the most recent modifier capabilities available, which is currently &lt;code&gt;v3.22&lt;/code&gt;. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_manager-capabilities-modifiers-3-13"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19373"&gt;#19373&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;{{hasBlock}}&lt;/code&gt; and &lt;code&gt;{{hasBlockParams}}&lt;/code&gt; properties have been deprecated. Use &lt;code&gt;{{has-block}}&lt;/code&gt; and &lt;code&gt;{{has-block-params}}&lt;/code&gt; helpers instead. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_has-block-and-has-block-params"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19374"&gt;#19374&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Passing &lt;code&gt;classBinding&lt;/code&gt; and &lt;code&gt;classNameBindings&lt;/code&gt; as arguments has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_class-binding-and-class-name-bindings-in-templates"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19375"&gt;#19375&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Accessing named arguments via &lt;code&gt;{{attrs}}&lt;/code&gt; has been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_attrs-arg-access"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19375"&gt;#19375&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Array observers have been deprecated. (&lt;a href="https://deprecations.emberjs.com/v3.x#toc_array-observers"&gt;Deprecations Guide&lt;/a&gt;, &lt;a href="https://github.com/emberjs/ember.js/pull/19381"&gt;#19381&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Deprecations are added to Ember.js when an API will be removed at a later date. Each deprecation has an entry in the deprecation guide describing the migration path to a more stable API. Deprecated public APIs are not removed until a major release of the framework.&lt;/p&gt;

&lt;p&gt;Consider using the &lt;a href="https://github.com/mixonic/ember-cli-deprecation-workflow"&gt;ember-cli-deprecation-workflow&lt;/a&gt; addon if you would like to upgrade your application without immediately addressing deprecations.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember.js 3.26, please review the &lt;a href="https://github.com/emberjs/ember.js/releases/tag/v3.26.0"&gt;Ember.js 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-data"&gt;
  &lt;/a&gt;
  Ember Data
&lt;/h2&gt;

&lt;p&gt;Ember Data is the official data persistence library for Ember.js applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-ember-data-326"&gt;
  &lt;/a&gt;
  Changes in Ember Data 3.26
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 bug fixes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 features.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember Data 3.26 introduced 0 deprecations.&lt;/p&gt;

&lt;p&gt;For more details on changes in Ember Data 3.26, please review the&lt;br&gt;
&lt;a href="https://github.com/emberjs/data/releases/tag/v3.26.0"&gt;Ember Data 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#ember-cli"&gt;
  &lt;/a&gt;
  Ember CLI
&lt;/h2&gt;

&lt;p&gt;Ember CLI is the command line interface for managing and packaging Ember.js applications.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#upgrading-ember-cli"&gt;
  &lt;/a&gt;
  Upgrading Ember CLI
&lt;/h3&gt;

&lt;p&gt;You may upgrade Ember CLI using the &lt;code&gt;ember-cli-update&lt;/code&gt; project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx ember-cli-update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This utility will help you to update your app or addon to the latest Ember CLI version. You will probably encounter merge conflicts, in which the default behavior is to let you resolve conflicts on your own. For more information on the &lt;code&gt;ember-cli-update&lt;/code&gt; project, see &lt;a href="https://github.com/ember-cli/ember-cli-update"&gt;the GitHub README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While it is recommended to keep Ember CLI versions in sync with Ember and Ember Data, this is not required. After updating ember-cli, you can keep your current version(s) of Ember or Ember Data by editing &lt;code&gt;package.json&lt;/code&gt; to revert the changes to the lines containing &lt;code&gt;ember-source&lt;/code&gt; and &lt;code&gt;ember-data&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changes-in-ember-cli-326"&gt;
  &lt;/a&gt;
  Changes in Ember CLI 3.26
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 2 bug fixes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Issue a better error message for add-on's missing an entry point. (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9473"&gt;#9473&lt;/a&gt;); and&lt;/li&gt;
&lt;li&gt;Add Prettier files to &lt;code&gt;.npmignore&lt;/code&gt; file in addon blueprint (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9437"&gt;#9437&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 1 feature.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;ember-try&lt;/code&gt; test scenarios for &lt;code&gt;embroider-safe&lt;/code&gt; and &lt;code&gt;embroider-optimized&lt;/code&gt; for addons are now enabled using &lt;a href="https://github.com/embroider-build/embroider/tree/master/packages/test-setup"&gt;@embroider/test-setup&lt;/a&gt; allowing Embroider compatibility testing for addons test matrix (&lt;a href="https://github.com/ember-cli/ember-cli/pull/9436"&gt;#9436&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#deprecations"&gt;
  &lt;/a&gt;
  Deprecations
&lt;/h4&gt;

&lt;p&gt;Ember CLI 3.26 introduced 0 deprecations.&lt;/p&gt;

&lt;p&gt;For more details on the changes in Ember CLI 3.26 and detailed upgrade&lt;br&gt;
instructions, please review the &lt;a href="https://github.com/ember-cli/ember-cli/releases/tag/v3.26.0"&gt;Ember CLI 3.26.0 release page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h2&gt;

&lt;p&gt;As a community-driven open-source project with an ambitious scope, each of these releases serves as a reminder that the Ember project would not have been possible without your continued support. We are extremely grateful to our contributors for their efforts.&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>news</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Using "noopener" and ”noreferrer” against Phishing Attacks</title>
      <author>Beto Muniz</author>
      <pubDate>Mon, 12 Apr 2021 19:24:45 +0000</pubDate>
      <link>https://dev.to/obetomuniz/using-noopener-and-noreferrer-against-phishing-attacks-3jj9</link>
      <guid>https://dev.to/obetomuniz/using-noopener-and-noreferrer-against-phishing-attacks-3jj9</guid>
      <description>&lt;p&gt;Want to help users to avoid some Phishing Attacks with &lt;strong&gt;HTML&lt;/strong&gt;? &lt;/p&gt;

&lt;p&gt;👉 Use &lt;code&gt;rel="noopener noreferrer"&lt;/code&gt; while adding external links to your website to improve user navigation security.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 External Link
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;🐿 &lt;strong&gt;noopener&lt;/strong&gt;: tells the browser to remove sensitive data from &lt;code&gt;window.opener&lt;/code&gt; object when the user arrives at the destination website.&lt;/p&gt;

&lt;p&gt;🤓 &lt;strong&gt;noreferrer&lt;/strong&gt;: protect sensitive data of the origin website removing it from the &lt;code&gt;Referrer&lt;/code&gt; header while the user navigates between origin website and destination website.&lt;/p&gt;




&lt;p&gt;😋 Super easy security strategy to implement. Adopt this recommendation without moderation. &lt;/p&gt;

&lt;p&gt;💌 Also, don't miss content like this &lt;a href="https://www.getrevue.co/profile/obetomuniz"&gt;signing my newsletter&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>cybersecurity</category>
      <category>security</category>
      <category>html</category>
    </item>
    <item>
      <title>5 Github Elements you have to try</title>
      <author>Jordan Finneran</author>
      <pubDate>Mon, 12 Apr 2021 19:23:45 +0000</pubDate>
      <link>https://dev.to/jordanfinners/5-github-elements-you-have-to-try-2jdc</link>
      <guid>https://dev.to/jordanfinners/5-github-elements-you-have-to-try-2jdc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="#intro"&gt;Intro&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#time"&gt;Time Elements&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#crop"&gt;Image Cropping Element&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#files"&gt;File Attachment Element&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#copy"&gt;Copy Element&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#text"&gt;Text Expander Element&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="#summary"&gt;Summary&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I'm a big fan of &lt;a href="https://css-tricks.com/an-introduction-to-web-components/"&gt;web components&lt;/a&gt;. Reusable web elements that can work anywhere.&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://twitter.com/43081j"&gt;friend&lt;/a&gt; showed me this awesome set of components from Github.&lt;br&gt;
I can't believe that I hadn't come across them before so I thought I'd share a few of the best ones with you!&lt;/p&gt;

&lt;p&gt;These all work across all modern browsers, and browser support is documented.&lt;br&gt;
They have virtually no dependencies either so they will be blazing fast, unlike other solutions to some of these problems.&lt;br&gt;
More importantly they are battle tested as they are the elements Github uses itself!!&lt;/p&gt;

&lt;p&gt;TLDR; &lt;a href="https://github.com/github/github-elements"&gt;Checkout the repository&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#time-elements"&gt;
  &lt;/a&gt;
  Time Elements &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Displaying Times can be hard! Figuring out how long ago something was to display in a human friendly format, or how long it is until an event.&lt;/p&gt;

&lt;p&gt;Github have solved this for you, all with 0 dependencies!!&lt;/p&gt;

&lt;p&gt;These are the same components you will have seen on Github itself where it displays times for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="/images/5-github-elements-you-have-to-try.webp" class="article-body-image-wrapper"&gt;&lt;img src="/images/5-github-elements-you-have-to-try.webp" alt="Github Time Element" title="Github Time Elements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is really handy for any project when you need to display the time, you also know its tried and tested with it used themselves.&lt;/p&gt;

&lt;p&gt;There are a &lt;a href="https://github.com/github/time-elements"&gt;few different types of time display available&lt;/a&gt;.&lt;br&gt;
They even have a &lt;a href="https://github.github.io/time-elements/examples/"&gt;demo page&lt;/a&gt; available too!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#image-cropping-element"&gt;
  &lt;/a&gt;
  Image Cropping Element &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Image cropping can be a nightmare, and getting a library that handles it also can be difficult to setup and use. Github to the rescue!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/github/image-crop-element"&gt;Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.github.io/image-crop-element/examples/"&gt;Demo Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is really cool, especially the various ways Github advise you can use this, including automatically updating the values in inputs which you can send off to the server.&lt;/p&gt;

&lt;p&gt;And again, it has no dependencies so will be super fast!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#file-attachment-element"&gt;
  &lt;/a&gt;
  File Attachment Element &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;File uploads, I'm pretty certain everyone will have had to develop one of these in their career! Well now it's just an element away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/github/file-attachment-element"&gt;Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.github.com/file-attachment-element/examples/"&gt;Demo Page&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#copy-element"&gt;
  &lt;/a&gt;
  Copy Element &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;With the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText"&gt;Clipboard API&lt;/a&gt; it's now fairly easy to write some logic to copy out some text to the users clipboard. But Github does this and one better by letting you bind to elements and there values for example, copying out a URL from a link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;clipboard-copy&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"blob-path"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Copy full URL&lt;span class="nt"&gt;&amp;lt;/clipboard-copy&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"blob-path"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/path/to#my-blob"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Link text will not be copied&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Couldn't be easier!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/github/clipboard-copy-element"&gt;Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.github.com/clipboard-copy-element/examples/"&gt;Demo Page&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-expander-element"&gt;
  &lt;/a&gt;
  Text Expander Element &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Ever wondered how Github looks up users or issues as you type? Wonder no more as you can do it exactly like they do with another really simple element!&lt;br&gt;
This would be super useful for anyone building social sites for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/github/text-expander-element"&gt;Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.github.com/text-expander-element/examples/"&gt;Demo Page&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Github have done amazing work here, and I cannot thank the engineers who wrote them enough.&lt;br&gt;
I've already started using these elements in projects I work on, and it has saved me plenty of time already!&lt;/p&gt;

&lt;p&gt;There are lots more elements to take a look at so check the &lt;a href="https://github.com/github/github-elements"&gt;whole repository and examples here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/JordanFinners" rel="me noopener noreferrer"&gt;Let me know&lt;/a&gt; which are your favorites!&lt;/p&gt;

&lt;p&gt;Happy Building!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Axios PUT Verb</title>
      <author>Tim Myers</author>
      <pubDate>Mon, 12 Apr 2021 19:19:49 +0000</pubDate>
      <link>https://dev.to/denvercoder/axios-put-verb-4d0f</link>
      <guid>https://dev.to/denvercoder/axios-put-verb-4d0f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#axios-put-verb-and-why-i-suck"&gt;
  &lt;/a&gt;
  Axios PUT Verb And Why I Suck
&lt;/h1&gt;

&lt;p&gt;So this is one of those posts where I had such a hard time I just wanted to document it so I would have a note for myself in the future.&lt;/p&gt;

&lt;p&gt;Here's the issue I was having:&lt;/p&gt;

&lt;p&gt;We have a project that uses React for the frontend and Azure Functions for the API. One of our Azure functions for submitting an order required, GET, PUT, POST, DELETE.&lt;/p&gt;

&lt;p&gt;I got the function setup and all of the backend code was working using Postman to submit requests to the API.&lt;/p&gt;

&lt;p&gt;When I started working on the front end everything was working except for the PUT verb.&lt;/p&gt;

&lt;p&gt;The DELETE verb code looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleOrderDelete = async (orderId) =&amp;gt; {
  const token = await getTokenSilently()
  var response = axios.delete(`http:localhost:3000/${orderId}`, {
      headers: {
          Authorization: `Bearer ${token}`,
          'content-type': 'application/json',
          'x-functions-key': "AZURE FUNCTION KEY HERE",
      },
  })
  if (response.statusCode === 200) {
      console.log(response)
  } else {
      console.error(response)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The PUT verb code looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const handleOrderEdit = async (orderId) =&amp;gt; {
  const token = await getTokenSilently()
  var response = axios.put(`http:localhost:3000/${orderId}`, {
      headers: {
          Authorization: `Bearer ${token}`,
          'content-type': 'application/json',
          'x-functions-key': "AZURE FUNCTION KEY HERE",
      },
  })
  if (response.statusCode === 200) {
      console.log(response)
  } else {
      console.error(response)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now at this point it's important to note that I copied the &lt;code&gt;handleOrderEdit&lt;/code&gt; code from the &lt;code&gt;handleOrderDelete&lt;/code&gt; code. They are VERY similar, the only main difference being the &lt;code&gt;.put&lt;/code&gt; and &lt;code&gt;.delete&lt;/code&gt; verbs themselves.&lt;/p&gt;

&lt;p&gt;Now if you're astute and you are familiar with Axios you may already see the issue. If not see if you can figure it out.&lt;/p&gt;

&lt;p&gt;So the DELETE was working, but when I ran the PUT I was getting a 401 on the Network tab in chrome devtools. In my C# console I was getting the error, &lt;code&gt;NO TOKEN. ERROR&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When I looked at the request payload I saw that I had a token, "Bearer 8df7saf8d7sa8f9dsa7f89saf6798saf" or whatever. Most importantly my breakpoint I set in Visual Studio right on the opening bracket of the PUT method was not being hit.&lt;/p&gt;

&lt;p&gt;I replaced the &lt;code&gt;axios.put&lt;/code&gt; call with a fetch call since they use a similar API. I had narrowed my search down to some issue with axios at this point because it was working in Postman.&lt;/p&gt;

&lt;p&gt;I added the fetch like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch(`http://localhost:3000/${orderId}`, {
            headers: {
                Authorization: `Bearer ${token}`,
                'content-type': 'application/json',
                'x-functions-key': 'AZURE FUNCTION KEY HERE',
            },
        })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and it worked just fine. I started looking a bit closer and I noticed something. When I submitted my request with axios the Bearer token was in the Payload, not in the Request Header. Hmm.&lt;/p&gt;

&lt;p&gt;So, to make a long story short, (too late amirite???), I didn't realize that the PUT verb requires a body. We're not sending a body because all we're doing is setting the order back to a different status but we're using the PUT because all of the other verbs are being used.&lt;/p&gt;

&lt;p&gt;Typically you would ALWAYS send a body with a PUT because you're updating a record and you need to send the information your replacing. Ours is a unique usecase and since we're sending the &lt;code&gt;orderId&lt;/code&gt; in the url then we didn't need to send a body.&lt;/p&gt;

&lt;p&gt;The code that fixed this whole thing is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const handleOrderSign = async (orderId) =&amp;gt; {
        const token = await getTokenSilently()
        var response = axios.put(
            `${api.order.url}/${orderId}`,
            {orderId}, // &amp;lt; -- this
            {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'content-type': 'application/json',
                    'x-functions-key': api.order.key,
                },
            }
        )
        if (response.statusCode === 200) {
            console.log(response)
        } else {
            console.error(response)
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though I don't need to send a body I'm sending the &lt;code&gt;orderId&lt;/code&gt; in the body just so I better conform to the axios standard.&lt;/p&gt;

&lt;p&gt;So this is either one of those things that everyone knows and I'm just slow on the uptake, or this is something that happened because we're not using the tool the way it was intended, or it's a lack of documentation on axios' side. &lt;/p&gt;

&lt;p&gt;Anyway,&lt;/p&gt;

&lt;p&gt;Thanks for reading and that's all y'all.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>iamdumb</category>
    </item>
    <item>
      <title>React - mouse button press and hold example</title>
      <author>Dirask-React</author>
      <pubDate>Mon, 12 Apr 2021 19:19:45 +0000</pubDate>
      <link>https://dev.to/diraskreact/react-mouse-button-press-and-hold-example-1eck</link>
      <guid>https://dev.to/diraskreact/react-mouse-button-press-and-hold-example-1eck</guid>
      <description>&lt;p&gt;Hi there! 👋😊&lt;/p&gt;

&lt;p&gt;In this article, I would like to show you mouse button press and hold example in React. 🖱&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before we start&lt;/strong&gt;, I would highly recommend you to check out the &lt;strong&gt;runnable example&lt;/strong&gt; for the solution on our website:&lt;br&gt;
&lt;a href="https://dirask.com/posts/pzrAap"&gt;React - mouse button press and hold example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the beginning, I wanted to tell you that unfortunately there is no press and hold mouse button event in React. 😥&lt;br&gt;
However, I will show you how to perform some logic when the mouse button is pressed and held, and how to break this logic when we stop pressing the button or when our cursor leaves the button field.&lt;/p&gt;

&lt;p&gt;Final result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNb0reoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtt7saxvvl8ea6jm7k9q.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNb0reoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtt7saxvvl8ea6jm7k9q.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below example presents how to create a &lt;code&gt;counter&lt;/code&gt; which increments on button press and hold every 0.1s. As the &lt;code&gt;counter&lt;/code&gt; increases, the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of my element also increase, as they depend precisely on the &lt;code&gt;counter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the example I've used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useState&lt;/code&gt; hook - to manage the &lt;code&gt;counter&lt;/code&gt; as App component's state,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useRef&lt;/code&gt; hook - to create a reference that will help us to set and clear the interval,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onMouseDown&lt;/code&gt; event - to start incrementing the &lt;code&gt;counter&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onMouseUp&lt;/code&gt; / &lt;code&gt;onMouseLeave&lt;/code&gt; events  - to stop incrementing the &lt;code&gt;counter&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useEffect&lt;/code&gt; hook - to stop the &lt;code&gt;counter&lt;/code&gt; when App component is destroyed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Practical example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;intervalRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;stopCounter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// when App is unmounted we should stop counter&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="c1"&gt;// styles --------------------------------------&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;300px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;300px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elementStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;radial-gradient(at 25% 25%, #2b86c5, #562b7c, #ff3cac)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2px solid black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;50%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;boxShadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10px 5px 5px #BEBEBE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// functions -----------------------------------&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevCounter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCounter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stopCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;intervalRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;containerStyle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;
        &lt;span class="na"&gt;onMouseDown&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;startCounter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onMouseUp&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stopCounter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onMouseLeave&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stopCounter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;elementStyle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can run this example &lt;a href="https://dirask.com/posts/pzrAap"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's my version of handling mouse press and hold event in React.&lt;br&gt;
Let me know what you think in the comments. 💬&lt;br&gt;
Maybe you have a better solution? I would be glad if you share it with me! 😊&lt;/p&gt;

&lt;p&gt;Thanks for your time and see you in the next posts! 🔥&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#write-to-us-%E2%9C%89"&gt;
  &lt;/a&gt;
  Write to us! ✉
&lt;/h2&gt;

&lt;p&gt;If you have any problem to solve or questions that no one can answer related to a React or JavaScript topic, or you're looking for a mentoring write to us on &lt;a href="https://dirask.com/questions"&gt;dirask.com -&amp;gt; Questions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also join our &lt;a href="https://www.facebook.com/groups/125343696143974"&gt;facebook group&lt;/a&gt; where we share  coding tips and tricks with others! 🔥&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Beginner's Guide to Unit-testing with Jest</title>
      <author>Daniel Sasse</author>
      <pubDate>Mon, 12 Apr 2021 19:12:23 +0000</pubDate>
      <link>https://dev.to/dsasse07/a-beginner-s-guide-to-unit-testing-with-jest-45cc</link>
      <guid>https://dev.to/dsasse07/a-beginner-s-guide-to-unit-testing-with-jest-45cc</guid>
      <description>&lt;p&gt;Unit testing is an integral part of Test-Driven Development (TDD) which is the process of defining the desired actions of a function and what we expect it to do (or not do) before we begin work on the actual function. Approaching software development in this fashion serves a number of purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this process can help define a path to success by outlining the tasks that must be done over the course of the function. &lt;/li&gt;
&lt;li&gt;this process can help identify edge-case scenarios and ensure that your code continues to function as expected in these situations. &lt;/li&gt;
&lt;li&gt;As the codebase continues to grow and be modified, this process also ensures that changes to other parts of the codebase do not negatively effect the performance of the tested function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programming languages have their own frameworks for developing unit tests. For Javascript, Jest is one of the most widely used testing frameworks, and I hope this blog serves as a beginner's guide for those looking to get started in writing their own Jest tests.&lt;/p&gt;

&lt;p&gt;We will walk through the process of setting up basic Jest tests and the files, but you can view &lt;a href="https://github.com/dsasse07/jest-example"&gt;the repo containing all of the code here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#setting-up-jest"&gt;Setting Up Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#identify-desired-actions"&gt;Identifying Desired Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initializing-the-test-file"&gt;Initializing the Test File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-tests"&gt;Writing Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-the-tests"&gt;Running the Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-functions"&gt;Writing the Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-jest"&gt;
  &lt;/a&gt;
  Setting Up Jest
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory, and &lt;code&gt;cd&lt;/code&gt; into that directory.&lt;/li&gt;
&lt;li&gt;Set up the NPM environment
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;jest-example &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;jest-example 
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install Jest
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i jest &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Configure the NPM environment to use Jest by modifying the &lt;code&gt;package.json&lt;/code&gt; file created earlier. This edit will cause the command &lt;code&gt;npm test&lt;/code&gt; to run the tests we will be building.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// In package.json&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#identify-desired-actions"&gt;
  &lt;/a&gt;
  Identify Desired Actions
&lt;/h2&gt;

&lt;p&gt;To begin writing the tests, we must define what the function we will be building &lt;em&gt;should&lt;/em&gt; do, and what the &lt;em&gt;expected&lt;/em&gt; outcome should be when the function is invoked.&lt;/p&gt;

&lt;p&gt;For our example, let's consider an object containing information about a user's blog posts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 1 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 2 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be writing two functions, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getTotalLikes&lt;/code&gt; to get the total number of likes of the given user's posts,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getMostPopularBlog&lt;/code&gt; to return the blog object of a specified user with the most likes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the TDD process, we will develop tests for these functions prior to working out the logic for the functions themselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-test-file"&gt;
  &lt;/a&gt;
  Initializing the Test File
&lt;/h2&gt;

&lt;p&gt;Typically, tests are written in a &lt;code&gt;tests&lt;/code&gt; or &lt;code&gt;__tests__&lt;/code&gt; subdirectory of the app, and we will follow this same convention. From the root of our example project, let's create a &lt;code&gt;tests&lt;/code&gt; directory and the file which will contain our tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;tests &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;tests &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;exampleFunctions.test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we must do in this new file is to import the functions that we will be testing (it's ok that they have not yet been written.) For the sake of this blog, we will be writing both of the sample functions into the same &lt;code&gt;.js&lt;/code&gt; file, and we will use destructuring in the import to get access to both of those functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// jest-example/tests/exampleFunctions.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../exampleFunctions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both of the example functions discussed above will be tested using the same sample &lt;code&gt;user&lt;/code&gt; object mentioned previously, so we can define this globally for our tests file as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// jest-example/tests/exampleFunctions.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../exampleFunctions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 1 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 2 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-tests"&gt;
  &lt;/a&gt;
  Writing tests
&lt;/h2&gt;

&lt;p&gt;Tests typically contain these general components: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;describe&lt;/code&gt; function is invoked which accepts two arguments: 

&lt;ul&gt;
&lt;li&gt;a string (a description that will appear in the terminal when tests are run, which "describes" the test block)&lt;/li&gt;
&lt;li&gt;a callback function which will contain the individual tests..&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;One (or more) &lt;code&gt;test&lt;/code&gt; function which accepts two arguments: 

&lt;ul&gt;
&lt;li&gt;a string describing the action of the specific test, &lt;/li&gt;
&lt;li&gt;a callback function containing an &lt;code&gt;expect&lt;/code&gt; function and a &lt;code&gt;matcher&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;expect&lt;/code&gt; function accepts the function invocation being tested, and is chained to the &lt;code&gt;matcher&lt;/code&gt; which describes the expected results.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;code&gt;getTotalLikes&lt;/code&gt; function, we &lt;strong&gt;expect&lt;/strong&gt; that when the function is passed a user object, the return value &lt;strong&gt;will be&lt;/strong&gt; an integer that is the sum of the &lt;code&gt;likes&lt;/code&gt; on all of the blogs of that user. Including this into our test file would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// jest-example/tests/exampleFunctions.test.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../exampleFunctions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 1 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 2 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getTotalLikes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the total likes of a user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;230&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the &lt;code&gt;.toBe&lt;/code&gt; matcher is used to define the expected output of the function invocation written in the preceeding &lt;code&gt;expect&lt;/code&gt; statement. The &lt;code&gt;.toBe&lt;/code&gt; matcher returns truthy if the output of the function is equal to the value passed into the matcher. The Jest framework has a number of defined matchers, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;toBeNull&lt;/code&gt; matches only null&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeUndefined&lt;/code&gt; matches only undefined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeDefined&lt;/code&gt; is the opposite of toBeUndefined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeTruthy&lt;/code&gt; matches anything that an if statement treats as true&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeFalsy&lt;/code&gt; matches anything that an if statement treats as false&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toBeGreaterThan&lt;/code&gt; or &lt;code&gt;toBeLessThan&lt;/code&gt; for number value comparisons&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toMatch&lt;/code&gt; accepts a Regex pattern to match a string output&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toContain&lt;/code&gt; can be used to see if a value is contained in an Array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More common Jest Matchers can be found in the &lt;a href="https://jestjs.io/docs/using-matchers"&gt;official introduction here&lt;/a&gt; or a complete list can be found &lt;a href="https://jestjs.io/docs/expect"&gt;in the official docs here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For our second function, we can define the expected output object within the &lt;code&gt;describe&lt;/code&gt; block's scope and pass this object into our matcher. Doing this, we will again be checking for equality; however when dealing with objects, we must use &lt;code&gt;.toEqual&lt;/code&gt; instead, which iterates through all of the values of the objects to check for equality.&lt;/p&gt;

&lt;p&gt;With this in mind, we must add this final &lt;code&gt;describe&lt;/code&gt; block to our test file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getMostPopularBlog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return the most popular blog of a user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Entry 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blog 1 Content...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-the-tests"&gt;
  &lt;/a&gt;
  Running the Tests
&lt;/h2&gt;

&lt;p&gt;The tests we have written should clearly fail because we have not yet written the functions; however, we can run the test to ensure that they are properly set up.&lt;/p&gt;

&lt;p&gt;To run the tests, run &lt;code&gt;npm test&lt;/code&gt; (which matches the command we defined in the &lt;code&gt;package.json&lt;/code&gt;). We are wonderfully greeted with the expected failures that our functions are not defined, and it indicates that our test file is prepared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;FAIL&lt;/span&gt;  &lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;exampleFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
  &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;popular&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;

  &lt;span class="err"&gt;●&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt; &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;

    &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-the-functions"&gt;
  &lt;/a&gt;
  Writing the functions
&lt;/h2&gt;

&lt;p&gt;Create a new file in &lt;code&gt;/jest-example&lt;/code&gt; which will contain our functions. The name of the file should match the filename of the test file, minus the &lt;code&gt;.test&lt;/code&gt; extension.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;/jest-example&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;exampleFunctions.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file we need to define out two functions, and ensure that we export those functions so that our test file can access them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we save and run our tests again, we will see that all four tests still fail (which is expected), but Jest provides a ne message to us indicating what happened.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;
    &lt;span class="err"&gt;✕&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;popular&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="err"&gt;●&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt; &lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Object.is equality&lt;/span&gt;

    &lt;span class="nx"&gt;Expected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;
    &lt;span class="nx"&gt;Received&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This message indicates that our test is able to find the matching function, unlike before, but now instead of getting the expected value that was passed to the &lt;code&gt;matcher&lt;/code&gt;, no value is being returned from our function. Let's implement the logic for our two functions as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;// iterate through the blog entries and sum the like values&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalLikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalLikes&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;// Iterate through users blogs, and update the tracking object to&lt;/span&gt;
  &lt;span class="c1"&gt;// continually have the index of the blog with most likes, and the &lt;/span&gt;
  &lt;span class="c1"&gt;// number of likes for comparison&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxLikes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
          &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;likes&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;//Select get the blog object by looking up the index stored in the tracker&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;topBlog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;maxLikes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;topBlog&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we run the tests one final time, we are greeted with pass indicators:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="nx"&gt;PASS&lt;/span&gt;  &lt;span class="nx"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;exampleFunctions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
  &lt;span class="nx"&gt;getTotalLikes&lt;/span&gt;
    &lt;span class="err"&gt;✓&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="nx"&gt;likes&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;getMostPopularBlog&lt;/span&gt;
    &lt;span class="err"&gt;✓&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;most&lt;/span&gt; &lt;span class="nx"&gt;popular&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="nx"&gt;Suites&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Snapshots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;0.713&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;estimated&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Testing is powerful. Even with these limited tests, we would would be able to see if changes further along in the development process negatively impact the work we have already done. For example, if the structure of the API response that we used to build the &lt;code&gt;user&lt;/code&gt; object changed, running the test file would indicate an issue prior to that change going into effect. This is especially important in development teams, where multiple developers are working on the same codebase. The tests help ensure that new code remains compatible and functional with the codebase and with that of other developers.&lt;/p&gt;

&lt;p&gt;However, the reliability and power of testing is limited by the comprehensiveness of the test scenarios. As you are building tests, remember to consider the edge case scenarios that could break the function of your application, and write tests to simulate those. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What would we expect to happen if the user was not found?&lt;/li&gt;
&lt;li&gt;What is the expected behavior if two posts have the same number of likes?&lt;/li&gt;
&lt;li&gt;What is the expected behavior if a user has no blogs?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The topic of testing goes very deep, but hopefully this helps you get started with understanding the testing process and developing your own tests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/docs/getting-started"&gt;Getting Started in Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/docs/using-matchers"&gt;Common Jest Matchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jestjs.io/docs/expect"&gt;Jest Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.valentinog.com/blog/jest/"&gt;Jest Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dsasse07/jest-example"&gt;Blog Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>CSS Centering that usually works</title>
      <author>Kyle R McKenna</author>
      <pubDate>Mon, 12 Apr 2021 18:54:46 +0000</pubDate>
      <link>https://dev.to/haloren/css-centering-that-usually-works-1f7k</link>
      <guid>https://dev.to/haloren/css-centering-that-usually-works-1f7k</guid>
      <description>&lt;p&gt;In the quest to center a div I have found my two default centering loves of my life.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The 100 day CSS Challenge default&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;
.center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
  text-align: center;
}
&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The Grid Option&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;
.center {
  display: grid;
  place-items: center;
  text-align: center;
}
&lt;/pre&gt;

&lt;p&gt;I wish I could say these always work but unfortunately that isn't always the case, mainly due to other parent/inherited styling that may already be in effect. &lt;/p&gt;

&lt;p&gt;To learn more CSS check out the many talented people on CodePen (&lt;a href="https://codepen.io/"&gt;https://codepen.io/&lt;/a&gt;). &lt;br&gt;
Oh and I'm on there too: &lt;a href="https://codepen.io/haloren"&gt;https://codepen.io/haloren&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9D9UX9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e09rh7bk3sbybo5a4ign.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9D9UX9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e09rh7bk3sbybo5a4ign.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How I Implemented A Smart Contact-Me Form</title>
      <author>RD</author>
      <pubDate>Mon, 12 Apr 2021 18:49:25 +0000</pubDate>
      <link>https://dev.to/rodiwa/how-i-implemented-a-smart-contact-me-form-1a48</link>
      <guid>https://dev.to/rodiwa/how-i-implemented-a-smart-contact-me-form-1a48</guid>
      <description>&lt;p&gt;This is not a coding tutorial, but a very high level overview of my implementation. Nonetheless, I’ve shared links to my &lt;a href="https://github.com/rodiwa/contact-form-python"&gt;github code&lt;/a&gt; and various references inline. The contact-me form is on my &lt;a href="http://rohitdiwakar.com/"&gt;website&lt;/a&gt; (scroll to the end).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;I wanted a practical contact-me form for my website so I could be notified when somebody left me a message. I also wanted to reply back to the user so they have my contact info as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;For notification, I decided to have a &lt;a href="https://api.slack.com/messaging/webhooks"&gt;Slack Incoming Webhook&lt;/a&gt;. I would create a Slack channel and messages sent to me from my website would show up here. For the reply-back, I decided to send an email to the user only if they shared an existing/ valid email address.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIuMOZZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knh4c80qg93wpj37tw21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIuMOZZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knh4c80qg93wpj37tw21.png" alt="Solution diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-brainstorming"&gt;
  &lt;/a&gt;
  The Brainstorming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I initially had a NodeJS backend + Mongodb Atlas cluster to save message details (name, email, message) directly from the website. But this data was not of any use really. I just wanted to be notified and send a response back to the user.&lt;/li&gt;
&lt;li&gt;To check if email is existing, python has a good library - &lt;a href="https://pypi.org/project/validate_email/"&gt;validate_email&lt;/a&gt;. NodeJS didn’t really have a lot of ‘obvious’ options, and some had to be &lt;a href="https://soshace.com/verifying-an-email-address-without-sending-an-email-in-nodejs/"&gt;done manually&lt;/a&gt; (by &lt;a href="https://stackoverflow.com/questions/29272695/node-js-email-existence-check"&gt;sending an actual email&lt;/a&gt; to verify, which I didn’t want).&lt;/li&gt;
&lt;li&gt;I didn’t want a server running at all times, since this feature would be sparingly used. Azure Functions &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/serverless/serverless-design-examples#web-apps-and-apis"&gt;was a good choice&lt;/a&gt; as I needed it to run (read as “cost me”) only when triggered by an HTTP request.&lt;/li&gt;
&lt;li&gt;I also wanted to perform steps in sequence, and I wanted a way to store the state of my previous step (is email valid or not) and it made sense to use Azure Durable Functions for this.&lt;/li&gt;
&lt;li&gt;Since Python libraries had a lot of my requirements covered, I chose Python over NodeJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-implementation"&gt;
  &lt;/a&gt;
  The Implementation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Setup Azure Functions

&lt;ul&gt;
&lt;li&gt;I started with a quickstart Azure Functions (Python) project on my local VS Code &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/quickstart-python-vscode"&gt;as given&lt;/a&gt; on the Azure docs. I then published this demo to my Az account, and tested the example using Postman and the Az function URL. I now only had to swap out the examples with my own implementations.&lt;/li&gt;
&lt;li&gt;Az Durable Functions has &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/durable/durable-functions-types-features-overview"&gt;3 types of functions&lt;/a&gt; (now 4 types) - Client (this kicks off the orchestrator), Orchestrator (manages different tasks or activities), and an Activity (what you’re really trying to do). The quickstart-demo gives you these.&lt;/li&gt;
&lt;li&gt;Since I had 3 main activities to do, I created 3 Activity functions; one each to -  send slack notification (&lt;code&gt;notifySlackChannel&lt;/code&gt; file in repo), check if email is valid (&lt;code&gt;isEmailExists&lt;/code&gt;) and send email (&lt;code&gt;sendEmail&lt;/code&gt;). VS Code Az Functions plugin has quick-actions to create these. Then plug these new activities into the demo code, replacing the calls to Hello with your new 3 activities.&lt;/li&gt;
&lt;li&gt;I started by passing payload from website &lt;code&gt;{user, email, message}&lt;/code&gt; into the Az Durable Functions.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Slack Notification - see &lt;a href="https://github.com/rodiwa/contact-form-python/tree/master/sendEmail"&gt;&lt;code&gt;sendEmail&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Create a Slack account, and create a channel where you want your messages.&lt;/li&gt;
&lt;li&gt;Create a Slack app, enable and create an &lt;a href="https://slack.com/intl/en-in/help/articles/115005265063-Incoming-webhooks-for-Slack"&gt;incoming webhook&lt;/a&gt;. You will get a slack URL which you can use to POST messages by sending a payload to it; like { text: “your message comes here” }.&lt;/li&gt;
&lt;li&gt;I also added formatting to my messages by using Slack’s &lt;a href="https://api.slack.com/block-kit"&gt;Block kit UI&lt;/a&gt;. It’s pretty neat because all you have to do is send some additional JSON objects (for a button, etc) to the payload data. Rest remains the same. Sweet.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Check if email is valid - see &lt;a href="https://github.com/rodiwa/contact-form-python/tree/master/isEmailExists"&gt;&lt;code&gt;isEmailExists&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;This is a simple python code that checks if the given email exists&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Send email - see &lt;a href="https://github.com/rodiwa/contact-form-python/tree/master/sendEmail"&gt;&lt;code&gt;sendEmail&lt;/code&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Get output of previous operation - &lt;code&gt;isEmailExists&lt;/code&gt;. If this value is &lt;code&gt;True&lt;/code&gt;, only then go ahead with this step.&lt;/li&gt;
&lt;li&gt;This was a simple implementation, almost as given &lt;a href="https://dev.mailjet.com/email/guides/send-api-v31/"&gt;in their examples&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Environment variables

&lt;ul&gt;
&lt;li&gt;Best to not check-in config with code, and to use environment variables instead.&lt;/li&gt;
&lt;li&gt;Az funcs allow you to add &lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-how-to-use-azure-function-app-settings?tabs=portal"&gt;variables as configuration&lt;/a&gt; which can be used by your code.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#troubleshoots"&gt;
  &lt;/a&gt;
  Troubleshoots
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The python smtplib works fine when you test it on local, but when you deploy code to AZ functions, &lt;a href="https://stackoverflow.com/questions/58953123/i-can-not-send-email-from-python-azure-function-smtp-office365-com-587#:~:text=1%20Answer&amp;amp;text=The%20only%20way%20to%20use,provides%20these%20type%20of%20services.&amp;amp;text=So%20the%20e%2Dmails%20sent,as%20SPAM%20by%20mail%20servers."&gt;AZ does not pass the emails&lt;/a&gt; through. You need to use a &lt;a href="https://stackoverflow.com/questions/50059171/not-able-to-connect-to-smtp-from-azure-cloud-service/50075862#50075862"&gt;SMTP relay services&lt;/a&gt; (SendGrid, Mailjet) to get this done on Azure.&lt;/li&gt;
&lt;li&gt;Passing parameters from HTTP request to Az function is not very intuitive.
Debugging on Az functions after deployment is a pain. Use &lt;code&gt;logger.info&lt;/code&gt; instead of &lt;code&gt;print()&lt;/code&gt; (python) or &lt;code&gt;console.log&lt;/code&gt; (JS).&lt;/li&gt;
&lt;li&gt;The running logs on Az functions are not consistent and do not show/ run at times. AZ portal has to be refreshed.&lt;/li&gt;
&lt;li&gt;I had trouble with SendGrid. Looks like &lt;a href="https://stackoverflow.com/questions/17666161/sending-email-from-azure/55470893#55470893"&gt;others have too&lt;/a&gt;. For me, they asked for way too many details (organization, address, reason to use this service, etc) on account creation and I wanted to be vague since I was only setting up for a dev project. They did not let me use SendGrid and forced me to create a ticket with support to justify how I wanted to use SendGrid for sending emails. Rude. Screw that. &lt;a href="https://www.mailjet.com/"&gt;Mailjet&lt;/a&gt; was way easier to set up and their free account gives more emails (Mailjet allows 200, as compared to SendGrids 100 emails per day).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>learning</category>
      <category>python</category>
      <category>serverless</category>
      <category>showdev</category>
    </item>
    <item>
      <title>VS Code Shortcut Cheat Sheet🔥 - Productivity boost 🚀</title>
      <author>Garvit Motwani</author>
      <pubDate>Mon, 12 Apr 2021 18:35:25 +0000</pubDate>
      <link>https://dev.to/worldindev/vs-code-commands-cheatsheet-increase-productivity-o6d</link>
      <guid>https://dev.to/worldindev/vs-code-commands-cheatsheet-increase-productivity-o6d</guid>
      <description>&lt;p&gt;Hey Devs, This is a cheat sheet for all the VSCode users out there, these shortcuts can increase your speed and productivity!!&lt;/p&gt;

&lt;p&gt;So let's start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJyPbiLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2qvvj5h4vb3fv3n0b20.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJyPbiLp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2qvvj5h4vb3fv3n0b20.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-palette"&gt;
  &lt;/a&gt;
  Command palette
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show all commands&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#sidebars"&gt;
  &lt;/a&gt;
  Sidebars
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle sidebar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Explorer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Extensions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧^G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Git (SCM)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Find&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌥⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Find in files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replace in files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#panel"&gt;
  &lt;/a&gt;
  Panel
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘J&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle panel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Problems&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug console&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^`&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;{: .-shortcuts}&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;z&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Zen mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;u&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Close unmodified&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;w&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Close all&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  Debug
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Restart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start without debugging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle breakpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step over&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step into&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧F11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug sidebar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug panel&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf"&gt;Keyboard shortcuts (MacOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;Keyboard shortcuts (Windows)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf"&gt;Keyboard shortcuts (Linux)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devhints.io/vscode"&gt;DevHints VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48mlS-0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7fbvg1jro6mv355uet9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48mlS-0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7fbvg1jro6mv355uet9.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;PLEASE FOLLOW, LIKE, SHARE, AND COMMENT ANY COMMAND YOU THINK I MISSED OUT!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  ⚡Giveaway ⚡
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
Steps to enter the giveaway&lt;br&gt;
--&amp;gt; React to this post&lt;br&gt;
--&amp;gt; &lt;a href="https://worldindev.ck.page/"&gt;Subscribe to our Newsletter&lt;/a&gt; &lt;strong&gt;&amp;lt;--&lt;/strong&gt; Very important&lt;/p&gt;




&lt;p&gt;Happy Coding.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>cheatsheet</category>
    </item>
  </channel>
</rss>
