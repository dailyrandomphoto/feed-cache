<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 10 Logistics Startups in India for E-commerce
</title>
      <author>shrey2323</author>
      <pubDate>Tue, 30 Nov 2021 05:44:24 +0000</pubDate>
      <link>https://dev.to/shrey2323/top-10-logistics-startups-in-india-for-e-commerce-208f</link>
      <guid>https://dev.to/shrey2323/top-10-logistics-startups-in-india-for-e-commerce-208f</guid>
      <description>&lt;p&gt;In a country like India, managing logistics with flair can sometimes be a very difficult task. Combine that with the insatiable appetite of the Indian population for buying things online and expecting timely deliveries, and things rapidly descend into a nightmare. &lt;/p&gt;

&lt;p&gt;According to latest reports, the E-commerce industry in India will touch the US$ 18 billion mark. The sector is growing at an astounding CAGR of over 55%. It stands to reason that the demand for better and more agile logistics solutions are in high demand. &lt;/p&gt;

&lt;p&gt;While there are many startups that operate in the logistics domain, only a handful have managed to create a niche of their own. Here are 10 such firms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Ecom Express:&lt;/strong&gt; Kicking off the list is the Delhi-headquartered logistics firm Ecom Express. It was established in 2012, and has since then received several rounds of funding from the likes of Warburg Pincus and Peepul Capital. What sets Ecom Express apart is the fact that it was one of the first companies to study the growth of E-commerce in India, realise its potential and provide E-commerce-centric shipping options. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. BlackBuck:&lt;/strong&gt; BlackBuck is based out of Bengaluru and is a dominant player in the B2B logistics arena. It is most commonly favoured by firms which manufacture heavy goods and equipment, and which needs hauling to various locations across India. For this, BlackBuck offers trucks of various sizes and load-bearing capacities. Its backend operations leverage modern technology seamlessly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Rivigo:&lt;/strong&gt; Rivigo was founded in 2014 in Gurugram. It has an off-beat business model which helps it stand out in a crowd. Rivigo provides shipping of goods using heavy-duty trucks. It has distributed the country into several zones, each manned by its personnel. Once a truck reaches point A to B, the driver is allowed to rest while a reserve driver completes the journey. It is similar to taking pit-stops in a sense. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Shadowfax:&lt;/strong&gt; Shadowfax leverages technologies like IoT and GIS to deliver goods all over the country. It was founded in 2015 and has since garnered several funding rounds. The company serves over 17,000 Pin Codes and ships to over 220 countries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 4Tigo:&lt;/strong&gt; This is a brand owned by Fortigo Network Logistics and was founded in 2015. The company helms its formidable technological prowess as an SaaS platform behind the scenes. It is known for its fleet management services which is popular with truck owners pan-India. Hence, it is also known as ‘The Truck Network.’&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. QikPod:&lt;/strong&gt; Founded in 2015 by noted entrepreneur Ravi Gururaj in Bengaluru, the company has a quirky value proposition. It has placed smart lockers, which are essentially collection points, at strategic locations in Bengaluru. QikPod calls these ‘Host Lockers’. Customers can then use these delivery collection solutions at their leisure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Delhivery:&lt;/strong&gt; Delhivery is, of course, one of the country’s foremost players in logistics for E-commerce businesses. With a fleet of more than 5,000 trucks and capable of covering north of 2,500 cities across India, Delhivery has grown exponentially since its founding in 2011.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Gojavas:&lt;/strong&gt; This is a 360-degree logistics provider for all E-commerce requirements. It began life in 2013 in Gurugram and is currently co-owned by Snapdeal. The latter has invested significant amounts in Gojavas.&lt;/p&gt;

&lt;p&gt;Rounding off the list are 2 dynamic logistics providers- ‘Letstransport’ and ‘Locus.’&lt;/p&gt;

&lt;p&gt;With each passing month, the number of &lt;a href="https://www.clickpost.ai/blog/ecommerce-logistics"&gt;&lt;strong&gt;eCommerce logistics&lt;/strong&gt;&lt;/a&gt; companies catering almost exclusively to shipments is rising. This is indicative of the growing strength of the E-commerce sector. It is also a measure of how bright and young entrepreneurs are creating a difference!&lt;/p&gt;

</description>
      <category>logisticsoftware</category>
      <category>startup</category>
      <category>ecommerce</category>
    </item>
    <item>
      <title>Make Better Blog Posts with Beautiful Syntax Highlighting in Nextjs with React-Prism-Render</title>
      <author>Peter</author>
      <pubDate>Tue, 30 Nov 2021 05:17:41 +0000</pubDate>
      <link>https://dev.to/peterlunch/make-your-nextjs-blogs-syntax-highlights-beautiful-53go</link>
      <guid>https://dev.to/peterlunch/make-your-nextjs-blogs-syntax-highlights-beautiful-53go</guid>
      <description>&lt;p&gt;As I was creating &lt;a href="https://peterlunch.com/"&gt;my blog&lt;/a&gt; with Next.js, I knew that I wanted to custom style my code blocks as coding was a large part of this blog, &lt;a href="https://www.peterlunch.com/notes"&gt;among other things&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a Nextjs blog (or any React Framework blog) and want to create beautiful code blocks out of your MDX posts, then this post will show you how to do that using &lt;a href="https://github.com/FormidableLabs/prism-react-renderer"&gt;prism-react-renderer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this guide, we will see how to convert plain MDX code blocks into stylish ones you'd see in a code editor like VSCode or atom. We are going to see how to do it using &lt;a href="https://styled-components.com"&gt;Styled Components&lt;/a&gt;, but it is also possible to do it with vanilla CSS.&lt;/p&gt;

&lt;p&gt;With that in mind, we need to first understand how MDX handles our code blocks, so we can then take that and make it stylish.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-mdx-code-blocks"&gt;
  &lt;/a&gt;
  Understanding MDX code blocks
&lt;/h2&gt;

&lt;p&gt;Before we look at how to style our code blocks it is helpful to know how MDX formats them.&lt;/p&gt;

&lt;p&gt;When I talk about a code block in MDX, what I am talking about is the code you put between the triple back-ticks. &lt;/p&gt;

&lt;p&gt;The way MDX code blocks are formatted by the browser is they are wrapped in a &lt;code&gt;pre&lt;/code&gt; block and then each line is split into a &lt;code&gt;div&lt;/code&gt;. Then, each word or symbol is split into &lt;code&gt;spans&lt;/code&gt;. This is how the styler will apply individual styles to each word or symbol. It is important to understand this, because we will need to know which HTML elements to target if we want to style our code blocks with the correct syntax highlighting.&lt;/p&gt;

&lt;p&gt;Now, we understand how code is converted from markdown to HTML we are ready to create our component that will make our code blocks more stylish.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-prism-react-render-syntax-highlighter-component"&gt;
  &lt;/a&gt;
  Creating the prism react render Syntax Highlighter Component
&lt;/h2&gt;

&lt;p&gt;The first step towards making our Nextjs blogs syntax highlights prettier is by utilizing the prism-react-render package.&lt;/p&gt;

&lt;p&gt;The first thing you need to do is install the package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# npm&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; prism-react-renderer

&lt;span class="c"&gt;# yarn&lt;/span&gt;
yarn add prism-react-renderer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that out of the way, we can now build our syntax highlighting component &lt;code&gt;SyntaxHighlighter&lt;/code&gt;. The below code is a basic version of the component, copy the code below and we can go through what it is doing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Highlight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prism-react-renderer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SyntaxHighlighter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Highlight&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getLineProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTokenProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pre&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;getLineProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;getTokenProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;})}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="p"&gt;))}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/pre&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Highlight&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we start by importing two things from prism-react-renderer. The first is the &lt;code&gt;&amp;lt;Highlight /&amp;gt;&lt;/code&gt; component, it styles our code blocks in our MDX files. The second is the &lt;code&gt;{ defaultProps }&lt;/code&gt; object, this gets spread into the &lt;code&gt;Highlight&lt;/code&gt; component and will provide us with some default theming.&lt;/p&gt;

&lt;p&gt;Next, we create our &lt;code&gt;SyntaxHighlighter&lt;/code&gt; component and pass it a &lt;code&gt;children&lt;/code&gt; prop.&lt;/p&gt;

&lt;p&gt;Then, we declare the const &lt;code&gt;code&lt;/code&gt; and access the mdx code through our &lt;code&gt;children&lt;/code&gt; prop. It stores the MDX code block so we can then pass it into the &lt;code&gt;&amp;lt;Highlight /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Inside our &lt;code&gt;Highlight&lt;/code&gt; component we create an anonymous function with the props &lt;code&gt;className, style, tokens, getLineProps, getTokenProps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Within this function we target the &lt;code&gt;pre&lt;/code&gt; block. First, we &lt;code&gt;slice&lt;/code&gt; all lines and pass them into a &lt;code&gt;div&lt;/code&gt; element. Within the &lt;code&gt;div&lt;/code&gt; we are going to put each word and token into &lt;code&gt;span&lt;/code&gt; elements. Essentially, what happens here is the &lt;code&gt;getLineProps&lt;/code&gt; &amp;amp; &lt;code&gt;getTokenProps&lt;/code&gt; apply things like the styling to your syntax.&lt;/p&gt;

&lt;p&gt;If this was all we did our syntax highlights would now look like the below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cLZec0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x22ps1vsv1dwidh6p2lg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cLZec0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x22ps1vsv1dwidh6p2lg.png" alt="unstyled code block" width="880" height="765"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason it looks this way is because &lt;code&gt;defaultProps&lt;/code&gt; uses the &lt;code&gt;duotoneDark&lt;/code&gt; theme as a default. We will see how to customize themes later.&lt;/p&gt;

&lt;p&gt;In the meantime, we can make it look much more stylish by picking out one of the &lt;a href="https://github.com/FormidableLabs/prism-react-renderer/tree/master/src/themes"&gt;many available themes&lt;/a&gt; react-prism-render has built in.&lt;/p&gt;

&lt;p&gt;As soon as you have a theme picked out, we can add it to our syntax highlights by importing the theme from &lt;code&gt;import theme from "prism-react-renderer/themes/themeName";&lt;/code&gt; and adding the theme prop to our &lt;code&gt;Highlight&lt;/code&gt; component's props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Highlight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prism-react-renderer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prism-react-renderer/themes/nightOwlLight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SyntaxHighlighter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Highlight&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    // ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your syntax highlights are looking great. But, what if you want to style how the actual code block looks. What if you want to add things like the language or &lt;code&gt;border-radius&lt;/code&gt;? Well, let's see how to do that now with styled-components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-prismreactrender-code-blocks-with-styled-components"&gt;
  &lt;/a&gt;
  Styling prism-react-render Code Blocks With Styled Components
&lt;/h3&gt;

&lt;p&gt;I'm going to use &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt; to show you how to style your syntax highlights. This method can transfer to any other framework of styling, I just love using styled-components with Nextjs.&lt;/p&gt;

&lt;p&gt;To style the block surrounding the code, we need to target the &lt;code&gt;pre&lt;/code&gt; block which, we will call &lt;code&gt;PreBlock&lt;/code&gt;. Before we do that, we need to wrap the &lt;code&gt;pre&lt;/code&gt; block in a &lt;code&gt;div&lt;/code&gt; called &lt;code&gt;CodeBlockContainer&lt;/code&gt;. The &lt;code&gt;SyntaxHighlighter&lt;/code&gt; should now look like the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//...&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CodeBlockContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PreBlock&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;getLineProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;getTokenProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PreBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;CodeBlockContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;;

  //...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looking at the changes above, we have renamed the &lt;code&gt;pre&lt;/code&gt; block and wrapped it in a &lt;code&gt;CodeBlockContainer&lt;/code&gt;, this allows us to add some styling to the code blocks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CodeBlockContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: relative;
  margin-top: 48px;
  margin-bottom: 60px;
  transition: all 200ms ease-in 0s;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PreBlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pre&lt;/span&gt;&lt;span class="s2"&gt;`
  font-family: Arial, Helvetica, sans-serif;
  font-size: 18px;
  outline-offset: 2px;
  overflow-x: auto;
  margin-left: -32px;
  margin-right: -32px;
  padding: 32px;
  min-height: 50px;
  border: 1px solid rgba(230, 230, 230, 1);
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
  max-width: calc(100% + 64px);
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make your code snippets look like the below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FV1TN56J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ui19qetgd6hkp86suh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FV1TN56J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ui19qetgd6hkp86suh9.png" alt="semi formatted codeblock" width="880" height="734"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is all there is to styling your code block containers. The key is to target the &lt;code&gt;pre&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;On the whole, your syntax highlighting for your blog would already be looking great with just the above. But, we can take it up a level by adding things like the language or line highlights.&lt;/p&gt;

&lt;p&gt;So let's look at how to add the language to your react-prism-render syntax highlights.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-language-to-prismreactrender"&gt;
  &lt;/a&gt;
  Adding Language to prism-react-render
&lt;/h3&gt;

&lt;p&gt;If you look back up at how code is written in markdown you will see a little &lt;code&gt;js&lt;/code&gt; next to the three backticks. That tells markdown that the language is JavaScript, you could use CSS or HTML if the code was written in those languages. In fact there is a &lt;a href="https://rdmd.readme.io/docs/code-blocks"&gt;whole list of languages&lt;/a&gt; you can use.&lt;/p&gt;

&lt;p&gt;To add language, we need to get the language value you have in your markdown and save it as a variable. Thankfully prism-react-render adds the language as a class name.&lt;/p&gt;

&lt;p&gt;Therefore we can access it through the children prop we pass our &lt;code&gt;SyntaxHighlighter&lt;/code&gt; component like so &lt;code&gt;children_.props.className?.replace("language-", "").trim();&lt;/code&gt;. You will need to save the value of this expression in a &lt;code&gt;const&lt;/code&gt; and then pass the &lt;code&gt;Highlighter&lt;/code&gt; a language prop.&lt;/p&gt;

&lt;p&gt;The prism-react-render syntax highlighter should now look like the below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SyntaxHighlighter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;language-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Highlight&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getLineProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTokenProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CodeSnippetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PreBlock&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;getLineProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;getTokenProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PreBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;CodeSnippetContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Highlight&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CodeBlock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last thing we need to do is render the &lt;code&gt;language&lt;/code&gt; variable. To do this we add a &lt;code&gt;LanguageHeadingContainer&lt;/code&gt; inside of the &lt;code&gt;CodeSnippetContainer&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Syntaxhighligher&lt;/span&gt; &lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CodeSnippetContainer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LanguageHeadingContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;LanguageHeadingContainer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PreBlock&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; //...

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we use short circuit logic to only render the &lt;code&gt;LanguageHeadingContainer&lt;/code&gt; if language is present in our markdown. Next, we need to add the styling for the &lt;code&gt;LanguageHeadingContainer&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CodeBlockWrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  border-top-left-radius: 0.25rem;
  border-top-right-radius: 0.25rem;
  border-width: 1px 1px 0px;
  border-style: solid;
  border-color: rgba(230, 230, 230, 1);
  background-color: rgb(231, 232, 235);
  padding: 0.75rem 1.25rem;
  margin-left: -32px;
  margin-right: -32px;
  font-family: font-family: Arial, Helvetica, sans-serif;;
  font-size: 0.875rem;
  line-height: 1.25rem;
  font-weight: 700;
  color: hsl(220deg, 23%, 5%);
  text-align: right;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, your syntax highlights should look like the below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Hld7Bsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ll9y2ixz7nuu9zg15kk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Hld7Bsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ll9y2ixz7nuu9zg15kk.png" alt="fully formatted and styled code block" width="880" height="763"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to ensure we can use our &lt;code&gt;SyntaxHighlighter&lt;/code&gt; component with our blog. This component will work with other popular &lt;code&gt;MDX&lt;/code&gt; libraries but, I am going to show you how we do it with mdx-bundler.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-prismreactrender-with-mdxbundler-and-nextjs"&gt;
  &lt;/a&gt;
  Using prism-react-render With Mdx-bundler and Nextjs
&lt;/h2&gt;

&lt;p&gt;The next step is to ensure that MDX knows to render the component. This ensures you don't have to do something like the below every time you have some code in your MDX file you want to render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SyntaxHighlight&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;components/syntaxHighlighter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SyntaxHighlighter&lt;/span&gt;
  &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;```

js
const codeBlock = () =&amp;gt; {
    // does something
}


```&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To manually avoid having to wrap each of your code blocks with the &lt;code&gt;SyntaxHighlighter&lt;/code&gt; we will automatically convert them using mdx-bundler.&lt;/p&gt;

&lt;p&gt;If you're not familiar with mdx-bundler I have a &lt;a href="https://www.peterlunch.com/blog/mdx-bundler-beginners"&gt;beginners guide to get you set up&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have MDX bundler set up with Nextjs all we need to do is add the &lt;code&gt;SyntaxHighlighter&lt;/code&gt; component to the mdx-bundler &lt;code&gt;&amp;lt;Component /&amp;gt;&lt;/code&gt; arguments. You will need to import the &lt;code&gt;SyntaxHighlighter&lt;/code&gt; component into your &lt;code&gt;[slug].js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// [slug].js&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SyntaxHighlighter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we have told mdx-bundler to use our &lt;code&gt;SyntaxHighligther&lt;/code&gt; component whenever it sees a &lt;code&gt;pre&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;That is all there is to using mdx-bundler with your prism-react-render syntax highlighter component. As a result, you now have stylish syntax highlighting for your code blocks. But, before you go there are two more awesome things I want to show you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-custom-prismreactrender-themes"&gt;
  &lt;/a&gt;
  Creating Custom prism-react-render Themes
&lt;/h2&gt;

&lt;p&gt;One of the best parts about using prism-react-render is you can create your own themes. The benefit is you can have a theme that matches your website's design. Let's look at how to create prism-react-render themes now.&lt;/p&gt;

&lt;p&gt;Making your own custom theme is similar to how you would make a VSCode theme. So to build your own theme you need to follow a JSON-based format like the below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myCustomTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#d6deeb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#011627&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontFamily&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var(--font-family-syntax)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;16px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;changed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(162, 191, 252)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fontStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;deleted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgba(239, 83, 80, 0.56)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fontStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inserted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;attr-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(173, 219, 103)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fontStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(99, 119, 119)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fontStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(173, 219, 103)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;variable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(214, 222, 235)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(247, 140, 108)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;builtin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;char&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(130, 170, 255)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// This was manually added after the auto-generation&lt;/span&gt;
      &lt;span class="c1"&gt;// so that punctuations are not italicised&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;punctuation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(199, 146, 234)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;selector&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;doctype&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(199, 146, 234)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fontStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;italic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;class-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(255, 203, 139)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tag&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;operator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keyword&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(127, 219, 202)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(255, 88, 116)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(128, 203, 196)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;namespace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rgb(178, 204, 214)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;myCustomTheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All you need to do is copy the above code template and paste it into a &lt;code&gt;mycustomTheme.js&lt;/code&gt; file that you can then import into the &lt;code&gt;SyntaxHighlighter&lt;/code&gt; component. Once you've imported it, you just need to pass &lt;code&gt;myCustomTheme&lt;/code&gt; as an argument in the &lt;code&gt;Highligther's&lt;/code&gt; theme prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Highlight&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myCustomTheme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all there is to it. You can change the colors and other values as you want to make your many prism-react-render themes.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Chrome DevTools: CSS Overview</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 30 Nov 2021 04:57:06 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/chrome-devtools-css-overview-3oba</link>
      <guid>https://dev.to/dailydevtips1/chrome-devtools-css-overview-3oba</guid>
      <description>&lt;p&gt;I love how the Chrome dev team keeps making it easier and easier to identify potential issues on websites.&lt;br&gt;
Everything with improving speed and user experience.&lt;/p&gt;

&lt;p&gt;The latest addition to these incredible tools is the "CSS Overview".&lt;br&gt;
This new feature is available as a preview in Chrome 96&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-chrome-devtools-css-overview"&gt;
  &lt;/a&gt;
  Using the Chrome DevTools CSS Overview
&lt;/h2&gt;

&lt;p&gt;First, we need to open the Chrome Dev Tools.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mac &lt;code&gt;Cmd&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt; or Windows: &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then click the "More options" button find, "More tools", and click CSS Overview.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8SZ3oVkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300085117/uEsUCCwVw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8SZ3oVkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300085117/uEsUCCwVw.png" alt="How to find the CSS Overview in Chrome DevTools" width="517" height="683"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you open the tool, you'll be prompted with an overview and some explanation of what it does.&lt;br&gt;
Click the capture button to start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uvAtJQoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300154573/aZghjcdOL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uvAtJQoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300154573/aZghjcdOL.png" alt="The CSS Overview welcome page" width="727" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the tool is done, you'll see a mix of things returned.&lt;br&gt;
I'll break them down per chapter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-summary"&gt;
  &lt;/a&gt;
  Overview summary
&lt;/h3&gt;

&lt;p&gt;This high-level overview quickly shows you how many elements are found and how many selectors and stylesheets there are.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xoRDM64M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300294493/w6RjzuZCe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xoRDM64M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300294493/w6RjzuZCe.png" alt="CSS Overview summary" width="341" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors
&lt;/h3&gt;

&lt;p&gt;Then we get the colors panel, which shows all colors that were found on the page.&lt;br&gt;
This overview gives you a quick example to determine if these colors match your brand colors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R24RalLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300542117/-gDrD6I6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R24RalLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300542117/-gDrD6I6p.png" alt="Color panel overview" width="501" height="776"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And show possible contrast issues.&lt;/p&gt;

&lt;p&gt;The cool thing here is that you can click on each element to see all occurrences in the stylesheet.&lt;/p&gt;

&lt;p&gt;In the image below, I clicked the &lt;code&gt;#DEBFDE&lt;/code&gt; color, and you can see all elements that have this color.&lt;br&gt;
You can then press each element to highlight it in the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvTzAp5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300504304/2C1XdtfBc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvTzAp5q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300504304/2C1XdtfBc.png" alt="Color explorer" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Really find this a welcome addition to quickly see unwanted color styles, like white on white or hidden elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#font-info"&gt;
  &lt;/a&gt;
  Font info
&lt;/h3&gt;

&lt;p&gt;Then we enter the font overview panel, which shows all fonts you use on the page and their style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X1mc8yRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300609016/dCkyGi70w2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X1mc8yRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300609016/dCkyGi70w2.png" alt="CSS Font overview" width="525" height="752"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I actually noticed through this tool I'm assigning different fonts on top elements, causing the font issue to go a bit wild.&lt;/p&gt;

&lt;p&gt;Again, super easy to quickly identify weird are one-of-a-kind font sizes that might not be in line with your brand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unused-declarations"&gt;
  &lt;/a&gt;
  Unused declarations
&lt;/h3&gt;

&lt;p&gt;Then we have a panel on unused declarations, making it easy to find styles that will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CIjvj8u2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300821442/7oOgzoI2Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CIjvj8u2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300821442/7oOgzoI2Z.png" alt="Unused declarations overview" width="515" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, it's a pseudo selector setting &lt;code&gt;vertical-align&lt;/code&gt; on an element that's not &lt;code&gt;inline&lt;/code&gt; or a &lt;code&gt;table-cell&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(This particular case is actually valid, so will log this with the DevTools team)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#media-queries"&gt;
  &lt;/a&gt;
  Media queries
&lt;/h3&gt;

&lt;p&gt;And then, we get an overview panel for our media queries. This makes it super easy to find all your queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SigIjyfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300999337/HZbz6nVq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SigIjyfA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637300999337/HZbz6nVq1.png" alt="Media queries overview" width="419" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Including screen sizes, preferred schemes, and more.&lt;br&gt;
You might find elements in there to optimize and combine queries that are about the same size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you enjoy this tool as much as I do.&lt;br&gt;
I really like to revamp my CSS to be smaller, more inline, and brand correct.&lt;/p&gt;

&lt;p&gt;And this tool definitely helps with that 🎉.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Developer Productivity Masterclass - interview with Leonid Blouvshtein</title>
      <author>Shai Almog</author>
      <pubDate>Tue, 30 Nov 2021 04:26:48 +0000</pubDate>
      <link>https://dev.to/codenameone/developer-productivity-masterclass-interview-with-leonid-blouvshtein-31oo</link>
      <guid>https://dev.to/codenameone/developer-productivity-masterclass-interview-with-leonid-blouvshtein-31oo</guid>
      <description>&lt;p&gt;On December 7th we’ll &lt;a href="https://www.linkedin.com/events/developerproductivitymasterclas6870717107772907520/"&gt;host a free master class&lt;/a&gt; with Mykyta Protsenko, Senior Software Engineer at Netflix. Michael Wood, Field CTO, HashiCorp. Ryan Menezez, Software Engineering Manager, Meta. And Leonid Blouvshtein, CTO of Lightrun.&lt;/p&gt;

&lt;p&gt;I got a chance to grab Leonid and make him sit down for this quick interview...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-tell-us-a-bit-about-yourself"&gt;
  &lt;/a&gt;
  Q: Tell us a bit about yourself?
&lt;/h3&gt;

&lt;p&gt;I worked in several successful startups while most of my experience is with distributed systems that require high performance. This was after I graduated from the elite 8200 intelligence unit of the IDF. I sold my first startup at the age of 22. I founded Lightrun a couple of years ago to revolutionize the way developers interact with cloud production applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-what-would-be-the-chief-topics-youll-discuss-in-the-master-class"&gt;
  &lt;/a&gt;
  Q: What would be the chief topics you’ll discuss in the master class?
&lt;/h3&gt;

&lt;p&gt;I want to focus on the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developer Productivity at Different Growth Stages.&lt;/li&gt;
&lt;li&gt;The importance for the developers to embrace the DevOps culture and adopt observability in the development workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the past decade, the way we build and deploy software has changed completely. We moved from on-prem deployments to VMs in the cloud to container-based environments. With the rapid change in the ops world, companies also changed their methodologies. &lt;/p&gt;

&lt;p&gt;A lot of ownership is moving towards the developers and developers nowadays need different tooling and processes than what they needed 5 years ago, and organizations should adopt this change.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-arent-the-problems-startups-run-into-different-from-the-problems-in-major-companies-like-meta-and-netflix"&gt;
  &lt;/a&gt;
  Q: Aren’t the Problems startups run into different from the problems in major companies like Meta and Netflix?
&lt;/h3&gt;

&lt;p&gt;Yes, and no. &lt;/p&gt;

&lt;p&gt;The scale of Netflix or Meta requires a level of scale that brings with it challenges we all hope to face. But probably won’t in the short term. But there’s still a lot of common ground we can build thanks to the componentized nature of the market and shifting story of tooling.&lt;/p&gt;

&lt;p&gt;Mistakes you make today in the core team building the MVP can bite you back when you try to scale. The technical debt we incur today can become the source of long-running problems. A small investment in doing things "right" at this stage can make a big difference in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#q-what-excites-you-about-this-master-class"&gt;
  &lt;/a&gt;
  Q: What excites you about this master class?
&lt;/h3&gt;

&lt;p&gt;I’m very excited about the panel we brought together. Netflix, Hashicorp, and Meta are three titans of industry. Mykyta, Ryan, and Michael have a lot of experience with high scale fast-growing systems and engineering organizations. I think the panel will provide us with a lot of insights into the different approaches, but even more interesting is the consensus we can reach.&lt;/p&gt;

&lt;p&gt;I think through consensus we can uncover underlying truths of developing that might be less obvious.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-us"&gt;
  &lt;/a&gt;
  Join Us
&lt;/h2&gt;

&lt;p&gt;Thanks Leonid for this great insight. Please &lt;a href="https://go.lightrun.com/developer-productivity-masterclass"&gt;join us on Tuesday, December 7th&lt;/a&gt; for this master class to learn more.&lt;a href="https://dev.tourl"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloud</category>
      <category>programming</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Project 89 of 100 - Spinning Up Your First Typescript Project with React</title>
      <author>James Hubert</author>
      <pubDate>Tue, 30 Nov 2021 03:54:22 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-89-of-100-spinning-up-your-first-typescript-project-with-react-46o6</link>
      <guid>https://dev.to/jwhubert91/project-89-of-100-spinning-up-your-first-typescript-project-with-react-46o6</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to today's deployed app: &lt;a href="https://project-89-of-100-react-typescript-template.netlify.app/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok just a short post today. But I'm getting back into it. I promise. If it kills me, I'm going to finish the #100days100projects challenge by the end of the year. &lt;/p&gt;

&lt;p&gt;In my job I use Typescript in a React web application with Redux. I didn't know TS until I started the job, but now I work in it every day. &lt;/p&gt;

&lt;p&gt;It's pretty hard getting started when all you know is vanilla JS. After a while though you realize it's really useful for large applications because you're less likely to accidentally publish mistakes in your applications. And that means your users will experience fewer bugs. TS is also the industry standard nowadays so it pays to learn.&lt;/p&gt;

&lt;p&gt;Here's your first step to learning Typescript- spinning up a Typescript React application. Head over to your terminal or console, and assuming you have npm and npx installed, the same way you would boot up a vanilla Create React App application, find a directory you like then do the following command in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app my-ts-app --template typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! You now have a working Typescript app and template. If you open it up and poke around, you'll see that you no longer have vanilla Javascript files in the &lt;code&gt;src&lt;/code&gt; folder. Here's my directory:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_xvmKHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b656walqeycblxbxbmwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_xvmKHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b656walqeycblxbxbmwa.png" alt="Create React App template with Typescript" width="514" height="1064"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html"&gt;Here&lt;/a&gt; is a short single page introduction to Typescript for Javascript developers. And &lt;a href="https://scrimba.com/learn/intrototypescript"&gt;here&lt;/a&gt; is a free 3 hour course on Typescript from the basics on up which I &lt;strong&gt;highly recommend&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When it comes time to build your application and get it ready for production, use &lt;code&gt;npm build&lt;/code&gt; or &lt;code&gt;yarn build&lt;/code&gt; to generate a production version of the application. At this juncture, your Typescript code will be compiled into simple Javascript. Here is the directory structure for the &lt;code&gt;build&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifHMUC8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onmi5pq4ozm1y6a3q0ed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifHMUC8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onmi5pq4ozm1y6a3q0ed.png" alt="Prod ready TS application post-build step" width="470" height="920"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you like projects like this and want to stay up to date with more, check out my Twitter &lt;a href="https://twitter.com/jwhubert91"&gt;@jwhubert91&lt;/a&gt;, I follow back! See you tomorrow for another project.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Youtube Video - On How to create a rickroll website</title>
      <author>CoderZ90</author>
      <pubDate>Tue, 30 Nov 2021 03:40:13 +0000</pubDate>
      <link>https://dev.to/official_fire/youtube-video-on-how-to-create-a-rickroll-website-2pi4</link>
      <guid>https://dev.to/official_fire/youtube-video-on-how-to-create-a-rickroll-website-2pi4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#only-for-educational-purposes"&gt;
  &lt;/a&gt;
  Only for educational purposes
&lt;/h2&gt;

&lt;p&gt;As you know there are a lot of people rickrolling each other. Hahaha using the youtube link but we developers use the power of coding to rickroll&lt;/p&gt;

&lt;p&gt;So in this video we are gonna create a rickroll website using html, css and javascript&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expected in the website&lt;/strong&gt; :- When the user goes to the website it shows the loader for 4-5 seconds [loader is the best option to make the person stay on the website] and then goes to the youtube rickroll page and Boom! rickrolled&lt;/p&gt;

&lt;p&gt;Here is the video on how to create a rickroll website using Html, css and javascript - &lt;a href="https://www.youtube.com/watch?v=isTfYeKUL_c&amp;amp;t=118s"&gt;https://www.youtube.com/watch?v=isTfYeKUL_c&amp;amp;t=118s&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Written Tutorial -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML File -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;here we basically create one div with the class of &lt;code&gt;loader&lt;/code&gt;&lt;br&gt;
and then we are just gonna style it. Create a css file and link it to your html file or you can use internal css [thats nothing but using css in the html file] too&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="c"&gt;&amp;lt;!-- Only for educational purposes 😊 --&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- lets make loading so that user stays on the website --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CSS File -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;here we puts a little dark white background to our website and then center our loader to the center and then we make our loader in circle shape after doing this much stuff we use &lt;code&gt;border-top-color: transparent&lt;/code&gt; to make our loader top transparent color (it looks cool). and then we use keyframes to animate it and make it move in circle at one position :D and our CSS is done Noice!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* bringing to middle */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* addding spin */&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;spin&lt;/span&gt; &lt;span class="m"&gt;0.7s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* i am stoping the animation for now */&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;spin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Javascript File:-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now the main part, in here we are setting a time of 4 seconds in our webpage and when the time is completed/over then we will redirect our website to the youtube rickroll video and thats all we need to do.&lt;/p&gt;

&lt;p&gt;The main code which does the work is this - &lt;code&gt;window.location.href="https://youtu.be/dQw4w9WgXcQ";&lt;/code&gt; this command redirects it to the youtube link we put there and Boom!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// also we need to make the O small&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://youtu.be/dQw4w9WgXcQ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// 4000 = 4 seconds ( 1000 = 1 second)&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you like this blog and had fun making this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also dont forget to subscribe 🙏💖🙏&lt;/strong&gt; - &lt;a href="https://youtube.com/codingfire?sub_confirmation=1"&gt;https://youtube.com/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stay safe and be happy. 😊🙏&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Day 24 of #100daysofcode: Sticking with Flask</title>
      <author>Ryan Whelchel</author>
      <pubDate>Tue, 30 Nov 2021 03:29:04 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-24-of-100daysofcode-sticking-with-flask-5ho1</link>
      <guid>https://dev.to/rydwhelchel/day-24-of-100daysofcode-sticking-with-flask-5ho1</guid>
      <description>&lt;p&gt;I decided to make a little time today to make some decisions regarding my Study Aid app coming up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#django-vs-flask"&gt;
  &lt;/a&gt;
  Django vs. Flask
&lt;/h2&gt;

&lt;p&gt;This isn't the first time I have discussed this on the post, but it will likely be the last for quite a while. &lt;a href="https://dev.to/keonigarner/comment/1k2ki"&gt;Following some great advice&lt;/a&gt;, I decided that it would be best for the project to stick with Flask. I am not counting out Django entirely; I am still interested in learning it, but I want to get my app off the ground so I really get started with the meat of the project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reasons"&gt;
  &lt;/a&gt;
  Reasons
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;I know Flask

&lt;ul&gt;
&lt;li&gt;I don't love this reason, but it is definitely the number one reason for me. I want to get into the meat of the project, and learning Django would require a lot of overhead. Django seems to tend towards having a lot of boilerplate, while Flask is very, very lightweight.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Django has a lot of boilerplate to become accustomed to

&lt;ul&gt;
&lt;li&gt;This ties in a little bit to the above reason, but I will need to learn a lot of boilerplate that simply isn't necessary for Flask. I also don't know how Django functions with React. I hope that it is the same as how Flask plays with Django, but I just don't know. This point is my attempt to minimize unknowns in this project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Flask &lt;em&gt;is&lt;/em&gt; used at scale

&lt;ul&gt;
&lt;li&gt;This may seem obvious to many of you, but I assumed Flask was a framework for beginners. I started the conversation between Flask and Django because I thought Django was a more mature framework to get into. Now I see that Flask is minimalistic intentionally.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I am not willing to dig deep into something new right now

&lt;ul&gt;
&lt;li&gt;Looking at how I am spending my time these past couple weeks, I don't think I'm up to creating a new web of mistakes in an unfamiliar framework. I have been stretched thin recently, so I want to go into this project excited to build something and not frustrated with the minutiae.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm really excited to move forward into this new project! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Still feeling stretched thin with deadlines and finals coming up, but I am still working on the challenge!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bit of Leetcode practice&lt;/li&gt;
&lt;li&gt;Worked a bit on the debugging portion of the FreeCodeCamp JS Course&lt;/li&gt;
&lt;li&gt;Bounced between meetings and work on the school project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am nearing the end of the semester; I'm really excited to have more time to really dig into this project and start ticking away the challenges I have set for myself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upcoming"&gt;
  &lt;/a&gt;
  Upcoming
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Finals and final project sprints&lt;/strong&gt;: Not much time left!&lt;/li&gt;
&lt;li&gt;Start the Study Aid app!&lt;/li&gt;
&lt;li&gt;Later in the challenge: AWS Deployment, AWS Certification, and Using Docker!?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;JS Course - FreeCodeCamp&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Single element dice with CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Tue, 30 Nov 2021 02:48:28 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/single-element-dice-with-css-ah9</link>
      <guid>https://dev.to/alvaromontoro/single-element-dice-with-css-ah9</guid>
      <description>&lt;p&gt;Creating a 3D-looking dice with CSS is not especially difficult. It will most likely be the first demo you'll build when practicing 3D CSS because it is a simple cube with different things on each side.&lt;/p&gt;

&lt;p&gt;So it's common to see a dice where the HTML looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dice"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"side side-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"side side-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"side side-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"side side-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"side side-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"side side-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where every side is translated and/or rotated to form the cube. Then the content is set accordingly (remember that the opposite sides of a dice will always add to 7.) This could be a basic cube's CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dice&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt; &lt;span class="m"&gt;10s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;60deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve-3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.side&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f003&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.side-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;000deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.side-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;270deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.side-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;270deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.side-4&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;090deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.side-5&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;090deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.side-6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15vmin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see a demo of this cube (after adding some content and colors):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/PoKxQOm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Drawing that is "easy"... and discussing this with &lt;a href="https://twitter.com/ChallengesCss"&gt;Temani Afif&lt;/a&gt; and &lt;a href="https://twitter.com/InHuOfficial"&gt;InHuOfficial&lt;/a&gt; on Twitter, we talked about the possibility of making it more of a challenge by drawing a 3D dice but using a single element. Could it be done? How?&lt;/p&gt;

&lt;p&gt;In theory, creating a 3D dice with a single element would be possible because, at most, three sides are visible at any given time, and there are three elements that we could use: the element in itself and the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements associated to it. So I started coding, and this is what I ended up with:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/dyzggdp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-was-done"&gt;
  &lt;/a&gt;
  How it was done
&lt;/h2&gt;

&lt;p&gt;This solution uses a single element and looks three-dimensional, but as you may have noticed, not all sides are visible! As the rotation happens only over one axis, one of the sides will always be visible (and its opposite side will always be hidden, so we don't need to draw it.) That considerably facilitates the work: the visible side will always be the element in itself. Then we only need to worry about animating the pseudo-elements.&lt;/p&gt;

&lt;p&gt;But there's more than that. In total, &lt;strong&gt;there are four animations&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A general animation rotating the dice. This is an animation applied to the element in itself, so it spins over the Z-axis.&lt;/li&gt;
&lt;li&gt;Two different animations for the pseudo-elements. Making the pseudos "jump" from one side to the other and changing their content (from 1 to 6, and from 3 to 4).&lt;/li&gt;
&lt;li&gt;An additional animation for the pseudo-elements, so their color changes as they rotate. That way, one side will be brighter than the other and get darker as it turns, simulating a light.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;This solution is "cheating." It only spins on one axis, and that makes it simpler. But things get tricky if we make the dice animate on more than one axis (so all the sides are visible.) Then, it will require the pseudo-elements to "jump"... and the element in itself, too. And that's when trouble begins: changing the component's location will mess up with the animations and positions of the pseudo-elements.&lt;/p&gt;

&lt;p&gt;I haven't been able to complete that part yet. Maybe it's because I had a complex animation, or perhaps because I didn't try hard enough, but I always hit a point where I'd like to use different transform origins for the transforms, which is not allowed in CSS.&lt;/p&gt;

&lt;p&gt;Another "cheating" option would be to rotate over different axis but not at the same. That way, all the dice sides will be visible, but it is no more than an extension of this trick version.&lt;/p&gt;

&lt;p&gt;Still, I think it should be feasible to create the dice with a single element while rotating over more than one axis at once. So I probably need to change my approach to the problem. We'll see how it goes.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Use React + Supabase Pt 2: Working with the Database
</title>
      <author>Michael Wolf Hoffman</author>
      <pubDate>Tue, 30 Nov 2021 01:39:14 +0000</pubDate>
      <link>https://dev.to/mwolfhoffman/how-to-use-react-supabase-pt-2-working-with-the-database-1mgc</link>
      <guid>https://dev.to/mwolfhoffman/how-to-use-react-supabase-pt-2-working-with-the-database-1mgc</guid>
      <description>&lt;p&gt;This demo will teach you how to connect a React application with Supabase. &lt;/p&gt;

&lt;p&gt;If you want to learn more about Supabase in general or how to set up authentication easily using supabase in a react application, read &lt;a href="https://codewithwolf.com/how-to-use-react-with-supabase-pt-1"&gt; this post&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-an-orm"&gt;
  &lt;/a&gt;
  Install an ORM
&lt;/h2&gt;

&lt;p&gt;We will use an Object Relational Mapper (ORM) to interact with our database. We will go with Prisma for this demo since it's highly popular, well maintained, and easy to set up. If you want you can use another ORM since Knex, TypeORM, Sequelize, and others are great too so feel free to follow along with those if you are more familiar with them. &lt;/p&gt;

&lt;p&gt;If you are familiar with graphql you will find Prisma a breeze to pick up. &lt;/p&gt;

&lt;p&gt;Install Prisma&lt;br&gt;
&lt;code&gt;yarn add prisma&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-are-we-using-an-orm"&gt;
  &lt;/a&gt;
  Why Are We Using an ORM?
&lt;/h2&gt;

&lt;p&gt;It's possible to do everything we are going to with an ORM also without one. You can write raw SQL scripts or use the Supabase UI to do all of these tasks. &lt;/p&gt;

&lt;p&gt;The reason that I am using an ORM for this is so that we can have our SQL interactions coded and saved in source control to make it easier to troubleshoot, scale, and collaborate. &lt;/p&gt;

&lt;p&gt;Feel free to write raw SQL, use the SupabaseUI, or a different ORM if you would like, but an ORM makes this much easier. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connect-prisma-to-our-supabase-db"&gt;
  &lt;/a&gt;
  Connect Prisma to our Supabase DB
&lt;/h2&gt;

&lt;p&gt;Run:&lt;br&gt;
&lt;code&gt;npx prisma init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a new file called &lt;code&gt;schema.prisma&lt;/code&gt; in a new &lt;code&gt;prisma&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "&amp;lt;YOUR_DB_CONNECTION_STRING&amp;gt;"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace this with your connection string for the supabase DB you created in the &lt;a href="https://codewithwolf.com/how-to-use-react-with-supabase-pt-1"&gt; previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Be careful with these sensitive values. You will want to make sure that they remain secrets, so don't push these to github in a public repo. For this demo we will be hard coding them to just keep things simple. &lt;/p&gt;

&lt;p&gt;Your connection string should look like this: &lt;code&gt;postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-models"&gt;
  &lt;/a&gt;
  Creating Models
&lt;/h2&gt;

&lt;p&gt;Creating models with Prisma has a bit of a learning curve. Check out &lt;a href="https://www.prisma.io/"&gt;the docs&lt;/a&gt; as you build out these models. &lt;/p&gt;

&lt;p&gt;For now, copy and paste this into the &lt;code&gt;prisma/schema.prisma&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

model User {
 id Int @id @default(autoincrement())
 firstName String 
 lastName String
 email String
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will create a small Customer Relationship Manager. Here we just have a simple &lt;code&gt;User&lt;/code&gt; model to get us started. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-migrations"&gt;
  &lt;/a&gt;
  Create Migrations
&lt;/h2&gt;

&lt;p&gt;Next we need to create our migrations. This is extremly simple and can be done automatically with Prisma. &lt;/p&gt;

&lt;p&gt;Run the command: &lt;br&gt;
&lt;code&gt;npx prisma migrate dev --name init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You will see a &lt;code&gt;migrations&lt;/code&gt; folder created in the &lt;code&gt;prisma&lt;/code&gt; directory. If you navigate to your project in the Supabase UI, you will see the are now tables created! One is named &lt;code&gt;User&lt;/code&gt; and was created from our migration. (Another table is &lt;code&gt;_prisma_migrations&lt;/code&gt; and is used by Prisma to internally keep track of which migrations have been created or rolledback). &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#install-prisma-client"&gt;
  &lt;/a&gt;
  Install Prisma Client
&lt;/h2&gt;

&lt;p&gt;Because we are using Prisma, the next step before we can seed and query our DB is to install the Prisma client. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add @prisma/client&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we will create a new file in the &lt;code&gt;prisma&lt;/code&gt; directory called &lt;code&gt;prismaClient.js&lt;/code&gt; with the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

module.exports =  prisma


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#seed-db"&gt;
  &lt;/a&gt;
  Seed DB
&lt;/h2&gt;

&lt;p&gt;Now it's time to seed the database. Let's create a file called &lt;code&gt;seedDb.js&lt;/code&gt; in the &lt;code&gt;prisma&lt;/code&gt; directory that imports the &lt;code&gt;prismaClient&lt;/code&gt; we just created and seeds the DB with some dummy data. &lt;/p&gt;

&lt;p&gt;We will use &lt;code&gt;faker&lt;/code&gt; to create some fake names for the dummy data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const prisma = require('./prismaClient.js')
const faker = require('faker')


const users = []

function createUsers(){
    const num = 100;
    let x = 0;

    while(x &amp;lt; 100){
        const user = {
            firstName: faker.name.firstName(),
            lastName: faker.name.lastName(),
            email: faker.internet.email(),
            }
    users.push(user)
    x++
    }
}


async function seedDb(){
 await prisma.user.createMany({data: users})
} 


async function main() {
    createUsers()
    await seedDb()
}


main().catch((e) =&amp;gt; {
    throw e
  }).finally(async () =&amp;gt; {
    await prisma.$disconnect()
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#read-from-db-with-the-supabase-js-client"&gt;
  &lt;/a&gt;
  Read From DB with the Supabase JS Client
&lt;/h2&gt;

&lt;p&gt;Now that we can create tables with migrations and write to tables using our ORM, we are ready to get back into our React app and perform CRUD applications on this data. &lt;/p&gt;

&lt;p&gt;The migrations and seeding in the previous step give us some data tables and mock data to work with here. &lt;/p&gt;

&lt;p&gt;From now on, in our react app, we will be using the supabase client to interact with our database. &lt;/p&gt;

&lt;p&gt;First let's create a new folder called &lt;code&gt;components&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;Then in the &lt;code&gt;src/components&lt;/code&gt; directory, we will create a new component called  &lt;code&gt;Users.jsx&lt;/code&gt;, which will looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect, useState } from "react";
import supabase from "../supabase";

export default function () {
  const [loading, setLoading] = useState(true);
  const [users, setUsers] = useState([]);

  async function getUsers() {
    const { data, error } = await supabase.from("User").select();
    setUsers(u =&amp;gt; u= data);
  }

  useEffect(() =&amp;gt; {
    setLoading(true);
    getUsers();
    setLoading(false);
  }, []);

  return (
    &amp;lt;&amp;gt;
      &amp;lt;h2&amp;gt;Users&amp;lt;/h2&amp;gt;
      {loading ? (
        &amp;lt;p&amp;gt;loading...&amp;lt;/p&amp;gt;
      ) : (
        &amp;lt;&amp;gt;
          {users?.length ? (
            &amp;lt;ul&amp;gt;
              {users.map((user) =&amp;gt; (
                &amp;lt;li&amp;gt;
                  {user.email} : {user.firstName} {user.lastName}
                &amp;lt;/li&amp;gt;
              ))}
            &amp;lt;/ul&amp;gt;
          ) : (
            &amp;lt;p&amp;gt;No users currently&amp;lt;/p&amp;gt;
          )}
        &amp;lt;/&amp;gt;
      )}
    &amp;lt;/&amp;gt;
  );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In theory, this will print every user's email and name. &lt;/p&gt;

&lt;p&gt;We don't want to do that unless the user is logged in, so let's update our &lt;code&gt;App.js&lt;/code&gt; file to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "./App.css";
import supabase from "./supabase";
import { useState, useEffect } from "react";
import Users from "./components/Users";

function App() {
  const [user, setUser] = useState(null);

  supabase.auth.onAuthStateChange((event, session) =&amp;gt; {
    if (session?.user) {
      setUser((u) =&amp;gt; (u = session.user));
    }
  });

  async function signInWithGithub() {
    const { user, session, error } = await supabase.auth.signIn({
      provider: "github",
    });
  }

  async function signOut() {
    const { error } = await supabase.auth.signOut();
    setUser((u) =&amp;gt; (u = null));
  }

  return (
    &amp;lt;div className="App"&amp;gt;
      {!user ? (
        &amp;lt;button onClick={signInWithGithub}&amp;gt;Sign In With Github&amp;lt;/button&amp;gt;
      ) : (
        &amp;lt;&amp;gt;
          &amp;lt;button onClick={signOut}&amp;gt;Log Out, {user?.email}&amp;lt;/button&amp;gt;
          &amp;lt;Users /&amp;gt;
        &amp;lt;/&amp;gt;
      )}
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the user will be presented with a Log In button if not authenticated, and if they are authenticated we should see a list of all of our user's email and names. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;To write, update, get real-time updates, create stored-procedures, use storage and the many more features of Supabase, check out the Supabase JS client &lt;a href="https://supabase.com/docs/reference/javascript/select"&gt;docs&lt;/a&gt;. They are easy to follow and very helpful. &lt;/p&gt;

&lt;p&gt;Hopefully this got you started with Supabase and you can be well on your way to building real-time authenticated web apps quickly without the overhead of managing a DB and API.&lt;/p&gt;

&lt;p&gt;If you like this post and it helped you, share it with friends. &lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>7 Strategies You Need to Know to Crack FAANG Interviews!</title>
      <author>Shaheer</author>
      <pubDate>Tue, 30 Nov 2021 01:30:34 +0000</pubDate>
      <link>https://dev.to/shaheer912/7-strategies-you-need-to-know-to-crack-faang-interviews-32j</link>
      <guid>https://dev.to/shaheer912/7-strategies-you-need-to-know-to-crack-faang-interviews-32j</guid>
      <description>&lt;p&gt;Isn’t it time to start your FAANG interview preparations? These interviews are fast becoming the norm for the most competitive companies in Silicon Valley. It’s not just about having a great resume and knowing how to ace an interview. You need to be at the top of your game, and here are seven strategies you need to know before you walk into your next FAANG interview:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h1&gt;

&lt;p&gt;Networking is one of the most important things you can do during your interview process. You never know who will be interviewing you. Your boss might know someone on the interviewing team, and they’re more inclined to hire people they know and trust for these interviews.&lt;/p&gt;

&lt;p&gt;Make sure you’re networking every day.  Follow company insiders on LinkedIn, attend company events, and even interact with employees online. You never know who will be interviewing you, and it’s easier to build relationships if you know people before they even consider you for an interview.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#know-the-company"&gt;
  &lt;/a&gt;
  Know the company
&lt;/h1&gt;

&lt;p&gt;One of the most important things candidates can do during their interview process is to familiarize themselves with the company they’re interviewing with. As much as possible, know everything about the company before you go in for your interview.&lt;/p&gt;

&lt;p&gt;It’s okay to do your research ahead of time so you can be confident in your answers to interview questions. You want to show that you’ve done your due diligence by researching the company and doing your best to prepare for the questions you might be asked during the interview.&lt;/p&gt;

&lt;p&gt;It might seem like a no-brainer, but knowing as much as possible about the company before going in for an interview will make you stand out from other candidates who don’t take this as seriously as they should.&lt;/p&gt;

&lt;p&gt;What are the company’s values? What are their goals? What are their current projects? You can do your own research online or have a conversation with someone you know who works at the company.&lt;/p&gt;

&lt;p&gt;Remember that these interviews are highly competitive, so any information you can gather about the company will give you an advantage over other applicants.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-be-afraid-to-ask-questions"&gt;
  &lt;/a&gt;
  Don’t be afraid to ask questions
&lt;/h1&gt;

&lt;p&gt;One of the best ways to show your interest in the job is to ask questions. There are certain questions you should never ask, but there are also some questions that can help you stand out from other candidates.&lt;/p&gt;

&lt;p&gt;For example, if you’re interviewing for a position in data science, you might want to ask about their data science strategy. If you’re interviewing for a position in IT, you might want to ask about their IT strategy.&lt;/p&gt;

&lt;p&gt;What sort of data do they work with? what is the volume of the data? What technologies and architecture do they use? What are the company's plans for the future?&lt;/p&gt;

&lt;p&gt;These are all great questions that show your passion and interest in the company.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#know-about-the-companys-culture"&gt;
  &lt;/a&gt;
  Know About The Company’s Culture
&lt;/h1&gt;

&lt;p&gt;This is a huge part of any company, and it can take a lot of time to learn about a company’s culture. But it’s a necessary part of the interview process that will help you prepare for your interview and help you stand out from your competition.&lt;/p&gt;

&lt;p&gt;In order to learn about a company’s culture, talk to people who work there. Check out Glassdoor reviews. If the company has a blog, read it. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#be-ready-for-the-interview"&gt;
  &lt;/a&gt;
  Be ready for the interview
&lt;/h1&gt;

&lt;p&gt;Be sure to be fully prepared for your FAANG interview. You don’t want to waste time and money on an interview and find out you don’t have the skills the company is looking for.&lt;/p&gt;

&lt;p&gt;It’s important to know what you’re looking for and what the company is looking for. Do your research and find out where you’d be a good fit. If you know that, then it’s just a matter of presenting that information to the interviewer during the interview.&lt;/p&gt;

&lt;p&gt;It’s also important to know what questions you might be asked and how to answer them. Make sure you know everything about the company before going in for an interview and it will make the process a lot easier.&lt;/p&gt;

&lt;p&gt;Hint: JudoCoder.com can help you with learning how to tough technical interview questions at FAANG companies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-should-you-know-before-the-interview"&gt;
  &lt;/a&gt;
  What should you know before the interview?
&lt;/h1&gt;

&lt;p&gt;Some entities like Google, Microsoft, and Apple have a reputation for being difficult to interview with. These companies expect candidates to know all about their company and what they stand for. They also expect candidates to be able to answer difficult questions about their company and the industry.&lt;/p&gt;

&lt;p&gt;FAANG interviews can be tough, but you can make them a little easier by making sure you know the following:&lt;/p&gt;

&lt;p&gt;• Google: Know about Google’s core values and how they support them. You should also know about Google’s history, and their famous founders.&lt;/p&gt;

&lt;p&gt;• Facebook: Facebook is one of the most popular social media platforms in the world. They offer a wide range of services, including their own social media site and Instagram. You’ll need to know how they differ from each other and what they offer that another social media site cannot provide.&lt;/p&gt;

&lt;p&gt;• Amazon: Amazon is one of the biggest retailers in the world. There are over 140 million people who shop with Amazon on a monthly basis, so it’s important to know who they’re targeting.&lt;/p&gt;

&lt;p&gt;• Apple: Apple is one of the most well-known tech companies in the world. They produce a wide range of products, but you should focus on their most&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-the-job"&gt;
  &lt;/a&gt;
  Get The Job
&lt;/h1&gt;

&lt;p&gt;The interview process is long, but it’s worth the hard work. You deserve to have the job you want. &lt;/p&gt;

&lt;p&gt;So, what are you waiting for? The interview process is just getting started. You have all the resources you need to get the job. All you have to do is follow these seven strategies to nail your next FAANG interview, and soon enough, you’ll be walking out of the office with a new job! If you need help preparing, &lt;a href="https://judocoder.com"&gt;we can help&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;All in all, it’s important to know the do’s and don’ts of FAANG interviews. Practice makes perfect, so take some time to read more about what you need to know before you head into the next interview.&lt;/p&gt;

&lt;p&gt;The good news is, &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; provides handpicked selection of all sorts of &lt;a href="https://judocoder.com"&gt;data structures and algorithm questions&lt;/a&gt;, most of these questions have been asked in a real interview!.&lt;/p&gt;

&lt;p&gt;I would suggest you create a free account at judocoder.com and start practicing your skills. You will be prepared in no time!..&lt;/p&gt;

&lt;p&gt;No matter what you do, make sure you practice! You'll be happy you did when it's time for your interview.&lt;/p&gt;

&lt;p&gt;What do you think? Share you comments below, I would love to hear what you have to say.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Creating a Vertical Slider using input type="range"</title>
      <author>Konnor Rogers</author>
      <pubDate>Tue, 30 Nov 2021 01:18:57 +0000</pubDate>
      <link>https://dev.to/paramagicdev/creating-a-vertical-slider-using-input-typerange-1pen</link>
      <guid>https://dev.to/paramagicdev/creating-a-vertical-slider-using-input-typerange-1pen</guid>
      <description>&lt;h2&gt;
  &lt;a href="#vertical-sliders"&gt;
  &lt;/a&gt;
  Vertical Sliders
&lt;/h2&gt;

&lt;p&gt;Vertical sliders have been around in the form of &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt; &lt;a href="https://caniuse.com/input-range"&gt;since IE 10&lt;/a&gt;, but vertical sliders remain challenging. This post describes a cross-browser technique for styling vertical sliders. It then dives into building it out as a fully customizable web component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h2&gt;

&lt;p&gt;To the MDN docs! Turns out vertical sliders only recently gained cross-browser support with Chrome being the latest to join the party.&lt;/p&gt;

&lt;p&gt;At the time of this writing browser support looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome 94 (Sep 21, 2021) (implemented via &lt;code&gt;-webkit-appearance: slider-vertical&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Safari 15 (Sep 19, 2021) (implemented via &lt;code&gt;-webkit-appearance: slider-vertical&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;IE 10 (2012!) – all versions of Edge via &lt;code&gt;writing-mode: bt-lr&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Firefox (date unknown) (implemented with an attribute: &lt;code&gt;&amp;lt;input type="range" orient="vertical"&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Total support at time of writing based on &lt;a href="https://caniuse.com/?search=vertical%20slider"&gt;Can I use&lt;/a&gt; is 48%.&lt;/p&gt;

&lt;p&gt;That's just not going to cut it and, on top of that, its largely supported through vendor prefixes. Perusing the archives, I stumbled across &lt;a href="https://css-tricks.com/sliding-nightmare-understanding-range-input/#orientation"&gt;this article that references orientation&lt;/a&gt;, but its from 2017 and doesn't account for these new features. However, it does make a great point: you cant remove default browser styling. To do that, you have to set &lt;code&gt;-webkit-appearance: none&lt;/code&gt; on the range.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-spec-say"&gt;
  &lt;/a&gt;
  What does the spec say?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range)"&gt;The spec says&lt;/a&gt; if the height is greater than the width, make it vertical. Sadly, due to the way browsers have implemented ranges in practice, its not an easy thing to do.&lt;/p&gt;

&lt;p&gt;Let's see if we can solve this problem ourselves!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First steps
&lt;/h2&gt;

&lt;p&gt;Let see how the browsers render vertical sliders natively:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BkvMGEm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/NH68vwl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BkvMGEm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/NH68vwl.png" alt="What the browser implementation looks like across the 4&amp;lt;br&amp;gt;
browsers" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to checkout the example here: &lt;a href="https://codepen.io/paramagicdev/pen/QWMYZKK"&gt;https://codepen.io/paramagicdev/pen/QWMYZKK&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's some layout stuff happening. Notably, the default display is &lt;code&gt;inline-block&lt;/code&gt; which is important to remember for later. We don't want our vertical slider to unnaturally break up the document flow — we should be able to place things above, below, before, and after the slider.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#recreating-the-slider"&gt;
  &lt;/a&gt;
  Recreating the Slider
&lt;/h2&gt;

&lt;p&gt;This gives us an idea of how the vertical slider is intended function. Now we can reimplement it as a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;custom element&lt;/a&gt;. Internally, we'll abstract the vendor-specific details into a single, clean API that Just Works™️ in all browsers.&lt;/p&gt;

&lt;p&gt;Since raw custom elements aren't much fun to write, let's use &lt;a href="https://www.fast.design/docs/fast-element/getting-started"&gt;FAST Element&lt;/a&gt; for this exercise. To get up and running quickly, I'll also use my &lt;a href="https://github.com/ParamagicDev/fast-element-typescript-starter"&gt;FAST Element TypeScript starter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We're going to need two files, one for logic and one for styles. Let's call them &lt;code&gt;slider.ts&lt;/code&gt; and &lt;code&gt;slider.styles.ts&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// slider.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FASTElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;customElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@microsoft/fast-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ViewTemplate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@microsoft/fast-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./slider.styles.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// This is the component's internal template that gets rendered in the shadow root&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ViewTemplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;VerticalSlider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;`
  &amp;lt;div class="wrapper" part="wrapper"&amp;gt;
    &amp;lt;input type="range" class="slider" part="slider"
      min="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"
      max="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"
      step="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"
      @input="&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;"
    &amp;gt;
  &amp;lt;/div&amp;gt;
`&lt;/span&gt;

&lt;span class="c1"&gt;// Defines a custom element called &amp;lt;vertical-slider&amp;gt;. This is the "host element."&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;customElement&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vertical-slider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;styles&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;VerticalSlider&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FASTElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Defines attributes that FAST will map to properties, e.g. &amp;lt;vertical-slider min="0" max="100"&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;attr&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;attr&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;attr&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;attr&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

  &lt;span class="c1"&gt;// Called when the internal slider emits the input event. We use this to keep the host element's value in sync.&lt;/span&gt;
  &lt;span class="nx"&gt;handleInput&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Add &amp;lt;vertical-slider&amp;gt; so TypeScript "sees" it&lt;/span&gt;
&lt;span class="nx"&gt;declare&lt;/span&gt; &lt;span class="nb"&gt;global&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;HTMLElementTagNameMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vertical-slider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VerticalSlider&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we're using &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt; under the hood, the component accepts the same attributes and passes them through to it. The &lt;code&gt;handleInput()&lt;/code&gt; function is in charge of updating the value of the web component when the slider moves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-styling"&gt;
  &lt;/a&gt;
  Basic Styling
&lt;/h2&gt;

&lt;p&gt;Now that we have the logic in place, let's give the slider some styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// slider.styles.ts&lt;/span&gt;

&lt;span class="c1"&gt;// Normalize is a variable that comes from the fast-element-typescript-starter.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;normalize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../normalize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@microsoft/fast-element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;

  :host {
    display: inline-block;
    position: relative;
    --width: 16px;
    --height: 175px;

    /* Native vertical sliders have increased rightward margin. */
    margin-right: calc(var(--width) / 2);
  }

  .wrapper {
    width: var(--width);
    height: var(--height);
    position: relative;

    /* center the slider */
    margin: 0 auto;
  }

  .slider {
    /* width and height get swapped due to how the transform
    gets calculated, they will get reversed when turned vertical */
    width: var(--height);
    height: var(--width);
    left: 0;

    /* Pushes the slider slightly upward off the bottom of the line */
    bottom: -0.75em;

    /* Rotation -90deg makes sliding upward increase, and
    downward decrease. TranslateY centers us since we're
    absolutely positioned */
    transform: rotate(-90deg) translateY(calc(var(--width) / 2));
    transform-origin: left;
    position: absolute;
  }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how our custom element compares to the native slider we started out with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v9fJiuiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/e5YiFpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9fJiuiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/e5YiFpw.png" alt="Comparison of web component to native slider" width="880" height="745"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's what it looks like in various browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nh9rOx3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yWOnpgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nh9rOx3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yWOnpgy.png" alt="Comparison of all browsers with web component" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(From left to right: Firefox, Chrome, Safari, Edge)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-styling"&gt;
  &lt;/a&gt;
  Advanced Styling
&lt;/h2&gt;

&lt;p&gt;This is a good start, but there are two problems we're facing now.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our slider looks different in all 4 browsers (Chrome, FF, Edge, and Safari)&lt;/li&gt;
&lt;li&gt;The slider's styles aren't easy to customize&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's solve both of these problems by disecting the slider into two parts: the &lt;em&gt;thumb&lt;/em&gt; and the &lt;em&gt;track&lt;/em&gt;. The thumb is the indicator you grab and move around. The track the long axis that the thumb moves along. We want to make both of these easy to customize.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-thumb"&gt;
  &lt;/a&gt;
  Styling the thumb
&lt;/h3&gt;

&lt;p&gt;It's important to note that we have to seperate vendor-specific selectors to accommodate polyfills. We can't do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.slider&lt;/span&gt;&lt;span class="nd"&gt;::ms-thumb&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.slider&lt;/span&gt;&lt;span class="nd"&gt;::-moz-range-thumb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* nope! */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To keep things dry, we'll bake our thumb styles into a variable and reuse them in each vendor-specific selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// slider.styles.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;thumbStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  cursor: pointer;
  height: var(--thumb-size);
  width: var(--thumb-size);
  border-radius: 50%;
  border: none;
  outline: 1px solid var(--thumb-outline);
  margin-top: calc((var(--thumb-size) / -2 + var(--track-width) / 2) - 1px);
  background-color: var(--thumb-color);
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  :host {
    --thumb-border: rgb(80, 80, 80);
    --thumb-color: rgb(80, 80, 80);
    --thumb-size: 16px;

    /* Allows us to style the slider our own way */
    -webkit-appearance: none;
  }

  /* https://css-tricks.com/styling-cross-browser-compatible-range-inputs-css/ */
  /* Special styling for WebKit/Blink */
  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;thumbStyles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  }

  /* All the same stuff for Firefox */
  .slider::-moz-range-thumb {
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;thumbStyles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  }

  /* All the same stuff for IE */
  .slider::-ms-thumb {
    &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;thumbStyles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Am5bMhF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/XeBHReo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Am5bMhF---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/XeBHReo.png" alt="Comparison of thumb across browsers" width="880" height="1198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The thumb now looks like this. Now we'll focus on the track.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-track"&gt;
  &lt;/a&gt;
  Styling the Track
&lt;/h3&gt;

&lt;p&gt;We'll split the track up since each browser implements them a bit differently.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// slider.styles.ts&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trackStyles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  width: var(--track-height);
  height: var(--track-width);
  background-color: var(--track-color);
  border: 1px solid var(--track-border-color);
  border-radius: var(--track-radius);
`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
:host {
  --track-height: 100%;
  --track-width: 6px;
  --track-radius: 6px;
  --track-color: rgb(225, 225, 225);
  --track-border-color: rgb(105, 105, 105);
}

.slider::-webkit-runnable-track {
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;trackStyles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
}

.slider::-moz-range-track {
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;trackStyles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
}
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a styled thumb and a track!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-feature"&gt;
  &lt;/a&gt;
  Bonus Feature
&lt;/h3&gt;

&lt;p&gt;Since we have more control over how the slider is being styled, we can take things a step further and make the track reflect the current value by styling it differently above and below the thumb. Unfortunately, most browsers don't make this easy for us, but Firefox exposes a &lt;code&gt;progress&lt;/code&gt; pseudo selector. Let's start with that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
:host {
  --progress-color: rgb(20, 122, 255);
  --progress-border-color: rgb(20, 122, 255);

  /* ... */
}

/* ... */

.slider::-moz-range-progress {
  width: var(--track-height);
  height: var(--track-width);
  background-color: var(--progress-color);
  border: 1px solid var(--progress-border-color);
  border-radius: var(--track-radius);
}
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This covers us for Firefox, but we need to target the remaining browsers. Fortunately, we can use a linear gradient and make use of CSS custom properties to tap into the slider's value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.volume-slider&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-slider-runnable-track&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--progress-color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--progress-color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--progress-percent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--track-color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--progress-percent&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--track-color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Astute readers may have noticed that we haven't defined &lt;code&gt;--progress-percent&lt;/code&gt; yet. This value needs to reflect the thumb's position along the track as a percentage. Let's go back to the component and make it set this variable when the value changes.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;src/vertical-slider/index.ts&lt;/code&gt;. Here we will add the logic that will update our &lt;code&gt;progress-percent&lt;/code&gt; as the value of the slider changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// slider.ts&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;VerticalSlider&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;FASTElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="nx"&gt;connectedCallback&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connectedCallback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progressPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressPercent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;valueChanged&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_oldValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progressPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;progressPercent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;updateProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--progress-percent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last, the fruit of our labor! A cross-browser, consistent vertical slider custom element that uses the browser's built-in &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFBSa0de--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/X4IuLus.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFBSa0de--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/X4IuLus.png" alt="A cross-browser comparison of the slider" width="880" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And heres a codepen of everything in 1 file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/paramagicdev/pen/LYjqXrZ?editors=1010"&gt;https://codepen.io/paramagicdev/pen/LYjqXrZ?editors=1010&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;There are even more features we could bake into the component such as a disabled state, tooltip values, and a wide array of other things you can find present in something like &lt;a href="https://github.com/shoelace-style/shoelace/blob/next/src/components/range/range.ts"&gt;Shoelace's Range Component&lt;/a&gt;. However, those are outside the scope of this post. I'll consider them an exercise for the reader. In addition, if you need a fully customizable slider, you may be better off constructing your own not using an &lt;code&gt;&amp;lt;input type="range"&amp;gt;&lt;/code&gt; purely because it is fairly inflexible. It doesn't accept nested children. Styling is difficult due to browser prefixes, and using custom thumbs is also challenging.&lt;/p&gt;

&lt;p&gt;If you'd like to see the &lt;code&gt;&amp;lt;vertical-slider&amp;gt;&lt;/code&gt; component's full source, &lt;a href="https://github.com/ParamagicDev/vertical-slider"&gt;check out the repo on GitHub&lt;/a&gt;. This component is &lt;em&gt;not&lt;/em&gt; currently released as an NPM package.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>100 días de código: 25, 26 y 27, comenzando la semana.</title>
      <author>Daro</author>
      <pubDate>Tue, 30 Nov 2021 00:52:28 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-25-26-y-27-comenzando-la-semana-1a73</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-25-26-y-27-comenzando-la-semana-1a73</guid>
      <description>&lt;p&gt;¡Hey hey hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a esta nueva entrada en la que explicare lo que ha sucedido en los últimos días que han sido muy ocupados.&lt;/p&gt;

&lt;p&gt;No olviden marcar bien sus prioridades para poder escribir en el blog (no como yo).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#antier"&gt;
  &lt;/a&gt;
  Antier:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Practique 30 min de touch typing.&lt;/li&gt;
&lt;li&gt;Termine el ejercicio de Etch a Sketch de The odin project.&lt;/li&gt;
&lt;li&gt;Hice el deploy de la pagina de mi relación.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Practique 30 min de Touch typing&lt;/li&gt;
&lt;li&gt;Mejore el uso de ramas en git y comencé a usar mejores practicas en los commits.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Complete los ejercicios de Javascript de la sección Fundamentals part 5.&lt;/li&gt;
&lt;li&gt;Complete la sección fundamentals part 5 de The odin project.&lt;/li&gt;
&lt;li&gt;Practique touch typing.&lt;/li&gt;
&lt;li&gt;Mejore el diseño de la pagina etch a sketch que había creado anteriormente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He bajado bastante mi productividad este fin de semana pero este lunes ha sido un buen comienzo de semana con lo cual me siento productivo.&lt;/p&gt;

&lt;p&gt;Espero que tengan un día excelente y mucho éxito con sus proyectos.&lt;br&gt;
¡Adiós mundo!&lt;/p&gt;

&lt;p&gt;PD: les dejo el png de la piedra que use en el proyecto piedra papel o tijera como cover.&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
