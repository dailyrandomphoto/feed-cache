<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 ways to add conditional properties to an object [...]</title>
      <author>prem jethwa</author>
      <pubDate>Thu, 13 Jan 2022 08:21:58 +0000</pubDate>
      <link>https://dev.to/premjethwa/3-ways-to-add-conditional-properties-to-an-object--91n</link>
      <guid>https://dev.to/premjethwa/3-ways-to-add-conditional-properties-to-an-object--91n</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sCEvS0xS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqhtavku44brnccvksmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sCEvS0xS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqhtavku44brnccvksmr.png" alt="3 ways to add conditional properties to an object" width="279" height="181"&gt;&lt;/a&gt;&lt;br&gt;
1 - Using Spread Operator&lt;/p&gt;

&lt;p&gt;What is Spread Operatot?&lt;br&gt;
source: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spread syntax (...)  allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.&lt;/p&gt;

&lt;p&gt;Example:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   ...(someCondition &amp;amp;&amp;amp; {a: “hi”})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const greed = {
  ...(true) &amp;amp;&amp;amp; {a: “hi”},
  ...(false) &amp;amp;&amp;amp; {b: "bye"},
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;2 - Using Object.assign&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Object.assign(a, conditionB ? { b: 1 } : null,
                 conditionC ? { c: 2 } : null,
                 conditionD ? { d: 3 } : null);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Object.assign modifies the first argument in-place while returning the updated object: so you can use it in a bigger formula to further manipulate the object.&lt;/p&gt;

&lt;p&gt;You can pass undefined or {} instead of null, with the same result. &lt;/p&gt;

&lt;p&gt;Number has no own enumerable properties, so you could even provide 0 instead since primitive values are wrapped.&lt;/p&gt;

&lt;p&gt;For jQuery Developers&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a = $.extend({}, {
    b: conditionB ? 5 : undefined,
    c: conditionC ? 5 : undefined,
    // and so on...
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;3 - To remove Undefined Values form Object not remove other falsely values like “”, 0 or null&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const me = {
  name: “prem”,
  age: undefined ,
  height: null
}

const cleanup = JSON.parse(JSON.stringify(me)); // { name: “prem”, height: null }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shot Tip:-&lt;/p&gt;

&lt;p&gt;Use !!value to get result in Boolean values if its truthy value the will return true otherwise False.&lt;/p&gt;

&lt;p&gt;Eg:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let isTruthy = “hello” 

console.log(!!isTruthy) // true

isTruthy = “”; //can be 0 or undefined or null

Console.log(!!isTruthy) // false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>A11y tips: hide content from screen readers</title>
      <author>Carlos Espada</author>
      <pubDate>Thu, 13 Jan 2022 07:28:19 +0000</pubDate>
      <link>https://dev.to/carlosespada/a11y-tips-hide-content-from-screen-readers-3mj3</link>
      <guid>https://dev.to/carlosespada/a11y-tips-hide-content-from-screen-readers-3mj3</guid>
      <description>&lt;p&gt;If you want to &lt;strong&gt;hide content for screen readers&lt;/strong&gt; but still be available to sighted or keyboard users, just use &lt;code&gt;aria-hidden="true"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A classic example where it is useful is to hide icons that serve as visual support for a text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;style&amp;gt;
  .icon-star: before {content: "★"; }
&amp;lt;/style&amp;gt;

&amp;lt;span&amp;gt;
  &amp;lt;span class="icon-star" aria-hidden="true"&amp;gt;&amp;lt;/span&amp;gt;
  Favorite
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way the icon that we insert with CSS only appears for sighted users, while screen readers will announce only "&lt;em&gt;Favorite&lt;/em&gt;", instead of "&lt;em&gt;Black Star Favorite&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;It is best to &lt;strong&gt;avoid using this ARIA attribute on focusable elements&lt;/strong&gt;, as being able to receive focus but hiding from screen readers can cause confusion for their users. You could use a &lt;code&gt;tabindex="- 1"&lt;/code&gt; to avoid focus but then it would be out of use for sighted keyboard users.&lt;/p&gt;

&lt;p&gt;This and other tips on the use of &lt;code&gt;aria-hidden="true"&lt;/code&gt; can be found in the &lt;a href="https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html#:~:text=Hiding%20Content%20from%20Assistive%20Technology"&gt;already named article&lt;/a&gt; by Scott O'Hara, and on the use of icon fonts in &lt;a href="https://www.filamentgroup.com/lab/bulletproof_icon_fonts.html"&gt;the article&lt;/a&gt; by Zach Leathermann, from which the example is taken.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>tips</category>
      <category>html</category>
    </item>
    <item>
      <title>Will a couple of line markers in IDE make your microservice code mode readable?</title>
      <author>Yuriy Artamonov</author>
      <pubDate>Thu, 13 Jan 2022 07:17:34 +0000</pubDate>
      <link>https://dev.to/jreznot/will-a-couple-of-line-markers-make-your-microservice-code-mode-readable-5h5g</link>
      <guid>https://dev.to/jreznot/will-a-couple-of-line-markers-make-your-microservice-code-mode-readable-5h5g</guid>
      <description>&lt;p&gt;Writing microservices has never been easy and does not become easier with growing codebases. All the complexity strives from tons of interactions between the moving parts of your applications.&lt;/p&gt;

&lt;p&gt;And then we had this year's holidays and I had enough free time to think about it. Many complex measures can be used to make the code of microservices more readable, numerous expressive APIs, modern languages, we already use all of these, but the situation does not get better.&lt;/p&gt;

&lt;p&gt;Finally, I've found a stupid simple approach to simplify the reading of code — just show a couple of icons for the most dangerous places where services interact with file systems, networks, make database queries, etc. And wow! It finally makes the code easier to read for me; I clearly see those important interaction points where things may go wrong.&lt;/p&gt;

&lt;p&gt;Please welcome, the result of my Christmas holidays: &lt;a href="https://plugins.jetbrains.com/plugin/18361-microservices-annotator"&gt;Microservices Annotator&lt;/a&gt; plugin for IntelliJ IDEA. Because what else do developers from the IntelliJ IDEA team do on holidays — of course, they do plugins for IntelliJ IDEA!&lt;/p&gt;

&lt;p&gt;In a nutshell, it just shows line markers for method calls in Java and Kotlin code where you call some well-known API methods, such as Spring Data or Spring Feign Client calls.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJu9D9BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8xru6zdnoejia7k5r3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJu9D9BQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8xru6zdnoejia7k5r3i.png" alt="Line markers in editor" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that is just the tip of the iceberg. I know for sure, people use tons of custom APIs and not only OSS things like Spring Framework. That's why this plugin also enables you to mark any method in your codebase as some meaningful interaction point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSZb237O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1shlsd9n4s6ox6og9hv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSZb237O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1shlsd9n4s6ox6og9hv.png" alt="Intention menu" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many interaction types supported: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSsUdfrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p69zqf56uospm2abr52d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSsUdfrB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p69zqf56uospm2abr52d.png" alt="Supported types" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the plugin just remembers your method signature in the project settings and you will be able to share the &lt;code&gt;.idea/microserviceCalls.xml&lt;/code&gt; file with your colleagues. Also, if you try to annotate some API from a known public library, such as code inside org.springframework package, this usage will be reported to our server so this setting can be distributed to all users of the plugin after moderation. You can check APIs that have been recently approved on &lt;a href="https://msa.strangeway.org/"&gt;https://msa.strangeway.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And this is a community-driven project, so all the data of marked public APIs are available on &lt;a href="https://github.com/strangeway-org/microservices-annotator-db"&gt;Github&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Finally, it is just that simple for you: Hit &lt;code&gt;Alt-Enter&lt;/code&gt; on a method cal and Choose &lt;code&gt;Mark microservice interaction method&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bDK2gu-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34uu4e7j0ng9u0m74y7j.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bDK2gu-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34uu4e7j0ng9u0m74y7j.gif" alt="Using intention in IDE" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please try and give us some feedback!&lt;/p&gt;

&lt;p&gt;Would be great to hear not only positive feedback but also some criticism of this approach, maybe some better options exist. What do you think?&lt;/p&gt;

&lt;p&gt;And answering the original question from the title: Yes, I believe this is a good thing for code reviews that will make your microservice code mode readable!&lt;/p&gt;

</description>
      <category>ide</category>
      <category>programming</category>
      <category>microservices</category>
      <category>java</category>
    </item>
    <item>
      <title>Virtual and Actual Events 2022</title>
      <author>Ingo Steinke</author>
      <pubDate>Thu, 13 Jan 2022 07:16:43 +0000</pubDate>
      <link>https://dev.to/ingosteinke/virtual-and-actual-events-2022-237i</link>
      <guid>https://dev.to/ingosteinke/virtual-and-actual-events-2022-237i</guid>
      <description>&lt;p&gt;Events to look forward to in 2022, just a small and subjective selection from the perspective of a European web developer focused on front-end development, accessibility, and sustainability.&lt;/p&gt;

&lt;p&gt;This is a repost, you can read the &lt;a href="https://www.open-mind-culture.org/en/1947/virtual-and-actu%E2%80%A6tech-events-2022/"&gt;same content&lt;/a&gt; in my blog "Open Mind Culture" which used to feature less technological topics, but somehow I want to switch back to more Indie Web publishing to be more independent of "social" networks like ("Tech") Twitter, Meetup, and maybe even DEV (which is currently the only social platform for technical content that doesn't either suck or is nearly abandoned like mastodon seems to be.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdirections.org/remixed/"&gt;Remix Conference&lt;/a&gt; Friday, 14 January 2022 from 12:00 to 16:00 CET. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://ti.to/smashingmagazine/a-smashing-hour-sara-part2"&gt;A Smashing Hour with Sara Soueidan&lt;/a&gt; Part 2, 20 January 2022 from 17 p.m. CET.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.meetup.com/CSS-Cafe/events/283116732/"&gt;CSS Café: Understanding the Cascade&lt;/a&gt;, Online-Meetup with Bramus van Damme on Thursday, 27 January 2022 also at 17:00 (5 p.m.).&lt;/p&gt;

&lt;p&gt;Also looking forward to the upcoming &lt;a href="https://beyondtellerrand.com/"&gt;beyond tellerrand conferences&lt;/a&gt; &lt;a href="https://beyondtellerrand.com/events/dusseldorf-2022"&gt;on 2 and 3 May 2022 in Düsseldorf&lt;/a&gt; and on &lt;a href="https://beyondtellerrand.com/events/berlin-2022"&gt;1 and 2 September 2022 in Berlin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another conference that will hopefully continue to take  place in place as an actual event: &lt;a href="https://blog.nevercodealone.de/php-testing-refactoring-nca-conference-duisburg/"&gt;Never Code Alone&lt;/a&gt; in the quiet media harbor of Duisburg in the west of the German Ruhrgebiet region.&lt;/p&gt;

&lt;p&gt;Hope to meet you at one of the few actual conferences!&lt;/p&gt;

&lt;p&gt;Stay tuned for more upcoming events!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>eventsinyourcity</category>
    </item>
    <item>
      <title>Different bullet for each item in the list using simple CSS</title>
      <author>Basharath</author>
      <pubDate>Thu, 13 Jan 2022 07:12:55 +0000</pubDate>
      <link>https://dev.to/basharath/customize-each-list-item-style-with-this-simple-css-jbc</link>
      <guid>https://dev.to/basharath/customize-each-list-item-style-with-this-simple-css-jbc</guid>
      <description>&lt;p&gt;Lists are the form of data representation commonly used by all types of documents. In HTML there are two types of lists namely ordered and unordered lists. &lt;/p&gt;

&lt;p&gt;In an ordered list, the items are indicated by serial numbers or letters that are in some order. In an unordered list, the list items are indicated by various types of bullets viz., disc, circle, square, or by an image. &lt;/p&gt;

&lt;p&gt;By default, the ordered list items are indicated by numbers and unordered list items by disc bullets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Unordered list --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Ordered list --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3X5HFQic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977633472/Bkjwpjzgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3X5HFQic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977633472/Bkjwpjzgm.png" alt="image.png" width="730" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-list-style-types"&gt;
  &lt;/a&gt;
  Styling list style types
&lt;/h2&gt;

&lt;p&gt;For styling lists, there are CSS list properties using which we can change the list style type, list position, and add an image as a list type nothing but the image as the bullet of the list item.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-list-property"&gt;
  &lt;/a&gt;
  CSS list property
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* list-style is a shorthand property */&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;list-style-type&lt;/span&gt; &lt;span class="n"&gt;list-style-position&lt;/span&gt; &lt;span class="n"&gt;list-style-image&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;list-style-type&lt;/code&gt; - to change the bullet styles of the list&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;list-style-position&lt;/code&gt; - to change the position of the list, two values outside and inside&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;list-style-image&lt;/code&gt; - to add an image as a bullet for the list, if the image fails to show then list-style-type will be shown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in order to change the bullet type for the list, we just need to use CSS list style type with the bullet we need. Let's see how to change the bullets for the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Unordered list */&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'❤️'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;or&lt;/span&gt; &lt;span class="c"&gt;/* list-style: '❤️'; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Orderedlist */&lt;/span&gt;
&lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'👍'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t1rm9fz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977591471/NqpRKa_ek.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t1rm9fz8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977591471/NqpRKa_ek.png" alt="image.png" width="746" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just by changing the CSS list style type value, we can change the bullets of any list. The possible value for the list style type can be anything, even language-specific letters, roman numerals, etc. To know various supported list style types in CSS head over to &lt;a href=""&gt;this MDN Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But using this way all the style types are going to be the same for all the items of the list. In order to customize style type for every individual item, we need to define it by using CSS at-rule, &lt;code&gt;@counter-style&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customize-individual-list-style-type"&gt;
  &lt;/a&gt;
  Customize individual list style type
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;@counter-style&lt;/code&gt; we can define the custom list style type for individual items of the list. It has so many properties for customizing the list. There are three important properties that we need to know to customize the list style types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@counter-style&lt;/span&gt; &lt;span class="n"&gt;custom-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cyclic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"😀"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;custom-type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/*or list-style-type: custom-type; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;system&lt;/code&gt; - defines how the list bullets should show. The possible values for it are: cyclic, numeric, alphabetic, symbolic, additive, or fixed, etc&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;symbols&lt;/code&gt; - here is where you need to give different list style types you want to show for the list items. It can be numbers, alphabets, symbols, even images separated by a space&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;suffix&lt;/code&gt; - usually, this one should be space, to have a space after the style type. Other than space you can have anything as a suffix.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see all the above in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Unordered list --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;One&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Two&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Three&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Four&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Ordered list --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;One&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Two&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Three&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Four&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* style type for unordered list */&lt;/span&gt;
&lt;span class="k"&gt;@counter-style&lt;/span&gt; &lt;span class="n"&gt;custom-unordered&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cyclic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s2"&gt;'❓'&lt;/span&gt; &lt;span class="s2"&gt;'✌️'&lt;/span&gt; &lt;span class="s2"&gt;'❤️'&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* style type for ordered list */&lt;/span&gt;
&lt;span class="k"&gt;@counter-style&lt;/span&gt; &lt;span class="n"&gt;custom-ordered&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'➡️'&lt;/span&gt; &lt;span class="s2"&gt;'😀'&lt;/span&gt; &lt;span class="s2"&gt;'👍'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;custom-unordered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* or list-style-type: custom-unordered; */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;custom-ordered&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3OyIY5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977791593/uO54HIt7W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3OyIY5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641977791593/uO54HIt7W.png" alt="image.png" width="698" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image of the result is put here because we can't edit the CSS in dev.to. To see the actual result on the webpage, see the original article on the &lt;a href="https://devapt.com/customize-css-list-style-type"&gt;devapt&lt;/a&gt; site.&lt;/p&gt;

&lt;p&gt;So using the @counter-style that is how we can add individual list style types. If you see when &lt;code&gt;system&lt;/code&gt; is defined as &lt;code&gt;cyclic&lt;/code&gt; the same list style type repeats after all types are done, and when it is &lt;code&gt;fixed&lt;/code&gt; the style type for the item number more than the number of symbols defined, get the default style type i.e., a number for the ordered list and disc for the unordered list.&lt;/p&gt;

&lt;p&gt;You need &lt;code&gt;system&lt;/code&gt; value as &lt;code&gt;fixed&lt;/code&gt; only when you know that the number of items are fixed else it's better to go for &lt;code&gt;cyclic&lt;/code&gt; or any other type. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Safari is the only modern browser that doesn't support this CSS feature. You can see the compatibility &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style#browser_compatibility"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That is all about styling the individual list item types using CSS.&lt;/p&gt;

&lt;p&gt;I'll be sharing interesting tips, tricks and hacks about web development and technology on &lt;a href="https://twitter.com/wahVinci"&gt;Twitter @wahVinci&lt;/a&gt; and &lt;a href="https://www.instagram.com/dev_apt/"&gt;Instagram @dev_apt&lt;/a&gt;, follow if you are interested.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>It's Prisma Time - Pagination</title>
      <author>Luca Del Puppo</author>
      <pubDate>Thu, 13 Jan 2022 07:10:33 +0000</pubDate>
      <link>https://dev.to/this-is-learning/its-prisma-time-pagination-218e</link>
      <guid>https://dev.to/this-is-learning/its-prisma-time-pagination-218e</guid>
      <description>&lt;p&gt;Hi Guys 👋&lt;br&gt;
Today we are going to see how to paginate our results.&lt;br&gt;
So don't waste time and let's go!&lt;/p&gt;

&lt;p&gt;With Prisma there are two ways to paginate results: &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/pagination#offset-pagination"&gt;Offset pagination&lt;/a&gt; or &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination"&gt;Cursor-based pagination&lt;/a&gt;.&lt;br&gt;
What are the differences though?&lt;br&gt;
The first one is used when we need to create a sequence of pages and get their datas according to the page. The second one, instead, is used when we want the items after a specific record, to continue the list after that element.&lt;/p&gt;

&lt;p&gt;But let's see an example of both, starting with the first one &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;take&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageOnePosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Page 1: `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageOnePosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageTwoPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Page 2: `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageTwoPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result of this example is this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the first &lt;code&gt;findMany&lt;/code&gt; has the orderBy and the take options. The orderBy is used to give a sort to our results and the take option is used to get the first 3 elements of the results. In this case the skip option isn't indicated so its value is 0 (default value). Instead, in the second &lt;code&gt;findMany&lt;/code&gt; method there is also the skip option, and it's indicated with the value 3. In this case, the findMany method returns 3 elements (take: 3) after the third element (skip: 3), so we can see the results of the second page.&lt;br&gt;
I think it's not so difficult to understand it, so let's go on to the cursor implementation.&lt;br&gt;
Let's start from the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageOnePosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Page 1: `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageOnePosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pageTwoPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;take&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pageOnePosts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pageOnePosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;asc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Page 2: `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pageTwoPosts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 9"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post title 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Post content 6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-03T10:14:51.274Z"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may notice, the results are the same of the previous example but the implementation is a little bit different in the second part.&lt;br&gt;
In this case, the second findMany has the same orderBy and take options as in the first example, but it has a different skip and uses the cursor option. First let's focus on the cursor option. This option allows us to indicate the last item returns by the previous search, so we can restart our pagination from this element and combining it with the &lt;code&gt;skip: 1&lt;/code&gt;, we'll get the results after this element.&lt;br&gt;
&lt;em&gt;It's important to indicate the skip option with the one value, otherwise the element indicates in the cursor is part of the results.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can tell, both implementations are correct but each of them resolve a different type of pagination. Now it's your job to take the right one. &lt;/p&gt;

&lt;p&gt;Ok guys that's all!&lt;br&gt;
I hope now you have an idea of how you can paginate your datas using prisma.&lt;br&gt;
In the next article, we are going to see how to aggregate and group the datas.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;br&gt;
Bye Bye 👋&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/Puppo/it-s-prisma-time/tree/10-pagination"&gt;Here&lt;/a&gt; you can find the code of this article.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>database</category>
      <category>orm</category>
    </item>
    <item>
      <title>Top 9 Healthcare Start-Up ideas</title>
      <author>Kuldeep Tarapara</author>
      <pubDate>Thu, 13 Jan 2022 07:08:08 +0000</pubDate>
      <link>https://dev.to/kuldeeptarapara/top-9-healthcare-start-up-ideas-26c5</link>
      <guid>https://dev.to/kuldeeptarapara/top-9-healthcare-start-up-ideas-26c5</guid>
      <description>&lt;p&gt;Amidst the ongoing pandemic, what do you care about the most? Is it your job, happiness, or anything else? The answer is obvious, your health and wellbeing. This pandemic taught us how important it is to take care of our health and the health of our dear ones. With this, the health industries also grew exponentially compared to the previous years. If you want to mark your presence online by providing healthcare services through your start-up now is the perfect time to grab the opportunities. Below are a few healthcare applications ideas you can consider for your start-up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Workout Applications:&lt;/strong&gt;&lt;br&gt;
These are by far one of the most common and widely used healthcare applications. This application instructs the users about the different types of exercises that they can perform by themselves. The exercises are designed in such a way that you don’t need any exercise equipment for workouts. Exercises &amp;amp; workouts are designed such that everyone can perform them whether they are a beginner or not. It let the users schedule their weekly goals and reminders so that they never miss a good workout. This application is ideal for people who prefer to work out at home at cannot join a gym due to a hectic schedule.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YUDIhA0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeckrnljmpqobiha81bz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YUDIhA0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeckrnljmpqobiha81bz.jpg" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Medicine Delivery Applications:&lt;/strong&gt;&lt;br&gt;
Right now these types of applications are trending &amp;amp; the number of users of these types of applications is increasing day by day. After all, everyone loves the comfort of their home, and who wouldn’t want that their medicines are being delivered to their doorstep? During the lockdown, people were facing difficulties in finding medicines. These applications completely solved that problem by providing home delivery of those medicines at really good and affordable prices. You can also include an option to let users choose a member of your application by which they can avail certain benefits.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Women’s Healthcare App:&lt;br&gt;
There is no doubt that both men’s and women’s bodies have different functionalities. Moreover, the menstrual cycle in women makes it even much more complicated. The applications designed specifically for women’s health can be beneficial. An application can be developed by which women can get an idea about their menstrual cycle and provide them a time frame to prepare themselves. The application can also be designed to address various women-related diseases such as hormonal disorders, breast cancer, etc., and get them in touch with a Gynecologist nearby them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exercise Rewarding Applications:&lt;br&gt;
Currently, there are not many apps available in the market under this category so there are good chances that people would use it, because everyone loves rewards. You can include virtual challenges which can be done by anyone and anywhere around the globe. Upon completing these challenges you can provide them with rewards such as custom medals, gift cards, vouchers, etc. Obviously, you would need to pay a small fee to participate in the challenge. You can add new virtual races every month so that people will stay and more people would join in. Earning a reward along with your fitness, it’s like killing two birds with one stone. Talk with us to develop this kind of app &lt;a href="https://bosctechlabs.com/"&gt;https://bosctechlabs.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XVHOepKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2rnfkawb8w9y2j8tvcx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XVHOepKd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2rnfkawb8w9y2j8tvcx.jpg" alt="Image description" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Supplements Application:&lt;/strong&gt;&lt;br&gt;
How many supplements do you remember? Maybe only the common ones such as vitamins, proteins, calcium, etc. But the list is too long and nobody remembers every supplement except your doctor. This application can have all the supplements listed with their pros and cons. You can get information about each and every supplement along with the details such as their consumption in daily diet. You can use this application to add nutrients to your daily diet. It will give you a clear idea about which should you take and which ones you should avoid for your body. Moreover, you can add additional features such as the reminder to let you remind about your supplement intake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Reiki Master finding application:&lt;/strong&gt;&lt;br&gt;
Reiki is a Japanese word that means universal life energy. It is a healing technique based on the energy channeling principle. It was first originated in 1920, but still many people don’t know about this. It’s even more difficult to find a proper Reiki master. An application can be created to provide appointments and therapy with authentic Reiki masters in nearby areas. With the help of the application, people will become more aware of Reiki Therapy. You can also include Reiki courses on the website so that people can learn the art of Reiki healing by themselves. Write to us to know more &lt;a href="https://bosctechlabs.com/"&gt;https://bosctechlabs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kjy2G-vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tivouvxq5d3sc157iyym.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kjy2G-vy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tivouvxq5d3sc157iyym.jpg" alt="Image description" width="880" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Chiropractor finding application:&lt;/strong&gt;&lt;br&gt;
A chiropractor is a health care professional focused on the diagnosis and treatment of neuromuscular disorders, with an emphasis on treatment through manual adjustment and/or manipulation of the spine. More people are suffering from spinal pains due to the constant sitting arrangement of their work lives. Chiropractors relieve pain without any drug or medicine. You can create an application to schedule appointments with qualified chiropractors in nearby areas. Recently, more people are seeking chiropractor therapy sessions due to constant stress and pain. It would be perfect for someone who hates taking their medicines. Reach us to know more &lt;a href="https://bosctechlabs.com/"&gt;https://bosctechlabs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Remote Health Tracking Application:&lt;/strong&gt;&lt;br&gt;
This type of application can be extremely useful to treat patients suffering from chronic disease. By developing these applications healthcare professionals can monitor each and every patient remotely if they are suffering from chronic diseases such as diabetes, blood pressure, sugar levels, cancer, and much more. By using I.O.T. one can create an application to monitor these types of patients. Such apps can also be used by family members of chronically ill patients to monitor them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;3D Prosthetic Body Parts:
Prosthetic body parts are a great way to replace amputated body parts. However, not everyone can afford it as it is too much costly. But there is a way to get prosthetic body parts at a cheap rate that is 3D printing. 3D printed prosthetic parts are cheaper and almost everyone can afford them. How about a website where you can sell 3D printed prosthetic body parts. Since the price is low and affordable people would prefer it more. You can also include an option to 3D print the parts according to the different sizes of different body parts of the patient.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3JeYaM8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/874x7lyqo5s4hlqonfyh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3JeYaM8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/874x7lyqo5s4hlqonfyh.jpg" alt="Image description" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are some of the great ideas which you can use to create healthcare-based start-up applications. However, there is always room for new ideas. The Healthcare industry is predicted to grow more in upcoming years. Also, more healthcare services are making their presence online every day. So, if you have any specific idea regarding healthcare applications write it down below or write to us at &lt;a href="https://bosctechlabs.com/contact/"&gt;https://bosctechlabs.com/contact/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>healthcare</category>
      <category>startup</category>
      <category>react</category>
    </item>
    <item>
      <title>Finding Remote job/intern Front-End Developer</title>
      <author>Israt Zahan Sathi</author>
      <pubDate>Thu, 13 Jan 2022 06:58:05 +0000</pubDate>
      <link>https://dev.to/ijsathi/finding-remote-jobintern-front-end-developer-1f71</link>
      <guid>https://dev.to/ijsathi/finding-remote-jobintern-front-end-developer-1f71</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.tourl"&gt;&lt;/a&gt;Hi! Assalamu Alaikum! I am Israt Zahan Sathi. I am a MERN Stack Web Developer and have great experience in Front-end development. I build user-friendly, responsive websites and maintain all the following parts like Security, Performance, User friendly, Proper maintainability code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I am currently studying Computer Technology at Dhaka Mohila Polytechnic Institute, Dhaka, Bangladesh. I love learning anything computer related.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I can work with &lt;strong&gt;HTML5, CSS3, Bootstrap, Tailwind, JavaScript, ES6, React JS, React Router Dom, API, Material-UI, Node-JS, Express-JS, MongoDB, Firebase&lt;/strong&gt; for Authentication etc.&lt;br&gt;
My tools include &lt;strong&gt;GitHub, VS Code, Chrome Dev tool, Microsoft Edge, Heroku, Netlify&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have no experience working in any organization, but I have done a few projects for learning. But I have confidence that with the above technology I can do any project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;InshaAllah&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My Resume &lt;a href="https://drive.google.com/file/d/1NTxWflQBfqCn6YRumOJYAXGkGfBIS2kN/view?usp=sharing"&gt;https://drive.google.com/file/d/1NTxWflQBfqCn6YRumOJYAXGkGfBIS2kN/view?usp=sharing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>html</category>
      <category>css3</category>
    </item>
    <item>
      <title>Python vs JavaScript</title>
      <author>ATreeShine</author>
      <pubDate>Thu, 13 Jan 2022 06:28:41 +0000</pubDate>
      <link>https://dev.to/atreeshine/python-vs-javascript-5f5o</link>
      <guid>https://dev.to/atreeshine/python-vs-javascript-5f5o</guid>
      <description>&lt;p&gt;Who will win if there is a fight between python and JavaScript?&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>I don't program in my spare time. Does that make me a bad developer?</title>
      <author>Fa'rath Shba 🚀</author>
      <pubDate>Thu, 13 Jan 2022 06:24:58 +0000</pubDate>
      <link>https://dev.to/farathshba/i-dont-program-in-my-spare-time-does-that-make-me-a-bad-developer-3bba</link>
      <guid>https://dev.to/farathshba/i-dont-program-in-my-spare-time-does-that-make-me-a-bad-developer-3bba</guid>
      <description>&lt;p&gt;IMO this attitude comes from people that have horrible, soul sucking jobs, combined with piss-poor time management skills. If you're basically typing web forms all day, go out and get a more challenging job, or start your own.&lt;/p&gt;

&lt;p&gt;Here's the thing. A concert musician (cellist/pianist/whatever), will practice at most 6 hours per day. Most only practice a few hours per day. at the highest levels&lt;/p&gt;

&lt;p&gt;People say program more because you learn more, but that's a smokescreen. 8 hours per day is plenty.&lt;br&gt;
Progress is NOT linear. It's logarithmic:&lt;br&gt;
enter image description here&lt;/p&gt;

&lt;p&gt;The only reason that a musician might practice longer than 3 hours, is that they need to squeeze out the extra 1% that those hours gives them. If you think that applies to you, re-solving a problem CS solved 2 decades ago, then you have a prima-donna complex to boot.&lt;/p&gt;

&lt;p&gt;I've worked in pressure cooker companies before, and trust me, the actual amount of work that those guys get done isn't any better than a company like 37signals that places constraints on the amount of work: &lt;a href="http://37signals.com/svn/posts/996-why-i-love-working-with-family-people"&gt;http://37signals.com/svn/posts/996-why-i-love-working-with-family-people&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What ends up happening is that sure, you may be in front of a computer for 10-12 hours, and in the office for 2 more, but that doesn't include the 90 minute lunch you took, the 2 hours you spent browsing discussion forums, and the hour break you had to play one of the many games laid out in the office (foosball, pool, yada...).&lt;/p&gt;

&lt;p&gt;Look back at that graph. Now back to me.&lt;/p&gt;

&lt;p&gt;Your mind actually has the opportunity to expand much more if you engage it in some other activity: Learn to play an instrument. Learn a foreign language. Better yet get out and get some exercise, and connect with real live people.&lt;br&gt;
On the logarithmic nature of productivity:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;In the renowned 1993 study of young violinists, performance researcher Anders Ericsson found that the best ones all practiced the same way: in the morning, in three increments of no more than 90 minutes each, with a break between each one. Ericcson found the same pattern among other musicians, athletes, chess players and writers.

For Real Productivity, Less is Truly More
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is actually a well-known principle in the business world, I'm surprised more programmers haven't heard of it.&lt;br&gt;
Update: More on the Ericsson study.&lt;/p&gt;

&lt;p&gt;The whole notion of it taking 10,000 hours / 10 years to become proficient actually comes from the studies done by Ericsson, not from Malcom Gladwell.&lt;/p&gt;

&lt;p&gt;As we all know, you can have 1 year of experience repeated 10 times... so just having your ass in the seat for 10 years doesn't qualify. What does qualify is what Ericsson calls deliberate practice.&lt;/p&gt;

&lt;p&gt;He has found this principle to hold true in athletics, music, writing, chess, and mathematics. He further defines deliberate practice as being so effortful, that even at the highest levels you can only put forth about 4 hours per day. Otherwise you will suffer from overtraining or burnout. Again, he recognizes that there are diminishing returns for deliberate practice, up to about 4 hours.&lt;br&gt;
On the subject of not having a good/challenging job:&lt;/p&gt;

&lt;p&gt;Hogwash. Either get a better job, or here's an idea: Make your current job into something it's not, at least right now.&lt;/p&gt;

&lt;p&gt;One of the best programmers I knew walked into a job as a maintenance programmer on a legacy system that consisted of dozens of programs and hundreds of thousands of lines of code. Most of which had been hacked on over the years so much that you would have to say there wasn't any coherent design to it anymore.&lt;/p&gt;

&lt;p&gt;This was pretty much a go-nowhere, dead-end job. Management wanted you to keep your head down, and just fix the damn bugs. The good developers were working on the greenfield project. People either came here to sit out their remaining days until they retired, or gain a few years of experience before going on to new application development. Whereas most programmers would complain about the lack of career development, or the opportunity to learn new things, or not having exciting projects to work on, or more generally just bitching about no one enabling them, this guy simply sat down, and went about doing the work that needed to be done.&lt;/p&gt;

&lt;p&gt;And over the course of 2 years, he had transformed that system from a buggy hell of spaghetti code to something that was a thing of beauty and functioned like a swiss watch. So complete was the transformation, that the VP of the division started paying more &amp;amp; more attention to the existing project, and started questioning the value of the greenfield project. Although he didn't have a title, the operations people went to him as the de-facto leader of the group. When I left, the VP was talking about creating a new role for him as a systems architect...&lt;/p&gt;

&lt;p&gt;I'm not sure what happened to him after that, but he taught me a couple of very important lessons:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Your job is what you make it, and there's interesting problems to be solved everywhere. If you hate writing CRUD screens, solve the problem by automatically generating them.
Don't sit around waiting for opportunities to come to you. Chances are they never will.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
    </item>
    <item>
      <title> Optimizing GitHub Actions with Meercode</title>
      <author>Melih Ekinci</author>
      <pubDate>Thu, 13 Jan 2022 06:20:12 +0000</pubDate>
      <link>https://dev.to/pankod/optimizing-github-actions-with-meercode-1n4b</link>
      <guid>https://dev.to/pankod/optimizing-github-actions-with-meercode-1n4b</guid>
      <description>&lt;p&gt;Using &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; provides engineering teams with a quick and reliable way to create a solid CI/CD build process. A per-minute model helps with expanding capabilities well beyond other solutions like customized build agents that may require continued maintenance. One critical piece missing is the ability to view the various aspects of the builds that are executed. This can create extra costs from build steps that could be made more efficient. Optimizing GitHub Actions with &lt;a href="https://meercode.io/"&gt;&lt;strong&gt;Meercode&lt;/strong&gt;&lt;/a&gt; is simple. And with the results it provides, you can see a possible reduction of up to 30% in costs associated with CI/CD pipelines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operating-at-status-quo"&gt;
  &lt;/a&gt;
  Operating at status quo.
&lt;/h2&gt;

&lt;p&gt;Our typical approach as automation experts is to go with what we know. Most of the time, that means using tried and true approaches to CD/CD. In that spirit, you will find many of us still rely on in-house build agents to handle running builds. While beneficial as a specialized and static build runner, they come with their own costs in the way of maintenance.&lt;/p&gt;

&lt;p&gt;In order to do things right, a build agent typically needs some sort of base image. On top of that image are the tools and frameworks necessary to build the team’s software. Doing so allows for scaling your build environment horizontally or recreating an agent that isn’t operating normally. This was the standard until more source code repository services started providing CI/CD as part of their offerings.&lt;/p&gt;

&lt;p&gt;Now we use services like GitHub Actions to handle many of today’s top technology stacks. The maintenance once required to keep build agent images up-to-date are handled automatically. This goes for any build runner image they have available &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows Server 2019&lt;/li&gt;
&lt;li&gt;Windows Server 2022&lt;/li&gt;
&lt;li&gt;Ubuntu 20.04&lt;/li&gt;
&lt;li&gt;Ubuntu 18.04&lt;/li&gt;
&lt;li&gt;MacOS Big Sur 11&lt;/li&gt;
&lt;li&gt;MacOS Catalina 10.15&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this is available at no cost for open-source and free projects (up to 2,000 minutes). However, going beyond this may require another subscription level. In any case, you want to ensure you use the build runners as efficiently as possible. While GitHub does provide some detail on storage and build minutes used, it lacks insight into details that may help your team use less of those resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cost-optimization-with-a-view"&gt;
  &lt;/a&gt;
  Cost optimization with a view.
&lt;/h2&gt;

&lt;p&gt;When using these build runners at a professional level, It is vital to view things in a way that makes sense. Especially when it comes to those resources that have costs associated with their usage. There are many aspects of &lt;strong&gt;Meercode&lt;/strong&gt; that are designed to do just that. The goal is to save money through optimization that you can visualize.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cutting-costs-one-build-at-a-time"&gt;
  &lt;/a&gt;
  Cutting costs one build at a time.
&lt;/h3&gt;

&lt;p&gt;Let’s take a look at some of the areas that &lt;strong&gt;Meercode&lt;/strong&gt; can help with Optimizing GitHub Actions. Through looking at these elements, a picture can develop of areas of the CI/CD pipeline that can be modified to reduce build times. The way this is done with &lt;strong&gt;Meercode&lt;/strong&gt; allows for a better understanding of each part of the process thanks to the various reports available.&lt;/p&gt;

&lt;p&gt;When looking at each build, data can be derived to determine what levels would benefit from more optimization. Starting with each step in the workflow, engineers are able to see which of those steps are long-running. From there, we start working upwards.&lt;/p&gt;

&lt;p&gt;The data from the workflows comprising those steps is also aggregated to see which of those workflows show similarities (or differences) that can help identify commonalities. These common elements among the workflow steps may identify a speed bump in the build process. But it doesn’t stop from there.&lt;/p&gt;

&lt;p&gt;High level views of the projects and organizations are next up. Here we can derive information from specific project build workflows. For example, one project may be using a very small amount of build time in comparison to other projects. While this may be out of necessity, it may also point to a situation where non-standard processes are used that stymie the process. In turn, creating additional cost where it isn’t needed. A view of team members can also help determine who is utilizing these resources the most.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRb5slYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shrnbvew8xhgjdpdt9eo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRb5slYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shrnbvew8xhgjdpdt9eo.png" alt="Image description" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meercode-peeks-deep-into-the-process"&gt;
  &lt;/a&gt;
  Meercode peeks deep into the process.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Meercode&lt;/strong&gt; is already helping thousands of engineers with a way to look into the details of their CI/CD process. Rather than making your “best guess,” you can view actual data that is relevant to various parts of the process. This is especially important when working with on-demand build agents provided by various platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ByKlHwRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdaluw6khhobz4tc2kb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ByKlHwRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdaluw6khhobz4tc2kb6.png" alt="Image description" width="880" height="649"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes we are talking about &lt;strong&gt;Meercode&lt;/strong&gt; as it applies to GitHub, but it doesn’t stop there. For those with multiple build platforms, &lt;strong&gt;Meercode&lt;/strong&gt; allows for integrations to allow the same view for each of those products:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;GitLab CI&lt;/li&gt;
&lt;li&gt;Travis CI&lt;/li&gt;
&lt;li&gt;Azure DevOps&lt;/li&gt;
&lt;li&gt;Vercel&lt;/li&gt;
&lt;li&gt;Bitrise&lt;/li&gt;
&lt;li&gt;Buddy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With Jenkins on the horizon! Using this integration, you can be assured you have more ability to look at different parts of the CI/CD process to find ways to save valuable units of time. It’s also important to note that &lt;strong&gt;Meercode&lt;/strong&gt; does this without ever accessing source code. Only the run/build metadata from the CI/CD process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-it-mean-to-optimize-github-actions"&gt;
  &lt;/a&gt;
  What does it mean to optimize GitHub Actions?
&lt;/h2&gt;

&lt;p&gt;When we talk about optimization, we’re really talking about how we can shave time off of each step in the build process. This may be done via a variety of means, but the fact remains the same. Anything that can be done, should be done. What kinds of things can you do to optimize your workflows? There are many posts dedicated to this topic, but there are a couple things to look at initially.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cache-where-you-can"&gt;
  &lt;/a&gt;
  Cache where you can.
&lt;/h3&gt;

&lt;p&gt;Different software stacks have different ways they install prerequisite assemblies and tools used to build the software. This may be a collection of nuget packages that are common among projects. In the case of restoring packages via tools like npm, these packages are often downloaded to the developers machine.&lt;/p&gt;

&lt;p&gt;This local build gives the impression that it is completed quickly. Since the files are cached, they don’t require being downloaded every time like they would on a build agent. Build agents are usually “vanilla.” This means they have only the basics needed to complete a workflow. Finding a way to cache the prerequisite packages within the codebase is one way to optimize this common slow-running portion of builds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fixforward-with-monitoring"&gt;
  &lt;/a&gt;
  Fix-forward with monitoring.
&lt;/h3&gt;

&lt;p&gt;Monitoring is more than just seeing if a resource is up or down. This is very true when looking at different aspects of build and deploy operations. It has become more important as SaaS offerings become available. Proper monitoring means looking at the right data and setting the right thresholds.&lt;/p&gt;

&lt;p&gt;It is important to set thresholds to see when these pay-per-use resources go outside of a baseline. &lt;strong&gt;Meercode&lt;/strong&gt; helps provide the data points necessary to look at various monitoring systems to see where thresholds belong. The ongoing information allows for showing trends that equal cost reductions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meercode-wants-to-help"&gt;
  &lt;/a&gt;
  Meercode wants to help.
&lt;/h2&gt;

&lt;p&gt;By recognizing the lack of helpful information in this realm, &lt;a href="https://meercode.io/"&gt;&lt;strong&gt;Meercode&lt;/strong&gt;&lt;/a&gt; has taken steps to work with developers and many common build packages. The culmination of this work is a product that neatly integrates with your current CI/CD process and adds a missing view of the bigger picture. Try it free by visiting the website. After the simple setup, the critical data needed will be shown in a way that just makes sense.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"&gt;https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners&lt;/a&gt; &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>devops</category>
      <category>github</category>
      <category>ci</category>
      <category>githubactions</category>
    </item>
    <item>
      <title>How to become a web developer in 2021 | web developer salary | All-time-dev</title>
      <author>coding-land</author>
      <pubDate>Thu, 13 Jan 2022 06:15:10 +0000</pubDate>
      <link>https://dev.to/codingland/how-to-become-a-web-developer-in-2021-web-developer-salary-all-time-dev-ean</link>
      <guid>https://dev.to/codingland/how-to-become-a-web-developer-in-2021-web-developer-salary-all-time-dev-ean</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ghwZEfDg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oceje1q5bwequkueu3z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghwZEfDg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oceje1q5bwequkueu3z.jpg" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-become-a-web-developer-in-2021-web-developer-salary-alltimedev"&gt;
  &lt;/a&gt;
  How to become a web developer in 2021 | web developer salary | All-time-dev
&lt;/h2&gt;

&lt;p&gt;If you are interested in learning web development but are confused that how could I will become a web developer then you have visited the right place in this post we are going to find how to become a web developer in 2022 and will also find out some more things. So, if you are interested and like our content then share our post with your developer friends and for more posts like this visit &lt;a href="https://all-time-devlopment.blogspot.com"&gt;https://all-time-devlopment.blogspot.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-are-web-developers-and-what-is-their-work"&gt;
  &lt;/a&gt;
  Who are web developers and what is their work?
&lt;/h2&gt;

&lt;p&gt;A web developer is the one who creates different parts of a website in terms of its learnings like there are mainly three categories in which a web developer does its work frontend development, backend development, and full-stack development. A frontend developer is the one who creates the look of a website. They are also divided into specific works like UI designing, UX designing, designer and the one who writes the code, etc. A backend developer is the one who creates the backend of the website and works with the database to connect the contact form, login and sign up form, etc with the database to drive the user data safe and they also make websites dynamic. So, that the owner of the website can add images, videos, and content to its website easily without copy-pasting or writing any code. And at last, the full stack developer creates both the frontend and backend of a website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qualifications-of-a-web-developer"&gt;
  &lt;/a&gt;
  Qualifications of a web developer
&lt;/h2&gt;

&lt;p&gt;Now, we will find out the educational qualifications you will need to get hired as a web developer. First of all, if you want to learn web development you don't need any educational qualifications you can learn it for free from online courses or youtube tutorials. In our other sections, we will also talk about the best web development roadmap and the best ways to learn the skills that we are going to mention in our web development roadmap.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Childhood Schooling&lt;/li&gt;
&lt;li&gt;Primary Schooling &lt;/li&gt;
&lt;li&gt;High Schooling&lt;/li&gt;
&lt;li&gt;bachelor degree of Bachelor of Engineering in Computer Science or a Bachelor of Science in Computer Science&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#web-development-roadmap"&gt;
  &lt;/a&gt;
  Web development Roadmap
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTML is the structure of a website. If you are getting hired in any of the companies if it is big or it is small you must know HTML because without HTML you will not be able to create the structure of a website and without it, you cannot add anything on your web page including the videos and images. So, if you are want to become a web developer you must make sure that you should have a good knowledge of HTML like its basic tags like header tag, footer tag, IMG tag, etc, and at least 80% of HTML because there are also some hard things in HTML like canvas. So, 80% HTML will be enough for getting a job.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next in our list is CSS, if HTML is the structure of a website then CSS is the beauty of that web page which makes it beautiful you have seen in many websites that there are beautiful animations and designs and colors are there in the website which makes it very beautiful and attractive and it is also a good way to attract customers for purchasing your products. And CSS is also the second biggest factor for getting hired in a company because every company needs a web developer who has a good knowledge of basic web development scripting languages like HTML, CSS. So, you must also make sure that you know CSS not complete only 60% of CSS which includes basic properties and their values that you should know like background-color: orange, red, purple, pink, display: visible, hidden, inline, inline-block, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-or-python"&gt;
  &lt;/a&gt;
  JavaScript or Python
&lt;/h2&gt;

&lt;p&gt;JavaScript is also a very important language if you want to become a web developer and it is used to add logic on your web page like animations, adding a timer, or adding an alert on your website regarding your users. So, it is also the main factor which companies will need you to know. It is pretty hard to learn complete JavaScript or even its 80%. So, you should know around 50% of JavaScript which included the basic JavaScript syntaxes like var, switch statements, loops, functions, etc and if you are not comfortable with JavaScript you can also learn Python for adding logic on your web page. But I will recommend learning JavaScript-only instead of Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php-or-node-js"&gt;
  &lt;/a&gt;
  PHP or Node JS
&lt;/h2&gt;

&lt;p&gt;PHP is the best option in my opinion if you are creating simple and backend because it is easy to learn and use and you can use with MySQL and it is important because most of the companies want PHP developers and more than 80% of websites' backend are created using PHP. So, from this percentage, only you can guess how much demand PHP is and even WordPress and Facebook are also created in PHP only. And that's why I also recommend using PHP only but a majority of developers, coder, programmer hates PHP and some of them also say that it will die later or it is dead. So, if you want a detailed post on PHP then you can visit this post here is the link to the post. And even Node JS also has a good number of demand in companies like Netflix, Google, and more. So, if you are interested in NODE JS then it will also be a good option for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mysql-or-mongo-db"&gt;
  &lt;/a&gt;
  MySQL or Mongo DB
&lt;/h2&gt;

&lt;p&gt;MySQL is a very good option for using as a database because it is very easy to learn and use and most of the websites uses MySQL only with PHP to create the backend and it has a very high demand and the same case is with Mongo DB only but they have less demand than MySQL but you can use it with all popular languages like Python, PHP, JavaScript, etc. And there are many differences in both of them but if you want to see them in detail and want to know more about them then you can visit our this post in which I have compared both of them. So, if you like any of them then I will recommend you some combinations. If you like MySQL then you should use it with PHP because it is much better and easy to use it with PHP and companies also hired PHP developers who have knowledge of MySQL instead of Mongo DB and if you liked Mongo DB then you can use it with NODE JS. &lt;/p&gt;

&lt;p&gt;To continue reading the post visit &lt;a href="https://all-time-devlopment.blogspot.com/2021/11/how-to-become-web-developer-in-2021-web.html"&gt;https://all-time-devlopment.blogspot.com/2021/11/how-to-become-web-developer-in-2021-web.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>python</category>
    </item>
  </channel>
</rss>
