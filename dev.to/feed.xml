<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I erroneously deletedy root partition.  Now what?</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 16 Jan 2022 23:25:09 +0000</pubDate>
      <link>https://dev.to/baenencalin/i-erroneously-deletedy-root-partition-now-what-2oi3</link>
      <guid>https://dev.to/baenencalin/i-erroneously-deletedy-root-partition-now-what-2oi3</guid>
      <description>&lt;p&gt;Posted on Reddit's &lt;code&gt;r/archlinux&lt;/code&gt; and &lt;code&gt;r/techsupport&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Is there a way I can reinstall Arch from the bootstick I still have?  &lt;/p&gt;

&lt;p&gt;I've been following &lt;a href="https://www.diskpart.com/articles/grub-rescue-unknown-file-system-0825.html#toc.0.40649366859536595"&gt;this&lt;/a&gt; tutorial, and how my system and it differs is that all of my partitions have "unknown filesystems".&lt;/p&gt;

&lt;p&gt;Here's a backlog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    error: disk `lvmid/MMwt86-jYqe-hUn1 ... zo7KQw' not found.
    Entering rescue mode...
    grub rescue&amp;gt; ls
    (hd0) (hd1) (hd1,gpt2) (hd1,gpt1)
    grub rescue&amp;gt; ls (hd0)
    (hd0): File-system is unknown.
    grub rescue&amp;gt; set
    cmdpath=(hd1,gpt1)/EFI/grub_uefi
    prefix=(lvmid/MMwt86-jYqe ... zo7KQw)/boot/grub
    root=lvmid/MMwt86-jYqe-hUn1-x1eI-sqCk-RoXD-NihFx4/49zeY2-wEvE-jsN6-2EqG-5TW4-CeLE-zo7KQe
    grub rescue&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the same error I get for &lt;code&gt;(hd0)&lt;/code&gt; applies to the other three (&lt;code&gt;(hd1)&lt;/code&gt;, &lt;code&gt;(hd1,gpt2)&lt;/code&gt;, and &lt;code&gt;(hd1,gpt1)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;IMPORTANT NOTE:&lt;br&gt;
&lt;code&gt;(hd1,)&lt;/code&gt; is my bootstick. Removing it beforehand results in &lt;code&gt;(hd0) (hd0,gpt2) (hd0,gpt1)&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>archlinux</category>
      <category>linux</category>
      <category>grub</category>
      <category>help</category>
    </item>
    <item>
      <title>Firing on all cylinders(Part 1): Understanding object value lookup in JavaScript interpreters and the rise of hidden classes</title>
      <author>Austin Burger</author>
      <pubDate>Sun, 16 Jan 2022 23:23:07 +0000</pubDate>
      <link>https://dev.to/about14sheep/firing-on-all-cylinderspart-1-understanding-object-value-lookup-in-dynamic-languages-and-the-rise-of-hidden-classes-in-v8-5h62</link>
      <guid>https://dev.to/about14sheep/firing-on-all-cylinderspart-1-understanding-object-value-lookup-in-dynamic-languages-and-the-rise-of-hidden-classes-in-v8-5h62</guid>
      <description>&lt;p&gt;There is a lot of information around writing performant JavaScript and optimizing your code for the v8 engine. When you are reading through this information you will see a lot of phrases like &lt;em&gt;inline caching&lt;/em&gt;, &lt;em&gt;hidden classes&lt;/em&gt;, and &lt;em&gt;memory offset&lt;/em&gt;; but what does it all mean? You'll come across quick one-liners about "always instantiating your object properties in the same order" or, better yet, "assign all of the objects properties in the constructor". You try to dive into the documentation only to see branching charts with a million tiny words in it that look more like Harry Potter's family tree. At the end of all this, you end up just trying to commit those one liners to memory without fully understanding &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this series, I am going to attempt to explain these concepts in a way where we don't need pages of flow charts, and with relatable examples (not just look at this code).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-expect"&gt;
  &lt;/a&gt;
  What to expect
&lt;/h2&gt;

&lt;p&gt;We will start by going over the difference between dynamic and non-dynamic languages (mostly pertaining to how they store objects in memory). Then, in part 2, we will dive into the v8 engine and the methods it uses to efficiently handle the concepts we discuss in part 1. Also, in part 2, I will describe the common pitfalls and ways you can increase the performance of your code. However, you can make the code better without first understanding the &lt;em&gt;why&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;Although I am going to try and explain these concepts in an approachable way, these are not easy concepts to grasp. Most developers can go their entire career without digging into the minute details of how a particular JavaScript engine accesses objects in memory. &lt;/p&gt;

&lt;p&gt;Modern JavaScript Interpreters, like v8, are amazing tech and mostly handle all of this for you. Furthermore, with TypeScript, you have a compiler that can help keep you from making a lot of the common mistakes that can lead to a decrease in performance. However, taking the time to try and understand what is happening under the hood can go a long way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dynamic-language"&gt;
  &lt;/a&gt;
  The dynamic language
&lt;/h2&gt;

&lt;p&gt;JavaScript is a &lt;em&gt;dynamic&lt;/em&gt; programming language. This means that you can add, remove, and change (the type) property values of objects &lt;em&gt;after&lt;/em&gt; they are initialized. Let's look at the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a simple constructor function for an employee&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Instantiate a new employee&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newHire&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sales&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Dynamically add the employee's desired pay day&lt;/span&gt;
&lt;span class="nx"&gt;newHire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Saturday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the employee object is created, their preferred &lt;code&gt;payDay&lt;/code&gt; is added &lt;em&gt;dynamically&lt;/em&gt;. This is all perfectly valid JavaScript. It will run just fine and the newly hired employee will get paid every Saturday.&lt;/p&gt;

&lt;p&gt;The difference between a non-dynamic programming language (meaning all of an objects properties are fixed before compilation) is that new properties &lt;strong&gt;cannot&lt;/strong&gt; be added or removed at runtime. The benefit to a language being non-dynamic is that the values of these properties (or pointers) can be stored in memory with a fixed offset (an integer indicating the displacement between the beginning of an object in memory and any given property). This offset can be easily determined based on the properties type.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Skrrtttt... offset?!?! &lt;strong&gt;displacement&lt;/strong&gt;?!?! You said this would be easy to follow and relatable!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You're right, this is why I decided to do this blog in two parts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-storage-displacement-offset"&gt;
  &lt;/a&gt;
  Memory storage displacement (offset)
&lt;/h2&gt;

&lt;p&gt;The easiest way to explain this is with a simple data structure like an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know we can access a value in that array using its index:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// this will get us the item at index 2 ('value3')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the first value (&lt;code&gt;'value1'&lt;/code&gt;) is at memory position 0, moving two places to the right will give you (&lt;code&gt;'value3'&lt;/code&gt;). So &lt;code&gt;'value3'&lt;/code&gt; has an offset of 2 from the &lt;em&gt;start&lt;/em&gt; of where the array is stored in memory.&lt;/p&gt;

&lt;p&gt;This is simple enough for an array, however not all objects are stored in memory sequentially like an array is. With more complex objects, like the employee function above, you can't be sure where the object, and its properties, will be stored. Thus making it harder to determine the offset between the objects 'shell' (to keep it simple) and its properties. You could have the 'shell' of the object (&lt;code&gt;function employee() {}&lt;/code&gt;) at position 0, then its property &lt;code&gt;this.salary&lt;/code&gt; at position 6 with other objects in between.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#back-to-dynamic-vs-nondynamic"&gt;
  &lt;/a&gt;
  Back to dynamic vs. non-dynamic
&lt;/h2&gt;

&lt;p&gt;In order to keep up with these offset values, non-dynamic languages (i'll use Java in this case) create a fixed object layout. This layout (or mapping) cannot be changed (as in changing the type), added too, or removed from at runtime. The offset is written in stone, making it easy (usually one instruction) to grab any property value of a given object.&lt;/p&gt;

&lt;p&gt;Since you can add, remove, and even change a properties type in JavaScript at runtime, the offset values cannot be set in stone. Instead of using a fixed object layout, like in the non-dynamic Java, most JavaScript interpreters use a dictionary like structure (based on a hash function) to store the objects property values in memory. Because of this, grabbing the properties value from a hash table is more computationally expensive (more instructions) than the fixed object layout of a non-dynamic language.&lt;/p&gt;

&lt;p&gt;I won't go more into hash tables, but you can start &lt;a href="https://en.wikipedia.org/wiki/Hash_function"&gt;here&lt;/a&gt;. Just know it is extremely inefficient. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firing-on-all-cylinders"&gt;
  &lt;/a&gt;
  Firing on all cylinders
&lt;/h2&gt;

&lt;p&gt;Since using hash tables to get property values is so inefficient, the JavaScript engine NodeJS uses, 'v8', takes a different approach. This approach is built around using Hidden Classes and made faster by Inline Caching.&lt;/p&gt;

&lt;p&gt;In part 2 of this series we will dive into hidden classes and inline caching. Once you better understand the concepts, we can get into techniques you can use to make sure your JavaScript is as performant as it can be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.programcreek.com/2011/11/what-do-java-objects-look-like-in-memory/"&gt;How Java stores objects in memory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v8.dev/blog"&gt;The official v8 engine blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"&gt;MDN JavaScript types and data structures&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Offset_%28computer_science%29"&gt;Wikipedia article on Offset&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>performance</category>
      <category>programming</category>
    </item>
    <item>
      <title>WTF JavaScript: A Variable with Side Effects</title>
      <author>Lars Grammel</author>
      <pubDate>Sun, 16 Jan 2022 22:38:12 +0000</pubDate>
      <link>https://dev.to/p42/wtf-javascript-a-variable-with-side-effects-5e3h</link>
      <guid>https://dev.to/p42/wtf-javascript-a-variable-with-side-effects-5e3h</guid>
      <description>&lt;p&gt;JavaScript has many quirks and difficult-to-understand behaviors. There are hilarious talks such as &lt;a href="https://www.youtube.com/watch?v=et8xNAc2ic8"&gt;WTFJS&lt;/a&gt; and &lt;a href="https://www.destroyallsoftware.com/talks/wat"&gt;WAT&lt;/a&gt; that make fun of JavaScript for its strangeness.&lt;/p&gt;

&lt;p&gt;Since I work on refactorings, I have to consider many weird and sometimes funny sides of JavaScript. I will share some of the surprising behaviors that I encounter, so if you see them (which you hopefully never will), it might hint at what's going on.&lt;/p&gt;

&lt;p&gt;This blog post explores an innocent-looking statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... some code&lt;/span&gt;

&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might intuitively think that nothing should happen here - the statement seems to do nothing because there is no obvious function call here.&lt;/p&gt;

&lt;p&gt;However, it can do anything, for example, print "Hello World!" to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... some code&lt;/span&gt;

&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c1"&gt;// prints "Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How can this even be possible?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It turns out that global variables (in this case, &lt;code&gt;helloWorld&lt;/code&gt;) are properties of the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Global_object"&gt;global object&lt;/a&gt;. And properties in JavaScript do not have to be simple values. They can be implemented using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get"&gt;getters&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set"&gt;setters&lt;/a&gt;, which can execute code. Since the global object inherits from &lt;code&gt;Object.prototype&lt;/code&gt; in modern JavaScript engines, adding properties to &lt;code&gt;Object.prototype&lt;/code&gt; creates properties on the global object.&lt;/p&gt;

&lt;p&gt;Here, &lt;code&gt;helloWorld&lt;/code&gt; is defined as such a getter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloWorld&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="c1"&gt;// prints "Hello World!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thankfully this can only happen with global variables, and not with parameters or local variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helloWorld&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;helloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// getter is evaluated, prints "Hello World!"&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;// does nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I learned about this strange behavior in a &lt;a href="https://mathiasbynens.be/notes/globalthis"&gt;blog post about the &lt;code&gt;globalThis&lt;/code&gt; polyfill&lt;/a&gt;. In the polyfill, a global property getter is used to access the global &lt;code&gt;this&lt;/code&gt; object in different environments such as browsers, web workers, frames, Node.js, and ES modules. Have a look if you want to know more!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Peregrine Update - The Python-like programming language that's as fast as C++</title>
      <author>Ethan Olchik</author>
      <pubDate>Sun, 16 Jan 2022 22:31:09 +0000</pubDate>
      <link>https://dev.to/ethanolchik/peregrine-update-the-python-like-programming-language-thats-as-fast-as-c-2bf1</link>
      <guid>https://dev.to/ethanolchik/peregrine-update-the-python-like-programming-language-thats-as-fast-as-c-2bf1</guid>
      <description>&lt;p&gt;&lt;em&gt;"Blazing-Fast Language for the Blazing-Fast World" - Peregrine Motto&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey guys, it's been a long time! If you don't already know me, my name is Ethan and I'm one of a few &lt;a href="https://github.com/Peregrine-lang/Peregrine"&gt;Peregrine Programming Language&lt;/a&gt; developers. Over the past few months, we've managed to surpass the progress in the 1st write (code for the 1st write has been deleted) and add new features. This post will be discussing the progress that has been made.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-peregrine"&gt;
  &lt;/a&gt;
  About Peregrine
&lt;/h2&gt;

&lt;p&gt;If you know Python, you know how easy it is. However, it also comes with a big downgrade. Python is slow, and I'm pretty sure every python developer knows this by now. This is kind of annoying. That's where Peregrine comes in. Me and 11 friends have been working on Peregrine for the past few months. Peregine's syntax is very similar to Python's, and it gets trans-compiled to C++, thus making it as fast as C++. Some of you may know Peregrine as the "Language that's as fast as C", however we've decided to trans-compile it to C++ instead of C.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-language-features"&gt;
  &lt;/a&gt;
  New Language Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  Class
&lt;/h3&gt;

&lt;p&gt;After a lot of work, &lt;a href="https://github.com/peregrine-lang/Peregrine/commit/d4de6e4ab15e866b044dab77009ce9b4b54fae23"&gt;classes have been added to Peregrine&lt;/a&gt;. They essentially act the same way you'd expect them to act in python. Here's a quick example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"x=%d, y=%d, z=%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is pretty self-explanatory. If you put this code into python, you'd just have to change &lt;code&gt;printf&lt;/code&gt; to &lt;code&gt;print&lt;/code&gt; and change the string formatting and then it works like a charm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enum"&gt;
  &lt;/a&gt;
  Enum
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/peregrine-lang/Peregrine/commit/b953ceba25a84c011068567d0befa7eae699eccc"&gt;Enums have also been added to Peregrine&lt;/a&gt;. They work like any other enum in any other language.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;RGB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;RED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;144&lt;/span&gt;
    &lt;span class="n"&gt;GREEN&lt;/span&gt;
    &lt;span class="n"&gt;BLUE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="n"&gt;OTHER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GREEN&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;RGB.GREEN&lt;/code&gt; = &lt;code&gt;155&lt;/code&gt;, because the value is defaulted to the previous value + 1. &lt;code&gt;RGB.OTHER&lt;/code&gt; = &lt;code&gt;164&lt;/code&gt;, because 155+9=164.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#union"&gt;
  &lt;/a&gt;
  Union
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/peregrine-lang/Peregrine/commit/599d12db39027a0d22f711a6bba69088cf7d5da3"&gt;Unions&lt;/a&gt;, like in C, C++ etc... are data types that allows the storage of different data types in the same memory location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;union&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;abc&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: you don't have to create a pointer to a variable of type &lt;code&gt;abc&lt;/code&gt; in order to assign and access it's fields.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-decorators"&gt;
  &lt;/a&gt;
  custom decorators
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/peregrine-lang/Peregrine/commit/52b6129c1d770b90ff6e6b6fb6113e3466b06f9c"&gt;Peregrine supports user-defined decorators&lt;/a&gt;, just like Python. Here's an example that's taken from &lt;a href="https://github.com/peregrine-lang/Peregrine/blob/main/can_comp.pe"&gt;can_comp.pe&lt;/a&gt;, but slightly modified to improve readability (that file is hardcoded):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Answer is %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dec_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dec_test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, you must define a type for the function being decorated and a type for the return type of the decorator (should return a function).&lt;/p&gt;

&lt;p&gt;The program would output &lt;code&gt;Answer is 100&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More
&lt;/h2&gt;

&lt;p&gt;You can find some more code examples in &lt;a href="https://github.com/peregrine-lang/Peregrine/blob/main/can_comp.pe"&gt;can_comp.pe&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planned-features"&gt;
  &lt;/a&gt;
  Planned features
&lt;/h2&gt;

&lt;p&gt;Here are some features that are planned to be implemented into peregrine before the first release:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Structs&lt;/li&gt;
&lt;li&gt;Python ecosystem in Peregrine

&lt;ul&gt;
&lt;li&gt;You will be able to use any python module in Peregrine&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Imports&lt;/li&gt;
&lt;li&gt;Standard Library&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Peregrine is planned to release version 0.0.1 sometime between March and April, so make sure to show some support by starring the &lt;a href="https://github.com/peregrine-lang/peregrine"&gt;repo&lt;/a&gt; and make sure to press on the "Watch" button so you don't miss any updates.&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any contributions, so if you find something that you can improve, open a pull-request! You can also check out our &lt;a href="https://github.com/peregrine-lang/peregrine/issues/"&gt;open issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks so much for reading!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>cpp</category>
      <category>python</category>
      <category>showdev</category>
    </item>
    <item>
      <title>New frameworks, old traditions</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 16 Jan 2022 22:09:31 +0000</pubDate>
      <link>https://dev.to/noriller/new-frameworks-old-traditions-11nn</link>
      <guid>https://dev.to/noriller/new-frameworks-old-traditions-11nn</guid>
      <description>&lt;p&gt;Do you know of the &lt;a href="https://en.wikipedia.org/wiki/Frequency_illusion"&gt;red car syndrome&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;When we learn and start using a new language, or especially a framework, we tend to see how some people do something.&lt;/p&gt;

&lt;p&gt;But my point is not that after start learning something you start seeing everywhere and all the people using it... but that people will follow “tradition” blindly. In Python, the community has the saying of something being the “pythonic way”.&lt;/p&gt;

&lt;p&gt;Yes, you should embrace “tradition” and make things simpler for everyone... except when you don’t.&lt;/p&gt;

&lt;p&gt;Many React developers out there will start a project and add Redux (or MobX, or Recoil... ) without even thinking if the project will even need it.&lt;/p&gt;

&lt;p&gt;And after they do that, since it’s already there it’s easy to just “go with the motion” and just make things in a way to use Redux.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;There’s this story that you might have heard, it’s about someone trying to learn the family recipe of baking fish and that “you have to cut the tail to make it good” and then they would go from parent to grandparent to ask why you have to make the cut only to be told that it’s “how it’s always been done to make it good”, and finally the great grandparent will say that the oven was too small back in the day and they had to cut it to fit...&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;And as history repeats itself, if you found anything I’m saying eerie familiar, then yes, more than 10 years ago Uncle Bob wrote that developers would start a project with a database because “you always needed a database right?”.&lt;/p&gt;

&lt;p&gt;Redux is just one of the latest... moment.js, Lodash, jQuery... remember then?&lt;/p&gt;

&lt;p&gt;Remember that the problem is not if you are or not using then, but WHY are you using it.&lt;br&gt;
Just because? Or it’s the best tool for the job?&lt;/p&gt;




&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@mohittzomar?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mohit Tomar&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/tradition?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Phoenix LiveView, but event-sourced</title>
      <author>Rosa Richter</author>
      <pubDate>Sun, 16 Jan 2022 21:15:05 +0000</pubDate>
      <link>https://dev.to/cantido/phoenix-liveview-but-event-sourced-7pe</link>
      <guid>https://dev.to/cantido/phoenix-liveview-but-event-sourced-7pe</guid>
      <description>&lt;p&gt;Event sourcing is a powerful way to structure an application, and I've discovered that it pairs beautifully with Phoenix LiveView.&lt;/p&gt;

&lt;p&gt;The context: I'm building a cryptocurrency exchange application. I don't have the business chops to run an actual exchange, so this is just for fun. The application is built in &lt;a href="https://elixir-lang.org/"&gt;Elixir&lt;/a&gt;, using the &lt;a href="https://github.com/commanded/commanded"&gt;Commanded&lt;/a&gt; framework for CQRS/ES goodness, and &lt;a href="https://github.com/phoenixframework/phoenix_live_view"&gt;Phoenix LiveView&lt;/a&gt; because it's the hot new thing that I wanted to learn.&lt;/p&gt;

&lt;p&gt;My goal is to use LiveView to update a price chart as trades are executed by the system. A LiveView process is a lot like a GenServer, with a bespoke process for each client, executing &lt;code&gt;handle_*&lt;/code&gt; functions as the client does things. The first step to real-time chart updates is to trigger one of these handler functions in my LiveView controller when a trade is executed. I'm using Commanded's own &lt;a href="https://github.com/commanded/eventstore"&gt;EventStore&lt;/a&gt; library to dispatch and store my events, so their documentation is the place to start.&lt;/p&gt;

&lt;p&gt;In the EventStore documentation, I found that subscribing to the event stream is really simple: it's a single function call. Here's the example from &lt;a href="https://github.com/commanded/eventstore/blob/master/guides/Subscriptions.md#transient-subscriptions"&gt;EventStore's documentation on transient subscriptions&lt;/a&gt; that we care about:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;EventStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;EventStore&lt;/span&gt;

&lt;span class="no"&gt;EventStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream_uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;selector:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;
  &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;data:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# receive first batch of mapped event data&lt;/span&gt;
&lt;span class="k"&gt;receive&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event_data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Received non nil event data: "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All we need to do is call &lt;a href="https://hexdocs.pm/eventstore/EventStore.html#c:subscribe/2"&gt;&lt;code&gt;EventStore.subscribe/2&lt;/code&gt;&lt;/a&gt;, optionally with a selector function, and then the current process will start receiving events. We're going to call this in our LiveView's &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#c:mount/3"&gt;&lt;code&gt;mount/3&lt;/code&gt;&lt;/a&gt; callback. I'm also going to load the initial set of data here.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;ExchangeWeb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;DashboardLive&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;ExchangeWeb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:live_view&lt;/span&gt;
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;EventStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;
  &lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="no"&gt;Exchange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;EventStore&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;EventStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"$all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;selector:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;event_type:&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"Elixir.Exchange.Orderbook.TradeExecuted"&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;
          &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"BTCUSDT"&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;mapper:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="no"&gt;RecordedEvent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;data:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;trades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Exchange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Orderbooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trades&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;trades:&lt;/span&gt; &lt;span class="n"&gt;trades&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;


  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;trades&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:price&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;push_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"trades"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{&lt;/span&gt;&lt;span class="ss"&gt;trades:&lt;/span&gt; &lt;span class="n"&gt;trades&lt;/span&gt;&lt;span class="p"&gt;})}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, if you were using a server-side charting library like &lt;a href="https://contex-charts.org/"&gt;ContEx&lt;/a&gt;, then you would just append the new events to what you've already got assigned to the socket, and your normal rendering function would rebuild the chart. You're done! But I wanted to make it more complicated.&lt;/p&gt;

&lt;p&gt;I'm using &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt;, which is a popular graphing JavaScript library. It lives entirely on the client-side, which isn't very agreeable with Phoenix LiveView's server-side focus. Fortunately, LiveView allows you to set up JavaScript hooks, and then push events to them. We can make the client event-sourced, too! That's why I'm using &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#push_event/3"&gt;&lt;code&gt;push_event/3&lt;/code&gt;&lt;/a&gt; instead of &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html#assign/3"&gt;&lt;code&gt;assign/3&lt;/code&gt;&lt;/a&gt; in the example above. I'm using LiveView's JavaScript hooks to respond to events that I push from the LiveView process. Read more about &lt;a href="https://hexdocs.pm/phoenix_live_view/js-interop.html"&gt;LiveView JavaScript interoperability&lt;/a&gt;, it's really interesting.&lt;/p&gt;

&lt;p&gt;A LiveView client hook is an object containing a couple of functions.&lt;br&gt;
We're going to create a &lt;code&gt;mounted()&lt;/code&gt; function to initialize the chart with the data we already have. After that, we're going to set up an event handler. The &lt;code&gt;mounted()&lt;/code&gt; function receives a &lt;code&gt;this&lt;/code&gt; object with a few utilities, with the &lt;code&gt;handleEvent&lt;/code&gt; function being the most important to us. We call &lt;code&gt;this.handleEvent&lt;/code&gt; to set up the function that will handle the event that we pushed in our LiveView module's &lt;code&gt;handle_info&lt;/code&gt; callback.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chart.js/auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Hooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TradesChart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Configuration&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nothing&lt;/span&gt; &lt;span class="nx"&gt;interesting&lt;/span&gt; &lt;span class="nx"&gt;here&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trades&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trades&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datasets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executed_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executed_at&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;liveSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LiveSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/live&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hooks&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will push new data into the chart without asking it to completely re-render.&lt;/p&gt;

&lt;p&gt;Lastly, we need to attach the hook to the element containing the chart. That's accomplished by adding a &lt;code&gt;phx-hook&lt;/code&gt; attribute to your markup element:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"trades-chart"&lt;/span&gt; &lt;span class="na"&gt;phx-hook=&lt;/span&gt;&lt;span class="s"&gt;"TradesChart"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"400"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By adding that attribute, you've told Phoenix LiveView to call the &lt;code&gt;mounted()&lt;/code&gt; hook when the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element is mounted, which will then subscribe the update function to &lt;code&gt;"trade"&lt;/code&gt; events sent by the backend.&lt;/p&gt;

&lt;p&gt;All together, EventStore pushes events to our LiveView process, which pushes an event to our client hook, which puts the new data in the chart. Event sourcing is so cool!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0UNjg0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k21oiaoov6w7cjk0z8k3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0UNjg0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k21oiaoov6w7cjk0z8k3.gif" alt="Animation" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the whole project here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Cantido"&gt;
        Cantido
      &lt;/a&gt; / &lt;a href="https://github.com/Cantido/exchange"&gt;
        exchange
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A market application with a focus on cryptocurrencies
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>elixir</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Advanced JavaScript Series - Part 5: IIFE &amp; 'this' keyword in JS(tricky Eg.), call(), apply(), bind(), Currying(Functional Prog)</title>
      <author>Pranav</author>
      <pubDate>Sun, 16 Jan 2022 20:47:07 +0000</pubDate>
      <link>https://dev.to/pranav016/advanced-javascript-series-part-5-iife-this-keyword-in-jstricky-eg-call-apply-bind-curryingfunctional-prog-98c</link>
      <guid>https://dev.to/pranav016/advanced-javascript-series-part-5-iife-this-keyword-in-jstricky-eg-call-apply-bind-curryingfunctional-prog-98c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#iife"&gt;
  &lt;/a&gt;
  IIFE
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An IIFE (&lt;strong&gt;Immediately Invoked Function Expression&lt;/strong&gt;) is a JavaScript function that &lt;strong&gt;runs as soon as it is defined&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#helps-avoid-polluting-the-global-namespace"&gt;
  &lt;/a&gt;
  Helps avoid polluting the global namespace-
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Since our application may incorporate a large number of functions and global variables from various source files, it's critical to keep the number of &lt;strong&gt;global variables&lt;/strong&gt; to a minimum.&lt;/li&gt;
&lt;li&gt;We could utilize the &lt;strong&gt;IIFE&lt;/strong&gt; pattern if we have some initiation code that we don't need to use again. Because &lt;strong&gt;we won't be reusing&lt;/strong&gt; the code, IIFE is preferable than a function declaration or a function expression &lt;strong&gt;in this scenario&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function () {
  // some initiation code
  let firstVariable;
  let secondVariable;
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;code&gt;firstVariable&lt;/code&gt; and &lt;code&gt;secondVariable&lt;/code&gt; will be discarded after the function is executed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzPV0cJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tldp18yttibgq6mxxjcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzPV0cJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tldp18yttibgq6mxxjcs.png" alt="IIFE" width="788" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-module-pattern"&gt;
  &lt;/a&gt;
  The module pattern-
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;We would also use IIFE &lt;strong&gt;to create private and public&lt;/strong&gt; variables and methods.&lt;/li&gt;
&lt;li&gt;These patterns &lt;strong&gt;were more useful before the introduction of ES6&lt;/strong&gt;, when we didn't have the &lt;code&gt;let&lt;/code&gt; and the &lt;code&gt;const&lt;/code&gt; keywords. Back then when we imported all the JavaScript files into one, then there were a lot of conflicts in variable names since all variables were global because of declaration using &lt;code&gt;var&lt;/code&gt;. Thus &lt;strong&gt;developers used IIFE module patterns&lt;/strong&gt; where the variables were made and only those required inside module were left in global scope and others &lt;strong&gt;were discarded because of property of Scope&lt;/strong&gt; using IIFEs. This also overlaps with the first use case of IIFEs mentioned above. Consider this example to understand better-&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;As you know that a function in JavaScript creates the local scope. So, you can define variables and function inside a function which &lt;strong&gt;cannot be access outside of that function&lt;/strong&gt;. However, sometime you accidently &lt;strong&gt;pollute the global variables&lt;/strong&gt; or functions by unknowingly giving same name to variables &amp;amp; functions as global variable &amp;amp; function names. &lt;/p&gt;

&lt;p&gt;For example, there are multiple &lt;code&gt;.js&lt;/code&gt; files in your application written by multiple developers over a period of time. Single JavaScript file includes many functions and so these multiple &lt;code&gt;.js&lt;/code&gt; files will result in large number of functions. There is a good chance of &lt;strong&gt;having same name of function&lt;/strong&gt; exists in different &lt;code&gt;.js&lt;/code&gt; files written by multiple developer and if these files included in a single web page then it &lt;strong&gt;will pollute the global scope&lt;/strong&gt; by having two or more function or variables with the same name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Consider the following example of &lt;code&gt;MyScript1.js&lt;/code&gt; and &lt;code&gt;MyScript2.js&lt;/code&gt; with same variable &amp;amp; function name.&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#myscript1js"&gt;
  &lt;/a&gt;
  MyScript1.js
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var userName = "Bill";

function display(name)
{
    alert("MyScript1.js: " + name);
}

display(userName);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#myscript2js"&gt;
  &lt;/a&gt;
  MyScript2.js
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var userName = "Steve";

function display(name)
{
    alert("MyScript2.js: " + name);
}

display(userName);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#importing-both-files"&gt;
  &lt;/a&gt;
  Importing both files-
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width" /&amp;gt;
    &amp;lt;title&amp;gt;JavaScript Demo&amp;lt;/title&amp;gt;
    &amp;lt;script src="/MyScript1.js"&amp;gt;&amp;lt;/&amp;lt;script&amp;gt; 
    &amp;lt;script src="/MyScript2.js"&amp;gt;&amp;lt;/&amp;lt;script&amp;gt; 
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt; IIFE Demo&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you run above example, you will find that every time it call &lt;code&gt;display()&lt;/code&gt; function in &lt;code&gt;MyScript2.js&lt;/code&gt; because &lt;code&gt;MyScript2.js&lt;/code&gt; included after &lt;code&gt;MyScript1.js&lt;/code&gt; in a web page. So JavaScript considers last definition of a function if two functions have the same name.&lt;/p&gt;

&lt;p&gt;IEFE solves this problem by having its &lt;strong&gt;own scope and restricting functions and variables to become global&lt;/strong&gt;. The functions and variables declare inside IIFE will &lt;strong&gt;not pollute&lt;/strong&gt; global scope &lt;strong&gt;even they have same name as global&lt;/strong&gt; variables &amp;amp; functions. So let's see what is an IIFE is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-iife"&gt;
  &lt;/a&gt;
  Advantages of IIFE:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Helps avoid creating unnecessary global variables and functions.&lt;/li&gt;
&lt;li&gt;Functions and variables defined in IIFE do not conflict with other functions &amp;amp; variables even if they have same name.&lt;/li&gt;
&lt;li&gt;Organize JavaScript code.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make JavaScript code maintainable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even though the information above is more than enough and well explained to grasp the concept but you can still check out this &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;documentation&lt;/a&gt; and this &lt;a href="https://benalman.com/news/2010/11/immediately-invoked-function-expression/"&gt;article&lt;/a&gt; to read more in-depth about IIFEs.*&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#-raw-this-endraw-keyword"&gt;
  &lt;/a&gt;
  &lt;code&gt;this&lt;/code&gt; keyword-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; represents the &lt;strong&gt;object that the function is a property of&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or simply&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; helps &lt;strong&gt;refer to the object it belongs to&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;In a method, &lt;code&gt;this&lt;/code&gt; refers to the owner object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const person = {
  firstName: "Pranav",
  lastName : "Mendiratta",
  fullName : function() {
    // here `this` keyword refers to our object `person` 
    return this.firstName + " " + this.lastName;
  }
};
console.log(person.fullName())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"Pranav Mendiratta"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Alone, &lt;code&gt;this&lt;/code&gt; refers to the global object (called the window object in the browser).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(this)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In a function, &lt;code&gt;this&lt;/code&gt; refers to the global object.&lt;/li&gt;
&lt;li&gt;In a function, in strict mode, &lt;code&gt;this&lt;/code&gt; is undefined.&lt;/li&gt;
&lt;li&gt;In an event, &lt;code&gt;this&lt;/code&gt; refers to the element that received the event.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button onclick="this.style.display='none'"&amp;gt;
  Click to Remove Me!
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#tricky-example-on-raw-this-endraw-keyword-1"&gt;
  &lt;/a&gt;
  Tricky example on &lt;code&gt;this&lt;/code&gt; keyword 1
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/rkjdpuez/2//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window
window
c
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are functions of the global/ window object, thus as per the definition, the &lt;code&gt;window&lt;/code&gt; object gets returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt; represents the object that the function is a property of.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The third &lt;code&gt;console.log&lt;/code&gt; returns the &lt;code&gt;c&lt;/code&gt; object because that's what has called the &lt;code&gt;hi()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tricky-example-on-raw-this-endraw-keyword-2"&gt;
  &lt;/a&gt;
  Tricky example on &lt;code&gt;this&lt;/code&gt; keyword 2
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/gfvjLo2b//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;obj
window
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;On calling the &lt;code&gt;sing()&lt;/code&gt; function, the &lt;code&gt;console.log(this)&lt;/code&gt; on line 4 returns the &lt;code&gt;obj&lt;/code&gt; object since &lt;code&gt;obj&lt;/code&gt; is calling the function.&lt;/li&gt;
&lt;li&gt;Whereas the &lt;code&gt;console.log(this)&lt;/code&gt; on line 6 returns the &lt;code&gt;window&lt;/code&gt; object because its &lt;strong&gt;function call is not attached to any object&lt;/strong&gt;, and those not attached are always under the global/ window object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tricky-example-on-raw-this-endraw-keyword-3"&gt;
  &lt;/a&gt;
  Tricky example on &lt;code&gt;this&lt;/code&gt; keyword 3
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/yut8g7La//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;b
window
d
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation-
&lt;/h3&gt;

&lt;p&gt;*&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tricky-example-on-raw-this-endraw-keyword-4"&gt;
  &lt;/a&gt;
  Tricky example on &lt;code&gt;this&lt;/code&gt; keyword 4
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const phone = function (model, brand){
  this.model = model,
  this.brand = brand
}

// regular anonymous  function used
phone.prototype.clickPicture = function(){
  console.log(`${this.brand} ${this.model} clicks picture!`)
}

// arrow function used here
phone.prototype.powerOn = () =&amp;gt; {
  console.log(`${this.brand} ${this.model} boots up!`)
}

const iphone = new phone("Iphone 12", "Apple")
console.log(iphone.clickPicture())
console.log(iphone.powerOn())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"Apple Iphone 12 clicks picture!"
"undefined undefined boots up!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Arrow functions are lexically scoped&lt;/strong&gt; where as &lt;strong&gt;regular anonymous functions are dynamically scoped&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A lot of the weird behavior of the &lt;code&gt;this&lt;/code&gt; keyword is mainly because it is &lt;strong&gt;dynamically scoped and not lexically scoped&lt;/strong&gt; like everything else in JavaScript meaning that it is not important where it is written but how it is called.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#solution-to-weird-behavior"&gt;
  &lt;/a&gt;
  Solution to weird behavior-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One way to solve these issues is the use of &lt;strong&gt;arrow functions&lt;/strong&gt; that were introduced in ES6.&lt;/li&gt;
&lt;li&gt;If we use an arrow function in the &lt;strong&gt;previous example&lt;/strong&gt; then our function gives us the &lt;strong&gt;desired output&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Another way is to bind the &lt;code&gt;this&lt;/code&gt; keyword to the object. We will learn more about &lt;code&gt;bind&lt;/code&gt; keyword ahead.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmR6JTPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzdepajp4aap56bugsww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmR6JTPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzdepajp4aap56bugsww.png" alt="This" width="880" height="676"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://medium.com/@iqbal.ipel"&gt;Iqbal M Ipel&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aEvticnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4i1abr1nmt4962robct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aEvticnL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4i1abr1nmt4962robct.png" alt="Function" width="856" height="404"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://dev.to/thesanjeevsharma"&gt;Sanjeev Sharma&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#call"&gt;
  &lt;/a&gt;
  call()
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;With the &lt;code&gt;call()&lt;/code&gt; method, you can write a method that can be used on different objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const wizard = {
  name: 'Pranav',
  health: 100,
  heal: function(num1, num2) {
    this.health += num1 + num2;
  }
}

const archer = {
  name: 'Robin',
  health: 50
}

wizard.heal.call(archer, 50, 60)
console.log(archer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  health: 160,
  name: "Robin"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#apply"&gt;
  &lt;/a&gt;
  apply()
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;With the apply() method, you can write a method that can be used on different objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;It is very similar to the &lt;code&gt;call&lt;/code&gt; keyword, only difference is that the arguments are passed as an array when we are using &lt;code&gt;apply&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const wizard = {
  name: 'Pranav',
  health: 100,
  heal: function(num1, num2) {
    this.health += num1 + num2;
  }
}

const archer = {
  name: 'Robin',
  health: 50
}

wizard.heal.apply(archer, [20, 30])
console.log(archer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  health: 100,
  name: "Robin"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bind"&gt;
  &lt;/a&gt;
  bind()
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The bind() method creates a new function that, when called, has its this keyword set to the provided value. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It let’s us explicitly define the value of this when calling a function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It returns a new function that we can call.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const wizard = {
  name: 'Pranav',
  health: 100,
  heal: function(num1, num2) {
    this.health += num1 + num2;
  }
}

const archer = {
  name: 'Robin',
  health: 50
}

const healArcher = wizard.heal.bind(archer, 50, 60);
healArcher()
console.log(archer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The js engine is creating a new instance of the heal function and binding its &lt;code&gt;this&lt;/code&gt; object to archer.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  health: 160,
  name: "Robin"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HiAeIH7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87k9zcky6o4siop6jw5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HiAeIH7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/87k9zcky6o4siop6jw5x.png" alt="CallApply" width="880" height="499"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://hdsatija.medium.com/"&gt;Himanshu Satija&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#currying"&gt;
  &lt;/a&gt;
  Currying-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Currying is a technique of evaluating function with multiple arguments, into sequence of functions with single argument.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function volume(length) {
      return function(width) {
         return function(height) {
            return height * width * length;
         }
      }
   }
console.log(volume(11)(2)(3))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;66
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example 2-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sum(a, b) {
    return a+b;
}

var sumWithThree = sum.bind(this, 3);
console.log(sumWithThree(4));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#partial-application"&gt;
  &lt;/a&gt;
  Partial Application-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Partial application starts with a function. We take this function and create a new one with one or more of its arguments already “set” or &lt;strong&gt;partially applied&lt;/strong&gt;. It will help reduce the number of parameters needed for our functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Both currying and partial application are patterns that &lt;strong&gt;allow us to call functions&lt;/strong&gt; with some of their parameters, and provide the rest later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They both are important concepts in &lt;strong&gt;Functional programming&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multiply = (a, b, c) =&amp;gt; a * b * c
const partialMultiplyBy5 = multiply.bind(null, 5)
partialMultiplyBy5(10, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#difference-bw-currying-and-partial-application"&gt;
  &lt;/a&gt;
  Difference b/w Currying and Partial Application-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Partial application is more or less a pattern of &lt;strong&gt;calling&lt;/strong&gt; a function. You can &lt;strong&gt;partially apply any function&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Currying is more &lt;strong&gt;about a form of the function&lt;/strong&gt;. To be able to use currying, you have to &lt;strong&gt;explicitly create a new function&lt;/strong&gt; that is a curried version of the original one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-currying-or-partial-application"&gt;
  &lt;/a&gt;
  Advantages of using Currying or Partial Application-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;They both help us &lt;strong&gt;create specialized versions of generic functions&lt;/strong&gt;, thus &lt;strong&gt;removing duplication&lt;/strong&gt; and making the code easier to compose.&lt;/li&gt;
&lt;li&gt;Another benefit of using partial application and currying is that they can help us create more &lt;strong&gt;readable code&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-behind-the-scenes-javascript-engine-ats-hidden-classes-garbage-collection-3ajj"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 1&lt;/strong&gt;: Behind the scenes (JavaScript Engine, ATS, Hidden Classes, Garbage Collection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-execution-context-and-call-stack-l1o"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 2&lt;/strong&gt;: Execution Context and Call Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-3-weird-js-behavior-strict-mode-and-hoisting-26a3"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 3&lt;/strong&gt;: Weird JS behavior, Strict Mode and Hoisting, Temporal Dead Zone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-41-global-function-and-block-scope-lexical-vs-dynamic-scoping-20pg"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.1&lt;/strong&gt;: Global, Function and Block Scope, Lexical vs Dynamic Scoping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.2&lt;/strong&gt;: Scope Chains and their working, Lexical and Variable Environments&lt;/a&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialsteacher.com/javascript/immediately-invoked-function-expression-iife"&gt;https://www.tutorialsteacher.com/javascript/immediately-invoked-function-expression-iife&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/js/js_this.asp"&gt;https://www.w3schools.com/js/js_this.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/js/js_function_call.asp"&gt;https://www.w3schools.com/js/js_function_call.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/js/js_function_apply.asp"&gt;https://www.w3schools.com/js/js_function_apply.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb"&gt;https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/what-is-currying-in-javascript"&gt;https://www.tutorialspoint.com/what-is-currying-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-use-partial-application-to-improve-your-javascript-code-5af9ad877833/"&gt;https://www.freecodecamp.org/news/how-to-use-partial-application-to-improve-your-javascript-code-5af9ad877833/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/dailyjs/functional-js-5-partial-application-currying-da30da4e0cc3"&gt;https://medium.com/dailyjs/functional-js-5-partial-application-currying-da30da4e0cc3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Advanced JavaScript Series - Part 4.2: Scope Chains and their working, Lexical and Variable Environments</title>
      <author>Pranav</author>
      <pubDate>Sun, 16 Jan 2022 20:25:36 +0000</pubDate>
      <link>https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5</link>
      <guid>https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-scope-chain"&gt;
  &lt;/a&gt;
  What is a Scope Chain?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Scope Chain is the hierarchy of scopes that will be searched in order to find a function or variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgLjVDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz8mt8i5eo0plhotv8j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgLjVDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz8mt8i5eo0plhotv8j1.png" alt="Scope Chain" width="829" height="660"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://hashnode.com/@anuradha"&gt;Anuradha Aggarwal&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a variable is used in JavaScript, the &lt;strong&gt;JavaScript engine&lt;/strong&gt; will try to find the variable’s value in the current scope. If it could not find the variable, it will look into the outer scope and will continue to do so until it finds the variable or reaches &lt;strong&gt;global scope&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If it’s still could not find the variable, it will either &lt;strong&gt;implicitly declare the variable&lt;/strong&gt; in the global scope (if not in strict mode) or return an &lt;strong&gt;error&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The Scope Chain is used to &lt;strong&gt;resolve variables&lt;/strong&gt;. When asked to resolve a variable, JavaScript always starts at the &lt;strong&gt;innermost level&lt;/strong&gt; of the code nest and keeps jumping back to the parent scope until it finds the variable or any other resource it is looking for. &lt;/li&gt;
&lt;li&gt;The scope chain can simply be defined as an &lt;strong&gt;object&lt;/strong&gt; that contains a bunch of other objects. Each object has the &lt;strong&gt;variable-to-value mapping&lt;/strong&gt; for its particular execution context.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let c = 10
function a() {
  let b = 25;  
  console.log('Inside function a()');
}
a();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sample-scope-chain-object-for-the-function-raw-a-endraw-"&gt;
  &lt;/a&gt;
  Sample Scope chain object for the function &lt;code&gt;a&lt;/code&gt;-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functionLexicalEnvironment = {
  environmentRecord: {
      b    : 25,
  }
  outer: {
    c  : 10,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lexical-environment"&gt;
  &lt;/a&gt;
  Lexical Environment-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A lexical environment is a structure that holds &lt;strong&gt;identifier-variable mapping&lt;/strong&gt;. &lt;br&gt;
(here identifier refers to the name of variables/functions, and the variable is the reference to actual object [including function object and array object] or primitive value).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simply put, a lexical environment is a place where &lt;strong&gt;variables and references to the objects&lt;/strong&gt; are stored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lexical environment conceptually looks like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lexicalEnvironment = {
  environmentRecord: {
    &amp;lt;identifier&amp;gt; : &amp;lt;value&amp;gt;,
    &amp;lt;identifier&amp;gt; : &amp;lt;value&amp;gt;
  }
  outer: &amp;lt; Reference to the parent lexical environment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's understand this with the help of an example-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let language = 'JS';
function a() {
  let b = 25;  
  console.log('Inside function a()');
}
a();
console.log('Inside global execution context');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The JavaScript engine creates a new &lt;strong&gt;lexical environment&lt;/strong&gt; to store the variables and functions defined in the global scope when it establishes a &lt;strong&gt;global execution context&lt;/strong&gt; to execute global code. As a result, the lexical environment for the global scope will be as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;globalLexicalEnvironment = {
  environmentRecord: {
      language    : 'JS',
      a : &amp;lt; reference to function object &amp;gt;
  }
  outer: null
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because there is no outer &lt;strong&gt;lexical environment&lt;/strong&gt; for the global scope, the outer lexical environment is set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the engine establishes an &lt;strong&gt;execution context&lt;/strong&gt; for the &lt;code&gt;a()&lt;/code&gt; function, it also creates a lexical environment in which variables defined in the function can be stored while the function is being executed. As a result, the function's &lt;strong&gt;lexical environment&lt;/strong&gt; will look like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functionLexicalEnvironment = {
  environmentRecord: {
      b    : 25,
  }
  outer: &amp;lt;globalLexicalEnvironment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because the function is surrounded by the &lt;strong&gt;global scope&lt;/strong&gt; in the source code, the function's outer lexical environment is set to the global lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a function finishes executing, its execution context is removed from the stack, but its lexical environment &lt;strong&gt;may or may not be erased from memory&lt;/strong&gt;, depending on whether it is referenced by any other lexical environments in their &lt;strong&gt;outer lexical environment property&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#variable-environment"&gt;
  &lt;/a&gt;
  Variable Environment-
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;The variable environment is a representation of the &lt;strong&gt;lexical environment’s local memory&lt;/strong&gt;. In the environment record, the lexical environment stores variables as well as other information such as the infamous this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We've previously used one variable environment, the &lt;strong&gt;global environment's memory&lt;/strong&gt;, which holds variables that are universally available throughout the script. While the lexical environment refers to this global environment, the variable environment only refers &lt;strong&gt;to variables created within the scope&lt;/strong&gt; of the provided function within the lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The variable environment &lt;strong&gt;maps the local scope&lt;/strong&gt; of a given environment. In other words, the variable environment stores those variables defined within the given working code block &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MALeaCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olf5ymfxixmr88y5i2jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MALeaCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olf5ymfxixmr88y5i2jf.png" alt="Img" width="823" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Credits-  &lt;a href="https://stackoverflow.com/users/1348195/benjamin-gruenbaum"&gt;Benjamin Gruenbaum&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-behind-the-scenes-javascript-engine-ats-hidden-classes-garbage-collection-3ajj"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 1&lt;/strong&gt;: Behind the scenes (JavaScript Engine, ATS, Hidden Classes, Garbage Collection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-execution-context-and-call-stack-l1o"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 2&lt;/strong&gt;: Execution Context and Call Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-3-weird-js-behavior-strict-mode-and-hoisting-26a3"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 3&lt;/strong&gt;: Weird JS behavior, Strict Mode and Hoisting, Temporal Dead Zone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-41-global-function-and-block-scope-lexical-vs-dynamic-scoping-20pg"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.1&lt;/strong&gt;: Global, Function and Block Scope, Lexical vs Dynamic Scoping&lt;/a&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://anuradha.hashnode.dev/scope-chain-and-lexical-environment-in-javascript"&gt;https://anuradha.hashnode.dev/scope-chain-and-lexical-environment-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/understanding-scope-and-scope-chain-in-javascript-f6637978cf53"&gt;https://blog.bitsrc.io/understanding-scope-and-scope-chain-in-javascript-f6637978cf53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@bdov_/javascript-typescript-execution-vs-lexical-vs-variable-environment-37ff3f264831"&gt;https://medium.com/@bdov_/javascript-typescript-execution-vs-lexical-vs-variable-environment-37ff3f264831&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/20721626/value-of-variable-and-lexical-environment-after-creating-execution-context"&gt;https://stackoverflow.com/questions/20721626/value-of-variable-and-lexical-environment-after-creating-execution-context&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>How I made an Online E-book store and reader</title>
      <author>Akbar Ali</author>
      <pubDate>Sun, 16 Jan 2022 19:26:19 +0000</pubDate>
      <link>https://dev.to/pulimoodan/how-i-made-an-online-e-book-store-and-reader-53h2</link>
      <guid>https://dev.to/pulimoodan/how-i-made-an-online-e-book-store-and-reader-53h2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;First of all, I am a full stack web developer working as a freelancer. I have done many projects with Django for many of my clients, but recently I thought about initiating a startup. Many ideas came up among my friends and we decided to start working on some of them.&lt;/p&gt;

&lt;p&gt;One of the ideas was to build an online e-book store for monthly subscription. I didn't think about any copy-right issues and competitors. We found some pdfs of famous books and I just started developing. Yeah, I am the one and only developer among my friends. I have to develop it myself. They ask me about the updates everyday.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-to-solve"&gt;
  &lt;/a&gt;
  Problems to solve
&lt;/h2&gt;

&lt;p&gt;I have seen many e-book readers like Kindle, Google books, Wattpad and so on. But I always wondered about how they manage to deliver each page to users without any chance to steal their book. I tried inspecting many web apps and found no loopholes. At last, Made an API to request each page of the book to server and return page as base64 image. &lt;/p&gt;

&lt;p&gt;But still the problem exists. The users can download the image of the page. Surfed around the internet. I found some other guys who asks the same questions - "&lt;strong&gt;How to protect images from being downloaded?&lt;/strong&gt;"&lt;/p&gt;

&lt;p&gt;Some of them said to disable right clicking and downloading using JavaScript. Others said to provide image as a background URL. And many of them said to print it in canvas. Still, an advanced user can download the image easily. Putting watermark on them was another solution. But it's about reading. Watermark affects reading.&lt;/p&gt;

&lt;p&gt;This problem still exists and I am seeking for the answer currently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web-app"&gt;
  &lt;/a&gt;
  The Web App
&lt;/h2&gt;

&lt;p&gt;We all learn CRUD functionalities when we research about backend development. So, making a book store wasn't a great challenge. The main steps in the development were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Books&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Categories&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authors&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Book objects have their Review object and they related with Categories and Authors. Every user has Follow, Library, BookRead objects. Users can follow authors, read books when the page will be stored for another opening. They can add books to their library. Books can be listed according to Categories, Authors.&lt;br&gt;
I also implemented a search functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment"&gt;
  &lt;/a&gt;
  Payment
&lt;/h2&gt;

&lt;p&gt;At last, applied on Razorpay, bought domain and vps deployed project as &lt;a href="https://publiso.in/"&gt;publiso.in&lt;/a&gt;. I developed subscription system on deployment. Every user has to pay 99 Indian Rupees to get a 30 days subscription. That's mandatory to read any book.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-luck-next-time"&gt;
  &lt;/a&gt;
  Better luck next time
&lt;/h2&gt;

&lt;p&gt;I was happy completing this project and waited for users to register here. Even spent 650 Rupees in google ads which resulted 144 clicks and nothing. No-one made an account and no penny credited to our account.&lt;/p&gt;

&lt;p&gt;I realized that all books we have is available in the internet for free. So, there is no meaning to sell them for money. It's better to deliver them free and people will enjoy it.&lt;/p&gt;

&lt;p&gt;Removed all subscription and payments stuff. Made it totally free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h2&gt;

&lt;p&gt;I published the project on GitHub and you guys are welcome to test the code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pulimoodan/publiso/tree/master&amp;lt;br&amp;gt;%0A!%5BImage%20description%5D(https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx6uz60y9h261l6x9u94.png)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave your feedback as comments.&lt;br&gt;
&lt;strong&gt;Can we develop this into a big project ?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Anyone interested to contribute ?&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to use TailwindCSS 3.0 without external NPM scripts, just Hugo pipes</title>
      <author>Jonas Duri</author>
      <pubDate>Sun, 16 Jan 2022 19:20:35 +0000</pubDate>
      <link>https://dev.to/jonas_duri/how-to-use-tailwindcss-30-without-external-npm-scripts-just-hugo-pipes-2lg9</link>
      <guid>https://dev.to/jonas_duri/how-to-use-tailwindcss-30-without-external-npm-scripts-just-hugo-pipes-2lg9</guid>
      <description>&lt;p&gt;TailwindCSS is a utility-first CSS framework for rapid UI development and as of version 3, the JIT mode is the new default. Among other benefits, it renders a CSS file, that only contains the code, that your site is actually using -- nothing more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-changed-since-tailwindcss-3"&gt;
  &lt;/a&gt;
  1. What changed since TailwindCSS 3
&lt;/h2&gt;

&lt;p&gt;Since version 3, TailwindCSS only uses the JIT compiler to do its magic. That means, that utility classes will be generated on demand instead of purging unused classes afterward. The thing with TailwindCSS is, that only the compilation result changes, not the input file. For this reason, Hugo Pipes won't work beyond the initial render pass. This behavior is perfectly fine for a production build, but it doesn't detect changes when running a Hugo development server in "watch" mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="c"&gt;/* Doesn't work in "watch" mode */&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt; &lt;span class="s"&gt;"tailwind.css"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostCSS&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minify&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-how-to-use-tailwindcss-without-external-npm-scripts-just-hugo-pipes"&gt;
  &lt;/a&gt;
  2. How to use TailwindCSS without external NPM scripts, just Hugo Pipes
&lt;/h2&gt;

&lt;p&gt;First up, we use TailwindCSS as a PostCSS plugin. This is key to using Hugo's build-in &lt;code&gt;resources.PostCSS&lt;/code&gt; pipe. You can read how to setup PostCSS with TailwindCSS here: &lt;a href="https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor"&gt;https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make work in both production and development the "Hugo Way", I came up with a little hack. Rather than using the input file as a regular CSS resource, we can tell Hugo to treat it like a template file using the &lt;code&gt;resources.ExecuteAsTemplate&lt;/code&gt; pipe.&lt;/p&gt;

&lt;p&gt;To ensure that the result always changes, we can create a random string and pass it into the CSS input template. Also, the final CSS file has the generated random string as part of its file name. &lt;/p&gt;

&lt;p&gt;Note that this is only necessary during development. In production, a single render pass by Hugo is all it takes to work with TailwindCSS.&lt;/p&gt;

&lt;p&gt;This is the complete code that a came up with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsServer&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"weqklrjfmnk213409ufasdfhnlk3j4bladsfsl"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;delimit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md5&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt; &lt;span class="s"&gt;"tailwind.css"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostCSS&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExecuteAsTemplate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"tailwind.dev.%s.css"&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ $style.RelPermalink }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt; &lt;span class="s"&gt;"tailwind.css"&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostCSS&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minify&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ $style.RelPermalink }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-conclusions"&gt;
  &lt;/a&gt;
  3. Conclusions
&lt;/h2&gt;

&lt;p&gt;In this article, we discussed how to use TailwindCSS without external NPM scripts by using Hugo pipes. First, we discussed how to use the JIT mode in TailwindCSS 3.0. Next, I showed how to use Hugo pipes to treat the input file like a template so that it always triggers a re-compilation when running Hugo in "watch" mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-references-and-further-reading"&gt;
  &lt;/a&gt;
  4. References and further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gohugoio/hugo/issues/8343"&gt;https://github.com/gohugoio/hugo/issues/8343&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gohugo.io/hugo-pipes/postcss/"&gt;https://gohugo.io/hugo-pipes/postcss/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor"&gt;https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.brycewray.com/posts/2021/11/making-tailwind-jit-work-hugo/"&gt;https://www.brycewray.com/posts/2021/11/making-tailwind-jit-work-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>hugo</category>
      <category>tailwindcss</category>
      <category>postcss</category>
    </item>
    <item>
      <title>Thirty Days of Rust: Day Five</title>
      <author>Sammy Shear</author>
      <pubDate>Sun, 16 Jan 2022 19:09:15 +0000</pubDate>
      <link>https://dev.to/sammyshear/thirty-days-of-rust-day-five-29ml</link>
      <guid>https://dev.to/sammyshear/thirty-days-of-rust-day-five-29ml</guid>
      <description>&lt;p&gt;Today I wanted to take it easy a little bit and try some WebAssembly with Rust. Over the years I've gotten very used to JavaScript, but now that I'm doing this challenge, I wanted to dip my feet into WebAssembly, so that's exactly what I did. I found a &lt;a href="https://rustwasm.github.io/book/introduction.html"&gt;book&lt;/a&gt; that basically told me everything I needed to know, and then I got started. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rust-setup"&gt;
  &lt;/a&gt;
  Rust Setup
&lt;/h3&gt;

&lt;p&gt;So instead of a new Rust app, I needed to make a Rust lib, which I could do with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cargo new day5 &lt;span class="nt"&gt;--lib&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I added two things to my &lt;code&gt;Cargo.toml&lt;/code&gt; so it looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[package]&lt;/span&gt;
&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"day5"&lt;/span&gt;
&lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
&lt;span class="py"&gt;edition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2021"&lt;/span&gt;

&lt;span class="nn"&gt;[lib]&lt;/span&gt;
&lt;span class="py"&gt;crate-type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"cdylib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rlib"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;

&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;wasm-bindgen&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.2.78"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I went ahead and installed &lt;code&gt;wasm-pack&lt;/code&gt; with cargo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cargo &lt;span class="nb"&gt;install &lt;/span&gt;wasm-pack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rust-code"&gt;
  &lt;/a&gt;
  Rust Code
&lt;/h3&gt;

&lt;p&gt;The only thing I wanted this app to do was add two numbers together. It's probably too simple for this challenge to really mean anything, but I didn't want to spend too much time on this because tomorrow I want to rebuild my hangman game in the browser and I figured today could be a little bit shorter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;wasm_bindgen&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that was simple, as I expected and now I just had to pack it together with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wasm-pack build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#js-setup"&gt;
  &lt;/a&gt;
  JS Setup
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pnpm init wasm-app www
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;www
&lt;span class="nv"&gt;$ &lt;/span&gt;pnpm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all, now I just imported the wasm file and console logged the result of the add function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../pkg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I could just run &lt;code&gt;pnpm serve&lt;/code&gt; and open up &lt;code&gt;localhost:8080&lt;/code&gt; to get to my app. When I opened up the console, it showed the logged value of 40.&lt;br&gt;
That's about it from me today, but I look forward to tomorrow and sorry if this one was a little less exciting.&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>rust</category>
      <category>webassembly</category>
      <category>programming</category>
    </item>
    <item>
      <title>Forms In React | Day 13</title>
      <author>Web.Developer.io</author>
      <pubDate>Sun, 16 Jan 2022 19:02:36 +0000</pubDate>
      <link>https://dev.to/developerioweb/forms-in-react-day-13-436c</link>
      <guid>https://dev.to/developerioweb/forms-in-react-day-13-436c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Forms&lt;/code&gt; → They are used to take in the use Input.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goals :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build Form with React&lt;/li&gt;
&lt;li&gt;Understanding What Controlled Component are&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZGTGvPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqwddbmxvzit52pjh0qn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZGTGvPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqwddbmxvzit52pjh0qn.png" alt="React Forms" width="880" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So in the HTML forms , they have their own state , the whole Application doesn’t know about the Form’s Data until we hit &lt;code&gt;Submit&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So they are Called the &lt;code&gt;Un-controlled Component&lt;/code&gt; , Where Site can’t access the form data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6j621Si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzrtidgyrha2slnkfcow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6j621Si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzrtidgyrha2slnkfcow.png" alt="React State" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When our app has access to the form Data they are called the &lt;code&gt;Controlled-Component&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5l74ClC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fz74umksmzwlosyjohc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5l74ClC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fz74umksmzwlosyjohc.png" alt="Component" width="880" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the case of HTML the Form has it own State and it changes based on the User-Input.&lt;/p&gt;

&lt;p&gt;But in React , We keep all our mutable data in the State and set it using the &lt;code&gt;setState.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how do we Control the React State ??&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So we keep all our mutable data in the State , So what we can do is to store the &lt;strong&gt;&lt;code&gt;User-input&lt;/code&gt;&lt;/strong&gt; in the &lt;strong&gt;&lt;code&gt;State&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s have a look on this Example 👇&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ControlledForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter Your Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The value u Entered is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//It is a Asynchronomus process so it will take some time.&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Controlled Form&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ControlledForm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/controlled-form-gdchs?file=/src/ControlledForm.js:0-628"&gt;Try This on CodeSandBox&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So in the Input tag we have set the value attribute to be &lt;code&gt;Text&lt;/code&gt; (which is a State).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The Function &lt;strong&gt;&lt;em&gt;&lt;code&gt;handleChange&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; runs on every keystroke to update the React state, the displayed value will update as the user types.&lt;/li&gt;
&lt;li&gt;With a controlled component, every state mutation will have an associated handler function. This makes it easy to modify or validate user input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The HandleClick Method →&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Updated!!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#handling-multiple-events-%E2%86%92"&gt;
  &lt;/a&gt;
  Handling Multiple Events →
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What if we want to use multiple input tag , Do we have make new &lt;code&gt;onChange event Handler&lt;/code&gt; for Everyone??&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The answer is NO!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9Eh1g9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dmjctvnrfp2g6bf2pz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9Eh1g9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dmjctvnrfp2g6bf2pz2.png" alt="ES2015" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jZRypih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdzb7ucdbtcpgxvoxv3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jZRypih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdzb7ucdbtcpgxvoxv3h.png" alt="Property name" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So we can Compute a Property in the Object also using the &lt;code&gt;square-brakets []&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08FvkZ98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g83ea7ju6otlo92wc088.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08FvkZ98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g83ea7ju6otlo92wc088.png" alt="React" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So Instead of making separate &lt;code&gt;onChange&lt;/code&gt; handler for every single input , we can make some generic function.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISzQxI0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h89lcui78g9zydglwb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISzQxI0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h89lcui78g9zydglwb4.png" alt="React" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;To do so first we have include the &lt;code&gt;name&lt;/code&gt; attribute to the input tag , and the name should match to the one we have declared in the state.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And in the &lt;code&gt;handleChange&lt;/code&gt; function we have to use the square braces to make changes in the right place.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_vU29zzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77129ms5rsjff1hdw5ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vU29zzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77129ms5rsjff1hdw5ur.png" alt="React Forms" width="880" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOUR43hZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbd204vfxe6war7fq0x6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOUR43hZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbd204vfxe6war7fq0x6.png" alt="React Forms" width="880" height="719"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MultiInputForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// const [Text, setText] = useState("");&lt;/span&gt;
  &lt;span class="c1"&gt;//We have defined a Object.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The value u Entered is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// In this we are restoring the res ones and only changing the requierd ones.&lt;/span&gt;
    &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// console.log(Text); //It is a Asynchronomus process so it will take some time.&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Multiple Input Form&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Be carful while setting the name it should be same as that u have entered in the state */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Enter Email"&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Enter Mobile Number"&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Number"&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MultiInputForm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/controlled-form-gdchs?file=/src/MultiInputForm.js:0-1272"&gt;Controlled Form&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-html-for"&gt;
  &lt;/a&gt;
  The HTML For
&lt;/h3&gt;

&lt;p&gt;When ever u are using the &lt;code&gt;label&lt;/code&gt; use &lt;strong&gt;&lt;code&gt;htmlFor&lt;/code&gt;&lt;/strong&gt; instead of &lt;strong&gt;&lt;code&gt;for&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cuz for is a Reserved word in the javaScript same with the instead we should use the &lt;code&gt;className&lt;/code&gt; cuz class is also a Reserved keyword.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passing-data-to-parent-component"&gt;
  &lt;/a&gt;
  Passing Data to Parent Component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRqPYw05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ax8zi8whma8uxlx10dx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRqPYw05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ax8zi8whma8uxlx10dx.png" alt="Passing Data To Parent" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So Forms are generally Stateful so there should be a way to pass the state to the parent Component.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So we make a Form Component and changes it’s state using &lt;code&gt;handleChange&lt;/code&gt; Function and after on submit we have an &lt;code&gt;handleSubmit&lt;/code&gt; function which then call the Function which we passed as props and send the state as an argument and&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;then in parent Component we get that state and update the changes.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shopping-list-example"&gt;
  &lt;/a&gt;
  Shopping List Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TKs1J1I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqh2k4wm3m1gmjk7j5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TKs1J1I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqh2k4wm3m1gmjk7j5t.png" alt="Shopping List" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keys-and-uuid"&gt;
  &lt;/a&gt;
  Keys and UUID
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rasu16El--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ztuow2u4ge7xzvyckmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rasu16El--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ztuow2u4ge7xzvyckmt.png" alt="Keys and UUID" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding ☺️&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
