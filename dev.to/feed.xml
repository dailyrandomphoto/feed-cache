<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Soft UI Dashboard - Bootstrap 5 FREE Django Template</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 31 May 2021 06:23:33 +0000</pubDate>
      <link>https://dev.to/sm0ke/soft-ui-dashboard-bootstrap-5-free-django-template-29dj</link>
      <guid>https://dev.to/sm0ke/soft-ui-dashboard-bootstrap-5-free-django-template-29dj</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a simple &lt;strong&gt;Django Template&lt;/strong&gt; that might help beginners to &lt;em&gt;learn by coding&lt;/em&gt; new features on top of an existing codebase enhanced with authentication, deployment script and a modern Bootstrap 5 design: &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt;. Product can be downloaded from Github and used for hobby &amp;amp; commercial project without restrictions (footer link, registration lock).  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://django-soft-ui-dashboard.appseed-srv1.com/"&gt;Soft UI Dashboard Django&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/django-soft-ui-dashboard"&gt;Soft UI Dashboard Django&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;Minimal Programming Kit&lt;/a&gt; - a short list with tools for beginners&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prGoE__J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc21c449jmdtx366n49c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prGoE__J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc21c449jmdtx366n49c.png" alt="Soft UI Dashboard - Open-source Django Starter."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Design Information - Designed for those who like bold elements and beautiful websites, &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; is made of hundred of elements, designed blocks and fully coded pages. This Bootstrap 5 design is built with over 70 frontend individual elements, like buttons, inputs, navbars, navtabs, cards or alerts, giving you the freedom of choosing and combing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://bit.ly/2Q1uIfK"&gt;Soft UI Dashboard&lt;/a&gt; - HTML Version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; developers and designers will save a lot of time going from prototyping to full-functional code, because all elements are implemented. This Free Bootstrap 5 Dashboard is coming with prebuilt design blocks, so the development process is seamless, switching from our pages to the real website is very easy to be done.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#django-codebase"&gt;
  &lt;/a&gt;
  Django Codebase
&lt;/h2&gt;

&lt;p&gt;The "app" version comes with database, authentication, ORM and deployment scripts for Docker. To compile the project locally, a &lt;a href="https://docs.appseed.us/content/tutorials/minimal-programming-kit"&gt;minimal programming kit&lt;/a&gt; is required with a few tools and libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A modern editor - &lt;strong&gt;VSCode&lt;/strong&gt; or &lt;strong&gt;Atom&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nodejs&lt;/strong&gt; - used in Javascript-based products and tools&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Python&lt;/strong&gt; - a modern script language used for many types of projects&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GIT&lt;/strong&gt; - a command-line tool used to download sources from Github&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once all the tools are installed, we can start the build and follow the instructions provided in the official &lt;a href="https://docs.appseed.us/products/django-dashboards/soft-ui-dashboard"&gt;docs&lt;/a&gt;:&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone the source code&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Install modules and dependencies&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #3&lt;/strong&gt; - Set up database and tables&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #4&lt;/strong&gt; - Start the app&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Il all goes well we should see this simple Django starter running in the browser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7XXnFx9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqcw3iu6boejr7ig4u0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XXnFx9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqcw3iu6boejr7ig4u0s.png" alt="Soft UI Dashboard - Django Template."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Soft UI Dashboard - User Profile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_BDuOOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4c40e2caimsindpkqv3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_BDuOOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4c40e2caimsindpkqv3x.png" alt="Soft UI Dashboard - Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources and support, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Dashboards&lt;/a&gt; provided with same features&lt;/li&gt;
&lt;li&gt;For support join &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>django</category>
      <category>python</category>
    </item>
    <item>
      <title>The React useMemo Hook Made Simple</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 31 May 2021 06:15:08 +0000</pubDate>
      <link>https://dev.to/alexdevero/the-react-usememo-hook-made-simple-5c8d</link>
      <guid>https://dev.to/alexdevero/the-react-usememo-hook-made-simple-5c8d</guid>
      <description>&lt;p&gt;Performance is important, especially in large-scale application. The React useMemo hook is one tool you can use to improve the performance of your React apps. This tutorial will help you understand what useMemo hook is and how it works. It will also show you how to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-react-usememo-hook"&gt;
  &lt;/a&gt;
  Introduction to React useMemo hook
&lt;/h2&gt;

&lt;p&gt;The React useMemo hook is one of the &lt;a href="https://reactjs.org/docs/hooks-reference.html#additional-hooks"&gt;additional hooks&lt;/a&gt; that are implemented in React. All these hooks serve different purposes. The purpose of useMemo hook is to memoize the output of a &lt;a href="https://blog.alexdevero.com/javascript-functions-pt1/"&gt;function&lt;/a&gt;. What this means is that it executes some function and remember the output of that function.&lt;/p&gt;

&lt;p&gt;The important part comes when your component re-renders. After re-render, any function in the component would be normally created. If you are also calling the function, it would be also executed again. The useMemo hook helps you avoid this. It allows you to execute the memoized function only under specific conditions.&lt;/p&gt;

&lt;p&gt;When these conditions are not met, the useMemo will not execute the function. Instead, it will return the value from the last execution. This simple thing can help you optimize your React application by avoiding expensive calculations every time one of your components re-render.&lt;/p&gt;

&lt;p&gt;When you think about it, the useMemo hook is a bit like the &lt;a href="https://blog.alexdevero.com/react-usecallback-hook/"&gt;useCallback hook&lt;/a&gt;. Both use memoization. The main, and maybe only, difference between these two, is that while useCallback hook helps you memoize whole function, the useMemo helps you memoize only the output of functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-syntax"&gt;
  &lt;/a&gt;
  The syntax
&lt;/h2&gt;

&lt;p&gt;The React useMemo hook accepts two parameters. These parameters are: some function whose output you want to memoize and array of dependencies. The useMemo hook will execute the function you passed as an argument after the initial render by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useMemo hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useMemo syntax example:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Some function */&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="cm"&gt;/* Dependencies */&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#when-to-run"&gt;
  &lt;/a&gt;
  When to run
&lt;/h2&gt;

&lt;p&gt;When the useMemo hook runs, and executes the function you passed, is determined by the second argument the hook accepts, the dependency array. By changing this argument you change when the hook runs. There are currently three options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no1-only-after-initial-render"&gt;
  &lt;/a&gt;
  No.1: Only after initial render
&lt;/h3&gt;

&lt;p&gt;The first option is to run the hook only after the initial render and never again. Then, when something causes the component to re-render, useMemo will not execute the function again. Instead, it will return the memoized output of the function. It will do this for every subsequent re-render.&lt;/p&gt;

&lt;p&gt;If this is what you want, you have to specify the dependency array as empty. This means that there are no values the useMemo hook should watch. It should always return the memoized output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useMemo hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create state for count:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Create computationally expensive function:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Memoize fibonacci function:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="c1"&gt;// Above, the dependency array is empty. The useMemo will run only once.&lt;/span&gt;

  &lt;span class="c1"&gt;// Check if memoizedVal changes&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This log will show only once because&lt;/span&gt;
    &lt;span class="c1"&gt;// useMemo will run only once.&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memoizedVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;memoizedVal&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above demonstrates that useMemo runs only after initial render. It will generate fibonacci number for the initial value of &lt;code&gt;count&lt;/code&gt; state. When you increase the count, by clicking the button, value of &lt;code&gt;count&lt;/code&gt; will increase. You can see this change in the paragraph above the button.&lt;/p&gt;

&lt;p&gt;However, no log will show up. This is because the useMemo hook will not run the fibonacci function again. It will return the same value you got after the initial render. Since the value of &lt;code&gt;memoizedVal&lt;/code&gt; is the same, the &lt;a href="https://blog.alexdevero.com/react-useeffect-hook/"&gt;useEffect hook&lt;/a&gt; will not execute the &lt;code&gt;console.log()&lt;/code&gt;. Remember, it watches only the &lt;code&gt;memoizedVal&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no2-only-when-dependency-changes"&gt;
  &lt;/a&gt;
  No.2: Only when dependency changes
&lt;/h3&gt;

&lt;p&gt;The second option is to run useMemo, and execute the function you passed, again when specific value changes. This will be useful when the function you passed as an argument accepts some value from the outside. When this outside value changes you may want to re-calculate the output so the output is correct.&lt;/p&gt;

&lt;p&gt;To do this, you have to specify the value you want to "watch" as one of the dependencies. useMemo will then watch this value and execute the function you passed every time the watched value changes. If it doesn't change, useMemo will return the memoized value, value from the last execution.&lt;/p&gt;

&lt;p&gt;There is no limit to how many dependencies you can specify for the useMemo hook. If you want the hook to watch one, specify one. If you want it to watch 10, specify all ten. Just make sure to specify all dependencies you need and omit those you don't need. Otherwise, useMemo will re-execute the function too often or not often enough.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useMemo hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create state for count:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Create computationally expensive function:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Memoize fibonacci function:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="c1"&gt;// Above, the "count" is specified as a dependency. When the value of "count" changes useMemo will run and execute fibonacci function.&lt;/span&gt;

  &lt;span class="c1"&gt;// Check if memoizedVal changes&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memoizedVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;memoizedVal&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second example, the useMemo watches the &lt;code&gt;count&lt;/code&gt; value because it is specified as a dependency. Because of this, useMemo runs every time the &lt;code&gt;count&lt;/code&gt; value changes and executes the fibonacci function. Every change of &lt;code&gt;count&lt;/code&gt; also changes the input of the fibonacci function and also the output it returns.&lt;/p&gt;

&lt;p&gt;Since execution of fibonacci function changes the &lt;code&gt;memoizedVal&lt;/code&gt;, this also causes the useEffect hook to execute the &lt;code&gt;console.log&lt;/code&gt;. As a result, new message with new value shows up in the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no3-after-every-rerender"&gt;
  &lt;/a&gt;
  No.3: After every re-render
&lt;/h3&gt;

&lt;p&gt;The last option is to tell useMemo to re-run the function you passed on every re-render. This is kind of a nonsense. There is no reason to use useMemo to memoize something just to actually never memoize it. However, since this is possible, it is still an option. Warning: don't do this. It is dumb and waste of time.&lt;/p&gt;

&lt;p&gt;Anyway... Let's say you are in a situation where this is the only option, which is incredibly unlikely to happen. In order to convince the useMemo hook to run on every render you have to omit the dependency array. Pass in only one argument, the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import useMemo hook from React:&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create state for count:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Create computationally expensive function:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Memoize fibonacci function:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c1"&gt;// Above, no dependency array is specified. This will cause the useMemo to execute fibonacci function on every render.&lt;/span&gt;

  &lt;span class="c1"&gt;// Check if memoizedVal changes&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memoizedVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;memoizedVal&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase count&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the last example, we removed the dependency array argument from the useMemo hook. The useMemo hook now watches basically everything that happens. When something happens, that will cause re-render, useMemo will also execute the fibonacci function. This will, in turn, change the &lt;code&gt;memoizedVal&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This change will tell useEffect to execute the &lt;code&gt;console.log&lt;/code&gt;. As a result, a new value of &lt;code&gt;memoizedVal&lt;/code&gt; will show up in the console. To reiterate, don't do this. It doesn't make sense to use useMemo and then never let it memoize anything.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-usememo-hook-with-caution"&gt;
  &lt;/a&gt;
  Use useMemo hook with caution
&lt;/h2&gt;

&lt;p&gt;Performance is important and it is easy to go over the edge when trying to optimizer everything. It is just as easy to over-use the React useMemo hook. Think before you decide to use useMemo hook. Remember that the hook itself introduces some overhead. The hook brings in new complex logic you have to take into account.&lt;/p&gt;

&lt;p&gt;It can also create new performance issues, issue you didn't have before. When you memoize something, you store it in the memory. This gives more space for the CPU. However, there are still resources that are consumed. The only thing that changed is the type of resource it consumes.&lt;/p&gt;

&lt;p&gt;So, use useMemo only for really expensive computations. Make sure you use that memory for things that can make a difference. Use profiling tools to identify those expensive computations, computations that use a lot of resources. Try to optimize these with useMemo and see if the profile changes for the better.&lt;/p&gt;

&lt;p&gt;Additional warning. Don't rely on useMemo too much. As is mentioned in the &lt;a href="https://reactjs.org/docs/hooks-reference.html#usememo"&gt;React docs&lt;/a&gt;, useMemo doesn't guarantee you to execute the function only when dependencies change. React may also choose to remove memoized values and recalculate them so it can free up memory. So, make sure your code works without useMemo as well.&lt;/p&gt;

&lt;p&gt;One more thing. Don't use functions you passed to useMemo hook to create side-effects. Side-effects should be made inside the useEffect hook. Also, don't use useMemo to update state values. This is also a side-effect, but it is important to mention it. Use useMemo only for what it is intended, to memoize output values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-the-react-usememo-hook-made-simple"&gt;
  &lt;/a&gt;
  Conclusion: The React useMemo hook made simple
&lt;/h2&gt;

&lt;p&gt;The React useMemo hook can be useful when you look for ways to improve performance of your React applications. It can help you optimize expensive computations by memoizing output of these computations and re-run them only when necessary. I hope that this tutorial helped you understand what the useMemo hook is, how it works and also how to use it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>30 JavaScript Libraries to use in your Projects</title>
      <author>devdefinitive</author>
      <pubDate>Mon, 31 May 2021 06:11:04 +0000</pubDate>
      <link>https://dev.to/devdefinitive/30-javascript-libraries-to-use-in-your-projects-4k11</link>
      <guid>https://dev.to/devdefinitive/30-javascript-libraries-to-use-in-your-projects-4k11</guid>
      <description>&lt;p&gt;JavaScript is a programming language that is vastly used in the world both on the client-side as well as server-side that allows you to make web pages convertible and create dynamic web content.&lt;/p&gt;

&lt;p&gt;It is a scripting language pre-owned by developers to unveil interactive user interfaces that set forth dynamic content. While CSS and HTML are the languages that give design and proper shape to the web pages. There are a large number of other programming languages out there, including HTML, CSS and Python, but JS is the most commonly used scripting language.&lt;/p&gt;

&lt;p&gt;Furthermore, JavaScript offers numerous JS libraries which have created an ecosystem in which coders are not supposed to write code from the scratch, However, these libraries allowing websites to be built quickly with ease. Here In this Article, I've compiled a list of the top 30 JavaScript libraries that every developer must have and can put into use easily for their projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-surveyjs"&gt;
  &lt;/a&gt;
  1. SurveyJS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAjHFHf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268413108/uHIA00LPX.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAjHFHf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268413108/uHIA00LPX.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SurveyJS&lt;/strong&gt; is a JavaScript library that help developers build customizable surveys and quizzes that can be integrated with any JS application. Besides normal forms, surveys are quite different, as the data assembled from surveys must then be examined. There are also many more customization prerequsites for surveys compared to regular forms&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Extend surveys with third-party widgets&lt;/li&gt;
&lt;li&gt;Can submerge surveys built with SurveyJS with any application&lt;/li&gt;
&lt;li&gt;Ability to build surveys that accompany with brand elements of your website&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-choreographerjs"&gt;
  &lt;/a&gt;
  2. Choreographer-JS:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n36EVfzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268510667/Bfz5HdfAN.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n36EVfzv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268510667/Bfz5HdfAN.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
HTML5 and CSS, web pages can display a wide range of animations. Choreographer-Js is a simple library that allows you to handle CSS animations as well as non-CSS animations.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Package consists of many stock animations&lt;/li&gt;
&lt;li&gt;API reference built-in by the developer&lt;/li&gt;
&lt;li&gt;Extendable by adding custom basis that can be derived from included functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-final-form"&gt;
  &lt;/a&gt;
  3. Final Form:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3jkup4WH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268538798/tE9bVslfm.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3jkup4WH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268538798/tE9bVslfm.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every website requires one form or more. &lt;strong&gt;Final Form&lt;/strong&gt; is the library that creates building beautiful and approachable forms easily. No other library allows such amazing tuning to oversee exactly which form elements get notified of form state changes.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Operates seamlessly with any web framework&lt;/li&gt;
&lt;li&gt;Full-flavoured and extendable implementation&lt;/li&gt;
&lt;li&gt;Self-contained library with no external credence&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-bideojs"&gt;
  &lt;/a&gt;
  4. Bideo-JS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CChjkq4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268604520/IeGjhellV.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CChjkq4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268604520/IeGjhellV.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full-screen videos are the need of every professional site backgrounds, and that’s what Bideo.js is utterly for. This JS library drives it simple and smooth to add a video background that looks awesome on every screen interface.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Along with handling the look and feel, Bideo.js includes an API and plugin system for advanced customization&lt;/li&gt;
&lt;li&gt;Bideo-js supports video playback on desktops as well as mobile devices&lt;/li&gt;
&lt;li&gt;It supports HTML5 video and Media Source Extensions, and other playback techs likewise YouTube and Vimeo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-chartjs"&gt;
  &lt;/a&gt;
  5. Chart.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0oHEayTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268682560/-2DD9UhLT.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0oHEayTv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268682560/-2DD9UhLT.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating responsive dynamic charts for an application form is a time-consuming task and can cause more issues than it solves. In this regard, Chart.js is an open-source library that gives divergent solutions to all of that chart which demands your corresponding application.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Operates flawlessly with all modern browsers&lt;/li&gt;
&lt;li&gt;Extensive and exhaustive documentation available&lt;/li&gt;
&lt;li&gt;Extendable library to create custom charts and complex tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-parsley"&gt;
  &lt;/a&gt;
  6. Parsley
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_46h-hJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268832086/SDQse5idL.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_46h-hJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268832086/SDQse5idL.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Parsely&lt;/strong&gt; is a javascript library that is used to form validations at the front end without service at the backend. This moulds the application more powerful, faster, and easier to use. The library is also easy to use with thoroughgoing documentation.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Integrated intuitive DOM API&lt;/li&gt;
&lt;li&gt;It concentrates on user experience with dynamic form validation&lt;/li&gt;
&lt;li&gt;A large number of authentic built-in endorsement available, often eliminating the need to create custom validators&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-d3-js"&gt;
  &lt;/a&gt;
  7. D3 js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38nwwkiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268881899/EJjp0vvn1.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38nwwkiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622268881899/EJjp0vvn1.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;D3.js&lt;/strong&gt; is an exhaustive library that can be used for the Visualization of data and concisely conveying of data. Data its manipulation and other such wide range of activities are therewith can be done with this. Likewise, It can be used for data analysis, CSS animations, geographical, and data utilities.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Works in combination with almost any framework in any language&lt;/li&gt;
&lt;li&gt;Having API with direct access to DOM&lt;/li&gt;
&lt;li&gt;Canvas, SVG, and HTML used for data visualization&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-voca"&gt;
  &lt;/a&gt;
  8. Voca
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clXctVhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vocajs.com/images/voca-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clXctVhL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://vocajs.com/images/voca-logo.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
JavaScript is fiercely not the easiest language for string manipulation. &lt;strong&gt;The Voca JavaScript string library&lt;/strong&gt; makes string manipulation easy and simple with built-in functions sufficient for most string manipulation works.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Well-documented and fully tested library with long-term support&lt;/li&gt;
&lt;li&gt;Built-in functions to handle, chop, format, and query strings&lt;/li&gt;
&lt;li&gt;Can be deployed with any framework and has no external dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-slick"&gt;
  &lt;/a&gt;
  9. Slick
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jpzuvxzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269176243/ED_mz5j6M.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jpzuvxzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269176243/ED_mz5j6M.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Slick is a library that ensures custom, responsive carousels out of the box. The carousels inside the library can be easily modified. A carousel of images can be used for visual appearances and makes it easier to display many images without cluttering a web page. Building a carousel from scratch that is also responsive is a huge task.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Includes autoplay and visual elements like arrows and dots.&lt;/li&gt;
&lt;li&gt;Desktop mouse dragging, swipe, and infinite looping enabled out of the box&lt;/li&gt;
&lt;li&gt;Responsive carousels that scale with their parent container&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-redux"&gt;
  &lt;/a&gt;
  10. Redux
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fJ9p7vJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://redux.js.org/img/redux-logo-landscape.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fJ9p7vJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://redux.js.org/img/redux-logo-landscape.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Redux&lt;/strong&gt; is commonly used along with JavaScript frameworks like Angular or React. As the size of applications become huge in the production process, the data flouncy becomes a problem. Redux assists you to overcome that issue by helping to maintain a predictable state for the application.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Can be immediately set up within seconds without much hassle&lt;/li&gt;
&lt;li&gt;Developers have provided API support&lt;/li&gt;
&lt;li&gt;Easily customizable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#11-dropzonejs"&gt;
  &lt;/a&gt;
  11. DropzoneJS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fV9TCvY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.dropzonejs.com/images/new-logo.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fV9TCvY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.dropzonejs.com/images/new-logo.svg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
With &lt;strong&gt;DropzoneJS&lt;/strong&gt;, developers can easily create drag-and-drop file upload windows with visual elements. It has the Abilities to present image previews, file previews, and progress animations.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;No external dependencies&lt;/li&gt;
&lt;li&gt;Highly customizable to specific needs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#12-typeaheadjs"&gt;
  &lt;/a&gt;
  12. Typeahead.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNzigxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269228322/DolP36Ffw.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNzigxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269228322/DolP36Ffw.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Typeahead.js&lt;/strong&gt; is an open and autocomplete JavaScript library created and maintained by Twitter. It is to provide auto-complete for search boxes and other text boxes on various websites. It has two components: a suggestion engine and a UI element.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Components of the library can be used separately and with a modular approach&lt;/li&gt;
&lt;li&gt;Separate extensive documentation for both components&lt;/li&gt;
&lt;li&gt;Support across all desktop browsers (not for mobile browsers)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#13-multiplejs"&gt;
  &lt;/a&gt;
  13. Multiple.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IZrI5xkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269308005/XnXV2WjtD.jpeg%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IZrI5xkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269308005/XnXV2WjtD.jpeg%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This JS library can be used to Galvanize the visual appeal of your website. It can share the same background image with various elements of a webpage. It can be used to create impressive backgrounds for web page content.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Easily adjust elements, background, opacity, etc.&lt;/li&gt;
&lt;li&gt;Easy method to update the background image&lt;/li&gt;
&lt;li&gt;A single function call can revert the changes made by multiple.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#14-omniscient"&gt;
  &lt;/a&gt;
  14. Omniscient
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHsAWKfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://omniscientjs.github.io/assets/media/Omniscient_Color-Light.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHsAWKfC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://omniscientjs.github.io/assets/media/Omniscient_Color-Light.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Omniscient&lt;/strong&gt; let programmers to do fast top-down rendering embracing, immutable data, and functional programming.&lt;/p&gt;

&lt;p&gt;Key Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exhaustive documentation for the library&lt;/li&gt;
&lt;li&gt;Easy to use API&lt;/li&gt;
&lt;li&gt;Supports data flow in one direction&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#15-apexcharts"&gt;
  &lt;/a&gt;
  15. ApexCharts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ojo9y759--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269457101/XyM1sb9lw.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ojo9y759--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269457101/XyM1sb9lw.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ApexCharts gives interactive charts feature that can be used with websites running with JavaScript frameworks. Interactive, prepackaged charts with a simple API are provided with the library.&lt;/p&gt;

&lt;p&gt;Key Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wrappers for popular frameworks like React, Vue, Angular&lt;/li&gt;
&lt;li&gt;Extensive documentation and cross-browser support available&lt;/li&gt;
&lt;li&gt;Consistent and easy to use API&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-openzeppelin"&gt;
  &lt;/a&gt;
  16. OpenZeppelin
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S_zNmG6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269544612/u3cay9r_T.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_zNmG6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269544612/u3cay9r_T.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OpenZeppelin is a library to build smart projects with JavaScript. It can be used with Ethereum and other blockchains that have smart contract functionality. It is an open-source project, as most crypto projects are.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Modular approach with simple and security standard&lt;/li&gt;
&lt;li&gt;Can be used to automate blockchain workflows&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#17-instantclick"&gt;
  &lt;/a&gt;
  17. InstantClick
&lt;/h2&gt;

&lt;p&gt;This progressive JavaScript framework is key for speeding up websites. It is also capable of improving the speed to such a degree that navigating the web pages will feel instant.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Accoutrement to adjust parameters&lt;/li&gt;
&lt;li&gt;Preloads webpage in the time a user hangs over a link&lt;/li&gt;
&lt;li&gt;operates seamlessly across all browsers including mobile browsers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#18-premonish"&gt;
  &lt;/a&gt;
  18. Premonish
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEJinodY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269623305/WUSUKdxTq.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEJinodY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269623305/WUSUKdxTq.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
 Premonish is a simple JavaScript library that can forecast what element the user will collaborate with. This can be used to load up the corresponding service at the backend and reducing the time required to serve new content.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Predicts the DOM element user is likely to interact with next&lt;/li&gt;
&lt;li&gt;Information can be used for website enhancements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#19-particlesjs"&gt;
  &lt;/a&gt;
  19. Particles.js
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUVW7de0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269662018/UpSCvXYIF.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUVW7de0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269662018/UpSCvXYIF.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Particles.js is a simple JavaScript library to create moving particles as a background for web pages. The particles interact with the movements and location of the mouse pointer. It is a fun library that can be used to create stunning visuals.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Easily customizable particle size, speed, and other visual features&lt;/li&gt;
&lt;li&gt;Extremely small on resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#20-stretchy"&gt;
  &lt;/a&gt;
  20. Stretchy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TPPrOOP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269729238/o7tHspagh.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TPPrOOP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269729238/o7tHspagh.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Stretchy&lt;/strong&gt; is a simple library that can be used to auto-size input elements on web pages. It is a very small; library at just 1.5 KB when compressed.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Can work alone without any external dependencies&lt;/li&gt;
&lt;li&gt;Able to cover multiple types of the form control&lt;/li&gt;
&lt;li&gt;operates well with HTML and CSS, as it automatically follows placeholder styling&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#21-howlerjs"&gt;
  &lt;/a&gt;
  21. HowlerJS
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--elIdoXvy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269759765/A5Hovuzbz.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--elIdoXvy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269759765/A5Hovuzbz.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Hower JS&lt;/strong&gt; is a library that can be used to detect and work with touch gestures in general, including multi-touch gestures.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Support for touch gestures including tap, double-tap, swipe, rotate, pinch to zoom, etc.&lt;/li&gt;
&lt;li&gt;Can be used from CDN provided by HammerJS&lt;/li&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#22-scrollmagic"&gt;
  &lt;/a&gt;
  22. ScrollMagic
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dI0xtAo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269815757/z-79MkEhp.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dI0xtAo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269815757/z-79MkEhp.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Simple scrolling web pages can be made a UX element to surprise and engage website users. ScrollMagic JS library makes that easy to implement. It can also be used to add parallax effects on websites.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Easy toggle of CSS classes of elements with scroll position&lt;/li&gt;
&lt;li&gt;Provision for adding sticky elements&lt;/li&gt;
&lt;li&gt;Support for responsive web design and compatibility with mobile devices&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#23-discordjs"&gt;
  &lt;/a&gt;
  23. DiscordJS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--31ENlRHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269862473/TU0faqxt5.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--31ENlRHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269862473/TU0faqxt5.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
DiscordJS is the library maintained for those purposes. It can also be used to create bots that can automate and enhance functionalities in discord servers.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;An object-oriented approach to interacting with APIs&lt;/li&gt;
&lt;li&gt;Covers nearly 100% of Discord API capabilities&lt;/li&gt;
&lt;li&gt;Quick updates after Discord introduces new features&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#24-gojs"&gt;
  &lt;/a&gt;
  24. GoJS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--msI7g1Is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269912881/shmAo88tp.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--msI7g1Is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269912881/shmAo88tp.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GoJS provides diagramming tools to create interactive flowcharts, design tools, organizational charts, and other visual elements. It supports animations, and users can create custom animations for different elements.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;A huge collection of included diagrams and tools&lt;/li&gt;
&lt;li&gt;Advanced features for user interactivity such as drag-and-drop, copy-and-paste, in-place text editing, tooltips, context menus, automatic layouts, templates, etc.&lt;/li&gt;
&lt;li&gt;Works with all major JS frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#25-hammerjs"&gt;
  &lt;/a&gt;
  25. &lt;a href="https://hammerjs.github.io/"&gt;HammerJS&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nnmhuu7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269961690/Zd0LLq3rV.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nnmhuu7v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622269961690/Zd0LLq3rV.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Hammer JS&lt;/strong&gt; is a library that can be used to detect and work with touch gestures in general, including multi-touch gestures.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Support for touch gestures including tap, double-tap, swipe, rotate, pinch to zoom, etc.&lt;/li&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Can be used from CDN provided by HammerJS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#26-google-maps-utility-library"&gt;
  &lt;/a&gt;
  26. &lt;a href="https://github.com/googlemaps/v3-utility-library"&gt;Google Maps Utility Library&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Google Maps is vastly used by people for navigation, as well as by developers for utilizing map-based functionalities to websites and apps. Google Maps offers excellent API support.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Extensive documentation&lt;/li&gt;
&lt;li&gt;Support for new versions of Google maps API as they are released:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#27-gsap"&gt;
  &lt;/a&gt;
  27. GSAP
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lvu-kKbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622270076416/QGG7WKspt7.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lvu-kKbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622270076416/QGG7WKspt7.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
GSAP is a library for creating amazing modern, polished animations for website interactions. This library supports all major JavaScript frameworks, JS elements, and even other JS libraries.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;high-speed property manipulator, updating values with extreme accuracy&lt;/li&gt;
&lt;li&gt;Flexible and independent framework with zero dependencies&lt;/li&gt;
&lt;li&gt;huge amount of plugins and easing functions for advanced effects; easily create custom functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#28-typedjs"&gt;
  &lt;/a&gt;
  28. &lt;a href="https://mattboldt.com/demos/typed-js/"&gt;TypedJS&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cHZo11ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mattboldt/typed.js/master/logo-cropped.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHZo11ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mattboldt/typed.js/master/logo-cropped.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
This JS library provides typing animations that can be added to any JS application. It provides beautiful animations that display texts as being typed one letter after the other. It can be customized to the developer’s requirements.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Strings can be HTML5 elements instead of using arrays to be manipulated&lt;/li&gt;
&lt;li&gt;Supports animation effects like type pausing, smart backspacing, bulk typing, etc.&lt;/li&gt;
&lt;li&gt;Customizable&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#29-mathjs"&gt;
  &lt;/a&gt;
  29. &lt;a href="https://mathjs.org/"&gt;MathJS&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mjioB1pR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622270103337/4KE4PG1b3.png%3Fauto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mjioB1pR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622270103337/4KE4PG1b3.png%3Fauto%3Dcompress" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Math.js is a professional library for JavaScript. It has all the functions and capabilities required for a math library. With this library, complex mathematical problems can be run at the browser without straining backend servers.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Runs on any JavaScript engine&lt;/li&gt;
&lt;li&gt;Has flexible expression parser&lt;/li&gt;
&lt;li&gt;A large set of built-in functions that can be used to create custom functions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#30-js-encrypt"&gt;
  &lt;/a&gt;
  30. &lt;a href="http://travistidwell.com/jsencrypt/"&gt;JS Encrypt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This JS library provides easy to implement RSA JavaScript encryption for applications. It is a wrapper around an existing encryption library that makes it user friendly. It provides parsing of actual private and public key pairs generated with OpenSSL.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Easy to implement and easy to use&lt;/li&gt;
&lt;li&gt;Tried and tested encryption library as the base for the wrapper&lt;/li&gt;
&lt;li&gt;Parses private and public OpenSSL-generated key pairs&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As a developer, having the right chosen JavaScript libraries is very important. It will make you more productive and will make development much easier and faster. In the end, it is up to you which library to prefer based on your requirements. These are 30 JavaScript libraries that you can try and start using in your projects today.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to build a real-world application with React and Node (Foal)</title>
      <author>Loïc Poullain</author>
      <pubDate>Mon, 31 May 2021 05:57:01 +0000</pubDate>
      <link>https://dev.to/loicpoullain/how-to-build-a-real-world-application-with-react-and-node-foal-4dc3</link>
      <guid>https://dev.to/loicpoullain/how-to-build-a-real-world-application-with-react-and-node-foal-4dc3</guid>
      <description>&lt;p&gt;This tutorial shows how to build a real-world application with React and Foal. It assumes that you have already read the guide &lt;em&gt;&lt;a href="https://foalts.org/docs/tutorials/simple-todo-list/1-installation"&gt;How to build a Simple To-Do List&lt;/a&gt;&lt;/em&gt; and that you have a basic knowledge of React and Node.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;establish a connection with MySQL or Postgres,&lt;/li&gt;
&lt;li&gt;provide credentials to the application in a secure way,&lt;/li&gt;
&lt;li&gt;create models with many-to-one relations,&lt;/li&gt;
&lt;li&gt;use a query builder,&lt;/li&gt;
&lt;li&gt;generate an interface to test your API (Swagger UI),&lt;/li&gt;
&lt;li&gt;fix same-origin policy errors,&lt;/li&gt;
&lt;li&gt;allow users to log in and register with an email and a password,&lt;/li&gt;
&lt;li&gt;authenticate users on the frontend and the backend,&lt;/li&gt;
&lt;li&gt;manage access control,&lt;/li&gt;
&lt;li&gt;protect against CSRF attacks,&lt;/li&gt;
&lt;li&gt;upload and save files,&lt;/li&gt;
&lt;li&gt;allow users to connect with a social provider (Google),&lt;/li&gt;
&lt;li&gt;and build the application for production.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For the sake of simplicity, the front-end application will not use a state management library (such as &lt;a href="https://redux.js.org/"&gt;redux&lt;/a&gt;). But you can of course add one if you wish. The logic to follow will remain mainly the same.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#application-overview"&gt;
  &lt;/a&gt;
  Application Overview
&lt;/h2&gt;

&lt;p&gt;The application you will create is a social website where users can share interesting links to tutorials. All posts will be public, so no authentication will be required to view them. Publishing a post, on the other hand, will require the creation of an account.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Feed page&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJj3c5EQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/feed-cafaeeea52a28612177a5a70e6c1cf12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJj3c5EQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/feed-cafaeeea52a28612177a5a70e6c1cf12.png" alt="Feed page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Profile page&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9fSv-2sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/profile-d12409506e2332f8a2ef8391801ef85d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fSv-2sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/profile-d12409506e2332f8a2ef8391801ef85d.png" alt="Profile page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Registration and login pages&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqFTd8ca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/sign-up-and-log-in-ea14815a2f012118eef7e058bd93c500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqFTd8ca--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://foalts.org/assets/images/sign-up-and-log-in-ea14815a2f012118eef7e058bd93c500.png" alt="Registration and login pages"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get Started
&lt;/h2&gt;

&lt;p&gt;Let's get started. First of all, create a new directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;foal-react-tuto
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generate the backend appplication.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;foal-react-tuto
npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @foal/cli
foal createapp backend-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then start the development server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;backend-app
npm run develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to &lt;a href="http://localhost:3001"&gt;http://localhost:3001&lt;/a&gt; in your browser. You should see the &lt;em&gt;Welcome on board&lt;/em&gt; message.&lt;/p&gt;

&lt;p&gt;The rest of the tutorial is &lt;a href="https://foalts.org/docs/tutorials/real-world-example-with-react/2-database-set-up"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>13 Interactive Animated Backgrounds for your Website using Vanta.js</title>
      <author>Mehul Kumar Nirala</author>
      <pubDate>Mon, 31 May 2021 05:37:50 +0000</pubDate>
      <link>https://dev.to/mulx10/13-interactive-animated-backgrounds-for-your-website-using-vanta-js-2k32</link>
      <guid>https://dev.to/mulx10/13-interactive-animated-backgrounds-for-your-website-using-vanta-js-2k32</guid>
      <description>&lt;p&gt;Adding interactive object animations to a website creates a delightful experience for users besides making it more appealing. Adding one to the website might be much easier than you think.&lt;br&gt;
We will look at the Vanta.js library that will help us create an animated background for various elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rpm5i2vq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzszorn7hxyvther2lea.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rpm5i2vq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzszorn7hxyvther2lea.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-vantajs"&gt;
  &lt;/a&gt;
  What is Vanta.js?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"Animated website background in few lines of code" - is an apt description of the library.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-should-we-use-vantajs"&gt;
  &lt;/a&gt;
  Why should we use Vanta.js?
&lt;/h2&gt;

&lt;p&gt;Vanta.js works similarly to plug-and-play devices. Injecting it into the website is just a few lines away. It also supports mouse controls, gyro controls (for mobile devices) &amp;amp; touch controls. Added to that it provides 3 different background effects to choose from.&lt;br&gt;
Lets' start building up a website injected with the vanta.js effect.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the%C2%A0project"&gt;
  &lt;/a&gt;
  Setting Up the project.
&lt;/h2&gt;

&lt;p&gt;Since we are starting from scratch we need to create an empty HTML template and save it as index.html. This step is optional if we use an already existing project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
 &amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
       &amp;lt;meta charset="utf-8"&amp;gt;
       &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
       &amp;lt;link href="style.css" rel="stylesheet" /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
       &amp;lt;script&amp;gt; &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would need to include the assets needed to run the Vanta.js background. Vanta.js supports &lt;a href="https://threejs.org/"&gt;THREE.js&lt;/a&gt; as well as &lt;a href="https://p5js.org/"&gt;p5.js&lt;/a&gt;. We will proceed with THREE.js. Include the script in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r123/three.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will create a file named &lt;code&gt;style.css&lt;/code&gt; and add the following stuff. This is just to make the scratch website look a little cooler. However, this is purely optional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// styles.css
.container {
 width: 100%;
 height: 100vh;
 text-align: center;
 display: flex;
 flex-direction: column;
 justify-content: center;
 align-items: center;
}
.container h2 {
 font-size: 4em;
 font-family: "Montserrat", sans-serif;
 color: #FFFFFF;
 text-shadow: 1px 1px #D37E86;
}
.container p {
 font-size: 1.5em;
 font-family: "Nunito Sans", sans-serif;
 color: #FFFFFF;
 text-shadow: 1px 1px #070707;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;We first create a div element inside the body that will be used by Vanta.js to render the background. We assign it a unique id of "vantajs-bg", this will help us to refer to the element in javascript.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div id="vantajs-bg"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We change the CSS properties of div to cover the entire screen. The z-index is set to -1 so that the background does not render over the web page elements. The height and width are set to cover the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#vantajs-bg{
 position:absolute;
 z-index:-1;
 width:100%;
 height: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vanta.js has 13 effects in its library. To start we will look at the HALO effect. To add the HALO effect, all we need to add are two script tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.halo.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
VANTA.HALO({
 el: document.getElementById("vantajs-bg"), // change the element here.
 mouseControls: true,
 touchControls: true,
 gyroControls: true,
 });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first script loads the HALO effect from the Vanta library, and the second initializes the object and injects it into the element with id vantajs-bg. Here we go.&lt;br&gt;
The HALO effect.The entire index.html looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
       &amp;lt;meta charset="utf-8"&amp;gt;
       &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
       &amp;lt;link href="style.css" rel="stylesheet" /&amp;gt;
       &amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r123/three.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
       &amp;lt;script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.halo.min.js"&amp;gt;&amp;lt;/script&amp;gt;
       &amp;lt;script&amp;gt;
          VANTA.HALO({
          el: document.getElementById("vantajs-bg"), // change the element here.
          mouseControls: true,
          touchControls: true,
          gyroControls: true,
          });
       &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
       &amp;lt;script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.halo.min.js"&amp;gt;&amp;lt;/script&amp;gt;
       &amp;lt;script&amp;gt;
          var effect = VANTA.HALO({
            el: document.getElementById("vantajs-bg"), // change the element here.
            mouseControls: true,
            touchControls: true,
            gyroControls: true,
          });
       &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
 &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The parameters of the effect can be tweaked according to the needs. For example, if the device supports gyro controls, it can be turned on, etc. The CSS properties like background color can also be changed as per requirements (More on this later).&lt;/p&gt;

&lt;p&gt;A codepen demo is also linked here to demonstrate other effects available in Vanta.js.&lt;/p&gt;

&lt;p&gt;See the Pen &lt;a href="https://codepen.io/MuLx10/pen/NWppdLj"&gt;VantaJS Interactive BG&lt;/a&gt; by Mehul Kumar Nirala&lt;br&gt;
  (&lt;a href="https://codepen.io/MuLx10"&gt;@MuLx10&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;p&gt;As discussed before the properties of the effects can be charged as per our requirement. The rise of the dark lord (I mean theme 😜) has created a need to incorporate theme toggle. We can tweak the parameters of Vanta.js to incorporate the same. We will set a light background to update the animation. Note the color values are specified in hex color codes however the format is different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Later, when you want to update an animation in progress with new options
effect.setOptions({
  backgroundColor: 0x6274e8
})

// Later, if the container changes size and you want to force Vanta to redraw at the new canvas size
effect.resize()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;setOptions&lt;/code&gt; method can be slid inside a button &lt;code&gt;onClick&lt;/code&gt; event to trigger the Vanta.js effect background change.&lt;/p&gt;

&lt;p&gt;Thank you for reading 😄.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://medium.com/@mulx10"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9daYL01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/medium.svg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://codepen.io/MuLx10/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myiCxFTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/codepen.svg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://linkedin.com/in/mulx10/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iXG2hkk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.jsdelivr.net/npm/simple-icons%403.0.1/icons/linkedin.svg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>animation</category>
      <category>webdev</category>
      <category>webgl</category>
      <category>background</category>
    </item>
    <item>
      <title>Find Open Source Project to Contribute</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Mon, 31 May 2021 05:18:00 +0000</pubDate>
      <link>https://dev.to/basecampxd/find-open-source-project-to-contribute-m4o</link>
      <guid>https://dev.to/basecampxd/find-open-source-project-to-contribute-m4o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;One of the main hectic things in open source is to find a good repository to contribute especially issues that fall under your skill sets. It becomes more painful with beginners as I went through the process of finding projects to contribute.&lt;/p&gt;

&lt;p&gt;To help you in finding good issues to solve on GitHub, we are going to look into websites and tips.  It will help you in finding good issues according to your skillset.&lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#github-issue-tab"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/issues"&gt;GitHub Issue Tab&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;GitHub Issue tab is not only for tracking your issue that you are assigned but also for finding issues. You can search issue through various term few prominent among them are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;is&lt;/strong&gt;: You can filtered issue on the basis of state i.e., open/closed and issues/pull request&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;is&lt;/span&gt;&lt;span class="nl"&gt;:open&lt;/span&gt; &lt;span class="kd"&gt;is&lt;/span&gt;&lt;span class="nl"&gt;:issue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;label&lt;/strong&gt;: You can search issue on the basis of label that are given i.e., help wanted/fronted/good first issue/etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="nb"&gt;label&lt;/span&gt;:&lt;span class="s2"&gt;"good first issue"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;language&lt;/strong&gt;: Filtered the issue according to your preferred language i.e., javascript, java, dart&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;language&lt;/span&gt;&lt;span class="nl"&gt;:java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All together will look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;is&lt;/span&gt;&lt;span class="nl"&gt;:open&lt;/span&gt; &lt;span class="kd"&gt;is&lt;/span&gt;&lt;span class="nl"&gt;:issue&lt;/span&gt; &lt;span class="nb"&gt;label&lt;/span&gt;:&lt;span class="s2"&gt;"good first issue"&lt;/span&gt; &lt;span class="kd"&gt;language&lt;/span&gt;&lt;span class="nl"&gt;:java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---UoA61sF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo7mpgnmw34rjc8rnqtd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---UoA61sF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo7mpgnmw34rjc8rnqtd.PNG" alt="Issue search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To know more about searching issue by different term click &lt;a href="https://docs.github.com/en/github/searching-for-information-on-github/searching-on-github/searching-issues-and-pull-requests#search-by-label"&gt;here&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#good-first-issue"&gt;
  &lt;/a&gt;
  &lt;a href="https://goodfirstissue.dev/"&gt;Good First Issue&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;They have a curated list of the popular open-source project for beginners to make their first contribution to open source. The list can be filtered through different languages. They have 20+ language support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLsdV2f6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qs8gyr0xdoxf7u8sgeh6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLsdV2f6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qs8gyr0xdoxf7u8sgeh6.png" alt="Good First Issue_ Issues for your first open-source contribution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the description, language, stars, and last activity of every repository.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#code-triage"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codetriage.com/"&gt;Code Triage&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Code triage delivers you best open issue to your inbox according to your preference. you can do it by clicking on the triage issue in any repository. They also have a great list of repositories for beginners to contribute. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ElYgckUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1po30k44o8tioowurc9u.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ElYgckUW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1po30k44o8tioowurc9u.PNG" alt="Code Triage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The list can be filtered through language. It has 90+ language support. It also shows open issues and descriptions of the repository.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#awesome-open-source"&gt;
  &lt;/a&gt;
  &lt;a href="https://awesomeopensource.com/"&gt;Awesome Open Source&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This website is recommended by my friend &lt;a href="https://dev.to/mindninjax"&gt;Rishabh Singh&lt;/a&gt;. Awesome Open Source will help you in searching, browsing, and combining 7k topics across 59 categories and 371,159 projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPYDC5ru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytbu91vrmfgc1rgrljg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPYDC5ru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aytbu91vrmfgc1rgrljg.png" alt="Find Open Source By Searching, Browsing and Combining 7,000 Topics"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;They have categorized every project according to their area of implementation such as security, networking, framework, graphics, etc.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  🔗 Connect with me:
&lt;/h1&gt;

&lt;p&gt;Currently, on Twitter, I am posting about "How to write and grow blog?". If you want to write a more effective blog with tips, consider the follow button on Twitter.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;Resources to make beautiful header images for your blog post🎁🚀&lt;br&gt;&lt;br&gt;A Thread🧵&lt;/p&gt;— Suraj Vishwakarma (&lt;a href="https://twitter.com/surajondev/"&gt;@surajondev&lt;/a&gt;) &lt;a href="https://twitter.com/surajondev/status/1398876227973222401?ref_src=twsrc%5Etfw"&gt;May 30, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;&lt;a href="https://twitter.com/surajondev"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;I hope this will help you in finding a good open source project according to your preference for contribution. &lt;/p&gt;

&lt;p&gt;Thank you for reading the blog post. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>watercooler</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Berry Pro React Admin Released</title>
      <author>Rakesh S Nakrani</author>
      <pubDate>Mon, 31 May 2021 05:11:30 +0000</pubDate>
      <link>https://dev.to/rakesh_nakrani/berry-react-pro-released-3lj1</link>
      <guid>https://dev.to/rakesh_nakrani/berry-react-pro-released-3lj1</guid>
      <description>&lt;p&gt;Finally, The day is here. Berry Pro is released and available to purchase from Material-UI &lt;a href="https://material-ui.com/store/items/berry-react-material-admin/"&gt;store&lt;/a&gt;. Berry is a beautiful react admin template made using Material-UI v5 component library. You can build anything from a User Management panel to any complex backend project with power of fully structured code style and minimal User Interface.&lt;/p&gt;

&lt;p&gt;Berry is meant to be built for faster development with flexibility. In terms of development &amp;amp; easing work flow, we’ve made the standard folder structure and prettier code style that cut down your development time and money.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To know more about Berry here is our post - &lt;a href="https://dev.to/rakesh_nakrani/all-you-need-to-know-about-berry-react-li6"&gt;Everything About Berry&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, I do focusing more in depth about Berry's concern UI framework, why you choose Berry over other and what challenges we face while working on Berry project.&lt;br&gt;
Table of content&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Why Material-UI?&lt;/li&gt;
&lt;li&gt;What makes Berry different?&lt;/li&gt;
&lt;li&gt;While working on the Berry Project.&lt;/li&gt;
&lt;li&gt;Future plans &amp;amp; RoadMap&lt;/li&gt;
&lt;li&gt;Important links&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#why-materialui-a-preferred-choice-for-berry"&gt;
  &lt;/a&gt;
  Why Material-UI a preferred choice for Berry?
&lt;/h4&gt;

&lt;p&gt;When you think about Reactjs UI library, your might have 3 top choices for choosing reliable component library i.e. React Bootstrap, Ant design, and &lt;a href="https://material-ui.com/"&gt;Material-UI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, Here we detailed the Material-UI’s best features &lt;a href="https://dev.to/kylehunter/6-six-reasons-to-use-material-ui-for-react-1anh"&gt;compared to others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Strictly follow Material design guidelines.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It provides utility components, hooks, helpers and the theme customization engine.&lt;/li&gt;
&lt;li&gt;Designed for server-side rendering.&lt;/li&gt;
&lt;li&gt;CSS in JS solution combined with styled-components.&lt;/li&gt;
&lt;li&gt;Aesthetically brilliant with its animations and design styles.&lt;/li&gt;
&lt;li&gt;Each component functions independently.&lt;/li&gt;
&lt;li&gt;Extensive support for issues and bugs.&lt;/li&gt;
&lt;li&gt;Regularly updated library.&lt;/li&gt;
&lt;li&gt;Useful Documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In terms of appearance, Material-UI is a lot more dynamic and appealing when compared to React Bootstrap’s standard design.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-makes-berry-unique-in-crowd"&gt;
  &lt;/a&gt;
  What makes Berry unique in Crowd?
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQPKMo_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1occxodqlmtq7vb6az4s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQPKMo_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1occxodqlmtq7vb6az4s.jpg" alt="Berry react admin template"&gt;&lt;/a&gt;&lt;br&gt;
Firstly, Berry’s refreshed design makes a significant difference from others. Secondly, Berry’s optimized code standard &amp;amp; easy to use folder structure opens the gate of easing development.&lt;/p&gt;

&lt;p&gt;For that we have made the Berry in a way that saves your thousands of dollars on development.&lt;/p&gt;

&lt;p&gt;Reasons to choose Berry&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code Performance&lt;/li&gt;
&lt;li&gt;Custom Components&lt;/li&gt;
&lt;li&gt;Over 90+ pages to choose on.&lt;/li&gt;
&lt;li&gt;Highly responsive and fully tested design.&lt;/li&gt;
&lt;li&gt;Video Tutorials and Easy Documentation Guide.&lt;/li&gt;
&lt;li&gt;Theme variants with predefined customization options like Font Family selection, Border Radius settings, and dark - light options.&lt;/li&gt;
&lt;li&gt;5+ fully configured Applications.&lt;/li&gt;
&lt;li&gt;2+ conceptual Dashboards.&lt;/li&gt;
&lt;li&gt;And lots more features.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#while-making-berry"&gt;
  &lt;/a&gt;
  While making Berry
&lt;/h4&gt;

&lt;p&gt;Before making Berry - we have made a pre-plan that makes sense for our final product. We are continuously on track to overcome the pain points of our users. For that we have made lots of iteration processes with agile methodology.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#design-phase"&gt;
  &lt;/a&gt;
  Design Phase
&lt;/h5&gt;

&lt;p&gt;Design is the most crucial part of Berry. You just “wow” when you see the Berry for the first time. We know it better that the user's first interaction is Design instead of looking further into code.  So we got our first pain point - “The Design” or you may say “User Interface”.  Now it's time to re-think upon our past experience &amp;amp; make some fresh interface which is out of the box in the current market.&lt;/p&gt;

&lt;p&gt;In this phase, &lt;a href="https://twitter.com/olivtassinari"&gt;Mr. Olivier&lt;/a&gt; (Co-founder of Material-UI) helps us a lot to finalize the overall design aesthetics of Berry. We are also very much thankful to Mr. Olivier for supporting us in the whole project.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#development-phase"&gt;
  &lt;/a&gt;
  Development Phase
&lt;/h5&gt;

&lt;p&gt;It’s magic time to turn design into reality, Skin needs a hard skeleton for standing in a crowd. For that Material-UI serves the role of Skeleton. It has everything you demand for your next backend project. From UI components to design engine Material-UI is out of the box for faster development.&lt;br&gt;
Firstly, Berry is develop in Material-UI v4 version and while working version 5 is out with drastic changes in Performance. We have decided to migrate v4 to v5. Version 5 is our best decision to migrate Berry into it.&lt;/p&gt;

&lt;p&gt;It takes us almost 3 months of time to develop Berry from scratch. Each line of code is written carefully with proper style &amp;amp; formatting.&lt;/p&gt;

&lt;p&gt;You surely love the well commented code and easy navigation flow while using Berry for your next project.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#testing-phase"&gt;
  &lt;/a&gt;
  Testing Phase
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B9tkptG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrhe88on3vnga5095lej.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B9tkptG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yrhe88on3vnga5095lej.jpg" alt="berry react testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Making a Dashboard Template is a big thing” - You need to take care of each aspect of Design rendering, Code Performance, Speed, Validation, Device &amp;amp; Browser compatibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For Berry - Our past experience plays a significant role in the Testing Phase. We have a huge portfolio in &lt;a href="https://codedthemes.com/item/category/templates/admin-templates/"&gt;Admin Templates&lt;/a&gt; and know the process for the best practices for smooth testing flow.&lt;/p&gt;

&lt;p&gt;Our main challenge is for Dark layout and Responsive testing in modern devices.&lt;/p&gt;

&lt;p&gt;Each of our member from our team really worked hard to make Berry a high performance product. For responsive tests we have used the real devices that cover iPad, iPhone, iMac &amp;amp; Android devices. So you get a smooth interface in every corner of your project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  RoadMap
&lt;/h4&gt;

&lt;p&gt;Considering Berry as our long-run project - we do continuous work on the following activities for future plans.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Knowledge Base for more easing help&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtube.com/playlist?list=PLknn3jaIuWiDKKEy3EO-p5-MP1nSOgUr1"&gt;Video tutorial series&lt;/a&gt; - Guided Installation videos, detailed setup process that makes less burden to work with Berry&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codedthemes.gitbook.io/berry/roadmap"&gt;Roadmap&lt;/a&gt; for future releases&lt;/li&gt;
&lt;li&gt;Focus on detailing the &lt;a href="https://codedthemes.gitbook.io/berry/"&gt;Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#important-links"&gt;
  &lt;/a&gt;
  Important Links
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.producthunt.com/posts/berry-react-admin"&gt;Product Hunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Live Preview - &lt;a href="https://berrydashboard.io/"&gt;https://berrydashboard.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get Berry - &lt;a href="https://material-ui.com/store/items/berry-react-material-admin/"&gt;https://material-ui.com/store/items/berry-react-material-admin/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free version - &lt;a href="https://github.com/codedthemes/berry-free-react-admin-template/"&gt;https://github.com/codedthemes/berry-free-react-admin-template/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Is Confusion Matrix really Confusing?</title>
      <author>Kiran U Kamath</author>
      <pubDate>Mon, 31 May 2021 05:05:59 +0000</pubDate>
      <link>https://dev.to/kirankamatmgm/is-confusion-matrix-really-confusing-45dc</link>
      <guid>https://dev.to/kirankamatmgm/is-confusion-matrix-really-confusing-45dc</guid>
      <description>&lt;p&gt;After reading this blog, I am sure you will not be confused with the confusion matrix. &lt;/p&gt;

&lt;p&gt;Let's get started. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;confusion matrix&lt;/strong&gt; is the table that is used to describe the performance of the model.&lt;/p&gt;

&lt;p&gt;We can use accuracy as a metric to analyze the performance of the model, then why confusion matrix???&lt;br&gt;&lt;br&gt;
What is the need for Confusion matrix???&lt;/p&gt;

&lt;p&gt;So to understand this let us consider an &lt;strong&gt;example&lt;/strong&gt; of the cancer prediction model.&lt;br&gt;&lt;br&gt;
Since this is a binary classification model its job is to detect cancerous patients based on some features. Considering that only a few, get cancer out of millions of population we consider only 1% of the data provided has cancer positive.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Having cancer is labeled as 1 and not cancer labeled as 0,&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
An interesting thing to note here is if a system gives the prediction as all 0’s, even then the prediction accuracy will be 99%. It is similar to writing print(0) in model output. This will have an accuracy of 99%.&lt;br&gt;&lt;br&gt;
But this is not correct right??&lt;/p&gt;

&lt;p&gt;Now that you know what is the problem and the need for a new metric to help in this situation, let us see how the confusion matrix solves this problem.&lt;/p&gt;

&lt;p&gt;Let us consider an example with a classification dataset having 1000 data points. &lt;/p&gt;

&lt;p&gt;We get the below confusion matrix:&lt;br&gt;&lt;br&gt;
There will be two classes 1 and 0.&lt;br&gt;&lt;br&gt;
1 would mean the person has cancer, and 0 would mean they don't have cancer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vDDR3H5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622345479330/UIbruZuI9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vDDR3H5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622345479330/UIbruZuI9.jpeg" alt="IMG_20210530_085941.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By seeing this table we have 4 different combinations of predicted and actual values.&lt;br&gt;
Let us consider predicted values as Positive and Negative and actual values as True and False.&lt;/p&gt;

&lt;p&gt;Just hold on,,, this is easy and you will understand....&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;True Positive&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
Interpretation: Model predicted positive and it’s true.&lt;br&gt;&lt;br&gt;
Example understanding: The model predicted that a person has cancer and a person actually has it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;True Negative&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
Interpretation: Model predicted negative and it’s true.&lt;br&gt;&lt;br&gt;
Example understanding: The model predicted that a person does not have cancer and he actually doesn't have cancer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;False Positive&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
Interpretation: Model predicted positive and it’s false.&lt;br&gt;&lt;br&gt;
Example understanding: The model predicted that a person has cancer but he actually doesn't have cancer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;False Negative&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
Interpretation: Model predicted negative and it’s false.&lt;br&gt;&lt;br&gt;
Example understanding: The model predicted that a person does not have cancer and person actually has cancer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Precision&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
Out of all the positive classes we have predicted correctly, how many are actually positive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ThVql5ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622334721927/DhF2NBE0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ThVql5ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622334721927/DhF2NBE0g.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recall&lt;/strong&gt;:&lt;br&gt;&lt;br&gt;
Out of all the positive classes, how much we predicted correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3G6eVif6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622334857706/WQxDBv2UZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3G6eVif6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622334857706/WQxDBv2UZ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CGOuEDg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622334167725/PfpXzVcsM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CGOuEDg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622334167725/PfpXzVcsM.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Image credit: Wikipedia&lt;/p&gt;

&lt;p&gt;Calculating precision and recall for the above table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CeK92-mb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622342128850/VQYydB3C5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CeK92-mb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622342128850/VQYydB3C5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's compare this with accuracy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7P8l6hqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622342164674/itD37EtZi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7P8l6hqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622342164674/itD37EtZi.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_U5OQwUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622342176939/GyhuZxGqu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_U5OQwUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622342176939/GyhuZxGqu.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The model got an accuracy of 96% but the precision of 0.5 and recall of 0.75&lt;br&gt;&lt;br&gt;
which means that 50% percent of the correctly predicted cases turned out to be cancer cases. Whereas 75% of the cancer positives were successfully predicted by our model.&lt;/p&gt;

&lt;p&gt;Consider an example where prediction is replaced by print(0). so that we get 0 every time. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Actual y=0&lt;/th&gt;
&lt;th&gt;Actual y=1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Predicted y = 0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;914&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Predicted y = 1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Here accuracy will be 91.4% but what happens to Precision and recall??&lt;br&gt;&lt;br&gt;
Precision becomes 0 since TP is 0.&lt;br&gt;&lt;br&gt;
Recall becomes 0 since TP is 0.&lt;br&gt;&lt;br&gt;
This is a classic example to understand Precision and Recall.&lt;/p&gt;

&lt;p&gt;So now you understand why accuracy is not so useful for imbalanced dataset and how Precision and Recall plays a key role.&lt;/p&gt;

&lt;p&gt;One important thing is to understand is, when to use Precision and when to use Recall??&lt;/p&gt;

&lt;p&gt;Precision is a useful metric where False Positive is of greater importance than False Negatives.&lt;br&gt;&lt;br&gt;
For example, In recommendation systems like Youtube, Google this is an important metric, where the wrong recommendations may cause users to leave the platform.&lt;/p&gt;

&lt;p&gt;Recall is a useful metric where False Negative is of greater importance than False Positive. For example, In the medical field, detecting patients without a disease positive can be tolerated to an extent but patients with disease should always be predicted.&lt;/p&gt;

&lt;p&gt;So what is the case when we are not sure whether to use Precision or Recall??&lt;br&gt;&lt;br&gt;
or what to do when one of the two is high, whether the model is good???&lt;/p&gt;

&lt;p&gt;To answer this let us see what is F1 score. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;F1-score&lt;/strong&gt; is a harmonic mean of Precision and Recall, and it is a high value when Precision is equal to Recall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not normal arithmetic mean instead of harmonic mean??&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Because arithmetic mean gives high value when one of the two is high value but harmonic mean will be high only when both are almost equal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUi_RECV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622343891175/QMs195OjA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUi_RECV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622343891175/QMs195OjA.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So from our example, the F1 score becomes&lt;br&gt;&lt;br&gt;
F1 = 2TP / (2TP + FP + FN) = 2*30 / (2*30 + 30 + 10) = 0.6&lt;/p&gt;

&lt;p&gt;I believe after reading this Confusion matrix is not so confusing anymore! &lt;/p&gt;

&lt;p&gt;Hope you learned something new here and don't forget to comment below your thoughts. Thanks for reading!&lt;br&gt;&lt;br&gt;
Keep learning, Keep Growing.&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>How do you store your blog posts ideas?</title>
      <author>Siddharth</author>
      <pubDate>Mon, 31 May 2021 04:12:12 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/how-do-you-store-your-blog-posts-ideas-nn8</link>
      <guid>https://dev.to/siddharthshyniben/how-do-you-store-your-blog-posts-ideas-nn8</guid>
      <description>&lt;p&gt;Recently, I discovered a huge number of blog post ideas scattered all over my todo list, my notes app, and on paper.&lt;/p&gt;

&lt;p&gt;Since I rarely check these apps, I took all of my ideas and turned them into draft blog posts.&lt;/p&gt;

&lt;p&gt;I just wanna know, how do you store your ideas?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Using Ansible</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:54:46 +0000</pubDate>
      <link>https://dev.to/sbalasa/using-ansible-amf</link>
      <guid>https://dev.to/sbalasa/using-ansible-amf</guid>
      <description>&lt;p&gt;-&amp;gt; Command to validate Ansible playbook syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook &amp;lt;playbook.yml&amp;gt; --syntax-check
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Sample playbook to run command in localhost:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---

- name:Sample Ansible playbook 
  hosts: 127.0.0.1
  connection: local

  tasks:
    - name: Display hostname
      command: hostname
      register: out

    - debug: var=out.stdout_lines
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Run a playbook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ansible-playbook &amp;lt;playbook.yml&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Run multiple commands using playbook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;---

- name: Run multiple commands
  hosts: 127.0.0.1
  connection: local

  vars:
    unix_command: ls

  tasks:
    - name: Display name of the host
      command: hostname
      register: task1

    - name: Execute {{ unix_command }}
      command: {{ unix_command }}
      register: task2

    - debug: var=task1.stdout_lines
    - debug: var=task2.stdout_lines
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ansible</category>
    </item>
    <item>
      <title>Using Redis in iPython</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:52:19 +0000</pubDate>
      <link>https://dev.to/sbalasa/using-redis-in-ipython-1fph</link>
      <guid>https://dev.to/sbalasa/using-redis-in-ipython-1fph</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;In [1]: import redis

In [2]: r = redis.Redis(host='localhost', port=6379, db=0)

In [3]: re = [
   ...:         {
   ...:             "cpu_util": "18",
   ...:             "mem_size": 4194303.9990234375,
   ...:             "mem_util": 0.0,
   ...:             "model": None,
   ...:             "re_temp": None,
   ...:             "reboot_reason": None,
   ...:             "role": "master",
   ...:             "serial":None,
   ...:             "slot": "0",
   ...:             "state": "OK",
   ...:             "status": 0,
   ...:             "id": "306f2fd7-229f-4aa8-b2c0-e420c85dcc3a",
   ...:             "cpu_temp": "",
   ...:             "cpu_temp_dgr": "",
   ...:             "load": 0,
   ...:             "re_temp_dgr": "",
   ...:             "role_priority": "",
   ...:             "up_datetime": "",
   ...:             "up_datetime_sec": "",
   ...:             "uptime": ""
   ...:         }
   ...:     ]

In [4]: re
Out[4]:
[{'cpu_util': '18',
  'mem_size': 4194303.9990234375,
  'mem_util': 0.0,
  'model': None,
  're_temp': None,
  'reboot_reason': None,
  'role': 'master',
  'serial': None,
  'slot': '0',
  'state': 'OK',
  'status': 0,
  'id': '306f2fd7-229f-4aa8-b2c0-e420c85dcc3a',
  'cpu_temp': '',
  'cpu_temp_dgr': '',
  'load': 0,
  're_temp_dgr': '',
  'role_priority': '',
  'up_datetime': '',
  'up_datetime_sec': '',
  'uptime': ''}]

In [5]: hostname = 'at-vie05d-rt1'

In [6]: hostname
Out[6]: 'at-vie05d-rt1'

In [7]: r.hset(f'router:{hostname}', 're', str(re))
Out[7]: 1

In [8]: v = r.hget(f'router:{hostname}', 're')

In [9]: import yaml

In [10]: re_from_redis = yaml.load(v)

In [11]: re_from_redis
Out[11]:
[{'cpu_util': '18',
  'mem_size': 4194303.9990234375,
  'mem_util': 0.0,
  'model': 'None',
  're_temp': 'None',
  'reboot_reason': 'None',
  'role': 'master',
  'serial': 'None',
  'slot': '0',
  'state': 'OK',
  'status': 0,
  'id': '306f2fd7-229f-4aa8-b2c0-e420c85dcc3a',
  'cpu_temp': '',
  'cpu_temp_dgr': '',
  'load': 0,
  're_temp_dgr': '',
  'role_priority': '',
  'up_datetime': '',
  'up_datetime_sec': '',
  'uptime': ''}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;In [43]: redis_client.hmset(f'router:{hostname}', {'data': str(data)})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;-&amp;gt; Redis on windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;winpty docker exec -it 8e76eea66688 redis-cli GET cnt:iface:72e76f51-1d54-4742-9462-1e29d0e88edb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>redis</category>
    </item>
    <item>
      <title>Sample Dtrace in Linux</title>
      <author>Santhosh Balasa</author>
      <pubDate>Mon, 31 May 2021 03:49:56 +0000</pubDate>
      <link>https://dev.to/sbalasa/sample-dtrace-in-linux-2pp3</link>
      <guid>https://dev.to/sbalasa/sample-dtrace-in-linux-2pp3</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/sbin/dtrace -s
#pragma D option quiet

BEGIN
{
        printf("Starting vxdisk resize analysis at %lu", timestamp);
        printf("\n");
}

END
{
        printf("Ending vxdisk resize analysis at %lu", timestamp);
        printf("\n");
}


#!/usr/sbin/dtrace -s
#pragma D option quiet

fbt:vxio:volsp_strategy:entry
{
        printf("%Y vm issued IO buf %p\n", walltimestamp, arg0);
        self-&amp;gt;buf=arg0;
}

fbt::ldi_strategy:entry
/self-&amp;gt;buf == arg0/
{
        printf(" %Y ldi_strategy received vm buf %p\n", walltimestamp, arg0);
}

fbt::ldi_strategy:return
/self-&amp;gt;buf == arg1/
{
        printf(" %Y ldi_strategy returned vm buf %p\n", walltimestamp, arg1);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>dtrace</category>
      <category>linux</category>
    </item>
  </channel>
</rss>
