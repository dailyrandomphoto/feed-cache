<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Arrays Basics</title>
      <author>Romil Jain</author>
      <pubDate>Sat, 06 Nov 2021 16:34:15 +0000</pubDate>
      <link>https://dev.to/romil_code/arrays-basics-25ki</link>
      <guid>https://dev.to/romil_code/arrays-basics-25ki</guid>
      <description>&lt;p&gt;In Arrays, we can store multiple items of the same type together.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;int A[5];&lt;/b&gt; ‚Üí means that we have declared an array of size 5&lt;br&gt;
when we count arrays we count from zero , so here count is represented by index.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnH3XwKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrpehg3a655j1mmthyvw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnH3XwKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rrpehg3a655j1mmthyvw.jpg" alt="count arrays" width="812" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;A[0]=14;&lt;/b&gt; ‚Üí means we have stored 14 at index 0&lt;br&gt;
&lt;b&gt;A[1]=2;&lt;/b&gt; ‚Üí means we have stored 2 at index 1&lt;/p&gt;

&lt;p&gt;We can declare above array easily by using code blocks&lt;br&gt;
&lt;b&gt;int A[10]={3,5,6,7,8,9};&lt;/b&gt; ‚Üí this is called declaration + assigning the value&lt;/p&gt;

&lt;blockquote&gt;I would recommend you to study C language from &lt;a href="https://www.geeksforgeeks.org/c-language-set-1-introduction/"&gt;GeekForGeeks&lt;/a&gt; and learn about structures&lt;/blockquote&gt;

&lt;p&gt;&lt;b&gt;HINT :- To print all array values&lt;/b&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
for(int i=0;i&amp;lt;5;i++){
  printf("%d", A[i];
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Rendering Dynamic Content and Template Engines </title>
      <author>The Nerdy Dev</author>
      <pubDate>Sat, 06 Nov 2021 16:15:07 +0000</pubDate>
      <link>https://dev.to/thenerdydev/rendering-dynamic-content-1470</link>
      <guid>https://dev.to/thenerdydev/rendering-dynamic-content-1470</guid>
      <description>&lt;p&gt;Hey everyone üëãüèª,&lt;/p&gt;

&lt;p&gt;In this article, let us learn about how we can render dynamic content to the client (which is not static). Let us first touch briefly on what a template engine is because rendering dynamic content is closely related to what a template engine will help us in achieving. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-engines-a-brief-overview"&gt;
  &lt;/a&gt;
  Template Engines - a brief overview.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvVEFZlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1fqi380s1j8cehbubft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvVEFZlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1fqi380s1j8cehbubft.png" alt="Image description" width="289" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A template engine is software designed to combine templates with a data model to produce multiple pages that share the same look throughout the site. These are the views in an MVC project.&lt;/p&gt;

&lt;p&gt;So this helps us in putting dynamic content on our HTML pages. &lt;/p&gt;

&lt;p&gt;We got a HTML like template (technically not HTML) which is typically a file that contains a lot of HTML like content in it but with some placeholders plugged into it and then we have a server (a Node.js Express server or any other server) serving the Node/Express content and then you have a templating engine &lt;br&gt;
that replaces placeholders with HTML content but that content is generated on the server dynamically on the fly taking that dynamic content into account. &lt;/p&gt;

&lt;p&gt;Some of the common template engines : &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-ejs"&gt;
  &lt;/a&gt;
  1. EJS
&lt;/h2&gt;

&lt;p&gt;EJS Uses normal html and plain javascript in your templates. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ESmGk55I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f276l5gywn15jp43pto7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ESmGk55I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f276l5gywn15jp43pto7.png" alt="Image description" width="570" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;EJS provides us clean syntax that easily mixes with HTML and provides the flexibility to write the Javascript code inside the templates. &lt;/p&gt;

&lt;p&gt;Dynamic content to be rendered in the above example is name. The value of the name variable will be rendered as an HTML page's paragraph with value of name getting rendered &lt;br&gt;
on the fly. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-pug"&gt;
  &lt;/a&gt;
  2. Pug
&lt;/h2&gt;

&lt;p&gt;PUG uses minimal HTML and custom template language.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DO9HFFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09k49oypaae8b7my02u7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DO9HFFw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09k49oypaae8b7my02u7.png" alt="Image description" width="486" height="444"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-handlebars"&gt;
  &lt;/a&gt;
  3. Handlebars
&lt;/h2&gt;

&lt;p&gt;Handlebars uses normal HTML and custom template language. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W9keNqdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfsp52cl6j06x7i92vb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9keNqdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfsp52cl6j06x7i92vb8.png" alt="Image description" width="588" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The side effect of Handlebars template compared to Pug is that we cannot run any logic in the Handlebars template we need to pass a variable that has a value true or false(i.e logic is performed outside and passed into hbs template) and then we can render dynamic content.&lt;/p&gt;

&lt;p&gt;This keeps our templates lean and all our logic should live while making sure that all our logic lives in our backend code. It works on the philosophy of less logic in the template and more logic in the node express code. &lt;br&gt;
So you have to prepare everything there so that inside the template you don't have to write any Javascript &lt;br&gt;
expressions.&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;br&gt;
&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Looking to learn React.js with one Full &lt;strong&gt;Project&lt;/strong&gt;, check this out : &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/learn-react-with-one-big-project-notes-included-demo-and-video-link-4fe5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React with one BIG Project [NOTES included] - Demo and Video Link&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Jun 10 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
    </item>
    <item>
      <title>All Python Operators</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Sat, 06 Nov 2021 15:48:09 +0000</pubDate>
      <link>https://dev.to/abstract/all-python-operators-2oo9</link>
      <guid>https://dev.to/abstract/all-python-operators-2oo9</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@pakata?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pakata Goh&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/programming?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this guide, we will talk about Python programming language operators. You will learn about arithmetic, logical and bitwise operators, as well as comparison, assignment, membership, identity operators, and their syntax. All this will be illustrated with examples.&lt;/p&gt;

&lt;p&gt;An operator in Python is a symbol that performs an operation on one or more operands.&lt;br&gt;
The operand is the variable or value on which the operation is performed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;
  &lt;a href="#introduction-to-python-operators"&gt;
  &lt;/a&gt;
  Introduction to Python Operators
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;Python operators come in 7 types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arithmetic operators&lt;/li&gt;
&lt;li&gt;Comparison operators&lt;/li&gt;
&lt;li&gt;Assignment operators&lt;/li&gt;
&lt;li&gt;Logical operators&lt;/li&gt;
&lt;li&gt;Accessory Operators&lt;/li&gt;
&lt;li&gt;Identity operators&lt;/li&gt;
&lt;li&gt;Bitwise operators&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#python-arithmetic-operators"&gt;
  &lt;/a&gt;
  Python arithmetic operators
&lt;/h3&gt;

&lt;p&gt;(This type includes operators for performing basic arithmetic operations.)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Addition (+)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Adds the value on both sides of the operator.&lt;br&gt;
&lt;em&gt;Example:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Subtraction (-)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Subtracts the value of the right side from the value in the left.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Multiplication (*)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Multiplies the values on both sides of the operator.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Division (/)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Divides the value of the left side of the assignment of the right. The data type of the division result is a floating point number.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mf"&gt;0.75&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Exponentiation&lt;/strong&gt; (**) &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Raises the first number to the power of the second.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;81&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Division without remainder (//)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performs division and returns the integer value of the quotient, removing the digits after the decimal point.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Division modulo (remainder of division) (%)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performs division and returns the value of the remainder.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mf"&gt;10.5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mf"&gt;1.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#comparison-operators"&gt;
  &lt;/a&gt;
  Comparison operators
&lt;/h3&gt;

&lt;p&gt;Comparison operators in Python compare operands. They report whether one of them is greater than the other, less than, equal to, or both.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Less (&amp;lt;)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This operator checks whether the value on the left is less than the value on the right.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;More (&amp;gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checks whether the value on the left is greater than the one on the right.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Less than or equal to (&amp;lt;=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checks whether the left part is less than or equal to the right.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Greater than or equal to (&amp;gt;=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checks whether the left part is greater than or equal to the right.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Equal to (==)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This operator checks whether the value from the left is equal to the right. 1 is equal to Boolean True, and 2 (two) is not. 0 is False.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not equal to (!=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checks whether the value on the left is equal to the value on the right. The &amp;lt;&amp;gt; operator performs the same task, but it was removed in Python 3.&lt;/p&gt;

&lt;p&gt;When the condition is met, True is returned. Otherwise, False. This return value can be used in subsequent statements and expressions.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1==True  # This raise Syntax Error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#assignment-operators"&gt;
  &lt;/a&gt;
  Assignment operators
&lt;/h3&gt;

&lt;p&gt;The assignment operator assigns a value to a variable. It can manipulate the value before assignment. There are 8 assignment operators: 1 simple and 7 using arithmetic operators.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Assignment (=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assigns a value from the right to the left part. It is worth noting that == is used for comparison, and = for assignment.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Addition and assignment (+=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sums up the value of both sides and assigns it to the expression on the left. a += 10 is the same as a = a + 10.&lt;/p&gt;

&lt;p&gt;The same applies to all other assignment operators.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Subtraction and assignment (-=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Subtracts the value on the right from the left and assigns it to the expression on the left.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Division and assignment (/=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Divides the value from the left by the right. Then assigns it to the expression on the left.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Multiplication and assignment (*=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Multiplies the values of both sides. Then assigns the right to the left.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;8.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Modulo division and assignment (%=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performs modulo division for both parts. The result assigns to the left part.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Exponentiation and assignment&lt;/strong&gt; (**=)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performs exponentiation of the left part of the value of the right part. Then assigns a value to the left part.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;32.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Division with remainder and assignment (//=)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performs division with the remainder and assigns the result to the left part.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;//=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;10.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This is one of the important Python operators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python Logical operators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are unions that allow you to combine several conditions. There are only three operators in Python: and (and), or (or) and not (not).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;And&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the conditions on both sides of the and operator are true, then the entire expression is considered true.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Or&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The expression is false if both operands on both sides are false. If at least one of them is true, then the whole expression is true.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This operator inverts the Boolean values of the expression. True turns into False and vice versa. In the example below, the Boolean value 0 is False. Therefore, it turns into True.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#accessory-operators"&gt;
  &lt;/a&gt;
  Accessory Operators
&lt;/h3&gt;

&lt;p&gt;These operators check whether the value is part of a sequence. The sequence can be a list, a string, or a tuple. There are only two such operators: in and not in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;In&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Checks whether the value is a member of the sequence. In this example, you can see that the fox line is not in the list of pets. But cat is, so it returns True. Also, the string me is a substring of disappointment. Therefore, it will return True.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'dog'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'cat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'ferret'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;'fox'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pets&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="s"&gt;'cat'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pets&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="s"&gt;'me'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;'disappointment'&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Not in&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This operator checks whether the value is not a member of the sequence.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="s"&gt;'pot'&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;'disappointment'&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Identity operators&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These operators check whether the operands are the same (whether they occupy the same position in memory).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Is&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the operands are identical, then True will be returned. Otherwise, False. Here 2 is not 20, so False will be returned. But '2' is the same as "2". Different quotes do not change the objects themselves, so True will be returned.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="s"&gt;'2'&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Is not&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2 is a number, and '2' is a string. Therefore, True will be returned.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="s"&gt;'2'&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#python-bitwise-operators"&gt;
  &lt;/a&gt;
  Python Bitwise operators**
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;These operators work on the operands bit by bit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Binary And (&amp;amp;)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performs a bitwise and operation on two values. Here binary 2 is 10 and 3 is 11. The result of bitwise and is 10 - binary 2. Bitwise and over 011(3) and 100(4) yields the result 000(0).&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Binary OR (|)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performs a bitwise or operation on two values. Here or for 10(2) and 11(3) returns 11(3).&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Binary OR NOT (^)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Performs a bitwise xor (exclusive or) operation on two values. Here the result OR NOT for 10(2) and 11(3) will be 01(1).&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Inverting operator (~)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It returns inverted binary numbers. In other words, flips the bits. Bit 2 is 00000010. Its inverted version is 11111101. This is a binary -3. Therefore, the result is -3. Similarly, ~1 equals -2.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;~-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, the inverted -3 is 2.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Binary left shift (&amp;lt;&amp;lt;)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It shifts the value of the left operand to the position indicated on the right. So, binary 2 is 10. 2 &amp;lt;&amp;lt; 2 will shift the value two positions to the left and 1000 will come out ‚Äî this is binary 8.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Binary shift to the right (&amp;gt;&amp;gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Shifts the value of the left operator to the position indicated on the right. So, binary 3 is 11. 3 &amp;gt;&amp;gt; 2 will shift the value two positions to the right. The result is 00, that is, 0. 3 &amp;gt;&amp;gt; 1 will shift one position to the right, and the result will be 01 - binary 1.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;In this article, all 7 types of Python operators were considered. An example was offered for each in the IDE. To understand the specifics of the operators, you need to continue working with them, use them in conditional constructions and combine them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/neo.skarynsky"&gt;Write me on Face....oh...Meta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/decodesperato"&gt;My Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Dev.to as a headless CMS</title>
      <author>Visakh Vijayan</author>
      <pubDate>Sat, 06 Nov 2021 15:41:15 +0000</pubDate>
      <link>https://dev.to/vjnvisakh/devto-as-a-headless-cms-efb</link>
      <guid>https://dev.to/vjnvisakh/devto-as-a-headless-cms-efb</guid>
      <description>&lt;p&gt;It has been long since I wanted to develop a website for blogging. Everytime I sat with it the one thing that disturbed me is that I have to setup everything from scratch - i.e. design databases, choose a framework for writing my APIs, test my APIs and many more. I was never a fan of coupled CMS like Wordpress. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devto"&gt;
  &lt;/a&gt;
  Dev.to
&lt;/h2&gt;

&lt;p&gt;That is when I started writing on Dev.to. The reason why I chose Dev.to over Medium has to be the activity I could see on a daily basis. I know Medium is very popular and is good to make some money writing. The thing was I wasn't sure whether the blog will lead to anything at all, because of the multiple projects I could see that are pending in my list. &lt;/p&gt;

&lt;p&gt;I loved writing on Dev.to probably because of it's editor. No clutter, blackish background, markdowns possible. That is all that I ever needed I guess. So I started writing and soon I realized I don't have a nice home page if I wanted to show my blog off to my friends. And that is when I started wandering. And eureka. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-heavylifters"&gt;
  &lt;/a&gt;
  The heavy-lifters
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; actually has everything built in for you. They have APIs exposed publicly that you can use to create a nice front-end for your blog. The GET requests are free, while you need an API-Key for the POST/PUT ones I guess. But that didn't much matter to me as I just wanted people be able to read contents for the MVP.&lt;/p&gt;

&lt;p&gt;It took well over a day to set things up. So the backend is powered by Dev.To (Thank you :D), the front-end is hosted on Netlify. It was made using ReactJs. The only cost I incurred was the custom domain I bought from GoDdaddy for 199 a year I guess. So that is it. Cheapest blog setup ever I guess. So essentially Dev.to does all the hosting for me. Thank you &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; developers for keeping the system in perfect condition always. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.forem.com/api/"&gt;Here&lt;/a&gt; is the API documentation if you want to give it a go &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-ended"&gt;
  &lt;/a&gt;
  How it ended
&lt;/h2&gt;

&lt;p&gt;Here is how the blog looks like today. I am pretty sure I will start working on it soon again or atleast I hope.&lt;/p&gt;

&lt;p&gt;Here is the desktop and mobile view of the blog. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N53ZEzN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muc6h1rfk1zd2vpbita4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N53ZEzN9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muc6h1rfk1zd2vpbita4.png" alt="Blog View" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can access the blog over &lt;a href="https://www.thedecode.online/"&gt;HERE&lt;/a&gt;. I know there are a lot of improvements possible just as you open it. But it satisfied my use-case I guess - almost free blogger. &lt;/p&gt;

&lt;p&gt;In my next post I will bring in an even fancier way of doing things using &lt;a href="https://strapi.io/"&gt;Strapi&lt;/a&gt;. Till then - &lt;/p&gt;

&lt;p&gt;Happy coding!!!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>9 Types of AWS Databases and its purposes</title>
      <author>Praveen Sambu</author>
      <pubDate>Sat, 06 Nov 2021 15:01:14 +0000</pubDate>
      <link>https://dev.to/praveensambu/9-types-of-aws-databases-and-its-purposes-3pp1</link>
      <guid>https://dev.to/praveensambu/9-types-of-aws-databases-and-its-purposes-3pp1</guid>
      <description>&lt;p&gt;9 types of managed database services available from AWS. They fall into two primary categories&lt;br&gt;
 1) relational &lt;br&gt;
 2) NoSQL databases.&lt;/p&gt;

&lt;p&gt;The Amazon Relational Database Service is the managed service providing relational databases.&lt;br&gt;&lt;br&gt;
The engines include Amazon Aurora, MySQL, MariaDB, Postgres, Microsoft SQL Server, and Oracle.&lt;/p&gt;

&lt;p&gt;The managed NoSQL database offerings include Key-Value stores, Document stores, In-Memory Databases, Graph stores, Time Series stores, Ledger databases, and Search databases.&lt;/p&gt;

&lt;p&gt;Amazon DynamoDB is a key-value store.  Data is accessed using a key that retrieves a value.  It‚Äôs a binary operation.  Data is returned or it isn‚Äôt.&lt;/p&gt;

&lt;p&gt;Amazon DocumentDB is a document database.  Document databases store semi-structured data and the data structure is embedded in the document, itself.  Data is accessed using a key but the value, because it can have a structure, can also be queried to return specific information.&lt;/p&gt;

&lt;p&gt;Amazon ElastiCache is an in-memory store.  The primary use case for an in-memory store is caching. A cache improves database performance by serving often requested data from memory instead of from a disk or from a memory-intensive calculation. &lt;/p&gt;

&lt;p&gt;Amazon Neptune is a graph database.  Graph databases store and analyze the relationships between things.  Graph databases can visualize people in terms of a social network but they can also be used to see how systems and processes are connected.&lt;/p&gt;

&lt;p&gt;Amazon Timestream is a Time Series database.  Time series databases answer questions about trends and events.  While it is a type of key-value store with the time as the key, a time series database looks at ranges of data points to calculate answers.&lt;/p&gt;

&lt;p&gt;Amazon Quantum Ledger Database is a ledger database.  A ledger database uses cryptographic controls to ensure that the data stored is immutable.  Records are not edited.  Instead, when information changes, new versions of the record are created.  It also uses a blockchain to ensure data integrity.  When a hash is created to verify data integrity it uses the data along with the hash from the previous record.  If the chain is tampered with, the chain will be broken.&lt;/p&gt;

&lt;p&gt;Amazon Elasicsearch Service is a search database.  Search databases create indexes to help people find important information.  Web searching is a common application but searching is also done in product catalogs, enterprise documentation, and in content management systems.&lt;/p&gt;

&lt;p&gt;Relational databases are best for transactional workloads that have highly-structured data and require ACID compliance.  ACID compliance means that transactions will take a database from one stable state to another stable state.  &lt;/p&gt;

&lt;p&gt;Relational databases can scale but, when they do, it is done vertically.  They‚Äôre made bigger by adding more CPU, memory, or expanding existing storage.&lt;/p&gt;

&lt;p&gt;Relational databases are often used for online transactional processing applications.  These types of applications usually work on small amounts of data per transaction to record an exchange of goods or services.  &lt;/p&gt;

&lt;p&gt;Relational databases use a schema to define the structure of the data stored.  Schemas are built based on reporting, data validation, and compliance requirements.  The database cannot be used until the design has been completed and implemented.&lt;/p&gt;

&lt;p&gt;Relational databases report on and manage known processes.&lt;/p&gt;

&lt;p&gt;NoSQL databases are a family of databases that share certain characteristics.  They usually scale horizontally by adding compute notes.  They do not, generally, require a schema to define data.  Data is usually semi-structured or unstructured.  &lt;/p&gt;

&lt;p&gt;The term NoSQL originally meant that a programming language other than SQL was used to access data.  This has been expanded to mean ‚ÄúNot Only SQL‚Äù because some databases in the NoSQL family can use a modified version of SQL to access data.&lt;/p&gt;

&lt;p&gt;NoSQL databases are often used for online analytical processing workloads.  OLAP workloads answer questions that are unknown.  That is, where a relational database report might show the number of items sold in a given month, an analytic application might reveal the trends as to why certain items sold while others didn‚Äôt.&lt;/p&gt;

&lt;p&gt;NoSQL databases use unstructured or semi-structured data.  This means that developers can write code using a NoSQL database without having to wait until the design has been completed.&lt;/p&gt;

&lt;p&gt;Data drives business.  Data drives innovation.  Data can be as unique as a fingerprint or as ubiquitous as water.&lt;/p&gt;

&lt;p&gt;The cloud has the promise of agility, scalability, and elasticity.  Agility is about changing to meet needs, scalability means that growth can happen when needed, and elasticity is about turning the lights off when leaving a room.&lt;/p&gt;

&lt;p&gt;Picking the correct database to manage data will take some effort.  It could be that several database types are needed.  &lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Why developers don't like ETA's?</title>
      <author>Andrew Baisden</author>
      <pubDate>Sat, 06 Nov 2021 14:50:27 +0000</pubDate>
      <link>https://dev.to/andrewbaisden/why-developers-dont-like-etas-56o1</link>
      <guid>https://dev.to/andrewbaisden/why-developers-dont-like-etas-56o1</guid>
      <description>&lt;p&gt;This article was written for Zigi's blog on the subject of developers happiness/noise/career/productivity &lt;a href="https://www.zigi.ai/blog/why-developers-dont-like-etas"&gt;https://www.zigi.ai/blog/why-developers-dont-like-etas&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can be the most skilled and experienced developer on the planet but even this title won't help you when you find yourself in a situation that requires you to meet a specific deadline. Such a challenge is the bane of every developer. It is the question that you try to avoid when it comes up in a conversation. Almost akin to a bad word or a name best avoided like the one that begins with a "V" in the Harry Potter series. What becomes quite apparent when you have worked on a couple of projects is that life just does not go as smoothly as you expect it to be. Uncertainties can occur when you least expect it and no plan is foolproof.&lt;/p&gt;

&lt;p&gt;Distractions can and do occur in the field of work as do the odd random things that just seem to pop out of nowhere and make you wonder what exactly is happening and what kind of day you are going to have. The reason why it's so complicated to give a concrete ETA for a product that you are working on is because you just don't know how long it's really going to take and you most definitely can't look back on a previous project and use that as your baseline. No project is ever the same and life is wild and wonderful at its best.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What becomes quite apparent when you have worked on a couple of projects is that life just does not go as smoothly as you expect it to be. Uncertainties can occur when you least expect it and no plan is foolproof.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#unrealistic-expectations"&gt;
  &lt;/a&gt;
  Unrealistic expectations
&lt;/h2&gt;

&lt;p&gt;It's all good and well having an idea in your head of how you believe a project will go but unfortunately in the real world, we are forced to deal with different variables which do not align with our perfect world. Recently I was working on a project for the company that I work for which at the time seemed like it was going to be super smooth with few if any blockers to get in the way. I could not have been more wrong!&lt;/p&gt;

&lt;p&gt;You see you need to factor in the unexpected like in my case I lost a few days of work because of some unexpected admin work that needed to be completed which was bad timing. And there were some problems with the codebase which required lots of investigation. This is something that I never imagined would happen because I had this picture in my head with everything planned out nicely and the deadline was so far away that I did not stop to think about unforeseen challenges that might come my way.&lt;/p&gt;

&lt;p&gt;It is also a given that other people on the project are likely to have their own ideas and expectations too. So while they might assume that it will be easy to build an element for an application the reality is that maybe it takes a bit longer and requires some research so you might not actually be working on it the whole time there is a whole different side that needs to be deconstructed too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#too-many-client-requests"&gt;
  &lt;/a&gt;
  Too many client requests
&lt;/h2&gt;

&lt;p&gt;A huge talking point is how developers should deal with client requests. Giving an accurate ETA requires a significant amount of thinking and planning. It is not ok to just say the first thing that comes to mind because work environments tend to have many changing variables, nothing is fixed. In some situations, you might find yourself working on multiple projects that cross over, so that is another thing that must be considered in your thought process. Furthermore, working for large organizations tends to give you far more opportunities for projects.&lt;/p&gt;

&lt;p&gt;Having both an internal and external resume ensures that your profile is readily available for when a project that matches your skillset is secured for the business. More opportunities lead to more events and alternating between various contexts. Taking all of this into account it does not take long for a developer‚Äôs calendar to become full of meetings and calls which have to be factored in as one of those variables and time constraints.&lt;/p&gt;

&lt;p&gt;Another less often realized subject is the fact that having meetings and events is part of the job. They can show up unexpectedly and this can cost you valuable coding time. Nobody likes to break their working streak because this distraction can take you an average of &lt;strong&gt;23 minutes and 15 seconds&lt;/strong&gt; before you get back into the flow of things. Throughout a project, priorities can change all the time so it can start to become quite complicated to give accurate estimates as you can‚Äôt say for certain how many hours you will have free for coding in a day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deadlines"&gt;
  &lt;/a&gt;
  Deadlines
&lt;/h2&gt;

&lt;p&gt;It is not outside the realm of possibility that you have already agreed to a deadline for when the project should be in the minimal viable product (MVP) phase. But you see the thing is that changes can happen despite you believing that it has already been set in stone and you know what you should be doing.&lt;/p&gt;

&lt;p&gt;In another example, I can recall various other issues related to the deadline on the same project which I mentioned earlier. Concerns were raised when additional feature requests, design changes, and new copy flows were introduced. The app was barely close to production-ready and my workload had tripled in a short amount of time while the deadline remained the same... Truly it can be described as insanity giving you more work to do than days available to do them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-did-that-bug-come-from"&gt;
  &lt;/a&gt;
  Where did that bug come from?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#a-global-pandemic"&gt;
  &lt;/a&gt;
  A global pandemic
&lt;/h3&gt;

&lt;p&gt;External factors can be absolutely detrimental to a project. Let's talk about the elephant in the room "coronavirus". In 2020 a long overdue and highly anticipated computer game was released to the world. The game had been delayed for months which was already a huge red flag. The developers continued to give excuses for the delays while convincing everyone that it was going to be ok. Well, the game finally launched and it was a disaster. The game had so many bugs it was almost completely unplayable on games consoles.&lt;/p&gt;

&lt;p&gt;We are only human and we cannot predict the future. I bet when they were working on this game they could never have anticipated a global pandemic which changed the shift of work from offices to remote working. It came at a bad time because it disrupted their whole project cycle leading to delays as the team could not work efficiently on the codebase at the time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unforseen-delays"&gt;
  &lt;/a&gt;
  Unforseen delays
&lt;/h3&gt;

&lt;p&gt;I can think of dozens of examples when I was working on a project at a company which unfortunately got delayed because of some unforeseen bugs that just came out of nowhere. In my mind, I knew the code that I wanted to write. I had done it many times before. But then some random bug shows up and instead of you completing a feature that you had planned to have done in about 1 hour. You have now lost half a day trying to debug something that is behaving unexpectedly and throwing you off your game.&lt;/p&gt;

&lt;p&gt;As of writing another high profile computer game has been delayed because of the pandemic The development studios released a statement saying that the global pandemic had created unforeseen challenges for their development teams. And that they would need the extra time to complete it so that it would be at the level that the fanbase expects it to be at. I for one welcome the delay because I think the gaming community has learned from previous failed launches because there is always a large backlash.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-better-solution"&gt;
  &lt;/a&gt;
  A better solution
&lt;/h3&gt;

&lt;p&gt;ETA's are just difficult to contemplate; there is no "one-fix" that will immediately give you a solution to this dreaded problem. Although that may be the case, all hope is not lost if expectations can be tamed and adjusted right from the beginning so that everyone is on the same page. And it does no harm at all explaining the problems that can arise and letting the client know that developers are not wizards like Merlin from King Arthur and Gandalf from The Lord Of The Rings series. We don't write spells, we write code, and sometimes it breaks.&lt;/p&gt;

&lt;p&gt;While it may not be possible to alleviate all doubts if you have good planning, project management, team meetings, and a well-defined architecture setup from the start. It will go a long way to giving yourself and the client confidence that you can get something working eventually.&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Angular : RxJS concatMap operator</title>
      <author>diptee</author>
      <pubDate>Sat, 06 Nov 2021 14:41:41 +0000</pubDate>
      <link>https://dev.to/dipteekhd/angular-rxjs-concatmap-operator-4614</link>
      <guid>https://dev.to/dipteekhd/angular-rxjs-concatmap-operator-4614</guid>
      <description>&lt;ul&gt;
&lt;li&gt;In Angular, we use HTTP to get data from backend,HTTP methods always return an observable.Generally we subscribe to that observable and assign response data to class variables to use it in our component.&lt;/li&gt;
&lt;li&gt;But using RxJS operators we can compose multiple observables(data streams) or process  observable data  before subscribing to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;RxJS concatMap operator&lt;/strong&gt;&lt;br&gt;
It is a High-order Mapping operator an operator that takes value from an outer observable and maps it into inner observable instead of plain values(&lt;strong&gt;Observable emits observable&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;concatMap operator&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Takes each value from the outer observable and maps that value  to observable(called as inner observable) &lt;/li&gt;
&lt;li&gt;Concat all inner observables into a single observable in order  and subscribe to inner observables and emit data of each inner observable into output observable in sequential manner.&lt;/li&gt;
&lt;li&gt;concatMap never subscribes to the next inner observable until the previous one completes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;br&gt;
Display first 3 toppers of the computer department on UI with ROLL NUMBER &amp;amp; MARKS.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o1SHBrE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qofhfkxmgt9ffcmxa1t0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o1SHBrE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qofhfkxmgt9ffcmxa1t0.png" alt="toppers" width="381" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://57dhr.csb.app/"&gt;Run live&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have 2 API‚Äôs&lt;br&gt;
1.First API to get roll numbers of first 3 toppers.&lt;br&gt;
2.Second API to get marks of topper taking roll number as input.&lt;/p&gt;

&lt;p&gt;In the above case we need to take all roll numbers from the first API  and pass it to the second API.&lt;br&gt;
Normally in such scenarios developers use a nested subscription approach.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70WLr5s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsmq81ny79m0e3umm3ge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70WLr5s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsmq81ny79m0e3umm3ge.png" alt="Nested" width="462" height="310"&gt;&lt;/a&gt;&lt;br&gt;
Here due to nested subscription approach output may vary,because we are hitting HTTP requests for each roll number,but here HTTP requests are not completing in sequential manner,depending upon which request completes first that request response data gets pushed in toppersList_1. &lt;/p&gt;

&lt;p&gt;So solution to this problem is use concatMap RxJS operator instead of nested subscription.&lt;br&gt;
For given use-case,we need to use two concatMap operator.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRNyhVg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twlmz1i1soc73lx2pgd2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRNyhVg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twlmz1i1soc73lx2pgd2.png" alt="concat" width="767" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First contactMap operator -&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;getToppers_rollNum()&lt;/em&gt; this method returns an Observable of type number[] , conactMap  maps &lt;code&gt;Observable&amp;lt;number[]&amp;gt;&lt;/code&gt; to &lt;code&gt;Observable &amp;lt;number&amp;gt;&lt;/code&gt;(inner observable) then subscribes to inner observable and emit data into output observable(top_3_rollNum$).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second  concatMap operator -&lt;/strong&gt;&lt;br&gt;
Let's consider &lt;strong&gt;top_3_rollNum$&lt;/strong&gt; as outer observable.concatMap takes each roll number from the outer observable and &lt;strong&gt;hits http request sequentially&lt;/strong&gt;(here we have 3 inner observables return by 3 http requests) &amp;amp; emits http response data into output observable(topper_marks$).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;concatMap never hits the next http request until the previous one completes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Shorthand syntax for above code&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MsIYZr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x84zt0xszzv3a45pxfs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MsIYZr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7x84zt0xszzv3a45pxfs.png" alt="Shorthand " width="764" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So,concatMap is used where sequence of execution matters.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you found this helpful please share!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>angular</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Applying code formatter to my SSG</title>
      <author>jjung99</author>
      <pubDate>Sat, 06 Nov 2021 13:46:49 +0000</pubDate>
      <link>https://dev.to/jjung99/applying-code-formatter-to-my-ssg-51ce</link>
      <guid>https://dev.to/jjung99/applying-code-formatter-to-my-ssg-51ce</guid>
      <description></description>
    </item>
    <item>
      <title>A server-less CI/CD approach for mono-repo micro-frontends</title>
      <author>Antonio Lagrotteria</author>
      <pubDate>Sat, 06 Nov 2021 13:39:33 +0000</pubDate>
      <link>https://dev.to/aws-builders/a-server-less-cicd-approach-for-mono-repo-micro-frontends-32m6</link>
      <guid>https://dev.to/aws-builders/a-server-less-cicd-approach-for-mono-repo-micro-frontends-32m6</guid>
      <description>&lt;p&gt;This article provides a CI/CD pipeline approach for a GitHub mono-repo-based micro-frontend architecture in AWS, leveraging a series of AWS server-less services such as AWS &lt;a href="https://aws.amazon.com/codepipeline"&gt;CodePipeline&lt;/a&gt;, &lt;a href="https://aws.amazon.com/codebuild"&gt;CodeBuild &lt;/a&gt;and &lt;a href="https://aws.amazon.com/codedeploy/"&gt;CodeDeploy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Micro-frontends come with an increase of the complexity of managing the infrastructure, which makes it crucial for organizations to carefully invest their time in supporting continuous integration (CI), continuous deployment (CD) pipelines and automatic tools that scale along with the organization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcBblgRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AIHjJA1RJpWif1UtWcjiD1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcBblgRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AIHjJA1RJpWif1UtWcjiD1g.png" alt="A CI/CD for building mono repo micro-frontends" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The proposed approach provides a scalable option for organizations to scale their tech micro-frontend ecosystem, keep teams autonomous and let them focus on business and early feedback with a fast release cycle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-context-mono-and-poly-repos"&gt;
  &lt;/a&gt;
  Some context: Mono and Poly repos
&lt;/h2&gt;

&lt;p&gt;Before diving in the architecture, let‚Äôs mention the main approaches for structuring a micro-frontend module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mono repos:&lt;/strong&gt; all the teams work on a single repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Poly (multi)-repos:&lt;/strong&gt; each domain specific micro-frontend is located in its own repository and owned by a single team.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This PoC will focus on a hands-on, detailed and pragmatic CI/CD setup based on a mono-repo with main branch as source of the pipelines changes. For a great overview and detailed comparison I recommend an upcoming &lt;a href="https://www.buildingmicrofrontends.com/"&gt;book &lt;/a&gt;from Luca Mezzalira.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;The architecture is based on a scenario where a company is implementing micro-frontends on a mono GitHub repository and wishes to implement a server-less CI/CD pipeline in AWS.&lt;/p&gt;

&lt;p&gt;For this PoC, the mono-repo contains two trivial Angular micro-frontends, &lt;em&gt;mfe-accounts&lt;/em&gt; and &lt;em&gt;mfe-payments&lt;/em&gt;, though this model allows you to write each module independently with any framework of choice:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5gPbNMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbxYzUMH6TnjmGRwkXgC6GQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5gPbNMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbxYzUMH6TnjmGRwkXgC6GQ.png" alt="Mono-repo structure" width="330" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The scenario involves some steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developers push their code to the main branch in GitHub, which will trigger a push event via &lt;a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks"&gt;GitHub webhooks&lt;/a&gt; to an &lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt; responsible to handle the event.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The API Gateway triggers an &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; function which authenticates the request, analyses the event and, based on affected files, triggers a pipeline for the micro-frontend where the files belong to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One or more pipelines start building, testing and deployment actions via &lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt;, &lt;a href="https://aws.amazon.com/codebuild/"&gt;CodeBuild &lt;/a&gt;and &lt;a href="https://aws.amazon.com/codedeploy/"&gt;CodeDeploy&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes are available in S3 bucket and exposed on a &lt;a href="https://aws.amazon.com/cloudfront/"&gt;Cloudfront&lt;/a&gt; distribution.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets deep dive in the setup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-gateway-setup"&gt;
  &lt;/a&gt;
  API gateway setup
&lt;/h2&gt;

&lt;p&gt;GitHub allows to setup integrations towards its events, such as repository pushes, via &lt;a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks"&gt;webhooks&lt;/a&gt;, which POST a GitHub event data payload towards an endpoint. Let‚Äôs expose a RESTful API in AWS via API Gateway containing a single POST endpoints as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLkxdsLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANqZHmyRKTLt-7k8nCyIcZg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLkxdsLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANqZHmyRKTLt-7k8nCyIcZg.gif" alt="Create API Gateway" width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In above screen, we use a &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html"&gt;Lambda integration proxy&lt;/a&gt; because our associated ‚ÄúHello World‚Äù Lambda will need to access the API Gateway request headers in order to authenticate GitHub upcoming requests. With the API in place, let‚Äôs create the webhook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-webhook-setup"&gt;
  &lt;/a&gt;
  GitHub Webhook setup
&lt;/h2&gt;

&lt;p&gt;Once the API Gateway has been deployed in a stage, it is time to create a GitHub webhook, (refer to this &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-enterprise/managing-organizations-in-your-enterprise-account/configuring-webhooks-for-organization-events-in-your-enterprise-account"&gt;intuitive guide&lt;/a&gt;). &lt;strong&gt;&lt;em&gt;Important&lt;/em&gt;&lt;/strong&gt;: provide a secret to make sure that our Lambda can accept requests only coming from the webhook (more on this later).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6dOIMRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJQxroMYLlDxW0Rq6rORHuA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6dOIMRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJQxroMYLlDxW0Rq6rORHuA.gif" alt="Create a GitHub webhook" width="600" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The integration is ready! Pushing a file to the repository will result in a ‚ÄúHello world‚Äù message triggered by the Lambda, which can be seen under its stream logs in &lt;a href="https://aws.amazon.com/cloudwatch/"&gt;Cloudwatch&lt;/a&gt;. Let‚Äôs now update Lambda code to make sure that we support CI/CD for any micro-frontends in your repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microfrontend-strategy-on-lambda-setup"&gt;
  &lt;/a&gt;
  Micro-frontend strategy on Lambda setup
&lt;/h2&gt;

&lt;p&gt;The ultimate goal of the Lambda function is that given a GitHub push event containing repo commits, then it triggers one or more pipelines for any affected micro-frontend. Let‚Äôs look in details at below gist:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, Lambda authenticates requests only coming from the GitHub webhook by validating the SHA256 request header via a HMAC256 security check, using the crypto module. This check is based on the secret defined in the GitHub webhook earlier and also stored in AWS Secret Manager (follow &lt;a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"&gt;this tutorial&lt;/a&gt;). Lambda will access the secret in a secure way via the IAM action &lt;em&gt;secretsmanager:GetSecretValue&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once validated, the payload is used to infer which micro-frontends have been affected, by extracting its name from the added/modified and removed files from the commits list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If any micro-frontend has changed, we trigger a new build in &lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt; which will build and deploy the micro-frontend. For simplicity the pipeline is called the same as the micro-frontend which is going to build. The AWS SDK client library requires an IAM role allowing &lt;em&gt;codepipeline:StartPipelineExecution&lt;/em&gt; action to access the resource&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall Lambda code can be seen &lt;a href="https://github.com/aladevlearning/microfrontends-pipeline/blob/main/aws/lambdas/pipeline-ci/index.js"&gt;here&lt;/a&gt;. Now it is time to create the pipeline itself, which is part of the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-pipeline-setup"&gt;
  &lt;/a&gt;
  Code Pipeline setup
&lt;/h2&gt;

&lt;p&gt;The creation of a Code Pipeline in AWS involves many steps and concepts, so I will try to keep it simple. Code Pipeline helps to automate release pipelines for fast and reliable application and infrastructure updates. Each steps, here called &lt;em&gt;stages&lt;/em&gt;, perform actions on the involved build artifacts. I will look into how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create the pipeline by choosing some settings&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Source stage, answering the question ‚Äúfrom where does the code to build come from?‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Build stage: ‚Äúhow do I build the source code you just provided?‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Deploy stage: ‚Äúhow and where do I deploy the build artifact you just provided?‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main idea will be to isolate each CodePipeline and CodeBuild project to give flexibility and ownership to each team to manage that process within the team. Optimizations such as reuse of pipelines for similar projects and CloudFormation template are out of scope.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-pipeline-by-choosing-settings"&gt;
  &lt;/a&gt;
  Create pipeline by choosing settings
&lt;/h3&gt;

&lt;p&gt;First, create a pipeline by providing a name matching the building micro-frontend and default settings, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbMi19Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS1ImESpU2mpnRv-LVsdoMA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbMi19Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS1ImESpU2mpnRv-LVsdoMA.gif" alt="First step of creating a pipeline." width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-stage"&gt;
  &lt;/a&gt;
  Source Stage
&lt;/h3&gt;

&lt;p&gt;This stage links the source code to be processed with Code Pipeline. We will connect CodePipeline with our GitHub repo by clicking the Connect button and initiating a wizard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrkkkQXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANpEkKgDO3-eb-VLZ3_RCZQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrkkkQXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANpEkKgDO3-eb-VLZ3_RCZQ.png" alt="Connect Pipeline with GitHub" width="606" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end of the wizard, as shown below, you will be able:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to access your GitHub repo (&lt;em&gt;aladevlearning/microfrontends-pipeline&lt;/em&gt; in my case)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to select the *main *branch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to unselect the &lt;em&gt;Start pipeline on source code changes&lt;/em&gt;, as we want to have it handled by the Lambda function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and click Next to proceed to the next stage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above steps can be seen in below gif.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a81f5YpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A2qMyfsPlTH1g3183CwJXxw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a81f5YpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A2qMyfsPlTH1g3183CwJXxw.gif" alt="Add source stage in CodePipeline" width="600" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-stage"&gt;
  &lt;/a&gt;
  Build Stage
&lt;/h3&gt;

&lt;p&gt;This stage is responsible to build the source received in previous stage. It will create or reuse an existing *CodeBuild *project, which instructs the pipeline on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how to run the build, via a &lt;em&gt;builspec.yml&lt;/em&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;where CodeBuild will practically make the build&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In regards to &lt;em&gt;buildspec.yml *we can decide whether having a common file for all micro-frontends or having one for each of them. This highly depends on whether all micro-frontends adhere to same framework of choice and same build / test steps. By keeping them separate you give each team independence on how to build it, at the cost of slightly more complex overview on build process and governance. For our micro-frontend, the file looks like below:&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
A *buildspec.yaml&lt;/em&gt; consists of intuitive phases for installing/prepping the environment, building the code and instructing how to structure the artifacts. After getting the micro-frontend name from the pipeline initiator, the file installs dependencies and zips the final artifact, which will be deployed to S3 bucket specified in the Deploy section. See &lt;a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html"&gt;this guide for more details&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the building process requires an environment (aka: machine) where to run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G769tdDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArmXTOdRcT99YFm78HdnDsw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G769tdDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArmXTOdRcT99YFm78HdnDsw.gif" alt="Create a Code Build project" width="600" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above gif shows how CodeBuild configuration is based on a &lt;em&gt;build environment, *which represents a combination of operating system, programming language runtime, and tools that are used to run a build. We also selected a specific *buildspec.yml&lt;/em&gt; file location as each micro-frontend could differ in terms of build process and pipeline (e.g. one could be an Angular project and another be a React one, or both still using same framework but being built with different steps).&lt;/p&gt;

&lt;p&gt;Once the Code build project is setup, we set the build provider to be Code Build, we select the newly created Code Build project (&lt;em&gt;mfe-accounts-build&lt;/em&gt;) and continue to the final stage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvtrsA1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYlPorAgo2sNf5lfw-We5nQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvtrsA1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYlPorAgo2sNf5lfw-We5nQ.gif" alt="Create Build stage" width="600" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build project created, let‚Äôs move to the final stage of CodePipeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-stage"&gt;
  &lt;/a&gt;
  Deploy Stage
&lt;/h3&gt;

&lt;p&gt;Finally, we want to deploy our artifact on S3. In order to do that, we need to &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html"&gt;create S3 buckets&lt;/a&gt; where the artifact will be independently deployed. As CodeBuild will zip the built artifact, we check the &lt;em&gt;Extract file before deploy *settings and set the *Canned ACL&lt;/em&gt; to public-read, given we want to be able to see the deployed artifacts in S3.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3fKSK-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AscmER-OcW5nDxIUHzEMPJA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3fKSK-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AscmER-OcW5nDxIUHzEMPJA.gif" alt="Create Deploy stage" width="600" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs great! Your code is now deployed in S3 which allows to associate it with &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-serve-static-website/"&gt;a CloudFront distribution&lt;/a&gt; for better deployment. Above steps for the CodePipeline should be repeated for any micro-frontend. This level of redundancy will allow each team to be independent and autonomous, tweak their CI/CD to&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;Upon push to repository affecting the micro-frontend containing the change, one or more code pipelines will start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk_kAgp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATxua6bFrunxGlwrBttboIA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk_kAgp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATxua6bFrunxGlwrBttboIA.gif" alt="Pipelines coming alive" width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Successful pipelines will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8Nx8fDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGrH0Um70FpOdan4SIkFVmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8Nx8fDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGrH0Um70FpOdan4SIkFVmw.png" alt="Successful pipeline" width="484" height="857"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The deployed artifact is located under the specified S3 bucket:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZNcqjCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3120/1%2AIsniGXK_oAwKXdtXUp6bhA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZNcqjCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3120/1%2AIsniGXK_oAwKXdtXUp6bhA.png" alt="S3 bucket for deployed micro-frontend" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Associated with a Cloudfront distribution, our deployed micro-frontend will look as this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOYn8JvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ADuW0-nm785bugWCnNMPXPA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOYn8JvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ADuW0-nm785bugWCnNMPXPA.png" alt="" width="880" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full code can be found &lt;a href="https://github.com/aladevlearning/microfrontends-pipeline"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-and-ideas"&gt;
  &lt;/a&gt;
  Summary and ideas
&lt;/h2&gt;

&lt;p&gt;This article went in depth to provide a 10 minutes setup to make a seamless CI/CD pipeline for a mono-repo based frontend architecture. This should be seen as a workable, though initial approach which can be explored in so many ways, proving yet again how great and creative is to build things in AWS. Some ideas could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have different pipelines to cover different needs, such as different framework, test suite, integration and functional testing, multi stage environment, etc‚Ä¶&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;publish artifacts in different AWS Accounts, one for test and one for production, to keep isolation and security in place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extend approach for feature branch CI/CD, where you could created branch deployments for early prototyping and feedback, without blocking the main branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the above as a CloudFormation template. This is a must to elevate this approach and consistently repeat it for any micro-frontend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudFront invalidation step. If interested in adding CloudFront in the pipeline, a cache invalidation step via a Lambda function may be necessary to make sure all latest changes are correctly propagated to the consumers (or maybe AWS will take it as feedback and expose it as this seems a pretty used pattern).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/devops/complete-ci-cd-with-aws-codecommit-aws-codebuild-aws-codedeploy-and-aws-codepipeline/"&gt;&lt;strong&gt;Complete CI/CD with AWS CodeCommit, AWS CodeBuild, AWS CodeDeploy, and AWS CodePipeline | Amazon Web‚Ä¶&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.buildingmicrofrontends.com"&gt;&lt;strong&gt;Building Micro-Frontends: the book&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To create an API using Node.js, Express, and Typescript</title>
      <author>Nayan Patil</author>
      <pubDate>Sat, 06 Nov 2021 13:30:55 +0000</pubDate>
      <link>https://dev.to/nayanpatil1998/how-to-create-an-api-using-nodejs-express-and-typescript-89d</link>
      <guid>https://dev.to/nayanpatil1998/how-to-create-an-api-using-nodejs-express-and-typescript-89d</guid>
      <description>&lt;p&gt;In this article, we will learn to create an API server using the Express framework and Typescript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-api"&gt;
  &lt;/a&gt;
  What is API?
&lt;/h3&gt;

&lt;p&gt;An API (Application Programming Interface) is a way of interacting with a service, through a series of predefined requests.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#express"&gt;
  &lt;/a&gt;
  Express
&lt;/h3&gt;

&lt;p&gt;Express is an open-source web framework, for Node.js, designed to make developing websites, web apps, and API's easier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h3&gt;

&lt;p&gt;TypeScript is JavaScript with syntax for types, it is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale.&lt;/p&gt;

&lt;p&gt;so let's dive into the tutorial,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of  &lt;a href="https://nodejs.org/en/"&gt;NodeJs&lt;/a&gt;  and Javascript&lt;/li&gt;
&lt;li&gt;Basics of TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-initialize-the-npm-project"&gt;
  &lt;/a&gt;
  Step 1: Initialize the npm project
&lt;/h2&gt;

&lt;p&gt;To initialize the project in the working directory and create a &lt;em&gt;package.json&lt;/em&gt; file by running the below command in terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command it will create the &lt;em&gt;package.json&lt;/em&gt; file in the working directory&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-installing-the-dependencies"&gt;
  &lt;/a&gt;
  Step 2: Installing the dependencies
&lt;/h2&gt;

&lt;p&gt;Now we have to install the required dependencies to create this API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dotenv&lt;/strong&gt; - Dotenv is a zero-dependency module that loads environment variables from a .env file into process.env&lt;/p&gt;

&lt;p&gt;Now we need to install the dev dependencies for typescript support&lt;br&gt;
using --save-dev flag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @types/node @types/express nodemon ts-node &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a &lt;em&gt;tsconfig.json&lt;/em&gt; file and save it with the below code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-add-scripts-in-packagejson-file-to-run-file"&gt;
  &lt;/a&gt;
  Step 3: Add scripts in &lt;em&gt;package.json&lt;/em&gt; file to run file
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-node server.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dev&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodemon --exec ts-node server.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note - server.ts file which we will create in the next step&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-create-a-env-file"&gt;
  &lt;/a&gt;
  Step 4: Create a .env file
&lt;/h2&gt;

&lt;p&gt;There are some details like port number, database URLs, username etc. which should be hidden and not to be exposed to public&lt;/p&gt;

&lt;p&gt;so create a .env file and declare the port number&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT=8080 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-create-a-serverts-file"&gt;
  &lt;/a&gt;
  Step 5: Create a server.ts file
&lt;/h2&gt;

&lt;p&gt;Now comes an interesting part, creating server.ts file in root folder &lt;/p&gt;

&lt;p&gt;first, we will import the packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now get the port number from .env file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the most important part,  declaring '/' endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we define a / endpoint, that will return the text Hello World!, and run our application on port 8080.&lt;/p&gt;

&lt;p&gt;Note that the / endpoint will only match for GET requests, as we've defined it using the app.get method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-running-our-api"&gt;
  &lt;/a&gt;
  Step 6: Running our API
&lt;/h2&gt;

&lt;p&gt;In your terminal, run the following command to start the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you see the output like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ûú  express-typescript npm run dev

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; express-typescript@1.0.0 dev
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; nodemon &lt;span class="nt"&gt;--exec&lt;/span&gt; ts-node server.ts

&lt;span class="o"&gt;[&lt;/span&gt;nodemon] 2.0.14
&lt;span class="o"&gt;[&lt;/span&gt;nodemon] to restart at any &lt;span class="nb"&gt;time&lt;/span&gt;, enter &lt;span class="sb"&gt;`&lt;/span&gt;rs&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;nodemon] watching path&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="k"&gt;*&lt;/span&gt;.&lt;span class="k"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;nodemon] watching extensions: ts,json
&lt;span class="o"&gt;[&lt;/span&gt;nodemon] starting &lt;span class="sb"&gt;`&lt;/span&gt;ts-node server.ts&lt;span class="sb"&gt;`&lt;/span&gt;
Server is listening on 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! now open your browser and navigate to localhost:8080. If everything worked successfully, "Hello World" should be displayed in your browser.&lt;/p&gt;

&lt;p&gt;Congratulations, You have created API using express and typeScript&lt;/p&gt;

&lt;p&gt;Full code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello worrld&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is listening on &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Loved the article?&lt;br&gt;
Follow me on - &lt;br&gt;
 &lt;a href="//twitter.com/Nayanp960478"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>React Native Football App UI</title>
      <author>Roy Chen</author>
      <pubDate>Sat, 06 Nov 2021 13:26:53 +0000</pubDate>
      <link>https://dev.to/musicoding/react-native-football-app-ui-9a8</link>
      <guid>https://dev.to/musicoding/react-native-football-app-ui-9a8</guid>
      <description>&lt;p&gt;Hi guys!üëãüèªüëãüèª Today I will share with you a nice and clean Football app UI by using #ReactNative and #Expo. Hopefully you can learned something from it. &lt;/p&gt;

&lt;p&gt;Detail please check it out &lt;a href="https://youtu.be/LOJdbySUA9U"&gt;https://youtu.be/LOJdbySUA9U&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Happy Coding!!! &lt;br&gt;
Thank you for watching! Make sure to like + Subscribe For More!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>javascript</category>
      <category>programming</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Rapid Microservices Development in .NET. An introduction.</title>
      <author>Oleksii Nikiforov</author>
      <pubDate>Sat, 06 Nov 2021 13:17:10 +0000</pubDate>
      <link>https://dev.to/nikiforovall/rapid-microservices-development-in-net-an-introduction-jl2</link>
      <guid>https://dev.to/nikiforovall/rapid-microservices-development-in-net-an-introduction-jl2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Learn how to speed up microservices development process by using set of predefined templates and practices. See &lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h2&gt;

&lt;p&gt;The way we develop software is built around the idea of high velocity and readiness to change and adapt to the market's requirements. This approach brings up the next questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to successfully contribute to the existing code base?&lt;/li&gt;
&lt;li&gt;How to not break something in meantime?&lt;/li&gt;
&lt;li&gt;How do we reduce the learning curve of an existing solution?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; Actually, all you need to do is to write clean, understandable, and open for modification code. The actual craft of writing code is honed through years of learning and making mistakes. Component-level design is important and you can benefit from good predefined solution templates, something like Clean Architecture gives you a good starting point. Also, if you feel like your project has some complex domain you might want to incorporate DDD in the mix. Personally, I find it really useful because it facilitates communication between developers and domain experts. It is easier to map code snippets to domain and project requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; Frequent changes increase the possibility of bugs, as software engineers, we deal with it by extensively testing a codebase. At first glance, you might think writing tests is an additional effort that prevents you from shipping some valuable and urgent features. But, in practice, it is actually another way around, you want to invest in a testing toolkit to save future self from some nasty bugs. Also, tests serve as live documentation and enable refactoring. My suggestion is to be practical about it, don't try to get 100% coverage by writing tons of useless unit tests, determine what is the best in a given context. Simply, write tests, my dude.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; Clean code reduces the cognitive load and overall complexity of a codebase. In my opinion, for rapid development, you need somewhat consistency for technical decisions. It is a good idea to use common frameworks, libraries, tools, and even cross-cutting concerns code, just make sure it doesn't introduce additional coupling and unnecessary complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#proposal"&gt;
  &lt;/a&gt;
  Proposal
&lt;/h3&gt;

&lt;p&gt;Luckily, there is the remedy! Rapid Microservices Development &lt;code&gt;RMD === "remedy"&lt;/code&gt;, got it? üòè&lt;/p&gt;

&lt;p&gt;As an organization responsible for developing microservices solutions you want to build reusable components so it will be easy to create a new microservice from the scratch. Creating project templates is a well-known approach and it is quite simple. Rapid microservice development is a goal and templates might be a viable solution, just be mindful about the goal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#templates-family"&gt;
  &lt;/a&gt;
  Templates Family
&lt;/h3&gt;

&lt;p&gt;I've created a set of project templates that provides you information of how you might organize microservices solutions yourself. &lt;strong&gt;Note&lt;/strong&gt;, each template might be used individually outside of microservices development context.&lt;/p&gt;

&lt;p&gt;Feedback is highly appreciated. üôè&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All you need to do is to install it via running the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dotnet new --install NikiforovAll.CleanArchitecture.Templates::1.1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once installed, you can see a list of templates by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new &lt;span class="nt"&gt;-l&lt;/span&gt; na-
&lt;span class="c"&gt;# These templates matched your input: 'na-'&lt;/span&gt;

&lt;span class="c"&gt;# Template Name                Short Name  Language  Tags&lt;/span&gt;
&lt;span class="c"&gt;# ---------------------------  ----------  --------  --------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# Build Project Template       na-bu       bash      build-project/Template&lt;/span&gt;
&lt;span class="c"&gt;# Clean Architecture Template  na-ca       [C#]      CleanArchitecture/DDD/Template&lt;/span&gt;
&lt;span class="c"&gt;# Event Sourcing Template      na-es       [C#]      EventSourcing/CleanArchitecture/DDD/Template&lt;/span&gt;
&lt;span class="c"&gt;# Gateway Template             na-ga       [C#]      gateway/Template&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Alias&lt;/th&gt;
      &lt;th&gt;Repository&lt;/th&gt;
      &lt;th&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Build Project&lt;/td&gt;
      &lt;td&gt;na-bu&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-bu" rel="noopener"&gt;https://github.com/NikiforovAll/na-bu&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clean Architecture Template&lt;/td&gt;
      &lt;td&gt;na-ca&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-ca" rel="noopener"&gt;https://github.com/NikiforovAll/na-ca&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-ca/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BJ8r3ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-ca/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Event Sourcing Template&lt;/td&gt;
      &lt;td&gt;na-bu&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-es" rel="noopener"&gt;https://github.com/NikiforovAll/na-es&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-es/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKNmvvZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-es/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gateway&lt;/td&gt;
      &lt;td&gt;na-ga&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-ga" rel="noopener"&gt;https://github.com/NikiforovAll/na-ga&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-ga/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXlze_S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-ga/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#build-project"&gt;
  &lt;/a&gt;
  Build project
&lt;/h3&gt;

&lt;p&gt;In this blog post I will show you how to create a one of the components yourself.&lt;/p&gt;

&lt;p&gt;The responsibility of build project is a starting project of any developer. The main goal is to have &lt;strong&gt;zero-configuration&lt;/strong&gt; required to get the project up and running, this is really important and people will say thank you for that.&lt;/p&gt;

&lt;p&gt;Build project consists of something like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scripts to pull code base and latest changes from the remotes.&lt;/li&gt;
&lt;li&gt;Scripts to manage infrastructure used during development. All you need to do is to run &lt;code&gt;docker compose service1, service2, ...&lt;/code&gt; to run the system locally. This is really useful.&lt;/li&gt;
&lt;li&gt;Projects assets, something like architecture documentation, postman collection to speed up manual developer testing, guidelines, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will explain the anatomy of the build project from the template in a moment. But first, we need to generate one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new na-bu &lt;span class="nt"&gt;-n&lt;/span&gt; MyFirstBuildProject &lt;span class="nt"&gt;--dry-run&lt;/span&gt;
File actions would have been taken:
  Create: ./.env
  Create: ./.gitignore
  Create: ./.vscode/settings.json
  Create: ./assets/http/gateway/projects.http
  Create: ./assets/http/naca/projects.http
  Create: ./assets/http/naes/projects.http
  Create: ./build/docker_postgres_init.sql
  Create: ./build/execute-tests.sh
  Create: ./build/generate-report.sh
  Create: ./build/run-services.sh
  Create: ./build/setup-infrastructure.sh
  Create: ./docker-compose-local-infrastructure.yml
  Create: ./docker-compose-tests.override.yml
  Create: ./docker-compose-tests.yml
  Create: ./docker-compose.override.yml
  Create: ./docker-compose.yml
  Create: ./docker-images.txt
  Create: ./README.md
  Create: ./routes.conf.json
  Create: ./scripts/generate-report.sh
  Create: ./scripts/git-clone-all.sh
  Create: ./scripts/git-pull-all.sh
  Create: ./scripts/git-summary/.gitignore
  Create: ./scripts/git-summary/git-summary.sh
  Create: ./scripts/git-summary/README.md
  Create: ./scripts/git-summary/screenshot.png
  Create: ./scripts/open-in-browser.sh

&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new na-bu &lt;span class="nt"&gt;-n&lt;/span&gt; MyFirstBuildProject
The template &lt;span class="s2"&gt;"Build Project Template"&lt;/span&gt; was created successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;üìÇ &lt;em&gt;./scripts&lt;/em&gt; - some tools and scripts to manage build project.&lt;/li&gt;
&lt;li&gt;üìÇ &lt;em&gt;./build&lt;/em&gt; - commands to build, start and test the solution.&lt;/li&gt;
&lt;li&gt;üìÇ &lt;em&gt;./assets&lt;/em&gt; - project artifacts&lt;/li&gt;
&lt;li&gt;üìÇ docker-compose.yml, docker-compose-local-infrastructure.yml, docker-compose.override.yml - run system locally&lt;/li&gt;
&lt;li&gt;üìÇ docker-compose-tests.yml, docker-compose-tests.override.yml - run tests locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The template pulls three other predefined templates &lt;code&gt;na-ca&lt;/code&gt;, &lt;code&gt;na-es&lt;/code&gt;, &lt;code&gt;na-ga&lt;/code&gt;. You can change that.&lt;/p&gt;

&lt;p&gt;Let's clone microservices from the &lt;code&gt;na-bu&lt;/code&gt; template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./scripts/git-clone-all.sh
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-ca
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-ca'&lt;/span&gt;...
remote: Enumerating objects: 1146, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1146/1146&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;568/568&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 1146 &lt;span class="o"&gt;(&lt;/span&gt;delta 673&lt;span class="o"&gt;)&lt;/span&gt;, reused 968 &lt;span class="o"&gt;(&lt;/span&gt;delta 506&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0Receiving objects:  96% &lt;span class="o"&gt;(&lt;/span&gt;1101/1146&lt;span class="o"&gt;)&lt;/span&gt;
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1146/1146&lt;span class="o"&gt;)&lt;/span&gt;, 172.02 KiB | 978.00 KiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;673/673&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-es
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-es'&lt;/span&gt;...
remote: Enumerating objects: 1019, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1019/1019&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;523/523&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 1019 &lt;span class="o"&gt;(&lt;/span&gt;delta 571&lt;span class="o"&gt;)&lt;/span&gt;, reused 870 &lt;span class="o"&gt;(&lt;/span&gt;delta 430&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0R
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1019/1019&lt;span class="o"&gt;)&lt;/span&gt;, 173.87 KiB | 1.26 MiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;571/571&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Updating files: 100% &lt;span class="o"&gt;(&lt;/span&gt;183/183&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-ga
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-ga'&lt;/span&gt;...
remote: Enumerating objects: 53, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;53/53&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;35/35&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 53 &lt;span class="o"&gt;(&lt;/span&gt;delta 15&lt;span class="o"&gt;)&lt;/span&gt;, reused 46 &lt;span class="o"&gt;(&lt;/span&gt;delta 8&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;53/53&lt;span class="o"&gt;)&lt;/span&gt;, 18.59 KiB | 2.66 MiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;15/15&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the current state of the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./scripts/git-summary/git-summary.sh
Repository                       Branch Remote State
&lt;span class="o"&gt;================================&lt;/span&gt; &lt;span class="o"&gt;====&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="o"&gt;=====&lt;/span&gt;
/d/dev/MyFirstBuildProject       main ?  &lt;span class="nt"&gt;--&lt;/span&gt;
/d/dev/MyFirstBuildProject/na-ca main origin
/d/dev/MyFirstBuildProject/na-es main origin
/d/dev/MyFirstBuildProject/na-ga main origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can build and run the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./build/run-services.sh start
Creating network &lt;span class="s2"&gt;"myfirstbuildproject_default"&lt;/span&gt; with the default driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_rabbitmqdata-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_postgresdata-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_seq-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
&lt;span class="c"&gt;# ...&lt;/span&gt;
Use &lt;span class="s1"&gt;'docker scan'&lt;/span&gt; to run Snyk tests against images to find vulnerabilities and learn how to fix them
Creating &lt;span class="nb"&gt;seq&lt;/span&gt;                                ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_postgres_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_rabbitmq_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naga.gateway_1 ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naes.api_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naes.worker_1  ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naca.worker_1  ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naca.api_1     ... &lt;span class="k"&gt;done

&lt;/span&gt;Containers starting &lt;span class="k"&gt;in &lt;/span&gt;background
For log info: run-services.sh info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The system is up and running (screenshot from awesome &lt;a href="https://github.com/jesseduffield/lazydocker"&gt;https://github.com/jesseduffield/lazydocker&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYI-pTuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymdvq68j8t5dzqk1ymhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYI-pTuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymdvq68j8t5dzqk1ymhc.png" alt="Image description" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can use code from &lt;em&gt;assets&lt;/em&gt; folder to test things out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create a project in "Clean Architecture" service created from na-ca template

POST http://localhost:3000/ca/projects
Content-Type: application/json

{
    "name": "Clean Architecture Tasks",
    "colourCode": "#FFFFFF"
}

# Get projects

GET http://localhost:3000/ca/projects/

# Create a project in "Event Sourcing" service created from na-es template

POST http://localhost:3000/es/projects
Content-Type: application/json

{
    "name": "Event Sourcing Tasks",
    "colourCode": "#FF5733"
}

# Get projects

GET http://localhost:3000/es/projects/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHwhTJVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bxun7ckvzyt64jhn5wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHwhTJVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bxun7ckvzyt64jhn5wo.png" alt="Image description" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I encourage you to continue the investigation of the codebase on your own. You may find some inspiration or good practices, there are hidden gems üôÇ. Let me know if you want to see a review of one of the components in the comments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html"&gt;https://martinfowler.com/articles/practical-test-pyramid.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>architecture</category>
      <category>microservices</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
