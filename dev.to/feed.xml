<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Why web3 matters</title>
      <author>Cat McGee</author>
      <pubDate>Tue, 28 Sep 2021 20:08:03 +0000</pubDate>
      <link>https://dev.to/catmcgeecode/why-web3-matters-4oe0</link>
      <guid>https://dev.to/catmcgeecode/why-web3-matters-4oe0</guid>
      <description>&lt;p&gt;&lt;a href="https://blog.mcgee.cat/why-web3-matters"&gt;Original post on Hashnode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, a Twitter thread entitled &lt;em&gt;Why web3 matters&lt;/em&gt; went viral. And as much as I love this sentiment, I couldn't help but roll my eyes when reading through Chris Dixon's buzzword-filled tweets. That kind of blockchain lingo is loved by crypto salespeople and NFT grifters, but is quite far removed from people who, well... actually want to understand why web3 matters. It doesn't help that Twitter is a cesspool for controversies, and Chris's thread seemed to divide people into two groups - you either agree with everything he said 100% making you a delusional zoomer, or you're an old-fashioned granddad who can't keep up with the times. I'm here to help you make up your own mind, and hopefully find yourself somewhere in between these two extremes.&lt;/p&gt;

&lt;p&gt;If you're someone who loves to read irrationally enthusiastic reassurances about the next blockchain get-rich-quick scheme, this post is not for you. But if you're fed up of the constant bombardment of jargon and actually want to understand why on earth Twitter is suddenly talking about a new web, read on. I'm going to tell you why web3 &lt;em&gt;actually&lt;/em&gt; matters and what it means for you - a person, not a venture capitalist. ðŸ˜‰&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-wrong-with-our-current-web"&gt;
  &lt;/a&gt;
  What's wrong with our current web?
&lt;/h2&gt;

&lt;p&gt;We've had two iterations of the web so far - known as, you guessed it, web1 and web2. Web1 was king from approximately 1990-2005, and most people using the web in those days were consumers rather than creators. Content was consumed by many but created by few, mainly obnoxiously nerdy tech people and forward-thinking news sites. It is now nicknamed the 'read-only web.'&lt;/p&gt;

&lt;p&gt;Web2 changed that, particularly with the introduction of social media. Suddenly, more and more people were posting, creating, and sharing their lives with the world. Those who were originally only reading news stories started publicly arguing with them. And the internet that we know today was born.&lt;/p&gt;

&lt;p&gt;But there's a problem. Everything that we post, share, comment, like, or furiously screenshot is owned by someone else. And it goes deeper - it's owned by 4 big companies: Google, Apple, Facebook, and Amazon. We'll call them GAFA.&lt;/p&gt;

&lt;p&gt;The web has gone from being created by few and consumed by many, to being created by many and consumed by many, to being &lt;strong&gt;created by many and owned by few&lt;/strong&gt;. GAFA have created a &lt;strong&gt;Data Economy&lt;/strong&gt;, feeding off of the content that we create and using it against us. They control the information we create, the information we see, and with that they're able to &lt;em&gt;gently&lt;/em&gt; exploit our human weaknesses by manipulating what we believe, which in turn makes ads more effective - the Data Economy business model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The company with the most data always wins.&lt;/strong&gt; Facebook buys out any and all threats to their social media monopoly - remember when WhatsApp was privacy-focussed? Or when Instagram was actually a non-toxic platform for friends to share photos? Google has made Bing a meme, Yahoo a boomers-only search engine, and reduced Mozilla to desperately holding onto the ethical part of the browser market. And Amazon has basically disrupted every market in existence and changed the course of the economy. But like, in a bad way.&lt;/p&gt;

&lt;p&gt;The Data Economy isn't just an exploitive and rigged business model, but it also has devastating consequences when things go wrong. When so much data is owned by one entity, it makes them a prime target for hacking. And oh boy, do these guys get hacked. For a glimpse into how insecure the Data Economy is, have a look at Wikipedia's &lt;a href="https://en.wikipedia.org/wiki/List_of_data_breaches"&gt;list of data breaches&lt;/a&gt;. And to find out if your data has been exposed to the public, enter your email into &lt;a href="https://haveibeenpwned.com/"&gt;Have I Been Pwned&lt;/a&gt;. Not only are there accidental data breaches, but there have been cases of &lt;a href="https://en.wikipedia.org/wiki/Facebook%E2%80%93Cambridge_Analytica_data_scandal"&gt;purposeful illegal selling of data&lt;/a&gt; from GAFA. There is no sign of this stopping, and no incentive to stop either. That's where web3 comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web3-ideal"&gt;
  &lt;/a&gt;
  The web3 ideal
&lt;/h2&gt;

&lt;p&gt;Web3 promises two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To remove the ability to make money from data&lt;/li&gt;
&lt;li&gt;To create incentives to make money on the internet through other means&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By achieving both these goals, we will no longer live in a Data Economy. Companies will have to find new ways to make money, and people will be able to take control of their own data. There will be no incentive to hack into data centres. We'll live in a world where &lt;strong&gt;the people consume, create, and own our information&lt;/strong&gt;, not in a world of surveillance capitalism that feeds 4 power-hungry data-hoarding entities.&lt;/p&gt;

&lt;p&gt;Sound unrealistic? Up until now, it has been. We've been relying on governments and companies to do the right thing, and we've seen how that's panned out. But if we can't trust people to enforce these promises, we can trust technology. So let's go through how web3 can technologically fulfill each of its promises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-the-ability-to-make-money-from-data"&gt;
  &lt;/a&gt;
  Remove the ability to make money from data
&lt;/h2&gt;

&lt;p&gt;Web3 has often been called the &lt;strong&gt;decentralized web&lt;/strong&gt;. While data is currently &lt;em&gt;centralized&lt;/em&gt; and owned by GAFA, web3 applications separate their data and store it on a large number of computers and hard drives. These computers are not owned by one company - the idea is that each person can own a small amount of data. Without one entity having access to data, there is no ability to make money from it. &lt;/p&gt;

&lt;p&gt;There are plenty of ways to accomplish this technologically. The most well-known solution to this currently is (brace yourself) &lt;em&gt;blockchain&lt;/em&gt;. Without going into boring details of how a blockchain works, it allows each computer to hold a small amount of data - a block in a chain. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://bitcoin.org/"&gt;Bitcoin&lt;/a&gt; and &lt;a href="https://ethereum.org/"&gt;Ethereum&lt;/a&gt; are the two biggest blockchains in existence, but others like &lt;a href="https://solana.com/"&gt;Solana&lt;/a&gt; and  &lt;a href="https://cardano.org/"&gt;Cardano&lt;/a&gt; are slowly catching up. There are hundreds of decentralized apps, aka dapps, already deployed on Ethereum, and building on the blockchain is getting easier by the minute. It is by far the most secure decentralized architecture.&lt;/p&gt;

&lt;p&gt;There are other ways to build a decentralized network. The obsession over and reliance on blockchain is, quite frankly, BS. There are decentralized storage companies out there (like &lt;a href="https://www.storj.io/"&gt;Storj&lt;/a&gt;) that pay any person to host some of their storage space to be a 'node' on their network, while allowing developers to store their data on these nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web3 is not blockchain&lt;/strong&gt; - this is an incredibly important point to understand. Blockchain is a web3 architecture, but it is not the only way to accomplish a decentralized web, and in most cases it is unnecessarily expensive. However, with blockchain comes &lt;strong&gt;cryptocurrency&lt;/strong&gt;, which brings us to our next point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-incentives-to-make-money-on-the-internet-through-other-means"&gt;
  &lt;/a&gt;
  Create incentives to make money on the internet through other means
&lt;/h2&gt;

&lt;p&gt;Without one entity having access to large amounts of data, we can't have a Data Economy. And removing the Data Economy already opens up new incentives to make money through other means. But when people talk about making money using web3, they're talking about crypto.&lt;/p&gt;

&lt;p&gt;Just a warning: some of this next part may sound similar to Chris's thread, but I promise it will actually be coherent. &lt;/p&gt;

&lt;p&gt;Crypto provides a financial incentive, known as &lt;strong&gt;tokens&lt;/strong&gt;, to participate in the building of a decentralized web. There are many ways to earn tokens - some examples are offering storage (like Storj), creating content, or sometimes even &lt;a href="https://www.forbes.com/sites/youngjoseph/2020/09/17/uniswap-ethereum/"&gt;being early adapters of the application.&lt;/a&gt; Companies can set up their own protocol for rewarding their users, and it cuts out the need for other third party services. There is no need to send data through AWS, Stripe, or PayPal, as tokens can be sent directly from the provider to the user.&lt;/p&gt;

&lt;p&gt;Tokens can also be sent directly from one user to another. No more relying on Google to give you your YouTube earnings, or directing your audience to Patreon so they can donate - users can directly 'tip' you a token if they like your content. There are also the famous NFTs, which, sorry Chris, do not let you &lt;em&gt;"own a piece of the internet"&lt;/em&gt;. NFTs are tokens too, but they are not equal in value to each other. While owning an OG token is like owning a dollar, owning an NFT is more like owning a painting. All dollars are equal in value, but not all paintings are equal in value. NFTs are each unique, and they're pretty cool - check out &lt;a href="https://opensea.io/"&gt;OpenSea&lt;/a&gt; if you're interested in getting into it.&lt;/p&gt;

&lt;p&gt;This token economy is exactly what the web was created for in the first place. It's direct. &lt;em&gt;People&lt;/em&gt; reward &lt;em&gt;people&lt;/em&gt; for providing a service or participating in a better world. There is no malicious data tracking or manipulation. No exploitation, no incessant ads, no algorithms designed to be addictive. No reliance on huge profit-driven companies. Just people interacting with people. That's web3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-where-are-we"&gt;
  &lt;/a&gt;
  So where are we?
&lt;/h2&gt;

&lt;p&gt;Most apps you use are still web2. The majority of dapps out there are purely for finance, like trading crypto or buying and selling NFTs. But we're getting there, and web3 is already beginning to expand into huge industries, like &lt;a href="https://audius.co/"&gt;music&lt;/a&gt;, &lt;a href="https://livepeer.org/"&gt;video streaming&lt;/a&gt;, and even &lt;a href="https://axieinfinity.com/"&gt;gaming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Web3 may currently seem pretty inaccessible, and when buzzword tweets go viral it continues to push the narrative that the decentralized web is only for people already in the know. But web2 was like that too. There are thousands of people passionately working to make this space more accessible for all, and you'll soon be using web3 apps without even knowing. &lt;/p&gt;

&lt;p&gt;It's super easy to start your own journey into web3, and you can get involved today by installing &lt;a href="https://metamask.io/"&gt;Metamask&lt;/a&gt;, a browser extension to make your browser compatible with blockchain apps. If you're a developer interested in getting into the web3 space, I cannot recommend &lt;a href="https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291"&gt;Nader Dabit&lt;/a&gt;'s content enough.&lt;/p&gt;

&lt;p&gt;Thanks for reading. This is my first ever post about web3, and was &lt;a href="https://blog.mcgee.cat/why-web3-matters"&gt;originally posted here&lt;/a&gt;. I'll be posting more about the decentralized web so if you're interested in reading my (potentially controversial) takes, make sure to follow me &lt;a href="https://blog.mcgee.cat/"&gt;on Hashnode&lt;/a&gt; or &lt;a href="https://twitter.com/messages/compose?recipient_id=2287174586&amp;amp;text=Hey%20Cat!"&gt;slide into my Twitter DMs&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>twitter</category>
      <category>discuss</category>
    </item>
    <item>
      <title>15 Developer Tools to Make You Super Productive</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Tue, 28 Sep 2021 19:12:17 +0000</pubDate>
      <link>https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a</link>
      <guid>https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a</guid>
      <description>&lt;p&gt;The best software developers arm themselves with superior knowledge of specific tools that get the job done.&lt;/p&gt;

&lt;p&gt;Pairing with experienced developers leaves you with many tips, tricks, shortcuts, and tools that they have access to and mastered to help them focus on a productâ€™s business logic.&lt;/p&gt;

&lt;p&gt;Today, Iâ€™ll show you 15 developer tools thatâ€™ll improve your productivity immensely.&lt;/p&gt;

&lt;p&gt;Letâ€™s go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cloudinary"&gt;
  &lt;/a&gt;
  1. Cloudinary
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloudinary.com"&gt;Cloudinary&lt;/a&gt; is a full-stack media service that stores, transforms, optimizes, and delivers all your media assets with easy-to-use APIs and widgets.&lt;/p&gt;

&lt;p&gt;Cloudinary is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a feature/app that stores tons of images and videos.&lt;/li&gt;
&lt;li&gt;Build a UI that allows single and multiple uploads. Cloudinary provides a plug-and-play skinnable UI widget, so you &amp;amp; your team donâ€™t need to build any UI.&lt;/li&gt;
&lt;li&gt;Make your app and website load faster. Cloudinary delivers media assets insanely quickly via their global CDN!&lt;/li&gt;
&lt;li&gt;Build a feature/app for video delivery and transformation like Instagram. Cloudinary provides several APIs to help with that.&lt;/li&gt;
&lt;li&gt;Build a backend service that crops, manipulates, transforms, reads text from images, extracts captions from videos using AI, compresses and optimizes media files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloudinary provides several &lt;a href="https://cloudinary.com/documentation/cloudinary_sdks"&gt;SDKs for different languages and frameworks&lt;/a&gt; to make integration a walk in the park!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-sourcegraph"&gt;
  &lt;/a&gt;
  2. Sourcegraph
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://sourcegraph.com"&gt;Sourcegraph&lt;/a&gt; is a software tool that allows you to search all of your code. It provides precise code intelligence and insights. With Sourcegraph, you search small, medium and enormous codebases like &lt;a href="https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/torvalds/linux%24+list_head&amp;amp;patternType=literal"&gt;Linux&lt;/a&gt;, &lt;a href="https://sourcegraph.com/github.com/kubernetes/kubernetes"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://sourcegraph.com/github.com/chromium/chromium"&gt;Chrome&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;Sourcegraph is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search all of your &lt;a href="https://learn.sourcegraph.com/how-to-search-code-with-sourcegraph-using-literal-patterns"&gt;public and private code across several repositories&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Find all occurrences of code across your organization.&lt;/li&gt;
&lt;li&gt;Search for how other developers use specific API and code blocks across more than two million open source repositories on GitHub and Gitlab.&lt;/li&gt;
&lt;li&gt;Refactor codebase easily and in record time.&lt;/li&gt;
&lt;li&gt;Provide precise code intelligence for all of your code.&lt;/li&gt;
&lt;li&gt;Create real-time dashboards to track the progress of migrations, deprecations, or usage of anything that can be found with a Sourcegraph search.&lt;/li&gt;
&lt;li&gt;Automate large-scale code changes. You can find and modify code across several repositories with a single fileâ€”no need to make several PRs across several code repositories to make a simple change. &lt;a href="https://about.sourcegraph.com/batch-changes"&gt;Sourcegraph Batch changes&lt;/a&gt; can do that for you!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-insomnia"&gt;
  &lt;/a&gt;
  3. Insomnia
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://insomnia.rest"&gt;Insomnia&lt;/a&gt; is a software tool that enables you to test API endpoints quickly. &lt;/p&gt;

&lt;p&gt;Insomnia is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test Rest, Soap, GraphQL and GRPC API endpoints while building.&lt;/li&gt;
&lt;li&gt;Generate API documentation for your codebase.&lt;/li&gt;
&lt;li&gt;Build API pipelines.&lt;/li&gt;
&lt;li&gt;Design APIs using OpenAPI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-netlify"&gt;
  &lt;/a&gt;
  4. Netlify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt; is a service that builds and deploys your front-end code quickly. It provides a very efficient workflow for creating apps with many developers.&lt;/p&gt;

&lt;p&gt;Netlify is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy front-end code to the Internet with ease.
Build Jamstack apps. Netlify places a massive bet on Jamstack and provides tools and resources to build and develop Jamstack apps.&lt;/li&gt;
&lt;li&gt;Generate new unique and publicly available URLs on every pull request and commit for other developers and QA folks to test what youâ€™re building on the fly.
Serve static assets with fast CDN.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-retool"&gt;
  &lt;/a&gt;
  5. Retool
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com"&gt;Retool&lt;/a&gt; is a software tool that enables you to build internal tools without writing a line of code. &lt;/p&gt;

&lt;p&gt;Retool is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a dashboard / UI internally to monitor and modify data. With Retool, you can connect to your database or any data source and use their drag-and-drop components to build your internal tools remarkably fast.&lt;/li&gt;
&lt;li&gt;Make non-developers have access to the database without setting up a database environment for them.&lt;/li&gt;
&lt;li&gt;Provide customer support with tools to debug customer problems without building a new set of tools for them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-laravel-forge"&gt;
  &lt;/a&gt;
  6. Laravel Forge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://forge.laravel.com"&gt;Laravel Forge&lt;/a&gt; is a software service that eliminates the headache of building, managing, fine-tuning, deploying and upgrading servers for PHP applications.&lt;/p&gt;

&lt;p&gt;Laravel Forge is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be responsible for your servers with minimal or no knowledge of DevOps.&lt;/li&gt;
&lt;li&gt;Deploy and manage Laravel, WordPress, Statamic, PHP, and Database server instances.&lt;/li&gt;
&lt;li&gt;Focus on building applications without the additional headache of managing queue workers and scaling server instances.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-aws-amplify"&gt;
  &lt;/a&gt;
  7. AWS Amplify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/amplify"&gt;AWS Amplify&lt;/a&gt; is a set of tools and services that front-end, web and mobile developers can use together or individually to build scalable full-stack applications powered by AWS.&lt;/p&gt;

&lt;p&gt;AWS Amplify is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy static web apps to the Internet in a few clicks.&lt;/li&gt;
&lt;li&gt;Provide non-developers with an admin UI to manage app content.&lt;/li&gt;
&lt;li&gt;Add authentication to your apps without building/managing/writing auth code from scratch.&lt;/li&gt;
&lt;li&gt;Provide a simple mechanism for managing user-generated content for your app in public, protected or private AWS storage buckets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-auth0"&gt;
  &lt;/a&gt;
  8. Auth0
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://auth0.com"&gt;Auth0&lt;/a&gt; is a service best known for providing developers authentication, federated identity, single sign-on, and serverless features. In addition, they manage and maintain the most extensively used open-source authentication module, passport, in the global developer ecosystem!&lt;/p&gt;

&lt;p&gt;Auth0 is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add primary and social (Facebook, Google, LinkedIn, Dropbox) authentication to your web and mobile apps.&lt;/li&gt;
&lt;li&gt;Add Single Sign-On features to your suite of apps.&lt;/li&gt;
&lt;li&gt;Add Federated Identity to your apps.&lt;/li&gt;
&lt;li&gt;Build serverless services. Auth0 webtask enables you to develop serverless apps.&lt;/li&gt;
&lt;li&gt;Add Passwordless authentication to your apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-garden"&gt;
  &lt;/a&gt;
  9. Garden
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://garden.io"&gt;Garden&lt;/a&gt; is a cloud service that enables fast and efficient Kubernetes development. Itâ€™s a tool that simplifies and manages the development of your Kubernetes instances while building distributed applications.&lt;/p&gt;

&lt;p&gt;Garden is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You donâ€™t want to deal with managing and developing Kubernetes instances yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-bitrise"&gt;
  &lt;/a&gt;
  10. Bitrise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.bitrise.io"&gt;Bitrise&lt;/a&gt; is a fast, flexible and scalable mobile CI/CD service that simplifies the development and deployment of all your mobile apps.&lt;/p&gt;

&lt;p&gt;Bitrise is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need over the air deployment service to share your app updates quickly with users&lt;/li&gt;
&lt;li&gt;Run several test runners against mobile app code PRs automatically&lt;/li&gt;
&lt;li&gt;Build, deploy and release your code host (e.g. Github) branches automatically into executables for different platforms. E.g. With your hybrid apps such as Flutter and Ionic, Bitrise automatically builds the bundles for Android and iOs platforms.&lt;/li&gt;
&lt;li&gt;Need a service to handle all the DevOps for your mobile apps while focusing on code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#11-vercel"&gt;
  &lt;/a&gt;
  11. Vercel
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt; is a developer-focused service. As a result, itâ€™s one of the best tools to deploy any front-end app in less than three clicks.&lt;/p&gt;

&lt;p&gt;Vercel is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy your front-end codebase with one click. It allows you to import a repo from GitHub, Gitlab and Bitbucket and returns the deployed URL in record time.&lt;/li&gt;
&lt;li&gt;Get a preview URL for every change pushed to your code host.&lt;/li&gt;
&lt;li&gt;Get started with a battle-tested front-end framework and e-commerce templates.&lt;/li&gt;
&lt;li&gt;Ship production-ready, highly available fast websites with Next.js (Vercel authors and maintains this framework). Static assets are served through Vercelâ€™s CDN automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#12-easycron"&gt;
  &lt;/a&gt;
  12. EasyCron
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.easycron.com"&gt;Easycron&lt;/a&gt; is a service that runs all your cron jobs for you on the cloud. No hassles, easy setup!&lt;/p&gt;

&lt;p&gt;Easycron is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You donâ€™t want to go through the hassle of setting up crontabs and infrastructure on your servers for recurring jobs.&lt;/li&gt;
&lt;li&gt;You have a serverless function or API URL that needs to run recurrently. You can add it to EasyCron and set the recurring times via the UI. Thatâ€™s it! If the jobs fail at any time, EasyCron sends notifications to you about the failure.&lt;/li&gt;
&lt;li&gt;You want to have the luxury of turning your jobs on and off easily and manually running them. EasyCron provides an easy UI to manage your cron jobs.&lt;/li&gt;
&lt;li&gt;You want to clone existing jobs. EasyCron handles that as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#13-wakatime"&gt;
  &lt;/a&gt;
  13. WakaTime
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wakatime.com"&gt;WakaTime&lt;/a&gt; is a tool that automatically reports stats and metrics right from your code editor. In addition, it provides a dashboard with a breakdown of time spent working on tasks.&lt;/p&gt;

&lt;p&gt;WakaTime is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You want to measure the time you spend on coding tasks.&lt;/li&gt;
&lt;li&gt;You want to know the files and areas of a project or codebase you devote time to.&lt;/li&gt;
&lt;li&gt;You want to set coding goals.&lt;/li&gt;
&lt;li&gt;Email reports of coding stats.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over &lt;a href="https://wakatime.com/integrations"&gt;50 open-source editor plugins&lt;/a&gt; are available for WakaTime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-eversql"&gt;
  &lt;/a&gt;
  14. EverSQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.eversql.com"&gt;EverSQL&lt;/a&gt; is a service that predicts performance bottlenecks and automatically optimizes your SQL queries using AI.&lt;/p&gt;

&lt;p&gt;EverSQL is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You donâ€™t want to hire a DBA.&lt;/li&gt;
&lt;li&gt;Need to improve the performance of your SQL queries.&lt;/li&gt;
&lt;li&gt;Regularly &lt;a href="https://www.eversql.com/sql-query-optimizer"&gt;submit SQL queries for optimization&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#15-ngrok"&gt;
  &lt;/a&gt;
  15. Ngrok
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ngrok.com"&gt;Ngrok&lt;/a&gt; is a tool that provides an instant, secure and shareable URL to your localhost server through any NAT or firewall.&lt;/p&gt;

&lt;p&gt;Ngrok is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share a locally running project with co-workers.&lt;/li&gt;
&lt;li&gt;Testing any auth flow from sites such as Twitter that expect a valid HTTPS connection for the callback.&lt;/li&gt;
&lt;li&gt;Replay HTTP requests made to your URL for introspection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#more-tools"&gt;
  &lt;/a&gt;
  More Tools?
&lt;/h2&gt;

&lt;p&gt;I'll like to know what services &amp;amp; software tools make you super productive as a software developer. &lt;/p&gt;

&lt;p&gt;Feel free to drop it in the comment section! &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Top 7 Featured DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 28 Sep 2021 18:11:42 +0000</pubDate>
      <link>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1nh2</link>
      <guid>https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-1nh2</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preventing-alert-fatigue"&gt;
  &lt;/a&gt;
  Preventing alert fatigue
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/dvddpl"&gt;@dvddpl&lt;/a&gt;
 came through with a very helpful and empathetic guide to dealing with the apprehension and frustration that comes from "alert fatigue".&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/dvddpl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UboDmADM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JXv2xuBV--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/132615/9bcf8385-383b-4b64-b5cc-d8a9f4f675b8.jpeg" alt="dvddpl"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dvddpl/when-everything-is-urgent-nothing-is-what-is-alarm-fatigue-and-how-to-deal-with-it-1321" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;When everything is urgent, nothing is. What is Alarm Fatigue and how to deal with it.&lt;/h2&gt;
      &lt;h3&gt;Davide de Paolis ãƒ» Sep 23 ãƒ» 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#mentalhealth&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#learning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#group-design-challenge"&gt;
  &lt;/a&gt;
  Group Design Challenge
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/zernonia"&gt;@zernonia&lt;/a&gt;
 shared a handful of designs so that anyone who wants to practice web design can do so without a cost barrier. Amazing!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/zernonia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_rKtpOgN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0SfoyLS7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/400444/8626e93e-1c07-44f2-8eab-1f0bbd87bfed.jpeg" alt="zernonia"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/zernonia/i-design-you-build-frontend-challenge-1-158a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Design, You Build! - Frontend Challenge #1&lt;/h2&gt;
      &lt;h3&gt;Zernonia ãƒ» Sep 25 ãƒ» 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#idesignyoubuild&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#your-next-effective-opensource-contribution"&gt;
  &lt;/a&gt;
  Your next (effective) open-source contribution
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/pragativerma18"&gt;@pragativerma18&lt;/a&gt;
 shared what they learned along their journey in open-source â€” in the hopes that it will allow you to give back to the community.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pragativerma18" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kl_m4K1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--JR-0Kc_W--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/242611/68277387-0fa0-4c79-ad6f-4be3ddc940b7.jpeg" alt="pragativerma18"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pragativerma18/how-to-pick-an-open-source-project-to-contribute-to-4kak" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to pick an open-source project to contribute to?&lt;/h2&gt;
      &lt;h3&gt;Pragati Verma ãƒ» Sep 24 ãƒ» 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#question-styles-that-will-set-you-up-for-success"&gt;
  &lt;/a&gt;
  Question styles that will set you up for success
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/erikmelone"&gt;@erikmelone&lt;/a&gt;
 believes that there are certain ways to phrase typical questions that can help better set you up for success. In this post, we'll take a look at a few of them.   &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/erikmelone" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2jhTZclY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3VYrRmHp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/694604/abe33402-1bc3-40ca-839f-6545a70a8082.jpeg" alt="erikmelone"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/erikmelone/how-to-ask-the-right-questions-as-a-junior-developer-5701" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 Ways you can ask Better Questions as a Junior Developer&lt;/h2&gt;
      &lt;h3&gt;Erik Melone ãƒ» Sep 25 ãƒ» 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#culture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-to-implement-automatic-link-shortening-in-react"&gt;
  &lt;/a&gt;
  How to implement automatic link shortening in React
&lt;/h2&gt;

&lt;p&gt;"Whether you are looking to add automatic URL shortening to your existing React app, or you want to get detailed analytics of all the links shared on your mobile/web app, emly.ccâ€™s URL shortener has a detailed API to get you started within few minutes." â€” thanks &lt;a class="mentioned-user" href="https://dev.to/eaetukudo"&gt;@eaetukudo&lt;/a&gt;
! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/eaetukudo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72k6CwHq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--9L9EGwJW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/335531/499c7927-e174-408e-8400-98185445eb5e.jpg" alt="eaetukudo"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/eaetukudo/build-automatic-url-shortener-with-react-and-emly-2ob5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build automatic URL shortener with react and Emly&lt;/h2&gt;
      &lt;h3&gt;Emmanuel Etukudo ãƒ» Sep 22 ãƒ» 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#reactnative&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#what-makes-react-fun"&gt;
  &lt;/a&gt;
  What makes React fun
&lt;/h2&gt;

&lt;p&gt;"What makes React fun is that we can take common patterns and turn them into reusable components, making our development life easier and our code shorter." says &lt;a class="mentioned-user" href="https://dev.to/trishathecookie"&gt;@trishathecookie&lt;/a&gt;
. No better example of this than React Context!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/trishathecookie" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcthR5KL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--n1nSzqKc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/712840/9bd48162-01ff-4154-aec8-5783fefee55a.jpg" alt="trishathecookie"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/trishathecookie/react-creating-a-reusable-form-using-react-context-5eof" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React: How to create a reusable form using React Context&lt;/h2&gt;
      &lt;h3&gt;Trisha Lim ãƒ» Sep 25 ãƒ» 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#es6&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#10-open-source-programs-for-students"&gt;
  &lt;/a&gt;
  10 open source programs for students
&lt;/h2&gt;

&lt;p&gt;In this post, &lt;a class="mentioned-user" href="https://dev.to/pb"&gt;@pb&lt;/a&gt;
 shares some of the open source programs which you can apply to as a student to gain experience, work with some of the most informed people in the industry (from the comfort of your home) and earn a generous stipend! &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3sfWXRc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--52cZyHb1--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/618537/3cd782cd-1a3a-4926-9eb6-1e55fba23a61.jpg" alt="pb"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pb/open-source-programs-for-students-to-participate-55gm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Open Source Programs for Students to participate&lt;/h2&gt;
      &lt;h3&gt;Pawel ãƒ» Sep 26 ãƒ» 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Protect Your components with React Router</title>
      <author>Med Amine Fh</author>
      <pubDate>Tue, 28 Sep 2021 18:09:26 +0000</pubDate>
      <link>https://dev.to/medaminefh/protect-your-components-with-react-router-4hf7</link>
      <guid>https://dev.to/medaminefh/protect-your-components-with-react-router-4hf7</guid>
      <description>&lt;p&gt;If you're using &lt;strong&gt;react router&lt;/strong&gt; in your App, then you probably wanted to protect some routes from specific users, or to Redirect some users to their own page or component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-to-do-"&gt;
  &lt;/a&gt;
  so what to do ?
&lt;/h2&gt;

&lt;p&gt;In this blog we'll see How to handle that with some simple checks&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tnNFYONO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/7efs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tnNFYONO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.gifer.com/7efs.gif" alt="checks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So at the beginning this is how our App looks like&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r3Ccl5PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86dmp37s365dv1bfadiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r3Ccl5PA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86dmp37s365dv1bfadiz.png" alt="protectedRoute2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point every user can access those two components (Admin, Home)&lt;/p&gt;

&lt;p&gt;But that's not what i want, I want just the &lt;strong&gt;admin&lt;/strong&gt; to have access to the "&lt;code&gt;/admin&lt;/code&gt;" route.&lt;/p&gt;

&lt;p&gt;And those who don't have access to that route, I need to redirect them to the &lt;strong&gt;Home&lt;/strong&gt; Page ("&lt;code&gt;/&lt;/code&gt;" route)&lt;/p&gt;

&lt;p&gt;So the 1st Step is to create the &lt;strong&gt;ProtectedRoute&lt;/strong&gt; Component.&lt;/p&gt;

&lt;p&gt;You can create it in the same file, but for a cleaner code we'll create it on a new file&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-file-and-name-it-to-what-you-want-ill-name-it-raw-protectedroutejs-endraw-"&gt;
  &lt;/a&gt;
  1- Create a file and name it to what you want. I'll name it &lt;code&gt;protectedRoute.js&lt;/code&gt;.
&lt;/h3&gt;



&lt;h3&gt;
  &lt;a href="#2-paste-this-code-in-that-file"&gt;
  &lt;/a&gt;
  2- Paste this code in that file
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TU2rXdX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82t2mq0oa0pp48ftivtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TU2rXdX8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82t2mq0oa0pp48ftivtg.png" alt="protectedRoute1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So basically we check if there is a &lt;strong&gt;token&lt;/strong&gt; stored in our &lt;strong&gt;LocalStorage&lt;/strong&gt; or not.&lt;/p&gt;

&lt;p&gt;If The check is &lt;strong&gt;Truthy&lt;/strong&gt; then he Have access to that route.&lt;br&gt;
 If Not, He will be Redirected to the Home Page (thanks to the &lt;code&gt;&amp;lt;Redirect /&amp;gt;&lt;/code&gt; Component).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You need to change that check to suit your case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don't forget to &lt;strong&gt;export&lt;/strong&gt; your Component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-finally-well-use-that-protectedroute-in-our-app"&gt;
  &lt;/a&gt;
  3- Finally we'll use that ProtectedRoute in our &lt;strong&gt;App&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Import The &lt;em&gt;ProtectedRoute&lt;/em&gt; Component from where you created it&lt;br&gt;
you can name it what you want if you export it with the &lt;strong&gt;default&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ov6OPN_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arjssd40yki0qz07i80v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ov6OPN_j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arjssd40yki0qz07i80v.png" alt="protectedRoute3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here we need to changed The &lt;br&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;Route exact path="/admin" component={Admin}  /&amp;gt;&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;ProtectedRoute exact path="/admin" component={Admin}  /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-thats-it-go-try-it-out"&gt;
  &lt;/a&gt;
  And that's it ðŸŽ‰, Go Try it out.
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>security</category>
    </item>
    <item>
      <title>Adding Sentry to Spring Boot Securely</title>
      <author>Jeffrey Fate</author>
      <pubDate>Tue, 28 Sep 2021 18:02:12 +0000</pubDate>
      <link>https://dev.to/jeffreyfate/adding-sentry-to-spring-boot-securely-52fl</link>
      <guid>https://dev.to/jeffreyfate/adding-sentry-to-spring-boot-securely-52fl</guid>
      <description>&lt;p&gt;Observability.&lt;/p&gt;

&lt;p&gt;When I started working with the microservices at my job about 4 months ago, there were numerous ways to know a bug made it to production.&lt;/p&gt;

&lt;p&gt;Slack alerts. Cloudwatch logs. Production support.&lt;/p&gt;

&lt;p&gt;There was no aggregation of errors and alerting.&lt;/p&gt;

&lt;p&gt;I had never used Sentry, but heard a lot about it over the last couple of years. It seemed like a reasonable solution to this problem.&lt;/p&gt;

&lt;p&gt;Other folks at my job agreed we should try it. Here's what it took to integrate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;To understand fully what's going on in each of the services, it made sense to capture EVERYTHING, at least at first. This meant uncaught and caught exceptions, including the ones already caught by any @ExceptionHandlers.&lt;/p&gt;

&lt;p&gt;We also wanted to keep any secrets out of our code and in AWS Secrets Manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-the-instructions"&gt;
  &lt;/a&gt;
  Follow The Instructions
&lt;/h2&gt;

&lt;p&gt;I found vast documentation on &lt;a href="https://docs.sentry.io/platforms/java/guides/spring-boot/"&gt;Sentry's Spring Boot docs&lt;/a&gt; pages. However, there wasn't a solution that let us store the DSN securely, outside the source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My Solution
&lt;/h2&gt;

&lt;p&gt;To store the DSN elsewhere and pull it in at runtime, I used the AWS Secrets Manager SDK. &lt;a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/manage-credentials-using-aws-secrets-manager.html"&gt;Here's a decent tutorial from AWS&lt;/a&gt; on how to get that setup. Now let's focus on the Sentry part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;Combining the documentation from Sentry and the slightly different requirements we had, I created a Spring configuration that provides a Sentry OptionsConfiguration bean:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@Bean
@Primary
Sentry.OptionsConfiguration&amp;lt;SentryOptions&amp;gt; sentryOptionsConfiguration() {
    return options -&amp;gt; {
        SentryProperties properties = (SentryProperties) options;
        properties.setDsn(secretService.getSentrySecret().getDsn());
        properties.setEnvironment(activeProfile);
        properties.setDebug(true);
        properties.setExceptionResolverOrder(Ordered.HIGHEST_PRECEDENCE);
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because Sentry provides an OptionsConfiguration themselves, I used &lt;code&gt;@Primary&lt;/code&gt; to ensure mine took precedence.&lt;/p&gt;

&lt;p&gt;I used the Spring profile name to set the environment; for example, &lt;code&gt;QA&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To make sure we see all handled errors, I set the exception resolver order to &lt;code&gt;Ordered.HIGHEST_PRECEDENCE&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#properties"&gt;
  &lt;/a&gt;
  Properties
&lt;/h3&gt;

&lt;p&gt;I thought the code changes would be enough. I was wrong.&lt;/p&gt;

&lt;p&gt;Turns out Sentry &lt;strong&gt;requires&lt;/strong&gt; the property &lt;code&gt;sentry.dsn&lt;/code&gt; to be set to something or the Sentry bootstrap fails when the Spring application context is built.&lt;/p&gt;

&lt;p&gt;The solution:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sentry.dsn=dummy&lt;/code&gt; in my &lt;code&gt;application.properties&lt;/code&gt; file&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Sentry is an extremely useful tool that has a friendly and clear interface. We use it to see production issues and have more context of issues reported by our QA team.&lt;/p&gt;

&lt;p&gt;With these small tweaks, we are able to get the data we need to resolve errors fast.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>observability</category>
      <category>springboot</category>
      <category>java</category>
    </item>
    <item>
      <title>Electron Adventures: Episode 67: Malina</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Tue, 28 Sep 2021 17:49:35 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-67-malina-518j</link>
      <guid>https://dev.to/taw/electron-adventures-episode-67-malina-518j</guid>
      <description>&lt;p&gt;In this series we've tried out a bunch of different frameworks, from the omnipresent jQuery and React to ones you've at least heard of like Svelte, Vue, and D3, to completely obscure Marko.&lt;/p&gt;

&lt;p&gt;Well, time for another one you've never heard of - &lt;a href="https://malinajs.github.io/docs/"&gt;Malina&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to explain Malina is that Malina is to Svelte what Preact is to React. It's a simpler version with some different performance choices. If you know Svelte, Malina shouldn't be too difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;As usual, we'll start by setting up a fresh Malina project, then add Electron to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-malina episode-67-malina
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;episode-67-malina
&lt;span class="nv"&gt;$ &lt;/span&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; electron
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-indexjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;index.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We can use the same one as before, just changing the port number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;electron&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BrowserWindow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;webPreferences&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/preload.js`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maximize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:7000/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createWindow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;window-all-closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's create empty &lt;code&gt;preload.js&lt;/code&gt;. And remove &lt;code&gt;package-lock.json&lt;/code&gt; from default &lt;code&gt;.gitignore&lt;/code&gt; as we definitely want them in the repo, especially for a young and non-prod framework like Malina.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-publicindexhtml-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;public/index.html&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;I customized a few things - removed the hardcoded title so the app can manage it, added UTF-8 declaration, and changed it to standard 2 space indentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/malinajs.svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/bundle.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcmainjs-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/main.js&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Just as it was created except making style consistent with the series:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.xht&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcappxht-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/App.xht&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.xht&lt;/code&gt; is Malina's equivalent of &lt;code&gt;.svelte&lt;/code&gt; / &lt;code&gt;.vue&lt;/code&gt; and such.&lt;/p&gt;

&lt;p&gt;I did a few tiny changes - using 2 spaces indetation instead of 4, styling consistent with the rest of the series, and making it use dark mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;degrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./malinajs.svg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Malina.js Logo"&lt;/span&gt; &lt;span class="na"&gt;style:transform=&lt;/span&gt;&lt;span class="s"&gt;{`rotate(${degrees}deg)`}/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello {name}!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;{name}&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;{$&lt;/span&gt;&lt;span class="na"&gt;element.focus&lt;/span&gt;&lt;span class="err"&gt;()}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Edit and save file &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;src/App.xht&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; to reload&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nd"&gt;:global&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.2s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see most of it looks like Svelte, but this line has a lot of extra syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;{name}&lt;/span&gt; &lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;{$&lt;/span&gt;&lt;span class="na"&gt;element.focus&lt;/span&gt;&lt;span class="err"&gt;()}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Malina &lt;code&gt;:value={name}&lt;/code&gt; is shortcut for Svelte's &lt;code&gt;bind:value={name}&lt;/code&gt;. &lt;code&gt;*{}&lt;/code&gt; is Malina's equivalent of Svelte's &lt;code&gt;use:{}&lt;/code&gt;. In both cases longer Svelte syntax works as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;Here's the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6Djyu5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyh1i51ka8e5t61fo0xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6Djyu5k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyh1i51ka8e5t61fo0xz.png" alt="Episode 67 Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we got Hello World working in Malina, let's try to port our hex editor!&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-67-malina"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
      <category>svelte</category>
    </item>
    <item>
      <title>AutoMapper in C#</title>
      <author>manoj</author>
      <pubDate>Tue, 28 Sep 2021 17:14:35 +0000</pubDate>
      <link>https://dev.to/jsdevelopermano/automapper-in-c-2ifn</link>
      <guid>https://dev.to/jsdevelopermano/automapper-in-c-2ifn</guid>
      <description>&lt;p&gt;AutoMapper in C# is a mapper between two objects. That is AutoMapper is an object-object mapper. It maps the properties of two different objects by transforming the input object of one type to the output object of another type.&lt;/p&gt;

&lt;p&gt;It also provides some interesting facts to take the dirty work out of figuring out how to map an object of type A with an object of type B as long as the object of type B follows AutoMapperâ€™s established convention.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Letâ€™s discuss the step-by-step procedure to use AutoMapper in C#.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-installing-the-automapper-library"&gt;
  &lt;/a&gt;
  1: Installing the AutoMapper library
&lt;/h3&gt;

&lt;p&gt;The AutoMapper is an open-source library present in &lt;a href="https://github.com/AutoMapper"&gt;GitHub&lt;/a&gt;. To install this library, open the Package Manager Console window and then type the following command and press enter key to install the AutoMapper library in your project:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt; Install-Package AutoMapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you installed the AutoMapper library, then it will add a reference to the AutoMapper dll which you can find in the project references section as shown in the below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2IYxdA-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zhwtgwy9r6s4dk2punm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2IYxdA-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zhwtgwy9r6s4dk2punm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-initializing-or-configuring-the-automapper"&gt;
  &lt;/a&gt;
  2: Initializing or Configuring the AutoMapper
&lt;/h3&gt;

&lt;p&gt;Once you have defines your types (i.e. classes) then you can create a mapper for the two types using the constructor of MapperConfiguration class. You can create only one MapperConfiguration instance per AppDomain and should be instantiated during the application start-up. The syntax to create the MapperConfiguration instance is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Initialize the mapper
  var config = new MapperConfiguration(cfg =&amp;gt;
               cfg.CreateMap&amp;lt;Employee, EmployeeDTO&amp;gt;()
            );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The type on the left is the source type i.e. TSource, in our example, it will be going to Employee object, and the type on the right is the destination type i.e. TDestination, in our example, it will be going to EmployeeDTO object. So, two maps the Employee with EmployeeDTO, you need to create the mapper configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System;
using AutoMapper;
namespace AutoMapperDemo
{
    class Program
    {
        static void Main(string[] args)
        {
            //Initialize the mapper
            var config = new MapperConfiguration(cfg =&amp;gt;
                    cfg.CreateMap&amp;lt;Employee, EmployeeDTO&amp;gt;()
                );

            //Creating the source object
            Employee emp = new Employee
            {
                Name = "James",
                Salary = 20000,
                Address = "London",
                Department = "IT"
            };

            //Using automapper
            var mapper = new Mapper(config);
            var empDTO = mapper.Map&amp;lt;EmployeeDTO&amp;gt;(emp);
            //OR
            //var empDTO2 = mapper.Map&amp;lt;Employee, EmployeeDTO&amp;gt;(emp);

            Console.WriteLine("Name:" + empDTO.Name + ", Salary:" + empDTO.Salary + ", Address:" + empDTO.Address + ", Department:" + empDTO.Department);
            Console.ReadLine();
        }
    }

    public class Employee
    {
        public string Name { get; set; }
        public int Salary { get; set; }
        public string Address { get; set; }
        public string Department { get; set; }
    }

    public class EmployeeDTO
    {
        public string Name { get; set; }
        public int Salary { get; set; }
        public string Address { get; set; }
        public string Department { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ref: &lt;a href="https://dotnettutorials.net/lesson/automapper-in-c-sharp/"&gt;https://dotnettutorials.net/lesson/automapper-in-c-sharp/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Working with ZIP files in LuaRT</title>
      <author>Sam</author>
      <pubDate>Tue, 28 Sep 2021 17:09:06 +0000</pubDate>
      <link>https://dev.to/samyeyo/working-with-zip-files-in-luart-2lm0</link>
      <guid>https://dev.to/samyeyo/working-with-zip-files-in-luart-2lm0</guid>
      <description>&lt;p&gt;&lt;a href="https://www.luart.org"&gt;LuaRT&lt;/a&gt; provides a builtin zip module to work with compressed files in ZIP format, without any additional dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zip-archive-files"&gt;
  &lt;/a&gt;
  ZIP archive files
&lt;/h2&gt;

&lt;p&gt;ZIP is a file format that supports lossless compression. A lossless compression algorithm allows the original data to be perfectly reconstructed from the compressed data. A ZIP file contains one or more compressed files, making it an ideal way to reduce the size of large files and keep related files together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-zip-object"&gt;
  &lt;/a&gt;
  The Zip Object
&lt;/h2&gt;

&lt;p&gt;The LuaRT 'zip' module provides an abstraction of zip files represented as a Zip Object. Only INFLATE/DEFLATE algorithms are supported.&lt;br&gt;
This module facilitates the creation of ZIP archive files and provides methods and properties for adding and extracting compressed files.&lt;/p&gt;

&lt;p&gt;To use the &lt;strong&gt;Zip&lt;/strong&gt; Object, you must first require for the 'zip' module :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- require the builtin 'zip' module for the Zip object&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extract-files-from-a-zip-archive"&gt;
  &lt;/a&gt;
  Extract files from a ZIP archive
&lt;/h2&gt;

&lt;p&gt;To extract files from an existing ZIP archive, you can use the &lt;strong&gt;Zip:extractall()&lt;/strong&gt; method :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;

&lt;span class="c1"&gt;-- Create a Zip value to represent the ZIP file 'archive.zip'&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"archive.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- open the ZIP archive for reading&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- extract and uncompress all the files in the current directory&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extractall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can extract a specific entry with the &lt;strong&gt;Zip:extract()&lt;/strong&gt; method :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- extract the ZIP entry "extractme.bin" in the current directory &lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"extractme.bin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A destination path can optionaly be provided :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- extract the ZIP entry "data.bin" in the specified directory &lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"data.bin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"C:\\Extract\\Me\\Here"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-zip-archive"&gt;
  &lt;/a&gt;
  Creating a ZIP archive
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Zip:open()&lt;/strong&gt; can be used to create an empty ZIP archive. Files can be added to the archive with the &lt;strong&gt;Zip:write()&lt;/strong&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;

&lt;span class="c1"&gt;-- Create a Zip value to represent the  ZIP file 'new.zip'&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"new.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- open the ZIP archive for writing&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"write"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- add a file to this archive&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C:\\addme.txt"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can recursively add entire directories too :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"C:\\I_am_a_directory_addme\\"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iterating-over-files-in-a-zip-archive"&gt;
  &lt;/a&gt;
  Iterating over files in a ZIP archive
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Zip&lt;/strong&gt; object is iterable with the &lt;strong&gt;each()&lt;/strong&gt; function, returning at every iteration the next entry name in the ZIP archive previously opened in "read" mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;

&lt;span class="c1"&gt;-- Create a Zip value to represent the ZIP file 'archive.zip'&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"archive.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- open the ZIP archive for reading&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- Iterate over each ZIP archive entries and extract it&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Extracting '"&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="s2"&gt;"'"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reading-zip-archive-entries-in-memory"&gt;
  &lt;/a&gt;
  Reading ZIP archive entries in memory
&lt;/h2&gt;

&lt;p&gt;ZIP archive entries can also be extracted in-memory using the &lt;strong&gt;Zip:read()&lt;/strong&gt; method :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight lua"&gt;&lt;code&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"zip"&lt;/span&gt;

&lt;span class="c1"&gt;-- Create a Zip value to represent the ZIP file 'archive.zip'&lt;/span&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"archive.zip"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- open the ZIP archive for reading&lt;/span&gt;
&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;-- print the content of the ZIP archive entry 'README.TXT'&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"README.TXT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, LuaRT's 'zip' module provides an easy way to manage ZIP archives. Additionally, you can read the complete Zip object specification &lt;a href="http://www.luart.org/doc/zip/zip.html"&gt;Zip Object&lt;/a&gt;&lt;/p&gt;

</description>
      <category>lua</category>
      <category>windows</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Emulate Devices on Google Chrome</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 28 Sep 2021 16:58:17 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/how-to-emulate-devices-on-google-chrome-ad5</link>
      <guid>https://dev.to/ubahthebuilder/how-to-emulate-devices-on-google-chrome-ad5</guid>
      <description>&lt;p&gt;When building websites, you have to keep in mind that many kinds of device are going to be viewing your site. These devices will come with different screen orientations. &lt;/p&gt;

&lt;p&gt;Thus, making your website look good on mobile, tablets and desktop is vital. &lt;/p&gt;

&lt;p&gt;You donâ€™t need to use third party tools to test your website. Google Chrome comes with an in-built device simulator. You can select any of the devices and view how your page will look on that device. You can even add custom devices which are not included in the list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simulate-a-device-on-chrome"&gt;
  &lt;/a&gt;
  Simulate a device on Chrome
&lt;/h3&gt;

&lt;p&gt;Open the Chrome DevTool. You can do this by clicking on F12.&lt;/p&gt;

&lt;p&gt;Alternatively, you can click on the three dots on the top right corner of your broswer window, select &lt;strong&gt;more tools&lt;/strong&gt; and then &lt;strong&gt;developer tools&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Next, toggle the device view by click on the devices icon next to the elements tab. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDEcMw6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838090369/GfRKha3kW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDEcMw6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838090369/GfRKha3kW.png" alt="Toggle device"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your page will be rendered into device mode. You will also notice the dropdown menu on top. From this drop down menu, you can select the device you want to emulate and view how you page will look on it.&lt;/p&gt;

&lt;p&gt;The list of devices on the dropdown is limited. You can also edit the list to select and add other devices to the drop-down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-custom-devices"&gt;
  &lt;/a&gt;
  Adding custom devices
&lt;/h3&gt;

&lt;p&gt;You can also create and add custom devices. To do so, click on the custom devices button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOx5Yk5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838238820/h2Z_ZulsR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOx5Yk5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838238820/h2Z_ZulsR.png" alt="Add devices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need to input the height and width of your target device, as well as its pixel density.&lt;/p&gt;

&lt;p&gt;You can find the screen resolution of any mobile device at this  &lt;a href="https://www.webmobilefirst.com/"&gt;website&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;You will also need to add a user agent string. A user agent string is a string of containing information about the computer requesting a web page.&lt;/p&gt;

&lt;p&gt;This website has the user agent string for  &lt;a href="https://deviceatlas.com/blog/list-of-user-agent-strings"&gt;all common devices&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Finally you can add the device. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uwrw0aWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838220385/8Grpk94qv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uwrw0aWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632838220385/8Grpk94qv.png" alt="preview.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you will be able to emulate that device and test your web page on it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;Device emulators are very good for responsive design. It's important to note that simulation in this case is just the visual part. The web browser does not run the operating system.&lt;/p&gt;

&lt;p&gt;Don't forget to sign up for my  &lt;a href="https://www.getrevue.co/profile/ubahthebuilder"&gt;newsletter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get Started with React Native, Redux and TypeScript</title>
      <author>Raji Oluwatobiloba</author>
      <pubDate>Tue, 28 Sep 2021 16:40:40 +0000</pubDate>
      <link>https://dev.to/tobilastik/get-started-with-react-native-redux-and-typescript-4gpi</link>
      <guid>https://dev.to/tobilastik/get-started-with-react-native-redux-and-typescript-4gpi</guid>
      <description>&lt;p&gt;One of the popular state management tools out there is Redux. &lt;/p&gt;

&lt;p&gt;Setting up a Typescript React Native Project with Redux can be tricky for beginners, in this article, I will teach you how you can easily get started.&lt;/p&gt;

&lt;p&gt;I am assuming, you have a React Native Typescript Project setup, if you don't, you can run this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx react-native init ProjectName --template react-native-template-typescript&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Your project will automatically be bootstrapped with typescript template.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing dependencies
&lt;/h1&gt;

&lt;p&gt;I like using yarn, but you can also use npm&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add redux react-redux redux-thunk&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Afterwards, let's install redux type definitions &lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add @types/react-redux -D&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new folder call "Store".&lt;br&gt;
You can name the folder as you desire, but I prefer to use store.&lt;br&gt;
Inside this folder, create three folders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;actions&lt;/li&gt;
&lt;li&gt;reducers&lt;/li&gt;
&lt;li&gt;types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and lastly, create an index.tsx file.&lt;/p&gt;

&lt;p&gt;In your index.tsx file, paste the following code&lt;/p&gt;

&lt;pre&gt;
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import appReducer from './reducers';


export default createStore(appReducer, applyMiddleware(thunk));
&lt;/pre&gt;

&lt;p&gt;The next action is to define your Types.&lt;br&gt;
In your types folder, create an index.tsx file and paste the following code&lt;/p&gt;

&lt;pre&gt;
export const USER_TODO = 'USER_TODO';
&lt;/pre&gt;

&lt;p&gt;Save and close.&lt;/p&gt;

&lt;p&gt;Next stop is the actions folder, for this folder, I like to create an index.tsx file and other actions. So if you are creating a big application, you might have something like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.tsx&lt;br&gt;
users.tsx&lt;br&gt;
admin.tsx&lt;br&gt;
payment.tsx etc.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This makes your file structure cleaner and more understandable.&lt;/p&gt;

&lt;p&gt;But for this simple application, we will be needing just two files:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.tsx and &lt;br&gt;
todo.tsx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Inside your index.tsx file, paste the code below:&lt;/p&gt;

&lt;pre&gt;
import todoAction from './todo';


export { todoAction };
&lt;/pre&gt;

&lt;p&gt;Save and Close&lt;/p&gt;

&lt;p&gt;In your todo.tsx file, you will define how your actions are to look like,&lt;/p&gt;

&lt;p&gt;First import all your types&lt;/p&gt;

&lt;pre&gt;
import { USER_TODO, } from '../types';
&lt;/pre&gt;

&lt;p&gt;Then set up your actions&lt;/p&gt;

&lt;pre&gt;
const setUserTodo = (payload: number) =&amp;gt; ({
  type: USER_TODO,
  payload,
});

export default {
  setUserTodo,
};
&lt;/pre&gt;

&lt;p&gt;Save and Close.&lt;/p&gt;

&lt;p&gt;Lastly, create two files in your reducers folder &lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.tsx and &lt;br&gt;
todo.tsx&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;inside your todo.tsx file, paste the following code:&lt;/p&gt;

&lt;pre&gt;
import { USER_TODO } from '../types';

const initialstate = {
    userTodo: [],
};

type Action = {
    type: string,
    payload?: any
}

export default (state: any = initialstate, action: Action) =&amp;gt; {
    switch (action.type) {
        case USER_TODO:
            return Object.assign({}, state, {
                userTodo: action.payload,
            });
        default:
            return state;
    }
};
&lt;/pre&gt;

&lt;p&gt;inside your index.tsx file, paste the following code:&lt;/p&gt;

&lt;pre&gt;
import { combineReducers } from 'redux';
import todo from './todo';


const appReducer = combineReducers({
    todo,
});

export default appReducer;

export type State = ReturnType
&lt;/pre&gt;

&lt;p&gt;And that's it! You have successfully set up your redux store, now let's head over to the UI part.&lt;/p&gt;

&lt;p&gt;I will make use of JSON public placeholder API to generate list of todos&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;https://jsonplaceholder.typicode.com/todos/&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;&lt;/code&gt;useDispatch&lt;code&gt;&lt;/code&gt; hooks from react-redux to easily dispatch data into your reducers&lt;/p&gt;

&lt;p&gt;In your App.tsx, paste the following code:&lt;/p&gt;

&lt;pre&gt;
import * as React from 'react';
import { Text, View, StyleSheet } from 'react-native';
import { useDispatch } from 'react-redux';
import { todoAction } from '../store/actions';

interface AppProps {
  navigation: any;
  setTodo: any;
}

const Welcome: React.FC = ({ navigation: { navigate } }) =&amp;gt; {
  const dispatch = useDispatch();

  React.useEffect(() =&amp;gt; {
    loadTodos();
  }, []);

  const loadTrivia = () =&amp;gt; {
     try {
    const response = await fetch(
      'https://jsonplaceholder.typicode.com/todos/'
    );
    const json = await response.json();
     dispatch(todoAction.setUserTodo(json));
  } catch (error) {
    console.error(error);
  }
  };

  return (
    &amp;lt; View style={styles.container}&amp;gt;
      
    &amp;lt; /View&amp;gt;
  );
};

export default App;

&lt;/pre&gt;

&lt;p&gt;And to get the list of these todo, use &lt;code&gt;&lt;/code&gt;useSelector&lt;code&gt;&lt;/code&gt; hooks from react-redux&lt;/p&gt;

&lt;pre&gt;
import React from 'react';
import { View, Text } from 'react-native';
import { useSelector } from 'react-redux';

interface TodoProps {
  navigation: any;
}

const Todo = (props: TodoProps) =&amp;gt; {
  const { userTodo } = useSelector((state: State) =&amp;gt; state.todo);

const TodoList = ({data}) =&amp;gt; {
      return (
            &amp;lt; View&amp;gt;
             &amp;lt; Text&amp;gt;{data.title} &amp;lt; /Text&amp;gt;
            &amp;lt; /View&amp;gt;
      )};

  return (
      &amp;lt; FlatList
        data={userTodo}
        renderItem={({ item }) =&amp;gt; } /&amp;gt;
  )};

export default Todo;
&lt;/pre&gt;

&lt;p&gt;And that is it!&lt;/p&gt;

&lt;p&gt;That is the simple way to easily add redux to your React Native Typescript project.&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>redux</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>How to setup Auditd on Ubuntu</title>
      <author>Ajay K. Dhyani</author>
      <pubDate>Tue, 28 Sep 2021 16:40:13 +0000</pubDate>
      <link>https://dev.to/ajaykdl/how-to-setup-auditd-on-ubuntu-jfk</link>
      <guid>https://dev.to/ajaykdl/how-to-setup-auditd-on-ubuntu-jfk</guid>
      <description>&lt;p&gt;Original Article written here &lt;a href="http://kubefront.com/linux/how-to-enable-configure-auditd-on-ubuntu"&gt;&lt;strong&gt;How to enable and configure Auditd on Ubuntu&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
Securing our microservice's backend infrastructure is very crucial nowadays,  managing lots of endpoints, clusters[Database, workers] is not an easy task.  In this post, I am sharing how we can use Auditd for auditing our cloud-native infrastructure.&lt;/p&gt;



&lt;p&gt;&lt;a href="https://man7.org/linux/man-pages/man8/auditd.8.html"&gt;&lt;strong&gt;Auditd&lt;/strong&gt;&lt;/a&gt; is a very light but powerful tool for managing or we can say auditing Linux based systems using its native kernel feature called The Linux Auditing System(LAS).  LAS effectily collects some useful system activities and save them in its own logs which helps security guys to better investigate any occured incident.&lt;/p&gt;

&lt;p&gt;I will cover Auditd usecase in another part because for better naration, for now we will understand how we can install Auditd and configure.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linux Ubuntu machine: Any version&lt;/li&gt;
&lt;li&gt;Internet for downloading stuff&lt;/li&gt;
&lt;li&gt;And finally, &lt;a href="http://kubefront.com/linux/some-basic-Linux-understanding"&gt;&lt;strong&gt;some basic Linux understanding&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#install-auditd-on-ubuntu-linux"&gt;
  &lt;/a&gt;
  Install Auditd on Ubuntu Linux
&lt;/h2&gt;

&lt;p&gt;Install Bash if not present, on you Ubuntu system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;bash-completion
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After these inital steps, now &lt;strong&gt;Install Auditd&lt;/strong&gt;. This following command will install Auditd's latest version on your ubuntu system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;auditd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can start and enable your auditd service so it will run up after system restart or reboot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;service status auditd
auditd start
auditd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Auditd is very light, so it will not take much effort. Now time to configure Auditd on Ubuntu system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-auditd-on-ubuntu"&gt;
  &lt;/a&gt;
  Configure Auditd on Ubuntu
&lt;/h2&gt;

&lt;p&gt;By default, you can find auditd's config file here &lt;code&gt;/etc/audit/auditd.conf&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;auditd_buffer_size: 32768
auditd_fail_mode: 1
auditd_maximum_rate: 60
auditd_enable_flag: 1

auditd_local_events: "yes"
auditd_write_logs: "yes"
auditd_log_file: /var/log/audit/audit.log
auditd_log_group: root
auditd_log_format: RAW
auditd_flush: incremental_async
auditd_freq: 50
auditd_max_log_file: 8
auditd_num_logs: 5
auditd_priority_boost: 4
auditd_disp_qos: lossy
auditd_dispatcher: /sbin/audispd
auditd_name_format: none
auditd_max_log_file_action: rotate
auditd_space_left: 75
auditd_space_left_action: syslog
auditd_verify_email: "yes"
auditd_action_mail_acct: root
auditd_admin_space_left: 50
auditd_admin_space_left_action: suspend
auditd_disk_full_action: suspend
auditd_disk_error_action: suspend
auditd_use_libwrap: "yes"
auditd_tcp_listen_queue: 5
auditd_tcp_max_per_addr: 1
auditd_tcp_client_max_idle: 0
auditd_enable_krb5: "no"
auditd_krb5_principal: auditd
auditd_distribute_network: "no"
auditd_manage_rules: yes
auditd_default_arch: b64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this above auditd.conf config file &lt;code&gt;auditd_local_events: "yes"&lt;/code&gt; entry is inportant, because it will define would auditd audit local system or not. So, change to &lt;code&gt;no&lt;/code&gt; or remove this part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-write-custom-system-audit-rules-on-ubuntu"&gt;
  &lt;/a&gt;
  How To Write Custom System Audit Rules on Ubuntu
&lt;/h2&gt;

&lt;p&gt;After all the configuration now time for write some rules for Auditd&lt;br&gt;
For viewing current set of audit rules using &lt;code&gt;auditctl -l&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo auditctl -l
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the first time it will show &lt;code&gt;no rules&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;no rules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, auditd's rules are written here &lt;code&gt;/etc/audit/rules.d/audit.rules&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# This file contains the auditctl rules that are loaded
# whenever the audit daemon is started via the initscripts.
# The rules are simply the parameters that would be passed
# to auditctl.

# First rule - delete all
-D

# Increase the buffers to survive stress events.
# Make this bigger for busy systems
-b 320

# Feel free to add below this line. See auditctl man page
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-audit-rules"&gt;
  &lt;/a&gt;
  Adding Audit Rules
&lt;/h2&gt;

&lt;p&gt;For adding auditd rules, we can use cli util for that but for simplicity i am using direct method, but update our &lt;code&gt;/etc/audit/rules.d/audit.rules&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-for-auditd-rulees"&gt;
  &lt;/a&gt;
  Syntax for Auditd rulees
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;auditctl -w path_to_file -p permissions -k key_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Electron Adventures: Episode 66: Dynamic Rendering</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Tue, 28 Sep 2021 16:29:14 +0000</pubDate>
      <link>https://dev.to/taw/electron-adventures-episode-66-dynamic-rendering-4ih</link>
      <guid>https://dev.to/taw/electron-adventures-episode-66-dynamic-rendering-4ih</guid>
      <description>&lt;p&gt;In the previous episode we managed to significantly improve performance of creating rows, but it's not good enough. For a 16MB file, we still need to create 1M rows with 20M elements, each with some characters of formatted text.&lt;/p&gt;

&lt;p&gt;Considering that we'd only ever display a few kB on screen at once, this is a huge waste.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-rendering"&gt;
  &lt;/a&gt;
  Dynamic Rendering
&lt;/h3&gt;

&lt;p&gt;The idea is to calculate which rows are visible and which are not, and only display the visible ones. For everything else, just render a placeholder of the same size.&lt;/p&gt;

&lt;p&gt;This is far from the most performant way, as huge number of placeholders still take a while to generate and update, but it's already surprisingly effective.&lt;/p&gt;

&lt;p&gt;For this we'll do all the calculations ourselves, assuming every row has the same height and placeholder rows have identical height to fully displayed rows. There are many ways to handle more general case, using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer API&lt;/a&gt;, but they'd be a lot more complex and potentially also slower.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-srcasciiviewsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/AsciiView.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;But first, something I forgot to do in the previous episode, Ascii View needs to be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ascii&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;126&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ascii&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ascii&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;xB7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ascii"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{ascii}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.ascii&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcslicesvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/Slice.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Slice&lt;/code&gt; component can render either the real thing or a placeholder. It's controlled by &lt;code&gt;visible&lt;/code&gt; prop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fast-printf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AsciiSlice&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AsciiSlice.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;visible&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {#if visible}
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"offset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{printf("%06d", offset)}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {#each {length: 16} as _, i}
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-offset=&lt;/span&gt;&lt;span class="s"&gt;{offset&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {data[i] !== undefined ? printf("%02x", data[i]) : "  "}
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      {/each}
    &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;AsciiSlice&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {:else}
    &lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;
  {/if}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;.row&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;even&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#555&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.offset&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.hex&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-srcmainviewsvelte-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;src/MainView.svelte&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;There's a few things we need to do.&lt;/p&gt;

&lt;p&gt;First, let's save the main node, and some properties with range of visible components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lastVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, we need to pass the correct &lt;code&gt;visible&lt;/code&gt; flag to the slices. We also need &lt;code&gt;use:&lt;/code&gt; callback to initialize &lt;code&gt;main&lt;/code&gt; variable, and some callbacks to update &lt;code&gt;firstVisible&lt;/code&gt; and &lt;code&gt;lastVisible&lt;/code&gt; variables on &lt;code&gt;scroll&lt;/code&gt; and &lt;code&gt;resize&lt;/code&gt; events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;
  &lt;span class="na"&gt;on:mouseover=&lt;/span&gt;&lt;span class="s"&gt;{onmouseover}&lt;/span&gt;
  &lt;span class="na"&gt;on:scroll=&lt;/span&gt;&lt;span class="s"&gt;{setVisible}&lt;/span&gt;
  &lt;span class="na"&gt;use:init&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {#each slices as slice, i}
    &lt;span class="nt"&gt;&amp;lt;Slice&lt;/span&gt; &lt;span class="err"&gt;{...&lt;/span&gt;&lt;span class="na"&gt;slice&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;visible=&lt;/span&gt;&lt;span class="s"&gt;{i&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;= firstVisible &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; i &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="na"&gt;lastVisible&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {/each}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally a simple calculation which rows are visible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;slices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
    &lt;span class="nx"&gt;firstVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;rowHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;lastVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;rowHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;
    &lt;span class="nx"&gt;setVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-well-it-works"&gt;
  &lt;/a&gt;
  How well it works?
&lt;/h3&gt;

&lt;p&gt;It correctly handles scrolling, and resizing window. Somehow it even handles Cmd+Plus and Cmd+Minus shortcuts for changing font size as they issue &lt;code&gt;scroll&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;As scrolling event is heavily throttled, it actually takes a while during scrolling to render rows. This isn't great, and browser doesn't have any kind of &lt;code&gt;scrollstart&lt;/code&gt; event. We could emulate it with creative use of &lt;code&gt;requestAnimationFrame&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Or we could just display 100 rows on each side of the visible part to&lt;/p&gt;

&lt;p&gt;However even this absolutely simplest approach works quite well already!&lt;/p&gt;

&lt;p&gt;And of course, the performance! 1MB file loads in ~2s, down from 42s we originally had.&lt;/p&gt;

&lt;p&gt;This isn't amazing, as we'd like to be able to comfortably deal with 100MB+ files, but we have easy way ahead - just group rows into 100-row chunks and conditionally display or not display those.&lt;/p&gt;

&lt;p&gt;We could also have no placeholders of any kind, and put big &lt;code&gt;height&lt;/code&gt; on it, and just &lt;code&gt;position:&lt;/code&gt; each displayed row &lt;code&gt;absolute&lt;/code&gt;ly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;Here's the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfpqiSvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p17guyo3kv6zga63qimy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfpqiSvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p17guyo3kv6zga63qimy.png" alt="Episode 66 Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we fixed performance we can do the long promised file loading, but first I want to do a detour and try another framework you've probably never heard of.&lt;/p&gt;

&lt;p&gt;As usual, &lt;a href="https://github.com/taw/electron-adventures/tree/master/episode-66-dynamic-rendering"&gt;all the code for the episode is here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
      <category>svelte</category>
    </item>
  </channel>
</rss>
