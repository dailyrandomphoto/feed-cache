<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Dockerize your Node.js application in a few simple steps.</title>
      <author>DhiWise</author>
      <pubDate>Wed, 08 Dec 2021 15:52:36 +0000</pubDate>
      <link>https://dev.to/dhiwise/dockerize-your-nodejs-application-in-a-few-simple-steps-3hh6</link>
      <guid>https://dev.to/dhiwise/dockerize-your-nodejs-application-in-a-few-simple-steps-3hh6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--48sV8bLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2154/0%2AYuyUebfcZEKP2rlp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--48sV8bLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2154/0%2AYuyUebfcZEKP2rlp" alt="" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker Containers are widely adopted everywhere, in the Linx, Windows, Cloud, Datacenter, and Serverless, etc. The technology enables you to share and run your application quickly and reliably in different computing environments most efficiently and simply.&lt;/p&gt;

&lt;p&gt;In this article, we are going to learn how to dockerize a Node.js application, but before that let’s understand what Docker technology is and its advantages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h2&gt;

&lt;p&gt;According to Docker’s &lt;a href="https://docs.docker.com/get-started/overview/"&gt;official documentation&lt;/a&gt;, Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-using-docker"&gt;
  &lt;/a&gt;
  Advantages of Using Docker
&lt;/h2&gt;

&lt;p&gt;Docker technology helps to reduce the delay between writing code and running it in production by shipping, testing, and deploying code quickly.&lt;/p&gt;

&lt;p&gt;It brings you many benefits as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Simplify application deployment and management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Makes your application portable across machines&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Facilitates version control and component reuse&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sharing of image files/ docker files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lightweight footprint and less overhead&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-for-dockerizing-nodejs-application"&gt;
  &lt;/a&gt;
  Prerequisites for Dockerizing Node.js application
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.js application&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To understand how to dockerize the node.js application, first, we need to create a simple node.js app. Then we will create a Docker image of that application and run it.&lt;/p&gt;

&lt;p&gt;Docker allows you to wrap an application with its environment along with its dependencies into a container. An image is a blueprint of that container and the container is the running instance of that image.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-nodejs-express-application"&gt;
  &lt;/a&gt;
  Setting up Node.js Express application
&lt;/h2&gt;

&lt;p&gt;First, set up a basic &lt;strong&gt;Node.js Express **application and create a directory where all the files can be placed. Here create a **package.json&lt;/strong&gt; file that describes your app and its dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Package.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{

“name”: “node-docker_app”,

“version”: “1.0.0”,

“description”: “Node.js on Docker”,

“author”: “John Doe”,

“main”: “server.js”,

“scripts”: {

“start”: “node server.js”

},

“dependencies”: {

“express”: “⁴.16.1”

}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;With the above &lt;strong&gt;package.json&lt;/strong&gt; file, run npm install and then create a &lt;strong&gt;server.js&lt;/strong&gt; file to define your web application using the &lt;strong&gt;Express.js&lt;/strong&gt; framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;server.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‘use strict’;

const express = require(‘express’);

// Constants

const PORT = 8080;

const HOST = ‘0.0.0.0’;

// App

const app = express();

app.get(‘/’, (req, res) =&amp;gt; {

res.send(‘Hello World’);

});

app.listen(PORT, HOST);

console.log(`Running on [http://${HOST}:${PORT}`);](http://${HOST}:${PORT}`);)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, to run this application inside the Docker container, we need to build the Docker image of the app. Also, we can use javascript bundler &lt;a href="https://esbuild.github.io/"&gt;&lt;strong&gt;esbuild&lt;/strong&gt;&lt;/a&gt;to bundle your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-nodejs-dockerfile"&gt;
  &lt;/a&gt;
  Create Node.js Dockerfile
&lt;/h2&gt;

&lt;p&gt;Create an empty Dockerfile using the &lt;strong&gt;“touch”&lt;/strong&gt; command as shown below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the file, you need to define for what image you are going to build from and create a directory to hold the application code inside the image. Then you need to install your app dependencies using npm.&lt;/p&gt;

&lt;p&gt;Finally, bundle your app source code inside the Docker image using the &lt;strong&gt;“COPY”&lt;/strong&gt; instruction and expose it to port 8080.&lt;/p&gt;

&lt;p&gt;To run your application use the “&lt;strong&gt;CMD”&lt;/strong&gt; command, here we are using node &lt;strong&gt;server.js&lt;/strong&gt; to start your application.&lt;/p&gt;

&lt;p&gt;The Dockerfile we have created will look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:16

# Create app directory

WORKDIR /usr/src/app

# Install app dependencies

# A wildcard is used to ensure both package.json AND package-lock.json are copied

# where available (npm@5+)

COPY package*.json ./

RUN npm install

# If you are building your code for production

# RUN npm ci — only=production

# Bundle app source

COPY . .

# Expose port

EXPOSE 8080

# Start the app

CMD [ “node”, “server.js” ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#ignoring-file-in-the-container"&gt;
  &lt;/a&gt;
  Ignoring File in the Container
&lt;/h2&gt;

&lt;p&gt;As we don’t want some files such as local modules and debug logs being copied in our Docker image, we create &lt;strong&gt;“.dockerignore”&lt;/strong&gt; file in our project directory as shown below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.dockerignore&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules

npm-debug.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#building-your-image"&gt;
  &lt;/a&gt;
  Building your image
&lt;/h2&gt;

&lt;p&gt;Building and running the images will produce a container.&lt;/p&gt;

&lt;p&gt;So, go to your project directory which has your Docker file, and run the following command to build the Docker image.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t &amp;lt;your username&amp;gt;/node-docker-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;-t&lt;/strong&gt; flag here lets you tag your image, making it easy to search using *&lt;strong&gt;*the **Docker images&lt;/strong&gt; command.&lt;/p&gt;

&lt;p&gt;Once the image is created its gets listed by the Docker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#run-and-test-the-image"&gt;
  &lt;/a&gt;
  Run and Test the image
&lt;/h2&gt;

&lt;p&gt;Finally, run the image with the &lt;strong&gt;-d&lt;/strong&gt; flag in the detached mode which will run the container in the background and print the container ID. Also, use the &lt;strong&gt;-p&lt;/strong&gt; flag to map the container port from the local machine to the public port.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -p 49160:8080 -d &amp;lt;your username&amp;gt;/node-docker-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Print the app output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Get container ID

$ docker ps

# Print app output

$ docker logs &amp;lt;container id&amp;gt;

# Example

Running on [http://localhost:8080](http://localhost:8080)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;To test your application first get the container ID&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker ps

# Example

ID IMAGE COMMAND … PORTS

ecce33b30ebf &amp;lt;your username&amp;gt;/node-docker-app:latest npm start … 49160-&amp;gt;8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;In the above snippet, you can see that the docker is mapped to port no 8080 inside the container to port 49160 on your local machine.&lt;/p&gt;

&lt;p&gt;Now call your port using the &lt;strong&gt;“curl”&lt;/strong&gt; command&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -i localhost:49160

HTTP/1.1 200 OK

X-Powered-By: Express

Content-Type: text/html; charset=utf-8

Content-Length: 12

ETag: W/”c-M6tWOb/Y57lesdjQuHeB1P/qTV0"

Date: Tues, 30 Nov 2021 15:53:59 GMT

Connection: keep-alive

Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So this is all about running your Node.js application on Docker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-up"&gt;
  &lt;/a&gt;
  Summing Up:
&lt;/h2&gt;

&lt;p&gt;In the article, we have learned about Docker technology, its advantages, and how to Dockerize a &lt;strong&gt;Node.js Express&lt;/strong&gt; application.&lt;/p&gt;

&lt;p&gt;With the above information, you will be able to take advantage of Docker to Dockerize and deploy your Node.js application to any platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Are you finding ways to make your app development faster while being up on the code quality, try DhiWise- A ProCode app development platform for web and mobile app development. Build any type of application with the tech stack you love.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Find out more about &lt;a href="https://hubs.la/H0_-wmC0"&gt;DhiWise&lt;/a&gt; and our &lt;a href="https://github.com/DhiWise/nodejs-code-generator"&gt;open-source Node.js generator&lt;/a&gt;. &lt;a href="https://app.dhiwise.com/"&gt;Sign up&lt;/a&gt; today!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy Learning!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>node</category>
    </item>
    <item>
      <title>Parallax scroll animation</title>
      <author>Hesoftware12</author>
      <pubDate>Wed, 08 Dec 2021 15:50:49 +0000</pubDate>
      <link>https://dev.to/hesoftware12/parallax-scroll-animation-271o</link>
      <guid>https://dev.to/hesoftware12/parallax-scroll-animation-271o</guid>
      <description>&lt;p&gt;``&lt;/p&gt;
&lt;p&gt;Optimize for full screen view.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/hesoftware12/embed/bGoeNRa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>How to Mine Saitama Inu: Step-by-Step Laptop and Desktop Mining Guide in 2021</title>
      <author>Course Probe</author>
      <pubDate>Wed, 08 Dec 2021 15:45:41 +0000</pubDate>
      <link>https://dev.to/courseprobe/how-to-mine-saitama-inu-step-by-step-laptop-and-desktop-mining-guide-in-2021-2g6i</link>
      <guid>https://dev.to/courseprobe/how-to-mine-saitama-inu-step-by-step-laptop-and-desktop-mining-guide-in-2021-2g6i</guid>
      <description>&lt;p&gt;Sometimes mining can seem to be too complex for the average computer user, so I thought about putting together a quick guide to get you excited about mining cryptocurrency and Saitama Inu in particular.&lt;/p&gt;

&lt;p&gt;Anyone can start mining SAITAMA with any laptop in under 5 minutes using this guide, regardless of your technical skill level you will be able to increase your crypto knowledge and start mining Saitama Inu with your CPU and GPU today!!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Saitama Inu is a community driven platform promoting financial well-being by empowering people of all ages and cultures to be in control of their money and create their own wealth opportunities. The $SAITAMA token is our medium, it was built on the Ethereum blockchain (ERC-20) with a smart code that makes it safe to invest and beneficial to hold..&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I'm available to help with the setup and optimizations via telegram: &lt;a href="https://t.me/cryptominingadvisor"&gt;https://t.me/cryptominingadvisor&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Now let's get you started !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 1:&lt;/strong&gt; Get yourself a Wallet.&lt;/p&gt;

&lt;p&gt;I recommend getting a wallent with support for ERC20 tokens, good candidates might included Metamask, Trust wallet or Atomic Wallet.&lt;/p&gt;

&lt;p&gt;From the wallet get your Public Receive address, this is the address the pool needs in order to transfer your coins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2:&lt;/strong&gt; Download the Unmineable Miner Software&lt;/p&gt;

&lt;p&gt;Before downloading the file, set some folder exclusions on Windows Defender, in your antivirus and also in your browser so you can download the file without being bothered with notifications of dangerous files.&lt;/p&gt;

&lt;p&gt;Official Unmineable software can be downloaded from this site: &lt;a href="https://www.unmineable.com/miner"&gt;Unmineable Download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download the MFI version (Miners files included).&lt;/p&gt;

&lt;p&gt;The unmineable software is just one executable file, it already contains all the configurations so it is the best and easiest way to mine Saitama Inu.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run the file as an Administrator in windows.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It looks exactly like this when you run it: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp9_YtUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udmfa63w1l5cccquxx45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sp9_YtUv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udmfa63w1l5cccquxx45.png" alt="Unmineable Start Screen" width="407" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can select GPU cards or CPU.&lt;/p&gt;

&lt;p&gt;It will take you to the second screen where you will enter your Saitama Inu Address and also &lt;strong&gt;the code which will allow you to drop your Dev Fee from 1% to 0.75%&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Use the code: &lt;strong&gt;e4xd-wmzl&lt;/strong&gt; to drop your Dev Fee from 1% to 0.75% (it makes a difference).&lt;/p&gt;

&lt;p&gt;Your screen should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zR88Pie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v71aqouffjdhz6626jn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zR88Pie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v71aqouffjdhz6626jn.png" alt="Unmineable Saitama Mining" width="406" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click on the Start button, you should see a similar screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwOl1eL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yl8vk15ykllxe309mdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwOl1eL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yl8vk15ykllxe309mdb.png" alt="Unmineable Mining Screen" width="409" height="583"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point I would recommend you to click the option at the bottom to display the logs (Looks like a sheet of paper), here click Force Stop. &lt;/p&gt;

&lt;p&gt;Then click the Settings Icon (Looks like a cog wheel), in the screen that pops up you want to double check a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make sure the algorithm selected is ETCHASH if you are mining with 4GB cards, use ETHASH for cards with 6GB or more, if you selected CPU everything is ready to start mining no need to select anything.&lt;/li&gt;
&lt;li&gt;Make sure the Code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt; is showing in the referral box (Recommended, not mandatory).&lt;/li&gt;
&lt;li&gt;Set a name for your worker (The computer you are mining from).&lt;/li&gt;
&lt;li&gt;Set your mining Intensity at the top, I would recommend High for those periods when you are not using the computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It looks similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wjec4Fte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjrpff038akqg461zb7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wjec4Fte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjrpff038akqg461zb7w.png" alt="Unmineable Settings" width="409" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the Save &amp;amp; Restart button to start mining !!&lt;/p&gt;

&lt;p&gt;Once it starts you can check the speed of your Graphic card which shows as the Current Hashrate.&lt;/p&gt;

&lt;p&gt;Also you can click on the stats button on the top right to go directly to the Unmineable website where you can check your balance and request a manual payment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; it is recommended you change a few settings in Windows, there's people that disable the Updates and also disable sleeping mode, hibernation or anything that could turn off the computer while it is not in use.&lt;/p&gt;

&lt;p&gt;When using a Laptop, make sure it has some battery or is plugged so it won't shut down.&lt;/p&gt;

&lt;p&gt;Congrats, if you are using Unmineable you are now a miner !!&lt;/p&gt;




&lt;p&gt;If you want a bit more of control over the mining software and configurations then you can download the miners and manually set them up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For those of you mining with CPU then you could follow below:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to the xmrig site to download the latest version (MSVC) or from the oficial github repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xmrig/xmrig/releases"&gt;https://github.com/xmrig/xmrig/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you download the latest version you would have to edit a file named "pool_mine_example.cmd" or "start.cmd" or "start.bat" Inside this file you need to modify 2 lines.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;if the file doesn't exists you would have to create it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It could look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd %~dp0
xmrig.exe -o rx.unmineable.com:3333 -u SAITAMA:XtAigAYfSYyh4beNMaYwoFJH5kCH75QowD.wrkID#e4xd-wmzl -p x --cpu-no-yield
pause
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second line after the -o you can see the Pool URL, in this case all you have to do depending on your location is to use one of the following URLs (select the one closer to your location).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USA:&lt;/strong&gt; rx-us.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Europe:&lt;/strong&gt; rx-eu.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Asia:&lt;/strong&gt; rx-asia.unmineable.com:3333&lt;/p&gt;

&lt;p&gt;Then, the third line is where you will enter your wallet's public address (copied in STEP 1), place it after the SAITAMA: and before the first dot "." .&lt;/p&gt;

&lt;p&gt;The general structure of the address needs to be:&lt;/p&gt;

&lt;p&gt;[COIN]:[Wallet address].[workerID]#[Code to lower mining fee]&lt;/p&gt;

&lt;p&gt;The workerID is any name you want to give to each computer where you are running the miner so it can easily be identified later on under the pool stats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The code after the # is important&lt;/strong&gt; because mining with that code will drop the Mining Fee from 1% to 0.75% (it makes a difference). You can start mining using that code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You also need to edit the config.json file and update the Pools object to look similar to this using your details:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"pools": [
        {
"url": "rx.unmineable.com:3333",
            "user": "SAITAMA:XtAigAYfSYyh4beNMaYwoFJH5kCH75QowD.wrkID#e4xd-wmzl"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the pool_mine_example file as an administrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" alt="XMRig Mining" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, you are now running XMRig and are mining. Congrats !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For those of you mining with GPU:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I would recommend you to get: Teamredminer (AMD cards), Phoenixminer (AMD/NVIDIA) or Trex (Nvidia).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download these miner from the oficial sites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Phoenix miner: &lt;a href="https://bitcointalk.org/index.php?topic=2647654.0"&gt;Bitcoin Talk forum&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Teamred miner: &lt;a href="https://github.com/todxx/teamredminer/releases"&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trex: &lt;a href="https://github.com/trexminer/T-Rex/releases"&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then set them up with a smilar Start.bat file as mentioned in the CPU section above. &lt;/p&gt;

&lt;p&gt;Pay attention to some changes you would need to implement: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if you are mining with 4gb cards you need to set the algo on the miner to ETCHASH and the coin to ETC. (check for miner CLI parameters)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if you are mining with 6gb cards or more then you need to set the algo on the miner to ETHAS and the coin to ETH. (check for miner CLI parameters)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to also set the pool url accordingly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ETCHASH: etchash.unmineable.com:3333&lt;/li&gt;
&lt;li&gt;ETHASH:  ethash.unmineable.com:3333&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once done, run the file as administrator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you can Log into Unmineable to check your stats:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unmineable.com is a mining Pool which allows you to mine with your CPU using RandomX or GPUS using Etchash or Ethash and pay you in any coin you select. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" alt="Unmineable Site" width="880" height="687"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you set up the address inside the Miner starter file ? &lt;/p&gt;

&lt;p&gt;Well, there you just let Unmineable know the coin you want to be paid in, in this example SAITAMA and then the address where they will transfer the mined coins.&lt;/p&gt;

&lt;p&gt;In order to check your balance, log into &lt;a href="https://unmineable.com"&gt;Unmineable&lt;/a&gt; and then select the coin you want to mine. In this example, Saitama inu.&lt;/p&gt;

&lt;p&gt;Then you can select the Tab that reads RandomX or ETCHAS or ETHASH depending on your algo, and enter your address in the box that reads "Enter your address to check your stats:". &lt;/p&gt;

&lt;p&gt;After doing this you will see the balance on your account and you will even be able to request a payment.&lt;/p&gt;




&lt;p&gt;Congrats, you are a miner now! &lt;/p&gt;

&lt;p&gt;I recommend downloading some software to monitor the running temperature of your CPU and GPU, a good and free one is Hardware Monitor.&lt;/p&gt;

&lt;p&gt;Try not to exceed the temperature more than 90 degrees celsius. In case you are mining with a laptop, change the thermal paste of your CPU, get it cleaned inside, and get some heat extractors for laptops.&lt;/p&gt;

&lt;p&gt;If you take care of the temperature your computer should work very well, the amount of coins you can mine will depend on the hashrate of your CPU and GPUs. &lt;/p&gt;

&lt;p&gt;For GPUS download MSI Afterburner and set the appropriate Overclocking profile so you can get higher hashrates.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to use a valid address for each coin, for example if you want to be paid in ADA then you need a valid Cardano blockchain address. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;em&gt;If you are having any difficulties, please join me on telegram so I can help you further&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.me/cryptominingadvisor"&gt;https://t.me/cryptominingadvisor&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nXNdbbm8ofs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;If you are looking for more information into CPU mining, there's a good guide in a PDF ebook and is Free, get it at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" alt="Mining with CPU" width="320" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/how-to-start-mining-crypto-with-cpu/"&gt;Mining Crypto with CPU&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Referral Disclosure:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Please read the Unmineable Referral Policy at the following link to better understand How the referral code works in detail &lt;a href="https://www.unmineable.com/referrals"&gt;Unmineable Referrals&lt;/a&gt;&lt;/p&gt;

</description>
      <category>saitama</category>
      <category>crypto</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Why you should invest in Julia now, as a Data Scientist</title>
      <author>Logan Kilpatrick</author>
      <pubDate>Wed, 08 Dec 2021 15:35:25 +0000</pubDate>
      <link>https://dev.to/logankilpatrick/why-you-should-invest-in-julia-now-as-a-data-scientist-2jam</link>
      <guid>https://dev.to/logankilpatrick/why-you-should-invest-in-julia-now-as-a-data-scientist-2jam</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ouJCl11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqh1x2z5lbmdo9zcvb0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ouJCl11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqh1x2z5lbmdo9zcvb0z.png" alt="Julia for Data Science" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://julialang.org"&gt;Julia&lt;/a&gt; is a high level, dynamic programming language built to be as fast as C or C++ while remaining as easy to use as Python. For data scientists, this is a computational dream come true.&lt;/p&gt;

&lt;p&gt;In this post, we will talk about the following topics with the goal being to convince a data scientist that the Julia ecosystem is worth investing time into. At a high level, the main reason to switch to Julia (or use it to suppliment existing workflows) is the productivity it enables for developers. Who doesn’t love being able to work more effectively?!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-we-will-cover"&gt;
  &lt;/a&gt;
  Topics we will cover:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Julia use-cases 🧑‍💻&lt;/li&gt;
&lt;li&gt;Data Science packages 🤖&lt;/li&gt;
&lt;li&gt;Interoperability 🔀&lt;/li&gt;
&lt;li&gt;Speed ⚡️&lt;/li&gt;
&lt;li&gt;Learning Resources 📚&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To find out more, check out the full medium post I wrote up here: &lt;a href="https://medium.com/@logankilpatrick/why-you-should-invest-in-julia-now-as-a-data-scientist-30dc346d62e4"&gt;https://medium.com/@logankilpatrick/why-you-should-invest-in-julia-now-as-a-data-scientist-30dc346d62e4&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>julia</category>
      <category>science</category>
    </item>
    <item>
      <title>Taking Time to Reflect – Doing Better Than You Did Yesterday, Today with Zachary Powell </title>
      <author>Mandy Moore</author>
      <pubDate>Wed, 08 Dec 2021 15:34:23 +0000</pubDate>
      <link>https://dev.to/newrelic/taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell-4enn</link>
      <guid>https://dev.to/newrelic/taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell-4enn</guid>
      <description>&lt;p&gt;&lt;a href="https://therelicans.com"&gt;Relicans&lt;/a&gt; host &lt;a href="https://twitter.com/muydanny"&gt;Danny Ramos&lt;/a&gt; talks to Lead Developer Advocate for &lt;a href="https://appgallery.huawei.com/"&gt;Huawei AppGallery&lt;/a&gt;, &lt;a href="https://twitter.com/devwithzachary"&gt;Zachary Powell&lt;/a&gt;, about looking at failures as learning experiences and getting as much feedback as you possibly can to understand situations and improve them, wanting to go from being a developer to being a developer advocate, and encouraging people to persevere during interviews. You're not going to succeed the first time every time. It takes time. It will happen.&lt;/p&gt;

&lt;p&gt;Should you find a burning need to share your thoughts or rants about the show, please spray them at &lt;a href="mailto:devrel@newrelic.com"&gt;devrel@newrelic.com&lt;/a&gt;. While you're going to all the trouble of shipping us some bytes, please consider taking a moment to let us know what you'd like to hear on the show in the future. Despite the all-caps flaming you will receive in response, please know that we are sincerely interested in your feedback; we aim to appease. Follow us on the Twitters: &lt;a href="https://twitter.com/LaunchiesShow"&gt;@LaunchiesShow&lt;/a&gt;.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/launchies/taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;Taking Time to Reflect – Doing Better Than You Did Yesterday, Today with Zachary Powell &lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/launchies"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        Launchies
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell" alt="Launchies" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqIIXJAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_l3MirTt--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/497/e68f23f9-3f66-4e53-b0c6-80f0f82caa84.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/launchies/taking-time-to-reflect-doing-better-than-you-did-yesterday-today-with-zachary-powell"&gt;
      &lt;img id="episode-profile-image" alt="Taking Time to Reflect – Doing Better Than You Did Yesterday, Today with Zachary Powell " width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_5JRBqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S-_M_-nf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/497/e68f23f9-3f66-4e53-b0c6-80f0f82caa84.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;Jonan Scheffler: Hello and welcome to &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies&lt;/a&gt;, proudly brought to you by New Relic's Developer Relations team, &lt;a href="https://therelicans.com"&gt;The Relicans&lt;/a&gt;. The Launchies podcast is about supporting new developers and telling their stories and helping you make the next step in what we certainly hope is a very long and healthy career in software. You can find the show notes for this episode along with all of The Relicans podcasts on &lt;a href="//developer.newrelic.com/podcasts"&gt;developer.newrelic.com/podcasts&lt;/a&gt;. We're so glad you're here. Enjoy the show.&lt;/p&gt;

&lt;p&gt;Danny Ramos: Hello, everyone. My name is &lt;a href="https://twitter.com/muydanny"&gt;Danny Ramos&lt;/a&gt;. And I'll be your host today for &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies&lt;/a&gt;, the podcast where we talk to people about their stories into tech. And today I have &lt;a href="https://twitter.com/devwithzachary"&gt;Zachary Powell&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Zachary Powell: It's good to be here.&lt;/p&gt;

&lt;p&gt;Danny: Thank you so much. I didn't even ask you. Is it Zachary, or do you go by Zach?&lt;/p&gt;

&lt;p&gt;Zachary: I'd say it's normally Zachary when I'm in trouble. So I'm quite happy with Zach. [laughter] But I don't mind. I don't mind.&lt;/p&gt;

&lt;p&gt;Danny: When I'm in trouble, my mom's whole Spanish side comes out. She's like, "Daniel." It's scary.&lt;/p&gt;

&lt;p&gt;Zachary: [laughs] &lt;/p&gt;

&lt;p&gt;Danny: So we want to make this a nice, fun space, so I'll call you Zach. &lt;/p&gt;

&lt;p&gt;Zachary: Sounds good to me.&lt;/p&gt;

&lt;p&gt;Danny: So what's up, Zach? I noticed that you have been a developer for ten years. Do you even remember how you even got into tech?&lt;/p&gt;

&lt;p&gt;Zachary: Yes, just about. Stretching back, I can just about remember. I think certainly in tech in general, my first sense of it being a space that I wanted to be in was when I finally got my first laptop, [laughter] my first own computer. And this was even before we actually had broadband internet at home. And I would actually go and sit outside and steal my neighbor's Wifi. So that was always fun.&lt;/p&gt;

&lt;p&gt;Danny: [laughs]&lt;/p&gt;

&lt;p&gt;Zachary: But yeah, that definitely started during high school, and then really, it's not stopped. It's just snowballed from there.&lt;/p&gt;

&lt;p&gt;Danny: And can you tell us a little bit about what you do currently?&lt;/p&gt;

&lt;p&gt;Zachary: Yeah. So at the moment, I'm actually now working in developer relations. I am the Lead Developer Advocate for &lt;a href="https://developer.huawei.com/consumer/en/agconnect/"&gt;Huawei's AppGallery Connect&lt;/a&gt;, which is kind of basically...so the AppGallery is their marketplace for apps on &lt;a href="https://consumer.huawei.com/en/phones/"&gt;Huawei phones&lt;/a&gt;. And the &lt;a href="https://developer.huawei.com/consumer/en/agconnect/"&gt;AppGallery Connect&lt;/a&gt; is all the developer tools that go along with that, so all your SDKs and services and all that fun stuff.&lt;/p&gt;

&lt;p&gt;Danny: That does sound fun. At this point of you being a lead, what in your previous roles have gained you this ability to be in the lead of the Developer Relations team?&lt;/p&gt;

&lt;p&gt;Zachary: So as soon as I finished university studying computer science, I actually freelanced for about six years as a developer. It started off while I was at university as a way to make a bit of extra money because I was poor and in university --&lt;/p&gt;

&lt;p&gt;Danny: [laughs] Yeah, money is always good at university.&lt;/p&gt;

&lt;p&gt;Zachary: Exactly. And it just worked out really well. I found that there was an awful lot of work available in that area. It was right during the boom where every company wanted a mobile app even if they didn't really need a mobile app. That was just the thing that you had to have. So there was a lot of work available. And obviously, that meant that I didn't go into a traditional junior role or anything like that. I was in charge of my own work from the get-go and in charge of managing projects and that kind of thing that you don't traditionally touch on necessarily straight out of university. You tend to have a bit more of a safety net than I necessarily did. &lt;/p&gt;

&lt;p&gt;Those six years, I learned an awful lot which meant by the time I actually settled into a more traditional developer role, I was ready to start moving into managerial or lead positions. I definitely feel that the biggest thing was my time as a freelancer that gave me that experience that I wouldn't have had otherwise. &lt;/p&gt;

&lt;p&gt;Danny: Right, kind of creating your own experience. &lt;/p&gt;

&lt;p&gt;Zachary: Exactly. Learning kind of by fire what does and what doesn't work, how you actually can manage a team. Even if that team is only one developer, but there are always other people that you have to talk to. There are always other people involved. So there's always that managing expectations and generally making sure that everyone is on the same page and happy, really.&lt;/p&gt;

&lt;p&gt;Danny: Oh yeah. I'm going to quote you on that that tech is learning by fire. [laughter] &lt;/p&gt;

&lt;p&gt;Zachary: I definitely think it is. Everyone makes mistakes. And the important thing is what you do with that learning. If you keep making the same mistake over and over and over, you're never going to get anywhere. But if you can take that experience that you've learned and what you've been burned on or what have you, if you can take that experience and make sure it never happens again, then that's a good thing. And you'll learn a lot quicker that way.&lt;/p&gt;

&lt;p&gt;Danny: Oh yeah. I think that's my biggest advice for bootcamp people or people that are new to tech who are going into the interview process. Every failure with an interview is only a learning experience. If every time I went into an interview thinking, oh, this is the one; I'm going to get this. And then I got that email, and they're like, "Sorry, we're going to go with someone else," if I would take that as this is the end and this is over, then I would never have a job right now. It just takes like, okay, what if you email them back possibly? You could be like, "Okay, well, what in the interview could I have worked on, or do you have any feedback for me?" And then boom, now you have leveled up just from that type of feedback that you would get.&lt;/p&gt;

&lt;p&gt;Zachary: Oh yeah, definitely. You should always try and get feedback from any mistake, whether it's during the interview process or even when you're actually in a job; if something goes wrong, it's worth trying to get as much feedback as you possibly can and understanding the situation so that you can improve it.&lt;/p&gt;

&lt;p&gt;Danny: Yeah, absolutely. Were there any type of fun, little projects that you worked on when you were stealing your neighbor's Wifi?&lt;/p&gt;

&lt;p&gt;Zachary: [laughter] Yeah. So basically, one of the things that I got very interested in quite early on was Android development. And again, this was the very early stages. I think &lt;a href="https://en.wikipedia.org/wiki/HTC_Magic"&gt;HTC Magic&lt;/a&gt; was my first smartphone, which I forget what it was called in the States. But it was basically the second phone that HTC brought out, so not the G1 but the one after that.&lt;/p&gt;

&lt;p&gt;Danny: I'm looking up a photo of it right now. And I don't want to date you, but this is an old phone. [laughter]&lt;/p&gt;

&lt;p&gt;Zachary: It is an old phone, oh yeah. [laughs] It makes me feel old. &lt;/p&gt;

&lt;p&gt;Danny: I had this one with the little ball on the bottom.&lt;/p&gt;

&lt;p&gt;Zachary: Yeah, that was a brilliant piece of user interface. Basically, when I got that phone, it sparked my interest in building Android applications and tinkering with Android in general. It was the start of the whole hacker rooting your device community and really trying to test what Android can actually do as an operating system. So it was really great getting involved with that. I think I definitely built a couple of my own Android ROMs and distributed those on XDA. &lt;/p&gt;

&lt;p&gt;And it was just a really fun time because it felt like a bit of the Wild West. Everything was new. No one really quite understood what these smartphones were going to be able to do. And there was a lot of fun to be had there in figuring it out and putting things to the test. Pretty sure even at that time, people were overclocking their phones and that sort of ridiculous thing, which you just wouldn't even really think about or even be able to do these days because obviously everything's become much more locked down.&lt;/p&gt;

&lt;p&gt;Danny: Yeah. I'm just initially thinking of the amount of times I played &lt;a href="https://www.coolmathgames.com/0-brick-breaker"&gt;Brick Breaker&lt;/a&gt; at my desk in class.&lt;/p&gt;

&lt;p&gt;Zachary: [laughs] Oh yes. I mean, that was the thing. If you had a smartphone during high school, that time you really were able to do a lot more than maybe [laughs] you were supposed to be able to do.&lt;/p&gt;

&lt;p&gt;Danny: [laughs] And so going into university, you knew that you wanted to be a developer. Or was there anything else in mind?&lt;/p&gt;

&lt;p&gt;Zachary: So I went into university with the mindset that I'd become a game developer. My degree was computer science with computer game design. And there was quite a big focus...I'd say about 50% of the degree was actually game-specific. And it was definitely at that time something I thought, oh yeah, this is going to be really cool. This is what I want to do. &lt;/p&gt;

&lt;p&gt;But I think as the degree progressed and as I went on, I realized that yeah, it's a really cool industry, but it's incredibly cut-throat. It's incredibly competitive. And there just wasn't as much of a space there compared to what would be newer industries like mobile app and Android in general. It wasn't quite as appealing by the end of the degree. So I never really pursued that and definitely did move down the mobile route.&lt;/p&gt;

&lt;p&gt;Danny: Were there any games that really sparked your interest and made you want to go into game development? &lt;/p&gt;

&lt;p&gt;Zachary: Well, I think obviously, a lot of the &lt;a href="https://en.wikipedia.org/wiki/Call_of_Duty_(video_game)"&gt;Original CoD&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Unreal_Tournament_2004"&gt;Unreal 2004&lt;/a&gt;, which is really dating, was one of those games that, especially at the beginning of high school, I played a lot of that [laughter] and these early online games. It was a great time. And a lot of the games as well, there was quite a lot of a modded community around it as well and being able to tinker with things and getting your own game models into the game and that sort of thing. That's definitely where that came from. That's definitely where my enjoyment of that came from and the idea that it would be a great thing to do professionally.&lt;/p&gt;

&lt;p&gt;Danny: Oh yeah. The amount of times my friends and I would stay up late not necessarily dealing with mods but like &lt;a href="https://en.wikipedia.org/wiki/Halo_(franchise)"&gt;Halo 1 and Halo 2&lt;/a&gt; glitches where you would crawl in the corner of the map and then fall through the map and just walk around. For some reason, we broke the game. But for some reason, it was just so fun to do that.&lt;/p&gt;

&lt;p&gt;Zachary: Yeah, it was just so unpolished. And it was great to be able to do something that you really weren't supposed to do and get access to things that you really weren't supposed to have access to. [laughter]&lt;/p&gt;

&lt;p&gt;Danny: Yeah, that is awesome. So you were originally down one path in university, and then you kind of pivoted. You're like, okay, you know, what? There's actually a big market for this. Was there anyone like a mentor or anyone in your life that was like, "You should go into mobile development."?&lt;/p&gt;

&lt;p&gt;Zachary: I think what happened there is it was almost a race between my two interests as to which was going to win. At the same time, in my second year, I started a project called Linux on Android, which was basically a project to run GNU Linux desktop applications on your Android device. And that was a passion project of mine. I think it was...it must have been the second year. I was trying to think back now, but it must have been the second year of uni. And that really kind of took off. It was very successful on the &lt;a href="https://play.google.com/store?hl"&gt;Play Store&lt;/a&gt;. We did a round of &lt;a href="https://www.kickstarter.com/"&gt;Kickstarter&lt;/a&gt; funding which went very well and meant that for quite a lot of time, I was able to focus on that.&lt;/p&gt;

&lt;p&gt;And I actually then ended up getting my first freelancing gig out of that. A company in Australia were interested in building a tablet that ran both Linux (I think it was actually a version of &lt;a href="https://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;.) and Android side by side. I would say they were the pushing figure that ended up making the mobile side of it win because, well, there was money there to be offered. And it meant that I could leave university straight into having a client already, which meant that my bills were paid. So everything else that I was doing freelance was extra money. &lt;/p&gt;

&lt;p&gt;Danny: Nice. &lt;/p&gt;

&lt;p&gt;Zachary: And yeah, I think that, in a way, that kind of was the deciding factor. I think if that hadn't existed if I hadn't done that project, it's very possible that I would have gone the other way. Because definitely all the way through, even through my third year, it was kind of both interests were racing each other to decide who was going to be my career path.&lt;/p&gt;

&lt;p&gt;Danny: And I think that's the troubling thing when you're at a young age or when you're trying to get a new career path; it's like, what do I do next? And was there anything, in particular, that really told you I'm actually enjoying this more, so I could focus on this? Or I'm more salary-oriented, so I should go this way? Was there any kind of mental notes you told yourself to just like, okay, I'm going to do this because of this?&lt;/p&gt;

&lt;p&gt;Zachary: I do think that part of it was the money side. And it was the fact that going down the freelance route and focusing on something that had a real market; I could be a lot more relaxed with my working hours. It meant I could essentially be my own boss and not have to do that office grind, as it were. And that was very appealing. I think it was something that I really saw as a great thing. &lt;/p&gt;

&lt;p&gt;I probably did it through rose-tinted spectacles. I probably didn't really think so much about the negatives. And the fact that yes, I could do my own hours, but actually, in reality, I was working far more hours than a normal job would be. And there was a lot more stress involved there. And there was a lot more responsibility than necessarily would have been good at the time. [laughter] But from me in that position, that was what was driving it was this fact that I could do stuff that I enjoyed when I wanted to do it, and also, it paid well.&lt;/p&gt;

&lt;p&gt;Danny: Yeah, that's the golden ticket there. [laughs]&lt;/p&gt;

&lt;p&gt;Zachary: Exactly. Exactly. Until you start thinking about all the negatives looking back, but you know. [laughter]&lt;/p&gt;

&lt;p&gt;Danny: Yeah. You're like, wow, I really didn't sleep much back in the day. &lt;/p&gt;

&lt;p&gt;Zachary: Exactly. There were definitely days where I really didn't sleep and especially working with a company that was in Australia. I remember having meetings at 3:00 a.m. and looking back at that now just thinking like, why on earth did you do that? [laughter]&lt;/p&gt;

&lt;p&gt;Danny: Calling yourself Zachary because you're in trouble.&lt;/p&gt;

&lt;p&gt;Zachary: Exactly. Exactly.&lt;/p&gt;

&lt;p&gt;Danny: [laughs] Yeah, I think it's so important to recognize what you really want in life or what you really value. I know for me previously before going into tech, I was working 45 to 50-hour weeks. And it was physically draining, my job. And I was like, my back hurts. And at the time, I was only 26. So I was like, my back hurts at 26. If I keep doing this, I'm going to be the other grumpy, old men that I work with. I need to get out of here. &lt;/p&gt;

&lt;p&gt;I think it's fun to look back at the growth or improvements. So like you looking back and being like, you know what? Now I know I don't want to stay up till 3:00 in the morning for meetings. I'm going to recognize that, and I'm going to try to do what I can to get a job where I don't have to do these things.&lt;/p&gt;

&lt;p&gt;Zachary: Exactly. I think as well; it’s very important to remember that what you want and your goals can change. So I made that transition from freelancing into a standard developer job, and that's because my goals changed. I decided that I did want that more stability. I did want to know that I could actually work nine-to-five-ish, and I have my evenings again free to do what I actually want to do. And I get things like holiday paid, and sick leave, and all these lovely mystical things that you don't get when you're freelancing. [laughs] &lt;/p&gt;

&lt;p&gt;And I'd say, yeah, there was definitely that shift of I guess it's the idea of as you get older, you want to settle down in a way. There definitely was a shift there. But then I did have another shift when I decided to move into DevRel. Well, I moved into developer relations kind of by accident, actually.&lt;/p&gt;

&lt;p&gt;Danny: Really?&lt;/p&gt;

&lt;p&gt;Zachary: Yeah. A company I previously worked with as a developer...I was working there for a couple of years. It was a comfortable job. I was quite happy. But I think it was a little too comfortable. There wasn't much of a challenge. It was getting a bit stale. So I decided I do need a new position. I need to find a new job. But in my mind, that was definitely going to be another software development job. Those were the jobs that I was applying for, interviewing for, and all that sort of stuff. &lt;/p&gt;

&lt;p&gt;And then one of the recruiters that I was working with said, "Hey, we've actually got this position as a developer advocate with &lt;a href="https://www.huawei.com/"&gt;Huawei&lt;/a&gt;." Now, the recruiter had no idea what a developer advocate was. And it was more that it had the word developer in the title, and it was for a company that they knew did Android stuff. They recommended it based on that. And I didn't know what developer advocate was either at the time. So I went through the interview process because I thought, hey, it could be interesting. &lt;/p&gt;

&lt;p&gt;Danny: I might as well.&lt;/p&gt;

&lt;p&gt;Zachary: Yeah, it's worth doing. It could be a good company to have on my CV, that kind of thing. And going through the interview process, learning what the job actually entailed, I suddenly realized, hang on, this is actually something I really want to do. This sounds really cool. I didn't know I could get paid to do this. And so within that, I mean, literally within the space of a couple of days, suddenly, my whole priorities of what I wanted out of a job completely shifted. And I suddenly wanted to go from being a developer to being a developer advocate. &lt;/p&gt;

&lt;p&gt;And I mean, again, looking at that, it was just such a wild shift. But it was good to reflect on that and think, well, actually, yeah, it happens. Sometimes you find something new that you didn't know about at all. And you realize that that's actually much more suited to what you want.&lt;/p&gt;

&lt;p&gt;Danny: Right? What about developer advocacy really spoke to you?&lt;/p&gt;

&lt;p&gt;Zachary: Well, I think the biggest thing is I've always been a developer that enjoys talking. [laughter] I like to communicate, whether that's going to conferences and stuff or if it was talking with customers, being active on social media, whatever it was. I do enjoy sharing information and sharing knowledge. &lt;/p&gt;

&lt;p&gt;I guess I just never really realized that there was a whole career specifically for that. Of course, you look back at it now, and you go, well, of course, there is. All this documentation and all this stuff doesn't just appear out of nowhere; someone is doing it. [laughs] But at the time, it just never really clicked. So that's definitely what drew me in was the realization that actually, pretty much every part of being a developer advocate I enjoy.&lt;/p&gt;

&lt;p&gt;Danny: In the interview, just like, "So I can talk and get paid. Okay, I like this."&lt;/p&gt;

&lt;p&gt;Zachary: Yeah. You're going to pay me to go to conferences? Yes, please. [laughter]&lt;/p&gt;

&lt;p&gt;Danny: Now, since you were freelance for a while and your own boss technically for some time, was it nerve-wracking to go into the interview process, or did you feel pretty confident about that?&lt;/p&gt;

&lt;p&gt;Zachary: Oh no. It was incredibly nerve-racking. I think I was a bit overconfident at the start. I think I felt, oh well, I've spoken to hundreds of clients over the time. I've done hundreds of technical projects. I can interview. It will be fine. But it's a completely different process and a completely different situation, really. And you're talking with a customer for a technical project. They don't necessarily or almost certainly don't have a technical background. They're not interested in the technical side. They're interested in the well, how much is it going to cost? And how long is it going to take?&lt;/p&gt;

&lt;p&gt;Danny: Yeah, especially the first one. [laughs] They're like, "How much is this?"&lt;/p&gt;

&lt;p&gt;Zachary: So that's a completely different conversation than actually when you're sitting down with someone that is technical and wants to probe you for what you know, what you don't know, and learn more about you. And that kind of setting is certainly...I think it's a much more of an intimate process. And I would definitely say the first couple of interviews I had I bombed just impressively.&lt;/p&gt;

&lt;p&gt;Danny: It's almost a beautiful thing how bad an interview can go. [laughs] You're like, I knew this. What happened? Where did my brain go?&lt;/p&gt;

&lt;p&gt;Zachary: Exactly. I've been writing Java code for the last six years. And suddenly, I can't tell you what a class is. What's going on? [laughter] And because I think I had been freelance, I didn't have that traditional career path. So they were a lot more reliant on testing me in the moment about what I knew because it was more difficult to quantify what I knew. And so yeah, those first few interviews really did badly.&lt;/p&gt;

&lt;p&gt;But I quickly learned what I do need to be able to keep in the front of my mind when I'm going into these interviews, the kind of questions that I am going to be asked, and I need to have the answers at hand. And I think it was maybe the fourth interview that I did was the job that I then took. So it wasn't a bad process. It was maybe a bit painful at the time, and there were a lot of nerves and just generally feeling quite ashamed of how badly I performed. [laughter] It's like, I'm so sorry for wasting your time kind of thing.&lt;/p&gt;

&lt;p&gt;Danny: We shouldn't feel those feelings because this is just the process. But for some reason, there's just this feeling of awkwardness. You're like, I swear I applied to this job thinking I can get it. I wasn't trying to waste anyone's time here.&lt;/p&gt;

&lt;p&gt;Zachary: Exactly. And to have got to the interview, there must have been something that they liked with regards to the CV or something. But still, you just end up feeling like, oh, should I be here? [laughter]&lt;/p&gt;

&lt;p&gt;Danny: What advice would you give to anyone about to enter the interview process?&lt;/p&gt;

&lt;p&gt;Zachary: I'd say it definitely takes perseverance. And I would say don't get disheartened when you don't get a position because it's going to happen. You're not going to succeed the first time every time. I'd say take your time between each interview as well. And just make sure that you are, like we already said, looking back at what went wrong and how you can improve on that for the next time. Spend some time to reflect. Don't just go in guns blazing interview after interview after interview because then yeah, you are going to probably fail the more. But if you just spend a bit of time and think about it, each time you should improve.&lt;/p&gt;

&lt;p&gt;Danny: Yeah, I really like the piece that you said: take time to reflect. I think that was such an important thing for me to really sit down after the interview and say, what went well? What didn't go well? What can I improve on? And really, just take a moment of recognizing, okay, I did it. And I have another one scheduled in a couple of days or next week or whatever. How can I nail the next one? Or how can I just do better than what I did today?&lt;/p&gt;

&lt;p&gt;Zachary: Yeah. And I think it's also worth doing that reflection before you've even received feedback. So reflecting immediately after the interview and try to draw your own conclusions, and then seeing how those reflected in the feedback that you get. Because I think that helps you develop your own internal review process. You can see where you are spot on in terms of knowing what did and didn't go well. And sometimes there are things that you think went really well, and they didn't, or you think went really badly and actually, they went well. So I think that's a good process to keep in mind.&lt;/p&gt;

&lt;p&gt;Danny: Oh yeah. Everyone probably knows this already, but we tend to be our worst critic. And so, I would think an interview went terrible. I was like, wow, I just bombed that. And then they'd be like, "Okay, we're moving you on to the next round." I'm like, what? What did you like that I didn't? [laughs]&lt;/p&gt;

&lt;p&gt;Zachary: Yeah, definitely. Certainly, I'd say by that fourth interview, I was still thinking, oh, that was terrible, but it obviously wasn't.&lt;/p&gt;

&lt;p&gt;Danny: [laughs]&lt;/p&gt;

&lt;p&gt;Zachary: It had actually gotten better, and I should have spent more time to think about that. Because what I thought was going on versus what was actually going on wasn't necessarily in line.&lt;/p&gt;

&lt;p&gt;Danny: Right. Now I want to bounce back to being a developer advocate or being in developer relations. How long have you been in DevRel? I've heard a lot of people say dev avocados. [laughter] How long have you been in that space?&lt;/p&gt;

&lt;p&gt;Zachary: Actually, not a huge amount of time. But I started in January of this year. &lt;/p&gt;

&lt;p&gt;Danny: Oh, awesome. Literally a month after me.&lt;/p&gt;

&lt;p&gt;Zachary: Oh, there you go. So yeah, so it was quite a new transition. And it was definitely, I think, brought on from the whole pandemic where that was what may have helped my previous job become quite stale. The working from home and the lack of interaction definitely fueled me wanting to look for something new.&lt;/p&gt;

&lt;p&gt;Danny: Right. But I guess since you've been a developer for ten years at this point, I'm curious to see what you saw as developer advocacy and how that has changed to the present time, especially a time where so many people were on their phones around home or stuck inside. And has that process in your eyes changed from just being very conference-focused to maybe more social media-focused?&lt;/p&gt;

&lt;p&gt;Zachary: Definitely. I definitely think so. I think traditionally, DevRel has very much been; here’s some documentation, here's some sample code. We'll see you at the next conference. I think that was, at least from an outsider's point of view at that time; that was what I picked up. Whereas what I have noticed even just in this year is that teams are becoming more focused on having a good, strong social media presence, whether that is on social media platforms or on &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt; and producing more video content or more blog content or that sort of stuff. &lt;/p&gt;

&lt;p&gt;But they're definitely shifting away from conference is the be-all and end-all. That's not the case anymore. I think the conferences are nice to have when they can happen. But that can't be the focus anymore because most people aren't going to conferences. And obviously, from being online, you can access a much wider audience. You can interact with people all over the world. And you can spread your awareness in a much more wide net.&lt;/p&gt;

&lt;p&gt;Danny: And does your team focus on anything more particular?&lt;/p&gt;

&lt;p&gt;Zachary: So I think at the moment, it's definitely a lot of social media content. I've actually been personally heading quite a lot of &lt;a href="https://www.tiktok.com/"&gt;TikTok&lt;/a&gt; content at the moment and pushing shorter videos as well. I actually started doing some &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt; shorts as well. But those are obviously just essentially the same thing, just different platforms. But yes, yes, a lot of social media and a lot of getting out the shorter snippets of information.&lt;/p&gt;

&lt;p&gt;I think we as a society, as a world, are moving into a place where we like to consume little snippets of knowledge. We don't really want to sit down and watch a 45-minute &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt; video on how to do XYZ. We want a couple of 30-second videos that just give you the punch line and get you interested. And then you're free to do your own research and kind of learning.&lt;/p&gt;

&lt;p&gt;Danny: No, absolutely. As a person who literally grew up in front of the TV as my third parent, I'm amazed at how my attention span or interest has shifted over to &lt;a href="https://www.tiktok.com/"&gt;TikTok&lt;/a&gt;. I don't even feel that I watch TV that much anymore. I'll just go on &lt;a href="https://www.tiktok.com/"&gt;TikTok&lt;/a&gt; for 20 minutes and be like, all right, there's my episode of something and go about my business. [laughs]&lt;/p&gt;

&lt;p&gt;Zachary: Yeah, I completely agree. I think there are very few actual shows that I still watch. And yeah, it's much more interesting, to be honest. I just find the breadth of the kind of entertainment content that you can get on something like &lt;a href="https://www.tiktok.com/"&gt;TikTok&lt;/a&gt; is much more interesting than traditional media.&lt;/p&gt;

&lt;p&gt;Danny: Right. And I see that you are on &lt;a href="https://www.twitch.tv/"&gt;Twitch&lt;/a&gt; as well. Are you still frequenting &lt;a href="https://www.twitch.tv/"&gt;Twitch&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Zachary: Yes. So we are trying to do more live streams as well. That's not been a big focus the last couple of months just because of how the world works. And we've got lots of things going on. But definitely, live streams is another thing that I personally really do enjoy. We also do go live on &lt;a href="https://www.tiktok.com/"&gt;TikTok&lt;/a&gt; sometimes as well. Because I think it opens that space for people to be able to directly communicate with you and hang out and explore something together. &lt;/p&gt;

&lt;p&gt;Certainly, with our &lt;a href="https://www.twitch.tv/"&gt;Twitch&lt;/a&gt;, we tend to maybe look at a service that &lt;a href="https://developer.huawei.com/consumer/en/agconnect/"&gt;AppGallery Connect&lt;/a&gt; have newly offered or something. So, for example, at the beginning of the summer, all their serverless functionality came out of beta. So we spent some time looking at the different services, what you can do with them, and just hanging out in a more relaxed informal place on &lt;a href="https://www.twitch.tv/"&gt;Twitch&lt;/a&gt;, whereas maybe a &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt; video is a much more formal structured thing.&lt;/p&gt;

&lt;p&gt;Danny: And I think that is a big reason why social media, at least in the tech community, has really grown or just really just blown up in the last year or so was this urge for wanting to hang out. People were stuck inside, stuck in their home office. And now, their office may have become their home. So I've noticed when I go on Twitch or just go on social media, it's like a hangout where I'll be working on a project, and people will come into the chat just to say what's up and hang out and just have a genuine curiosity of what you're working on. And it's almost like a mimic of being in the office.&lt;/p&gt;

&lt;p&gt;Zachary: Oh yeah, definitely. Certainly, with a lot of the developers that stream on &lt;a href="https://www.twitch.tv/"&gt;Twitch&lt;/a&gt;, that very much is the vibe that's happening. And I think people are really loving that. They're just working on a project that they'd be working on anyway. It's something that just needs to happen. So why not share with the community and let people maybe even contribute or at least just hang out and chat and ask questions? I think it poses a really great way to interact with communities and get to know people better really.&lt;/p&gt;

&lt;p&gt;Danny: Yeah, absolutely. I'm curious, are there any fun side projects that you're working on besides work? I know work is crazy right now for everybody. [laughs]&lt;/p&gt;

&lt;p&gt;Zachary: Yeah. I mean, work is crazy. I have actually recently, funnily enough, started revisiting the Linux on Android project. It was dormant for many years, but it's actually something that I want to pick back up, kind of dabbled in setting up a new website for it and refreshing some of the fringe stuff around it. It's something that I want to get back into. And again, it would actually probably be something that I would like to stream and do that side of stuff. &lt;/p&gt;

&lt;p&gt;But unfortunately, it is a time constraint and [laughs] finding the time at the end of the day to do these sorts of things as it does now seem like, at least here in Europe, conferences and stuff are starting to start up again. I'm looking behind my monitors, and I've got a big calendar with dates marked on it for different conferences. And it's looking very busy for the next couple of months.&lt;/p&gt;

&lt;p&gt;Danny: Yeah. I'm like, don't even get me started. [laughter]&lt;/p&gt;

&lt;p&gt;Zachary: On the one hand, it is exciting. And on the other hand, I'm dreading it. [laughs]&lt;/p&gt;

&lt;p&gt;Danny: My mom was like, "What are we going to do for Thanksgiving?" I was like, "I think I have two days I can get somewhere. Let's try to figure it out." [laughs]&lt;/p&gt;

&lt;p&gt;Zachary: So, unfortunately, that stuff might end up moving to maybe even next year. But I am enjoying playing around with new web technologies. I kind of never really was a web developer. So the last time I used things like JavaScript was definitely in &lt;a href="https://jquery.com/"&gt;jQuery's&lt;/a&gt; heyday. So it's nice to play around with frameworks and stuff which make actually writing new things enjoyable as opposed to a headache. I try and play around with some stuff where I can.&lt;/p&gt;

&lt;p&gt;Danny: What would you recommend to someone that is, let's say, post-University, post-bootcamp, and they just need to keep their tech up to par? Do they just need to have a project to be working on? Is there any advice that you would give to what they would work on or what they should be focused on?&lt;/p&gt;

&lt;p&gt;Zachary: I think the thing is with that constant learning, which we all have to do, I think it's important to find projects that you are going to be passionate about. It's important to find subject matters that interest you because if you can do that, it becomes a lot less work and much more play when you're learning new things. &lt;/p&gt;

&lt;p&gt;So if you can think about, say, for example, with my Linux and Android stuff, that's something I really enjoy. And that spawns out other things. So it's like, well, I need to write a website for that. Okay, well, what frameworks am I going to use? Am I going to do a static site? Am I going to use something that's got a database and is more dynamic? Okay, what am I going to do for documentation? Am I going to use &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;? &lt;/p&gt;

&lt;p&gt;And if you have a subject matter, it spawns out all these little sub-projects, which means you can learn and touch on different areas of the tech world which you wouldn't necessarily normally be focused on. I write mobile apps. Why do I need to care about a website? Well, because actually, my mobile app needs a website. So that sort of thing. I think if you can find a topic that you're interested in, that's going to make life much easier.&lt;/p&gt;

&lt;p&gt;Danny: Yeah. Because what you said, it becomes more play. It doesn't become some stressful thing that you're like; I got to get this done. I got to get this finished. It becomes more like, oh, this is more intriguing. What happens if I go this way or go that way? Because you're also just learning about the topic that you're interested also.&lt;/p&gt;

&lt;p&gt;Zachary: Precisely. You're going to learn new things as you go. You're going to learn things when you break things, or you realize that maybe the framework that you've picked just isn't up to par for the thing that you need. So you're going to re-evaluate. And it's this constant evolving thing that just keeps going. And that really gives you lots of different ways to learn and lots of different areas to touch on.&lt;/p&gt;

&lt;p&gt;Danny: Yeah. For the last part of this podcast, I wanted to ask, what do you think is the future of DevRel now that you're going to be in it for almost a year? Do you suspect that we're just going to go back to conferences and documentation, or are you going to see conferences dwindling? &lt;/p&gt;

&lt;p&gt;I went to two conferences these last couple of weeks. And it was pretty consistent that everyone was saying that this is a smaller crowd than before. But I imagine that that is just because it's going to take some time for everyone to feel comfortable to be back in a closed space like that. &lt;/p&gt;

&lt;p&gt;Zachary: Yeah. I think what's going to happen is hybrid events are going to become the big thing and the norm. I think in-person events will still continue to happen because there is that element of social interaction of networking that just can't be done online. It's much easier to chat to a group of people when you're physically in the group of people. &lt;/p&gt;

&lt;p&gt;But from the hybrid point of view, having these conferences, these events online, basically makes them far more accessible to the world. For one, most of these conferences are often quite expensive. And even if the conference itself is free, you've got travel, and you've got hotels. So they're immediately not accessible to a lot of people. Whereas if there's an online event, often those are either free or very cheap, and more people can come in and experience things that they wouldn't otherwise be able to experience. &lt;/p&gt;

&lt;p&gt;So I think we will see more in-person events happening again, but I think it will be very rare to see in-person-only events. Events will be either live-streamed or at least recorded, and the videos provided online. I know that was already happening before, but I think that is going to be the normal. I think it would be very weird for that not to happen.&lt;/p&gt;

&lt;p&gt;Danny: I agree. I imagine it'll be this kind of, like you said, hybrid situation going on. And I think that's a good thing, especially for accessibility, and especially it's going to take some time for this whole COVID thing to go away. &lt;/p&gt;

&lt;p&gt;Zachary: Oh definitely.&lt;/p&gt;

&lt;p&gt;Danny: So I think by keeping people safe, I think that's the best option.&lt;/p&gt;

&lt;p&gt;Zachary: Yes, definitely.&lt;/p&gt;

&lt;p&gt;Danny: Well, Zach, I really appreciate your time today. And I really appreciate you sharing your story with us, with me. And what's the best place people can reach out to you? &lt;/p&gt;

&lt;p&gt;Zachary: Basically, &lt;a href="https://www.google.com/search?q=devwithzachary&amp;amp;oq=devwithzachary&amp;amp;aqs=chrome..69i57j69i60.684j0j4&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;my handle is devwithzachary&lt;/a&gt;. And that's everywhere, really, so Twitter, Twitch, TikTok. You'll be able to find me on LinkedIn, on dev.to, lots of the blogging platforms, basically anywhere. So yeah, the handle devwithzachary, and you should be able to find me.&lt;/p&gt;

&lt;p&gt;Danny: Great. Well, thank you so much for being a guest today.&lt;/p&gt;

&lt;p&gt;Zachary: Yes, it was a pleasure. Thank you very much for having me.&lt;/p&gt;

&lt;p&gt;Danny: Take it easy, Zach. &lt;/p&gt;

&lt;p&gt;Zachary: You too.&lt;/p&gt;

&lt;p&gt;Jonan: Thank you so much for joining us. We really appreciate it. You can find the show notes for this episode along with all of the rest of The Relicans podcasts on &lt;a href="https://therelicans.com"&gt;therelicans.com&lt;/a&gt;. In fact, most anything The Relicans get up to online will be on that site. We'll see you next week. Take care.&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How To Get A Job at Google: What You Need to Know</title>
      <author>JudoCoder</author>
      <pubDate>Wed, 08 Dec 2021 15:25:12 +0000</pubDate>
      <link>https://dev.to/judocoder/how-to-get-a-job-at-google-what-you-need-to-know-5907</link>
      <guid>https://dev.to/judocoder/how-to-get-a-job-at-google-what-you-need-to-know-5907</guid>
      <description>&lt;p&gt;If you’re reading this, chances are you're wondering what it takes to get a job at Google. You’ve probably heard that the best and brightest go to work there and that they have some of the most innovative and groundbreaking technologies in the world. You might even be thinking about how great it would be to work on some of these projects with your friends every day. But what does it take to get a job at Google?&lt;/p&gt;

&lt;p&gt;In this post, we’ll tell you everything you need to know about how to land a job with Google. We'll walk you through all the steps from getting your degree, landing internships, and applying for jobs with them once you graduate. So read on for everything you need to know about becoming a Googler!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-google"&gt;
  &lt;/a&gt;
  Why Google?
&lt;/h1&gt;

&lt;p&gt;Google has been one of the most popular search engines for over a decade. In recent years, the company has expanded its services to include YouTube, Google Plus, and Gmail. But why does Google have such a strong presence in the industry?&lt;/p&gt;

&lt;p&gt;Google employees enjoy some of the best benefits in Silicon Valley. They offer on-site health care, free lunch and dinner, and on-site laundry service. Plus, employees get to take advantage of fun perks like free massages and haircuts.&lt;/p&gt;

&lt;p&gt;Google also offers an innovative work environment that encourages creativity among their employees. Employees are encouraged to spend 20% of their time working on personal projects related to what they do at work or something new entirely. This policy encourages innovation and creativity within Google’s workforce which is known as "20% time."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-does-google-find-great-talent"&gt;
  &lt;/a&gt;
  Where does Google find great talent?
&lt;/h1&gt;

&lt;p&gt;There are several sources for finding the best talent at Google. One of them is through internships.&lt;/p&gt;

&lt;p&gt;Internships are great because they give you the opportunity to make a name for yourself in your field, while also getting a feel for what it's like to work at Google. And if you’re not ready to make a decision about where you want to work after college, an internship will help you explore your options.&lt;/p&gt;

&lt;p&gt;Internships are available with most departments at Google, including Engineering, Sales &amp;amp; Operations, Finance, Marketing, Public Policy, and Legal. If you're interested in seeing if there's an internship available that matches your interests or background, head over to our Find an Internship page!&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://careers.google.com/jobs/results/"&gt;Google's careers page&lt;/a&gt; and enter information on your location and major then browse around for opportunities in your area!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-land-an-interview-at-google"&gt;
  &lt;/a&gt;
  How to land an interview at Google
&lt;/h1&gt;

&lt;p&gt;You might be surprised to hear that not everyone who works for Google went to a top-tier college or worked their way up to the company after years of hard work. The truth is, there are many paths that can lead you to a job at Google.&lt;/p&gt;

&lt;p&gt;Many people have been able to get a job with Google just by being themselves and showing how passionate they are about what they do.&lt;/p&gt;

&lt;p&gt;So, how do you land that coveted job with Google? Well, you’ll need to show them why you’re the best person for the job. And the best way to do that is by following these five steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a resume or CV&lt;/li&gt;
&lt;li&gt;Build your online presence&lt;/li&gt;
&lt;li&gt;Network with people in the industry&lt;/li&gt;
&lt;li&gt;Attend career fairs&lt;/li&gt;
&lt;li&gt;Consider internships&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have written a complete guide on that topic. Read here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/judocoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvcZqvGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KRgBWpti--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/762815/4cbfd723-11bf-4108-a6c2-3f9b2af26296.png" alt="judocoder"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/judocoder/how-to-land-an-interview-at-google-and-other-top-tech-companies-2cn5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Land an Interview at Google (and Other Top Tech Companies)&lt;/h2&gt;
      &lt;h3&gt;JudoCoder ・ Dec 2 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#qualities-of-an-ideal-candidate"&gt;
  &lt;/a&gt;
  Qualities of an ideal candidate
&lt;/h1&gt;

&lt;p&gt;To get a job at Google, you need to be more than just qualified. You need to be the best candidate for the position and embody their values.&lt;/p&gt;

&lt;p&gt;Google is looking for candidates who demonstrate key qualities like creativity, empathy, grit, and intelligence. These are all qualities that they look for in new Googlers and it’s what sets them apart from other companies.&lt;/p&gt;

&lt;p&gt;A person with these qualities will understand how their work affects people's lives and can solve problems in a creative way. They also have a relentless passion for their work and will refuse to give up even when faced with challenges. And of course they have an IQ that is off the charts!&lt;/p&gt;

&lt;p&gt;In order to show Google your skills, they'll want to see your previous experience with these traits, so make sure you mention them on your resume or in any interviews you do.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-to-start-your-journey-to-get-a-job-at-google"&gt;
  &lt;/a&gt;
  Where to start your journey to get a job at Google
&lt;/h1&gt;

&lt;p&gt;If you’ve never had an internship or job with Google before, the first step is to get your degree. You can do this online or by getting hands on experience in the field. If you're not sure what degree to pursue, there are many great programs out there that will help you find what you're passionate about, like computer science or engineering.&lt;/p&gt;

&lt;p&gt;After that, it's time to start doing internships. This way, prospective employers will know that you have the knowledge they need and are familiar with Google's work culture. There are plenty of opportunities for internships at Google, so make sure to apply for as many as possible!&lt;/p&gt;

&lt;p&gt;And after your internship? It's time to start applying for jobs at Google. But not everyone can just walk in and start working for them! That's why before you apply, it'll be important to show off your skills with a project or two that pertain to the position you want.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-your-degree"&gt;
  &lt;/a&gt;
  Get your degree
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;If you do not have a degree, then you should read our following guide instead: &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/judocoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvcZqvGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--KRgBWpti--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/762815/4cbfd723-11bf-4108-a6c2-3f9b2af26296.png" alt="judocoder"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/judocoder/what-you-need-to-know-about-landing-a-job-at-google-without-a-computer-science-degree-9h7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What You Need To Know About Landing A Job At Google Without A Computer Science Degree&lt;/h2&gt;
      &lt;h3&gt;JudoCoder ・ Nov 30 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;p&gt;The first step of landing a job with Google is getting your degree. This might sound like the most obvious step, but it's an important one.&lt;/p&gt;

&lt;p&gt;You can get a degree in almost anything, including computer science, engineering, or even something like neuroscience. You'll want to choose your major based on what you're interested in and what field you know you want to grow in.&lt;/p&gt;

&lt;p&gt;Once you've decided on your major, it's time to start thinking about how to get good grades while taking on all the Google-related extracurriculars that are available.&lt;/p&gt;

&lt;p&gt;Think about joining clubs or organizations related to the work you're interested in, attending seminars and conferences related to what you're studying, and researching internships while still in school so that when graduation rolls around there will be more opportunities open up for you!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#get-an-internship"&gt;
  &lt;/a&gt;
  Get an internship
&lt;/h1&gt;

&lt;p&gt;If you're in college and want to work at Google, you should start by getting an internship with them. Internships are a great way to learn about the company and get your foot in the door.&lt;/p&gt;

&lt;p&gt;Google typically has six different internship programs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Engineering and Operations &lt;/li&gt;
&lt;li&gt;Finance and Strategy &lt;/li&gt;
&lt;li&gt;Business Development and User Services &lt;/li&gt;
&lt;li&gt;Internationalization Services &lt;/li&gt;
&lt;li&gt;Partnerships &lt;/li&gt;
&lt;li&gt;Webmaster Tools Quality Assurance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, we'll focus on just one of these internships: the Engineering and Operations program. In this program, interns will spend two or three months working with engineers on a variety of projects throughout the organization. These interns will have excellent opportunities to talk with engineers who work on some of Google's most innovative projects. They can also be involved in brainstorming sessions for new products!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#apply-for-jobs-with-them-after-you-graduate"&gt;
  &lt;/a&gt;
  Apply for jobs with them after you graduate.
&lt;/h1&gt;

&lt;p&gt;The first and most important step in getting a job at Google is to apply for them after you graduate. You can do this by visiting their website and looking through the available jobs.&lt;/p&gt;

&lt;p&gt;You don't need to apply to every position that's open, just the ones you're interested in. After you submit your application, it will be screened by a human resource specialist who might ask you some questions about your qualifications and why you want to work there.&lt;/p&gt;

&lt;p&gt;If they like what they see, they'll pass it on to an Hiring Manager who will also review your application. This process might take a few weeks, so make sure you're up-to-date with everything before applying!&lt;/p&gt;

&lt;p&gt;Applications for full-time positions are accepted from September 1st until the end of October each year. If there's no position that fits what you're looking for, keep checking back or emailing them because they often post new positions leading up to the deadline!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The tech industry is booming and pays well. It's also a hub for innovation and entrepreneurship. If you're considering the tech industry, you should know that there are many ways to make good money in this field, especially if you work for one of the companies listed above.&lt;/p&gt;

&lt;p&gt;You can make anywhere from $80,000 to $180,000 in the tech industry even if you are just starting out (and not to mention the perks and stock options that come along with it!).&lt;/p&gt;

&lt;p&gt;So if you are interested in working at top tech, make sure you are prepared for a technical interview.&lt;/p&gt;

&lt;p&gt;The good news is, &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; provides handpicked selection of all sorts of &lt;a href="https://judocoder.com"&gt;data structures and algorithm questions&lt;/a&gt;, most of these questions have been asked in a real interview!.&lt;/p&gt;

&lt;p&gt;I would suggest you create a free account at judocoder.com and start practicing your skills. You will be prepared in no time!..&lt;/p&gt;

&lt;p&gt;No matter what you do, make sure you practice! You'll be happy you  did when it's time for your interview.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Node-Express basic Project Setup with folder Structure for beginners</title>
      <author>Shaheb Ali</author>
      <pubDate>Wed, 08 Dec 2021 15:22:11 +0000</pubDate>
      <link>https://dev.to/systembugbd/node-express-basic-project-setup-with-folder-structure-for-beginners-3162</link>
      <guid>https://dev.to/systembugbd/node-express-basic-project-setup-with-folder-structure-for-beginners-3162</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KJgoOCYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5puy40vslh780kanh5ra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJgoOCYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5puy40vslh780kanh5ra.png" alt="Clean Code Architecture" width="772" height="567"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over the last several years we’ve seen a whole range of ideas regarding the architecture of systems. These include:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://alistair.cockburn.us/Hexagonal+architecture"&gt;Hexagonal Architecture&lt;/a&gt; (a.k.a. Ports and Adapters) by Alistair Cockburn and adopted by Steve Freeman, and Nat Pryce in their wonderful book &lt;a href="http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627"&gt;Growing Object Oriented Software&lt;/a&gt;&lt;br&gt;
&lt;a href="http://jeffreypalermo.com/blog/the-onion-architecture-part-1/"&gt;Onion Architecture&lt;/a&gt; by Jeffrey Palermo&lt;br&gt;
&lt;a href="http://blog.cleancoders.com/2011-09-30-Screaming-Architecture"&gt;Screaming Architecture&lt;/a&gt; from a blog of mine last year&lt;br&gt;
&lt;a href="http://www.amazon.com/Lean-Architecture-Agile-Software-Development/dp/0470684208/"&gt;DCI&lt;/a&gt; from James Coplien, and Trygve Reenskaug.&lt;br&gt;
&lt;a href="http://www.amazon.com/Object-Oriented-Software-Engineering-Approach/dp/0201544350"&gt;BCE&lt;/a&gt; by Ivar Jacobson from his book Object Oriented Software Engineering: A Use-Case Driven Approach&lt;/p&gt;

&lt;p&gt;Don't get panic to see above architectural article, all above only for your reference, if you wish to read and gather knowledge you can through the link. &lt;br&gt;
See below article to create a express server and project setup step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-setup-step-by-step"&gt;
  &lt;/a&gt;
  Basic setup step by step
&lt;/h2&gt;

&lt;p&gt;Open cmd and go to your desired folder now write -&lt;br&gt;
&lt;code&gt;mkdir cleancodeStructure&lt;/code&gt;&lt;br&gt;
&lt;code&gt;cd cleancodeStructure&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm init -y&lt;/code&gt; to initiate the &lt;strong&gt;package.json&lt;/strong&gt; file into your project you will see in sidebar- &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQQU6cG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtdrbu8w77qvgamxujm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQQU6cG3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gtdrbu8w77qvgamxujm8.png" alt="package.json" width="276" height="39"&gt;&lt;/a&gt;&lt;br&gt;
now install few package into your project to make it trackable and maintainable and workable-&lt;br&gt;
&lt;code&gt;npm i express cros morgan dotenv&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gTfYVnTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxbjbtqifx0guu50ogvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gTfYVnTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxbjbtqifx0guu50ogvw.png" alt="dependencies" width="273" height="164"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also install nodemon to keep your server ups and running once start &lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i -D nodemon&lt;/code&gt; -D as a &lt;strong&gt;devDependencies&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hlK6fz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwlpvmmamd7je9yyiyol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hlK6fz9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwlpvmmamd7je9yyiyol.png" alt="devDependencies" width="276" height="82"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now create &lt;strong&gt;server.js&lt;/strong&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k7ez7DRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stc62v3z0ttmz1wghu1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k7ez7DRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stc62v3z0ttmz1wghu1f.png" alt="server.js" width="266" height="34"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in the same level of &lt;strong&gt;package.json&lt;/strong&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIkLVdI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ymsm8np9235oxw6u968.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIkLVdI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ymsm8np9235oxw6u968.png" alt="package.json" width="261" height="58"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;import some necessary file to server.js like below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aAI8uPCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4hdeym1m978vek6nlhu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aAI8uPCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b4hdeym1m978vek6nlhu.png" alt="import some necessary file to server.js" width="744" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and write few lines of code to make a &lt;strong&gt;nodejs server&lt;/strong&gt; like below Please give online line break-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69GiPGeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1ihyubt10hkeinkq176.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69GiPGeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a1ihyubt10hkeinkq176.png" alt="server.js" width="838" height="259"&gt;&lt;/a&gt;&lt;br&gt;
now come to the next level of app and router section which you already included in &lt;strong&gt;server.js&lt;/strong&gt; but not yet created.&lt;/p&gt;

&lt;p&gt;create &lt;strong&gt;app&lt;/strong&gt; folder in the &lt;strong&gt;package.json&lt;/strong&gt; level and create *&lt;em&gt;app.js *&lt;/em&gt; to create express app for your project&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MF3g3-UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5w01i4mm5utlv0rzuh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MF3g3-UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5w01i4mm5utlv0rzuh8.png" alt="App Folder with app.js to work with app level codebase" width="247" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App Folder&lt;/strong&gt; with &lt;strong&gt;app.js&lt;/strong&gt; to work with app level codebase&lt;/p&gt;

&lt;p&gt;now &lt;strong&gt;import express&lt;/strong&gt; into the &lt;strong&gt;app.js&lt;/strong&gt; file with &lt;strong&gt;getAppHealthCheckerController&lt;/strong&gt;, don't worry will talk about &lt;strong&gt;getAppHealthCheckerController&lt;/strong&gt; later.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--11ngFQcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ldp3qxfzfwiyn5ie3j3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--11ngFQcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ldp3qxfzfwiyn5ie3j3.png" alt="import express into the app.js" width="815" height="60"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now come to below line and create a express app like below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3s8Rf2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92gx6fkeiuwl6dolt3hg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3s8Rf2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92gx6fkeiuwl6dolt3hg.png" alt="express app" width="337" height="40"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then define a &lt;strong&gt;route&lt;/strong&gt; for &lt;strong&gt;app health&lt;/strong&gt; called &lt;strong&gt;/health&lt;/strong&gt; route in the &lt;strong&gt;app.js&lt;/strong&gt; like below and export express app - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eivqx4ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1fows0nj5bhzig6ihqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eivqx4ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1fows0nj5bhzig6ihqi.png" alt="the app health route" width="630" height="92"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now come to the router controller part, I mention above that, I will discuss about &lt;strong&gt;getAppHealthCheckerController&lt;/strong&gt; latter, now time to discuss in a short about app health route and Controller. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/health&lt;/strong&gt; route&lt;br&gt;
Most of the server for backend API they checked one route that must be exists. do you know what is that? ok, I am telling you this is called &lt;strong&gt;/health&lt;/strong&gt; route. &lt;a href="https://www.digitalocean.com/"&gt;digital ocean&lt;/a&gt; one of the server service provider look first for &lt;strong&gt;/health&lt;/strong&gt; route. if API has health route they think that the API server health is good. generally this route expect status code 200 in response back.&lt;/p&gt;

&lt;p&gt;now create &lt;strong&gt;controller folder&lt;/strong&gt; in the &lt;strong&gt;package.json&lt;/strong&gt; level or &lt;strong&gt;first level&lt;/strong&gt; and &lt;strong&gt;app.js&lt;/strong&gt; controller inside the controller folder like below &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNi4TcrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isqhz28h2qpbpizc3c3m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNi4TcrX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/isqhz28h2qpbpizc3c3m.png" alt="controller folder" width="247" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and code inside &lt;strong&gt;app.js&lt;/strong&gt; like below-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q38GyPkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9sfkfmja9hiumo0p9ym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q38GyPkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9sfkfmja9hiumo0p9ym.png" alt="app.js" width="795" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now config your &lt;strong&gt;package.json&lt;/strong&gt; file script like below -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_K41S5NU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzfyibwjfkasgbbj8a4r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_K41S5NU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzfyibwjfkasgbbj8a4r.png" alt="script dev" width="434" height="85"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now you are ready to check your &lt;strong&gt;/health&lt;/strong&gt; route from browser.&lt;br&gt;
go to terminal of of your &lt;strong&gt;vscode&lt;/strong&gt; and type &lt;code&gt;npm run dev&lt;/code&gt; and hit &lt;a href="http://localhost:4444/health"&gt;http://localhost:4444/health&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;its time to Bloom&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rx8q795P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awda6129wbeg9yc1z4vq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rx8q795P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awda6129wbeg9yc1z4vq.png" alt="http://localhost:4444/health" width="628" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Welcome you made an express app with the health route; you are almost done to go a good way to write your code in a good structure.&lt;/p&gt;

&lt;p&gt;now create a &lt;strong&gt;routes&lt;/strong&gt; folder with &lt;strong&gt;router.js&lt;/strong&gt; file like below example.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HE1Ffkl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29t07uc1zz0ss3rykojw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HE1Ffkl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29t07uc1zz0ss3rykojw.png" alt="routes folder with router.js" width="247" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and create some route like below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpUz0v4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23ozck2i0unjc5n5lfn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpUz0v4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23ozck2i0unjc5n5lfn5.png" alt="some route" width="756" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;then go to &lt;strong&gt;Controller folder&lt;/strong&gt; to create some controller which you attached with the above &lt;strong&gt;new route&lt;/strong&gt; (&lt;strong&gt;getHomeController&lt;/strong&gt;, &lt;strong&gt;getBlogController&lt;/strong&gt;, &lt;strong&gt;getBlogByIdController&lt;/strong&gt;), in &lt;strong&gt;router.js&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;at first create &lt;strong&gt;home.js&lt;/strong&gt; in &lt;strong&gt;controller folder&lt;/strong&gt; and write some demo code for home route like below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JqEmECGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fy3krsfsu0yblsgax29.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqEmECGH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fy3krsfsu0yblsgax29.png" alt="home.js" width="639" height="137"&gt;&lt;/a&gt;&lt;br&gt;
Secondly create &lt;strong&gt;blog.js&lt;/strong&gt; in &lt;strong&gt;controller folder&lt;/strong&gt; and write some code for blog route like below.&lt;/p&gt;

&lt;p&gt;define a blogData variable to write demo blog data for example -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pbr-PjfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7ydvtkqj5e5cd191c1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pbr-PjfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7ydvtkqj5e5cd191c1n.png" alt="blogData" width="870" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now define a controller function &lt;code&gt;getBlogController&lt;/code&gt; like below to make the &lt;strong&gt;/blog&lt;/strong&gt; route workable and to see the blog API and paginate the Blog API;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yef5uAIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imlgsyyp5ejvhit8pnu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yef5uAIp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imlgsyyp5ejvhit8pnu5.png" alt="getBlogController" width="880" height="641"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I keep the all the code in this controller to make it simple, you can separate with the middleware.&lt;/p&gt;

&lt;p&gt;now hit &lt;a href="http://localhost:4444/blog"&gt;http://localhost:4444/blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MI1b1RsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph4doqwmz8r6frbrd87r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MI1b1RsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph4doqwmz8r6frbrd87r.png" alt="Blog" width="880" height="728"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you can paginate the Blog API like below &lt;a href="http://localhost:4444/blog?page=2&amp;amp;limit=1"&gt;http://localhost:4444/blog?page=2&amp;amp;limit=1&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FhiLSQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s1p8bw1i05u0f0vgkho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FhiLSQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s1p8bw1i05u0f0vgkho.png" alt="Blog API" width="871" height="667"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now create another route controller to get the blog by id. Its very simple to get specific blog data no matter where it is coming it may come from &lt;strong&gt;mongodb&lt;/strong&gt; or &lt;strong&gt;javascript object&lt;/strong&gt; or &lt;strong&gt;JSON data&lt;/strong&gt; or some where else, see below how to get data from javascript object by controller function in &lt;strong&gt;blog.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HfbKtaAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7dz96iv4cq1w83c3b34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HfbKtaAI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7dz96iv4cq1w83c3b34.png" alt="blog.js" width="743" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and export both controller function, &lt;/p&gt;

&lt;p&gt;you can create &lt;strong&gt;index.js&lt;/strong&gt; file to export your all controller function from the controller folder together which will&lt;br&gt;
help you a lot to minify your code base and keep your code clean. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nPZodQ3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xr5s3hmj61nv3ek3dp5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nPZodQ3H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xr5s3hmj61nv3ek3dp5v.png" alt="index.js" width="274" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev1JG-o3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wmzmxn8wasz0pnuz180.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ev1JG-o3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wmzmxn8wasz0pnuz180.png" alt="index.js" width="880" height="287"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;when you call the specific controller you just need to call the &lt;code&gt;const { yourController } = require('../controller');&lt;/code&gt; and extract the specific controller to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1DLbyUsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9d7lfsxrpr1en0da2psh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1DLbyUsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9d7lfsxrpr1en0da2psh.gif" alt="Wow" width="498" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we are almost done, now see some middleware and wrap up for now...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#middleware"&gt;
  &lt;/a&gt;
  middleware
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named next.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Middleware functions can perform the following tasks:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute any code.&lt;/li&gt;
&lt;li&gt;Make changes to the request and the response objects.&lt;/li&gt;
&lt;li&gt;End the request-response cycle.&lt;/li&gt;
&lt;li&gt;Call the next middleware function in the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;how to create a middleware and how to use see below example and folder structure  &lt;/p&gt;

&lt;p&gt;now create a folder called &lt;strong&gt;middleware&lt;/strong&gt; like below and create a demo middleware for testing purpose.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g0s-LLSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm4jwbb902ev80507wgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g0s-LLSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm4jwbb902ev80507wgy.png" alt="middleware " width="267" height="64"&gt;&lt;/a&gt;&lt;br&gt;
write some code like below to demo.js middleware&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXPSpfOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci8l1cxqwge7ov5l5sdk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXPSpfOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci8l1cxqwge7ov5l5sdk.png" alt="demo.js" width="596" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;import and use to &lt;strong&gt;server.js&lt;/strong&gt; for all route &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-ydrOtP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fuuxekpn46eybo2nt3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-ydrOtP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fuuxekpn46eybo2nt3r.png" alt="Server.js" width="876" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See middleware is working--&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xBs27e7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z95v6k4ky5rrcgj71su0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xBs27e7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z95v6k4ky5rrcgj71su0.png" alt="middleware" width="555" height="195"&gt;&lt;/a&gt;&lt;br&gt;
for more details &lt;a href="https://expressjs.com/en/guide/using-middleware.html"&gt;click here&lt;/a&gt; to visit express.js&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-handler"&gt;
  &lt;/a&gt;
  Error handler
&lt;/h2&gt;

&lt;p&gt;you can create error folder in first level and create your own custom error handler, like below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fzaq2auI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8ybzla0zcn9uss47nrc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fzaq2auI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8ybzla0zcn9uss47nrc.png" alt="error handler" width="291" height="73"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;errorHandler.js&lt;/strong&gt; code sample looks like -  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFWRkYLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcu3q2o9cm98rjf0op1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFWRkYLJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcu3q2o9cm98rjf0op1s.png" alt="error handler" width="880" height="649"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;use it in &lt;strong&gt;server.js&lt;/strong&gt; like below by using &lt;strong&gt;app.use()&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6itazFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nohhdyv42ui9tw9e4myz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6itazFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nohhdyv42ui9tw9e4myz.png" alt="server.js" width="880" height="583"&gt;&lt;/a&gt;&lt;br&gt;
if error occur error message will show of the unexpected route &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yn0pXVZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hl3y9xryjq91ptgek6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yn0pXVZJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hl3y9xryjq91ptgek6p.png" alt="error message" width="548" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;you are almost done with setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you create all other folder for your convenient, it may be anything which one is required for your project, like below- &lt;br&gt;
log, service, public, utils, db, models etc as per your needs&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KsOlOQxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj9mnex88ujanjc8xbdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KsOlOQxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj9mnex88ujanjc8xbdu.png" alt="Folder structure" width="260" height="636"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O7APLe9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t12y8gkhar83u3pbd5vb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O7APLe9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t12y8gkhar83u3pbd5vb.png" alt="thank you" width="840" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Je_Zpf2snmQ&amp;amp;list=PL15CsFQf-JdzcYTsiOHM1pbgowXe-g2Fm"&gt;You can see a video more about NODE and Expressjs server and Paginated API creation-&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can learn docker from this &lt;a href="https://www.youtube.com/watch?v=RC9yxMcXquI&amp;amp;list=PL15CsFQf-JdzNcfMCSRmywaEkNNsbt5Xv"&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;that's all about folder Structure and node express server creation with error handling and middleware&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
Above all I am human being, I have lots of mistake and lack of knowledge. So if i made any mistake and provide any misinformation, please correct me and pardon me. &lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9qtVAbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwrfq54sdjmiuh4k9uln.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9qtVAbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwrfq54sdjmiuh4k9uln.gif" alt="kudhahafez" width="393" height="120"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>node</category>
    </item>
    <item>
      <title>Binance Clone Script- How to Start your Cryptocurrency Exchange Like Binance?</title>
      <author>mia chao</author>
      <pubDate>Wed, 08 Dec 2021 15:03:28 +0000</pubDate>
      <link>https://dev.to/miachao7/binance-clone-script-how-to-start-your-cryptocurrency-exchange-like-binance-33d7</link>
      <guid>https://dev.to/miachao7/binance-clone-script-how-to-start-your-cryptocurrency-exchange-like-binance-33d7</guid>
      <description>&lt;p&gt;In this post, we’ll explain how Binance Clone Script works in low complexity terms. We hope it provides you with a good understanding of the crypto exchange and its clone script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gf1FWE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6v3kr6ma30xr2qu32g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gf1FWE---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6v3kr6ma30xr2qu32g2.png" alt="Binance exchange" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-brief-explanation-about-binance"&gt;
  &lt;/a&gt;
  First, brief explanation about Binance
&lt;/h2&gt;

&lt;p&gt;Any enthusiast of the world of cryptocurrencies and who wants to exchange some of them or keep them safely will probably need an exchange platform. That is a service with the possibility of buying and selling different cryptocurrencies (in this case) at values determined by the market.&lt;br&gt;
Without a doubt, one of the most popular exchanges today is Binance, which has gained recognition in the crypto world due to the wide variety of currencies it offers, and it is very low transaction fees.&lt;br&gt;
Changpeng Zhao is the main name behind Binance. This Chinese-Canadian businessman is the founder of the company that today establishes itself as the largest cryptocurrency exchange platform in the world in terms of volume of transactions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-and-disadvantages-of-binance"&gt;
  &lt;/a&gt;
  Advantages and Disadvantages of Binance:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;br&gt;
• Safe and extremely reliable platform;&lt;br&gt;
• Many integrated services that allow you to use the same site to make all potentially interesting operations for a cryptocurrency enthusiast;&lt;br&gt;
• Very low transaction fees;&lt;br&gt;
• High protection of user data and a lot of privacy in general;&lt;br&gt;
• Compatible with all recent devices and operating systems.&lt;br&gt;
&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;br&gt;
• No fiat currencies trading pairs&lt;br&gt;
• No phone for customer support&lt;br&gt;
• Experienced security breaches in the past&lt;br&gt;
• No privacy-preserving measures&lt;/p&gt;

&lt;p&gt;Now let's find out together the &lt;strong&gt;&lt;a href="https://radindev.com/binance-clone-script/"&gt;Binance clone script&lt;/a&gt;&lt;/strong&gt; What it is, and how does it work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zTfl2CSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jkr5xvjkwnn4bdv3c24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTfl2CSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jkr5xvjkwnn4bdv3c24.png" alt="What Is Binance Clone Script" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-binance-clone-script"&gt;
  &lt;/a&gt;
  What Is Binance Clone Script?
&lt;/h2&gt;

&lt;p&gt;Binance Clone Script is the clone software of the Binance exchange platform. It functions similar to the Original clone software with some more features. This software is completely customizable. That means you can frame the software with some additional features as per your business requirements. This clone script is a flexible decentralized platform that makes the users operate in a hassle-free manner. It provides multiple payment methods based on geography that the user will find it easy to exchange crypto to fiat or vice versa.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-of-binance-clone-script"&gt;
  &lt;/a&gt;
  Features of Binance Clone Script
&lt;/h3&gt;

&lt;p&gt;• Wallet Integration&lt;br&gt;
• Multiple Crypto Support&lt;br&gt;
• Instant Buy / Sell&lt;br&gt;
• Multiple Trade Pairs&lt;br&gt;
• Live market&lt;br&gt;
• Two-Factor Authentication&lt;br&gt;
• Dispute Management&lt;br&gt;
• Mobile Trading App for Android, iOS&lt;br&gt;
• Push notifications&lt;br&gt;
• Robust escrow wallet&lt;br&gt;
• Attractive UI/UX module.&lt;br&gt;
• Admin Panel&lt;br&gt;
• IEO Launchpad Integration&lt;br&gt;
• Security Token Exchange Integration&lt;br&gt;
• 100% customizable Bitcoin Exchange Script&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTBDaB1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyq656m8j9r6z6mi7r93.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTBDaB1x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyq656m8j9r6z6mi7r93.png" alt="Binance Clone App" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binance-clone-app"&gt;
  &lt;/a&gt;
  Binance Clone App
&lt;/h2&gt;

&lt;p&gt;A ready &amp;amp; tested, white-label Binance clone app for people over iOS/Android with a web-based admin panel. Binance app helped many startups, entrepreneurs, and companies gain visibility and increase their company value &amp;amp; revenue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#significant-features-of-binance-clone-app"&gt;
  &lt;/a&gt;
  Significant Features of Binance Clone App
&lt;/h3&gt;

&lt;p&gt;• Two-factor Authentication&lt;br&gt;
• Instant notifications&lt;br&gt;
• QR Scanning&lt;br&gt;
• Ratings and Feedback facilities&lt;br&gt;
• Location Tracking&lt;br&gt;
• Live Chat Options&lt;br&gt;
• Transaction History&lt;br&gt;
• Ad-posting facility&lt;br&gt;
• Encrypted Private key&lt;br&gt;
• Multiple language support&lt;br&gt;
• White list options&lt;br&gt;
• Fast KYC Verification&lt;br&gt;
• Advanced Price Tracking&lt;/p&gt;

&lt;p&gt;Let’s get into what a white-labeled Binance clone script can do for your business.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I_g5UcMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfbikn8a1pvdsnr2xe0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I_g5UcMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfbikn8a1pvdsnr2xe0h.png" alt="What Does White label Binance Clone Script" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-white-label-binance-clone-script"&gt;
  &lt;/a&gt;
  What Does White label Binance Clone Script?
&lt;/h2&gt;

&lt;p&gt;The white-labeling concept is when a ready-made script solution is transformed to suit your own brand — the name, the logo, and other intricate details of creating your business.&lt;br&gt;
The cost of a white-labeled Binance app clone will be within your budget, and also it helps you start your business instantly.&lt;br&gt;
Owning a Binance clone script can be a revelation for your crypto exchange business.&lt;br&gt;
When rivals with similar business models run traditional operations, you with a white-labeled Binance clone script can pull people towards your crypto exchange services.&lt;br&gt;
Always remember! Comfort before anything. When your customers can find your business just a click away, they will come looking for your on-demand crypto exchange services the next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security-features-in-white-label-binance-clone-script"&gt;
  &lt;/a&gt;
  Security Features in White label Binance Clone Script:
&lt;/h3&gt;

&lt;p&gt;• Content Management System (CMS)&lt;br&gt;
• Digital wallet and payment integration&lt;br&gt;
• SSL Encryption&lt;br&gt;
• E-Mail or SMS based verification method&lt;br&gt;
• Hypertext (HTTPS) encryption&lt;br&gt;
• Faster KYC/AML authentication&lt;br&gt;
• Anti-DDoS (Anti-Distributed Denial of Service)&lt;br&gt;
• Cross-Site forgery protection (CSRF)&lt;br&gt;
• 2FA Authentication&lt;br&gt;
• Multi-Sig Wallet consolidation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-benefits-of-white-label-binance-clone-script-are"&gt;
  &lt;/a&gt;
  The Benefits of White Label Binance Clone Script Are:
&lt;/h3&gt;

&lt;p&gt;• Easy to deploy products&lt;br&gt;
• Customizable UI/UX&lt;br&gt;
• Market analysis&lt;br&gt;
• Time efficient transactions&lt;br&gt;
• Cost effective crypto exchange&lt;br&gt;
• Multiple payment methods&lt;br&gt;
• No need for an expert technician&lt;br&gt;
• Reliable crypto exchange&lt;br&gt;
• Improved accuracy and efficiency&lt;br&gt;
• Multiple device access&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-using-whitelabel-binance-clone-script"&gt;
  &lt;/a&gt;
  Advantages of Using White-label Binance Clone Script
&lt;/h3&gt;

&lt;p&gt;• &lt;strong&gt;Cost&lt;/strong&gt;: Developing a website from scratch will lead to higher costs of development. Binance Clone script is not just quick to build but also cost you less. It is easy to save resources and money.&lt;br&gt;&lt;br&gt;
• &lt;strong&gt;Customizable&lt;/strong&gt;:  You can request any model clone script with any design.&lt;br&gt;
• &lt;strong&gt;Quick and easy launch&lt;/strong&gt;: A lot of thinking and planning goes behind developing a website from scratch. Clone scripts, on the other hand, obviate all the market research and planning, design, etc. And makes the development much easier and faster.&lt;br&gt;
• &lt;strong&gt;Time&lt;/strong&gt;: Web/app Binance clone script reduces the development time. You can easily get the benefits of quick time to market. &lt;br&gt;
• &lt;strong&gt;Low commercial risk&lt;/strong&gt;: The app offered to clients has been tested and is a proven solution.&lt;/p&gt;

&lt;p&gt;Now we will compare Coinbase and Kraken with Binance, their more popular competitor.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NHalf1p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhtomutgjvqf12me7krk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NHalf1p_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhtomutgjvqf12me7krk.png" alt="Compare Coinbase and Kraken with Binance" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kraken-vs-coinbase-vs-binance"&gt;
  &lt;/a&gt;
  Kraken VS Coinbase VS Binance
&lt;/h3&gt;

&lt;p&gt;As of this writing: according to coinmarketcap.com, &lt;strong&gt;Kraken&lt;/strong&gt; has;&lt;br&gt;
• Trading Volume(24h): $2,315,530,490.92&lt;br&gt;
• Avg. Liquidity: 713&lt;br&gt;
• Weekly visits: 2,412,261&lt;br&gt;
• Markets: 374&lt;br&gt;
• Coins: 98&lt;br&gt;
• Exchange score: 7.9/10&lt;br&gt;
• Rank: 4/10&lt;br&gt;
• The number of employees: 1450&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coinbase&lt;/strong&gt; has:&lt;br&gt;
• Trading Volume(24h): $6,823,483,874.67&lt;br&gt;
• Avg. Liquidity: 682&lt;br&gt;
• Weekly visits: 3,875,914&lt;br&gt;
• Markets: 367&lt;br&gt;
• Coins: 119&lt;br&gt;
• Exchange score: 8.4/10&lt;br&gt;
• Rank: 2/10&lt;br&gt;
• The number of employees: +2700&lt;br&gt;
• Verified users: 73+M&lt;br&gt;
• Countries: +100&lt;br&gt;
• Assets on platform: $255B&lt;br&gt;
• Quarterly volume traded: $327B&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binance&lt;/strong&gt; has:&lt;br&gt;
• Trading Volume(24h): $111,086,633,497.21&lt;br&gt;
• Avg. Liquidity: 780&lt;br&gt;
• Weekly visits: 31,922,013&lt;br&gt;
• Markets: 1581&lt;br&gt;
• Coins: 409&lt;br&gt;
• Exchange score: 9.9/10&lt;br&gt;
• Rank: 1/10&lt;br&gt;
• The number of employees: 1377&lt;/p&gt;

&lt;p&gt;I noticed a lot of similarities when comparing Kraken to Coinbase and Binance.&lt;br&gt;
Most of the sites are super fans of Binance. The best ever, but let's admit that we are users of all exchanges. As one varies from the other, offering more or fewer options.&lt;br&gt;
These exchanges (Kraken, Coinbase, and Binance), have a fairly similar fee structure. The services are also more or less the same, apart from Coinbase, which only has very few other additional options. With Coinbase, it is only possible to buy Bitcoin and a few other cryptos. It is definitely not recommended for trading, for example. In that case, Coinbase Pro can do this job.&lt;br&gt;
Overall, the challenge between Binance, Kraken, and Coinbase is certainly won by Binance. In the second position, we put Coinbase (Pro) and in the third Kraken exchange.&lt;br&gt;
Overall, you can buy Bitcoin on all of these exchanges. There isn't much difference between these three exchanges. The choice is up to you and is based on your country of residence, available payment method, and commission preference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Last word:&lt;/strong&gt;&lt;br&gt;
Hope the information provided above helped you get a clear picture of what all to look for while choosing a clone app to build your Binance-like Application or Website. I’m happy to help!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>You must use augroup with autocmd in vim | Here's how</title>
      <author>Waylon Walker</author>
      <pubDate>Wed, 08 Dec 2021 14:49:50 +0000</pubDate>
      <link>https://dev.to/waylonwalker/you-must-use-augroup-with-autocmd-in-vim-heres-how-ig6</link>
      <guid>https://dev.to/waylonwalker/you-must-use-augroup-with-autocmd-in-vim-heres-how-ig6</guid>
      <description>&lt;p&gt;If you are running vim autocmd's without a group, you're killing your performance.  Granted your probably not sourcing your vimscript files with autocmd's too often, but every time you source that vimscript you are adding another command that needs to run redundantly.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2ITTn4Dl0lc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-what-i-had"&gt;
  &lt;/a&gt;
  This is what I had
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Not silky smooth&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;WAAY&lt;/strong&gt; too long I have had something like this in my  vimrc or init.vim. It formats my python for me on every save, works great except if I source my dotfiles more than once I start adding how many times black runs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;autocmd bufwritepre *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'Black'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-is-a-bare-autocmd-bad"&gt;
  &lt;/a&gt;
  Why is a bare autocmd bad
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;let me demonstrate&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets create a new file called &lt;code&gt;format.vim&lt;/code&gt; and give it the &lt;code&gt;:so %&lt;/code&gt;. Works great, it starts telling me that its formatting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;autocmd bufwritepre *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;echo&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"formatting with black"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt; as every time I give it the &lt;code&gt;:so %&lt;/code&gt; it formats an extra time on every&lt;br&gt;
single save.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-an-augroup"&gt;
  &lt;/a&gt;
  Setting up an augroup
&lt;/h2&gt;

&lt;p&gt;I've been told I need an &lt;code&gt;augroup&lt;/code&gt; to prevent duplicates. So I did it, and nothing changes, it still ran as many times as it was sources on every save.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;augroup black
    autocmd bufwritepre *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;echo&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"formatting with black"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
augroup end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#clearing-out-the-augroup"&gt;
  &lt;/a&gt;
  Clearing out the augroup
&lt;/h2&gt;

&lt;p&gt;What you need to do is clear out all commands in the augroup with &lt;code&gt;autocmd!&lt;/code&gt; right at the beginning of the group.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;augroup black
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
    autocmd bufwritepre *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;echo&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"formatting with black"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
augroup end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#my-final-silky-smooth-setup"&gt;
  &lt;/a&gt;
  My Final silky smooth setup
&lt;/h2&gt;

&lt;p&gt;Now this is what I have in my dotfiles for a silky smooth setup that does not run automds like crazy as I am making changes to my dotfiles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;augroup waylonwalker
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
    autocmd bufwritepre *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'PyPreSave'&lt;/span&gt;
    autocmd bufwritepost *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;py&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'PyPostSave'&lt;/span&gt;
    autocmd bufwritepost &lt;span class="p"&gt;.&lt;/span&gt;tmux&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;conf&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;':!tmux source-file %'&lt;/span&gt; autocmd bufwritepost &lt;span class="p"&gt;.&lt;/span&gt;tmux&lt;span class="p"&gt;.&lt;/span&gt;local&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;conf&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;':!tmux source-file %'&lt;/span&gt;
    autocmd bufwritepost *&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;vim&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;':source %'&lt;/span&gt;
augroup end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#related-links"&gt;
  &lt;/a&gt;
  Related Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vimhelp.org/autocmd.txt.html#%3Aaugroup"&gt;vim-help&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/2ITTn4Dl0lc"&gt;youtube video&lt;/a&gt; for this article&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>vim</category>
    </item>
    <item>
      <title>How we build an open source app for animal shelters</title>
      <author>AzisK</author>
      <pubDate>Wed, 08 Dec 2021 14:49:43 +0000</pubDate>
      <link>https://dev.to/azisk/how-we-build-an-open-source-app-for-animal-shelters-91e</link>
      <guid>https://dev.to/azisk/how-we-build-an-open-source-app-for-animal-shelters-91e</guid>
      <description>&lt;p&gt;Hi, we have been building an open source application for animal shelters &lt;a href="https://app.petbook.lt/"&gt;https://app.petbook.lt/&lt;/a&gt; for the past year and we have found great value in GitHub Actions. The application has separate Back-end and Front-end repos and they both utilise GitHub Actions notably. The application had been started as part of Kayak WeCanCode Academy &lt;a href="https://www.wecancode.lt/"&gt;https://www.wecancode.lt/&lt;/a&gt; event in Kaunas to teach the local community in Lithuania to code and at the same time create software for the common good.&lt;/p&gt;

&lt;p&gt;This software for animal shelters is meant to help document homeless and already in-shelter animals as well as to ease the adoption of these animals.&lt;/p&gt;

&lt;p&gt;Lately both repositories have been losing traction (since summer) resulting in only very few developers that also barely find time to build this great software. However, I hope that winning a prize in this event will bring back the enthusiasm to continue building it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWKARKEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvq2yw55dwnle57ikrlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWKARKEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvq2yw55dwnle57ikrlw.png" alt="pets-oss repos contribution statistics" width="880" height="687"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;When we started this work, we thought we would have it built long ago. Like with all software estimation, right? However, this open source application still needs some work to reach the minimum viable product (MVP) stage and I will guide it until it actually reaches the MVP and then we can hand it out to shelters to be tested and gather the feedback.&lt;/p&gt;

&lt;p&gt;When we started these repositories, I had had never used GitHub Actions and even now they seem to be shockingly useful. &lt;/p&gt;

&lt;p&gt;Both Back-end and Front-end repos use GitHub Actions to test and to deploy the code.&lt;/p&gt;

&lt;p&gt;I mostly worked on the Back-end repo, thus I will mostly share my excitement in Back-end repo using GitHub Actions.&lt;/p&gt;

&lt;p&gt;Unabashed, I am proud of our decision to always nuke and redeploy the database on deployment to simplify the database changes. This allows us to have the same structure database across local, dev, prod environments as well as "local" database within GitHub Actions. Only the entries can differ, the database description language (DDL) stays the same and it is all described in 1 SQL file &lt;a href="https://github.com/pets-oss/pets-back/blob/main/database/1-schema.sql"&gt;https://github.com/pets-oss/pets-back/blob/main/database/1-schema.sql&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I must mention that we chose to always redeploy the database to ease the development and have all DDL in one file without any migration amendments but this is definitely not safe for a working application! We are using this path only until we reach the MVP. Later on, we would not like to redeploy the database and lose all the production entries that users have already entered!&lt;/p&gt;

&lt;p&gt;To this I would like to add that I am also extremely proud of our approach to Dockerize this Back-end application together with a PostgreSQL database. This allows us to spin up the very same code application with a "local" database within GitHub Actions. It makes sure our tests run on the newest and robust code and database changes when making a pull request. To sum up, it ensures the very same database and code across all environments - local, dev, prod and even a "local" one in GitHub Actions Docker containers!&lt;/p&gt;

&lt;p&gt;I am very fond of the GitHub Actions that allow to spin up Docker containers together with a database.&lt;/p&gt;

&lt;p&gt;It is also tremendous to see the caching of libraries inside GitHub Actions.&lt;/p&gt;

&lt;p&gt;Furthermore, both repos use Github Actions to deploy and to test the code. Back-end repo deploys to Heroku while Front-end repo deploys to GitHub Pages.&lt;/p&gt;

&lt;p&gt;All Back-end workflows can be found here &lt;a href="https://github.com/pets-oss/pets-back/tree/main/.github/workflows"&gt;https://github.com/pets-oss/pets-back/tree/main/.github/workflows&lt;/a&gt;.&lt;br&gt;
All Front-end workflows can be found here &lt;a href="https://github.com/pets-oss/pets-front/tree/main/.github/workflows"&gt;https://github.com/pets-oss/pets-front/tree/main/.github/workflows&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves, DIY Deployments&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-files-and-repositories"&gt;
  &lt;/a&gt;
  YAML files and Repositories
&lt;/h3&gt;

&lt;p&gt;Back-End deployment to Heroku &lt;a href="https://github.com/pets-oss/pets-back/blob/main/.github/workflows/sync-prod.yml"&gt;https://github.com/pets-oss/pets-back/blob/main/.github/workflows/sync-prod.yml&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sync&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;22&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt; &lt;span class="c1"&gt;# UTC time 22:00 (00:00 GMT+2)&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;repo-sync&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;persist-credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;repo-sync&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;repo-sync/github-sync@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;source_repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://github.com/pets-oss/pets-back.git"&lt;/span&gt;
          &lt;span class="na"&gt;source_branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;main"&lt;/span&gt;
          &lt;span class="na"&gt;destination_branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;prod"&lt;/span&gt;
          &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
  &lt;span class="na"&gt;deploy-heroku&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;repo-sync&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Trigger heroku deploy [prod]&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;benc-uk/workflow-dispatch@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;workflow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy Heroku [prod]&lt;/span&gt;
          &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prod&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PERSONAL_TOKEN }}&lt;/span&gt;
  &lt;span class="na"&gt;deploy-database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;repo-sync&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Trigger database deploy [prod]&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;benc-uk/workflow-dispatch@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;workflow&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Nuke &amp;amp; Redeploy Database [prod]&lt;/span&gt;
          &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prod&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.PERSONAL_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Back-end pull request testing and linting &lt;a href="https://github.com/pets-oss/pets-back/blob/main/.github/workflows/pull-request.yml"&gt;https://github.com/pets-oss/pets-back/blob/main/.github/workflows/pull-request.yml&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pull request checks&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull_request&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;integration-tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Integration Tests&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Copying test env file...&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;canastro/copy-file-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.github/workflows/test-database.env"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;database.env"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Creating common.env file...&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;canastro/copy-file-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.github/workflows/test-common.env"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;common.env"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-compose pull&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pulling pull-only docker images...&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;satackey/action-docker-layer-caching@v0.0.11&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Caching docker image...&lt;/span&gt;
        &lt;span class="na"&gt;continue-on-error&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker-compose up --build -d&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Building containers...&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Waiting for backend...&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nev7n/wait_for_response@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;http://localhost:8081/status'&lt;/span&gt;
          &lt;span class="na"&gt;responseCode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
          &lt;span class="na"&gt;timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20000&lt;/span&gt;
          &lt;span class="na"&gt;interval&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Running tests...&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  &lt;span class="s"&gt;docker exec pets-back_gis-backend_1 npm run test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Dump api logs&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jwalton/gh-docker-logs@v1&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ failure() }}&lt;/span&gt;
  &lt;span class="na"&gt;lint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lint&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setting up node_module cache&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node-modules&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;node_modules&lt;/span&gt;
          &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ hashFiles('**/package.json') }}-node-modules&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Installing node modules...&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.node-modules.outputs.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Running lint...&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run check-lint&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Back-end Repo&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pets-oss"&gt;
        pets-oss
      &lt;/a&gt; / &lt;a href="https://github.com/pets-oss/pets-back"&gt;
        pets-back
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Pet Information System Back-end
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/pets-oss/pets-backCODE_OF_CONDUCT.md"&gt;&lt;img src="https://camo.githubusercontent.com/7d620efaa3eac1c5b060ece5d6aacfcc8b81a74a04d05cd0398689c01c4463bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e7472696275746f72253230436f76656e616e742d76322e3025323061646f707465642d6666363962342e737667" alt="Contributor Covenant"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Pet Information System Back-End&lt;/h1&gt;

&lt;p&gt;Production endpoint: &lt;a href="https://petbook-back.herokuapp.com/graphql" rel="nofollow"&gt;https://petbook-back.herokuapp.com/graphql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Development endpoint: &lt;a href="https://petbook-back-dev.herokuapp.com/graphql" rel="nofollow"&gt;https://petbook-back-dev.herokuapp.com/graphql&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://petbook-back-dev.herokuapp.com/graphql" rel="nofollow"&gt;Interactive API&lt;/a&gt;&lt;/strong&gt; (dev environment only)&lt;/p&gt;
&lt;h2&gt;
Development guide contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pets-oss/pets-back#a-prerequisites"&gt;A. Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pets-oss/pets-back#b1-setup-with-docker-recommended"&gt;B. Setup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pets-oss/pets-back#b1-setup-with-docker-recommended"&gt;B1. with Docker (recommended)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pets-oss/pets-back#b2-setup-without-docker"&gt;B2. without Docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pets-oss/pets-back#c-debug"&gt;C. Debug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pets-oss/pets-back#d-test"&gt;D. Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pets-oss/pets-back#e-log-db-queries-usually-for-debugging"&gt;E. Log DB queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pets-oss/pets-back#f-obtaining-cloudinary-api-key"&gt;F. Obtaining Cloudinary API key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pets-oss/pets-back#g-common-issues"&gt;G. Common issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
A. Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS &amp;gt; v10 &lt;a href="https://nodejs.org/en/download/" rel="nofollow"&gt;https://nodejs.org/en/download/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;IDE is up to your preference, but VS Code is recommended &lt;a href="https://code.visualstudio.com/download" rel="nofollow"&gt;https://code.visualstudio.com/download&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;only if running with docker:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker &lt;a href="https://docs.docker.com/get-docker/" rel="nofollow"&gt;https://docs.docker.com/get-docker/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Docker Compose &lt;a href="https://docs.docker.com/compose/install/" rel="nofollow"&gt;https://docs.docker.com/compose/install/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
B1. Setup with docker (recommended)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Install npm libraries with &lt;code&gt;npm install&lt;/code&gt; command (if not installed previously).&lt;/li&gt;
&lt;li&gt;Copy and rename &lt;code&gt;database.env.sample&lt;/code&gt; to &lt;code&gt;database.env&lt;/code&gt;. &lt;code&gt;POSTGRES_USER&lt;/code&gt;, &lt;code&gt;POSTGRES_PASSWORD&lt;/code&gt;, &lt;code&gt;POSTGRES_DB&lt;/code&gt; can be adjusted to your liking, but the default configuration will work as well.&lt;/li&gt;
&lt;li&gt;Copy and rename &lt;code&gt;common.env.sample&lt;/code&gt; to &lt;code&gt;common.env&lt;/code&gt;
&lt;a href="https://github.com/pets-oss/pets-back#f-obtaining-cloudinary-api-key"&gt;Create a cloudinary account&lt;/a&gt; and replace the &lt;code&gt;CLOUDINARY_URL&lt;/code&gt; variable
&lt;strong&gt;or&lt;/strong&gt;
Set &lt;code&gt;CLOUDINARY_DISABLED=true&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Make sure Docker is running.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
B2. Setup without docker&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Download the latest…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pets-oss/pets-back"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Front-end deployment to GitHub Pages &lt;a href="https://github.com/pets-oss/pets-front/blob/main/.github/workflows/github-pages.yml"&gt;https://github.com/pets-oss/pets-front/blob/main/.github/workflows/github-pages.yml&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Github pages&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;install&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install with Cache setup&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Node&lt;/span&gt;
              &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2.1.2&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;12.x'&lt;/span&gt;

            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get yarn cache&lt;/span&gt;
              &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn-cache&lt;/span&gt;
              &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "::set-output name=dir::$(yarn cache dir)"&lt;/span&gt;

            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Cache dependencies&lt;/span&gt;
              &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.yarn-cache.outputs.dir }}&lt;/span&gt;
                  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}&lt;/span&gt;
                  &lt;span class="na"&gt;restore-keys&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                      &lt;span class="s"&gt;${{ runner.os }}-yarn-&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --no-progress --non-interactive&lt;/span&gt;

            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
              &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cache-build&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./*&lt;/span&gt;
                  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.sha }}&lt;/span&gt;

    &lt;span class="na"&gt;testUnit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test Unit&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;install&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
              &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;restore-install&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./*&lt;/span&gt;
                  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.sha }}&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn test&lt;/span&gt;

    &lt;span class="na"&gt;lint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;install&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
              &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;restore-install&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./*&lt;/span&gt;
                  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.sha }}&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn lint&lt;/span&gt;

    &lt;span class="na"&gt;testsPass&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Thank you&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;testUnit&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;lint&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;exit &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;

    &lt;span class="na"&gt;publishRelease&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and publish release&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;testsPass&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github-pages&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;REACT_APP_GRAPHQL_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.REACT_APP_GRAPHQL_URL }}&lt;/span&gt;
            &lt;span class="na"&gt;REACT_APP_AUTH0_DOMAIN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.REACT_APP_AUTH0_DOMAIN }}&lt;/span&gt;
            &lt;span class="na"&gt;REACT_APP_AUTH0_CLIENT_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.REACT_APP_AUTH0_CLIENT_ID }}&lt;/span&gt;
            &lt;span class="na"&gt;REACT_APP_AUTH0_AUTH_AUDIENCE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.REACT_APP_AUTH0_AUTH_AUDIENCE }}&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/cache@v2&lt;/span&gt;
              &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;restore-install&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./*&lt;/span&gt;
                  &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.sha }}&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn build&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy&lt;/span&gt;
              &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
              &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
                  &lt;span class="na"&gt;publish_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;./build&lt;/span&gt;
                  &lt;span class="na"&gt;cname&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app.petbook.lt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Front-end pull request testing and linting &lt;a href="https://github.com/pets-oss/pets-front/blob/main/.github/workflows/integrate.yml"&gt;https://github.com/pets-oss/pets-front/blob/main/.github/workflows/integrate.yml&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;integrate'&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pull_request&lt;/span&gt;


&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;test_pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
        &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt;   &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt;   &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                    &lt;span class="s"&gt;yarn --no-progress --non-interactive&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt;   &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                    &lt;span class="s"&gt;yarn run lint&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt;   &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                    &lt;span class="s"&gt;yarn run test&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt;   &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
                    &lt;span class="s"&gt;yarn run build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Front-end Repo&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pets-oss"&gt;
        pets-oss
      &lt;/a&gt; / &lt;a href="https://github.com/pets-oss/pets-front"&gt;
        pets-front
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Pets Information System Front-end
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/pets-oss/pets-frontCODE_OF_CONDUCT.md"&gt;&lt;img src="https://camo.githubusercontent.com/7d620efaa3eac1c5b060ece5d6aacfcc8b81a74a04d05cd0398689c01c4463bb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e7472696275746f72253230436f76656e616e742d76322e3025323061646f707465642d6666363962342e737667" alt="Contributor Covenant"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/pets-oss/pets-front/workflows/integrate/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRPRuLHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/pets-oss/pets-front/workflows/integrate/badge.svg" alt="integrate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
pets-front&lt;/h1&gt;
&lt;p&gt;Pets Information System Front-end&lt;/p&gt;
&lt;p&gt;Live site is available at &lt;a href="https://app.petbook.lt/" rel="nofollow"&gt;https://app.petbook.lt/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;p&gt;Before starting the setup choose what actions you will do with the code changes. If you will keep it as a local copy - make a &lt;strong&gt;repository clone&lt;/strong&gt;. If you will contribute to the project - make a &lt;strong&gt;repository fork&lt;/strong&gt; and read the &lt;a href="https://github.com/pets-oss/pets-frontCONTRIBUTING.md"&gt;Contribution guideline&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The project codebase is optimized for using Visual Studio Code which can be &lt;a href="https://code.visualstudio.com/" rel="nofollow"&gt;downloaded&lt;/a&gt; and used with the most of popular OS. Install &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" rel="nofollow"&gt;Prettier&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" rel="nofollow"&gt;ESLint&lt;/a&gt; extensions as these are mandatory for project codebase consistency.&lt;/p&gt;
&lt;p&gt;Get your local copy of the repository by cloning or forking.&lt;/p&gt;
&lt;p&gt;If not yet installed, get &lt;a href="https://nodejs.org/en/download/" rel="nofollow"&gt;Node JS&lt;/a&gt; (&amp;gt; 10v) and &lt;a href="https://www.npmjs.com/get-npm" rel="nofollow"&gt;npm&lt;/a&gt;. Run &lt;code&gt;node -v&lt;/code&gt; in your terminal to check the actual Node version. If you need to be able using various Node versions for your projects, consider installing and using &lt;a href="https://www.npmjs.com/package/n" rel="nofollow"&gt;Node version manager&lt;/a&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pets-oss/pets-front"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Both Back-end and Front-end repos are used by this still-in-development application &lt;a href="https://app.petbook.lt/"&gt;https://app.petbook.lt/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We built and are still building this software as a team and I would like to thank and mention all the epic contributors &lt;a href="https://dev.to/justasb"&gt;https://dev.to/justasb&lt;/a&gt;, &lt;a href="https://dev.to/psaulenas"&gt;https://dev.to/psaulenas&lt;/a&gt;, &lt;a href="https://dev.to/kiupelis"&gt;https://dev.to/kiupelis&lt;/a&gt;, &lt;a href="https://dev.to/dainiusjankunas"&gt;https://dev.to/dainiusjankunas&lt;/a&gt;, &lt;a href="https://dev.to/jbk91"&gt;https://dev.to/jbk91&lt;/a&gt;, &lt;a href="https://dev.to/domzic"&gt;https://dev.to/domzic&lt;/a&gt;, &lt;a href="https://dev.to/saulyz"&gt;https://dev.to/saulyz&lt;/a&gt;, &lt;a href="https://dev.to/ignasposka"&gt;https://dev.to/ignasposka&lt;/a&gt;, &lt;a href="https://dev.to/arunaswp"&gt;https://dev.to/arunaswp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WnTuLR-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0xuvgbl6ukhx7amp11e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnTuLR-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0xuvgbl6ukhx7amp11e.png" alt="Petbook animal list display" width="880" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>opensource</category>
      <category>animalshelter</category>
      <category>pets</category>
    </item>
    <item>
      <title>The async/await post we promised</title>
      <author>Srushtika Neelakantam</author>
      <pubDate>Wed, 08 Dec 2021 14:49:22 +0000</pubDate>
      <link>https://dev.to/ablydev/the-asyncawait-post-we-promised-2c50</link>
      <guid>https://dev.to/ablydev/the-asyncawait-post-we-promised-2c50</guid>
      <description>&lt;p&gt;Great user experience on the web comes from being able to provide users with exactly what they want in the most seamless way possible. Behind the scenes, some user actions may take more time to process than others. For example, showing or hiding an HTML element is a quick operation whereas making an XHR request to get data from an external API is a slower operation. JavaScript provides us with a way to handle them all without giving up that instant delight users naturally expect.&lt;/p&gt;

&lt;p&gt;In this article, we’ll describe how JavaScript executes asynchronous operations and review different ways to write asynchronous code from Callbacks to Promises and explain what’s best and why. Most importantly, we’ll use the modern and recommended way to write asynchronous JavaScript to instantiate and use Ably’s JavaScript SDKs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Jump to "&lt;a href="http://link-to-section/"&gt;Using the promise-based version of the &lt;code&gt;ably-js&lt;/code&gt; SDK&lt;/a&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are new to Ably, here's a quick summary - Ably provides APIs to add realtime messaging functionality to your applications. It is based on the &lt;a href="https://ably.com/topic/pub-sub"&gt;Publish/Subscribe&lt;/a&gt; messaging pattern and operates mostly on the &lt;a href="https://ably.com/topic/websockets"&gt;WebSockets&lt;/a&gt; protocol. You can plug in the Ably SDK and start publishing messages in realtime to millions of devices. &lt;a href="https://ably.com/signup"&gt;Sign up&lt;/a&gt; for a free account to explore all the platform's features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-inner-workings-of-javascript"&gt;
  &lt;/a&gt;
  The inner workings of JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is a single-threaded programming language. It is predominantly used on the web or in the form of NodeJS in the backend.&lt;/p&gt;

&lt;p&gt;If we focus on the frontend, JavaScript-based applications run in a web browser. The actual execution of the JavaScript code is done by a JavaScript engine, which usually comes in-built with every browser. For example, Google Chrome comes with the popular V8 engine (which is also the engine running NodeJS), Mozilla Firefox comes with the SpiderMonkey engine, Microsoft Edge comes with the Chromium engine, and so on.&lt;/p&gt;

&lt;p&gt;Being single-threaded means that JavaScript can only do one thing at a time and sequentially execute statements in a given piece of code. When the code takes longer to execute, like waiting for some data to return from an external API, the application would essentially halt at that point and the end-user would end up seeing an unresponsive screen.&lt;/p&gt;

&lt;p&gt;But, this doesn’t usually happen, does it?&lt;/p&gt;

&lt;p&gt;The everyday working of frontend JavaScript is made possible not just by the &lt;a href="https://en.wikipedia.org/wiki/JavaScript_engine"&gt;JavaScript engine&lt;/a&gt; provided by the web browser but with a supplement of three key things:&lt;/p&gt;

&lt;p&gt;i) a myriad of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API"&gt;Web APIs&lt;/a&gt;, we'll refer to these as Browser APIs to avoid confusing them with external APIs&lt;/p&gt;

&lt;p&gt;ii) the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#queue"&gt;Message Queue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;iii) the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#event_loop"&gt;Event Loop&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Together these elements allow JavaScript to run asynchronous functions that can continue execution without needing to wait for things that take time.&lt;/p&gt;

&lt;p&gt;Let’s look at how these language and browser features work together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-whirlwind-tour-of-asynchronous-javascript"&gt;
  &lt;/a&gt;
  A whirlwind tour of asynchronous JavaScript
&lt;/h2&gt;

&lt;p&gt;In a nutshell, the working of asynchronous JavaScript code can be visualized as shown in the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1AE6N_3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5900152/144869840-33551e3d-49f0-47ee-b7c2-9d7ec300fad2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1AE6N_3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5900152/144869840-33551e3d-49f0-47ee-b7c2-9d7ec300fad2.png" alt="js-event-loop" width="880" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The JavaScript engine has a memory heap and a call stack. The memory heap allocates memory for the data in the code and updates the values as per the logic. The call stack is a last in, first out (LIFO) data structure that keeps track of the statement to be executed next to run the code in sequential order.&lt;/p&gt;

&lt;p&gt;What happens when things are slow? Let’s say the call stack encounters a &lt;code&gt;setTimeout()&lt;/code&gt; function. Let's see how the execution of this statement proceeds in the above flow.&lt;/p&gt;

&lt;p&gt;First, we can refer to the only thread that JavaScript has as the "main thread". In case of a &lt;code&gt;setTimeout()&lt;/code&gt;, the main thread will kick off the execution of this statement by calling the function from the Browser APIs but not wait until the execution is complete.&lt;/p&gt;

&lt;p&gt;When the Browser finishes executing the &lt;code&gt;setTimeout()&lt;/code&gt; function, it returns the results. The tricky part, however, is getting these results back to the main thread and showing them in the application.&lt;/p&gt;

&lt;p&gt;These results don't immediately get inserted into the call stack because that would disturb the flow of execution. Instead, it inserts the results at the end of the Message Queue. The event loop will then follow a process to decide the best time to pick this up and insert it into the call stack.&lt;/p&gt;

&lt;p&gt;The best resource I’ve come across to understand the JavaScript event loop is this amazing talk by Philip Roberts - &lt;a href="https://youtu.be/8aGhZQkoFbQ"&gt;What the heck is the event loop anyway?&lt;/a&gt;. While I’ve summarized the explanation below I’d still recommend giving it a watch.&lt;/p&gt;

&lt;p&gt;The Event loop is essentially an infinite &lt;code&gt;while&lt;/code&gt; loop (hence the name) that continuously checks for two things:&lt;/p&gt;

&lt;p&gt;i) if the call stack is empty&lt;/p&gt;

&lt;p&gt;ii) if there are any elements in the Message Queue&lt;/p&gt;

&lt;p&gt;When both these conditions become true, the event loop picks up the first element in the queue and puts it on the call stack for the main thread to execute it.&lt;/p&gt;

&lt;p&gt;The interesting thing to consider here is how we can let the runtime know that a certain statement depends on an external resource (where the processing is being done somewhere else) and may take time to return. We want the execution to continue, not pause while waiting on that external function to complete. Let's explore this next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-callbacks-to-promises-to-asyncawait"&gt;
  &lt;/a&gt;
  From Callbacks to Promises to Async/Await
&lt;/h2&gt;

&lt;p&gt;We can think of any asynchronous operation we perform in JavaScript as an API call. This call is done either to an in-built API provided by the browser, for example, &lt;code&gt;setTimeout()&lt;/code&gt;, or to an API from a third-party provider, for example &lt;code&gt;ably.channel.publish()&lt;/code&gt;. In fact, this call can also be done just to another function that's part of the same application but let's assume it is an external function for a better understanding. I've linked some code examples of native async functions in the 'Further reading' section at the end.&lt;/p&gt;

&lt;p&gt;The implementation of an async function provided by the API needs to have a way to tell the main thread what needs to be done when it has finished executing the time taking task.&lt;/p&gt;

&lt;p&gt;This can be done in one of the following three ways:&lt;/p&gt;

&lt;p&gt;i) Callbacks&lt;/p&gt;

&lt;p&gt;ii) Promises with .then syntax&lt;/p&gt;

&lt;p&gt;iii) Promises with async/await syntax&lt;/p&gt;

&lt;p&gt;Let’s explore them one by one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-1-async-javascript-with-callbacks"&gt;
  &lt;/a&gt;
  Option 1 - Async JavaScript with callbacks
&lt;/h3&gt;

&lt;p&gt;A callback is a function that is passed to another function as a parameter. When calling the async function initially, we provide it with a callback function as one of the parameters. When the async function finishes execution, it calls that callback function, along with the results of the execution as arguments. At this point, the callback function is placed on the Message Queue and will eventually be picked up by the event loop and dropped into the call stack for the main thread to execute it.&lt;/p&gt;

&lt;p&gt;Let’s take a look at an example with the asynchronous channel publish function provided by Ably’s JavaScript SDK:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 1 */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ably&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* function reference:
publish(String name, Object data, callback(**ErrorInfo** err))
*/&lt;/span&gt;

&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new-chat-msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey there! What is up?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Published successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the last (optional) parameter in the publish function expects a callback function.&lt;/p&gt;

&lt;p&gt;From the Ably SDK (i.e. the async function provider) side of things, when the publish function is called, it executes that function logic. When it’s done, it calls the callback function and passes it some data if it's applicable. This would look something like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 2 */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RealtimeChannel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* do some stuff to execute the async operation */&lt;/span&gt;

    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As explained before, this callback function will be put at the end of the Message Queue. This will be picked up by the event loop and put onto the call stack which is when it’ll be executed by the main thread. At this point, it'll print the success message to the console depending on the value of the error parameter passed to it.&lt;/p&gt;

&lt;p&gt;Ok, that's all well and good. We've understood a way to write asynchronous JavaScript functions, so why even consider other options?&lt;/p&gt;

&lt;p&gt;Callbacks are a simple concept and work well for standalone asynchronous operations. However, they can quickly get tedious to write and manage if they have dependencies on each other. For example, consider a scenario where you need to do certain async things sequentially, using the data from one task in the other, say:&lt;/p&gt;

&lt;p&gt;i) enter presence on a channel&lt;/p&gt;

&lt;p&gt;ii) get some historical messages&lt;/p&gt;

&lt;p&gt;iii) publish a new message on the channel with the first message retrieved from history&lt;/p&gt;

&lt;p&gt;The callback-based implementation for this scenario will look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 3 */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ably&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* function references:
- enter(Object data, callback(ErrorInfo err))
- history(Object options, callback(ErrorInfo err, PaginatedResult&amp;lt;Message&amp;gt; resultPage))
- publish(String name, Object data, callback(**ErrorInfo** err))
*/&lt;/span&gt;

&lt;span class="c1"&gt;// step 1 - enter presence&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Client has successfully entered presence&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// step 2 - get historical messages after presence enter&lt;/span&gt;
  &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstHistoryMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// step 3 - publish a new message after get history&lt;/span&gt;
    &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new-chat-msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Hey there! What is up?, my first history msg was &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstHistoryMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Published successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While this is an accurate implementation and will work perfectly fine, it already looks messy and difficult to manage due to the multiple nested callbacks. This is commonly referred to as &lt;a href="http://callbackhell.com/"&gt;Callback Hell&lt;/a&gt; because debugging or maintaining anything which looks like this would be a daunting task. And, this is exactly the reason we have other, more modern ways of writing asynchronous JavaScript functions. Let's explore these next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-2-async-javascript-with-promises-then-syntax"&gt;
  &lt;/a&gt;
  Option 2 - Async JavaScript with Promises (.then syntax)
&lt;/h3&gt;

&lt;p&gt;The second option introduces a concept called ‘&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promises&lt;/a&gt;’. Instead of calling a callback function, the API side implementation of the asynchronous function will create and return a "promise" to the requesting client that wants to execute the async function.&lt;/p&gt;

&lt;p&gt;A Promise can have one of the following three states:&lt;/p&gt;

&lt;p&gt;i) &lt;strong&gt;Pending&lt;/strong&gt; - meaning we’ve started an async operation but its execution has not completed yet&lt;/p&gt;

&lt;p&gt;ii) &lt;strong&gt;Resolved&lt;/strong&gt; (or Fulfilled) - meaning we started an async task and it has finished successfully&lt;/p&gt;

&lt;p&gt;iii) &lt;strong&gt;Rejected&lt;/strong&gt; - meaning we started an async task but it finished unsuccessfully, in most cases with a specific error that will be returned to the client&lt;/p&gt;

&lt;p&gt;Let's consider a Promise based async operation and again see both sides of the coin i.e. what happens on the API side implementation as well as the requesting client side. This time, let's first take a look at the API side of things:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 4 */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;RealtimeChannel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;publish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/*
      do some stuff to execute the async operation
      */&lt;/span&gt;
      &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The promise executor in the API calls the &lt;code&gt;resolve()&lt;/code&gt; function if the async task was executed as expected, along with the results of the operation. However, if there was some issue with the execution it calls the &lt;code&gt;reject()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;A requesting client can consume such a &lt;code&gt;Promise&lt;/code&gt; using a &lt;code&gt;.then()&lt;/code&gt; function attached to the async function call. The &lt;code&gt;.then()&lt;/code&gt; code block is similar to a callback code block and will be executed when the async task has finished executing. We can also attach a &lt;code&gt;.catch()&lt;/code&gt; to the &lt;code&gt;.then()&lt;/code&gt; block to catch any errors that may have occurred during the execution of the async task.&lt;/p&gt;

&lt;p&gt;In terms of the explanation above, the &lt;code&gt;.then()&lt;/code&gt; block will be executed when the promise executor in the API calls the &lt;code&gt;resolve()&lt;/code&gt; function and the &lt;code&gt;.catch()&lt;/code&gt; block will be executed when the API calls the &lt;code&gt;reject()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;At the time of writing this article, the Ably JS SDK doesn't provide promises by default. To be able to use the promise version of the SDK, we need to use &lt;code&gt;new Ably.Realtime.Promise()&lt;/code&gt; constructor when instantiating the library.&lt;/p&gt;

&lt;p&gt;Let's now see how our example will work on the client side&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 5 */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ably&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/* function reference:
publish(String name, Object data): Promise&amp;lt;void&amp;gt;
*/&lt;/span&gt;

&lt;span class="nx"&gt;channel&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new-chat-msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey there! What is up?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Published successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;There was an error while publishing: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you compare the above with the "Code Snippet 1", it seems more logical in the sense that we can understand that certain statements will execute after certain other statements due to the literal English meaning of the word 'then'.&lt;/p&gt;

&lt;p&gt;The real advantage however can be seen if we need to perform multiple asynchronous tasks sequentially, in some cases using the data returned in the previous async task.&lt;/p&gt;

&lt;p&gt;Let's consider the same scenario as we did in the callbacks version:&lt;/p&gt;

&lt;p&gt;i) enter presence on a channel&lt;/p&gt;

&lt;p&gt;ii) get some historical messages&lt;/p&gt;

&lt;p&gt;iii) publish a new message on the channel with the first message retrieved from history&lt;/p&gt;

&lt;p&gt;Let's see how this will look like using Promises with a &lt;code&gt;.then&lt;/code&gt; syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 6 */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ably&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* function references:
- enter(Object data): Promise&amp;lt;void&amp;gt;
- history(Object options): Promise&amp;lt;PaginatedResult&amp;lt;Message&amp;gt;&amp;gt;
- publish(String name, Object data): Promise&amp;lt;void&amp;gt;
*/&lt;/span&gt;

&lt;span class="c1"&gt;// step 1 - enter presence&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this block executes after the presence enter is done&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Client has successfully entered presence&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//step 2 - get historical messages&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this block executes after the channel history is retrieved&lt;/span&gt;
    &lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstHistoryMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//step 3 - publish a new message&lt;/span&gt;
    &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new-chat-msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Hey there! What is up?, my first history msg was &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstHistoryMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this block executes after the message publish is done&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Published successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this block executes if there's an error in any of the blocks in this Promise chain&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We have an error:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the Promise version with a &lt;code&gt;.then()&lt;/code&gt; syntax reduces the complexity and the level of indentation when compared to the callbacks approach. This helps us understand and maintain the code much easily.&lt;/p&gt;

&lt;p&gt;However, as you can see with this option, we need to wrap each execution step in a function call and return the results to the next &lt;code&gt;.then()&lt;/code&gt;. Although a huge improvement from the callbacks syntax, it seems like it could still get verbose pretty quickly. This is what the async/await syntax helps us with. Let's understand that next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-3-async-javascript-with-promises-asyncawait-syntax"&gt;
  &lt;/a&gt;
  Option 3 - Async JavaScript with Promises (async/await syntax)
&lt;/h3&gt;

&lt;p&gt;This third option is just another version of the second option. There's no change on the API side of things. The API would still create a 'Promise' and either &lt;code&gt;resolve()&lt;/code&gt; or &lt;code&gt;reject()&lt;/code&gt; it after the async task is executed.&lt;/p&gt;

&lt;p&gt;The way we consume it on the front end, however, is different (and better!). The async/await provides syntactic sugar to reduce the complexity in chained async tasks. Let's take a look at how the "Code Snippet 6" above would look like if we use async/await instead of &lt;code&gt;.then()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 7 */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ably&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* function references:
- enter(Object data): Promise&amp;lt;void&amp;gt;
- history(Object options): Promise&amp;lt;PaginatedResult&amp;lt;Message&amp;gt;&amp;gt;
- publish(String name, Object data): Promise&amp;lt;void&amp;gt;
*/&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// step 1 - enter presence&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Client has successfully entered presence&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//step 2 - get historical messages&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;messagesPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Retrieved history successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;firstHistoryMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//step 3 - publish a new message&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new-chat-msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Hey there! What is up?, my first history msg was &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;firstHistoryMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Published successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We have an error:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may have observed, we've wrapped all our statements in a function this time. This is because the async/await syntax can only be used in functions starting with the &lt;code&gt;async&lt;/code&gt; keyword. Such an async function can then contain zero or more &lt;code&gt;await&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;Statements that begin with the keyword &lt;code&gt;await&lt;/code&gt; are asynchronous functions. Similar to the previous option with Promises using the &lt;code&gt;.then()&lt;/code&gt; syntax, these statements get returned via the Message Queue when the underlying Promise provided by the API calls either a &lt;code&gt;reject()&lt;/code&gt; or a &lt;code&gt;resolve()&lt;/code&gt; function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#concurrency-of-independent-asynchronous-statements"&gt;
  &lt;/a&gt;
  Concurrency of independent asynchronous statements
&lt;/h4&gt;

&lt;p&gt;Given that the async/await approach looks a lot like writing synchronous statements, it is a common mistake to make independent code unnecessarily wait for the previous tasks to finish instead of having them execute concurrently (in parallel). For example, in the code examples we saw in the previous sections, if entering the client in the presence set, retrieving history and publishing a new message had no dependencies on each other, we can easily do these things in parallel instead of sequentially.&lt;/p&gt;

&lt;p&gt;This can be done using the &lt;code&gt;Promise.all()&lt;/code&gt; function as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 8 */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ably&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;authUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bob&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general-chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* function references:
- enter(Object data): Promise&amp;lt;void&amp;gt;
- history(Object options): Promise&amp;lt;PaginatedResult&amp;lt;Message&amp;gt;&amp;gt;
- publish(String name, Object data): Promise&amp;lt;void&amp;gt;
*/&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;enterPresence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getHistoryMessages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;publishMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new-chat-msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey there! What is up?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// perform all three async functions concurrently&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;enterPresence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getHistoryMessages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;publishMessage&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Client has successfully entered presence&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Retrieved history successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Published successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;messagesPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;messagesPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`History message: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;We have an error:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="cm"&gt;/*
Note the publish function doesn't use any data returned 
by the History API in this case as we are considering the three functions
to be executed independently of each other.
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-case-of-asynchronous-event-listeners"&gt;
  &lt;/a&gt;
  The case of asynchronous event listeners
&lt;/h3&gt;

&lt;p&gt;By now, we have a good understanding that Promises with either the &lt;code&gt;.then()&lt;/code&gt; or the &lt;code&gt;async/await&lt;/code&gt; syntax are a big improvement over callbacks. But what happens in the case of asynchronous event listeners where you are constantly listening for some updates. For example, in case of a &lt;code&gt;setInterval()&lt;/code&gt; from the inbuilt Browser APIs or &lt;code&gt;ably.channel.subscribe()&lt;/code&gt; from the Ably API?&lt;/p&gt;

&lt;p&gt;Promises are great for one off execution of an async task that either resolves or rejects based on some logic. However, in the case of a subscription, we'd need the resolution to happen multiple times i.e. whenever there's a new message to be pushed from the API to the listening client. Promises unfortunately cannot do that and can resolve only once. So, for active listeners that return data repeatedly, it's better to stick with callbacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-promisebased-version-of-the-raw-ablyjs-endraw-sdk"&gt;
  &lt;/a&gt;
  Using the promise-based version of the &lt;code&gt;ably-js&lt;/code&gt; SDK
&lt;/h2&gt;

&lt;p&gt;As per the examples we've been seeing so far, it is clear that Ably’s JavaScript SDK provides a promisified version. This means we can consume the asynchronous functions (except for listeners) using the async/await syntax. In the devrel team, we've been using the async style API in our latest demo - the &lt;a href="https://github.com/ably-labs/fully-featured-scalable-chat-app"&gt;Fully Featured Scalable Chat app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the time of writing this article, the default way to consume async functions using the Ably JS SDK is using callbacks, but in this section, we’ll take a look at a few key functions where we consume the promisified API using the async/await syntax.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Importing and instantiating the Ably Realtime or Rest instances:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 9 */&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ably&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//before - instantiating the Ably SDKs, callback version&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//now - instantiating the Ably SDKs, Promise version&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Realtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Ably&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Attaching to a channel&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 10 */&lt;/span&gt;

&lt;span class="c1"&gt;//before - attaching to a channel, callback version&lt;/span&gt;
&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;channel attached&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//now - attaching to a channel, promise with async/await version&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;attachChannel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;attachChannel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Retrieving and updating presence status on a channel&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 11 */&lt;/span&gt;

&lt;span class="c1"&gt;//before - presence functions, callback version&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Presence members are: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Client entered presence set&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Client presence status updated&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Client left presence set&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//now - presence functions, promise with async/await version&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ablyPresenceStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;presence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ablyPresenceStuff&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="cm"&gt;/*
Please note - the above code snippets are slightly 
different in terms of how they'd run.

The callback version concurrently executes all four functions,
whereas the async/await version executes all the statements 
sequentially.

Please scroll back up and read 
'**Concurrency of independent asynchronous statements'** 
if you are interested to learn more about this behaviour.
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Publishing messages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 12 */&lt;/span&gt;

&lt;span class="c1"&gt;//before - publishing messages, callback version&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey, this is event data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Publish done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//now - publishing messages, Promise with async/await version&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;publishToAbly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my event&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey, this is event data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Publish done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;publishToAbly&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Subscribing to messages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 13 */&lt;/span&gt;

&lt;span class="c1"&gt;//before - subscribing to messages, callback version&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New message received&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//now - subscribing to messages, Promise with async/await version&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New message received&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="cm"&gt;/*
Please note, there's no change here. As described in the previous section 
Promises cannot be used with listeners which need be triggered multiple times.

Hence, in this case, we stick to callbacks.
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Retrieving historical messages&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Code Snippet 14 */&lt;/span&gt;

&lt;span class="c1"&gt;//before - history API, callback version&lt;/span&gt;
&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resultPage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resultPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//now - history API, callback version&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getAblyHistory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;resultPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;getAblyHistory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-are-moving-to-promise-by-default"&gt;
  &lt;/a&gt;
  We are moving to Promise by default
&lt;/h2&gt;

&lt;p&gt;In the upcoming versions of the JS SDK, you won't need to instantiate the promise version explicitly with &lt;code&gt;Ably.Realtime.Promise(options)&lt;/code&gt;. Instead, if you do &lt;code&gt;Ably.Realtime(options)&lt;/code&gt;. It'll use the promisified API by default.&lt;/p&gt;

&lt;p&gt;If you want to stick to using the callbacks version at that point, you can explicitly instantiate the Callbacks constructor with &lt;code&gt;Ably.Realtime.Callbacks(options)&lt;/code&gt; and continue using callbacks as default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-further-reading"&gt;
  &lt;/a&gt;
  References and further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gist.github.com/Srushtika/c0a19853af6ceb40c155dc8c2bac292b"&gt;Sample code snippets showing callbacks and promises using native functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Working examples of using the async style with the Ably APIs:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@ably-labs/react-hooks"&gt;Ably React Hooks NPM package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ably-labs/fully-featured-scalable-chat-app"&gt;A fully featured chat demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/ably/ably-js"&gt;Ably JavaScript SDK&lt;/a&gt; repository&lt;/li&gt;
&lt;li&gt;Realtime use-case demos on &lt;a href="https://github.com/ably-labs"&gt;Ably Labs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Being a Tech Lead</title>
      <author>Robert Basic</author>
      <pubDate>Wed, 08 Dec 2021 14:44:30 +0000</pubDate>
      <link>https://dev.to/trikoder/being-a-tech-lead-4l9</link>
      <guid>https://dev.to/trikoder/being-a-tech-lead-4l9</guid>
      <description>&lt;p&gt;I’ve been the tech lead of my team at Trikoder for just over a year now (380 days, but who’s counting?) I think this is a good time to look back at what this role means to me, the things I’ve learned, and mistakes I made.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-background"&gt;
  &lt;/a&gt;
  My background
&lt;/h2&gt;

&lt;p&gt;Ever since I started programming back in 2005, I sort of have known that “writing code and solving problems with software” is the thing I’ll do. As I grew older and more experienced, I’ve slowly come to realize that, well, writing software is only one part of the equation and there’s a bit more to it. Turns out the “people stuff” is quite important and necessary, even when dealing with computers all day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#joining-trikoder"&gt;
  &lt;/a&gt;
  Joining Trikoder
&lt;/h2&gt;

&lt;p&gt;In the summer of 2018, I joined Trikoder as an external contributor on the Njuskalo.hr platform.&lt;br&gt;
As part of the Common Base Technology (CBT) team, I’ve took part in work that enabled us to internationalize the Njuskalo.hr platform and launch bolha.com on the same code, as well as undertook some bigger refactors and rewrites to lessen the burden of technical debt and legacy code on other teams. We still have a lot of work ahead of us as 10 plus years of shipping fast tends to leave a lot of “baggage” behind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-do-as-a-tech-lead"&gt;
  &lt;/a&gt;
  What do I do as a tech lead?
&lt;/h2&gt;

&lt;p&gt;I’ve been the tech lead of this small team for the past year and, mostly through trail and error, I’ve been figuring out what does this role expect from me. I have good support both from my team, my team lead, and from the company in general, so it’s been a great learning experience so far.&lt;br&gt;
A thing I learned over the years is that one of the reasons “legacy code” happens is due to a communication breakdown between the business people that need the software to solve a particular problem, and the software people that write the software. This is why I believe the position of a tech lead is a unique one. We can help the business understand why delivering new features takes as long as it takes, or why is it necessary to do some seemingly unrelated code maintenance. But, communication is a two way street, so we also need to ensure that the developers can understand the business side of things, how it’s not financially viable to halt producing new features for several months to rewrite that ugly piece of code someone else wrote, or how this project might not be the best place to try out the latest and shiniest new technology. I see my main role as a tech lead to be a bridge in the communication between business and development.&lt;br&gt;
Through regular communication with the other teams, I try to understand what parts of the platform should we focus on next when it comes to dealing with technical debt and legacy code. Then, together with the leader of my team, we try to come up with a strategy and goals that will get us buy-in from the business.&lt;br&gt;
Within the team itself, I do my best to guide the team towards good technical and technological choices. To make sure the code we write (and don’t write!) is the best it can be under the current circumstances, that it’s aligned with both the needs of the business as well as with the overall architecture.&lt;br&gt;
While I love nothing more than getting “into the zone” and delivering code, I’ve come to realize that that part of the job is gone. I’ve seen this mistake made by other tech leads, and then, sadly, made it myself. As a tech lead I can’t let myself focus too much on any single problem, because then I don’t see what else is going on in my team. I might miss out on an important decision being made, or someone might decide to not reach out to me for advice as they don’t want to disturb me.&lt;br&gt;
I see myself now as an enabler — my work is to enable the other programmers on my team to shine. Enable them to learn, to grow, to get into the zone, to make an impact. Even enable them to fail.&lt;br&gt;
And this is where I think I’ve come full circle as a programmer. When I was starting out I was always volunteering for the tasks that no one else wanted, the boring tasks, the non important but still have to be done tasks. I’ve started to pick up those tasks again, so that my team can focus on the important things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfretrospectives-are-weird"&gt;
  &lt;/a&gt;
  Self-retrospectives are weird
&lt;/h2&gt;

&lt;p&gt;Am I doing it right? I think so. It feels right. I’ll probably make a few more mistakes along the way, but that’s how we learn. I’ve been fighting this direction of my career for a long time, as I didn’t want to bother with “management”. Now that I see and understand what the position of a tech lead brings to the table, I’m going all in.&lt;/p&gt;

&lt;p&gt;Until next time, take care my friend.&lt;/p&gt;

</description>
      <category>techlead</category>
      <category>programming</category>
      <category>technicallead</category>
    </item>
  </channel>
</rss>
