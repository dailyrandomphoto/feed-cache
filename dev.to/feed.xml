<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>üë®‚Äçüíª[FirstDevRole #3] How to Write an Effective CV/Resume for a Programmer Role if You Have No Work Experience</title>
      <author>Antonio Pekeljevic</author>
      <pubDate>Sat, 30 Oct 2021 18:51:31 +0000</pubDate>
      <link>https://dev.to/antoniopk/firstdevrole-2-how-to-write-an-effective-cvresume-for-a-programmer-role-if-you-have-no-work-experience-35mb</link>
      <guid>https://dev.to/antoniopk/firstdevrole-2-how-to-write-an-effective-cvresume-for-a-programmer-role-if-you-have-no-work-experience-35mb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#short-intro"&gt;
  &lt;/a&gt;
  Short Intro
&lt;/h2&gt;

&lt;p&gt;In this article of the FirstDevRole series I want to share my knowledge about how to make a CV/Resume effective when preparing to apply for a developer role if you have no previous work experience in the IT field.&lt;br&gt;
I will share a structure of what I think is good for a CV, what to include and what not to include.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note that the advice I will write has proven to be effective in my case but there are also other ways to do it.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-things-to-consider"&gt;
  &lt;/a&gt;
  General Things to Consider
&lt;/h2&gt;

&lt;p&gt;These are some things that you should have in mind when creating your resume. Again, all of this based on my research and through trial and error.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It would be the best if you tailor each resume to the job post you are applying to vs. having a "one size fits all" resume.&lt;/li&gt;
&lt;li&gt;Google about country specific rules regarding resumes - for example some countries prefer a more conservative design (black and white), some prefer colors. Google will give you an answer about that.&lt;/li&gt;
&lt;li&gt;File format should be PDF and text selectable. Reason is that some companies run your CV through an automatic "CV scanner" and depending on the result it decides if you can move forward. That automatic mechanism can only detect selectable text so don't make your resume an image.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#effective-structure"&gt;
  &lt;/a&gt;
  Effective Structure
&lt;/h2&gt;

&lt;p&gt;Below you can see the structure that I use for my personal resume which has proven to be very effective. It contains all crucial information on a single page which makes it easy for the reader to scan it in a short amount of time so I would highly suggest to use this structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQsK6SZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6nnpr66osmll8hum23a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQsK6SZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6nnpr66osmll8hum23a.png" alt="cvstructure.png" width="880" height="1245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you gave the overall resume structure a look, I will continue with explaining what each section should contain and what not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#header"&gt;
  &lt;/a&gt;
  Header
&lt;/h3&gt;

&lt;p&gt;The header should contain only your first name, last name and optionally your vocation.&lt;br&gt;
If you have a logo then you can include that too.&lt;br&gt;
Make the area clean and breathable by not stuffing anything else in there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu3Oueey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/33F5USzk3gJdZTinpS/giphy.gif%3Fcid%3D790b761125878621e3edefc198916ef70e365b5a71a0fcc5%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu3Oueey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/33F5USzk3gJdZTinpS/giphy.gif%3Fcid%3D790b761125878621e3edefc198916ef70e365b5a71a0fcc5%26rid%3Dgiphy.gif%26ct%3Dg" alt="fresh air" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#side-content"&gt;
  &lt;/a&gt;
  Side Content
&lt;/h3&gt;

&lt;p&gt;Side content should be a narrower section of the resume on either side of the main content and it should contain the following:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#personal-information"&gt;
  &lt;/a&gt;
  Personal Information
&lt;/h4&gt;

&lt;p&gt;Here is what to put here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your geographical location (only the city and the country). Don't put your exact address here.&lt;/li&gt;
&lt;li&gt;Your contact email&lt;/li&gt;
&lt;li&gt;Contact phone number&lt;/li&gt;
&lt;li&gt;A link to your portfolio website and/or GitHub profile&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#skills-programming-languages"&gt;
  &lt;/a&gt;
  Skills (programming languages)
&lt;/h4&gt;

&lt;p&gt;After analyzing the job requirements put all relevant skills that you posses here. It's the best if you make a list of them one by one. Don't include any form of skill ratings because it doesn't tell much to the reader anyway and it could in some cases make you less desirable for the position. &lt;/p&gt;

&lt;p&gt;People often ask me how to know which skills to include and which not. The answer is pretty simple. Include the skills that are listed in the job post PLUS all other skills that you consider yourself to be good at. That is, put any programming language that you used to create a project by yourself but don't put programming languages which you only used to create a Hello World application or just followed one tutorial. &lt;/p&gt;

&lt;p&gt;Here is how to know if you are good at something or at a programming language to be precise. Ask yourself this question:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If someone gave me a random task to do in that programming language, would I be able to do it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the answer is yes then you are confident enough to list the language/skill to along with the required skills that you should obviously posses. If the answer is no, I would really think about if I should list it as a skill.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#languages"&gt;
  &lt;/a&gt;
  Languages
&lt;/h4&gt;

&lt;p&gt;List your native language and other languages that you know. &lt;br&gt;
Rate your level of proficiency for each listed language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-content"&gt;
  &lt;/a&gt;
  Main Content
&lt;/h3&gt;

&lt;p&gt;This is the area where your content that takes more space should be located in. &lt;br&gt;
Also notice the order of sections. I would suggest to keep this order that especially applies to the Summary section since that is your "pitch to sell yourself".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;p&gt;This section is in my opinion the most important section of your resume. It's the first section that your future employer/HR person will look at and decide if he/she should keep reading. Usually the time spend on looking at a resume is about 6 seconds before the reader decides if it's interesting enough to keep reading further. &lt;br&gt;
Basically, in most cases if you don't "sell" yourself in the Summary section then the chances that the reader will keep on reading are quite low.&lt;/p&gt;

&lt;p&gt;Having said that, let's see how we can make this important section as good as it can be.&lt;/p&gt;

&lt;p&gt;The most important thing about the Summary section is to present yourself as someone whose skills have made an impact.&lt;br&gt;
It is important to precisely say how the skill that you used to do something has been helpful. No fillers and no mumbo jumbo stuff allowed here.&lt;br&gt;
The impact that you made should be measurable and concrete.&lt;/p&gt;

&lt;p&gt;Maybe it's easier to get to the point if I give you a few examples:&lt;/p&gt;

&lt;p&gt;"By utilizing my knowledge in Java I have build an application that helped speed up the process of preparing food in a local restaurant by 120%".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is a list of questions that you should ask yourself when writing the summary.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What skills did I use?&lt;/li&gt;
&lt;li&gt;What measurable goal have I reached by doing so?&lt;/li&gt;
&lt;li&gt;Who has benefited from my skills and why?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, the best way to list your achievements is to make it a list and try to be as objective as possible.&lt;br&gt;
Note that you don't need too many lines of text here but make sure that your message goes straight to the point.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#education"&gt;
  &lt;/a&gt;
  Education
&lt;/h4&gt;

&lt;p&gt;Put your most recent education level along with the name of the school and also if you have any related certificates or have attended a workshop/internship.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projects"&gt;
  &lt;/a&gt;
  Projects
&lt;/h4&gt;

&lt;p&gt;This section should contain a few of your BEST projects. Make sure to describe what is the point of your project, what technologies did you use and what have you learned from it. If it has made an impact to the society or environment also consider to include that. Put a link that leads the reader to the live application and a link to the GitHub repository of the project.&lt;/p&gt;

&lt;p&gt;I will have a dedicated article in this series on how to make your GitHub profile better.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#work-experience"&gt;
  &lt;/a&gt;
  Work Experience
&lt;/h4&gt;

&lt;p&gt;Include any work experience that you might have where you have gathered any experience that can be beneficial to the role you are applying to.&lt;br&gt;
Make sure to list the position you worked as and a description on how working there has affected you. (in a positive way of course)&lt;br&gt;
For example if you have been a restaurant worker in the USA, you can say that it has helped you improve your English language skills, work under pressure, communication skills and things like that.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hobbies"&gt;
  &lt;/a&gt;
  Hobbies
&lt;/h4&gt;

&lt;p&gt;This is a place where you can optionally put any hobbies that you might want your future employer to know about. &lt;br&gt;
Don't say things like I code as a hobby or anything that might make you look to pushy about getting the job. Just be honest and try to make a personal contact with the reader.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQu_8Qir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/KCEB0pLlqLqo0/giphy.gif%3Fcid%3D790b7611f304a31a8ba7effd675dcf4fee104e538a6b3d45%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQu_8Qir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/KCEB0pLlqLqo0/giphy.gif%3Fcid%3D790b7611f304a31a8ba7effd675dcf4fee104e538a6b3d45%26rid%3Dgiphy.gif%26ct%3Dg" alt="I am perfect" width="245" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-tips"&gt;
  &lt;/a&gt;
  Design Tips
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use a readable font and avoid any cursive or overly styled fonts.&lt;/li&gt;
&lt;li&gt;Use a lot of whitespace and make sure that all gaps are even.&lt;/li&gt;
&lt;li&gt;Colors should be carefully used or avoided and the overall resume should have a good contrast between the text and background.&lt;/li&gt;
&lt;li&gt;Use left text alignment&lt;/li&gt;
&lt;li&gt;Don't include a photo of you if it's really not necessary. Depending on company's policies you might be disqualified right at the start if someone from the HR or whoever is looking at your CV doesn't like your appearance. Weird but true.&lt;/li&gt;
&lt;li&gt;Single page resume is the best if possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope that I have cleared some questions that you might have had about writing a resume for a developer position.&lt;br&gt;
If you have any questions please feel free to comment or &lt;a href="https://twitter.com/antoniopkvc"&gt;tweet to me&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;If you found this article helpful or if you maybe got your first job because of it, you can support me here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/S6S06RIRQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-M12wuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D3" alt="Buy Me a Coffee at ko-fi.com" width="286" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A Complete Guide on How SQL Injection Attacks Work</title>
      <author>Nicholas Dill</author>
      <pubDate>Sat, 30 Oct 2021 18:40:17 +0000</pubDate>
      <link>https://dev.to/nicholasdill/a-complete-guide-on-how-sql-injection-attacks-work-45e</link>
      <guid>https://dev.to/nicholasdill/a-complete-guide-on-how-sql-injection-attacks-work-45e</guid>
      <description>&lt;p&gt;We need to talk about SQL injection. &lt;/p&gt;

&lt;p&gt;What it is, how to do it, and most importantly how to prevent it. We'll cover some examples of SQL injection too and explain how to identify vulnerabilities so you can protect your data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#sql-injection"&gt;What is SQL Injection?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-sql-injection-works"&gt;How Does SQL Injection Work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#identify-sql-injection"&gt;Identifying SQL Injection Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prevent-sql-injection"&gt;Preventing SQL Injection Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get into it.&lt;/p&gt;

&lt;p&gt;&lt;a id="sql-injection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-sql-injection"&gt;
  &lt;/a&gt;
  What is SQL Injection
&lt;/h2&gt;

&lt;p&gt;SQL injection is a vulnerability that allows a malicious user to access your database in unintended ways.&lt;/p&gt;

&lt;p&gt;This vulnerability is usually created when you allow user input to be passed directly to the database. When an attacker identifies this, they are able to craft inputs that include SQL commands that run on the database. &lt;/p&gt;

&lt;p&gt;They essentially get access to read or manipulate your entire database.&lt;/p&gt;

&lt;p&gt;We will go over examples in a moment, but the idea is this.&lt;/p&gt;

&lt;p&gt;If you have an input on your site, like a search box that returns records from your database. An attacker can enter a string that gets read by the database to return matching results.&lt;/p&gt;

&lt;p&gt;When an attacker identifies an injection vulnerability, they are able to pass SQL instructions in that string to the database. The database will then run whatever SQL commands it was given by the user. &lt;/p&gt;

&lt;p&gt;This is not good.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-can-sql-injection-attacks-expose"&gt;
  &lt;/a&gt;
  What Can SQL Injection Attacks Expose?
&lt;/h4&gt;

&lt;p&gt;The potential impact of this vulnerability is massive. It can result in anything from letting a user read every row of every table in your database, to being able to write &lt;code&gt;INSERT&lt;/code&gt; or &lt;code&gt;UPDATE&lt;/code&gt; commands to modify or potentially even delete your database.&lt;/p&gt;

&lt;p&gt;Hackers have deleted debts from government databases, and stolen and published the personal information of millions of people because of SQL injection.&lt;/p&gt;

&lt;p&gt;Hopefully, as you can see SQL injection is an incredibly dangerous security vulnerability.&lt;/p&gt;

&lt;p&gt;And somehow even some of the largest companies still regularly &lt;a href="#sql-injection-news"&gt;expose this vulnerability&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id="how-sql-injection-works"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-sql-injection-work"&gt;
  &lt;/a&gt;
  How Does SQL Injection Work?
&lt;/h2&gt;

&lt;p&gt;The attack is based on a malicious user passing SQL instructions to your database.&lt;/p&gt;

&lt;p&gt;There are a ton of ways this can be done, and ultimately there is a potential threat on any line of code that you use to communicate with your database.&lt;/p&gt;

&lt;p&gt;Let's set up a scenario. Say your website sells a product and you use categories to filter what the user can see.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com/products?category=books
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your server takes the URL and parses the category query string to figure out how to filter the results for you.&lt;/p&gt;

&lt;p&gt;It will result in a SQL statement that could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'books'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if a malicious user is savvy enough to realize that you are querying the database based on that URL?&lt;/p&gt;

&lt;p&gt;They might change the URL to something like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com/products?category=books'+OR+1=1--
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your server might then pass that string to the database, resulting in a query like this...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'books'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="c1"&gt;--'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What they are doing is terminating the string early by passing the closing single quote in their input.&lt;/p&gt;

&lt;p&gt;This allows them to add additional SQL to their command. In this case they add an &lt;code&gt;OR 1=1&lt;/code&gt; which means they'll now see all products regardless of category since &lt;code&gt;1=1&lt;/code&gt; will be true for all rows in the table. They then append the final &lt;code&gt;--&lt;/code&gt; which is a comment so when your server adds the closing single quote, it doesn't throw any errors.&lt;/p&gt;

&lt;p&gt;This is a very benign example but demonstrates the easiest way to run raw SQL against someone else's database.&lt;/p&gt;

&lt;p&gt;Now imagine if instead of an &lt;code&gt;OR&lt;/code&gt; operator, a savvy attacker added a &lt;code&gt;UNION&lt;/code&gt; and appended other tables. &lt;/p&gt;

&lt;p&gt;They might even be able to return user emails, passwords, and other sensitive data this way.&lt;/p&gt;

&lt;p&gt;Also, this is just the URL, but any interface that allows user input is a potential attack vector. Input fields on your site, any textbox, forms... anything that interacts with the database creates a potential vulnerability.&lt;/p&gt;

&lt;p&gt;So as you can see, it's easier to pull off a SQL injection attack than you might think.&lt;/p&gt;

&lt;p&gt;&lt;a id="#second-order-injection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#secondorder-sql-injection"&gt;
  &lt;/a&gt;
  Second-Order SQL Injection
&lt;/h3&gt;

&lt;p&gt;Another form of SQL injection can be categorized as second-order SQL injection.&lt;/p&gt;

&lt;p&gt;In the above example we were able to submit SQL instructions and immediately return results from the database. Second-order attacks work slightly differently and can be harder to detect.&lt;/p&gt;

&lt;p&gt;Instead of passing input to the database, the goal with a second-order attack is to persist malicious SQL commands for future use.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#got-an-example"&gt;
  &lt;/a&gt;
  Got an example?
&lt;/h4&gt;

&lt;p&gt;Yep, let's walk through an example. Say I want to change my email on a website.&lt;/p&gt;

&lt;p&gt;In the email field, I might enter malicious data that I know will be stored on the database and retrieved later.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hello@example.com';update users set password='password'--&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Can you guess what this might do?&lt;/p&gt;

&lt;p&gt;If that website ever passes my email directly to the database, it will include my SQL instructions... (and everyone's password will then be set to password).&lt;/p&gt;

&lt;p&gt;This strategy of attack is dangerous because malicious inputs can sit dormant for a long time before they perform their intended exploit.&lt;/p&gt;

&lt;p&gt;&lt;a id="identify-sql-injection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-identify-sql-injection-vulnerabilities"&gt;
  &lt;/a&gt;
  How to Identify SQL Injection Vulnerabilities
&lt;/h2&gt;

&lt;p&gt;When you have a good understanding of how SQL injection works, I recommend you try and identify vulnerabilities on your site.&lt;/p&gt;

&lt;p&gt;You can do this by testing your site and trying to inject harmless SQL.&lt;/p&gt;

&lt;p&gt;You should also review your code to make sure you aren't passing strings directly to your database.&lt;/p&gt;

&lt;p&gt;I would recommend you take a look at libraries for the language and framework you use to develop your site. Most frameworks have helpful tools that can detect these kinds of vulnerabilities before you promote them to production environments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-your-site-for-vulnerabilities"&gt;
  &lt;/a&gt;
  Test Your Site For Vulnerabilities
&lt;/h3&gt;

&lt;p&gt;A surefire way to identify SQL injection vulnerabilities is to test your site for them.&lt;/p&gt;

&lt;p&gt;Take some of the examples in the section above. Watch how your server responds. You might be surprised to see that it's easier to perform a SQL injection attack than you thought.&lt;/p&gt;

&lt;p&gt;Don't dismiss this vulnerability just because you can't attack your own system though.&lt;/p&gt;

&lt;p&gt;There are many ways of performing SQL injection beyond passing user input.&lt;/p&gt;

&lt;p&gt;As mentioned above, &lt;a href="#second-order-injection"&gt;second order SQL injection&lt;/a&gt; can't be detected immediately. It can be difficult to detect if users are storing queries that can be executed at a later time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#carefully-review-your-code"&gt;
  &lt;/a&gt;
  Carefully Review Your Code
&lt;/h3&gt;

&lt;p&gt;The best approach to protect against SQL injection is to learn and understand how SQL injection is made possible.&lt;/p&gt;

&lt;p&gt;When you understand how it works and what makes it possible, you will have a better idea of where you might be exposing opportunities in your code. Take a look at your code. Anywhere that you interact with your database. And make sure you aren't passing any kind of user input or user generated content (remember, second order injection) directly to your database.&lt;/p&gt;

&lt;p&gt;Ask yourself, what could happen if this string contained malicious SQL instructions?&lt;/p&gt;

&lt;p&gt;It's better to be safe than sorry, or in this case secure rather than exposing your entire database.&lt;/p&gt;

&lt;p&gt;&lt;a id="prevent-sql-injection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-protect-from-sql-injection"&gt;
  &lt;/a&gt;
  How to Protect From SQL Injection
&lt;/h2&gt;

&lt;p&gt;Protecting against SQL injection is actually really easy.&lt;/p&gt;

&lt;p&gt;What you need is input validation and sanitization. &lt;/p&gt;

&lt;p&gt;These are techniques that clean user input to prevent it passing harmful strings to your database.&lt;/p&gt;

&lt;p&gt;3 of the top website attacks (SQL injection, cross-site scripting, and remote file inclusion) all come from a lack of input sanitization. &lt;/p&gt;

&lt;p&gt;And luckily, it's not hard to sanitize inputs in most major languages and frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-sanitize-user-input"&gt;
  &lt;/a&gt;
  How to Sanitize User Input
&lt;/h3&gt;

&lt;p&gt;The idea is, you take a string the user submitted and you escape any characters that could cause issues.&lt;/p&gt;

&lt;p&gt;Ruby on Rails handles this for you automatically when you use the Active Record ORM correctly.&lt;/p&gt;

&lt;p&gt;But if you don't use Active Record correctly, or if you write SQL directly in code, you can still open your database up to vulnerabilities.&lt;/p&gt;

&lt;p&gt;A good example of how easy it is to accidentally expose your data...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Don't do this!&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id = &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you pass malicious input into the &lt;code&gt;params[:id]&lt;/code&gt;, you can inject SQL into this database call. &lt;/p&gt;

&lt;p&gt;String interpolation is generally a very bad pattern to use in your database calls.&lt;/p&gt;

&lt;p&gt;In this case, the better way to use Active Record would be to pass the string as an additional argument. Active Record will then sanitize it for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Better example&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"id = ?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;where()&lt;/code&gt; method sanitizes strings passed as additional arguments, but it won't sanitize the first argument's SQL command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-writing-sql-in-active-record"&gt;
  &lt;/a&gt;
  Avoid Writing SQL in Active Record
&lt;/h3&gt;

&lt;p&gt;The truly correct way to use Active Record is to avoid passing raw SQL strings altogether.&lt;/p&gt;

&lt;p&gt;If you use Active Record's methods without string interpolation it will always sanitize your inputs automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Safe example&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# or even better&lt;/span&gt;
&lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes you need to write queries with operators that Active Record doesn't support. Such as the &lt;code&gt;LIKE&lt;/code&gt; operator or when comparing dates. Just remember to check for SQL injection vulnerabilities you might be introducing.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://stackoverflow.com/questions/21886170/best-way-to-go-about-sanitizing-user-input-in-rails"&gt;StackOverflow post&lt;/a&gt; has a great in-depth explanation or input sanitization in Rails, if you're curious.&lt;/p&gt;

&lt;p&gt;Python, PHP, and most other popular languages also come with support for sanitizing user input.&lt;/p&gt;

&lt;p&gt;So as you can see it's not hard to protect your database, it's actually pretty easy. &lt;/p&gt;

&lt;p&gt;The real challenge is how to you prevent incidents where someone &lt;em&gt;forgets&lt;/em&gt; to sanitize and protect from malicious user input.&lt;/p&gt;

&lt;p&gt;That's hard... really hard.&lt;/p&gt;

&lt;p&gt;Even the biggest, most advanced technology companies still struggle with this.&lt;/p&gt;

&lt;p&gt;&lt;a id="sql-injection-news"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#recent-sql-injection-attacks"&gt;
  &lt;/a&gt;
  Recent SQL Injection Attacks
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#the-ghostshell-attack"&gt;
  &lt;/a&gt;
  The GhostShell Attack
&lt;/h4&gt;

&lt;p&gt;A group of hackers from the APT group Team GhostShell used SQL injection to attack 53 universities. They managed to steal the personal records of 36,000 university students, faculty, and staff.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#turkish-government"&gt;
  &lt;/a&gt;
  Turkish Government
&lt;/h4&gt;

&lt;p&gt;RedHack collective (another APT group) used SQL injection to access a Turkish government website and erase debt to government agencies.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7eleven-attack"&gt;
  &lt;/a&gt;
  7-Eleven Attack
&lt;/h4&gt;

&lt;p&gt;Attackers used SQL injection to access data from several corporations, including 7-Eleven. They managed to access over 130 million credit card numbers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hbgary-attack"&gt;
  &lt;/a&gt;
  HBGary Attack
&lt;/h4&gt;

&lt;p&gt;Hackers from the Anonymous activist group used SQL injection to take down the website of IT security company, HBGary. The CEO of HBGary shared that he had the names of Anonymous organization members, which prompted the attack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recent-sql-injection-vulnerabilities-discovered"&gt;
  &lt;/a&gt;
  Recent SQL Injection Vulnerabilities Discovered
&lt;/h3&gt;

&lt;p&gt;You'll recognize some of these companies. It goes to show that nobody is immune from this exploit.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fortnite-vulnerability"&gt;
  &lt;/a&gt;
  Fortnite Vulnerability
&lt;/h4&gt;

&lt;p&gt;In 2019, a SQL injection vulnerability was discovered that allowed attackers to access user accounts. Fortnite, by the way, has over 350 million users. Luckily, the vulnerability was quickly patched. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cisco-vulnerability"&gt;
  &lt;/a&gt;
  Cisco Vulnerability
&lt;/h4&gt;

&lt;p&gt;In 2018, a SQL injection vulnerability was discovered in the Cisco Prime License Manager. The vulnerability gave attackers shell access to systems where license manager was deployed. This vulnerability has been patched.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tesla-vulnerability"&gt;
  &lt;/a&gt;
  Tesla Vulnerability
&lt;/h4&gt;

&lt;p&gt;In 2014, security researchers shared that they were able to gain administrative privileges and steal user data through Tesla's website.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;All it takes is one vulnerable line of code, and your entire system is at risk.&lt;/p&gt;

&lt;p&gt;Please, take SQL injection seriously!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>sql</category>
      <category>webdev</category>
    </item>
    <item>
      <title>HalloweenüéÉ with JS!</title>
      <author>Arya Narayan Tiwari</author>
      <pubDate>Sat, 30 Oct 2021 18:22:35 +0000</pubDate>
      <link>https://dev.to/aryanarayantiwari/halloween-with-js-4af0</link>
      <guid>https://dev.to/aryanarayantiwari/halloween-with-js-4af0</guid>
      <description>&lt;p&gt;Make your first project in &lt;strong&gt;JavaScript&lt;/strong&gt; with DOM manipulation and surprise your friends on halloween.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-project"&gt;
  &lt;/a&gt;
  About the Project
&lt;/h2&gt;

&lt;p&gt;So, I was watching Dev Ed latest YouTube &lt;a href="https://www.youtube.com/watch?v=sIBZGWQ7gM8"&gt;video&lt;/a&gt; where he recreated the classic scary maze game with JS, and that's where I got idea for my project. I wanted to create something similar to his project but not wanted it to be a maze game. So I thought I would apply his logic to the classic switch bulb project in JS where a user clicks on a button to turn the light 'on' or 'off'. Here when a user click on the button to turn the lights off we have a horror sound playing and Pennywise from &lt;a href="https://en.wikipedia.org/wiki/It_(2017_film)"&gt;IT&lt;/a&gt; movie series showing up with a laugh.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-html"&gt;
  &lt;/a&gt;
  Setting up HTML
&lt;/h2&gt;

&lt;p&gt;There isn't much required in html file just the starting state of &lt;br&gt;
the contents of file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;h1 class="head"&amp;gt;Don't turn off the lights üí°&amp;lt;/h1&amp;gt;
    &amp;lt;button class="btn"&amp;gt;üí°LIGHTS ON&amp;lt;/button&amp;gt;
    &amp;lt;img src="./img/pennywise.png" class="penny" alt="pennywise"&amp;gt;
    &amp;lt;audio src="./audio/scream.mp3" class="spooky-audio"&amp;gt;&amp;lt;/audio&amp;gt;
    &amp;lt;audio src="./audio/laugh.mp3" class="laugh"&amp;gt;&amp;lt;/audio&amp;gt;
    &amp;lt;script src="./js/main.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-css"&gt;
  &lt;/a&gt;
  Setting up CSS
&lt;/h2&gt;

&lt;p&gt;CSS adds a little bit of styling to the project also with some spooky font styles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Fruktur&amp;amp;display=swap');
*{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
body{
    font-family: 'Fruktur',sans-serif;
    color: #fff;
    background-color: #485461;
    background-image: linear-gradient(0deg,#485461 0%, #28313b 100%);
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    text-align: center;
    padding: 25px auto;
    margin: 80px auto;
    font-weight: 600;
    letter-spacing: 5px;
    overflow: hidden;
}
button{
    margin: 25px auto;
    padding: 10px 20px;
    color: #fff;
    background-color: #28313b;
    outline: none;
    border: 2px solid #28313b;
    border-radius: 5px;
    font-weight: 800;
    cursor: pointer;
}
button:hover{
border: 2px solid orange;
}
img{
    display:none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-js"&gt;
  &lt;/a&gt;
  Setting up JS
&lt;/h2&gt;

&lt;p&gt;First we get all the DOM items whose behavior we want to change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const btn = document.querySelector(".btn")
const head = document.querySelector(".head")
const penny = document.querySelector(".penny")
const audio = document.querySelector(".spooky-audio")
const laugh = document.querySelector(".laugh")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we get to the event listener part to listen for click events on button.&lt;/p&gt;

&lt;p&gt;The event listener just contains a bunch of if and else statements that check the current value of the heading and button text with the &lt;code&gt;innerHTML&lt;/code&gt; method and takes actions based on these values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;btn.addEventListener("click",(e) =&amp;gt; {
    if(btn.innerHTML == "üí°LIGHTS ON"){
        btn.innerHTML = "üéàLIGHTS OFF"
    }
    else{
        btn.innerHTML = "üí°LIGHTS ON"
    }
    if(penny.style.display == "block"){
        penny.style.display = "none"
    }
    else{
        penny.style.display="block"
    }
    if(head.innerHTML == "Don't turn off the lights üí°"){
        head.innerHTML="You shouldn't have done that!üéÉ"
    }
    else{
        head.innerHTML="Don't turn off the lights üí°"
    }
    laugh.volume = 1
    audio.volume = 1
    if(btn.innerHTML=="üéàLIGHTS OFF"){
    laugh.play()
    audio.play()    
    }
    else{
        laugh.pause()
        audio.pause()
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#thats-it-you-have-just-created-a-fun-js-dom-manipulation-project-within-an-hour-and-you-can-show-it-your-friends-and-surprise-them-on-halloween-"&gt;
  &lt;/a&gt;
  That's it, you have just created a fun JS DOM manipulation project within an hour and you can show it your friends and surprise them on Halloween üëç.
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#important-links-"&gt;
  &lt;/a&gt;
  Important links -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/aryanarayantiwari/halloween"&gt;Source Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aryanarayantiwari.github.io/halloween/"&gt;Project Demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>halloween</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building a Real-Time Bitcoin Price Tracker in Appsmith</title>
      <author>Devika Kulkarni</author>
      <pubDate>Sat, 30 Oct 2021 18:19:53 +0000</pubDate>
      <link>https://dev.to/devikakulkarni/building-a-real-time-bitcoin-price-tracker-in-appsmith-3gap</link>
      <guid>https://dev.to/devikakulkarni/building-a-real-time-bitcoin-price-tracker-in-appsmith-3gap</guid>
      <description>&lt;p&gt;Recently, &lt;a href="https://www.appsmith.com/"&gt;Appsmith&lt;/a&gt; introduced the functionality that enables &lt;a href="https://github.com/appsmithorg/appsmith/issues/3312"&gt;real-time polling of data&lt;/a&gt; using JavaScript timers. The data coming from the APIs and queries can now be periodically updated using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/setInterval"&gt;setInterval()&lt;/a&gt; method of JavaScript.&lt;/p&gt;

&lt;p&gt;The setInterval() method repeatedly executes a code snippet with a fixed time interval between the calls. Earlier in Appsmith, the user would have to manually click the refresh button to update the data. But now using the JavaScript timer one can do it programmatically.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will build a Bitcoin price tracker application as shown below to demonstrate real-time polling of data. For this, we would be using the Stats Box widget and the recently introduced timer functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AACR7HOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdbl9wjw6ct45dr50271.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AACR7HOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdbl9wjw6ct45dr50271.gif" alt="Image description" width="880" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most important requirement for this project is of an API that would provide us real-time Bitcoin prices. &lt;a href="https://finnhub.io/"&gt;Finnhub&lt;/a&gt; is one such website that provides free APIs to access real-time stocks, currencies, and crypto. So the first step is to create an account on Finnhub from where you get a key to access their APIs.&lt;/p&gt;

&lt;p&gt;Once you create an account on Finnhub, you can access your API key as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtnMSvJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcdna2ocmjd7ukpgr8nw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtnMSvJI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hcdna2ocmjd7ukpgr8nw.png" alt="Image description" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finnhub provides several APIs to get the financial data. We will be using the Quote API to track the Bitcoin price as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VLc7z5VA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw7dfwwh57b3eyly3j5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLc7z5VA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw7dfwwh57b3eyly3j5g.png" alt="Image description" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, create a new Appsmith app. From the menu panel on the left, click on Datasources and select ‚ÄúCreate new API.‚Äù Rename this new API as&lt;code&gt;GetBitcoinPrice&lt;/code&gt;. Enter the Finnhub Quote API to fetch the Bitcoin prices as shown below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://finnhub.io/api/v1/quote?symbol=BINANCE:BTCUSDT&amp;amp;token=YOUR_API_KEY&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDURslMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpfe9bg3g7ap53olv5sr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDURslMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpfe9bg3g7ap53olv5sr.png" alt="Image description" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, from the menu panel click open the Widgets section. Drag and drop a Stats Box and a Switch onto the canvas. The Stats Box is a compound widget that comprises of multiple elements such as text boxes and icon. Rename the Stats Box widget as &lt;code&gt;StatBox&lt;/code&gt; and the Switch widget as &lt;code&gt;SwLive&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Follow the given steps to configure the Stats Box widget to display Bitcoin Price that will be fetched from the above configured API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Change the text of the first text box to ‚ÄúBitcoin Price‚Äù and change the text color and font size to your desired choice.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rename the second text box to &lt;code&gt;TxtPrice&lt;/code&gt; and bind its Text property to the code shown below. This code extracts the current bitcoin price from the &lt;code&gt;GetBitcoinPrice&lt;/code&gt; API and displays it as text in the Stats Box.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvTjH9gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2weeampuorjbp3q9ylhi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvTjH9gO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2weeampuorjbp3q9ylhi.png" alt="Image description" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following is the sample response returned from the Finnhub API where  &lt;code&gt;c&lt;/code&gt; is the current price and &lt;code&gt;dp&lt;/code&gt; is the precent change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z872wW9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcxbfuudbr2nyb0i65nn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z872wW9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcxbfuudbr2nyb0i65nn.png" alt="Image description" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rename the third text box to &lt;code&gt;TxtChange&lt;/code&gt; and bind its Text property with the following code. This code extracts the percentage change in the Bitcoin price from the &lt;code&gt;GetBitcoinPrice&lt;/code&gt; API.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;change&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mbcj0HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysr4ir3okbtwov38jaan.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Mbcj0HR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysr4ir3okbtwov38jaan.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now bind &lt;code&gt;TxtChange&lt;/code&gt; widget‚Äôs Text Color property with the following code. This code changes the color of the text displayed to either red or green depending on negative or positive value of the percent change returned by the API.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KG8qGvdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31kxm7bpiy6gxy0wv0fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KG8qGvdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31kxm7bpiy6gxy0wv0fg.png" alt="Image description" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And our last step will be to add a new Image widget in the Stats Box to display Up or Down arrows as shown in the following screenshot depending on the negative or positive Percent Change value returned from the API. To do this, follow the steps below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IZ5-rlyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thugkotgcrwrb0fzjtqp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IZ5-rlyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thugkotgcrwrb0fzjtqp.png" alt="Image description" width="880" height="192"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a. Delete the Icon Button widget that comes with the Stats Box widget‚Äôs default configuration.&lt;/p&gt;

&lt;p&gt;b. Add a new Image widget in place of the Icon Button (inside Stats Box widget). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Ny9cRHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxds3tyk94eb29salfhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Ny9cRHh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxds3tyk94eb29salfhe.png" alt="Image description" width="698" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;c. Rename this new Image widget as &lt;code&gt;ImgUpDown&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;d. Now we will be embedding following two images in Base64 format in this &lt;code&gt;ImgUpDown&lt;/code&gt;'s Image     property.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJZBUWxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7baxiqbpmg1eukjn96i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJZBUWxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7baxiqbpmg1eukjn96i.png" alt="Image description" width="370" height="196"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use online image encoder using service like this &lt;code&gt;https://elmah.io/tools/base64-image-encoder/&lt;/code&gt; to convert an image into Base64 format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBITbO0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr05tm2qwu7kwpa8uq2s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBITbO0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr05tm2qwu7kwpa8uq2s.png" alt="Image description" width="880" height="607"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;e. Once you have Base64 equivalents of your images, bind the Image property of &lt;code&gt;ImgUpDown&lt;/code&gt; widget to following code.  Notice here that if the value of Percent Change is negative we return the Base64 equivalent of red down arrow image and if it is positive we return Base64 equivalent of green up arrow image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;

&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iVBORw0KGgoAAAANSUhEUgAAADYAAWFQIBxKbwhMrV8283eqQVllVErPOTjOeSGfnaui364X7plY‚Ä¶‚Ä¶‚Ä¶‚Ä¶.cKDu13Qa5mfTI+AVg00vCweFcJhk9mAyjPRYIx2QtFh3OkhpmQMw3rWgDu9S202qzgTgWckfDOee9J&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iVBORw0KGgoAAAANSUhEUgAAADYAAAA2CAYAAACMRWrdAAAABGdBTUEAALGPC/xhBQAAA4b‚Ä¶‚Ä¶‚Ä¶..WxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q816DF3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pybvvgki6uf0hg18mm9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q816DF3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pybvvgki6uf0hg18mm9i.png" alt="Image description" width="880" height="937"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we will setup a timer which runs periodically. It will run depending on whether the auto update switch widget (&lt;code&gt;SwLive&lt;/code&gt;) is switched on or not. If it is switched on, we start a timer which will run the &lt;code&gt;GetBitcoinPrice&lt;/code&gt; API at every second. And if it is switched off, we clear the timer. Write the following binding in &lt;code&gt;SwLive&lt;/code&gt;'s &lt;code&gt;onChange&lt;/code&gt; event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SwLive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSwitchedOn&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
       &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;GetBitcoinPrice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timer1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;timer1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;})()&lt;/span&gt;

&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iU6QhgS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bdsy9080llz3ghgnzrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iU6QhgS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bdsy9080llz3ghgnzrq.png" alt="Image description" width="880" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default we don‚Äôt want the time to start on page load, so we turn off ‚ÄúDefault Selected‚Äù property of the widget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I38VzjZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35y6krugocf38s9ut3k8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I38VzjZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35y6krugocf38s9ut3k8.png" alt="Image description" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are ready to publish our app. Click Deploy to take your application live!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tx0dcfwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gg67s2v1x6bx1fugma2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tx0dcfwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gg67s2v1x6bx1fugma2.png" alt="Image description" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>appsmith</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Git Rebase for Preventing Merge Commits</title>
      <author>jen chan</author>
      <pubDate>Sat, 30 Oct 2021 18:01:34 +0000</pubDate>
      <link>https://dev.to/jenc/git-rebase-for-preventing-merge-commits-2len</link>
      <guid>https://dev.to/jenc/git-rebase-for-preventing-merge-commits-2len</guid>
      <description>&lt;p&gt;Within trunk-based or agile development, minimizing the number of noisy commits to keep any possible regressions easy to back-trace is often considered a good practice.&lt;/p&gt;

&lt;p&gt;There was the workplace that kept everything minimal on their main branch, with commits few as possible. Everyone's feature branches would be merged in as singular squashed commits. The danger here was that if there was a bug introduced in a feature branch, it would be tremendously difficult to trace chronologically.&lt;/p&gt;

&lt;p&gt;Then there was the workplace that wanted each commit to tell a story so we'd make a commit annotating the changes on each file. In either case, the lesson learned was to take care in allowing the commits to tell a story of what changes were made. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-preventing-merge-commits-when-prs-are-merged-in-on-remote-trunk"&gt;
  &lt;/a&gt;
  1. Preventing Merge Commits When PRs are Merged In on Remote Trunk
&lt;/h2&gt;

&lt;p&gt;(...where "trunk" is the iterative development branch)&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://www.atlassian.com/git/tutorials/using-branches/merge-strategy"&gt;"Merge Strategies"&lt;/a&gt; detailed by Atlassian For Bitbucket&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github"&gt;"About Merge Methods"&lt;/a&gt; for Github&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-preventing-merge-commits-when-pulling-from-remote-to-local"&gt;
  &lt;/a&gt;
  2. Preventing Merge Commits when Pulling from Remote to Local
&lt;/h2&gt;

&lt;p&gt;I imagine this is what you came to the article for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-principle-this-is-the-setting-to-change"&gt;
  &lt;/a&gt;
  In Principle, This is the Setting to Change
&lt;/h3&gt;

&lt;p&gt;That you set your git config to rebase whenever you pull: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git config --global branch.autosetuprebase always&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Depending on your work-style, here's 3 ways to prevent merge commits when merging from remote after it has moved forward while you've been developing. They all have to do with how you manage your own changes.&lt;/p&gt;

&lt;p&gt;The following 3 workflows will illuminate exactly what that means if a rebase happens every time you pull, if you &lt;strong&gt;don't&lt;/strong&gt; use the setting above. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 1:&lt;/strong&gt; Make your local commits as usual and &lt;code&gt;git pull rebase&lt;/code&gt; when you need to merge from remote origin&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On your checked out feature branch, commit your changes as you go - It will create commits on your local branch.&lt;/li&gt;
&lt;li&gt;You're ready to make a PR but realize the dev branch has advanced, so you run:
¬†&lt;code&gt;git pull --rebase &amp;lt;remote-name&amp;gt; &amp;lt;branch-name&amp;gt;&lt;/code&gt; or in our case, 
&lt;code&gt;git pull origin development ‚Äîrebase&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If what's new on &lt;code&gt;development&lt;/code&gt; conflicts with changes you have in your code, VS code will tell you something like:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;From&lt;/span&gt; &lt;span class="nx"&gt;bitbucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;org&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;organization&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;
 &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt;            &lt;span class="nx"&gt;development&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;FETCH_HEAD&lt;/span&gt;
   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;ab345e&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="nx"&gt;d321ff7&lt;/span&gt;  &lt;span class="nx"&gt;development&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;development&lt;/span&gt;
&lt;span class="nx"&gt;Auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;merging&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;Auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;merging&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;CONFLICT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Merge&lt;/span&gt; &lt;span class="nx"&gt;conflict&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;abc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;Auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;merging&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;CONFLICT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Merge&lt;/span&gt; &lt;span class="nx"&gt;conflict&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ts&lt;/span&gt;
&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;could&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;f4e0681&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="nx"&gt;Rename&lt;/span&gt; &lt;span class="nx"&gt;thing&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;thing&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
&lt;span class="nx"&gt;Resolve&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="nx"&gt;conflicts&lt;/span&gt; &lt;span class="nx"&gt;manually&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mark&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;resolved&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git add/rm &amp;lt;conflicted_files&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;then&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git rebase --continue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;instead&lt;/span&gt; &lt;span class="nx"&gt;skip&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git rebase --skip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;abort&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git rebase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;git rebase --abort&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact, Git will list out every file that has a merge conflict in it with the &lt;code&gt;CONFLICT&lt;/code&gt; flag! &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to each file listed, where VS code will make the local and incoming changes apparent. Select whether you want the "current" or "incoming" change or "both" included. You can even make edits within either version and keep that one. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git add&lt;/code&gt; each conflicted file's name to acknowledge/stage the changes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git rebase ‚Äî-continue&lt;/code&gt; to complete the rebase.&lt;/li&gt;
&lt;li&gt;finally, files that are changed as a result of your own local commits will also need to be &lt;code&gt;git add&lt;/code&gt;-ed. so add those and run &lt;code&gt;git rebase --continue&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You know everything has succeeded when you get the message:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Successfully&lt;/span&gt; &lt;span class="nx"&gt;rebased&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt; &lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;heads&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚ö†Ô∏è The rebase will take out the commits that you committed on your current local branch &lt;code&gt;HEAD&lt;/code&gt; as a patch. Then it will apply all the remote commits on top of &lt;code&gt;HEAD&lt;/code&gt;, and then applies your newest commits on top of it.&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Highly recommend you groom your own local branch's commit history (see &lt;a href="https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history"&gt;interactive rebase&lt;/a&gt;) before you perform this method. If your branch after step 3 is merged into remote &lt;code&gt;development&lt;/code&gt;, will contain a revised history. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;git log&lt;/code&gt; and you'll see a linear retrospective history of the choices you made for each file with no merge commit!&lt;/li&gt;
&lt;li&gt;Sometimes when you're ready to push, you'll see that your remote local is now out of sync with whatever you've pulled and rebased from &lt;code&gt;development&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Your&lt;/span&gt; &lt;span class="nx"&gt;branch&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;origin/bug-123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;diverged&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nx"&gt;different&lt;/span&gt; &lt;span class="nx"&gt;commits&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;respectively&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we have here: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;28 commits on local that are a reconciliation of my own local commits with most recent changes on &lt;code&gt;development&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 commit on remote feature branch that I made and pushed to my remote feature branch&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running &lt;code&gt;git pull ‚Äî-rebase&lt;/code&gt; off the contents of my now-behind remote local is going to start a rebase process that won't be fruitful in this case, so I run &lt;code&gt;git push -f&lt;/code&gt; (&lt;code&gt;‚Äî-force&lt;/code&gt;)on my feature/bug branch. &lt;/p&gt;

&lt;p&gt;If you have impact tested that your current local builds, and you are super confident your current version is the authoritative version you can use &lt;code&gt;-f&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Force push with &lt;strong&gt;ultimate&lt;/strong&gt; care, and never on a shared public branch. &lt;/p&gt;

&lt;p&gt;You are literally rewriting history!&lt;/p&gt;

&lt;p&gt;‚ûï Pros: &lt;/p&gt;

&lt;p&gt;No excessive merge commits.&lt;/p&gt;

&lt;p&gt;Trigger less merge conflict markers, or none if the code you're contributing is new.&lt;/p&gt;

&lt;p&gt;At the end of the rebase the &lt;code&gt;HEAD&lt;/code&gt; of your branch will be in sync with the &lt;code&gt;development&lt;/code&gt; branch&lt;/p&gt;

&lt;p&gt;‚ûñ Cons: &lt;/p&gt;

&lt;p&gt;The enormous risk here is that any files or code that are supposed to be deleted by someone else's merge commit, might be re-added if they remained in your branch. You can accidentally overwrite someone else's work in the process of rebasing changes on a large feature branch. Fortunately, even if you do, when you make a pull request with this feature branch, your teammates will notice anything you're overwriting or removing on your PR.&lt;/p&gt;

&lt;p&gt;If you have squashed any commits together that are also already on the remote, you will experience really difficult merge conflicts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 2&lt;/strong&gt;: &lt;a href="https://www.atlassian.com/git/tutorials/saving-changes/git-stash"&gt;stash&lt;/a&gt; any uncommitted changes, git pull rebase pull from remote, then commit your changes&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Checkout a new branch and start working on changes. making no commits so if you run &lt;code&gt;git status&lt;/code&gt; there would be lots of red untracked files.&lt;/li&gt;
&lt;li&gt;You realize the remote branch is ahead and need to update your local but you need to hang onto your uncommitted changes:
&lt;code&gt;git stash&lt;/code&gt; 
The above brings the state of your project back to the previous one before you made changes. Your local branch is simply behind remote &lt;code&gt;development&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;You run &lt;code&gt;git pull ‚Äî-rebase&lt;/code&gt; to bring in new changes without causing a merge commit.&lt;/li&gt;
&lt;li&gt;Bring back uncommitted changes you made with  &lt;code&gt;git stash apply&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;And then commit all of them &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚ûï Pros: again, way less merge conflicts to resolve. No merge commits.&lt;/p&gt;

&lt;p&gt;‚ûñ Cons: Hanging onto all my changes without commits requires working in a very clearsighted way, makes an issue hard to show a teammate if I make a PR just to show them where I'm stuck.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method 3:&lt;/strong&gt; Make a side-branch to run the rebase on &lt;/p&gt;

&lt;p&gt;If you're not comfortable with all this yet, you can use your feature branch as the branch in which you will merge a series of commits in a separate branch with the ones from remote. &lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;git checkout development&lt;/code&gt; to start on development branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout -b feature-branch&lt;/code&gt; to checkout a feature branch that contains the current commits on development&lt;/li&gt;
&lt;li&gt;Start making all yer commits for all your changes&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you're ready you can check out a temporary branch with all of your feature branch's changes, while still on &lt;code&gt;feature-branch&lt;/code&gt;: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b temporary-branch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The last command creates a "copy" of your feature branch. To bring what's newly on &lt;code&gt;development&lt;/code&gt; and your temporary branch together (while on your temporary-branch)[^1]:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git rebase -i development&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Checkout your initial feature branch: &lt;code&gt;git checkout feature-branch&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;git merge temporary-branch --ff&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here the &lt;code&gt;‚Äî-ff&lt;/code&gt; flag tells our merging of 2 branches not to create a merge commit, and to fast-forward the pointer to the most recent commit (aka. the &lt;code&gt;HEAD&lt;/code&gt;) to your most recent one.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Push and create a PR of your feature branch as usual.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚ûï Pros: this is the most safe approach probably, of all three ways&lt;/p&gt;

&lt;p&gt;‚ûñ Cons: This is quite a longer-winded way to do things and probably more theoretical. I have not actually done the whole process verbatim before&lt;/p&gt;

&lt;p&gt;[^1] I say "copy" in quotes because it's easier to think about, but Git is actually creating a pointer to the initial branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Reading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase"&gt;rebase&lt;/a&gt; command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing"&gt;Merge vs. Rebase&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>showdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Messaging and Madness: Sending Messages with AMQP and Amazon MQ</title>
      <author>George Offley</author>
      <pubDate>Sat, 30 Oct 2021 17:23:47 +0000</pubDate>
      <link>https://dev.to/aws-builders/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq-2m9b</link>
      <guid>https://dev.to/aws-builders/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq-2m9b</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted on &lt;a href="https://georgeoffley.com/blog/messaging-and-madness-sending-messages-with-amqp-and-amazon-mq.html"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#amqp"&gt;AMQP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#amqp_amazon_mq"&gt;AMQP and Amazon MQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serialization"&gt;Serialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;How do software systems talk to each other? Back-end systems can scale into giant melted together &lt;a href="https://youtu.be/NH-8L1iZq20"&gt;Cronenberg monsters&lt;/a&gt;, often making up different tools and languages. So, communicating between these services can become an untenable challenge without some shared vocabulary. We can communicate in many ways, but today I wanted to talk about asynchronous messaging protocols and figure out how AWS can help.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amqp"&gt;
  &lt;/a&gt;
  AMQP &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;AMQP stands for Advanced Message Queuing Protocol. I‚Äôve been working to implement it for some back-end software suites I‚Äôm building out to enable them to talk to each other. AMQP utilizes these things called &lt;em&gt;brokers&lt;/em&gt; to publish messages on, then on the other end, a receiving service subscribed to the same ‚Äúchannel‚Äù that we posted to can pick up that message. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X05DUDqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/hello-world-example-routing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X05DUDqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/hello-world-example-routing.png" alt="Hello World Visualization" width="700" height="328"&gt;&lt;/a&gt;&lt;br&gt;
via &lt;a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html"&gt;Rabbit MQ Tutorials&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs dive a little further down; the &lt;em&gt;publisher&lt;/em&gt; service publishes a message to an &lt;em&gt;exchange&lt;/em&gt; on a &lt;em&gt;broker&lt;/em&gt;. This exchange has &lt;em&gt;routes&lt;/em&gt; that lead to &lt;em&gt;queues&lt;/em&gt;, or ‚Äúchannels,‚Äù where the payload is published. We make sure to include the sending information with our message to be routed to the correct queue. The broker cannot see the message, although it might look into any metadata attached to the message from the publisher. This workflow asynchronously sends messages. Imagine a server version of a mail sorting machine shooting letters into the correct mail slot based on the address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LZqARNPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/mail_sorting.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LZqARNPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/mail_sorting.gif" alt="Mail Sorting Gif from MIB II" width="320" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When referring to a publisher, I mean some code that we utilize to connect and send a message. AMQP is programmable, so I can shape it to fit most situations. In this case, we need to send messages to our different software suites to trigger actions to happen. Learning this took some time, but it‚Äôs been simple to implement. &lt;/p&gt;

&lt;p&gt;There are different types of exchanges that we can use to make these services fit our needs. I‚Äôm going to explain what we use briefly.&lt;/p&gt;

&lt;p&gt;We use a &lt;em&gt;direct exchange&lt;/em&gt; utilizing &lt;em&gt;routing keys&lt;/em&gt; to bind queues to exchanges. Our code can use direct exchanges to distribute tasks to many different endpoints, but we used these direct exchanges to make direct routes between our services. Other types of exchanges can be used to broadcast messages. More information can be found &lt;a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html"&gt;here&lt;/a&gt;. For now, we‚Äôre going to focus on direct exchanges. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#amqp-and-amazon-mq"&gt;
  &lt;/a&gt;
  AMQP and Amazon MQ &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We touched on all that because I wanted to talk about &lt;a href="https://aws.amazon.com/amazon-mq/?amazon-mq.sort-by=item.additionalFields.postDateTime&amp;amp;amazon-mq.sort-order=desc"&gt;Amazon MQ&lt;/a&gt;. Amazon MQ is a fully managed platform for setting up message brokers. Amazon MQ utilizes both RabbitMQ and Apache Active MQ for creating brokers. We‚Äôre sticking with Rabbit MQ for the time being.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tb8ynwwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/amazon_mq_dash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tb8ynwwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/amazon_mq_dash.png" alt="Amazon MQ Dashboard" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here above, you can see you can easily set up a broker in just a few clicks. I left most of the settings on default, except for choosing ‚ÄúRabbitMQ‚Äù for our broker engine and setting some security up for accessing our management console. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WupXkx6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/rabbit_mq_dash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WupXkx6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/rabbit_mq_dash.png" alt="Rabbit MQ Management Console" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we get that, we have access to the RabbitMQ dashboard Amazon MQ created and is managing. Now that we have a broker set up, we can play with some code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AAn3Wix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/code.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AAn3Wix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/code.png" alt="Code" width="880" height="781"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above I use the library &lt;a href="https://github.com/celery/kombu"&gt;Kombu&lt;/a&gt; to create some connections and send some stuff. I started by setting up our environment variables. Then created exchange and queue objects. Finally, I made our connection object and the producer object, and then we sent a simple ‚ÄúHello‚Äù message.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serialization"&gt;
  &lt;/a&gt;
  Serialization &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Serialization is &lt;a href="https://www.tutorialspoint.com/object_oriented_python/object_oriented_python_serialization.htm"&gt;another blog post&lt;/a&gt;, but I chose to use JSON to serialize the payload. In the production software, I use a combination of JSON and &lt;a href="https://docs.python.org/3/library/pickle.html"&gt;Pickle&lt;/a&gt; to serialize things like image data.&lt;/p&gt;

&lt;p&gt;Now we can see our message published on the queue I declared in our publisher service. An identical receiving service would be set up on the other side to read out messages sent to that queue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4hcWaug4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/results.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4hcWaug4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://georgeoffley-blog-images.s3.amazonaws.com/2021-10-30-messaging-and-madness/results.png" alt="Results" width="502" height="279"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In conclusion, using Amazon MQ allows us to set up managed brokers for us to send messages. With AMQP as the broker engine, we have a lightweight message-sending workflow. Thanks for reading.&lt;/p&gt;

&lt;p&gt;-George&lt;/p&gt;

</description>
      <category>python</category>
      <category>aws</category>
      <category>amqp</category>
      <category>amazonmq</category>
    </item>
    <item>
      <title>Basic concepts of Java</title>
      <author>BeautyJames</author>
      <pubDate>Sat, 30 Oct 2021 17:10:14 +0000</pubDate>
      <link>https://dev.to/beautyjames/basic-concepts-of-java-19k4</link>
      <guid>https://dev.to/beautyjames/basic-concepts-of-java-19k4</guid>
      <description>&lt;p&gt;Hello readers, Beauty James here again with another exciting article. I‚Äôve been talking about Frontend development for some time now so I‚Äôll be considering Java, one of the many examples of programming languages used for Frontend development. I will be discussing the following headings below;&lt;br&gt;
‚Ä¢ What is Java?&lt;br&gt;
‚Ä¢ History of Java programming language&lt;br&gt;
‚Ä¢ Java Features&lt;br&gt;
‚Ä¢ Java Architecture&lt;br&gt;
‚Ä¢ Components of Java Programming language&lt;br&gt;
‚Ä¢ What is Java Platform?&lt;br&gt;
‚Ä¢ Types of Java Platforms&lt;br&gt;
‚Ä¢ How is Java Platform Independent?&lt;br&gt;
‚Ä¢ Uses and applications of Java&lt;/p&gt;

&lt;p&gt;What is Java?&lt;br&gt;
Java is a high level class based object oriented programming language designed to have just a few implementation dependencies. It is a multi platform and a network centric language. As other programming languages, it is a platform for application development. Java codes can be Compiled to byte codes to run on all platforms supporting java without recompilation. Java is particularly popular for its client-sever web applications with more than 9 million developers under their belt.&lt;/p&gt;

&lt;p&gt;History of Java Programming Language&lt;br&gt;
Java, originally called oak was developed in the early 1990s by James Gosling and 4 other developers at Sun Microsystems, Inc. (later acquired by oracle in 2009) and released in 1995. At the time, the internet and the WWW were becoming more and more popular but the C and C++ programs used were not platform independent (they had to be compiled and recompiled for different hardware and processors) and required more memory. So the 5 developers sought to create a language that could run on any operating system regardless of the systems hardware or software configuration. The program used for java is small and portable and could be transported over any network. This new development attracted developers in no time because it also allows communication between consumer electronics, making Java the most popular programming languages to this time. Although James Gosling developed java in the early 1990s, he left the company after its acquisition in 2009 by Oracle Corporation to work with Amazon web  services.&lt;/p&gt;

&lt;p&gt;Features of Java&lt;br&gt;
‚Ä¢ Object oriented: Java is a fully object oriented language and possesses features such as encapsulation, polymorphism, inheritance, abstraction, class and object.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Robust: With features such as automatic Garbage Collection and Exception handling, it helps programmers to create reliable applications which eliminates error prone codes.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Simple: The language is easy to learn and the syntax is clean and easily understandable.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Security: Java programs run in Java Runtime Environment (JRE) which makes little or no interaction with the Operating System, making the program free from virus attacks because it can‚Äôt be invaded from the outside.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Multi-threading: Java makes use of multi threading features which makes it possible to execute multiple tasks at the same time, resulting in highly interactive and responsive applications.&lt;/p&gt;

&lt;p&gt;‚Ä¢ High Performance: Since Java cannot be as fast as C or C++, it makes use of a Java compiler which changes java codes into bytecodes so java applications can run at full speed.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Independence: Any machine with Java Runtime Environment can run Java programs because all  java programs are compiled into bytecode which is platform Independent.&lt;/p&gt;

&lt;p&gt;Java Architecture&lt;br&gt;
Java Architecture compiles and interprets a program. It explains the process involved in formulating a Java program which includes converting the codes written in java into byte codes, which is done by the Java Compiler. The byte codes are then converted into machine code by the JVM (Java Virtual Machine) which is executed directly by the machine.&lt;/p&gt;

&lt;p&gt;Components of Java&lt;br&gt;
There are three main components of Java language.&lt;br&gt;
‚Ä¢ Java Virtual Machine (JVM): This is a component that gives developers an environment to execute Java programs by converting byte codes into machine codes. JVM, first of all, loads the code into memory and verifies it. After that, it executes the code and provides a runtime environment. Hence, JVM performs actions in this order: loads the java codes, verifies them, executes them, and then provides a runtime environment for the codes.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Java Runtime Environment (JRE): JRE builds a runtime environment in which Java programs can be executed. It is located on the on-disk system which takes the Java code, combines it with the needed libraries, and starts the JVM to execute it. JRE contains libraries and software that your Java programs need to run. JRE is a part of JDK.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Java Development Kit: JDK is a software development environment used to develop Java applications and applets. It contains development tools such as an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (javadoc).&lt;/p&gt;

&lt;p&gt;Java Platforms&lt;br&gt;
A platform is a hardware or software environment in which a program runs. Java has its own run time environment known as JRE(Java Run-time Environment) and Java Virtual Machine(JVM) which converts Java codes to machine codes, making it possible to develop and run the programs that are written in Java Programming language. Java platforms includes execution engine, compiler and set of libraries. &lt;/p&gt;

&lt;p&gt;Types of Java Platforms&lt;br&gt;
By the late 1990s, Java grew beyond the World Wide Web and as a result, Sun Microsystems created varieties of Java for different purposes, also known as Java editions, such as:&lt;br&gt;
‚Ä¢ Java platform Standard Edition: Java Standard Edition is a computing platform that targets work station environments, offering the Java programming language‚Äôs core functionality. It is used for the development and deployment of portable codes used in desktop and server environments. It is also used in networking, security, database access, Graphical User Interface (GUI) development, and XML parsing.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Java platform Enterprise Edition: is a set of specifications that targets large distributed enterprises or internet environments with features such as distributed computing and web services. The application runs on reference runtimes which handles transactions, security, scalability, concurrency and the management of components to be deployed. Applications of Java Platform Enterprise include e-commerce, accounting, banking information systems.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Java Platform Micro Edition: This is a computing platform used for the development and deployment of portable codes for embedded and mobile devices like micro-controllers, sensors, gateways, mobile phones, printers, etc.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Java FX: JavaFX is used for creating desktop applications and Rich Internet Applications(RIAs) which can run on a wide variety of devices including desktop computers and web browsers. Its user hardware-accelerated graphics and media engines helps Java take advantage of higher-performance clients and high-level APIs for connecting to networked data sources.&lt;/p&gt;

&lt;p&gt;How is Java Platform Independent? &lt;br&gt;
A platform can be called independent if it can run on all available Operating Systems with respect to its development and compilation. Now, Java is platform-independent simply because it produces a unique format called bytecode. First, source code is used by Java compiler and is converted in class file. The class file code is in byte code form and that class file is used by JVM to convert it into an object file. After that, you can see the final output on your screen. Any machine with Java Runtime Environment can run Java Programs. In short, the Java source code can run on all operating systems. Therefore, Java is a platform-Independent language.&lt;/p&gt;

&lt;p&gt;Uses and Applications of Java&lt;br&gt;
‚Ä¢ Mobile App development: Java is supported by Android Studio which helps facilitate secure and efficient development for a wide range of mobile applications. It becomes much easier for developers to develop android applications such as Spotify and twitter with the use of Java.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Game development: Java is often used by game development companies because of its support for the open-source most powerful 3D engine which provides unequalled capacity in designing 3D games. The most popular games developed using Java are Minecraft, Mission Impossible III, etc. Bear in mind that some developers avoid developing games using Java because of its garbage-collection issues, which results in performance problems and frequent pausing in the apps. It is riskier to use Java for the development of bigger AAA games due to this very problem.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Cloud based Applications: A cloud application is an application that involves data processed on a cloud server. Thanks to factors like top-notch performance, scalability, and reliability, Java has been able to provide the environment to develop cloud-based applications, providing low cost services to its users. There are many types of services that use cloud computing, with the aid of cloud apps like Dropbox, Amazon Web Services, Slack, and Salesforce for storage and file-sharing purposes. Gmail, for instance, is an example of a cloud-based application built with Java.&lt;/p&gt;

&lt;p&gt;‚Ä¢ IoT devices: IoT is a technology that connects the devices in its network and communicates with them without human intervention. Combined with technologies like Artificial Intelligence (AI), Java can help power devices remotely, connect appliances and other objects through devices such as health gears, smartphones, wearables, smart lighting, TVs, etc. The IoT is also applied in many industries, including healthcare, security, supply-chain management, and others. IoT programmers gravitate towards Java because it is secure, flexible, and versatile.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Web applications: Web application development was one of the first uses of Java and it still remains a first choice language for this because of its security, scalability, and high performance. Due to these factors, many businesses, large and small, turn to Java when they are looking for a quick turnaround for a high-performance web application. Using this technology, users can develop a variety of applications such as LinkedIn, AliExpress, web.archive.org, IRCTC, etc.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Scientific applications: Fields like healthcare and research use Scientific applications frequently to integrate and use math to perform practical, real-world computations, and calculations. Java is often used for creating these apps because they depend on accuracy, reliability, security and not to mention high performance. They can access plenty of support and receive help with troubleshooting.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Enterprise Applications: This software is often used for enterprises (large businesses) that need streamlined services delivered in one place because it connects and gives access to various departments and employees. There is also an entire set of Java Application Programming Interfaces (APIs) for enterprises called Java Platform, Enterprise Edition (Java EE) that facilitates efficient and easy scripting. Its platform independence supports company-wide integration and compatibility, making delivery more convenient. Scalability in Java also makes it easier for growing enterprises to keep up with their efforts.&lt;/p&gt;

&lt;p&gt;‚Ä¢ GUI applications: GUI applications can also be developed using Java because it provides frameworks such as AWT, JavaFX, and Swing which enables developers to design, create, test, debug, and deploy Rich Client Applications (RIAs) that behave consistently across multiple platforms.&lt;/p&gt;

&lt;p&gt;CONCLUSION&lt;br&gt;
At this point, readers should be able to understand the basic concepts of Java such as its definition, architecture, features, components, platforms and its applications. Note that Java is not the same as JavaScript although they are often compared to each other. Java is a programming language that creates applications that run in a virtual machine or a browser while Java Script is a scripting language that runs on a browser only.&lt;br&gt;
These are some of the core upgrades done as a part of Java 8 and 11 release respectively:&lt;br&gt;
Java8;&lt;br&gt;
‚Ä¢ Ease of Use&lt;br&gt;
‚Ä¢ Increased productivity by providing Optional Classes feature, Lambda Expressions, Streams etc.&lt;br&gt;
‚Ä¢ Improved Polyglot programming (performs the same operations in multiple programming languages).&lt;br&gt;
‚Ä¢ Improved Security and performance.&lt;br&gt;
Java 11;&lt;br&gt;
‚Ä¢ Standardized http client&lt;br&gt;
‚Ä¢ Lazy Allocation of Compiler Threads&lt;br&gt;
‚Ä¢ Enhanced KeyStore Mechanisms&lt;br&gt;
‚Ä¢ Updated Locale Data to Unicode CLDR v33&lt;br&gt;
‚Ä¢ JEP 331 Low-Overhead Heap Profiling&lt;br&gt;
‚Ä¢ Includes support for Unicode 10.0.0&lt;br&gt;
‚Ä¢ JEP 330 Launch Single-File Source-Code Programs&lt;br&gt;
‚Ä¢ JEP 181 Nest-Based Access Control&lt;br&gt;
‚Ä¢ Added Brainpool EC Support (RFC 5639)&lt;br&gt;
‚Ä¢ JEP 332 Transport Layer Security (TLS) 1.3&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>java</category>
    </item>
    <item>
      <title>Query in Apache CouchDB: Views</title>
      <author>Jordan Soo Yen Yih</author>
      <pubDate>Sat, 30 Oct 2021 17:05:18 +0000</pubDate>
      <link>https://dev.to/yenyih/query-in-apache-couchdb-views-4hlh</link>
      <guid>https://dev.to/yenyih/query-in-apache-couchdb-views-4hlh</guid>
      <description>&lt;p&gt;In this articles, I will talk about how to query documents in Apache CouchDB via Views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-apache-couchdb"&gt;
  &lt;/a&gt;
  What is Apache CouchDB?
&lt;/h2&gt;

&lt;p&gt;A short introduce about CouchDB first for those who don't know. Apache CouchDB is an open-source document-oriented NoSQL database, implemented in Erlang. It is very easy to use as CouchDB makes use of the ubiquitous HTTP protocol and JSON data format. Do check out their &lt;a href="https://couchdb.apache.org/"&gt;Official Website&lt;/a&gt; for more detail. üòâ&lt;/p&gt;




&lt;p&gt;Alright, back to our main topic today.‚úå&lt;/p&gt;

&lt;p&gt;First of all, before we talk about what is view, I need to introduce 2 important things in CouchDB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#query-server"&gt;
  &lt;/a&gt;
  Query Server
&lt;/h2&gt;

&lt;p&gt;The first thing to introduce is CouchDB Query Server. What is Query Server? Based on the official documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Query server is an external process that communicates with CouchDB by JSON protocol through stdio interface and processes all design functions calls, such as JavaScript views.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By default, CouchDB has a built-in Javascript query server running via &lt;a href="https://spidermonkey.dev/"&gt;Mozilla SpiderMonkey&lt;/a&gt;. That's mean we can define a javascript function to tell CouchDB what documents you want to query.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you are not comfortable with Javascript, You can use other programming languages query server such as Python, Ruby, Clojure and etc. You can find the query server configuration &lt;a href="https://docs.couchdb.org/en/latest/config/query-servers.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ooookay, then where to define the javascript function?ü§î&lt;/p&gt;

&lt;p&gt;which is the second thing to introduce.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-document"&gt;
  &lt;/a&gt;
  Design Document
&lt;/h2&gt;

&lt;p&gt;Design Document is a special document within a CouchDB database. You can use design document to build indexes, validate document updates, format query results, and filter replications. Below is an example of the design document structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "_id": "_design/example",
    "views": {
        "view-number-one": {
            "map": "function (doc) {/* function code here */}"
        },
        "view-number-two": {
            "map": "function (doc) {/* function code here */}",
            "reduce": "function (keys, values, rereduce) {/* function code here */}"
        }
    },
    "updates": {
        "updatefun1": "function(doc,req) {/* function code here */}",
        "updatefun2": "function(doc,req) {/* function code here  */}"
    },
    "filters": {
        "filterfunction1": "function(doc, req){ /* function code here */ }"
    },
    "validate_doc_update": "function(newDoc, oldDoc, userCtx, secObj) { /* function code here */ }",
    "language": "javascript"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's us break down chunk by chunk.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-couchdbs-document-id"&gt;
  &lt;/a&gt;
  1. CouchDB's document ID.
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Underscore id&lt;/strong&gt;&lt;/em&gt; is a reserved property key for representing the ID of the JSON document you save in the database. If the document starts with _design/ in front, meaning it is a design document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"_id": "_design/example",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-view-functions"&gt;
  &lt;/a&gt;
  2. View functions
&lt;/h3&gt;

&lt;p&gt;We can define our views query logic here. Mostly driven by Javascript function as Javascript is default query server language. Later we will go more detail on the view function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"views": {
   "view-number-one": {
      "map": "function (doc) {/* function code here */}"
   },
   "view-number-two": {
      "map": "function (doc) {/* function code here */}",
      "reduce": "function (keys, values, rereduce) {/* function code here */}"
   }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-update-functions"&gt;
  &lt;/a&gt;
  3. Update functions
&lt;/h3&gt;

&lt;p&gt;Update functions are functions logic that saved in CouchDB server and then we can request to invoke to create or update a document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"updates": {
   "updatefun1": "function(doc,req) {/* function code here */}",
   "updatefun2": "function(doc,req) {/* function code here */}"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-filter-functions"&gt;
  &lt;/a&gt;
  4. Filter functions
&lt;/h3&gt;

&lt;p&gt;Filter functions use to filter database changes feed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"filters": {
   "filterfunction1": "function(doc, req){ /* function code here */ }"
},
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-validate-document-update-function"&gt;
  &lt;/a&gt;
  5. Validate Document Update Function
&lt;/h3&gt;

&lt;p&gt;As named, you can define validation rules in this function to validate the document when you post into CouchDB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"validate_doc_update": "function(newDoc, oldDoc, userCtx, secObj) { /* function code here */ }",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-language"&gt;
  &lt;/a&gt;
  6. Language
&lt;/h3&gt;

&lt;p&gt;Language property is telling CouchDB which programming language query server of this design document belongs to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"language": "javascript"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I wont dive deep on &lt;em&gt;Update function&lt;/em&gt;, &lt;em&gt;Filter function&lt;/em&gt; and &lt;em&gt;Validate document function&lt;/em&gt; as our focus today is view function. If you are interested, you may leave a message below let me knowüòâ, then I can share a post about how to use update functions too.&lt;/p&gt;




&lt;p&gt;‚úàBack to Viewsüõ¨&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-views"&gt;
  &lt;/a&gt;
  What is Views?
&lt;/h2&gt;

&lt;p&gt;View in Apache CouchDB actually is a little bit similar to normal SQL database view.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A database view is a subset of a database and is based on a query that runs on one or more database tables. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The difference is CouchDB view is based on Map Reduce.&lt;/p&gt;

&lt;p&gt;As example design document above, we can see that actually view function consists of 2 property keys (map &amp;amp; reduce), one is &lt;em&gt;&lt;strong&gt;map function&lt;/strong&gt;&lt;/em&gt;, another one is &lt;em&gt;&lt;strong&gt;reduce function&lt;/strong&gt;&lt;/em&gt;. (Reduce function is Optional)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-map-function"&gt;
  &lt;/a&gt;
  1. Map function üîç
&lt;/h3&gt;

&lt;p&gt;Map functions accept a single document as the argument and (optionally) emit() key/value pairs that are stored in a view.&lt;/p&gt;

&lt;p&gt;Let's say we have a list of blog post documents saved in our CouchDB database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  {
    _id: "c2ec3b79-d9ac-45a8-8c68-0f05cb3adfac",
    title: "Post One Title",
    content: "Post one content.",
    author: "John Doe",
    status: "submitted",
    date: "2021-10-30T14:57:05.547Z",
    type: "post"
  },
  {
    _id: "ea885d7d-7af2-4858-b7bf-6fd01bcd4544",
    title: "Post Two Title",
    content: "Post two content.",
    author: "Jane Doe",
    status: "draft",
    date: "2021-09-29T08:37:05.547Z",
    type: "post"
  },
  {
    _id: "4a2348ca-f27c-427f-a490-e29f2a64fdf2",
    title: "Post Three Title",
    content: "Post three content.",
    author: "John Doe",
    status: "submitted",
    date: "2021-08-02T05:31:05.547Z",
    type: "post"
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to query posts by status, we can create a javascript &lt;em&gt;map&lt;/em&gt; function as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function (document) {
  emit(document.status, document);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiKa6Zy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhbsadr1s8eqjtd3v7tm.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiKa6Zy5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhbsadr1s8eqjtd3v7tm.JPG" alt="Key Value Show" width="674" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the whole design document will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "_id": "_design/posts",
    "views": {
        "byStatus": {
            "map": "function (document) { emit(document.status, document); }"
        }
    },
    "language": "javascript"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we saved this design document into CouchDB, CouchDB will start building the view. That's it, we have create a CouchDB view successfully.üéâü•≥&lt;/p&gt;

&lt;p&gt;To use the view, just send a GET method http request with the url below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://{YOUR_COUCHDB_HOST}:5984/{YOUR_DATABASE_NAME}/_design/posts/_view/byStatus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rt4tLU2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1re6zreifk1b6swuocv.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rt4tLU2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1re6zreifk1b6swuocv.JPG" alt="Result One" width="625" height="874"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to get all the posts with status "draft", then we call the http request with parameters key="draft", it will return us all the posts with status "draft" only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://{YOUR_COUCHDB_HOST}:5984/{YOUR_DATABASE_NAME}/_design/posts/_view/byStatus?key="draft"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7M2cbfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwrv2eom0bani2g9rrm9.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7M2cbfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwrv2eom0bani2g9rrm9.JPG" alt="Result Two" width="471" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let say another map function emit document by date:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function (document) {
  emit(document.date, document);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can query blog posts by date range.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://{YOUR_COUCHDB_HOST}:5984/{YOUR_DATABASE_NAME}/_design/posts/_view/byDate?startkey=""&amp;amp;endkey="2021-09-29\uffff"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---tTTumlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osm3wtmnhym1avx9pi26.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---tTTumlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/osm3wtmnhym1avx9pi26.JPG" alt="Result Date Range" width="511" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As query above, I defined a start date via &lt;em&gt;startkey&lt;/em&gt; and end date via &lt;em&gt;endkey&lt;/em&gt; , then CouchDB will return we the posts within the startkey and endkey. However my startkey is empty string, meaning that I don't care about start date, just give me the first post document until the date of the endkey.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tips: If you want to reverse the return result, you can just add a parameter "descending=true"&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#2-reducerereduce-%E2%9C%82"&gt;
  &lt;/a&gt;
  2. Reduce/Rereduce ‚úÇ
&lt;/h3&gt;

&lt;p&gt;Reduce function is optional to a view, it is based on the map function result then you can perform SUM, COUNT or custom logic with to filter or derive into any desire result.&lt;/p&gt;

&lt;p&gt;Let's say we have a map result shows (month, expenses):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function (document) {
  emit(document.month, document.expenses);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hwb_36vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqrchmdb40fbs792lh62.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hwb_36vO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqrchmdb40fbs792lh62.JPG" alt="Result Month" width="555" height="868"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to get february expenses only, then we will put a parameter &lt;em&gt;&lt;strong&gt;key="february"&lt;/strong&gt;&lt;/em&gt;, then it will return us february expenses only. &lt;br&gt;
Based on the map result, we can add a reduce function to help us to sum the february expenses amount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function(keys, values, rereduce) {
  return sum(values);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result for &lt;em&gt;&lt;strong&gt;key="february"&lt;/strong&gt;&lt;/em&gt; after reduce :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycqWIO2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2uihbjq0o3naih9wuvv.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycqWIO2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2uihbjq0o3naih9wuvv.JPG" alt="Result Reduce" width="300" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it. We can instantly get the sum result no matter how many documents you have in the database. This is the power of Map Reduce. You can even rereduce, meaning perform second time reduce logic based on the first reduce result. For more detail, you may check out the official documentation &lt;a href="https://docs.couchdb.org/en/latest/ddocs/views/intro.html"&gt;here&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;CouchDB views is very powerful, flexible and super fast to query a result like Hadoop. However, CouchDB only supports one layer map reduce derivation. If you do not understand what is Map Reduce, you may check out this &lt;a href="https://www.youtube.com/watch?v=43fqzaSH0CQ&amp;amp;ab_channel=internet-class"&gt;Youtube video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for your reading.üòä&lt;/p&gt;

</description>
      <category>database</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Fixing my everyday errors!!</title>
      <author>Deeksha</author>
      <pubDate>Sat, 30 Oct 2021 16:59:33 +0000</pubDate>
      <link>https://dev.to/deek9399/fixing-my-everyday-errors-1bol</link>
      <guid>https://dev.to/deek9399/fixing-my-everyday-errors-1bol</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-how-do-i-kill-a-process-currently-using-a-port-on-localhost"&gt;
  &lt;/a&gt;
  1. How do I kill a process currently using a port on localhost?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;npx kill-port 8001&lt;/code&gt;&lt;br&gt;
Expected output: Process on port 8001 killed &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-using-import-in-serverjs"&gt;
  &lt;/a&gt;
  2. Using import in server.js
&lt;/h3&gt;

&lt;p&gt;Inside package.json add&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-sh-reactscripts-command-not-found-after-running-npm-start"&gt;
  &lt;/a&gt;
  3. sh: react-scripts: command not found after running npm start
&lt;/h3&gt;

&lt;p&gt;run &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;yarn add&lt;/code&gt;&lt;br&gt;
üí° &lt;a href="https://stackoverflow.com/questions/40546231/sh-react-scripts-command-not-found-after-running-npm-start"&gt;stack-overflow&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-axios-baseurl"&gt;
  &lt;/a&gt;
  4. axios baseURL
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Set config defaults when creating the instance&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#5-heroku-raw-error-code-h10-endraw-"&gt;
  &lt;/a&gt;
  5. Heroku &lt;code&gt;error code = H10&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Heroku dynamically sets the PORT, which can be accessed with &lt;code&gt;process.env.PORT&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>linux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Git Bulk Delete Branches Example</title>
      <author>Erik Smith</author>
      <pubDate>Sat, 30 Oct 2021 16:43:49 +0000</pubDate>
      <link>https://dev.to/365erik/git-bulk-delete-branches-example-23g6</link>
      <guid>https://dev.to/365erik/git-bulk-delete-branches-example-23g6</guid>
      <description>&lt;p&gt;In this example we want to delete all branches from our local git repo that begin with &lt;code&gt;fix/&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Identify all branches in a github repo that start with &lt;code&gt;fix/&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;--list&lt;/span&gt; &lt;span class="s2"&gt;"fix/*"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a list of branches matching the glob pattern, provided there are any.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  fix/debug-console-error
  fix/dropcase-first-letter
  fix/font-size
  fix/off-by-one
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;If this list of branches looks correct, you can delete them all by piping it to &lt;code&gt;xargs git branch -d&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;--list&lt;/span&gt; &lt;span class="s2"&gt;"fix/*"&lt;/span&gt; | xargs git branch &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might see some errors like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;error: The branch &lt;span class="s1"&gt;'fix/off-by-one'&lt;/span&gt; is not fully merged.
If you are sure you want to delete it, run &lt;span class="s1"&gt;'git branch -D fix/off-by-one'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets you know that your "main" (or the currently checked out branch) does not have all commits from the &lt;code&gt;fix/off-by-one&lt;/code&gt; branch you are trying to delete. If you delete the branch, you will lose those changes and any history associated with them. If you feel losing that information is fine for your needs, you can run &lt;code&gt;xargs&lt;/code&gt; again, this time passing the &lt;code&gt;-D&lt;/code&gt; flag to &lt;code&gt;git&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;--list&lt;/span&gt; &lt;span class="s2"&gt;"fix/*"&lt;/span&gt; | xargs git branch &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Once more listing the branches beginning with &lt;code&gt;fix/&lt;/code&gt; should no longer return any results.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;--list&lt;/span&gt; &lt;span class="s2"&gt;"fix/*"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>git</category>
      <category>xargs</category>
    </item>
    <item>
      <title>Fauna and FQL for Firestore users</title>
      <author>AsyncBanana</author>
      <pubDate>Sat, 30 Oct 2021 16:42:22 +0000</pubDate>
      <link>https://dev.to/asyncbanana/fauna-and-fql-for-firestore-users-4ch3</link>
      <guid>https://dev.to/asyncbanana/fauna-and-fql-for-firestore-users-4ch3</guid>
      <description>&lt;p&gt;Fauna and Firestore are very similar databases, both offering instant scalability and fairly easy ways of querying, but there are still some key differences. In this article we will look at those differences and how to migrate from Firestore to Fauna and Fauna‚Äôs query language (FQL). You might want to migrate because of Fauna‚Äôs querying language, flexibility, or multi region capabilities. Even if you don‚Äôt know whether you want to migrate yet, this article will provide some information on the differences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/firestore/"&gt;Firestore&lt;/a&gt; is a database created by Google in 2017. It is the successor to the two previous databases, Firebase Realtime DB and Cloud Datastore. It is grouped within the Firebase category group, offering integration with different Firebase services, although it is also offered through Google Cloud. Firestore‚Äôs primary selling points are that it is easy to use, even without a server, and has real-time capabilities. It also offers simple pricing based on reads, data storage, and writes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSZMbapc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l74bsdgo3rfv4jkcrvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSZMbapc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l74bsdgo3rfv4jkcrvk.png" alt="Firestore Logo" width="880" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fauna.com"&gt;Fauna&lt;/a&gt; is a database developed in 2012 by a few ex-Twitter engineers to solve scalability problems with existing NoSQL databases. Fauna offers a simple query language called FQL, along with a GraphQL service if you do not want to learn another query language. Fauna also can be used easily without a backend and is focused on doing that while remaining as scalable as possible.&lt;br&gt;
Firestore and Fauna have a number of similar features and a few key differences. They both abstract over cloud machines to provide a simple way of using them and even abstract over cross region replication. They also both offer client side SDK‚Äôs and real-time capabilities. Their query languages are a bit different, as Fauna has a more comprehensive setup that allows you to do certain computations on the database through their query language. This can increase speeds by mitigating the need for round trip queries. Firestore‚Äôs query language primarily consists of CRUD functions. Another key difference is that Fauna is more flexible with querying capabilities and scalability. Now that you know the background of each database and how they differ, let's go more in depth.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#query-language"&gt;
  &lt;/a&gt;
  Query Language
&lt;/h3&gt;

&lt;p&gt;Now that we‚Äôve highlighted a few differences in the query languages, let‚Äôs look more closely at those differences. With Firestore, there are two different styles of querying data, function chaining and data passing via parameters. Before the V9 update, Firestore‚Äôs SDK primarily used function chaining. For example, a basic read query might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cities&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SF&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above accesses the main database object, then the collection and document by chaining the method functions. That is still how it works if you use the server side SDK. However, in a more recent version of the client-side web SDK, there is a way to query by passing options as parameters instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fauna only has one universal SDK and one querying style, which resembles a more powerful version of the Firestore V9 SDK. To perform operations you nest different functions within other functions. For example, to read a document you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each function is namespaced under &lt;code&gt;q&lt;/code&gt;. There are many more than just the ones used in that example. For a full list, you can look at &lt;a href="https://docs.fauna.com/fauna/current/api/fql/cheat_sheet"&gt;Fauna‚Äôs cheat sheet&lt;/a&gt;. Fauna also provides a GraphQL API as mentioned before, but I will not go over that for brevity.&lt;br&gt;
Both query languages are pretty easy to use and you can do most things you need with both, although Fauna‚Äôs offers more ways of running things on the database to prevent roundtrips.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#indexes"&gt;
  &lt;/a&gt;
  Indexes
&lt;/h3&gt;

&lt;p&gt;Indexes are one place where Firestore and Fauna differ quite a bit. Firestore opts for an approach where it automatically creates indexes for all fields in a document, and allows for querying using those indexes under the hood without worrying about them. For indexes that include multiple fields, you have to manually create a compound query. This approach makes it easy to query but can end up costing the user more, as Firestore creates indexes even when they are not needed, which takes more storage space.&lt;br&gt;
In contrast, Fauna makes you manually create indexes, although it offers an easy to use dashboard and FQL function for creating indexes. Fauna also offers more capabilities for indexes, like cross collection indexes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#transactions-amp-consistency"&gt;
  &lt;/a&gt;
  Transactions &amp;amp; Consistency
&lt;/h3&gt;

&lt;p&gt;Both Firestore and Fauna offer strongly consistent database operations. Fauna uses Calvin, which allows it to replicate data globally with strong consistency. Firestore does not use as advanced of a replication system, although it still does offer strong consistency. The biggest difference for consistent transactions is that as mentioned before, Fauna allows you to do more things on the database directly. This makes it so that you can reduce time when data could change in the process of your server responding to data. So Fauna is definitely better in this case in terms of reliably running consistent transactions out of the box, but both work fairly well in this case.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h3&gt;

&lt;p&gt;Pricing for Firestore and Fauna are similar in some ways, but very different in others. They both price by reads, writes, and storage, although Fauna also prices compute operations, which are operations done on their servers. Both offer free tiers, so you can try either without paying anything.&lt;br&gt;
Firestore costs pricing varies based on the region you are using. For a typical single region configuration, Firestore costs $0.36 per million documents read, $1.08 per million documents written to, and $0.108 per gigabyte of storage. For a multi region configuration, Firestore costs $0.6 per million documents read, $1.80 per million documents written to, and $0.18 per gigabyte of storage.&lt;br&gt;
Because Fauna is global by default, it has more consistent pricing, although Fauna multiplies all costs by 1.2x if you are storing all data in Europe and 1.1x if you are storing some in Europe. Fauna costs $0.45 per million documents read, $2.25 per million documents written to, $2.03 per million compute operations, and $0.23 per gigabyte of storage.&lt;br&gt;
As you can see from above, their costs are fairly close. Fauna can be more expensive on the surface level, but it is only sometimes more expensive. This is because Fauna offers features like built in compression and often cheaper querying. Ultimately you will need to do more research based on your own needs to figure out which is cheaper.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#limits"&gt;
  &lt;/a&gt;
  Limits
&lt;/h3&gt;

&lt;p&gt;Both databases have some limits for throughput and size. For Firestore, there are multiple limits on documents. One is that documents must be 1 megabyte or less, and can not be changed more than once per second. Another is that no more than 10,000 write operations can be executed on the database per second, and those write operations cannot collectively contain more than 10 megabytes of data. Also, nested data in document maps have a max depth of 20, although you can get around that by turning it into a JSON string. There are many other limits shown on their Limits page, but those are the most relevant for most people. Fauna also has limits, albeit less. Document sizes are capped at 8 megabytes, transaction sizes are capped at 16 megabytes, and index entries have to stay below 64,000 bytes. For more information, you can look at their Limits page.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#comparison-conclusion"&gt;
  &lt;/a&gt;
  Comparison Conclusion
&lt;/h3&gt;

&lt;p&gt;Fauna and Firestore are very related in many ways, but differ importantly in others. Both are easy to use, although Fauna can be more powerful. If you have previously used Firestore and are interested in Fauna, read on for an intro to FQL (Fauna Query Language) designed for previous Firestore users.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#intro-to-fql-from-firestore"&gt;
  &lt;/a&gt;
  Intro to FQL from Firestore
&lt;/h2&gt;

&lt;p&gt;As you saw in the query language section of the comparison, there can be quite a few differences between the two database's way of querying, especially if you are used to the used to the function chaining Firestore SDK. Luckily, FQL is fairly intuitive, so you should not have much trouble learning it. A basic FQL query is just &lt;code&gt;db.query()&lt;/code&gt; with nothing passed to it. To do things with queries, you pass different functions to the query function, like &lt;code&gt;q.Get&lt;/code&gt; or &lt;code&gt;q.Create&lt;/code&gt;, and to pass the right information to those operations like what document, you nest functions like &lt;code&gt;q.Ref&lt;/code&gt; and &lt;code&gt;q.Collection&lt;/code&gt;. This might sound verbose for someone used to someone used to Firestore‚Äôs way of just running &lt;code&gt;.get()&lt;/code&gt; on a document, but it can be more elegant, and you can do more.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-documents"&gt;
  &lt;/a&gt;
  Creating Documents
&lt;/h3&gt;

&lt;p&gt;Fauna offers a function &lt;code&gt;q.Create&lt;/code&gt; that allows for creating documents like Firestore‚Äôs &lt;code&gt;add&lt;/code&gt; function. You simple pass a collection and data and it will return a reference to the new document as well as the new document‚Äôs data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;       
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fieldValue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;     
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Get reference to result&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Get new result data&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;equivalent&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Firestore&lt;/span&gt; &lt;span class="nx"&gt;would&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;addDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fieldValue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// Get reference to result&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works for creating a document without specifying an ID, but you can also update an existing document by using &lt;code&gt;q.Ref&lt;/code&gt; with a collection and id instead of &lt;code&gt;q.Collection&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-documents"&gt;
  &lt;/a&gt;
  Getting Documents
&lt;/h3&gt;

&lt;p&gt;This is pretty simple to implement if you just are getting a document by ID and collection name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
&lt;span class="nx"&gt;As&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;contains&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="nx"&gt;passed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;equivalent&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;or&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#settingupdating-documents"&gt;
  &lt;/a&gt;
  Setting/Updating Documents
&lt;/h3&gt;

&lt;p&gt;Fauna offers two built in methods for this, &lt;code&gt;q.Replace&lt;/code&gt; for destructive replacing and &lt;code&gt;q.Update&lt;/code&gt; for updating specific fields without changing the whole document. This equates to the Firestore &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;        
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fieldValue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;still bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;        
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;still bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is equivalent to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// v8 web or Node&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fieldValue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;still bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;still bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// v9 web&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;setDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fieldValue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;still bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;updateDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;still bananas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Currently if you want to emulate the behavior of set with merge: true which creates a document if it does not exist yet, you can use run a query that checks if a document exists and creates it if it does not using &lt;code&gt;q.If&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deleting-documents"&gt;
  &lt;/a&gt;
  Deleting Documents
&lt;/h3&gt;

&lt;p&gt;Deleting a document with Fauna is just like getting a document, but with &lt;code&gt;q.Delete&lt;/code&gt; instead of &lt;code&gt;q.Get&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;equates&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;
&lt;span class="c1"&gt;// v8 web or node&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// v9 web&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;updateDoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;collectionName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;documentName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Fauna is a great alternative to Firestore with a more powerful query API and other advantages. They are very similar databases, and it is easy to migrate to Fauna from Firestore. I hope this article has enlightened you on the differences between Fauna and Firestore, as well as how FQL code translates to Firestore code, and thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>firebase</category>
      <category>database</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Usage of Consul in .NET Core - Configuration Management</title>
      <author>Engincan VESKE</author>
      <pubDate>Sat, 30 Oct 2021 16:11:31 +0000</pubDate>
      <link>https://dev.to/engincanv/usage-of-consul-in-net-core-configuration-management-39h5</link>
      <guid>https://dev.to/engincanv/usage-of-consul-in-net-core-configuration-management-39h5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OTZRs2cZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s9ej311bsktsin0xmsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OTZRs2cZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s9ej311bsktsin0xmsm.png" alt="Consul" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;In this article, I would like to talk about the &lt;strong&gt;Consul&lt;/strong&gt; tool, which enables us to change/manage our settings on the .NET Core side from a central point, via the UI. Firstly, let's start by talking about what &lt;strong&gt;Consul&lt;/strong&gt; is and what advantages does it provide for us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-consul"&gt;
  &lt;/a&gt;
  What is Consul?
&lt;/h2&gt;

&lt;p&gt;Before talking about what &lt;strong&gt;Consul&lt;/strong&gt; is and the advantages/conveniences it provides for us, in an application; Let's review the resources where we can keep our application-based settings. &lt;/p&gt;

&lt;p&gt;Let's have a look at where we can store/keep application-based settings: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-)&lt;/strong&gt; In application settings (appsettings.json, appsettings.development.json, environment variables etc.),&lt;br&gt;
&lt;strong&gt;2-)&lt;/strong&gt; In the database,&lt;br&gt;
&lt;strong&gt;3-)&lt;/strong&gt; In a key-value store (Consul comes into play here) &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Keeping our relevant data in a file like &lt;strong&gt;appsettings.json&lt;/strong&gt; will not cause any performance disadvantage for us. By simply storing the relevant settings as key-values in the relevant file, we can then perform the operations on the basis of the relevant settings. However, if this is the case, we will not be able to simply manage these settings via the UI. In addition, each developer will have to commit this in the relevant setting change. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When we look at the database option, there is a loss of performance since the relevant setting will be fetched from the database each time and an action will be taken accordingly. Of course, at this point, this performance problem can be improved by using the &lt;strong&gt;cache mechanism&lt;/strong&gt;, but we can say that the effort we spend will increase because if a setting is changed, the &lt;strong&gt;cache invalidation&lt;/strong&gt; situation will come into play.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If we consider the option of keeping our settings in a &lt;strong&gt;key-value store&lt;/strong&gt;, which is another method, we can use the pub/sub pattern to load the relevant changes in the application runtime, and in this way, we can dynamically access the relevant settings for each change without having to deal with &lt;strong&gt;cache invalidation&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we evaluate our options here, we can see that keeping our settings in the key-value store makes our work easier and allows us to provide a centralized settings management. At this point, we can use Consul as the key-value store option. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Consul&lt;/strong&gt; acts as a &lt;strong&gt;distributed key-value store&lt;/strong&gt; for us, a choice where we can keep our application settings in a central place and use them easily within the application. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#usage-of-consul-in-net-core-application"&gt;
  &lt;/a&gt;
  Usage of Consul in .NET Core Application
&lt;/h2&gt;

&lt;p&gt;After talking about what Consul is and what advantages it provides for us, we can now create a simple .NET Core Web API project and move on to its use. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the source code of the application at &lt;a href="https://github.com/EngincanV/Asp.Net-Core-Consul-Demo"&gt;https://github.com/EngincanV/Asp.Net-Core-Consul-Demo&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Firstly, let's run our Consul application on Docker. We can use the following command for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8500:8500 &lt;span class="nt"&gt;-p&lt;/span&gt; 8600:8600/udp &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;my-consul consul agent &lt;span class="nt"&gt;-server&lt;/span&gt; &lt;span class="nt"&gt;-ui&lt;/span&gt; &lt;span class="nt"&gt;-node&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;server-1 &lt;span class="nt"&gt;-bootstrap-expect&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nt"&gt;-client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.0.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command, if you navigate to &lt;a href="http://localhost:8500"&gt;http://localhost:8500&lt;/a&gt;, you should see an image similar to the photo below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XDtomyf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy3h5680qimx4g5rf8zk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDtomyf5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oy3h5680qimx4g5rf8zk.png" alt="consul-ui" width="875" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we are running our Consul application via Docker, we can create a simple Web API project. If you want to create it via CLI, you can create a Web API project with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new webapi &lt;span class="nt"&gt;--name&lt;/span&gt; Consul.Demo &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating our application, we need to install the Consul package on our application via Nuget. You can add the relevant package to the Web API project with the following command via the CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet add package Consul &lt;span class="nt"&gt;--version&lt;/span&gt; 1.6.10.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding the relevant package, we now need to make the necessary configurations so that we can use the settings we defined on Consul (which we will define in the next step) in our application.&lt;/p&gt;

&lt;p&gt;Firstly, let's create a folder named &lt;strong&gt;Extensions&lt;/strong&gt; and add the following codes by creating a class named &lt;strong&gt;ServiceCollectionExtensions.cs&lt;/strong&gt; in this folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Consul.Demo.Extensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ServiceCollectionExtensions&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="nf"&gt;AddConsulConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IServiceCollection&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;configKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentNullException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;nameof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddSingleton&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IConsulClient&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;consul&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ConsulClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consulConfig&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;consulConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}));&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, &lt;strong&gt;Startup.cs&lt;/strong&gt; or &lt;strong&gt;Program.cs&lt;/strong&gt; (Since I created the project with .NET 6, there is no &lt;strong&gt;Startup.cs&lt;/strong&gt; class and all settings are provided through this class, if you have created a .NET 6 project, you can add the following codes to this class), let's open our file and provide the relevant configurations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Consul.Demo.Extensions&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WebApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;consulHost&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"http://localhost:8500"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddConsulConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;configKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consulHost&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddControllers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After completing the relevant configuration, let's create a simple provider class and write a method that returns the type of value we want according to the key value we passed to the method. For this, let's create a folder named &lt;strong&gt;Helpers&lt;/strong&gt;, add a class called &lt;strong&gt;ConsulKeyValueProvider&lt;/strong&gt; and fill this class with the following codes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text.Json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Consul.Demo.Helpers&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConsulKeyValueProvider&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetValueAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ConsulClient&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;getPair&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getPair&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getPair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JsonSerializer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Deserialize&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here, thanks to the &lt;strong&gt;ConsulClient&lt;/strong&gt; class, we have created a simple method by communicating with the &lt;strong&gt;Consul&lt;/strong&gt; (working at &lt;a href="http://localhost:8500"&gt;http://localhost:8500&lt;/a&gt;) where we can get the value we want according to the key. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's navigate to &lt;a href="http://localhost:8500"&gt;http://localhost:8500&lt;/a&gt;, select the &lt;strong&gt;Key/Value&lt;/strong&gt; section, and then create a key-value from there and test our method. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CJ8eo65T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbsv1b6v6lavgtx6b4my.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJ8eo65T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbsv1b6v6lavgtx6b4my.png" alt="Image description" width="880" height="234"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8HLyfhu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2iv8i98orq75dvgy3u6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8HLyfhu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2iv8i98orq75dvgy3u6u.png" alt="Image description" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I created a key named &lt;strong&gt;ConsulDemoKey&lt;/strong&gt; and assigned several values (IsEnabled, ShowMessage and Message) as in the photo above. Now, in my .NET Core application, I need to be able to reach these values by giving the &lt;strong&gt;ConsulDemoKey&lt;/strong&gt; key to the helper method that we've created in the previous step. To test this in practice, let's open the &lt;strong&gt;WeatherForecastController&lt;/strong&gt; class under the &lt;strong&gt;Controllers&lt;/strong&gt; folder and update the &lt;strong&gt;Get&lt;/strong&gt; method as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Consul.Demo.Helpers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Consul.Demo.Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Consul.Demo.Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[controller]"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WeatherForecastController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ControllerBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;HttpGet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"GetWeatherForecast"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;consulDemoKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;ConsulKeyValueProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetValueAsync&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ConsulDemoKey&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"ConsulDemoKey"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consulDemoKey&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;consulDemoKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsEnabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consulDemoKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ConsulDemoKey is null"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If we examine the code here, we can see that there is a class named &lt;strong&gt;ConsulDemoKey&lt;/strong&gt;. While assigning a value in terms of key-value on the Consul, we can create a class to match (map) the relevant values, since we define value as json. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can define the &lt;strong&gt;ConsulDemoKey&lt;/strong&gt; class under the &lt;strong&gt;Models&lt;/strong&gt; folder as follows.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Consul.Demo.Models&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConsulDemoKey&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;IsEnabled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;ShowMessage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have completed everything we want to do, we can now run the application and see the result. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LHQgtfNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p64dzogocn3v0y732dzx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LHQgtfNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p64dzogocn3v0y732dzx.png" alt="result" width="875" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we run our application and send a request to the &lt;strong&gt;/WeatherForecast&lt;/strong&gt; route, the relevant values are read from &lt;strong&gt;Consul&lt;/strong&gt; and printed on the screen as we expected.&lt;/p&gt;

&lt;p&gt;Here, without closing our application, if we change a relevant value via &lt;strong&gt;Consul&lt;/strong&gt; (For example: We can change the Message to "Dynamic Configuration with Consul"), we can see that the relevant change is reflected on the screen dynamically. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYppomAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dleg53akny7abemtkzin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYppomAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dleg53akny7abemtkzin.png" alt="Image description" width="875" height="485"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thank you for reading my article. See you in my next post. &lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>consul</category>
      <category>csharp</category>
      <category>configuration</category>
    </item>
  </channel>
</rss>
