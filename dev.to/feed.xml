<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is CDN?</title>
      <author>Bibek</author>
      <pubDate>Tue, 29 Jun 2021 19:51:05 +0000</pubDate>
      <link>https://dev.to/bibekkakati/what-is-cdn-1pm2</link>
      <guid>https://dev.to/bibekkakati/what-is-cdn-1pm2</guid>
      <description>&lt;p&gt;CDN stands for &lt;strong&gt;Content Delivery Network&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;A CDN is a system of multiple servers distributed geographically which works together to provide fast delivery of Internet content like HTML pages, javascript files, stylesheets, videos and images etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNWiciVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7mv223001hzzx2n6ox1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNWiciVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7mv223001hzzx2n6ox1.png" alt="CDN Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-we-need-cdn"&gt;
  &lt;/a&gt;
  Why do we need CDN?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It reduces latency, thus it improves the website load time. Since the contents are distributed globally, the distance between clients and the content also gets reduced, resulting in faster access to the content.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Minimize downtime and increases availability due to their distributed nature.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improves website security by providing DDoS mitigation and using secured and updated  SSL/TLS certificates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also helps in reducing bandwidth consumption costs of the origin server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally published on &lt;a href="https://blog.bibekkakati.me/what-is-cdn"&gt;blog.bibekkakati.me&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you for reading üôè&lt;/p&gt;

&lt;p&gt;If you enjoyed this article or found it helpful, give it a thumbs-up üëç&lt;/p&gt;

&lt;p&gt;Feel free to connect üëã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kakatibibek"&gt;Twitter&lt;/a&gt; | &lt;a href="https://instagram.com/bibekkakati"&gt;Instagram&lt;/a&gt; | &lt;a href="https://linkedin.com/in/bibekkakati"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like my work and want to support it, you can do it here. I will really appreciate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/bibekkakati"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAlyWXzp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dbibekkakati%26button_colour%3DFF5F5F%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cdn</category>
      <category>cache</category>
      <category>webdev</category>
      <category>server</category>
    </item>
    <item>
      <title>TIL: Colorful test output in Go </title>
      <author>jonasbn</author>
      <pubDate>Tue, 29 Jun 2021 19:23:21 +0000</pubDate>
      <link>https://dev.to/jonasbn/til-colorful-test-output-in-go-3k86</link>
      <guid>https://dev.to/jonasbn/til-colorful-test-output-in-go-3k86</guid>
      <description>&lt;p&gt;The standard command line use when testing go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Colors your test output according to your terminal configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rakyll"&gt;@rakyll&lt;/a&gt; has implemented a cool tool &lt;a href="https://github.com/rakyll/gotest"&gt;&lt;code&gt;gotest&lt;/code&gt;&lt;/a&gt; for coloring your test output, so you have passing tests colored green, failing tests marked red etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gotest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can customize the colors for failing tests and passing tests via environment variables using the palette of your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;GOTEST_PALETTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"red,green"&lt;/span&gt; gotest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first color being for failures and the second one being for passes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXTune-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uml40omxvnwfrfqvwwxg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXTune-Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uml40omxvnwfrfqvwwxg.png" alt="Colorful terminal test output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To find the colors in for example &lt;strong&gt;iTerm.app&lt;/strong&gt; open the Preferences, your profile and the color tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0wov_FX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm9zyk5m9fg4p3wbqhcm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0wov_FX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qm9zyk5m9fg4p3wbqhcm.png" alt="iTerm preferences"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the names for the colors in the environment variables&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-and-references"&gt;
  &lt;/a&gt;
  Resources and References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/rakyll/gotest"&gt;GitHub: rakyll/gotest&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was lifted from &lt;a href="http://jonasbn.github.io/til/"&gt;my TIL collection&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>todayilearned</category>
      <category>gotest</category>
    </item>
    <item>
      <title>üé¨Animated Sidebar Menu with HTML &amp; CSS‚ú®</title>
      <author>Robson Muniz</author>
      <pubDate>Tue, 29 Jun 2021 19:18:46 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/animated-sidebar-menu-with-html-css-5d9a</link>
      <guid>https://dev.to/robsonmuniz16/animated-sidebar-menu-with-html-css-5d9a</guid>
      <description>&lt;p&gt;Hey Devs n this video you will learn how to create an Animated Sidebar Menu with HTML &amp;amp; CSS (No JavaScript).&lt;br&gt;
 We'll walk you through step-by-step on how to create it and how to add it to your websites. &lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QPZrQ_xPVs4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#other-amazing-projects"&gt;
  &lt;/a&gt;
  üèÜ &lt;strong&gt;Other Amazing Projects&lt;/strong&gt; üèÜ
&lt;/h2&gt;




&lt;p&gt;üé¨Login &amp;amp; Registration Form Using HTML &amp;amp; CSS &amp;amp; JS&lt;br&gt;
‚û§&lt;a href="https://youtu.be/I5_T547tHf0"&gt;https://youtu.be/I5_T547tHf0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üé¨Neumorphism Login Form | HTML &amp;amp; CSS &lt;br&gt;
‚û§&lt;a href="https://youtu.be/QWh0S-3D7uY"&gt;https://youtu.be/QWh0S-3D7uY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üé¨Amazing Social Media Buttons Hover Effects | HTML &amp;amp; CSS &lt;br&gt;
‚û§ &lt;a href="https://youtu.be/P9pi4hq7BBA"&gt;https://youtu.be/P9pi4hq7BBA&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;üé¨Animated Login Form | HTML, CSS &amp;amp; JavaScript &lt;br&gt;
‚û§ Watch: &lt;a href="https://youtu.be/ogNwc45qHKo"&gt;https://youtu.be/ogNwc45qHKo&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;üé¨Slider Sign In / Sign Up Form | HTML CSS Vanilla JS &lt;br&gt;
‚û§ Watch: &lt;a href="https://youtu.be/Wz5THk0-Y1s"&gt;https://youtu.be/Wz5THk0-Y1s&lt;/a&gt; &lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TIL: Skipping Tests in Go</title>
      <author>jonasbn</author>
      <pubDate>Tue, 29 Jun 2021 18:55:01 +0000</pubDate>
      <link>https://dev.to/jonasbn/til-skipping-tests-in-go-3i5l</link>
      <guid>https://dev.to/jonasbn/til-skipping-tests-in-go-3i5l</guid>
      <description>&lt;p&gt;The Go testing framework and toolchain has a nifty facility, where you can skip tests, if you do not want them to be a part of every run.&lt;/p&gt;

&lt;p&gt;Let say we have a basic implementation&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;shorttest&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;DoUnimportantStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doing unimportant stuff"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;DoImportantStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Doing important stuff"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have a corresponding test suite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;shorttest&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"testing"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestImportant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;DoImportantStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Important stuff not correct, needed %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestUnimportant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Short&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"skipping test in short mode."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;DoUnimportantStuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Errorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unimportant stuff not correct, needed %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we are developing and want fast feedback, we do not want to wait for the long running and unimportant test to finish, but we are VERY interested in getting feedback on our important function as fast as possible.&lt;/p&gt;

&lt;p&gt;When we just test we will observe waiting time&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go &lt;span class="nb"&gt;test
&lt;/span&gt;Doing important stuff
Doing unimportant stuff
PASS
ok      shorttest   10.364s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then skip the execution of the unimportant tests by executing our test suite with the &lt;code&gt;--short&lt;/code&gt; flag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;‚ùØ go &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="nt"&gt;--short&lt;/span&gt;
Doing important stuff
PASS
ok      shorttest   0.116s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just have to remember to add the handling of &lt;code&gt;--short&lt;/code&gt; via &lt;code&gt;testing.Short()&lt;/code&gt; in the non-critical and long running tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-and-references"&gt;
  &lt;/a&gt;
  Resources and References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://golang.org/cmd/go/#hdr-Testing_flags"&gt;Go Command: Testing Flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/pkg/testing/#hdr-Skipping"&gt;Go Package testing: Skipping&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lifted from &lt;a href="http://jonasbn.github.io/til/"&gt;my TIL collection&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>todayilearned</category>
      <category>testing</category>
    </item>
    <item>
      <title>GitHub Pull Requests with Screenshots Tip</title>
      <author>Matthew McGarvey</author>
      <pubDate>Tue, 29 Jun 2021 18:51:10 +0000</pubDate>
      <link>https://dev.to/matthewmcgarvey/github-pull-requests-with-screenshots-tip-1cbb</link>
      <guid>https://dev.to/matthewmcgarvey/github-pull-requests-with-screenshots-tip-1cbb</guid>
      <description>&lt;p&gt;When you're making a pull request in GitHub and want to include screenshots in the description, you might be tempted to just throw the screenshots in with headings. I urge you, though, not to do that! Those screenshots take up a lot of room and there is a better way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dropdowns"&gt;
  &lt;/a&gt;
  Dropdowns
&lt;/h2&gt;

&lt;p&gt;Dropdowns are truly the better way to add images to pull requests. By default they can be ignored and can be expanded if you want to look at them.&lt;/p&gt;

&lt;p&gt;Here's a picture of a pull request description without using dropdowns. Notice how much room is taken up. I had to zoom out to 60% just to get it all on my screen!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFRw2O1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyh8l0td0anndd1hgjl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFRw2O1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyh8l0td0anndd1hgjl2.png" alt="PR description without dropdowns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now here's a picture using dropdowns. It's so much simpler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRoaSe11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfrkc4s7zsrqy05436ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRoaSe11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfrkc4s7zsrqy05436ff.png" alt="PR description with dropdowns"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;I used to always google "github markdown dropdown" and used &lt;a href="https://gist.github.com/citrusui/07978f14b11adada364ff901e27c7f61"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They are created using markdown like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;How do I dropdown?&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
This is how you dropdown.
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#saved-replies"&gt;
  &lt;/a&gt;
  Saved Replies
&lt;/h2&gt;

&lt;p&gt;Just so that you and I don't have to remember this article or that GitHub gist in the future, you can make it easy by creating a saved reply. Those are accessed in the bar above the text area when creating a pull request description.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3FAbZiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdjvrhjze1dhng5hyl2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3FAbZiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdjvrhjze1dhng5hyl2c.png" alt="saved replies button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create a new saved reply through that button and make a dropdown saved reply. That's going to save me a bunch of time!&lt;/p&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Automate server intrusion detection and banning with Fail2ban</title>
      <author>Waqar Ahmed</author>
      <pubDate>Tue, 29 Jun 2021 18:23:31 +0000</pubDate>
      <link>https://dev.to/waqar/automate-server-intrusion-detection-and-banning-with-fail2ban-4pgk</link>
      <guid>https://dev.to/waqar/automate-server-intrusion-detection-and-banning-with-fail2ban-4pgk</guid>
      <description>&lt;p&gt;A Fail2Ban installation monitors server access logs and automatically bans IP addresses of bots and attacking users in iptables. Fail2Ban analyses server logs and identifies a pattern where a suspicious user or bot is trying to access restricted areas on the server. Brute force attacks repeatedly fail and use combinations of login credentials on after another. Fail to ban can detect failed login attempts on SSH and Apache webserver.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-installation"&gt;
  &lt;/a&gt;
  Fail2Ban Installation
&lt;/h2&gt;

&lt;p&gt;Installation is straight forward update &lt;code&gt;apt-get&lt;/code&gt; and run instal fail2ban as a root user. Theses are Debian/Ubuntu commands for CentOS &lt;code&gt;yum&lt;/code&gt; would replace &lt;code&gt;apt-get&lt;/code&gt; and paths/locations might differ for configuration files. Check &lt;a href="https://www.linode.com/docs/security/using-fail2ban-to-secure-your-server-a-tutorial/"&gt;this&lt;/a&gt; tutorial for non-Debian operating systems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fail2ban-configuration"&gt;
  &lt;/a&gt;
  Fail2Ban Configuration
&lt;/h2&gt;

&lt;p&gt;Fail2Ban can keep server admin updated with emails but to keep it simple, let‚Äôs not configure this additional feature. The configuration file /etc/fail2ban/fail2ban.conf is superseded by fail2ban.local file. So this local config file needs to be created to keep additional settings. Here is part of the default installation config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[Definition]&lt;/span&gt;
&lt;span class="c"&gt;# Option: loglevel
# Notes.: Set the log level output.
#         CRITICAL
#         ERROR
#         WARNING
#         NOTICE
#         INFO
#         DEBUG
# Values: [ LEVEL ]  Default: ERROR
#
&lt;/span&gt;&lt;span class="py"&gt;loglevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;INFO&lt;/span&gt;
&lt;span class="py"&gt;logtarget&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/fail2ban.log&lt;/span&gt;
&lt;span class="c"&gt;# Options: dbfile
# Notes.: Set the file for the fail2ban persistent data to be stored.
#         A value of ":memory:" means database is only stored in memory 
#         and data is lost when fail2ban is stopped.
#         A value of "None" disables the database.
# Values: [ None :memory: FILE ] Default: /var/lib/fail2ban/fail2ban.sqlite3
&lt;/span&gt;&lt;span class="py"&gt;dbfile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/lib/fail2ban/fail2ban.sqlite3&lt;/span&gt;
&lt;span class="c"&gt;# Options: dbpurgeage
# Notes.: Sets age at which bans should be purged from the database
# Values: [ SECONDS ] Default: 86400 (24hours)
&lt;/span&gt;&lt;span class="py"&gt;dbpurgeage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;86400&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fail2ban focuses on failed SSH login attempts by default. Using custom config file jails for HTTP web server like Apache, FTP and mail server can be enabled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-apache-jail-configuration"&gt;
  &lt;/a&gt;
  Fail2Ban Apache Jail Configuration
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-auth]&lt;/span&gt;
&lt;span class="py"&gt;enabled&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/apache2/error.log&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3&lt;/span&gt;
&lt;span class="py"&gt;findtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;600&lt;/span&gt;
&lt;span class="py"&gt;bantime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we have set up fail2ban to look apache2 error logs for brute force attack using one password after another. Three failed login attempts within 600 seconds would lead to an IP address ban for an hour. Restart fail2ban for the changes to take effect sudo systemctl restart fail2ban. To enable fail2ban service to start with boot use sudo systemctl enable fail2ban.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-apache-error-log-jails"&gt;
  &lt;/a&gt;
  Other Apache error log jails
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#apache-no-script"&gt;
  &lt;/a&gt;
  Apache no script
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-noscript]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_error_log)s&lt;/span&gt;
&lt;span class="py"&gt;ignoreip&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;localhost or an IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fail2ban analyses errors of not found .php, .asp, .pl scripts. Client attempting to exploit known scripts are banned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-overflows"&gt;
  &lt;/a&gt;
  Apache overflows
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-overflows]&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_error_log)s&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Detects apache buffer overflow attempts by the client using long suspicious URLs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-no-home"&gt;
  &lt;/a&gt;
  Apache no home
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-nohome]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Detects failures to find a home directory on a server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-bot-search"&gt;
  &lt;/a&gt;
  Apache bot search
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-botsearch]&lt;/span&gt;
&lt;span class="py"&gt;enabled&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternative to apache-noscript filter this filter aims at blocking specific URLs, script or webservices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-access-log-jails"&gt;
  &lt;/a&gt;
  Apache access log jails
&lt;/h3&gt;

&lt;p&gt;Beware, access logs of busy websites can be huge. Setting Fail2ban to monitor access log can have a negative impact on server performance. So think about costs and benefits of access log jails before enabling them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-bad-bots"&gt;
  &lt;/a&gt;
  Apache bad bots
&lt;/h3&gt;

&lt;p&gt;Bans bots identified as spammer robots crawling the web for email addresses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-badbots]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_access_log)s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#php-url-fopen"&gt;
  &lt;/a&gt;
  PHP URL fopen
&lt;/h3&gt;

&lt;p&gt;Matches and blocks fopen URL PHP injection attacks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[php-url-fopen]&lt;/span&gt; 
&lt;span class="py"&gt;port&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webmail-jails"&gt;
  &lt;/a&gt;
  Webmail jails
&lt;/h3&gt;

&lt;p&gt;Jails for roundcude, openwebmail and horde are available, just add the location of log file in these jails.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[roundcube-auth]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(roundcube_errors_log)s&lt;/span&gt;
&lt;span class="c"&gt;#if roundcube logs to journal then use following.
#backend = %(syslog_backend)s
&lt;/span&gt;&lt;span class="nn"&gt;[openwebmail]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/openwebmail.log&lt;/span&gt;
&lt;span class="nn"&gt;[horde]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/horde/horde.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fail2ban-custom-filters-and-jail-for-wordpress"&gt;
  &lt;/a&gt;
  Fail2ban custom filters and jail for WordPress
&lt;/h2&gt;

&lt;p&gt;Error logs have multiple failed requests to WordPress login URLs or files like wp_login.php. This blog post creates a custom regular expression to scan failed WordPress logins in the error log. Using this RegEx a new filter file is created in Fail2ban directory. Once the filter is in place a [wordpress] jail can be added in jail.local. You can easily create your own filters with custom RegEx. Try online regular expression services like regex101.com with your error log to create a regular expression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-client-and-commands"&gt;
  &lt;/a&gt;
  Fail2ban client and commands
&lt;/h2&gt;

&lt;p&gt;Use Fail2ban client to setup configuration or check status of jail and banned IP addresses.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check status of Fail2ban
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check status of Apache jail
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client status apache
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Ban an IP address directly with client
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client set apache banip x.x.x.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Similarly unban an IP address
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client set apache unbanip x.x.x.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Restart after editing jail configuration for changes to take effect
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check firewall rules added to iptables
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo iptables -L
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start fail2ban on boot
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;How To Protect an Apache Server with Fail2Ban on Ubuntu 14.04 ‚Äî By &lt;a href="https://www.digitalocean.com/community/users/jellingwood"&gt;Justin Ellingwood&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-protect-an-apache-server-with-fail2ban-on-ubuntu-14-04"&gt;Digitalocean.com/community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fail2ban jail configuration ‚Äî &lt;a href="https://github.com/fail2ban/fail2ban/blob/master/config/jail.conf"&gt;Github.com/fail2ban&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Set Up Fail2ban To Protect An Apache Web Server ‚Äî &lt;a href="https://devops.ionos.com/users/profile/hitjethva"&gt;hitjethva&lt;/a&gt;, &lt;a href="https://devops.ionos.com/tutorials/set-up-fail2ban-to-protect-an-apache-web-server/"&gt;devops.ionos.com/tutorials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A Tutorial for Using Fail2ban to Secure Your Server ‚Äî &lt;a href="https://www.linode.com/docs/security/using-fail2ban-to-secure-your-server-a-tutorial/"&gt;Linode.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>security</category>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>Simple CICD with CodeBuild, Github, and S3 for Single Page Applications</title>
      <author>Jason F. Grissom</author>
      <pubDate>Tue, 29 Jun 2021 18:02:44 +0000</pubDate>
      <link>https://dev.to/jfgrissom/simple-cicd-with-codebuild-github-and-s3-for-single-page-applications-g24</link>
      <guid>https://dev.to/jfgrissom/simple-cicd-with-codebuild-github-and-s3-for-single-page-applications-g24</guid>
      <description>&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;The goal of this is to create a simple CI/CD system to build and deploy an SPA (Single Page App) to AWS S3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Development branch should deploy to development environment.&lt;/li&gt;
&lt;li&gt;A release from the Master branch should deploy to production environment.&lt;/li&gt;
&lt;li&gt;Build, test, and deploy in a single place.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;AWS CDK.&lt;/li&gt;
&lt;li&gt;Typescript.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Familiarity with AWS CDK.

&lt;ol&gt;
&lt;li&gt;Create a typescript project. See this to &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/getting_started.html"&gt;get started with typescript and the AWS CDK&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Be familiar with this to the point where you can update your stack located at &lt;code&gt;lib/your-stack.ts&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Familiarity with Typescript.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#codebuild-vs-local-builds"&gt;
  &lt;/a&gt;
  CodeBuild vs Local Builds
&lt;/h2&gt;

&lt;p&gt;This is the only thing you'll need to deploy manually. This CodeBuild environment becomes the new build environment for your SPA. &lt;/p&gt;

&lt;p&gt;If you've been deploying from your local machine this effectively replaces that environment for one that is always available in AWS. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;Using AWS CDK you can create the CodeBuild environment by updating your stack inside the lib directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as cdk from '@aws-cdk/core'
import * as codebuild from '@aws-cdk/aws-codebuild'
import * as iam from '@aws-cdk/aws-iam'

export class CiCdStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props)

    // Define some basics information.
    const org = 'YourGithubOrgName'
    const repo = `YourRepoName`
    const develop = 'YourDevelopmentBranchName'
    // This is the builds spec that is associated with the project being built. This is where you'll deploy to S3 from.
    const buildSpec = 'buildspec.yaml'
    const releaseFilter = "^refs\/tags\/v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*).*$"

    // codeBuildIamPrincipal is shared across stacks.
    const codeBuildIamPrincipal = 'site-publisher'

    // Define the source details.
    const gitHubSource = codebuild.Source.gitHub({
      owner: org,
      repo: repo,
      webhook: true,
      // * Covers all branches, tags, commit IDs, etc...
      branchOrRef: '*',
      webhookFilters: [

        // Runs build on release from any target branch (normally master).
codebuild.FilterGroup.inEventOf(codebuild.EventAction.PUSH)
          .andHeadRefIs(`${releaseFilter}`),

        // Runs build on a push to develop branch.
codebuild.FilterGroup.inEventOf(codebuild.EventAction.PUSH)
          .andBranchIs(develop)
      ],
      webhookTriggersBatchBuild: true
    })

    // Create a role for our Codebuild so it can be used by other stacks.
    const sitePublisherCodeBuild = new iam.Role(this, 'Role', {
      assumedBy: new iam.ServicePrincipal('codebuild.amazonaws.com'),
      roleName: codeBuildIamPrincipal
    })

    // Setup the Codebuild project.
    new codebuild.Project(this, org, {
      source: gitHubSource,
      buildSpec: codebuild.BuildSpec.fromSourceFilename(buildSpec),
      role: sitePublisherCodeBuild
    })
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#deploy"&gt;
  &lt;/a&gt;
  Deploy
&lt;/h2&gt;

&lt;p&gt;Once your code is setup just deploy it to AWS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
cdk synth
cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When this is completed you'll have a CodeBuild project you should be able to see in the AWS Console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webhook"&gt;
  &lt;/a&gt;
  Webhook
&lt;/h2&gt;

&lt;p&gt;Once this is deployed setup a webhook between the CodeBuid project and Github. Get the details for the webhook from the AWS console and provide those details to Github.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-buildspec"&gt;
  &lt;/a&gt;
  The buildspec
&lt;/h2&gt;

&lt;p&gt;In your buildspec.yaml add the details you need to perform the build and deployment.&lt;/p&gt;

&lt;p&gt;In this case we're building a GatsbyJS project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 14
    commands:
      - npm install -g gatsby-cli
      - npm --version

  pre_build:
    commands:
      - export FRONTEND_ROOT=${CODEBUILD_SRC_DIR}/PathToYourFrontEndRoot
      - cd ${FRONTEND_ROOT}
      - echo Installing dependencies...
      - npm install
  build:
    commands:
      - npm run build
  post_build:
    commands:
      - echo Build completed deploying to hosting bucket...
      - npm run deploy

batch:
  fast-fail: true
  build-list:
    - identifier: linux_small
      env:
        compute-type: BUILD_GENERAL1_SMALL
      ignore-failure: false

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#build-and-deploy-scripts"&gt;
  &lt;/a&gt;
  Build and Deploy Scripts
&lt;/h2&gt;

&lt;p&gt;Inside the &lt;code&gt;package.json&lt;/code&gt; file of the project being built you'll need to handle these as if you're deploying them from your local environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  "scripts": {
    ...,
    "build": "gatsby build",
    "deploy": "aws s3 cp public/ s3://dev-zurpdex-site-hosting/ --recursive",
    ...
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Now once you cut a release where the tag looks like v0.0.1 in Github and CodeBuild will be triggered.&lt;/p&gt;

&lt;p&gt;Pushing or merging to your development branch will trigger CodeBuild too.&lt;/p&gt;

</description>
      <category>cicd</category>
      <category>codebuild</category>
      <category>spa</category>
      <category>github</category>
    </item>
    <item>
      <title>How to create beautiful and realistic confetti animation with tsParticles</title>
      <author>Matteo Bruni</author>
      <pubDate>Tue, 29 Jun 2021 17:50:07 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm</link>
      <guid>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm</guid>
      <description>&lt;p&gt;Starting from version 1.30.0 tsParticles has new options to create beautiful and realistic confetti animations with every supported particle shape.&lt;/p&gt;

&lt;p&gt;Every parameter of the animation can be configured so you can choose which configuration will suit you better.&lt;/p&gt;

&lt;p&gt;Let's build this sample configuration:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matteobruni/embed/KKmKaVb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;background: {
  color: {
    value: "#000000"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This sets the black background to the canvas, this is optional, you can have a transparent background omitting this section.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#full-screen"&gt;
  &lt;/a&gt;
  Full Screen
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fullScreen: {
  enable: true,
  zIndex: -1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This sets the canvas to full screen with a zIndex of -1, be careful with &lt;code&gt;zIndex&lt;/code&gt; set to -1, this will be below every page element, you can set it to an higher value but the &lt;code&gt;interactivity.detectsOn&lt;/code&gt; should be &lt;code&gt;"window"&lt;/code&gt; to have particles on top without losing the website interactivity.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#interactivity"&gt;
  &lt;/a&gt;
  Interactivity
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interactivity: {
  detectsOn: "window"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This was explained above, the &lt;code&gt;detectsOn&lt;/code&gt; property set to &lt;code&gt;"window"&lt;/code&gt; disabled canvas pointer events, so you can interact with any elements below the canvas &lt;code&gt;zIndex&lt;/code&gt;. This should be set like with an high &lt;code&gt;zIndex&lt;/code&gt;, with a &lt;code&gt;-1&lt;/code&gt; value it's not necessary.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#emitter"&gt;
  &lt;/a&gt;
  Emitter
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;emitters: {
  position: {
    x: 50,
    y: 100
  },
  rate: {
    quantity: 10,
    delay: 0.25
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Everyone loves particles cannons, here you are, you have a bottom centered cannon that shoots &lt;code&gt;10&lt;/code&gt; particles every &lt;code&gt;0.25&lt;/code&gt; seconds.&lt;/p&gt;

&lt;p&gt;The position is specified in percent values, not in pixels, so &lt;code&gt;100&lt;/code&gt; set to &lt;code&gt;y&lt;/code&gt; is the bottom of the page, while &lt;code&gt;50&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; is the horizontal center.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#particles-configuration"&gt;
  &lt;/a&gt;
  Particles configuration
&lt;/h2&gt;

&lt;p&gt;This is the biggest part, where you can configure every aspect of your particles, or confetti if preferred.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;particles: {
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#color"&gt;
  &lt;/a&gt;
  Color
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;color: {
  value: ["#1E00FF", "#FF0061", "#E1FF00", "#00FF9E"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can set here a single value, or an array of string (or more complex object, but let's keep things &lt;em&gt;simple&lt;/em&gt; for now).&lt;/p&gt;

&lt;p&gt;This value is not applied to emojis and images (they are already colored).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#number"&gt;
  &lt;/a&gt;
  Number
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;number: {
  value: 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The particles number is set to &lt;code&gt;0&lt;/code&gt; because the particles are shot from the emitter and only those should be used.&lt;/p&gt;

&lt;p&gt;If this values is set to any positive value will load random particles in the canvas.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#move"&gt;
  &lt;/a&gt;
  Move
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;move: {
  decay: 0.05,
  direction: "top",
  enable: true,
  speed: {
    min: 50,
    max: 75
  },
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section will configure particles movements inside the canvas, you can apply gravity, speed, directions and other properties.&lt;/p&gt;

&lt;p&gt;Some values can be seen above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;decay: it's a value used to slow down particles&lt;/li&gt;
&lt;li&gt;direction: it's the particles direction, you can set a value like &lt;code&gt;"top"&lt;/code&gt;, &lt;code&gt;"top-right"&lt;/code&gt;, &lt;code&gt;"right"&lt;/code&gt; or an angle in degrees.&lt;/li&gt;
&lt;li&gt;enable: this value must be &lt;code&gt;true&lt;/code&gt; if you want particles to move, otherwise they will be static&lt;/li&gt;
&lt;li&gt;speed: this value can be a single numeric value or an object like the one above with &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; properties and each particle will pick one value in that range randomically&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#gravity"&gt;
  &lt;/a&gt;
  Gravity
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gravity: {
  enable: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section part of the &lt;code&gt;move&lt;/code&gt; options will configure particles gravity, you can just enable it with a default earth gravity (&lt;code&gt;9.81&lt;/code&gt;) and a max speed of &lt;code&gt;50&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#out-modes"&gt;
  &lt;/a&gt;
  Out Modes
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;outModes: {
  top: "none",
  default: "destroy"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section sets the action to do when particles will go off canvas, you can specify this for every border (&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;) or a &lt;code&gt;default&lt;/code&gt; that will be overridden by specific values like in this case, the particle will not be destroyed only if it goes outside the top edge.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#opacity"&gt;
  &lt;/a&gt;
  Opacity
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;opacity: {
  value: 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This value sets the particles (ops, confetti) opacity value. This can be also a range value like the previous seen &lt;code&gt;move.speed&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#size"&gt;
  &lt;/a&gt;
  Size
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;size: {
  value: 8
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This value sets the particles (ops, confetti) radius value. This can be also a range value like the previous seen &lt;code&gt;move.speed&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rotate"&gt;
  &lt;/a&gt;
  Rotate
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rotate: {
  value: {
    min: 0,
    max: 360
  },
  direction: "random",
  animation: {
    enable: true,
    speed: 60
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section sets the particles rotation around its center. You can specify a degree angle to &lt;code&gt;value&lt;/code&gt; or a range of angles like the &lt;code&gt;move.speed&lt;/code&gt; above. In this case any angle will be picked randomly by each particle.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;direction&lt;/code&gt; property sets the rotation direction, this property can have 3 values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"clockwise"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"counter-clockwise"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"random"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two are clear, the third value (&lt;code&gt;"random"&lt;/code&gt;) make every particle choose one of the two previous values randomically, so you can see particles rotates clockwise and counter clockwise.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;animation&lt;/code&gt; property make the particle rotation animated, otherwise the particle will only have the initial angle. The rotation speed can be set and the animation can be enabled, by default is not.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tilt"&gt;
  &lt;/a&gt;
  Tilt
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tilt: {
  direction: "random",
  enable: true,
  value: {
    min: 0,
    max: 360
  },
  animation: {
    enable: true,
    speed: 30
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the first of the new three particles options, &lt;code&gt;tilt&lt;/code&gt; will deform the particles like they are seen from another perspective spinning around its center.&lt;/p&gt;

&lt;p&gt;The properties of this property are the same seen in the &lt;code&gt;rotate&lt;/code&gt; section above and it works exactly the same.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#roll"&gt;
  &lt;/a&gt;
  Roll
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;roll: {
  darken: {
    enable: true,
    value: 25
  },
  enable: true,
  speed: {
    min: 5,
    max: 15
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the second new property of particles options, &lt;code&gt;roll&lt;/code&gt; will deform the particles like they are seen rolling around its center making a natural falling effect.&lt;/p&gt;

&lt;p&gt;The properties of this section are really simple, enable will activate this effect, speed sets the fall effect speed.&lt;/p&gt;

&lt;p&gt;What about &lt;code&gt;darken&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;There are 3 more options after &lt;code&gt;speed&lt;/code&gt; and &lt;code&gt;enable&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;backColor&lt;/code&gt;: This sets the back color of the particles when their &lt;em&gt;back&lt;/em&gt; is visible&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;darken&lt;/code&gt;: This is the first alternative when &lt;code&gt;backColor&lt;/code&gt; is not set, this will darken by the specified value the particles color create a nice simple shadow&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;enlighten&lt;/code&gt;: This is the latest alternative if none of the above are set or enabled, this will enlighten by the specified value the particles color create a nice simple light effect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case the particles (only the one that can be colored) will have a nice shadow while rolling down.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#wobble"&gt;
  &lt;/a&gt;
  Wobble
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wobble: {
  distance: 30,
  enable: true,
  speed: {
    min: -15,
    max: 15
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the latest (but not least) new effect introduced in &lt;code&gt;1.30&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This effects makes the particles bouncing from left to right simulating air resistance with a really nice effect.&lt;/p&gt;

&lt;p&gt;The properties are really simple, enable for activating this, the distance used for enlarging the angle and the wobbling speed.&lt;/p&gt;

&lt;p&gt;About the speed I recommend a range with a &lt;code&gt;min&lt;/code&gt; and a &lt;code&gt;max&lt;/code&gt; opposite values instead of a single value since the effect is nicer. If only a positive or negative value is set the particles will only wobble right or left.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#shape"&gt;
  &lt;/a&gt;
  Shape
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
  type: /* ... */
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Why &lt;code&gt;shape&lt;/code&gt; is the latest section explained? Because in this case it's really huge because I want to show all possibilities in the sample but you can choose from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;circle&lt;/li&gt;
&lt;li&gt;square&lt;/li&gt;
&lt;li&gt;polygon&lt;/li&gt;
&lt;li&gt;line (be careful, this will only works with the stroke color since it's not fillable)&lt;/li&gt;
&lt;li&gt;character (also emojis are accepted or any font like FontAwesome if correctly installed)&lt;/li&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;li&gt;triangle&lt;/li&gt;
&lt;li&gt;star&lt;/li&gt;
&lt;li&gt;bubble (external plugin)&lt;/li&gt;
&lt;li&gt;heart (external plugin)&lt;/li&gt;
&lt;li&gt;multiline text (external plugin)&lt;/li&gt;
&lt;li&gt;rounded rect (external plugin)&lt;/li&gt;
&lt;li&gt;spiral (external plugin, this will be better with stroke color since filled it's kinda ugly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each shape you can specify additional options like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
  type: "circle",
  options: {
    circle: {
      particles: {
        size: {
          value: 10
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The code below is the sample used in the codepen shown at the beginning.&lt;/p&gt;

&lt;p&gt;The polygon options are an array and are randomly picked by each particles creating a pentagon or an hexagon.&lt;/p&gt;

&lt;p&gt;The character options specifies the font used by the specified character, the weight, an additional style, and the text to be used for each particle, in this case one emoji per particle randomly picked.&lt;/p&gt;

&lt;p&gt;The images are a lot and random picked, they have a bigger size value since they have some padding inside.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
    type: [
        "circle",
        "square",
        "polygon",
        "character",
        "character",
        "character",
        "image",
        "image",
        "image"
    ],
    options: {
        polygon: [
            {
                sides: 5
            },
            {
                sides: 6
            }
        ],
        character: [
            {
                font: "Verdana",
                value: ["üí©", "ü§°", "üçÄ", "üçô", "ü¶Ñ", "‚≠êÔ∏è"],
                style: "",
                weight: 400
            }
        ],
        image: [
            {
                src: "https://particles.js.org/images/fruits/apple.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/avocado.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/banana.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/berries.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/cherry.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/grapes.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/lemon.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/orange.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/peach.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/pear.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/pepper.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/plum.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/star.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/strawberry.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/watermelon.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/watermelon_slice.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Hope you'll have a lot of fun with tsParticles and the new animations to make beautiful confetti&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. ü§©&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Kubernetes Dashboards: Lens</title>
      <author>Rich Burroughs</author>
      <pubDate>Tue, 29 Jun 2021 17:38:27 +0000</pubDate>
      <link>https://dev.to/loft/kubernetes-dashboards-lens-3o53</link>
      <guid>https://dev.to/loft/kubernetes-dashboards-lens-3o53</guid>
      <description>&lt;p&gt;Command-line tools like kubectl are a great way to interact with Kubernetes clusters for some of us, but many people prefer a graphical interface. Kubernetes has a &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/"&gt;built-in dashboard&lt;/a&gt;, but some people are looking for features that it doesn‚Äôt support. In this series, we‚Äôll look at some of the other dashboards that are available for Kubernetes and what they have to offer.&lt;/p&gt;

&lt;p&gt;We‚Äôll begin with one of the most popular alternatives out there, Lens. The Lens team describes their tool as¬† ‚ÄúThe Kubernetes IDE for Development,‚Äù and it is a very powerful tool. Lens was originally proprietary, but &lt;a href="https://techcrunch.com/2020/08/13/mirantis-acquires-lens-an-ide-for-kubernetes/"&gt;Mirantis acquired it&lt;/a&gt; in August of 2020 and open sourced &lt;a href="https://github.com/lensapp/lens"&gt;the code&lt;/a&gt;. It‚Äôs an &lt;a href="https://www.electronjs.org/"&gt;Electron-based&lt;/a&gt; app that you run locally on your computer. It allows read and write access to your Kubernetes clusters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-a-cluster"&gt;
  &lt;/a&gt;
  Adding a Cluster
&lt;/h2&gt;

&lt;p&gt;Connecting to a Kubernetes cluster with Lens is easy. If you have a local Kubeconfig file that points to the cluster, you can import that into Lens to connect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BEwPFev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk7e31j89luo3s93x4q9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BEwPFev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk7e31j89luo3s93x4q9.png" alt="Screenshot showing how to add a cluster to Lens from a Kubeconfig"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lens allows you to configure multiple clusters to manage, and switch between them easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h2&gt;

&lt;p&gt;The metrics in Lens are very handy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6UEbQnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iah5p6aebfwqr151ya6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6UEbQnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iah5p6aebfwqr151ya6z.png" alt="Screenshot showing the metrics dashboard in Lens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lens won‚Äôt be able to display metrics until you &lt;a href="https://docs.k8slens.dev/main/clusters/settings/#prometheus"&gt;configure it to work with Prometheus&lt;/a&gt;, though. If you don‚Äôt have a Prometheus instance in your cluster you can add one easily directly from Lens. Right-click on the cluster icon in the upper left corner of the UI, and then choose Settings. There you can install a Prometheus instance that is already set up to work with Lens. You can also preview the Kubernetes manifests for Prometheus before you apply them.&lt;/p&gt;

&lt;p&gt;If you already have Prometheus running you can &lt;a href="https://github.com/lensapp/lens/blob/master/troubleshooting/custom-prometheus.md"&gt;configure it&lt;/a&gt; to work with Lens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-objects"&gt;
  &lt;/a&gt;
  Managing Objects
&lt;/h2&gt;

&lt;p&gt;You can view the state of the objects in your cluster, including pods, deployments, namespaces, network, storage, and even custom resources. Lens is a great way to quickly identify pods that aren‚Äôt operating correctly, and get an idea why.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l1qLAPmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unyvjng0aym5ppnk3331.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l1qLAPmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unyvjng0aym5ppnk3331.png" alt="Screenshot showing the pod listing in lens. One pod has a yellow yield sign icon indicating an error. Mousing over it shows that the problem is insufficient CPU."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, in this view I‚Äôve selected multiple namespaces to view the pods for. I‚Äôm able to just mouse over a pod that‚Äôs stuck in a pending state to see why. These are all things you can surface with kubectl, but some people do prefer a more graphical view.&lt;/p&gt;

&lt;p&gt;Lens will allow you to make changes in the cluster if your user has the correct access. This could be very good or very bad depending on the context. If you‚Äôre a shop using GitOps, you may not want individual developers or platform engineers to make changes to the state outside of your code workflow. If you‚Äôre working with a development cluster, though, that may be fine. It all depends on how your team works.&lt;/p&gt;

&lt;p&gt;One thing you can do with Lens is install applications from Helm charts. Click the Apps icon in the left menu, and then you can search for the chart you want to install. This is a lot handier than going to &lt;a href="https://artifacthub.io/"&gt;Artifact Hub&lt;/a&gt; and tracking down a chart there and it could be very useful for evaluating new Helm charts.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ua7QQsS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp2n9skhuqq3zcozygl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ua7QQsS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp2n9skhuqq3zcozygl2.png" alt="Screenshot showing how to deploy NGINX from a Helm chart in Lens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking the Install button you‚Äôre presented with a screen where you can edit the YAML directly to make changes. In this example, I‚Äôve changed the number of NGINX replicas from one to three.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRo5RsLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bw4is44kysz1pm2pg0x1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRo5RsLk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bw4is44kysz1pm2pg0x1.png" alt="Screenshot showing how to edit the number of replicas in the Helm chart deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also edit running objects in the cluster like you would with &lt;a href="https://jamesdefabia.github.io/docs/user-guide/kubectl/kubectl_edit/"&gt;kubectl edit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CmRkZ8gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bnfp1sdx5p11h1w4rx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CmRkZ8gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bnfp1sdx5p11h1w4rx0.png" alt="Screenshot showing how to edit a running deployment in Lens"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, this is not likely something that most teams would want to do in a production environment, but it could be great for people who aren‚Äôt comfortable with kubectl yet, or for people working in isolated development environments. It‚Äôs also important to note that the changes a user can make in Lens would also be possible with kubectl, so the real way to prevent changes from being made outside of your GitOps workflow is with &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/"&gt;Role-based access control (RBAC)&lt;/a&gt; permissions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h2&gt;

&lt;p&gt;Extensions is a newer feature in Lens that allows you to write custom code to extend Lens, or to re-use extensions that other people have built. Right now there are a few extensions &lt;a href="https://github.com/lensapp/lens-extensions"&gt;shared on GitHub&lt;/a&gt;. Hopefully more will emerge. &lt;a href="https://blog.kubecost.com/blog/lens-kubecost-extension/"&gt;Kubecost just released an extension&lt;/a&gt; for tracking your cost metrics in Lens.&lt;/p&gt;

&lt;p&gt;If you‚Äôd like to get your feet wet building your own Lens extensions, there is a &lt;a href="https://api-docs.k8slens.dev/v4.2.5/extensions/get-started/overview/"&gt;development guide in the docs&lt;/a&gt;. Typescript is recommended, and you can also &lt;a href="https://api-docs.k8slens.dev/v4.2.5/extensions/testing-and-publishing/testing/"&gt;write tests&lt;/a&gt; for your extensions. If you enjoy using Lens and are comfortable with JavaScript/Typescript, this may be worth looking into.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Lens has a lot of great features, and it‚Äôs a standalone app as opposed to the built-in Kubernetes Dashboard. We all use tools differently, which is why it‚Äôs great that there‚Äôs such a variety of graphical user interfaces for Kubernetes.¬†&lt;/p&gt;

&lt;p&gt;If you use Kubernetes, it‚Äôs worth taking a look at Lens.&lt;/p&gt;

&lt;p&gt;In my next post in the series I‚Äôll be looking at &lt;a href="https://github.com/kinvolk/headlamp"&gt;Headlamp&lt;/a&gt;, another popular UI for Kubernetes, and later we‚Äôll look at the official &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/"&gt;Kubernetes Dashboard&lt;/a&gt;. Stay tuned.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>containers</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 29 Jun 2021 17:34:18 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-ai9</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-ai9</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-typescript-with-react-a-crashcourse"&gt;
  &lt;/a&gt;
  Using TypeScript with React: A Crash-Course
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/riyanegi"&gt;@riyanegi&lt;/a&gt;
 is here to help developers use existing React and JavaScript knowledge to learn TypeScript. Great stuff!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/riyanegi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0B3FiH6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k6XJNghO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600728/a408c935-e9b2-452e-84cb-70f36aad9aa9.jpeg" alt="riyanegi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/riyanegi/getting-started-with-typescript-with-react-hooks-2021-5cfd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with Typescript with React Hooks [2021]&lt;/h2&gt;
      &lt;h3&gt;RiyaNegi „Éª Jun 23 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#confessions-of-a-recovering-tech-hipster"&gt;
  &lt;/a&gt;
  Confessions of a recovering "Tech Hipster"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/knajjars"&gt;@knajjars&lt;/a&gt;
 used to spend a lot of time researching, consuming, and learning about the latest and buzziest trends in tech. It's awesome to be curious about the latest technology, but not when it burns you out. Thanks for sharing these valuable insights, Khalil!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/knajjars" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XONcH7CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CiAKgGzD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/630369/aa2aed39-3da1-4a89-b4af-64a00e574237.jpeg" alt="knajjars"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/knajjars/learnings-after-5-years-of-being-a-hipster-in-tech-1b0n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Regret Being a Hipster in Tech&lt;/h2&gt;
      &lt;h3&gt;Khalil Najjar „Éª Jun 27 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#django&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#making-react-apps-more-accessible"&gt;
  &lt;/a&gt;
  Making React Apps More Accessible
&lt;/h2&gt;

&lt;p&gt;React fully supports building accessible websites, often via standard HTML techniques. In this article, &lt;a class="mentioned-user" href="https://dev.to/sreashi"&gt;@sreashi&lt;/a&gt;
 shares how you can make your React apps more accessible ‚Äî today.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sreashi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SS1cq94Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M1zDu0KT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/635065/7e5df417-5e86-4737-906c-a325869246c6.jpeg" alt="sreashi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sreashi/accessibility-in-react-2m2n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Accessibility in React&lt;/h2&gt;
      &lt;h3&gt;Sreashi Saha „Éª Jun 23 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#take-a-deep-breath"&gt;
  &lt;/a&gt;
  Take a deep breath...
&lt;/h2&gt;

&lt;p&gt;... it's just one of the many ways you can undo some of the stress that coding can bring. Thanks for this fantastic list of stress-reduction tips, @chetan_atrawalka. Such an important topic.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/chetan_atrawalkar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhrzVZep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xRKSv-Yz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/655054/eab1b96a-fcd5-459c-81a6-8bc334e62b19.gif" alt="chetan_atrawalkar"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/chetan_atrawalkar/how-to-avoid-stress-during-coding-56f1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;ü§îHow to avoid stress during coding? &lt;/h2&gt;
      &lt;h3&gt;Chetan AtrawalkarüëâCA. „Éª Jun 26 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#there-is-no-objectively-correct-structure-for-a-scalable-app"&gt;
  &lt;/a&gt;
  There is no objectively correct structure for a scalable app
&lt;/h2&gt;

&lt;p&gt;However, there are some principles that can help guide you in your quest to building an app that scales. Thanks for walking us through this, &lt;a class="mentioned-user" href="https://dev.to/pietmichal_67"&gt;@pietmichal_67&lt;/a&gt;
. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pietmichal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2G6OIrb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tqvQtqk9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/51140/d5f329ef-1f63-4eb0-9765-f6887959b39c.jpg" alt="pietmichal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pietmichal/how-to-structure-your-app-in-a-way-that-scales-bkf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To Structure Your App In a Way That Scales.&lt;/h2&gt;
      &lt;h3&gt;Micha≈Ç Pietraszko „Éª Jun 27 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-dev-history-lesson"&gt;
  &lt;/a&gt;
  A DEV history lesson
&lt;/h2&gt;

&lt;p&gt;The DEV team loves historical tech deep dives, essays, and research projects. This one by &lt;a class="mentioned-user" href="https://dev.to/mr_victor"&gt;@mr_victor&lt;/a&gt;
 about the history of JS does not disappoint!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mr_victor" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PwhHFxsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1QkH4dly--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600265/d7f31d15-9f0e-4c4a-b8b7-a3c521ba2b98.jpg" alt="mr_victor"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mr_victor/the-history-of-javascript-1fp3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The History Of JavaScript ‚åõ&lt;/h2&gt;
      &lt;h3&gt;Victor Ikechukwu „Éª Jun 22 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#developers&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#set-up-build-and-run-your-own-chrome-extension"&gt;
  &lt;/a&gt;
  Set up, build and run your own Chrome extension.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/venkyakshaya"&gt;@venkyakshaya&lt;/a&gt;
 shared this handy guide to building your very own Chrome extension ‚ú®  In this example, you'll be making a count-down timer. What date are you looking forward to the most? &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/venkyakshaya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0wKm-ZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4JcU8Qjn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/435398/f6296f27-45da-4425-a7a2-6a505ab16d38.jpg" alt="venkyakshaya"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/venkyakshaya/chrome-extensions-101-3dif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Chrome Extensions 101&lt;/h2&gt;
      &lt;h3&gt;Akshaya Venkatesh „Éª Jun 27 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Boy or Girl Paradox... What the heck is it??? ü§Øü§∑</title>
      <author>Aashish Chaubey üí•‚ö°Ô∏è</author>
      <pubDate>Tue, 29 Jun 2021 17:25:52 +0000</pubDate>
      <link>https://dev.to/aashish/boy-or-girl-paradox-what-the-heck-is-it-1m0j</link>
      <guid>https://dev.to/aashish/boy-or-girl-paradox-what-the-heck-is-it-1m0j</guid>
      <description>&lt;p&gt;Hi friends,&lt;/p&gt;

&lt;p&gt;I am a machine learning and data science enthusiast. I love playing with numbers and finding insights. I know many of you are, at least to some level. Even if you are not but you have some level of interest in mathematics, there is a great chance you will find this post interesting. &lt;/p&gt;

&lt;p&gt;Please let me know if you guys already knew this and if there are many more which I should check out, please let me know in the comments belows. I encourage all my fellow reader to read them too.&lt;/p&gt;




&lt;p&gt;I like solving problems, sometimes I find it on renowned platforms like Kaggle and hackerearth. Randomly I came across this seemingly easy question but which blew my mind off [partly because I feel this problem is not articulated well!]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_pm0Hru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1at8e0m7pyr8kosn4ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_pm0Hru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1at8e0m7pyr8kosn4ag.png" alt="Hackerrank Problem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I thought I didn't have to think much about it. Because it is just so straight forward. I mean it is given that one child is a boy, only probability of the other child being a boy is &lt;code&gt;1/2&lt;/code&gt; [unless otherwise stated].&lt;/p&gt;

&lt;p&gt;I selected the 1/2 answer from the answer, it was a wrong one. Okay, it needed a little more thinking. I wrote down all the possibilities at least one of the child is a boy [we are already given this information].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[BB, BG, GB]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Therefore, another answer which is also equally likely according to the question is &lt;code&gt;1/3&lt;/code&gt;. And as it turns out, this indeed is a correct answer. &lt;/p&gt;

&lt;p&gt;But how can we have two equally correct answers for this. In my view, both the answers, as per the problem statement is correct. &lt;/p&gt;

&lt;p&gt;I took to Google for adjudication, and again, Google didn't disappoint. Look what I found:&lt;/p&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Boy_or_Girl_paradox" rel="noopener noreferrer"&gt;Boy or Girl paradox&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;
&lt;p&gt;The &lt;b&gt;Boy or Girl paradox&lt;/b&gt; surrounds a set of questions in probability theory, which are also known as &lt;b&gt;The Two Child Problem&lt;/b&gt;, &lt;b&gt;Mr. Smith's Children&lt;/b&gt; and the &lt;b&gt;Mrs. Smith Problem&lt;/b&gt;. The initial formulation of the question dates back to at least 1959, when¬†Martin Gardner¬†featured it in his October 1959 "Mathematical Games column" in &lt;i&gt;Scientific American&lt;/i&gt;. He titled it &lt;b&gt;The Two Children Problem&lt;/b&gt;, and phrased the paradox as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mr. Jones has two children. The older child is a girl. What is the probability that both children are girls?&lt;/li&gt;
&lt;li&gt;Mr. Smith has two children. At least one of them is a boy. What is the probability that both children are boys?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/Boy_or_Girl_paradox" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I think it is a good read. I suggest you all to go through it (if you already haven't). &lt;/p&gt;




&lt;p&gt;Just wanted to share this information to this erudite community. Please feel free to reach out to me on:&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/AashishLChaubey"&gt;https://twitter.com/AashishLChaubey&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/chaubey-aashish"&gt;https://www.linkedin.com/in/chaubey-aashish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please checkout my &lt;a href="https://github.com/aashish-chaubey"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>probability</category>
      <category>maths</category>
      <category>statistics</category>
    </item>
    <item>
      <title>Pure Function In JavaScript</title>
      <author>Prosen Ghosh</author>
      <pubDate>Tue, 29 Jun 2021 17:18:44 +0000</pubDate>
      <link>https://dev.to/_prosen/pure-function-in-javascript-c2n</link>
      <guid>https://dev.to/_prosen/pure-function-in-javascript-c2n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-pure-function"&gt;
  &lt;/a&gt;
  What is Pure Function?
&lt;/h2&gt;

&lt;p&gt;There are 2 simple rules for a function to be a Pure Function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;1. There will be always the same output &lt;span class="k"&gt;for &lt;/span&gt;the same input.
2. There will be no side effects.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see a code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the add function is a pure function.&lt;br&gt;
Because this function will take any 2 arguments &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and it will give the same result for that argument which is always &lt;code&gt;a + b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's see another code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Michael&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jackson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Michael Jackson &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet &lt;code&gt;getFullName&lt;/code&gt; is a pure function, because &lt;code&gt;getFullName&lt;/code&gt; is not mutating the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-impure-function"&gt;
  &lt;/a&gt;
  what is Impure Function?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;1. Create/update database.
2. http/s call.
3. Change the file system.
4. Mutate the state.
etc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Math.random()&lt;/code&gt; is an impure function because it always returns a different output.&lt;/p&gt;

&lt;p&gt;So is the &lt;code&gt;console.log&lt;/code&gt; is a pure function, it returns undefined for any input.&lt;/p&gt;

&lt;p&gt;No. &lt;code&gt;console.log&lt;/code&gt; is not a pure function because it has side effects, &lt;code&gt;console.log&lt;/code&gt; is using another share environment to log into the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;added&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see from the above code snippet, we are getting the same output for the same input, and &lt;code&gt;console.log&lt;/code&gt; is not effecting our output, then it is not a pure function. Because the &lt;code&gt;add&lt;/code&gt; function has a side effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Michael&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jackson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`Mr. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Mrs. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Mr. Michael Jackson &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in the code snippet &lt;code&gt;getFullName&lt;/code&gt; is an impure function, because &lt;code&gt;getFullName&lt;/code&gt; is mutating the state. Inside the function definition we are assigning a value to the object property.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-vs-impure"&gt;
  &lt;/a&gt;
  Pure vs Impure
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Impure function mutates the external state.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(1)}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// changing state&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(2)}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(2)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pure function does not mutate external state. We can make the above function pure by making a little change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deepClone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// for example purpose&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;deepClone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(1)}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// changing state&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(1)}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(2)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet we can see, the pure function does not change the cart, instead it is making a copy of the cart and sending as a return value. Due to this the original card is not being changed.&lt;/p&gt;

&lt;p&gt;If you are using react, redux then you will see the use of pure function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pure function can be easily predicted, it is convenient to test. Pure function makes state management easier.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
    </item>
  </channel>
</rss>
