<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Hyvä Theme
For Magento 2</title>
      <author>⭐ JaJuMa ⭐</author>
      <pubDate>Sat, 16 Oct 2021 10:46:53 +0000</pubDate>
      <link>https://dev.to/jajuma/hyva-themefor-magento-2-5169</link>
      <guid>https://dev.to/jajuma/hyva-themefor-magento-2-5169</guid>
      <description>&lt;h2&gt;
  &lt;a href="#no-rocket-science-but-rocket-speed"&gt;
  &lt;/a&gt;
  NO ROCKET SCIENCE, BUT ROCKET SPEED
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#about-hyv%C3%A4-theme-amp-magento-2"&gt;
  &lt;/a&gt;
  ABOUT HYVÄ THEME &amp;amp; MAGENTO 2
&lt;/h2&gt;

&lt;p&gt;Magento 2 Frontend Rethought And Redone.&lt;br&gt;
Top performance and fast loading times on mobile and desktop&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fD8lHWk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlb39jwrrkmbwjkrik1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD8lHWk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlb39jwrrkmbwjkrik1y.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hyv%C3%A4-theme-for-magento-2"&gt;
  &lt;/a&gt;
  WHAT IS HYVÄ THEME FOR MAGENTO 2?
&lt;/h2&gt;

&lt;p&gt;The standard Magento frontend "Luma" has been much criticized since its release in 2015. Too slow, unnecessarily complex, too much effort even for smallest adjustments and changes to the design template.&lt;/p&gt;

&lt;p&gt;It was exactly this criticism and dissatisfaction in the Magento community that was the motivation for the development of Hyvä. The idea behind Hyvä is to build a new frontend or design template for Magento 2 from scratch. A template that throws everything "bad" about Luma overboard and instead is built from scratch and well thought out. Without outdated technologies and without unnecessary complex overhead, but still with all the features and possibilities that make Magento stand out.&lt;/p&gt;

&lt;p&gt;A design that with a leaner approach and modern technologies also meets today's expectations and requirements for performance, flexibility and easy customizability and that without bringing new challenges at the same time like it is the case with other frontend approaches (e.g. PWA, Headless...) with much higher implementation efforts and additional complexity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-the-hyv%C3%A4-theme-better"&gt;
  &lt;/a&gt;
  WHY IS THE HYVÄ THEME BETTER?
&lt;/h2&gt;

&lt;p&gt;The Hyvä Theme promises:&lt;/p&gt;

&lt;p&gt;Reduced complexity&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved performance&lt;/li&gt;
&lt;li&gt;Improved developer experience&lt;/li&gt;
&lt;li&gt;Improved development speed&lt;/li&gt;
&lt;li&gt;Lower dependencies&lt;/li&gt;
&lt;li&gt;Lower learning curve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Boom! That's an announcement!&lt;br&gt;
Does Hyvä Theme live up to these promises and is it really that good?&lt;/p&gt;

&lt;p&gt;Short and sweet answer: Yes. Hyvä abandons the old and cumbersome frameworks like KnockoutJS, RequireJS and jQuery on which the standard Magento 2 frontend is based.&lt;br&gt;
Instead, Hyvä relies on modern and lean frameworks, AlpineJS and TailwindCSS and takes full advantage of the capabilities of modern browsers with VanillaJS. Retained components of the well-known Magento frontend architecture that have proven themselves: Layout XML, PHTML templates, caching...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hyv%C3%A4-theme-highlights"&gt;
  &lt;/a&gt;
  HYVÄ THEME HIGHLIGHTS
&lt;/h2&gt;

&lt;p&gt;The Hyvä Theme:&lt;br&gt;
The best frontend for Magento 2.&lt;br&gt;
Excellent performance without compromise on all devices,&lt;br&gt;
thanks to most modern technology stack!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rocket Fast Page Load TImes&lt;/li&gt;
&lt;li&gt;Top Core Web Vitals Values LCP / CLS / FID / TBT&lt;/li&gt;
&lt;li&gt;Modern Technologies: AlpineJS &amp;amp; TailwindCS&lt;/li&gt;
&lt;li&gt;Reduced Complexity&lt;/li&gt;
&lt;li&gt;Full Magento Power&lt;/li&gt;
&lt;li&gt;Strong &amp;amp; Fast Growing Hyvä Community&lt;/li&gt;
&lt;li&gt;Compatible With Many 3rd Party Modules&lt;/li&gt;
&lt;li&gt;Faster Time-To-Market&lt;/li&gt;
&lt;li&gt;JaJuMa Extensions for Hyvä Theme&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.jajuma.de/en/jajuma-develop/magento-extensions"&gt;JaJuMa Magento Extensions&lt;/a&gt; for Hyvä To make your Hyvä store even better&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thats-why-hyv%C3%A4-theme-is-the-best-frontend-for-magento-2"&gt;
  &lt;/a&gt;
  That's why Hyvä Theme is the best frontend for Magento 2
&lt;/h2&gt;

&lt;p&gt;The streamlining by using the modern frameworks AlpineJS &amp;amp; TailwindCSS is the key to achieving the outstanding performance and the accompanying top user experience that the Hyvä theme offers.&lt;/p&gt;

&lt;p&gt;Another effect of this streamlining:&lt;br&gt;
Simplification leads to less complexity, easier implementation of customizations and overall shorter development times.&lt;/p&gt;

&lt;p&gt;For you as a merchant, this means:&lt;br&gt;
A first-class frontend with all the comprehensive possibilities Magento offers, while at the same time lower budget requirements and shorter project times.&lt;/p&gt;

&lt;p&gt;Too good to be true or not convinced yet?&lt;br&gt;
Read on to learn more about the benefits JaJuMa and Hyvä can offer you...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amp-pwa-headless-hyv%C3%A4-is-the-future"&gt;
  &lt;/a&gt;
  AMP? PWA? Headless? HYVÄ Is The Future!
&lt;/h2&gt;

&lt;p&gt;In the past, there have always been new ideas and approaches to make Magento better, faster, more modern... with new technologies.&lt;br&gt;
Again and again, these ideas also said: This is the future! So you have to do it now, otherwise, you will be left behind.&lt;/p&gt;

&lt;p&gt;Naturally, we have also looked at these earlier approaches and dealt with them. After all, it's fun to deal with new things, learn new things and try them out. Of course, we were also repeatedly approached by customers, whether one would not have to make "PWA" now?.&lt;/p&gt;

&lt;p&gt;However, none of these earlier ideas and hypes could convince us. From our point of view, the disadvantages outweighed the advantages, more hype than "gamechanger". Accordingly, we have also always advised our customers against getting involved in AMP or PWA and investing in these hypes. Too bad about the sales for us, but you don't have to go along with every technology hype. More important in the end is the overall result and a satisfied customer.&lt;/p&gt;

&lt;p&gt;With Hyvä, it was different from the very first moment, Belly feeling: there's the gamechanger!.&lt;br&gt;
Even when we first read the concept and idea behind Hyvä it was an eye-opening experience. It was exactly the realization of many whining conversations over lunch about Magento 2 "You'd have to..."&lt;/p&gt;

&lt;p&gt;So we took a closer look at Hyvä. Despite the positive gut feeling, but also with some skepticism due to the earlier disillusionments regarding other frontend alternatives. First tests, reading in docs etc. about Hyvä, AlpineJS, TailwindCSS..., make the first of our extensions compatible with Hyvä as the first "real-life" tests...&lt;/p&gt;

&lt;p&gt;Conclusion: Our gut feeling did not deceive us. The skepticism has evaporated!&lt;br&gt;
Hyvä keeps what it promises and convinces in every aspect. It is the frontend the Magento community has been waiting for.&lt;br&gt;
Hyvä is a gamechanger.&lt;br&gt;
Hyvä is the future!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8EVo5IQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6u9otvc3biooq0637737.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8EVo5IQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6u9otvc3biooq0637737.gif" alt="Hyvä Rocket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#we-are-excited-about-hyv%C3%A4"&gt;
  &lt;/a&gt;
  We are excited about Hyvä!
&lt;/h2&gt;

&lt;p&gt;Is Hyvä revolutionary?&lt;br&gt;
Maybe not, more appropriate would be: it's a clever rework of the previous Magento frontend architecture.&lt;br&gt;
In which outdated and obsolete components have been replaced with newer and more powerful ones.&lt;br&gt;
It's the powerful frontend Magento deserves.&lt;br&gt;
Is Hyvä a hype?&lt;br&gt;
Granted, the attention and comments Hyvä has been getting since its release are reminiscent of a hype.&lt;br&gt;
But the concept and implementation are too good to just disappear again like some other inflated hype.&lt;br&gt;
We are convinced:&lt;br&gt;
Hyvä is here to stay! Hyvä is the front-end "way to go" for a convincing, contemporary and future-proof e-commerce solution based on Magento which is still the most powerful e-commerce system.&lt;/p&gt;

&lt;p&gt;What Do You Think?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-information"&gt;
  &lt;/a&gt;
  Further Information
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.jajuma.de/en/jajuma-shop/demo-shop-with-magento-2-and-hyva-themes"&gt;Experience Hyvä: Live-Demo&lt;/a&gt;&lt;br&gt;
Experience Hyvä live and in action on our fully functional live demo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jajuma.de/en/jajuma-develop/magento-extensions"&gt;Hyvä Extensions: by JaJuMa&lt;/a&gt;&lt;br&gt;
Discover our already available Extensions for Hyvä that will make your Hyvä store even better.&lt;/p&gt;

</description>
      <category>magento</category>
      <category>performance</category>
      <category>frontend</category>
      <category>development</category>
    </item>
    <item>
      <title>Node.js from Beginners to Advance: REST API using node, express and MongoDB</title>
      <author>Pramit Marattha</author>
      <pubDate>Sat, 16 Oct 2021 10:18:20 +0000</pubDate>
      <link>https://dev.to/aviyel/nodejs-from-beginners-to-advance-rest-api-using-node-express-and-mongodb-c3i</link>
      <guid>https://dev.to/aviyel/nodejs-from-beginners-to-advance-rest-api-using-node-express-and-mongodb-c3i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#rest-api-using-node-express-and-mongodb"&gt;
  &lt;/a&gt;
  REST API using node, express and MongoDB
&lt;/h2&gt;

&lt;p&gt;This is the second part of the node series; if you're unfamiliar with node, don't worry; we covered everything in the first series, which you can find it here =&amp;gt; &lt;a href="https://dev.to/aviyel/node-js-from-beginners-to-advance-31id"&gt;dev.to/aviyel/node-js-from-beginners-to-advance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, without further ado, let's get this party started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-exactly-is-mongodb"&gt;
  &lt;/a&gt;
  So, what exactly is MongoDB?
&lt;/h2&gt;

&lt;p&gt;MongoDB is a cross-platform document-oriented database application that is open source. MongoDB is a NoSQL database application that works with JSON-like documents and optional schemas. MongoDB is a database that was created by MongoDB Inc. and is distributed under the Server Side Public License.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-lets-get-this-project-started-right-away"&gt;
  &lt;/a&gt;
  Now, Let's get this project started right away.
&lt;/h3&gt;

&lt;p&gt;Getting started on our project&lt;/p&gt;

&lt;p&gt;Create a new folder and name it whatever you like, then open it in Visual Studio Code and run the code below from the command prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Configuring package.json&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To install the dependencies, use the following instructions in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i cors express dotenv mongoose nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LFZ2ug-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/letgtc5c6s5rb93vzbpb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LFZ2ug-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/letgtc5c6s5rb93vzbpb.png" alt="npm packages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dotenv: needed to retrieve data from.env files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;express: node.js web application framework.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mongoose:  It is a Node. js based Object Data Modeling (ODM) library for MongoDB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nodemon: It will keep the server running indefinitely.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cors: allows cross-origin API requests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The "package.json" file should look like this after the dependencies have been installed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"rest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"nodemon server.js"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:[],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"cors"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"^2.8.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"dotenv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"^10.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"mongoose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"^6.0.8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"nodemon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"^2.0.13"&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITPYkXdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bbclcno2ehvrg9fs2b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITPYkXdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9bbclcno2ehvrg9fs2b2.png" alt="dependencies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And also, remember to update the scripts as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yIwokG9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ov2r5lflfxup2669kf1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yIwokG9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ov2r5lflfxup2669kf1j.png" alt="scripts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#structuring-the-folder"&gt;
  &lt;/a&gt;
  Structuring the folder:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;controllers:&lt;/strong&gt; The files in the controllers’ folder will contain the methods for the endpoints to interface with the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;models:&lt;/strong&gt; The files that specify the MongoDB schema will be found in the model’s folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;dbConfig:&lt;/strong&gt; Make a file called db.js in the config folder. The necessary code for connecting to the MongoDB database will be contained in this file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;routers:&lt;/strong&gt; The files with the endpoints will be found in the routers folder.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hH_Lqofw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633608733731-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hH_Lqofw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633608733731-image.png" alt="folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-serverjs"&gt;
  &lt;/a&gt;
  Configuring server.js
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Import express.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use express() to start our app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using the app, create a get method for the endpoint &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For our server to run, set the PORT to 6000.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using our app, you may listen to PORT.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//app.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// listen&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now use the following code to start the server with nodemon. Ensure that the following command is executed from the project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the server has started successfully, the terminal should display the following message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBON0ilu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633672375118-output-resized.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBON0ilu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633672375118-output-resized.jpg" alt="npm start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-mongodb"&gt;
  &lt;/a&gt;
  Getting started with MongoDB
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JC3IC0F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qn1ugj8dej5ww85ob96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JC3IC0F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7qn1ugj8dej5ww85ob96.png" alt="Mongodb meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sign in to MongoDB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a new project.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUH0ZbOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609044884-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUH0ZbOX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609044884-image.png" alt="make new project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCIKfYLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609157284-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCIKfYLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609157284-image-resized.png" alt="cluster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNeYcKhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609192655-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNeYcKhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609192655-image-resized.png" alt="cluster creation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose a cloud service provider.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKtYjDY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609274997-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKtYjDY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609274997-image.png" alt="cloud service"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make a cluster&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wait for the cluster to be built before proceeding (usually takes around 5 -10 minutes)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISPwo-hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609341646-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISPwo-hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609341646-image-resized.png" alt="wait for cluster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Allow access from anywhere by clicking connect. Then IP address should be added.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dhVoBLK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609405584-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dhVoBLK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609405584-image.png" alt="add ip address"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWSLZjPw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609429296-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWSLZjPw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1633609429296-image.png" alt="connect a cluster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a user in the database. For the MongoDB URI, you'll need the username and password.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select a connection method by clicking on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect your application by clicking on it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose the appropriate driver and version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy and paste mongodb+srv into the.env file.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PORT=6000
MONGO_DB_URL=mongodb+srv://admin:-----------@cluster0.2qee0.mongodb.net/myFirstDatabase?retryWrites=true&amp;amp;w=majority
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open the database.js file in the dbConfig folder and make the modifications listed below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Import Mongoose.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MONGO_DB_URL should be imported from the.env file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define the configDatabase method for establishing a database connection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The configDatabase method should be exported and called in server.js.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//database.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dbURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGO_DB_URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;configDatabase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database connected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;configDatabase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following changes on server.js file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;configDatabase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./dbConfig/database.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//connecting to the mongodb database&lt;/span&gt;
&lt;span class="nx"&gt;configDatabase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// add the middlewares&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello there!! Cheers !! The server is up and running&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// listen&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#defining-database-schema"&gt;
  &lt;/a&gt;
  Defining database schema:
&lt;/h2&gt;

&lt;p&gt;Add a todo.models.js file inside the models folder. We will define the entire db schema inside this particular file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// todo.models.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TodoListSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TodoListSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#defining-the-entire-endpoint-of-our-api"&gt;
  &lt;/a&gt;
  Defining the entire endpoint of our API
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// todo.routes.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;listAllTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;createTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../controllers/todo.controller.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listAllTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#defining-the-methods-for-our-endpoint"&gt;
  &lt;/a&gt;
  Defining the methods for our endpoint
&lt;/h2&gt;

&lt;p&gt;The methods for the endpoints will be defined in the controllers’ folder.&lt;/p&gt;

&lt;p&gt;The first step is to import the todo models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../models/todo.models.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;listAllTodo()&lt;/strong&gt; : find() method will return all the todo inside the MongoDB collections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listAllTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;There isnt any todo available&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;createTodo():&lt;/strong&gt; The method create() will create a todo item and return a success message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cheers!! You have successfully added TODO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sorry your todo list cannot be added&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Full article available here =&amp;gt; &lt;a href="https://aviyel.com/post/1150"&gt;https://aviyel.com/post/1150&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://twitter.com/AviyelHq"&gt;@aviyelHQ&lt;/a&gt; or &lt;a href="https://aviyel.com/discussions"&gt;sign-up&lt;/a&gt; on Aviyel for early access if you are a project maintainer, contributor, or just an Open Source enthusiast.&lt;/p&gt;

&lt;p&gt;Join Aviyel's Discord =&amp;gt; &lt;a href="https://discord.gg/TbfZmbvnN5"&gt;Aviyel's world&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter =&amp;gt;&lt;a href="https://twitter.com/AviyelHq"&gt;https://twitter.com/AviyelHq&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>mern</category>
    </item>
    <item>
      <title>EndSars Photo/Image Gallery Using C# Asp.Net Core 5 Mvc, Cloudinary  and Auth0 Api</title>
      <author>dyagzy</author>
      <pubDate>Sat, 16 Oct 2021 09:52:22 +0000</pubDate>
      <link>https://dev.to/hackmamba/endsars-photoimage-gallery-using-c-aspnet-core-5-mvc-cloudinary-and-auth0-api-4acb</link>
      <guid>https://dev.to/hackmamba/endsars-photoimage-gallery-using-c-aspnet-core-5-mvc-cloudinary-and-auth0-api-4acb</guid>
      <description>&lt;p&gt;&lt;strong&gt;Table of Content&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Required Tools Needed&lt;/li&gt;
&lt;li&gt;Setting Up

&lt;ul&gt;
&lt;li&gt;Cloudinary Account&lt;/li&gt;
&lt;li&gt;Visual Studio&lt;/li&gt;
&lt;li&gt;Auth0 Account&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Coding Proper&lt;/li&gt;
&lt;li&gt;Test One&lt;/li&gt;
&lt;li&gt;Adding Cloudinary Credentials to the  Project&lt;/li&gt;
&lt;li&gt;Test Two&lt;/li&gt;
&lt;li&gt;Test Three&lt;/li&gt;
&lt;li&gt;Test Four&lt;/li&gt;
&lt;li&gt;Cloudinary Check&lt;/li&gt;
&lt;li&gt;Adding Auth0 to the Project&lt;/li&gt;
&lt;li&gt;Test Five&lt;/li&gt;
&lt;li&gt;The End&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are going to build an image or photo gallery using Cloudinary Api as the remote image server, Auth0 for authentication with C# Asp.Net Core as the backend technology. This project is aimed at providing a working tool for human right activist by automating image upload process as they embark on their work in difficult and hazard situations. The users of this tutorial must have some proficiency in C# technology.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required Tools  We Need&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sign up with Cloudinary&lt;/li&gt;
&lt;li&gt;Get Visual Studio 2019&lt;/li&gt;
&lt;li&gt;Sign up with Auth0&lt;/li&gt;
&lt;li&gt;Note pad&lt;/li&gt;
&lt;li&gt;Sql server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Setting Up&lt;/strong&gt;&lt;br&gt;
Cloudinary Account&lt;/p&gt;

&lt;p&gt;The first thing to do is to sign up on Cloudinary here &lt;a href="https://cloudinary.com/documentation/cloudinary_get_started"&gt;https://cloudinary.com/documentation/cloudinary_get_started&lt;/a&gt; so that we can get access to the required Api for image upload.&lt;br&gt;
Upon successful sign up, the following are automatically generated for you:&lt;br&gt;
Cloud name:&lt;br&gt;
API Key:&lt;br&gt;
API Secret:&lt;br&gt;
API Environment variable:&lt;/p&gt;

&lt;p&gt;So click on the account settings section to see what your Api key, Cloud name and Api secret are. Copy out this values and keep it in your notepad.&lt;br&gt;
Since we intend to use Cloudinary within a DotNet application, we will rely heavily on this Cloudinary documentation for DotNet &lt;a href="https://cloudinary.com/documentation/dotnet_integration"&gt;https://cloudinary.com/documentation/dotnet_integration&lt;/a&gt;.&lt;br&gt;
At this moment, this would be all for Cloudinary. Next we set up our coding environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting Up&lt;/strong&gt;&lt;br&gt;
Visual Studio&lt;br&gt;
The IDE for this project is visual studio 2019, so open your browser and go to &lt;a href="https://visualstudio.microsoft.com/downloads/"&gt;https://visualstudio.microsoft.com/downloads/&lt;/a&gt; click on Visual studio 2019  and download the community version.&lt;br&gt;
Installation and set up procedure for the visual studio 2019 can be found here &lt;a href="https://www.tektutorialshub.com/visual-studio/how-to-download-and-install-visual-studio-2019/"&gt;https://www.tektutorialshub.com/visual-studio/how-to-download-and-install-visual-studio-2019/&lt;/a&gt;&lt;br&gt;
Launch the newly installed app and select create a project and select Asp.Net Core Web Application Net 5 as the version. Lets call the name of this project  ImageGallery.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJk4kZM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh4jrcze73ymq04d969g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJk4kZM8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mh4jrcze73ymq04d969g.jpeg" alt="new projectScaffold test"&gt;&lt;/a&gt;&lt;br&gt;
Fig 1.0&lt;br&gt;
Run the project to ensure everything is fine.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MhDnzeEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gnnwgmrvmat6f9n3jk1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MhDnzeEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gnnwgmrvmat6f9n3jk1.jpeg" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
Fig 1.1&lt;br&gt;
You should see a web browser fired up automatically similar to this shown below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--chtGDGh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bq7u527hkt7fgb8ivnaz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--chtGDGh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bq7u527hkt7fgb8ivnaz.jpeg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 1.2&lt;br&gt;
Go to the Url section of this page above and now copy the text written there. This should be similar to this  &lt;a href="https://localhost:44375/"&gt;https://localhost:44375/&lt;/a&gt; . This value will be our call back Url which will be used much later in the project. For now just save it inside your notepad:&lt;br&gt;
&lt;strong&gt;Setting Up&lt;/strong&gt;&lt;br&gt;
Auth0 Account&lt;/p&gt;

&lt;p&gt;If you don’t already have an account with Auth0, the first thing you have to do us is to sign up for    free by using this link &lt;a href="https://auth0.com/"&gt;https://auth0.com/&lt;/a&gt; click the sign up button to sign up and follow the prompts.&lt;br&gt;
Choose a Region where you want the app to be hosted then click the Create account button.&lt;br&gt;
Next click on the link written “Create Application” it is similar to the figure below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoV9RK4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyin28g02xw4ssrzz6gj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoV9RK4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyin28g02xw4ssrzz6gj.jpeg" alt="Auth0 setup"&gt;&lt;/a&gt;&lt;br&gt;
Fig 1.3&lt;br&gt;
The Auth0 service will ask that you supply the following values such as :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name:  This is asking you to fill in the name of your DotNet application&lt;/li&gt;
&lt;li&gt;Application Type:  Select the type of application you want to build&lt;/li&gt;
&lt;li&gt;What Technology are using to build your project :Select Asp.Net Core v3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A client Id number will be automatically generated for you, copy this and paste it inside the notepad.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Til3S_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqytk3aw34gh718sp43c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Til3S_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqytk3aw34gh718sp43c.jpeg" alt="Auth0 setup 2"&gt;&lt;/a&gt;&lt;br&gt;
Fig 1.4&lt;/p&gt;

&lt;p&gt;Next you have to make Auth0 to be aware of your Asp.Net app, by clicking the Settings button in the figure above.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHHqbaJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vbpmub3fgria2wdtwrg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHHqbaJZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vbpmub3fgria2wdtwrg.jpeg" alt="Auth0 setup 3"&gt;&lt;/a&gt;&lt;br&gt;
Fig 1.5&lt;/p&gt;

&lt;p&gt;Copy and paste the following parameters Name, Domain, Client Id, Client secret which were automatically generated for you into the notepad document above.&lt;br&gt;
Scroll down to the Application Url section of the settings, copy the call back Url from the notepad  and paste this into the “Allowed Call Back Url” box and then attach  /callback at the end of the text.&lt;br&gt;
Next we also copy and past the call back Url into the “Allowed Logout Url”&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D8NecDA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06kibe69kie23zp9c4ql.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D8NecDA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06kibe69kie23zp9c4ql.jpeg" alt="Auth0 setup 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 1.6&lt;br&gt;
Let’s quickly have a snap shot of what we have in our notepad file&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JlrGx9nY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alw5sjk2t1751s8iwto9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlrGx9nY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alw5sjk2t1751s8iwto9.jpeg" alt="Notepad cross section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 2.0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coding Proper&lt;/strong&gt;&lt;br&gt;
We will return now to the visual studio and start proper coding for the project.&lt;br&gt;
Right click on the solution file and click add new project. This will take you to the same screen where we selected the type of Asp.Net core template that we chose initially.&lt;br&gt;
Go to the search box and type class library and select Class Library (.Net Core), name this SimpleImageGallery.Data&lt;br&gt;
We need one more class library so repeat the process a second time but this time around, we will call the name of this class library SimpleImageGallery.Services. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZyhBNYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6cejvaxctlwx26x2hc0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZyhBNYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6cejvaxctlwx26x2hc0.jpeg" alt="Project arrangement"&gt;&lt;/a&gt;&lt;br&gt;
Fig 2.1&lt;br&gt;
We will refer to SimpleImageGallery.Data as the Data layer. This layer will handle all data access issues such as entity model classes, database class , Migration files etc.&lt;br&gt;
We will refer to SimpleImageGallery.Services as the Service layer. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project  Referencing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we need to make the three separate projects above communicate with each other.&lt;br&gt;
Starting from the ImageGallery project, click on dependencies, add SimpleImageGallery.Data and  SimpleImageGallery.Services respectively as dependencies.&lt;br&gt;
Now move to the  SimpleImageGallery.Services project add SimpleImageGallery.Data as a dependencies.&lt;br&gt;
Now right click the data layer and add a folder, name this folder Models,  add a class, to the Models folder name this class GalleryImage.cs&lt;br&gt;
&lt;strong&gt;Entity Models&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We add another entity class Image tag&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Right click on the web ImageGallery project and select ManageNugget package.&lt;br&gt;
add Microsoft.EntityFrameworkCore.Design as dependency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database Context&lt;/strong&gt;&lt;br&gt;
Next we need to add the Database context class lets call this class SimpleImageGalleryDbContext.&lt;br&gt;
The SimpleImageGalleryDbContext will represent our data access class i.e. the class via which we can talk to the database.&lt;br&gt;
Add the following nuggets packages as dependencies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w350dGSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6w47l9s1tz4jliu71u2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w350dGSE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6w47l9s1tz4jliu71u2.jpeg" alt="nuggets packages"&gt;&lt;/a&gt;&lt;br&gt;
Fig 2.2&lt;br&gt;
We will add three different packages below to the data access layer one after following the process above.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MicrosoftEntityFrameworkCore (5.0.10)&lt;/li&gt;
&lt;li&gt;MicrosoftEntityFrameworkCore.SqlServer (5.01.0)&lt;/li&gt;
&lt;li&gt;MicrosoftEntityFrameworkCore.Tools (5.01.0)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add DbSet properties to the SimpleImageGalleryDbContext  and initialize it with the code as written below.&lt;br&gt;
 See the snippet below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;strong&gt;Migrations&lt;/strong&gt;&lt;br&gt;
Return to the ImageGallery project i.e., the web project and open up the appsettings.json file&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1-zz8Y9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blua4mrkr4eudc2wmgte.jpeg" alt="appsettings 1"&gt;

&lt;p&gt;Fig 2.3&lt;br&gt;
We need to add connection strings to the appsettings.json file&lt;br&gt;
Just before the "AllowedHosts": "*" add the your connection strings.&lt;br&gt;
 &lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we have to register the Sql server in the StartUp class. &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now we are all set to run our migration&lt;br&gt;
 Select Package manager console and type the command below Add-Migration firstMigration press the enter key.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--URchnAKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljy9tdv8ii7r82c6kay1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--URchnAKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljy9tdv8ii7r82c6kay1.jpeg" alt="migration cmd"&gt;&lt;/a&gt;&lt;br&gt;
Fig 2.5&lt;br&gt;
Next enter this second command Update-Database at the PM&amp;gt; prompt and press enter.&lt;br&gt;
 Open your Sql server to confirm that your new database has been created there.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YSI5wk5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5331l1uwvrtjmzf7rnzz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YSI5wk5s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5331l1uwvrtjmzf7rnzz.jpeg" alt="database cross section"&gt;&lt;/a&gt;&lt;br&gt;
Fig 2.6&lt;br&gt;
Now lets go over to the Web app project (ImageGallery) open it and add a class to the models folder there. Lets call this class UploadImageModel&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Next we will add another class to the models folder and name it GalleryIndexModel. The GalleryIndexModel will have two properties as shown below.


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next we will add another class to the models folder and name it GalleryDetailModel. The GalleryDetailModel will have five properties as shown below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Interface  Declarations&lt;/strong&gt;&lt;br&gt;
Right click on the Data layer project and click add a class name it IImageService.&lt;br&gt;
Copy the following codes into this interface class&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Head over to the Service layer, add a new class which will implement the IImageService.&lt;br&gt;
Create a constructor of the ImageService class and then inject an instance of  the SimpleImageGalleryDbConetx class.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOvNfjjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw9o3y59mutr34fuy5hu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOvNfjjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw9o3y59mutr34fuy5hu.jpeg" alt="constructor injection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 3.0&lt;br&gt;
Copy the codes below as shown below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The GetWithTag is similar to the GetById method except that it returns the images alongside the tag description of each images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Views&lt;/strong&gt;&lt;br&gt;
Return to the web project , right click on the Views folder and add another folder name it Gallery.&lt;br&gt;
Add a file to the folder call name it Index.cshtml&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eL44Jt_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1z7e1pqn1b1j3pc4tju.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eL44Jt_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1z7e1pqn1b1j3pc4tju.jpeg" alt="empty views file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 3.1&lt;/p&gt;

&lt;p&gt;Delete all the text in fig 3.1 replace with the codes below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Also, right click on the Views folder and add another folder name it Image then add a new view file call it  UploadImage.cshtml&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eL44Jt_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1z7e1pqn1b1j3pc4tju.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eL44Jt_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1z7e1pqn1b1j3pc4tju.jpeg" alt="empty views file"&gt;&lt;/a&gt;&lt;br&gt;
Fig 3.2&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The code above basically helps to create a form with a minimalist styling  for presenting an image on the  browser. &lt;br&gt;
&lt;strong&gt;Controller&lt;/strong&gt;&lt;br&gt;
Add a new controller to the controller’s folder name it GalleryController. Inject the Image service as a constructor injection into this controller&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Q7DT-BZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk2wg0ptcayvrm0oozac.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Q7DT-BZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk2wg0ptcayvrm0oozac.jpeg" alt="controller injection"&gt;&lt;/a&gt;&lt;br&gt;
  Fig 3.3&lt;br&gt;
Next we write the Http action method and name it Index&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CSS Styling&lt;/strong&gt;&lt;br&gt;
Open the wwwroot folder in the web project, click the CSS folder and  double click on the site.css file to open it.&lt;br&gt;
This file already contains the basic CSS styling that is used to render the default Asp.Net core Mvc page when the project is run, we will only modify this file to accommodates the changes that we want to see whenever the Upload.cshtml file is rendered on the browser.&lt;br&gt;
Add this code below to the site.css file&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Add Upload Button&lt;/strong&gt;&lt;br&gt;
Next we need to add an upload button to the navigation bar so that we can begin to upload images to the database&lt;br&gt;
To do this, open the _Layout.cshtml file located in the Shared folder. When this file is opened, it already contains some default codes used for rendering the layout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7vFpG-KI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/132xd8q846rtj9xd224d.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vFpG-KI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/132xd8q846rtj9xd224d.jpeg" alt="default codes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 3.4&lt;br&gt;
Identify the portion of the _Layout.cshtml that has the code similar to the one below then delete&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Paste this code below to replace the code you had just deleted above&lt;br&gt;
 &lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Lastly, before we test our application, go to the Startup class and lets modify the Mvc route.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5QLUbdr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mg85e3qdk6mzzk361h2m.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QLUbdr2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mg85e3qdk6mzzk361h2m.jpeg" alt="add routing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 3.5&lt;br&gt;
Locate the  app.UseEndPoints method and it should look like what is above.&lt;br&gt;
 &lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Register Interface Service&lt;/strong&gt;&lt;br&gt;
Now we need to register the IImage interface class in the StartUp class by adding the snippet below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Test One&lt;/strong&gt;&lt;br&gt;
Run the app, you should see a web browser similar to this below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5q4d8Pfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6oydbdw07hg26vlr20m.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5q4d8Pfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6oydbdw07hg26vlr20m.jpeg" alt="added upload button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 3.6&lt;br&gt;
If you have a similar web browser as shown above then you should congratulate yourself, else, try to go over the steps above a second time so as to trace where you missed out.&lt;br&gt;
Now you can see the Upload button has been  successfully added but when the Upload button is clicked, we get a 404 page not found error, so lets  fix this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Image Upload Service&lt;/strong&gt;&lt;br&gt;
To be able to use the  Cloudinary service in our project, we need to have an interface that will hold the implementation of how we want this Cloudinary Api to function within our application. So return back to the Web project, right click to add a folder name it Infrastructures.&lt;br&gt;
Add an interface class to the Infrastructures name it ICloudinaryImageUpload.cs. Inside this interface class add the code snippet below.&lt;/p&gt;

&lt;p&gt;Task UploadPicture(UploadImageModel model);&lt;/p&gt;

&lt;p&gt;Add another class to the Infrastructures folder name it CloudinaryImageUpload.cs. This class has  to implement the ICloudinaryImageUpload interface &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5RoiImVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzuf7i0j4yq2ei1ei2ia.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5RoiImVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzuf7i0j4yq2ei1ei2ia.jpeg" alt="cloudinary class"&gt;&lt;/a&gt;&lt;br&gt;
 Fig 4.0&lt;br&gt;
 &lt;strong&gt;Adding Cloudinary Credentials to the  Project&lt;/strong&gt;&lt;br&gt;
Now we need to add the Cloudinary Api credentials that we got upon sign up into our project. We can hide this in the appsettings.json file. Now open the appsettings.json file and add the following code snippets as a json object.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HS79d---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60olvycfmcpeaep0o6v2.jpeg" alt="appsettingCloudinary"&gt;

&lt;p&gt;Fig 4.1&lt;br&gt;
  Go to the CloudinaryImageUpload class and add the Cloudinary credentials to this class as a private properties&lt;br&gt;
 &lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Right click on the web project and add the nugget package for Cloudinary add Cloudinary.DotNet as a dependency.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-Ny--22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h152mggsm7770p0dsqoz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-Ny--22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h152mggsm7770p0dsqoz.jpeg" alt="Image Cloudinary sdk"&gt;&lt;/a&gt;&lt;br&gt;
  Fig 4.2&lt;br&gt;
Next we initialize all the private properties of the Cloudinary Api credentials  as shown below.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now lets write the logic that will expose our application to the remote Cloudinary service &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We will write a small private function to handle passing in tags  when uploading images for us and then call it in the method above see code snippet below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
We are done setting up the logic that will expose our application to the Cloudinary Api in the remote server.&lt;br&gt;
Create a constructor of the ImageController and inject the ICloudinaryImageUpload interface service.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9P-_eUgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97q97mtgd7l9bqhk8byd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9P-_eUgb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97q97mtgd7l9bqhk8byd.jpeg" alt="ImageController"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
We are done setting up the logic that will expose our application to the Cloudinary Api in the remote server.&lt;br&gt;
Create a constructor of the ImageController and inject the ICloudinaryImageUpload interface service.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b72YMqa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_130D4051B20D7BD1D4482FD2BC142C23536ED27B806A3AC41882727210A27051_1632931700719_ImageController.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b72YMqa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_130D4051B20D7BD1D4482FD2BC142C23536ED27B806A3AC41882727210A27051_1632931700719_ImageController.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 4.3&lt;br&gt;
 Inside this controller class, we need two methods, the first will handle a Get Http action while the second will handle the POST Http action respectively.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
So lets quickly talk through what is happening here.&lt;br&gt;
Lastly, we return a redirect to action response which basically is to take the user back to the home page where he or she could see the newly uploaded image.&lt;br&gt;
We are all set and ready to run a second test of our application to see how far we are doing or not.

&lt;p&gt;&lt;strong&gt;Test Two&lt;/strong&gt;&lt;br&gt;
Run the application and click on the Upload button, you should see this exception shown in fig 4.4 below.&lt;/p&gt;

&lt;p&gt;See the figure below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tfx4GuJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id3jjji7ri5vw525g0cw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tfx4GuJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id3jjji7ri5vw525g0cw.jpeg" alt="exception page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 4.4&lt;/p&gt;

&lt;p&gt;What the exception is saying is that we need to register the ICloudinaryImageUpload in the configure method of the StartUp class.&lt;br&gt;
Now go to the configure method of the StartUp class and register the above Interface as a Scooped service  using the codes snippet below:&lt;br&gt;
services.AddScoped();&lt;/p&gt;

&lt;p&gt;Your code should look like the image below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5sMmInLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drnbwwqi4zqzwmx7e4je.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5sMmInLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drnbwwqi4zqzwmx7e4je.jpeg" alt="StartUp class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 4.5&lt;br&gt;
 &lt;strong&gt;Test Three&lt;/strong&gt;&lt;br&gt;
Now we are ready to  test our application again to see how we are doing.&lt;br&gt;
Run the application and then click the Upload button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b2NFW6QB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0jbs278z99mq3whwuq9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b2NFW6QB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0jbs278z99mq3whwuq9.jpeg" alt="Image upload viewPage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 4.6&lt;br&gt;
 Fill in the  boxes, choose any image from your local machine and then click submit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4-54K90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xucliq2axnfolp29rgl8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4-54K90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xucliq2axnfolp29rgl8.jpeg" alt="EndSars Aisha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 5.0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test Four&lt;/strong&gt;&lt;br&gt;
For test four, we simply want to confirm that our uploaded images are stored up in the Cloudinary server and also on our local database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local DataBase Check&lt;/strong&gt;&lt;br&gt;
So lets check the database first,&lt;br&gt;
Launch your Sql database, navigate to your database and open the GalleryImages table to check&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BPb5LwcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqxba1xxzlpv2kd5yent.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BPb5LwcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqxba1xxzlpv2kd5yent.jpeg" alt="database 2"&gt;&lt;/a&gt;&lt;br&gt;
  Fig 5.1&lt;/p&gt;

&lt;p&gt;Just pay attention to the  Url of the last two images, we can see the Url path to the images we uploaded to the Cloudinary server  sitting right there on our local database. You can copy this Url and past it into your browser to see the exact image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudinary Check&lt;/strong&gt;&lt;br&gt;
Next login into your Cloudinary account on the browser, click the Media Library button and you should see  the uploaded image here.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jE0ngdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5nxobfwzwxauxizi4m2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jE0ngdd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w5nxobfwzwxauxizi4m2.jpeg" alt="Image cloudinary 3"&gt;&lt;/a&gt;&lt;br&gt;
   Fig 5.2&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4-54K90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xucliq2axnfolp29rgl8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4-54K90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xucliq2axnfolp29rgl8.jpeg" alt="EndSars Aisha"&gt;&lt;/a&gt;&lt;br&gt;
Fig 5.3&lt;/p&gt;

&lt;p&gt;At this point we are 85% done with our project.&lt;br&gt;
Now  we need to configure authentication.&lt;br&gt;
&lt;strong&gt;Adding Auth0 to the Project&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will use the  Auth0 authentication Api, which we have already signed up for at the beginning of this tutorial or you click here&lt;br&gt;
The first thing we have to do is to add the Auth0 credentials i.e. Domain, ClientId, ClientSecret to the appsettings.json file&lt;br&gt;
See the figure below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9xGjf6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb9n5owp0yf0tpvwa1av.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9xGjf6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb9n5owp0yf0tpvwa1av.jpeg" alt="Auth0 cred"&gt;&lt;/a&gt;&lt;br&gt;
  Fig 5.4&lt;/p&gt;

&lt;p&gt;The next thing we will do is to go to the Web project and add the necessary nugget packages we need in other to be able to use theAuth0 authentication Api.&lt;br&gt;
Go to the manage Nugget manager window and type this&lt;br&gt;
Microsoft.Asp.NetCore.Authentication.OpenIdConnect, then install it.&lt;br&gt;
Then we will follow the Auth0 DotNet documentation &lt;br&gt;
&lt;a href="https://auth0.com/docs/quickstart/webapp/aspnet-core"&gt;here&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlkUZR3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1sbv9k9rhvnzq2bqvky.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlkUZR3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1sbv9k9rhvnzq2bqvky.jpeg" alt="AddScopped"&gt;&lt;/a&gt;&lt;br&gt;
  Fig 5.5&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Click &lt;a href="https://auth0.com/docs/quickstart/webapp/aspnet-core/01-login#configure-your-application-to-use-auth0"&gt;here&lt;/a&gt; to learn more&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test Five&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Launch the application again and click on Login button.&lt;br&gt;
 It should take you to the Auth0 login page see below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zjE0wVXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ce0rmjdnuep6ll1qem7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjE0wVXc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ce0rmjdnuep6ll1qem7.jpeg" alt="Auth0 login"&gt;&lt;/a&gt;&lt;br&gt;
Fig 5.6&lt;br&gt;
 Provide your username and password that you had used to sign up on Auth0 then click on Continue.&lt;/p&gt;

&lt;p&gt;At this point we are sure that our application is working well.&lt;br&gt;
 But at the moment when a user clicks on the Upload button , the user is able to upload images immediately without login in into our application. This is not supposed to be so. The ideal situation is such that a user must login first before he or she could be allowed to upload an image.&lt;/p&gt;

&lt;p&gt;To fix this, we return back to the ImageController and then add the Authorize attribute on the Upload action method see Fig 6.0 below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qfkBfg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hza6sp6l54jxtvmut01j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qfkBfg3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hza6sp6l54jxtvmut01j.jpeg" alt="Authorize Annotation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fig 6.0&lt;br&gt;
Test the application again by clicking on the Upload button and then the application should immediately direct you to the Auth0 login page as above.&lt;/p&gt;

&lt;p&gt;This is the end of this tutorial.&lt;/p&gt;

&lt;p&gt;Please drop me comments, questions, let me know about what you are building with what you have learnt.&lt;br&gt;
The entire code can be found &lt;a href="https://github.com/dyagzy/EndSars-Image-Album/tree/master"&gt;here&lt;/a&gt;&lt;br&gt;
Thank you for your time.&lt;br&gt;
Content created for the &lt;a href="https://content.hackmamba.io/"&gt; Hackmamba &lt;/a&gt; Jamstack Content Hackathon using &lt;a href="https://auth0.com/"&gt; Auth0 &lt;/a&gt;and &lt;a href="https://cloudinary.com/"&gt; Cloudinary&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Made 24 truly free HTML templates for websites and landing pages</title>
      <author>Lucian Tartea</author>
      <pubDate>Sat, 16 Oct 2021 09:39:22 +0000</pubDate>
      <link>https://dev.to/luciantartea/made-24-truly-free-html-templates-for-websites-and-landing-pages-kph</link>
      <guid>https://dev.to/luciantartea/made-24-truly-free-html-templates-for-websites-and-landing-pages-kph</guid>
      <description>&lt;p&gt;&lt;em&gt;How many times where you out and about online to to find a good quality Free HTML template for your online project, only to find that they are not actually as free as they claim them to be.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You either have to use it just for personal projects, whatever that means because all my projects are personal and made by my own hard working person. And you have to pay for commercial usage.&lt;/p&gt;

&lt;p&gt;Or you have to give them your email address, agree to newsletters, shout them out on all your social media, give them your shoe number and your momma's maiden name if possible.&lt;/p&gt;

&lt;p&gt;After going through the process, you also discover that you are not allowed to remove the copyright information and replace it with yours. Everyone in the world needs to know you are using their template.&lt;/p&gt;

&lt;p&gt;From this frustration came the idea of a free HTML templates website with absolutely no restrictions between your need of a good quality template and a quickly completed project.&lt;/p&gt;

&lt;p&gt;So Inovatik was born to solve this problem which many developers and makers have when working on lower budget projects. Or on projects where it's uncertain if they will return any revenue.&lt;/p&gt;

&lt;p&gt;Inovatik is a truly free HTML templates resource for websites and landing pages with simple license, included images and illustrations, no attribution required and unrestricted download.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The license is MIT which means you can use them freely for any type and any number of projects without any doubts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can reuse the images in your projects because they all come from the best free images website and you have the links to them in the readme files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can reuse the illustrations too because I've purchased custom licenses from awesome illustrators that allow you to do that&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No attribution required means you can remove my copyright and replace it with yours&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No download restrictions means you are just one click away from the zip file. No email registration, no personal details, no social shout outs&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are made with HTML, CSS and a sprinkle of JS. I've used Bootstrap just for the grid and a few components. They don't rely heavily on it. Enjoy them on &lt;a href="https://inovatik.com"&gt;Inovatik.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currently I am working on a new project to support my work. It's called &lt;strong&gt;Build a product and launch in 30 days with just HTML and CSS&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To inspire fellow devs interested in making products with just HTML and CSS I tweet transparently all my wins and fails on &lt;a href="https://twitter.com/luciantartea"&gt;@luciantartea&lt;/a&gt; and keep a journal on &lt;a href="https://launchin30html.carrd.co/"&gt;launchin30HTML&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check it out, only few days remaining till launch.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Added comment and discuss to @dsabyte.com</title>
      <author>Rahul kumar</author>
      <pubDate>Sat, 16 Oct 2021 09:25:43 +0000</pubDate>
      <link>https://dev.to/ats1999/added-comment-and-discuss-to-dsabytecom-4e00</link>
      <guid>https://dev.to/ats1999/added-comment-and-discuss-to-dsabytecom-4e00</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qCGhkU_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8f8jdzm4fxktcqxip0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCGhkU_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8f8jdzm4fxktcqxip0m.png" alt="https://www.dsabyte.com/posts/sa/What-is-the-algorithm/615dee94b03c6af6e90461d8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See from the above image, that i have added a way for users to add and edit comments. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To make any comment or discuss, you need to login first&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After making comment, you can edit comment, see that author who made comment or discuss, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-upcoming-feature"&gt;
  &lt;/a&gt;
  Next upcoming feature
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;delete comment/discuss&lt;/li&gt;
&lt;li&gt;like and dis like comment/discuss&lt;/li&gt;
&lt;li&gt;mark as answer for discuss only&lt;/li&gt;
&lt;li&gt;make comment in thread&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Use Ngrok to share a preview of your web project to everyone!</title>
      <author>Wumi4</author>
      <pubDate>Sat, 16 Oct 2021 09:04:38 +0000</pubDate>
      <link>https://dev.to/hoangtuan110/use-ngrok-to-share-a-preview-of-your-web-project-to-everyone-1h1a</link>
      <guid>https://dev.to/hoangtuan110/use-ngrok-to-share-a-preview-of-your-web-project-to-everyone-1h1a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#situation"&gt;
  &lt;/a&gt;
  Situation
&lt;/h2&gt;

&lt;p&gt;So, you just build a very cool website, but the only problem is that it is only available through your local web server, or &lt;code&gt;localhost&lt;/code&gt;. You can buy a domain, set up a simple web server, get an SSL certificate, and then figure out how to set for the code to work. But what if you just want to share a quick preview of your website to a friend, or test it on mobile devices, without having to deploy or anything?&lt;/p&gt;

&lt;p&gt;That's where tunnels come in! Tunnel allows you to set a secure, but temporary connection between your &lt;code&gt;localhost&lt;/code&gt; and the Internet. In this post, I will show you how you can share a preview of your web project to everyone using Ngrok!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get Started
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: In here I am assuming you are using Linux or MacOS. If you use Windows or another OS, then this tutorial is maybe not for you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;First, we will need to create a Ngrok account. You can sign up using this &lt;a href="https://dashboard.ngrok.com/signup"&gt;link&lt;/a&gt;, or go to &lt;code&gt;ngrok.com&lt;/code&gt;, and then click on &lt;code&gt;Get Started For Free&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After signing up, you should have a dashboard that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgJwoodX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doa2k5sfhhjbzlesf0cu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgJwoodX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doa2k5sfhhjbzlesf0cu.png" alt="Ngrok Tutorial Image 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, click on &lt;code&gt;Download for Linux&lt;/code&gt;, and a zip file should be installed.&lt;/p&gt;

&lt;p&gt;Go to your default &lt;code&gt;Download&lt;/code&gt; directory, and then unzip the zip file using &lt;code&gt;unzip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After unzipping, you should see an executable called &lt;code&gt;ngrok&lt;/code&gt;. Running this executable should show something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NAME:
   ngrok - tunnel local ports to public URLs and inspect traffic

DESCRIPTION:
    ngrok exposes local networked services behinds NATs and firewalls to the
    public internet over a secure tunnel. Share local websites, build/test
    webhook consumers and self-host personal services.
    Detailed help for each command is available with 'ngrok help &amp;lt;command&amp;gt;'.
    Open http://localhost:4040 for ngrok's web interface to inspect traffic.

[bla bla bla ...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that we have installed Ngrok!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authenticate-the-ngrok-agent"&gt;
  &lt;/a&gt;
  Authenticate the Ngrok agent
&lt;/h3&gt;

&lt;p&gt;Now, we will need to authenticate the Ngrok agent that we just installed, this will grant us access to more features and longer session time.&lt;/p&gt;

&lt;p&gt;On the dashboard, in the tab &lt;code&gt;Getting Started&lt;/code&gt;, click on &lt;code&gt;Your Authtoken&lt;/code&gt;. Click on that will lead to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CXSR_eac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mef4w83qzpo0izdq1fa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXSR_eac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mef4w83qzpo0izdq1fa8.png" alt="Ngrok Tutorial Image 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, click &lt;code&gt;Copy&lt;/code&gt; to copy your authtoken, and then type this on the terminal to authenticate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;./ngrok authtoken &amp;lt;YOUR_AUTHTOKEN&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After doing that, &lt;code&gt;ngrok&lt;/code&gt; will output something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authtoken saved to configuration file: path/to/ngrok/config/file/ngrok.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which means that we have authenticated our &lt;code&gt;ngrok&lt;/code&gt; agent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fire-it-up"&gt;
  &lt;/a&gt;
  Fire it up
&lt;/h3&gt;

&lt;p&gt;Now, we have done setting up our Ngrok, let's fire it up!&lt;/p&gt;

&lt;p&gt;Before we get into it, we will set up &lt;code&gt;ngrok&lt;/code&gt; in our &lt;code&gt;$PATH&lt;/code&gt; to conveniently run &lt;code&gt;ngrok&lt;/code&gt; everywhere in our shell, without having to remember the path.&lt;/p&gt;

&lt;p&gt;Note that this depends on the shell that you are using. On &lt;code&gt;fish&lt;/code&gt; (the shell that I am currently using), I will set up &lt;code&gt;ngrok&lt;/code&gt; in my &lt;code&gt;$PATH&lt;/code&gt; like this in &lt;code&gt;.config/fish/config.fish&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/path/to/ngrok/:&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, restart your terminal, and you should be able to run &lt;code&gt;ngrok&lt;/code&gt; using &lt;code&gt;ngrok&lt;/code&gt; command in the shell.&lt;/p&gt;

&lt;p&gt;Now, we will start using &lt;code&gt;Ngrok&lt;/code&gt; in our web project. For the purpose of this tutorial, I have set up a simple web server using &lt;a href="http://bottlepy.org/docs/dev/index.html"&gt;Bottle Framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;cd&lt;/code&gt; to your web project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /path/to/your/project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, start the local web server. This depends on your project. For my project, since I only use a single file for my project (which is &lt;code&gt;main.py&lt;/code&gt;), I can start the local web server of my project like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;π python3 main.py
Bottle v0.12.19 server starting up &lt;span class="o"&gt;(&lt;/span&gt;using WSGIRefServer&lt;span class="o"&gt;())&lt;/span&gt;...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After start the web server, open another terminal and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;π ngrok http &amp;lt;PORT&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With &lt;code&gt;&amp;lt;PORT&amp;gt;&lt;/code&gt; is the port of your local web server. In my case, it is &lt;code&gt;8080&lt;/code&gt;, so I will type in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;π ngrok http 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After press Enter, you should see an interface that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ngrok by @inconshreveable                                                                                                                                (Ctrl+C to quit)

Session Status                online
Account                       Wumi4 (Plan: Free)
Version                       2.3.40
Region                        United States (us)
Web Interface                 http://127.0.0.1:4040
Forwarding                    http://b0be-2001-ee0-4bab-5020-5343-d3ed-89bc-e519.ngrok.io -&amp;gt; http://localhost:8080
Forwarding                    https://b0be-2001-ee0-4bab-5020-5343-d3ed-89bc-e519.ngrok.io -&amp;gt; http://localhost:8080

Connections                   ttl     opn     rt1     rt5     p50     p90
                              2       0       0.01    0.00    0.01    0.01
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, there are two different links in the &lt;code&gt;Forwarding&lt;/code&gt; part: One is &lt;code&gt;http&lt;/code&gt; and one is &lt;code&gt;https&lt;/code&gt;. Click on any of these links will lead to your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;So that's it! You have just learned how to use Ngrok to set up a temporary link that you can use to share it as a preview to everyone!&lt;/p&gt;

&lt;p&gt;I hope you enjoy this tutorial! This is my first blog post since July, so the post may have some errors.&lt;/p&gt;

&lt;p&gt;Ok, that's for all! Goodbye! 😄&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>ngrok</category>
    </item>
    <item>
      <title>Pro Tips to Search on Google 🔥</title>
      <author>Savio Martin</author>
      <pubDate>Sat, 16 Oct 2021 08:55:38 +0000</pubDate>
      <link>https://dev.to/saviomartin/pro-tips-to-search-on-google-4hpn</link>
      <guid>https://dev.to/saviomartin/pro-tips-to-search-on-google-4hpn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks 👋
&lt;/h2&gt;

&lt;p&gt;This is Savio here. I'm young dev with an intention to enhance as a successful web developer. I love building web apps with React. I have proved my superiority in frontend technologies.&lt;/p&gt;

&lt;p&gt;Today, I'd like to share 11 pro tips to search google!! 🚀&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-googling-is-must-have-skill"&gt;
  &lt;/a&gt;
  Why Googling is Must Have Skill?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SVoxCT4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303417635/Ydv0LRZsN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SVoxCT4h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303417635/Ydv0LRZsN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Googling is the most important skill a developer.&lt;/strong&gt; Most people don’t know how to google. Googling require a certain ingenuity and hack in order to find exactly what you are looking for. You don’t have to stop googling if the search engine is not finding your first query. There are many tricks you can use and here you can find the pro tips.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I tell people, ‘I have a Ph.D. from Google University.’ —&lt;/em&gt;&lt;em&gt;Kris Carr&lt;/em&gt;**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, here are the 11 pro tips to make you an efficient google. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-quotations-"&gt;
  &lt;/a&gt;
  1. Quotations (" ")
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxhDUHjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303453611/WB6PfQqIR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxhDUHjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303453611/WB6PfQqIR.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to get results with exact phrases, put the words inside quotes " ". Using quotes " ", google will only show results that have the exact words.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: "html 2021"&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-asterisk-"&gt;
  &lt;/a&gt;
  2. Asterisk ( * )
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m7T5XmsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303480411/NHi5pjEG4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m7T5XmsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303480411/NHi5pjEG4.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use ***** to fill missing words or phrases. This makes searching easy and will help you get the best results.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: how to * in JavaScript&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-range-"&gt;
  &lt;/a&gt;
  3. Range ( ... )
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2hAIwSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303508315/pFWrYXyuX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2hAIwSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303508315/pFWrYXyuX.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use &lt;strong&gt;...&lt;/strong&gt; to search within a range of numbers. It makes searching easy for number related topics, such as years, versions and so on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: JavaScript in 2010....2020&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-search"&gt;
  &lt;/a&gt;
  4. Search:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9xDAKBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303513857/uBZUCxZl0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9xDAKBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303513857/uBZUCxZl0.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use &lt;strong&gt;search:&lt;/strong&gt; to search anything within a website. Using this, you can directly search from google without switching from different websites.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: search:w3schools.com javascript arrays&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-and"&gt;
  &lt;/a&gt;
  5. AND
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VfVTpWw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303589044/SBjz8q6ni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VfVTpWw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303589044/SBjz8q6ni.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
To find the results that must contain some given words, &lt;strong&gt;AND&lt;/strong&gt; operator will be super useful. Helps in solving many problems in real life.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: React AND CSS&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-filetype"&gt;
  &lt;/a&gt;
  6. Filetype:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IpXBo_Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303595559/6rTMcMRUf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpXBo_Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303595559/6rTMcMRUf.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Using &lt;strong&gt;filetype&lt;/strong&gt;, we can fetch results that are in a definite filetype. This will help in finding ebooks, docs etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: React ebook filetype:pdf&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-or"&gt;
  &lt;/a&gt;
  7. OR
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-TLDHaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303607844/fIl55VtyE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-TLDHaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303607844/fIl55VtyE.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
We can use &lt;strong&gt;OR&lt;/strong&gt; Operator to get the result of one of the search terms. This will fetch results that should either have the first word or the second word.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: React OR Vue masterclass&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-define"&gt;
  &lt;/a&gt;
  8. Define:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--433bmxu4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303622379/VubTllxnoK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--433bmxu4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303622379/VubTllxnoK.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Using &lt;strong&gt;Define:&lt;/strong&gt; we can find the definition of particular words. It will help a lot in understanding the words, also become handy in exams or so.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: define:oops&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-related"&gt;
  &lt;/a&gt;
  9. Related:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FH3qbB0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303632241/L7irltdjB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FH3qbB0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303632241/L7irltdjB.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use &lt;strong&gt;related:&lt;/strong&gt; to find sites that are similar to other sites and do the same purpose. This will become super handy if you're looking for an alternatives of a site.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: related:w3schools.com&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-plus-"&gt;
  &lt;/a&gt;
  10. Plus ( + )
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ltmf_mRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303641648/o6QVUn47D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ltmf_mRC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303641648/o6QVUn47D.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use &lt;strong&gt;+&lt;/strong&gt; between two words to get results that must contain the two given words. This is very helpful if you find something that should be related with the other one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: JavaScript Oops+React&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#11-hyphen-"&gt;
  &lt;/a&gt;
  11. Hyphen ( - )
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEnKlFot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303652665/w_6n4Cag_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZEnKlFot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634303652665/w_6n4Cag_.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
You can use hyphen &lt;strong&gt;-&lt;/strong&gt; exclude certain words from results. This will ultimately help in retrieving the results you only wanted to, blocking spam stuffs.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;🔎 Example Search: react js -github&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  👀 Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Yeah, that's a wrap. Hope you enjoyed the article. Do not hesitate to share your feedback. I am on Twitter &lt;a href="https://twitter.com/SavioMartin7"&gt;@saviomartin7&lt;/a&gt;. Give a follow!&lt;/p&gt;

&lt;p&gt;Follow me on Github &lt;a href="https://github.com/saviomartin"&gt;@saviomartin&lt;/a&gt;, Don't miss my amazing projects! 💯&lt;/p&gt;

&lt;p&gt;Feedbacks are greatly appreciated! 🙌 Have an amazing day! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Lets connect
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/saviomartin"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/saviomartin7"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/saviomartin/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/teen_developer/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>21 Binary Tree Coding Questions for Java Developers</title>
      <author>javinpaul</author>
      <pubDate>Sat, 16 Oct 2021 08:17:47 +0000</pubDate>
      <link>https://dev.to/javinpaul/21-binary-tree-coding-questions-for-java-developers-325o</link>
      <guid>https://dev.to/javinpaul/21-binary-tree-coding-questions-for-java-developers-325o</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello devs, I have been sharing a lot of resources about programming job interviews like the &lt;a href="https://medium.com/javarevisited/10-best-books-for-data-structure-and-algorithms-for-beginners-in-java-c-c-and-python-5e3d9b478eb1"&gt;books&lt;/a&gt;, &lt;a href="https://medium.com/hackernoon/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927"&gt;courses&lt;/a&gt;, and some interview questions on the &lt;a href="https://medium.com/javarevisited/25-software-design-interview-questions-to-crack-any-programming-and-technical-interviews-4b8237942db0"&gt;software design&lt;/a&gt; and data structures like an &lt;a href="https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html#axzz5dCg1cNYo"&gt;array&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/top-21-string-programming-interview-questions-for-beginners-and-experienced-developers-56037048de45"&gt;string&lt;/a&gt;, and &lt;a href="https://medium.com/javarevisited/top-20-linked-list-coding-problems-from-technical-interviews-90b64d2df093"&gt;linked list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far, we have looked at only the &lt;strong&gt;linear data structures&lt;/strong&gt;, like an array and linked list, but all information in the real world cannot be represented in a linear fashion, and that's where tree data structure helps.&lt;/p&gt;

&lt;p&gt;A tree data structure is a hierarchical data structure that allows you to store hierarchical data like a family tree or office hierarchy. Depending on how you store data, there are different types of trees, such as a &lt;a href="http://javarevisited.blogspot.sg/2016/07/binary-tree-preorder-traversal-in-java-using-recursion-iteration-example.html"&gt;binary tree&lt;/a&gt;, where each node has, at most, two child nodes.&lt;/p&gt;

&lt;p&gt;Along with its close cousin &lt;a href="http://javarevisited.blogspot.sg/2017/04/recursive-binary-search-algorithm-in-java-example.html"&gt;binary search tree&lt;/a&gt;, it's also one of the most popular tree data structures. Therefore, you will find a lot of questions based on them, such as how to traverse them, count nodes, find depth, and check if they are balanced or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A key point to solving binary tree questions is a strong knowledge of theory,&lt;/strong&gt; like what is the size or depth of the binary tree, what is a leaf, and what is a node, as well as an understanding of the popular traversing algorithms, like pre-order, post-order, and in-order traversal.&lt;/p&gt;

&lt;p&gt;If you are not familiar with these concepts then I strongly suggest you to first go through a comprehensive data structure and algorithm course like&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;strong&gt;Data Structures and Algorithms: Deep Dive Using Java&lt;/strong&gt;&lt;/a&gt; which explains essential data structure in detail. It's also very affordable as you can purchase this course on just $9.9 on crazy Udemy sales which happen every now and then.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n0i6IB-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6eqdglvvzak748l1xkvq.jpeg" alt="Best Udemy course to learn Algorithms and Data Structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-21-binary-tree-based-coding-problems-for-interviews"&gt;
  &lt;/a&gt;
  Top 21 Binary Tree Based Coding Problems for Interviews
&lt;/h2&gt;

&lt;p&gt;Now that you know how to solve binary tree-based coding problem using &lt;a href="https://www.educative.io/courses/recursion-for-coding-interviews-in-java?affiliate_id=5073518643380224"&gt;recursion&lt;/a&gt; and some tips about solving tree-based coding problems, here is a list of popular binary tree-based coding questions from software engineer or developer job interviews:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the difference between binary and binary search trees? (answer)&lt;/strong&gt;&lt;br&gt;
A Binary Tree is a basic structure with a simple rule that no parent must have more than 2 children whereas the Binary Search Tree is a variant of the binary tree following a particular order with which the nodes should be organized. In binary search tree, values of nodes on left sub tree are less than or equal to root and values of nods on right sub trees are greater than or equal to root. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is a self-balanced tree? (answer)&lt;/strong&gt;&lt;br&gt;
Self-Balancing Binary Search Trees are height-balanced binary search trees that automatically keeps height as small as possible when insertion or deletion happens. Hence, for self-balancing BSTs, the minimum height must always be log₂(n) rounded down. In other word, A tree is balanced if, for every node in the tree, the height of its right and left subtrees differs by at most 1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the AVL Tree? (answer)&lt;/strong&gt;&lt;br&gt;
An AVL tree is a self-balancing binary search tree. It was the first such data structure to be invented. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you perform an inorder traversal in a given binary tree? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/08/binary-tree-inorder-traversal-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you print all nodes of a given binary tree using inorder traversal without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/08/binary-tree-inorder-traversal-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you implement a postorder traversal algorithm? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/10/binary-tree-post-order-traversal-in.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you traverse a binary tree in postorder traversal without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2017/05/binary-tree-post-order-traversal-in-java-without-recursion.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How are all leaves of a binary search tree printed? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/09/how-to-print-all-leaf-nodes-of-binary-tree-in-java.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you count a number of leaf nodes in a given binary tree? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.sg/2016/12/how-to-count-number-of-leaf-nodes-in-java-recursive-iterative-algorithm.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you perform a binary search in a given array? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.sg/2015/10/how-to-implement-binary-search-tree-in-java-example.html#axzz4wnEtnNB3"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you convert a given binary tree to double linked list in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write a program to find a depth of a given binary tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How is a binary search tree implemented? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.com/2015/10/how-to-implement-binary-search-tree-in-java-example.html#axzz4wnEtnNB3"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you perform preorder traversal in a given binary tree? (&lt;/strong&gt;&lt;a href="http://javarevisited.blogspot.com/2016/07/binary-tree-preorder-traversal-in-java-using-recursion-iteration-example.html#axzz5ArdIFI7y"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you traverse a given binary tree in preorder without recursion? (&lt;/strong&gt;&lt;a href="http://www.java67.com/2016/07/binary-tree-preorder-traversal-in-java-without-recursion.html"&gt;&lt;strong&gt;solution&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You have given a BST, where two nodes are swapped? How do you recover the original BST? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you convert a binary tree to a binary search tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find the largest BST subtree of a given binary tree in Java? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write a Java program to connect nodes at the same level as a binary tree? (solution)&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is a Trie data structure? (answer)&lt;/strong&gt;&lt;br&gt;
A trie is an ordered data structure, a type of search tree used to store associative data structures. It is also referred to as a Radix tree or Prefix tree.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What is the difference between the Binary tree and Trie?&lt;/strong&gt;&lt;br&gt;
Unlike a binary search tree, nodes in the trie do not store their associated key. Instead, a node's position in the trie defines the key with which it is associated. This distributes the value of each key across the data structure, and means that not every node necessarily has an associated value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are some of the most popular binary tree-based questions asked on Programming job interviews. You can solve them to become comfortable with tree-based problems.&lt;/p&gt;

&lt;p&gt;If you feel that your understanding of binary tree coding is inadequate and you can't solve these questions on your own, I suggest you go back and pick a good data structure and algorithm courses like &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-data-structures%2F"&gt;&lt;strong&gt;Easy to Advanced Data Structures&lt;/strong&gt;&lt;/a&gt; by William Fiset, a former Google engineer, and former &lt;strong&gt;ACM-ICPC world&lt;/strong&gt; finalist to refresh your knowledge about the binary tree and binary search tree.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-data-structures%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPEgrqxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/609/1%2A_A20XCHNQAu8miDP_jzeDQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need some more recommendations, here is my list of useful &lt;a href="http://javarevisited.blogspot.sg/2015/07/5-data-structure-and-algorithm-books-best-must-read.html"&gt;data structure algorithm books&lt;/a&gt; and &lt;a href="http://javarevisited.blogspot.sg/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;courses&lt;/a&gt; to start with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-youre-one-step-closer-to-the-coding-interview"&gt;
  &lt;/a&gt;
  Now You're One step closer to the Coding Interview
&lt;/h3&gt;

&lt;p&gt;These are some of the most common questions about binary tree data structure form coding interviews that help you to do really well in your interview.&lt;/p&gt;

&lt;p&gt;I have also shared a lot of &lt;a href="https://codeburst.io/100-coding-interview-questions-for-programmers-b1cf74885fb7"&gt;data structure questions&lt;/a&gt; on my &lt;a href="http://java67.com/"&gt;blog&lt;/a&gt;, so if you are really interested, you can always go there and search for them.&lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;common coding, data structure, and algorithm questions&lt;/strong&gt; are the ones you need to know to successfully interview with any company, big or small, for any level of programming job.&lt;/p&gt;

&lt;p&gt;If you are looking for a programming or software development job in 2021, you can start your preparation with this &lt;a href="https://medium.com/javarevisited/50-data-structure-and-algorithms-interview-questions-for-programmers-b4b1ac61f5b0"&gt;list of coding questions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This list provides good topics to prepare and also helps assess your preparation to find out your areas of strength and weakness.&lt;/p&gt;

&lt;p&gt;Good knowledge of data structure and algorithms is important for success in coding interviews and that's where you should focus most of your attention.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#further-learning"&gt;
  &lt;/a&gt;
  Further Learning*
&lt;/h4&gt;

&lt;p&gt;Here are some resources to level up your algorithms and coding skills for interviews:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/collection/5668639101419520/5671464854355968?affiliate_id=5073518643380224"&gt;Grokking the Coding Interview: Patterns for Coding Questions&lt;/a&gt;&lt;br&gt;
&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structures-and-algorithms-deep-dive-using-java%2F"&gt;Data Structures and Algorithms: Deep Dive Using Java&lt;/a&gt;&lt;br&gt;
&lt;a href="https://click.linksynergy.com/fs-bin/click?id=JVFxdTr9V80&amp;amp;subid=0&amp;amp;offerid=323058.1&amp;amp;type=10&amp;amp;tmpid=14538&amp;amp;RD_PARM1=https%3A%2F%2Fwww.udemy.com%2Fdata-structure-and-algorithms-analysis%2F"&gt;Data Structure and Algorithms Analysis --- Job Interview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fads-part1"&gt;Algorithms and Data Structure Part1 and 2&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.educative.io/collection/5642554087309312/5724822843686912?affiliate_id=5073518643380224"&gt;Data Structures in Java: An Interview Refresher&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.educative.io/collection/5668639101419520/5633779737559040?affiliate_id=5073518643380224"&gt;Grokking Dynamic Programming Patterns for Coding Interviews&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-data-structure-and-algorithms-resources-you-may-like"&gt;
  &lt;/a&gt;
  Other &lt;strong&gt;Data Structure and Algorithms Resources&lt;/strong&gt; you may like
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  75+ Coding Problems from Interviews (&lt;a href="http://www.java67.com/2018/05/top-75-programming-interview-questions-answers.html"&gt;questions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  10 Free Courses to learn Data Structure and Algorithms (&lt;a href="http://www.java67.com/2019/02/top-10-free-algorithms-and-data.html"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  10 Books to Prepare Technical Programming/Coding Job Interviews (&lt;a href="http://www.java67.com/2017/06/10-books-to-prepare-technical-coding-job-interviews.html"&gt;books&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  10 Courses to Prepare for Programming Job Interviews (&lt;a href="http://javarevisited.blogspot.sg/2018/02/10-courses-to-prepare-for-programming-job-interviews.html"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  100+ Data Structure and Algorithms Interview Questions (&lt;a href="http://www.java67.com/2018/06/data-structure-and-algorithm-interview-questions-programmers.html"&gt;questions&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  My favorite Free Algorithms and Data Structure Courses on FreeCodeCamp (&lt;a href="https://medium.freecodecamp.org/these-are-the-best-free-courses-to-learn-data-structures-and-algorithms-in-depth-4d52f0d6b35a?sk=15709c9f6c9b4bfc639b3b7a1f9b3ef5"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  30+ linked list interview questions with a solution (&lt;a href="https://javarevisited.blogspot.com/2017/07/top-10-linked-list-coding-questions-and.html"&gt;linked list&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  30+ array-based interview questions for programmers (&lt;a href="https://javarevisited.blogspot.com/2015/06/top-20-array-interview-questions-and-answers.html"&gt;array&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  40 Object Oriented Programming questions (&lt;a href="https://javarevisited.blogspot.com/2020/05/object-oriented-programming-questions-answers.html#axzz6vwZEctyQ"&gt;tips&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  5 Free Courses to learn Algorithms in-depth (&lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-free-data-structure-and-algorithm-courses-java--c-programmers.html"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  10 Algorithms books every Programmer should read (&lt;a href="http://www.java67.com/2015/09/top-10-algorithm-books-every-programmer-read-learn.html"&gt;books&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;  Top 5 Data Structure and Algorithms Courses for Programmers (&lt;a href="https://javarevisited.blogspot.com/2018/11/top-5-data-structures-and-algorithm-online-courses.html#axzz5YFaOvjsh"&gt;courses&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#closing-notes"&gt;
  &lt;/a&gt;
  Closing Notes
&lt;/h4&gt;

&lt;p&gt;Thanks, You made it to the end of the article ... Good luck with your programming interview! It's certainly not going to be easy, but by following this roadmap and guide, you are one step closer to becoming a Software Developer.&lt;/p&gt;

&lt;p&gt;If you like this article, then please share it with your friends and colleagues, and don't forget to follow &lt;a href="https://twitter.com/javinpaul"&gt;javinpaul&lt;/a&gt; on Twitter!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. --- If you need some FREE resources, you can check out this list of &lt;a href="https://medium.com/javarevisited/top-10-free-data-structure-and-algorithms-courses-for-beginners-best-of-lot-ad807cc55f7a"&gt;free data structure and algorithm courses&lt;/a&gt; to start your preparation.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>algorithms</category>
      <category>coding</category>
    </item>
    <item>
      <title>How to use Angular resolvers to prefetch beers to the party</title>
      <author>Dany Paredes</author>
      <pubDate>Sat, 16 Oct 2021 07:57:23 +0000</pubDate>
      <link>https://dev.to/this-is-angular/how-to-use-angular-resolver-to-prefetch-beers-into-the-party-49g3</link>
      <guid>https://dev.to/this-is-angular/how-to-use-angular-resolver-to-prefetch-beers-into-the-party-49g3</guid>
      <description>&lt;p&gt;When we go to a party, I love to have all beers ready to drink and take  one, but sometimes take time to pick from fridge to the table, and stay waiting is not a good experience.&lt;/p&gt;

&lt;p&gt;The same happen with our users work with our angular apps, we show the component, but the data is not there or the HTTP request take time, and they are waiting.&lt;/p&gt;

&lt;p&gt;A good solution is show a loading until get the data, but if my users want the beers ready from the beginning ? No problem because Angular have a solution, &lt;em&gt;The Resolvers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Resolvers help us to prefetch data, before the router finish start the transition between components, and store.&lt;/p&gt;

&lt;p&gt;The resolvers are helpful to avoid show an empty component, and  have our data ready, before move to the component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-angular-party"&gt;
  &lt;/a&gt;
  The Angular Party
&lt;/h2&gt;

&lt;p&gt;Let's put the resolver to test, building an app to show a list of beers from &lt;br&gt;
&lt;a href="https://api.punkapi.com/v2/beers"&gt;https://api.punkapi.com/v2/beers&lt;/a&gt; API, using a service.&lt;/p&gt;

&lt;p&gt;The app have 2 routes ComponentRoom and ResolverRoom, each one have a different user experience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Component Room, use the pipe async to get the data from the service.&lt;/li&gt;
&lt;li&gt;The Resolver Room, use a resolver to get the data and the component access to it using the route.snapshot.data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-we-need-to-do-"&gt;
  &lt;/a&gt;
  What we need to do ?
&lt;/h2&gt;

&lt;p&gt;We will be going step by step.&lt;/p&gt;

&lt;p&gt;1- Create an interface for mapping the API response.&lt;br&gt;
2- Create the beer service, to get the data and provide a subscription with the result.&lt;br&gt;
3- Create 3 components, BeerRoom and ResolverRoom and HomeComponent.&lt;br&gt;
4- Create the resolver.&lt;br&gt;
5- Register it and define the app routes.&lt;/p&gt;

&lt;p&gt;Also, we include another actors as Router, ActivateRoute, Observable etc… But let to works! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The source code is in &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#the-beer-service"&gt;
  &lt;/a&gt;
  The beer service
&lt;/h2&gt;

&lt;p&gt;We create an interface Beer and a service BeerService to provide the data from the API.&lt;/p&gt;

&lt;p&gt;The Beer interface have some properties of the beer API response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt;  &lt;span class="kr"&gt;interface&lt;/span&gt;  &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;tagline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;first_brewed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nl"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The BeerService require  inject the httpClient, to make request to the API, also using Rxjs to return  an  observable array of Beer.&lt;/p&gt;

&lt;p&gt;We import httpClient and Injectable decorator, and create the getBeers method to return the result of the request to &lt;a href="https://api.punkapi.com/v2/beers"&gt;https://api.punkapi.com/v2/beers&lt;/a&gt;, also using the delay operator it makes the response slow for 5 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./models/beer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;beers$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBeers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;getBeers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beers$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.punkapi.com/v2/beers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Read more about operators and services &lt;br&gt;
Delay Operator &lt;a href="https://www.learnrxjs.io/learn-rxjs/operators/utility/delay"&gt;https://www.learnrxjs.io/learn-rxjs/operators/utility/delay&lt;/a&gt;&lt;br&gt;
Services &lt;a href="https://angular.io/tutorial/toh-pt4"&gt;https://angular.io/tutorial/toh-pt4&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-home-component"&gt;
  &lt;/a&gt;
  The home component
&lt;/h2&gt;

&lt;p&gt;It is the home page with 2 links to get access to routes beer-room and resolver-room, using the directive routerLink.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Do you want to join to party and wait for the beers, or when you get in, the
    beers are ready ?
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn-group btn-group-block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;[routerLink]=&lt;/span&gt;&lt;span class="s"&gt;"['/beer-room']"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Component Room&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;[routerLink]=&lt;/span&gt;&lt;span class="s"&gt;"['/resolver-room']"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-secondary"&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Resolver Room&lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;More about router link &lt;a href="https://angular.io/api/router/RouterLink"&gt;https://angular.io/api/router/RouterLink&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-beerroom-component"&gt;
  &lt;/a&gt;
  The BeerRoom Component
&lt;/h2&gt;

&lt;p&gt;The component Room, get the data from the beer service and resolve the subscription&lt;br&gt;
into the template, we declare the variable beers as observable and assign the observable from our service to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../beer.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../models/beer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-beer-room&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./beer-room.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BeerRoomComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;beers$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;beerService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beers$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;beerService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beers$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Into the template, use the pipe async to wait until the subscription finish.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"beers$ | async as beers"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chip"&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let beer of beers"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"beer?.image_url"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"avatar avatar-sm"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        {{ beer.name }}
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Read more directives and pipes.&lt;br&gt;
ngIf &lt;a href="https://angular.io/api/common/NgIf"&gt;https://angular.io/api/common/NgIf&lt;/a&gt;&lt;br&gt;
ngFor &lt;a href="https://angular.io/api/common/NgForOf"&gt;https://angular.io/api/common/NgForOf&lt;/a&gt;&lt;br&gt;
Pipe Async &lt;a href="https://angular.io/api/common/AsyncPipe"&gt;https://angular.io/api/common/AsyncPipe&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-resolverroom-component"&gt;
  &lt;/a&gt;
  The ResolverRoom Component
&lt;/h2&gt;

&lt;p&gt;Close similar to the beer component, we inject ActivateRoute, it provides the data in the snapshot stored by the resolver into the beer variable.&lt;/p&gt;

&lt;p&gt;The vale of the beer into the snapshot is store into the beerRouterList variable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will see how we configure the resolver in the route configuration.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRoute&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../models/beer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./resolver-room.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ResolverRoomComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;beerRouterList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beerRouterList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;beers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar like the BeerComponent we iterate over the beer array using ngFor directive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"chip"&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let beer of beerRouterList"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;[src]=&lt;/span&gt;&lt;span class="s"&gt;"beer?.image_url"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"avatar avatar-sm"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      {{ beer.name }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done, next steps are creating the resolver and configure it with the route configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-resolver"&gt;
  &lt;/a&gt;
  The Resolver
&lt;/h2&gt;

&lt;p&gt;The key player in the article, &lt;em&gt;the resolver&lt;/em&gt;, The BeerResolverService it implements the Resolve interface, the resolver works a data provider used by the router to resolve&lt;br&gt;
during the navigation process and the router, wait for it to complete before it get activated.&lt;/p&gt;

&lt;p&gt;It implements the resolve methods, same like the component we inject the beerService and return the observable beers$, also update the type return to match with Observable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;RouterStateSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../beer.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Beer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../models/beer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BeerResolverService&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Resolve&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="na"&gt;beerService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BeerService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ActivatedRouteSnapshot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RouterStateSnapshot&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Beer&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beerService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beers$&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#register-resolver-and-create-the-routes"&gt;
  &lt;/a&gt;
  Register resolver and create the routes.
&lt;/h2&gt;

&lt;p&gt;We don't  go deep how works router in angular, you can read more in details into the official documentation, but here  define 2 routes for our app.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The path home, load the HomeComponent. &lt;/li&gt;
&lt;li&gt;The path beer-room, load the BeerRoomComponent.&lt;/li&gt;
&lt;li&gt;The path resolve-room load the component but with a special case, 
it uses the resolve to find the data provided by resolver and store into the beer variable beers and store into the into 
the route.snapshot.data with the key beers and the value returned by the subscription. &lt;/li&gt;
&lt;li&gt;The final path: ''' redirect any request to the home component.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HomeComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;beer-room&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BeerRoomComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resolver-room&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ResolverRoomComponent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;beers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BeerResolverService&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;redirectTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pathMatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-the-experience"&gt;
  &lt;/a&gt;
  Get the experience!!!
&lt;/h2&gt;

&lt;p&gt;Ready, we have the 2 experiences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Component you get into the room but not beer ready.&lt;/li&gt;
&lt;li&gt;The resolve allow you to move to the area only when it is ready.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;My personal opinion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have your room is getting a single value, I like to use the resolver.&lt;/p&gt;

&lt;p&gt;But If my component has multiple requests, I like to resolve the data into the component, because the user start to get results.&lt;/p&gt;

&lt;p&gt;What you think is better for our user, play with it and get your feeling!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/prefetch-data-with-resolver-angular?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hopefully, that will give you a bit of help with how and when to use resolver. If you enjoyed this post, share it!&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@merittthomas?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Meritt Thomas&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/beers?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>rxjs</category>
    </item>
    <item>
      <title>for of loop in JavaScript</title>
      <author>Amer Sikira</author>
      <pubDate>Sat, 16 Oct 2021 07:57:06 +0000</pubDate>
      <link>https://dev.to/amersikira/for-of-loop-in-javascript-2ce3</link>
      <guid>https://dev.to/amersikira/for-of-loop-in-javascript-2ce3</guid>
      <description>&lt;p&gt;&lt;em&gt;This post was originally published on &lt;a href="https://webinuse.com/for-of-loop-in-javascript/"&gt;webinuse.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have already written about loops in JavaScript in the article &lt;a href="https://webinuse.com/javascript-arrays-loops/"&gt;JavaScript Arrays Loops&lt;/a&gt;. Now we will introduce a new one – for of loop.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;for of loop&lt;/code&gt; is similar to &lt;code&gt;forEach&lt;/code&gt; loop, but with for of loop we can use &lt;code&gt;break&lt;/code&gt; and continue. This is something that makes it even more appealing.&lt;/p&gt;

&lt;p&gt;The syntax for &lt;code&gt;for of loop&lt;/code&gt; is pretty simple and straightforward.&lt;/p&gt;

&lt;p&gt;The first parameter of &lt;code&gt;for of loop&lt;/code&gt; is the loop variable and the second parameter is the array that we are iterating through. If we want to break out from the loop, we have to use keyword &lt;code&gt;break&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Result&lt;/span&gt;
&lt;span class="c1"&gt;//1&lt;/span&gt;
&lt;span class="c1"&gt;//2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we can skip iteration by using keyword &lt;code&gt;continue&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Result&lt;/span&gt;
&lt;span class="c1"&gt;//1&lt;/span&gt;
&lt;span class="c1"&gt;//3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Often, while working with loops we need to know the current index. We can accomplish that, with for of loop, by using &lt;code&gt;entries()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;py&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;php&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Result:&lt;/span&gt;
&lt;span class="c1"&gt;//[0, 'js']&lt;/span&gt;
&lt;span class="c1"&gt;//[1, 'py']&lt;/span&gt;
&lt;span class="c1"&gt;//[2, 'php']&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above &lt;a href="https://webinuse.com/javascript-console-log-tips-tricks/"&gt;&lt;code&gt;console.log&lt;/code&gt;&lt;/a&gt; returned the index and value of the current index, in the form of an array. But we can simplify this even further by destructuring the array. This means that we can extract values from the array, along with the index, as separate variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;py&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;php&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Result:&lt;/span&gt;
&lt;span class="c1"&gt;//0&lt;/span&gt;
&lt;span class="c1"&gt;//js&lt;/span&gt;
&lt;span class="c1"&gt;//1&lt;/span&gt;
&lt;span class="c1"&gt;//py&lt;/span&gt;
&lt;span class="c1"&gt;//2&lt;/span&gt;
&lt;span class="c1"&gt;//php&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we have to be careful if we are using destructuring. ALWAYS &lt;code&gt;index&lt;/code&gt; comes the first and &lt;code&gt;element&lt;/code&gt; comes the second. Also, we can use &lt;code&gt;const&lt;/code&gt; in this case, because every new iteration &lt;code&gt;for of loop&lt;/code&gt; creates a new scope.&lt;/p&gt;

&lt;p&gt;If you have any questions or anything you can find me on my &lt;a href="https://twitter.com/AmerSikira"&gt;Twitter&lt;/a&gt;, or you can read some of my other articles like &lt;a href="https://webinuse.com/what-is-object-destructuring-in-javascript/"&gt;What is object destructuring in JavaScript?&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>You don't need a personal website (and why I no longer have one)</title>
      <author>Kathryn DiPippo</author>
      <pubDate>Sat, 16 Oct 2021 07:16:05 +0000</pubDate>
      <link>https://dev.to/pepperwood/you-dont-need-a-personal-website-and-why-i-no-longer-have-one-3ap9</link>
      <guid>https://dev.to/pepperwood/you-dont-need-a-personal-website-and-why-i-no-longer-have-one-3ap9</guid>
      <description>&lt;p&gt;I often tell the story of how a simple website made me fall in love with programming. I was given a brief training assignment to build a website from scratch using HTML and CSS, with no prior knowledge beforehand. Something about the immediate back-and-forth between building the code and testing the display made something &lt;em&gt;click&lt;/em&gt;. Soon after, I would spend hours after work building neat dashboards and landing pages with server-less implementations. Google Sheets used as a replacement for databases, hundreds of lines of jQuery added for interactivity. All of this was incorporated into my personal site, which served as both a list of my projects and demonstration of my abilities throughout the years.&lt;/p&gt;

&lt;p&gt;Several years and hundreds of hours later, I am retiring my personal site. This decision was not easy to come to, but I know that my goals and abilities at this moment make it disadvantageous to keep it up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#preface-do-you-need-a-personal-site"&gt;
  &lt;/a&gt;
  Preface: Do you need a personal site?
&lt;/h1&gt;

&lt;p&gt;Before getting started, I would still advocate for creating your own personal site if there's a specific need that it fills. If you are a freelance website builder, a personal site is necessary as a way of showcasing your skills. Others with design-oriented positions may find that the complete creative control a personal site provides best projects your abilities than using other platforms like &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;. Additionally, a personal site can be useful as a central resource if you have a sizeable audience, even if the only content for display is a list of your social media profiles.&lt;/p&gt;

&lt;p&gt;I do not fall into the above categories. The goals of my own personal site are different from the goals of the examples listed above. Here are my main reasons for going forward with the deprecation and what may be insightful if you are skeptical about your own personal website:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-its-a-large-time-sink"&gt;
  &lt;/a&gt;
  1) It's a large time sink
&lt;/h1&gt;

&lt;p&gt;There's just something about my &lt;em&gt;personal&lt;/em&gt; website that makes me devote way more time than necessary to updating it. Routine visits to update the content to the latest updates inevitably become updates to the layout as well. The colors never feel correct, the layout is too short or too large or too cluttered, there's never enough transitions, there's too many transitions, etc. Every attempt to revamp the layout spins to a large, excessive TODO.&lt;/p&gt;

&lt;p&gt;I certainly have a greater appreciation towards UI designers. I am my own nightmare client, constantly asking for small, inconsequential changes on the website and never feeling satisifed.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-its-a-larger-time-sink-than-it-deserves-to-be"&gt;
  &lt;/a&gt;
  2) It's a larger time sink than it deserves to be
&lt;/h1&gt;

&lt;p&gt;I recommend this article for additional info, as well as some interesting insights in the comments:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/profydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtZgRnDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rw0GR28D--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3338/43691f8f-0edd-4c5e-bbc3-584d46d5f3c6.png" alt="Profy.dev"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bzr4zTLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--BJ-kbPDR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/140139/5881453b-c3cb-4812-a9e8-4c41db313b70.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/profydev/this-survey-among-60-hiring-managers-reveals-don-t-waste-your-time-on-a-react-portfolio-website-17ge" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Don't waste your time on a (React) portfolio website - 60+ hiring managers and a survey&lt;/h2&gt;
      &lt;h3&gt;Johannes Kettmann for Profy.dev ・ Aug 6 ・ 14 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;The core summary boils down to a common sentiment around (software developer) hiring managers: a personal website is appealing to hiring managers but do not increase a candidate's chances. The primary emphasis and discussion in job interviews mostly focus on GitHub projects and contributions.&lt;/p&gt;

&lt;p&gt;In order for a personal website to be effective, it needs to be &lt;em&gt;fully functional&lt;/em&gt; (i.e. works with every phone and browser) and &lt;em&gt;updated&lt;/em&gt;. You either spend an excessive amount of time to satisfy these requirements and gain nothing &lt;em&gt;or&lt;/em&gt; risk being judged poorly if the website breaks while the hiring manager looks at it or it contains outdated information.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-other-platforms-fulfill-the-need-for-a-personal-website-better"&gt;
  &lt;/a&gt;
  3) Other platforms fulfill the need for a personal website better
&lt;/h1&gt;

&lt;p&gt;Breaking it down, the problems that a personal website solve can boil down to the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A concise location with links to other platforms like LinkedIn, Twitter, etc.&lt;/li&gt;
&lt;li&gt;A portfolio with examples of project work with information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a programmer with a number of open source repositories, my GitHub profile is the best showcase of my skills as a developer. I could attach a link to these repos on my resume when reaching out to companies, but even that feels too low-level. Thankfully, &lt;a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#adding-a-bio-to-your-profile"&gt;GitHub released an update in mid 2020 that added a customizable bio section visible on your profile page&lt;/a&gt;. I can highlight specific repositories and recent blog posts (if I was cool, I would automatically update a list of recent blog posts with a GitHub Actions workflow).&lt;/p&gt;

&lt;p&gt;Other platforms cover any other holes that a personal site would cover, namely linking to Dev.to as a blogging platform and linking to LinkedIn for my professional credentials. These platforms are way easier to maintain and keep updated, without the mental push to want to update the UI in tandem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-should-replace-your-personal-website-instead"&gt;
  &lt;/a&gt;
  What should replace your personal website instead?
&lt;/h1&gt;

&lt;p&gt;Since GitHub will be the main focus of discussion in potential discussions with companies, it should also be the main focus when searching for a replacement to a personal site.&lt;/p&gt;

&lt;p&gt;The steps I am taking in the deprecation process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub will act as my work portfolio:

&lt;ul&gt;
&lt;li&gt;Update GitHub bio with clear links to my LinkedIn (for professional experience) and Dev.to (for blogging)&lt;/li&gt;
&lt;li&gt;Update GitHub projects with well defined READMEs&lt;/li&gt;
&lt;li&gt;Highlight a handful of my highlighted GitHub repositories. Write articles about their motivation and development.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;LinkedIn will act as a resume (although my actual resume is now hosted on &lt;a href="https://resume.io"&gt;resume.io&lt;/a&gt;)

&lt;ul&gt;
&lt;li&gt;Update LinkedIn to link back to GitHub and Dev.to profiles.&lt;/li&gt;
&lt;li&gt;Update profile to mimic Resume credentials list&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Dev.to will act as a blog

&lt;ul&gt;
&lt;li&gt;Update Dev.to profile to link back to GitHub and LinkedIn&lt;/li&gt;
&lt;li&gt;Write articles to fill in the remaining gaps a website would provide that a repo README can't fulfill, i.e. articles about obstacles encountered in projects and how you overcame them, reasoning behind selecting a specific toolchain, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this will amount to 3 social media platforms to represent myself professionally. The key and motivation was to create a network of clearly defined tools that are first-and-foremost easy to update.&lt;/p&gt;

&lt;p&gt;The true replacement for a personal site is something that will be updated on a regular basis above all else.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>github</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 10 Java Articles for this week</title>
      <author>javinpaul</author>
      <pubDate>Sat, 16 Oct 2021 07:06:43 +0000</pubDate>
      <link>https://dev.to/javinpaul/top-10-java-articles-for-this-week-248o</link>
      <guid>https://dev.to/javinpaul/top-10-java-articles-for-this-week-248o</guid>
      <description>&lt;p&gt;Hello Java Devs, &lt;br&gt;
Being a Java programmer, editor of a Medium publication, and a Java blogger (&lt;a href="//java67.com/"&gt;java67&lt;/a&gt; and &lt;a href="//javarevisited.blogspot.com/"&gt;Javarevisited&lt;/a&gt;, I love curation and I have been publishing Java articles since last 10 years.&lt;/p&gt;

&lt;p&gt;This year, I haven't been regular to Dev.to and hardly publishes any posts here so I thought to start a weekly Java article round up on Dev.to. &lt;/p&gt;

&lt;p&gt;I plan to publish this kind of article every week to create a routing and going to include top Java articles from Dev.to, medium, and other popular Java blogs to share with you all devs who love Java. &lt;/p&gt;

&lt;p&gt;So here is our first edition. If you want to get included in this roundup, feel free to contact me. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-top-66-object-oriented-programming-questions-for-interviews"&gt;
  &lt;/a&gt;
  1. Top 66 Object Oriented Programming Questions for Interviews
&lt;/h3&gt;

&lt;p&gt;This is my article, where I have shared common OOP questions every Java programmer should know by heart before going into interviews. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/javinpaul" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rr9YMUeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M48gEHzX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/101616/c488dc69-7dca-4855-b291-3711ce5ac7da.gif" alt="javinpaul"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/javinpaul/top-50-object-oriented-programming-questions-for-interviews-4po1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 66  Object Oriented Programming Questions for Interviews&lt;/h2&gt;
      &lt;h3&gt;javinpaul ・ Oct 10 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#development&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#2-stay-in-the-loop-with-objectoriented-programming-basics-by-jburroughs"&gt;
  &lt;/a&gt;
  2. Stay in the L(OOP) with Object-Oriented Programming Basics by &lt;a class="mentioned-user" href="https://dev.to/jburroughs"&gt;@jburroughs&lt;/a&gt;

&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jburroughs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7K0-XOS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vvj__Eh4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/706259/8bb55f32-ccfd-4c18-bca0-9e93c9ac4c77.jpg" alt="jburroughs"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jburroughs/stay-in-the-l-oop-with-object-oriented-programming-basics-1dn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Stay in the L(OOP) with Object-Oriented Programming Basics&lt;/h2&gt;
      &lt;h3&gt;Jordan Burroughs ・ Oct 9 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#oop&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#3-lambda-expressions-in-java-by-jryther"&gt;
  &lt;/a&gt;
  3. Lambda Expressions in Java by &lt;a class="mentioned-user" href="https://dev.to/jryther"&gt;@jryther&lt;/a&gt;

&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jryther" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12MBTuTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--VvWkp8Lc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370512/8b0630c8-0583-4d5e-ae14-89b1c12601a2.JPG" alt="jryther"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jryther/lambda-expressions-in-java-5gme" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Lambda Expressions in Java&lt;/h2&gt;
      &lt;h3&gt;Josh ・ Oct 11 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#computerscience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#4-faster-maven-builds-in-docker-by-nfrankel"&gt;
  &lt;/a&gt;
  4. Faster Maven builds in Docker by &lt;a class="mentioned-user" href="https://dev.to/nfrankel"&gt;@nfrankel&lt;/a&gt;

&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nfrankel" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7vLCbsXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--R0hcZ9L8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/362557/8deaa19c-75d9-49d9-abc8-016cc7a68bf6.jpeg" alt="nfrankel"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nfrankel/faster-maven-builds-in-docker-2584" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Faster Maven builds in Docker&lt;/h2&gt;
      &lt;h3&gt;Nicolas Frankel ・ Oct 10 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#maven&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#build&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#how-to-copy-files-in-java-example"&gt;
  &lt;/a&gt;
  How to copy files in Java? Example
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/javinpaul" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rr9YMUeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M48gEHzX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/101616/c488dc69-7dca-4855-b291-3711ce5ac7da.gif" alt="javinpaul"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/javinpaul/how-to-copy-files-in-java-example-3clf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to copy files in Java? Example&lt;/h2&gt;
      &lt;h3&gt;javinpaul ・ Oct 13 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#coding&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#be-careful-of-this-java-optional-method-by-jarjanazy"&gt;
  &lt;/a&gt;
  Be careful Of This Java Optional Method by &lt;a class="mentioned-user" href="https://dev.to/jarjanazy"&gt;@jarjanazy&lt;/a&gt;

&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jarjanazy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WQpyPWc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--q5yFkYTj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/595508/25bfab90-0a98-4678-8270-4fa40d43b82a.JPG" alt="jarjanazy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jarjanazy/be-careful-of-this-java-optional-method-439" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Be careful Of This Java Optional Method&lt;/h2&gt;
      &lt;h3&gt;Abdulcelil Cercenazi ・ Oct 13 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#what-does-mean-in-java"&gt;
  &lt;/a&gt;
  What does  mean in Java?
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/maddy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3VZWo3Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--s0X8YNi0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/578377/8c9867f9-a6e5-44db-951e-ab4f0d525cdb.jpg" alt="maddy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/maddy/what-does-t-mean-in-java-a2e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What does &amp;lt;T&amp;gt; mean in Java?&lt;/h2&gt;
      &lt;h3&gt;Maddy ・ Oct 11 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#effective-java-strive-for-failure-atomicity"&gt;
  &lt;/a&gt;
  Effective Java: Strive for Failure Atomicity
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kylec32" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZAP85Ry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--C2hzcMoR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9832/160703.png" alt="kylec32"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kylec32/effective-java-strive-for-failure-atomicity-4agd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Effective Java: Strive for Failure Atomicity &lt;/h2&gt;
      &lt;h3&gt;Kyle Carter ・ Oct 10 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#java&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#effective&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#exceptions&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#5-devops-books-for-senior-developers"&gt;
  &lt;/a&gt;
  5 DevOps books for Senior Developers
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#-medium-httpsmediumcomjavarevisited5bestdevopsbooksforexperienceddevelopers78f9b4c5e4d5-"&gt;
  &lt;/a&gt;
  &lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javarevisited/5-best-devops-books-for-experienced-developers-78f9b4c5e4d5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQcHdrGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/fit/c/96/96/0%2Au9Ha3uTCjEmW_3gn.gif" alt="javinpaul"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javarevisited/5-best-devops-books-for-experienced-developers-78f9b4c5e4d5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Best DevOps Books for Experienced Developers | by javinpaul | Javarevisited | Oct, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;javinpaul ・ &lt;time&gt;Oct 13, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#five-mistakes-to-avoid-in-reactive-java"&gt;
  &lt;/a&gt;
  Five Mistakes to Avoid in Reactive Java
&lt;/h3&gt;

&lt;p&gt;How not to look like a noob.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javarevisited/five-mistakes-to-avoid-in-reactive-java-786927ffd2f6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMzOwgNg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AOgikgnMBnlWHCGpa7QACpA.jpeg" alt="Randal Kamradt Sr"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javarevisited/five-mistakes-to-avoid-in-reactive-java-786927ffd2f6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Five Mistakes to Avoid in Reactive Java | by Randal Kamradt Sr | Javarevisited | Oct, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Randal Kamradt Sr ・ &lt;time&gt;Oct 11, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;That's all for this week. If you have any good article which should be in this list, feel free to suggest in comments. &lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>beginners</category>
      <category>development</category>
    </item>
  </channel>
</rss>
