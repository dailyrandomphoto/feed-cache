<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting Started With AWS and Useful Learning Resources</title>
      <author>Chandu</author>
      <pubDate>Tue, 04 Jan 2022 10:23:27 +0000</pubDate>
      <link>https://dev.to/chandramouli/getting-started-with-aws-and-useful-learning-resources-507i</link>
      <guid>https://dev.to/chandramouli/getting-started-with-aws-and-useful-learning-resources-507i</guid>
      <description>&lt;p&gt;&lt;strong&gt;Amazon Web Services(AWS)&lt;/strong&gt; is the worldâ€™s most comprehensive and broadly adopted cloud platform, offering over 200 fully-featured services from data centers globally. AWSâ€™s TTM revenue was $37.549 billion as of Q1 2020 according to their earnings results , or roughly 14% of Amazon's total revenue (slide 11 in the same deck) for the same TTM period.&lt;/p&gt;

&lt;p&gt;Useful Learning Resources&lt;br&gt;
&lt;strong&gt;1) AWS Training Center (FREE)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of best place to learn about AWS and it maintained and updated by AWS officially. &lt;a href="https://aws.amazon.com/training/"&gt;AWS Training Center&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) AWS Skill Builder (FREE)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Skill Builder is Collections of courses selected by AWS experts to give you a path to your learning goals and the best part is that Courses that we can learn on our own time, at our own place by digital training provided by AWS &lt;a href="https://explore.skillbuilder.aws/learn"&gt;AWS Skill Builder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) AWS Educate Program(FREE)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are a student, AWS offers educate program in which you can get $100 credits of AWS account for free. So that we can learn aws services hands-on using the credits &lt;a href="https://aws.amazon.com/education/awseducate/"&gt;AWS Educate Program&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) AWS Documentation and Whitepapers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/documentation/?lipi=urn%3Ali%3Apage%3Ad_flagship3_pulse_read%3BXGCAMyMYRP6eaUmJ3Z13Og%3D%3D"&gt;AWS Documentation&lt;/a&gt; is like a virtual encyclopedia of tools, terms, training, and everything AWS. Youâ€™ll find case studies, tutorials, cloud computing basics, and so much more. Additionally, youâ€™ll find &lt;a href="https://aws.amazon.com/whitepapers/?whitepapers-main.sort-by=item.additionalFields.sortDate&amp;amp;whitepapers-main.sort-order=desc"&gt;AWS Whitepapers&lt;/a&gt; that give users access to technical AWS content that is written by AWS and individuals from the AWS community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) AWS Workshops&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS workshops is a dedicated resource for curated workshops and training Modules and The workshops will teach you how to modernize various aspects of your business and provide you with detailed insight into what technology will drive this change. &lt;a href="https://awsworkshop.io/"&gt;AWS Workshops&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) YouTube&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/amazonwebservices"&gt;Official AWS Channel&lt;/a&gt; have huge tutorials&lt;/li&gt;
&lt;li&gt;AWS Full Course - Learn AWS In 10 Hours by &lt;a href="https://youtu.be/k1RI5locZE4"&gt;Edureka&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS Basics for Beginners - Full Course by &lt;a href="https://www.youtube.com/watch?v=ulprqHHWlng"&gt;FreeCodeCamp&lt;/a&gt; and &lt;a href="https://www.youtube.com/c/digitalcloudtraining"&gt;Neal Davis&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/digitalcloudtraining"&gt;Digital Cloud Training&lt;/a&gt; by Neal Davis&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/c/ExamProChannel/"&gt;ExamPro&lt;/a&gt; by Andrew Brown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;7) Courses&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS has partnered with edX to bring free quality courses and has been proving many courses(Free) on &lt;a href="https://www.edx.org/school/aws"&gt;edX&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Ultimate AWS Certified Cloud Practitioner by Stephane Marek on &lt;a href="https://www.udemy.com/course/aws-certified-cloud-practitioner-new/"&gt;Udemy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Learn AWS-some cloud skills by &lt;a href="https://acloudguru.com/training-library/aws-cloud-training"&gt;A Cloud Guru&lt;/a&gt; and they provide weekly free courses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Happy Learning !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bye&lt;/strong&gt; ðŸ‘‹&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>aws</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How Does JavaScript Even Work? Things Which 90% of JavaScript Developers Don't Know! (Part 1)</title>
      <author>Sai Teja</author>
      <pubDate>Tue, 04 Jan 2022 10:20:29 +0000</pubDate>
      <link>https://dev.to/saiteja13427/how-does-javascript-even-work-things-which-90-of-javascript-developers-dont-know-part-1-145b</link>
      <guid>https://dev.to/saiteja13427/how-does-javascript-even-work-things-which-90-of-javascript-developers-dont-know-part-1-145b</guid>
      <description>&lt;p&gt;JavaScript was initially developed as a frontend scripting language to fulfil the lacking dynamic behaviour of the web by Brendan Eich of Netscape for their Netscape Navigator browser. &lt;/p&gt;

&lt;p&gt;From there, Javascript has today grown into such a huge ecosystem that you can develop applications on the web, mobile and desktop with just javascript which is impossible with any other language.&lt;/p&gt;

&lt;p&gt;Now, if you have ever worked with JavaScript, you would have heard that Javascript is single-threaded, non-blocking and it is asynchronous as well. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;Isn't that counter-intuitive? *&lt;/em&gt; How can something be single-threaded and asynchronous as well?&lt;/p&gt;

&lt;p&gt;Well, there are a lot of such things in JS and to understand it all, you need a deep dive into JS and its working.&lt;/p&gt;

&lt;p&gt;So, let us try and understand the working on javascript which 90% of JS developers don't know!! &lt;/p&gt;

&lt;p&gt;Firstly, let us see what is &lt;strong&gt;ECMA&lt;/strong&gt; and what do these specifications tell us about JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ecma-script"&gt;
  &lt;/a&gt;
  ECMA Script
&lt;/h2&gt;

&lt;p&gt;ECMA basically stands for &lt;strong&gt;European Computer Manufacturer's Association&lt;/strong&gt; and it defines a trademark standard for scripting languages like JavaScript and the JScript (Developed by Microsoft).&lt;/p&gt;

&lt;p&gt;You would have heard ES6, ES7 while working with JS, the ES here stands for ECMAScript.&lt;/p&gt;

&lt;p&gt;ECMA puts a lot of specifications in place related to notations, operations, syntax, functions, classes etc.&lt;/p&gt;

&lt;p&gt;You can refer to all these specifications here: &lt;a href="https://tc39.es/ecma262/"&gt;ECMAScript&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JWUvCRoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640411343039/x9MG5HKz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JWUvCRoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640411343039/x9MG5HKz9.png" alt="image.png" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But ECMA doesn't have any documentation on the event loop, non-blocking, asynchronous JS.&lt;/p&gt;

&lt;p&gt;Hmm, so where do we go now? We go to the JS engines!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Note&lt;/code&gt;&lt;/strong&gt;: If you want to read more about the advent of JS and its whole history, here is a fantastic blog:  &lt;a href="https://itnext.io/why-are-we-creating-a-javascript-only-world-wide-web-db8c3a340b9"&gt;Why are we creating a JavaScript-only World Wide Web?&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-engines"&gt;
  &lt;/a&gt;
  JavaScript Engines
&lt;/h2&gt;

&lt;p&gt;A JavaScript engine is basically a software that executes JavaScript code. There are various Javascript engines available. The most famous engines among the modern  &lt;a href="https://en.wikipedia.org/wiki/Just-in-time_compilation"&gt;Just in Time Compilation&lt;/a&gt;  engines are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://v8.dev/"&gt;V8&lt;/a&gt;&lt;/strong&gt; ( Developed by &lt;strong&gt;Google&lt;/strong&gt; | Used in chrome, Node.js runtime, Deno runtime)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://spidermonkey.dev/"&gt;Spider Monkey&lt;/a&gt;&lt;/strong&gt; (Developed by &lt;strong&gt;Mozilla&lt;/strong&gt; | Used in Firefox)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://webkit.org/"&gt;WebKit&lt;/a&gt;&lt;/strong&gt; (Developed by &lt;strong&gt;Apple&lt;/strong&gt; | Used in Safari)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Chakra&lt;/strong&gt; (Developed by &lt;strong&gt;Microsoft&lt;/strong&gt; | Used in Internet Explorer)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check out the list of all JS engines here:  &lt;a href="https://en.wikipedia.org/wiki/List_of_ECMAScript_engines"&gt;List of ECMAScript engines (Wikipedia)&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, as V8 is the most used javascript engine, from now whatever we discuss will be its implementation. Though the other mentioned engines are also similar with a few differences.&lt;/p&gt;

&lt;p&gt;So, the V8 engine is what makes Javascript single-threaded as it comes with a single call stack (also called as the execution stack) or single thread.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pvwPD5Fr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640581401209/GsKemb3Uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pvwPD5Fr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640581401209/GsKemb3Uz.png" alt="V8 Architecture.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The V8 engine comes with two main components which are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Call stack&lt;/strong&gt;: This is where all the execution happens.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Heap&lt;/strong&gt;: This is where the memory allocation happens. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But even &lt;strong&gt;standalone V8 doesn't make JS asynchronous&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, how does it become asynchronous? Keep Reading.&lt;/p&gt;

&lt;p&gt;So, let us try to understand the single-threaded nature of JS first and what does it mean. Then we will see how does it become asynchronous and what problem does it solve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-and-the-single-thread"&gt;
  &lt;/a&gt;
  Javascript and the Single Thread
&lt;/h2&gt;

&lt;p&gt;Let us get this single thread concept right!&lt;/p&gt;

&lt;p&gt;Javascript being single-threaded means that there is only one call stack provided by the engine. All the execution happens one block after another in a sequential way. That means that all the upcoming code should wait until the current block of code is being executed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One Thread == One Call Stack == One Thing at a Time&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is called the synchronous execution of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Let me tell you that, &lt;strong&gt;Javascript can be multithreaded as well&lt;/strong&gt; for example we can use  &lt;a href="https://blog.logrocket.com/node-js-multithreading-what-are-worker-threads-and-why-do-they-matter-48ab102f8b10/"&gt;multiple threads in Node.js&lt;/a&gt;  using a module called &lt;code&gt;worker_threads&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, why do people call JavaScript a single-threaded language? It is because of the implementation of JS engines like V8 in the browsers which makes JS single-threaded because these engines have got only one call stack as already mentioned.&lt;/p&gt;

&lt;p&gt;Now as you understood this, let us try a few programs with the main thread to understand the call stack and the problem with it.&lt;/p&gt;

&lt;p&gt;Continue Reading the Blog &lt;a href="https://lightmap.dev/how-does-javascript-even-work-1"&gt;Here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Create React App - Mind Map. Part 8 of 10: Next Level</title>
      <author>101samovar</author>
      <pubDate>Tue, 04 Jan 2022 09:30:19 +0000</pubDate>
      <link>https://dev.to/101samovar/create-react-app-mind-map-part-8-of-10-next-level-4mlp</link>
      <guid>https://dev.to/101samovar/create-react-app-mind-map-part-8-of-10-next-level-4mlp</guid>
      <description>&lt;p&gt;Before adding items of the next level we need to zoom out the chart.&lt;br&gt;
Because thereâ€™s space left on the screen.&lt;br&gt;
We have created a special zoom toolbar.&lt;br&gt;
Letâ€™s move it from the Content component to the Chart component.&lt;br&gt;
The toolbar and zoomMenu.&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our channel:&lt;br&gt;
&lt;a href="https://youtu.be/WKmaLD0Ex-Y"&gt;https://youtu.be/WKmaLD0Ex-Y&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Day 69 of 100 Days of Code &amp; Scrum: I'm Now a Professional Scrumbag!</title>
      <author>Rammina</author>
      <pubDate>Tue, 04 Jan 2022 09:27:04 +0000</pubDate>
      <link>https://dev.to/rammina/day-69-of-100-days-of-code-scrum-im-now-a-professional-scrumbag-220j</link>
      <guid>https://dev.to/rammina/day-69-of-100-days-of-code-scrum-im-now-a-professional-scrumbag-220j</guid>
      <description>&lt;p&gt;Hello there, everyone!&lt;/p&gt;

&lt;p&gt;I have great news to share, it's that I passed the Professional Scrum Master I (PSM I) certification exam and I'm now a certified &lt;strong&gt;Scrumbag&lt;/strong&gt;. I passed with a score of 92.5%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Score Image&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dPwrTVy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7ra374rp0ihg5ddnx8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPwrTVy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7ra374rp0ihg5ddnx8d.png" alt="Rammina PSM I Score" width="880" height="726"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Badge Image&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tsHNX0EQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3kl9l6yww1zj3m1h037.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tsHNX0EQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3kl9l6yww1zj3m1h037.png" alt="PSM I Badge" width="300" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Does this mean I'm ready to work as a Scrum Master? No, not at all. I'm just familiar with the concepts and mechanisms of the Scrum framework, and that's all there is to it. &lt;strong&gt;It takes way more than just studying for an exam to be a great Scrum Master.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, I planned out what I'll be doing for this week, a lot of work related to improving my company site.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I got a lot of stuff done, which included adding an &lt;a href="https://www.rammina.com/affiliates"&gt;Affiliates page&lt;/a&gt; for my company site, fixed a bug in which there were two footers in the error page, replaced my Ghost CMS with a new one, and added Github repository links to each of my projects in the &lt;a href="https://www.rammina.com/portfolio"&gt;Portfolio page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I set up my weekly Sprint Goals, which will focus on polishing the design of my &lt;a href="https://www.rammina.com"&gt;company site&lt;/a&gt;, adding more sections to certain pages, bug fixes, and other enhancements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#higher-priority"&gt;
  &lt;/a&gt;
  Higher Priority
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;add more details to portfolio projects, like a "View More Details" that shows on a modal the technology stack and features of a specific project.&lt;/li&gt;
&lt;li&gt;add more sections to other pages and make them more detailed:

&lt;ul&gt;
&lt;li&gt;the &lt;a href="https://www.rammina.com/services"&gt;Services page&lt;/a&gt; could include specific sections for "Website Development," such as Frontend Web Development and Backend Web Development, what kind of technology stacks are used, and so on.&lt;/li&gt;
&lt;li&gt;Digital advertising, for example, could include different types of services and techniques such as email marketing, social media marketing, and the likes.&lt;/li&gt;
&lt;li&gt;Writing also could include different types of writing services, including articles, blogs, and etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;add a small subsection on the Contact section that says something like "or you can contact us via e-mail at &lt;a href="mailto:ramminadevdesign@gmail.com"&gt;&lt;/a&gt;&lt;a href="mailto:ramminadevdesign@gmail.com"&gt;ramminadevdesign@gmail.com&lt;/a&gt; or call us on number" below the submit button for the form.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#lower-priority"&gt;
  &lt;/a&gt;
  Lower Priority
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;add tags functionality for each blog post to make it easier to categorize.&lt;/li&gt;
&lt;li&gt;add lazy loading and infinite scrolling for all blog posts page (so data that is loaded by batches to reduce build time).&lt;/li&gt;
&lt;li&gt;add pages for different users and authors.&lt;/li&gt;
&lt;li&gt;allow registered users to comment on blog posts (going to use Disqus).&lt;/li&gt;
&lt;li&gt;add quality-of-life features:

&lt;ul&gt;
&lt;li&gt;filtering by tags&lt;/li&gt;
&lt;li&gt;search functionality&lt;/li&gt;
&lt;li&gt;sort blog posts and authors&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;add share on social media button (e.g. Twitter, LinkedIn, Facebook) for each blog post.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;continue to learn more about Scrum, through reading articles and watching videos.&lt;/li&gt;
&lt;li&gt;will be put to the sideline now that I have already passed the Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! Have a good day!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h2&gt;

&lt;p&gt;Main resources I used for studying for the PSM I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/open-assessments"&gt;Open Assessments | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Stake Polygon MATIC to Earn Passive Income in 2022</title>
      <author>Course Probe</author>
      <pubDate>Tue, 04 Jan 2022 09:07:34 +0000</pubDate>
      <link>https://dev.to/courseprobe/how-to-stake-polygon-matic-to-earn-passive-income-in-2022-5gao</link>
      <guid>https://dev.to/courseprobe/how-to-stake-polygon-matic-to-earn-passive-income-in-2022-5gao</guid>
      <description>&lt;p&gt;A lot of people that come to me for advise think the only way to make money in crypto is through trading, and because this seems so complex most of them end up looking elsewhere.&lt;/p&gt;

&lt;p&gt;Earning money with Crypto, is super simple and Trading is not the only way. That's why I decided to offer another view into Crypto Earning through Staking and this time explain how to earn passive income in 2022 staking Matic.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-much-can-i-earn-with-staking-"&gt;
  &lt;/a&gt;
  How much can I earn with Staking ?
&lt;/h3&gt;

&lt;p&gt;Staking Polygpon MATIC can give you from &lt;strong&gt;11% up to 15%&lt;/strong&gt; Annual Percentage Rate (APR). You can either use &lt;a href="https://accounts.binance.com/en/register?ref=K5XIYGD8"&gt;Binance&lt;/a&gt; or &lt;a href="https://crypto.com/app/az7qh3qye4"&gt;Crypto.com&lt;/a&gt; to buy and stake your Shiba Inu coins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Staking 500 Matic for 360 days would return 75 additional coins&lt;/strong&gt; in your account. &lt;/p&gt;

&lt;p&gt;For long term holders this is an ideal strategy since the coin might increase it's value in a couple years,at current market prices staking 1210$ would return 182$.&lt;/p&gt;

&lt;p&gt;This is not financial advise, just letting you know some scenarios and how staking could work. I encourage you to research more about the coin and this option.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-stake-polygon-matic-in-binance-"&gt;
  &lt;/a&gt;
  How can I stake Polygon MATIC in Binance ?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Get a Binance Account with 10% discount &lt;a href="https://accounts.binance.com/en/register?ref=K5XIYGD8"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Fund your Account to Buy Matic or Deposit your tokens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Click Staking under Earn in the Menu.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Under Locked Staking search Shiba Inu and click Stake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Enter the amount you wish to stake and click confirm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--px-qprtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0hlfe08emucefnwn308.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--px-qprtB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0hlfe08emucefnwn308.png" alt="Binance Staking Matic" width="880" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JoYMXa60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj155q579y568jdv0z9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoYMXa60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yj155q579y568jdv0z9a.png" alt="Staking Matic" width="853" height="606"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Another option for staking Polygon MATIC is Crypto.com&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Get your Crypto.com Account &lt;a href="https://crypto.com/app/az7qh3qye4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Buy or transfer your Matic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Click the icon in the middle of the bottom bar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Select Earn, then Start Earning now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Select Matic and follow the instructions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nM6m7-xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzlzmclkcyw0bxkf4sfh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nM6m7-xo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tzlzmclkcyw0bxkf4sfh.png" alt="Crypto.com Earn" width="252" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#help-and-support"&gt;
  &lt;/a&gt;
  Help and Support:
&lt;/h4&gt;

&lt;p&gt;I'm available to help you out with any questions you might have through Discord and Telegram:&lt;/p&gt;

&lt;p&gt;Discord: &lt;a href="https://discord.gg/kTQpdTMArN"&gt;https://discord.gg/kTQpdTMArN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Telegram: &lt;a href="https://t.me/cryptominingadvisor"&gt;https://t.me/cryptominingadvisor&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-does-crypto-staking-means-"&gt;
  &lt;/a&gt;
  What does Crypto Staking means ?
&lt;/h3&gt;

&lt;p&gt;Staking simply stands for holding a cryptocurrency in a wallet for a fixed period, then earning interest on it. The reward you earn from staking varies depending on the length of time you hold it. The longer the stake duration, the higher your returns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of staking crypto&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's an easy way to earn interest on your cryptocurrency holdings.&lt;/li&gt;
&lt;li&gt;You don't need any equipment for crypto staking like you would for crypto mining.&lt;/li&gt;
&lt;li&gt;You're helping to maintain the security and efficiency of the blockchain.&lt;/li&gt;
&lt;li&gt;It's more environmentally friendly than crypto mining.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;This post includes affiliate links; The author may receive compensation if you purchase products or services from the links provided in this article to help support this publication at no extra cost for you.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>crypto</category>
    </item>
    <item>
      <title>Windows, WSL, Docker, and Free Starters</title>
      <author>Sm0ke</author>
      <pubDate>Tue, 04 Jan 2022 09:07:34 +0000</pubDate>
      <link>https://dev.to/sm0ke/windows-wsl-docker-and-free-starters-4ndn</link>
      <guid>https://dev.to/sm0ke/windows-wsl-docker-and-free-starters-4ndn</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents &lt;a href="https://docs.appseed.us/content/how-to/install-wsl"&gt;how to install WSL&lt;/a&gt; and &lt;a href="https://docs.appseed.us/content/how-to/install-docker-on-windows"&gt;Docker on Windows&lt;/a&gt; and later execute a few open-source samples on top of this popular virtualization stack. For newcomers, &lt;strong&gt;WSL&lt;/strong&gt; is a layer provided by Microsoft that allows us to execute all commands exposed by a native Linux distro and &lt;strong&gt;Docker&lt;/strong&gt; is a popular virtualization software used to deliver and execute software programs in isolated environments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#install-wsl"&gt;
  &lt;/a&gt;
  âœ¨ Install WSL
&lt;/h2&gt;

&lt;p&gt;The Windows Subsystem for Linux lets developers run a GNU/Linux environment directly on Windows. The latest version is WSL 2, which powers the Windows Subsystem for Linux to run ELF64 Linux binaries on Windows.&lt;/p&gt;

&lt;p&gt;The installation and overall  management can be executed via a PowerShell terminal using simple commands:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;List available WSL distros&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wsl &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt;

NAME            FRIENDLY NAME
Ubuntu          Ubuntu
Debian          Debian GNU/Linux
kali-linux      Kali Linux Rolling
openSUSE-42     openSUSE Leap 42
SLES-12         SUSE Linux Enterprise Server v12
Ubuntu-16.04    Ubuntu 16.04 LTS
Ubuntu-18.04    Ubuntu 18.04 LTS
Ubuntu-20.04    Ubuntu 20.04 LTS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Install Ubuntu in WSL&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wsl &lt;span class="nt"&gt;--install&lt;/span&gt; Ubuntu
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Check Current Version&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wsl &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;Update from &lt;strong&gt;WSL 1&lt;/strong&gt; to &lt;strong&gt;WSL 2&lt;/strong&gt; (recommended version)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wsl &lt;span class="nt"&gt;--set-version&lt;/span&gt; Ubuntu 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once WSL is installed and we have a usable Linux Distro, we can move forward and install Docker Desktop.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#install-docker"&gt;
  &lt;/a&gt;
  âœ¨ Install Docker
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. Before running this simple setup, make sure your workstation provides all requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 11/10 64Bit&lt;/li&gt;
&lt;li&gt;WSL - up &amp;amp; running&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Access the &lt;a href="https://www.docker.com/products/docker-desktop"&gt;download page&lt;/a&gt; and download the installer. Double-click &lt;code&gt;Docker Desktop Installer.exe&lt;/code&gt; and execute the installer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When prompted, ensure the &lt;strong&gt;Enable Hyper-V Windows Features&lt;/strong&gt; or the &lt;strong&gt;Install required Windows components for WSL 2&lt;/strong&gt; option is selected on the Configuration page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Docker Desktop does not start automatically after installation. To start Docker Desktop we need to locate the app in the Windows menu and start the service.&lt;/p&gt;

&lt;p&gt;If all goes well we should be able to execute this test command in the terminal and also access the UI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 80:80 docker/getting-started 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0h7de4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zhof83gf1bhi1q5omfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0h7de4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zhof83gf1bhi1q5omfo.png" alt="Docker Desktop UI." width="600" height="317"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;With Docker and WSL up &amp;amp; running, we start using this virtualization layer by installing and playing with a few open-source apps.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#django-dashboard-material"&gt;
  &lt;/a&gt;
  âœ¨ Django Dashboard Material
&lt;/h3&gt;

&lt;p&gt;Simple, open-source crafted with database, authentication, and Docker support on top of a modern Bootstrap 5 design. The codebase uses Django 3.2.6 LTS and simple Gulp tooling for assets management (SCSS, JS).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-material"&gt;Django Dashboard Material&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://django-material-dashboard.appseed-srv1.com/"&gt;Django Dashboard Material&lt;/a&gt; - LIVE App&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start the app using provided Docker setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #1 - Download sources from the public repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-dashboard-material.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-dashboard-material
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #2 - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxkZEgce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cafa3x3lco0b302y4lk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxkZEgce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cafa3x3lco0b302y4lk.png" alt="Django Material Dashboard - Start in Docker and WSL." width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#flask-pixel-lite"&gt;
  &lt;/a&gt;
  âœ¨ Flask Pixel Lite
&lt;/h3&gt;

&lt;p&gt;Open-Source Flask starter coded with basic modules, database, ORM, and deployment scripts on top of Pixel Lite UI Kit, a fully responsive and modern Bootstrap 5 UI Kit that will help you build creative and professional websites. The Flask codebase comes with basic modules, database, ORM, and deployment scripts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://appseed.us/apps/flask-apps/flask-pixel-bootstrap-uikit"&gt;Flask Pixel Lite&lt;/a&gt; - Product page&lt;/li&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://flask-pixel-lite.appseed-srv1.com/"&gt;Flask Pixel Lite&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #1 - Download sources from the public repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-pixel.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-pixel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #2 - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1h1Dqvsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x58euc5vq4y8rr3wkfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1h1Dqvsy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x58euc5vq4y8rr3wkfj.png" alt="Flask Pixel Lite - Start in Docker and WSL." width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#django-material-kit"&gt;
  &lt;/a&gt;
  âœ¨ Django Material Kit
&lt;/h3&gt;

&lt;p&gt;Open-Source seed project generated by AppSeed in Django Framework on top of Material Kit design. Designed for those who like bold elements and beautiful websites, Material Kit 2 is ready to help you create stunning websites and web apps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://appseed.us/product/django-material-kit"&gt;Django Material Kit&lt;/a&gt; - Product page&lt;/li&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://django-material-kit.appseed-srv1.com/"&gt;Django Material Kit&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Material Kit 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #1 - Download sources from the public repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-material-kit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-material-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;âœ¨ Step #2 - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQCIf2rm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cmomscx1mfvnsi79300.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQCIf2rm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cmomscx1mfvnsi79300.png" alt="Django Material Kit - Start in Docker." width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;ðŸ‘‰ &lt;code&gt;AppSeed&lt;/code&gt; for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via eMail and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ðŸ‘‰ &lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Free Dashboards&lt;/a&gt; crafted in Flask, Django, and &lt;a href="https://appseed.us/apps/react"&gt;React&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>wsl</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>5 cool JavaScript features that most developers don't know about</title>
      <author>Matvey Romanov</author>
      <pubDate>Tue, 04 Jan 2022 08:55:10 +0000</pubDate>
      <link>https://dev.to/ra1nbow1/5-cool-javascript-features-that-most-developers-dont-know-about-5b7f</link>
      <guid>https://dev.to/ra1nbow1/5-cool-javascript-features-that-most-developers-dont-know-about-5b7f</guid>
      <description>&lt;p&gt;You can use JavaScript to do the same thing in different ways. With the release of each new ECMAScript specification, new methods and operators are added to make the code shorter and more readable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBMlIw04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm3z5isc5qqlqu2d31c0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBMlIw04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm3z5isc5qqlqu2d31c0.png" alt="Code" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-objectentries"&gt;
  &lt;/a&gt;
  1. Object.entries
&lt;/h2&gt;

&lt;p&gt;Most developers use the &lt;strong&gt;Object.keys&lt;/strong&gt; method to iterate through an object. This method returns only an array of object keys, not values. You can use &lt;strong&gt;Object.entries&lt;/strong&gt; to get both the key and the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['name', 'age']&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [['name', 'Nick'], ['age', 27]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To iterate over an object, we can do the following::&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// using records to get the key and value&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// expected result:&lt;/span&gt;
&lt;span class="c1"&gt;// name is Nick&lt;/span&gt;
&lt;span class="c1"&gt;// age is 27&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both approaches described above return the same result, but &lt;strong&gt;Object.entries&lt;/strong&gt; makes it easy to get a key-value pair.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-replaceall-method"&gt;
  &lt;/a&gt;
  2. The replaceAll method
&lt;/h2&gt;

&lt;p&gt;In JavaScript, to replace all occurrences of a string with another string, we need to use a regular expression like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Red-Green-Blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// replaces only the first entry&lt;/span&gt;

&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green-Blue&lt;/span&gt;

&lt;span class="c1"&gt;// use a regular expression to replace all entries&lt;/span&gt;
&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in ES12, a new replaceAll &lt;strong&gt;method was added to String.prototype&lt;/strong&gt;, which replaces all occurrences of the string with another string value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Red Green Blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-numeric-separator"&gt;
  &lt;/a&gt;
  3. Numeric separator
&lt;/h2&gt;

&lt;p&gt;You can use the underscore "_" as a numeric separator to simplify counting the number of zeros in a number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// less readable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;billion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// more readable&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;readableBillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="nx"&gt;_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;readableBillion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// returns 1000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The separator can also be used with BigInt numbers, as in the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;trillion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trillion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1000000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the number more readable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-documentdesignmode"&gt;
  &lt;/a&gt;
  4. document.designMode
&lt;/h2&gt;

&lt;p&gt;Linked to front-end JavaScript, &lt;strong&gt;design Mode&lt;/strong&gt; lets you edit any content on the page. Just open the browser console and enter the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;designMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/662198650" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is useful for designers, as they don't need to change something in the code every time to match the changes on the screen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-logical-assignment-operator"&gt;
  &lt;/a&gt;
  5. Logical assignment operator
&lt;/h2&gt;

&lt;p&gt;Logical assignment operators are a combination of the logical operators &lt;strong&gt;&amp;amp;&amp;amp;, ||, ??&lt;/strong&gt; and the assignment operator &lt;strong&gt;=&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 2&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to a &amp;amp;&amp;amp; (a = b);&lt;/span&gt;
&lt;span class="c1"&gt;// OR another way&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here it checks whether the value of &lt;strong&gt;a&lt;/strong&gt; matches true, and if so, we update its value. The same can be done with the logical &lt;strong&gt;OR //&lt;/strong&gt; operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 3&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And also with the help of an operator &lt;strong&gt;??&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 3&lt;/span&gt;
&lt;span class="c1"&gt;// the above statement is equivalent to&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The operator &lt;strong&gt;??&lt;/strong&gt; checks only for null or undefined values.&lt;/p&gt;

&lt;p&gt;Note that logical assignment operators have been added since &lt;strong&gt;ES 12/ES 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These tricks and features can speed up the developer's work, and their use is not only necessary, but also useful. Continue to explore the hidden features of the language, learn all sorts of tricks and improve your skills.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Code splitting (bundle-split) in React</title>
      <author>Nitsan Cohen</author>
      <pubDate>Tue, 04 Jan 2022 07:56:04 +0000</pubDate>
      <link>https://dev.to/nitsancohen770/code-splitting-bundle-split-in-react-1ffh</link>
      <guid>https://dev.to/nitsancohen770/code-splitting-bundle-split-in-react-1ffh</guid>
      <description>&lt;p&gt;As you probably already know, when you build your React app (npm run build), Webpack will bundle all of your files into one big chunk.&lt;/p&gt;

&lt;p&gt;If your app is not that big that's usually just fine. But what happens when your app grows dramatically? You can end up with a really big JS file and that can hurt your UX, especially the initial loading time.&lt;/p&gt;

&lt;p&gt;Luckily there is a simple solution we can implement. Its name is code-splitting. By splitting our bundle, we can tell React (or Webpack) to load only the code that is absolutely necessary for the initial load (-for the current page, for example).&lt;/p&gt;

&lt;p&gt;Later, we can "lazy load" the rest of our code upon request (when navigating or scrolling down).&lt;/p&gt;

&lt;p&gt;One of the easiest ways to implement code splitting is by using a dynamic import. As the name suggests, the dynamic import will asynchronously import our file and will return a promise.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default (numA, numB) =&amp;gt; numA * numB

async function loadModule() {

 const dynamicImport = await import('./file1')

 dynamicImport.default(10, 10)
}

loadModule() //output: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if we want to dynamically import a component?&lt;br&gt;
Let's assume we have a component that is used by our app only on page B. We don't want to import it when we are on page A. Well, with &lt;code&gt;React.lazy&lt;/code&gt; it's a breeze!&lt;/p&gt;

&lt;p&gt;Have a look at the attached image. All we have to do is use React.lazy to import our component. This component will now be excluded from our bundle and imported only on runtime when we load that specific page.&lt;br&gt;
We are also using the Suspense component to render a fallback while the user is retrieving the bundle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vImTOEWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfzjnk9dr7ggaptbt8rs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vImTOEWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfzjnk9dr7ggaptbt8rs.jpeg" alt="Image description" width="880" height="673"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Git Pre-commit Hooks for Automatic Python Code Formatting</title>
      <author>Thuwarakesh Murallie</author>
      <pubDate>Tue, 04 Jan 2022 07:48:19 +0000</pubDate>
      <link>https://dev.to/thuwarakesh/git-pre-commit-hooks-for-automatic-python-code-formatting-42bd</link>
      <guid>https://dev.to/thuwarakesh/git-pre-commit-hooks-for-automatic-python-code-formatting-42bd</guid>
      <description>&lt;p&gt;Python has become the worldâ€™s most popular programming language because of its elegant syntax. But this alone doesnâ€™t ensure a clean, readable code.&lt;/p&gt;

&lt;p&gt;The Python community had evolved to create standards to make codebases created by different programmers look as if the same person had developed them. Later on, packages such as Black were created to auto-format the codebase. Yet the problem is only half solved. Git &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt; hooks complete the rest.&lt;/p&gt;

&lt;p&gt;What are pre-commit hooks?&lt;/p&gt;

&lt;p&gt;Pre-commit hooks are helpful git scripts that run automatically before git commit. If a pre-commit hook fails, the git push will be aborted, and depending on how you set it up, your CI software may also fail or not trigger at all.&lt;/p&gt;

&lt;p&gt;Note, before setting up pre-commit hooks, ensure you have the following.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to have git version &amp;gt;= v.0.99 (you can check this with git â€” version)&lt;/li&gt;
&lt;li&gt;You need to have Python installed (as itâ€™s the language used for git hooks.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Related: &lt;a href="https://dev.to/python-project-structure-best-practices"&gt;&lt;strong&gt;&lt;em&gt;7 Ways to Make Your Python Project Structure More Elegant&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-precommit-hooks"&gt;
  &lt;/a&gt;
  Installing pre-commit hooks
&lt;/h2&gt;

&lt;p&gt;You can install the pre-commit package easily with single pip command. But to attach it to your project, you need one more file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pre-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file holds all the configurations your project requires. This is where you tell pre-commit what actions it needs to perform before every commit and override their defaults if needed.&lt;/p&gt;

&lt;p&gt;The following command will generate an example configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pre-commit sample-config &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; .pre-commit-config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is an example configuration that sorts your requirements.txt file before every time you commit your changes. Place this at the root of your project directory or edit the one you generated using the previous step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;repos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt;   &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/pre-commit/pre-commit-hooks&lt;/span&gt;
    &lt;span class="na"&gt;rev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v4.0.1&lt;/span&gt;
    &lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt;   &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;requirements-txt-fixer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Weâ€™ve installed the pre-commit package, and we configured how it should work. Now, we can enable pre-commit hooks to this repository using the following command.&lt;/p&gt;

&lt;p&gt;Awesome! Now add the following requirements.txt file to your project and make a commit. See pre-commit hooks in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# requirement.txt before commit.
urllib3==1.26.7
openpyxl==3.0.9
pandas==1.3.3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before committing, git will download instructions from the repository and use the requirement fixer module to clean the file. The resulting file will look like the below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# requirement.txt after commit.
openpyxl==3.0.9
pandas==1.3.3
urllib3==1.26.7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#black-with-precommit-hooks-to-automatically-format-your-python-code"&gt;
  &lt;/a&gt;
  Black with pre-commit hooks to automatically format your Python code.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt; is a popular package that helps Python developers maintain a clean codebase.&lt;/p&gt;

&lt;p&gt;Most code editors have keyboard shortcuts that you can bind to Black so that you can clean your code on the go. For example, VSCode on Linux uses Ctrl + Shift + I. Upon the very first usage of this shortcut, VScode prompts which code formatter to use. You can select black (or autopep8) to enable it.&lt;/p&gt;

&lt;p&gt;But, if pressing the shortcut keys bothering you, you can put it on the pre-commit hooks. The below snippet do the trick.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt;   &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://github.com/ambv/black&lt;/span&gt;
    &lt;span class="na"&gt;rev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;21.9b0&lt;/span&gt;
    &lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;black&lt;/span&gt;
      &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--line-length=120"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this has more settings than the previous ones. Here, in addition to using black, we are overriding its defaults. We used the args option to configure black to set a maximum line length of 120 characters.&lt;/p&gt;

&lt;p&gt;Letâ€™s see how git commit hooks work with Black, for an example given in blackâ€™s documentation. Create a python file (name doesnâ€™t matter as long as itâ€™s a .py file) with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;seven_dwwarfs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Grumpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Happy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sleepy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bashful&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sneezy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dopey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Doc&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;927&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;123456789.123456789E123456789&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;very_long_variable_name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; \
 &lt;span class="n"&gt;very_long_variable_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
 &lt;span class="n"&gt;very_long_variable_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'hello '&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'world'&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'hello {}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;rf&lt;/span&gt;&lt;span class="s"&gt;'hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;
&lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'hello ''world'&lt;/span&gt;&lt;span class="c1"&gt;#FIXME: https://github.com/python/black/issues/26
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;     &lt;span class="nb"&gt;object&lt;/span&gt;  &lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;   &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;       &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="o"&gt;*-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;   &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;      &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;very_important_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathLike&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
    &lt;span class="s"&gt;"""Applies `variables` to the `template` and writes to `file`."""&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# fmt: off
&lt;/span&gt;&lt;span class="n"&gt;custom_formatting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# fmt: on
&lt;/span&gt;&lt;span class="n"&gt;regular_formatting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above file after commit will look like the following. This is more standard compared to the previous one. Itâ€™s easy to read, and code reviewers would love to see it this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;seven_dwwarfs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Grumpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Happy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sleepy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bashful&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sneezy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dopey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Doc&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;927&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;123456789.123456789e123456789&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;very_long_variable_name&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;very_long_variable_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;very_long_variable_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"world"&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"world"&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;rf&lt;/span&gt;&lt;span class="s"&gt;"hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello "&lt;/span&gt; &lt;span class="s"&gt;"world"&lt;/span&gt;  &lt;span class="c1"&gt;# FIXME: https://github.com/python/black/issues/26
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;g&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;very_important_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathLike&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Applies `variables` to the `template` and writes to `file`."""&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# fmt: off
&lt;/span&gt;&lt;span class="n"&gt;custom_formatting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# fmt: on
&lt;/span&gt;&lt;span class="n"&gt;regular_formatting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-precommit-hooks-to-look-for-local-repositories"&gt;
  &lt;/a&gt;
  Configure pre-commit hooks to look for local repositories
&lt;/h2&gt;

&lt;p&gt;Sometimes, you want to run pre-commit hooks from your local installed packages. Letâ€™s try to use a locally installed &lt;a href="https://github.com/PyCQA/isort"&gt;isort&lt;/a&gt; package to sort your python imports.&lt;/p&gt;

&lt;p&gt;You can install isort using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;isort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now edit the .pre-commit-config.yaml file and insert the below snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;repos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
    &lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;isort&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sorting import statements&lt;/span&gt;
        &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash -c 'isort "$@"; git add -u' --&lt;/span&gt;
        &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python&lt;/span&gt;
        &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--filter-files"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;\.py$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see this in action, create a python file with multiple imports. Hereâ€™s a sample.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_lib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Object3&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_lib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Object2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;third_party&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lib15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib14&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;absolute_import&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;third_party&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lib3&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hey"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After commit, the same file will look like the below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;absolute_import&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_lib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Object2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object3&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;third_party&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lib1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;lib10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hey"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"yo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-black-isort-and-autoflake-precommit-hooks-for-a-cleaner-python-codebase"&gt;
  &lt;/a&gt;
  Use Black, Isort, and Autoflake pre-commit hooks for a cleaner python codebase.
&lt;/h3&gt;

&lt;p&gt;Hereâ€™s the pre-commit hook template I always use in almost all of my projects. We already discussed two hooks in this list, Black and Isort. &lt;a href="https://github.com/myint/autoflake"&gt;Autoflake&lt;/a&gt; is another useful hook that removes unused variables, whitespace, and imports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;repos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;repo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;local&lt;/span&gt;
    &lt;span class="na"&gt;hooks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;autoflake&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Remove unused variables and imports&lt;/span&gt;
        &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash -c 'autoflake "$@"; git add -u' --&lt;/span&gt;
        &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python&lt;/span&gt;
        &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--in-place"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--remove-all-unused-imports"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--remove-unused-variables"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--expand-star-imports"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--ignore-init-module-imports"&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt;
          &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;\.py$&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;isort&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sorting import statements&lt;/span&gt;
        &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash -c 'isort "$@"; git add -u' --&lt;/span&gt;
        &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python&lt;/span&gt;
        &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--filter-files"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;\.py$&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;black&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Black Python code formatting&lt;/span&gt;
        &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash -c 'black "$@"; git add -u' --&lt;/span&gt;
        &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python&lt;/span&gt;
        &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--line-length=120"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this template is using local packages make sure you have them installed. You can run the following command to install them all at once and set up pre-commit to your git repository as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;isort autoflake black pre-commit
pre-commit &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;Git pre-commit is revolutionary in many ways. They are mostly used in CI/CD pipelines to trigger activities. One of the other major use cases is to use them for automatic code formatting.&lt;/p&gt;

&lt;p&gt;A well-formatted code is easy to read and digest for a different person as it follows common guidelines shared among the community. Python has a standard called PEP8 and tools like Black, Isort, and Autoflake help developers automate this standardization process.&lt;/p&gt;

&lt;p&gt;Yet, it may be a hassle to remember this and using the tool every time manually. Pre-commit hooks quickly put it to its code review checklist and run it automatically before every commit.&lt;/p&gt;

&lt;p&gt;In this post, weâ€™ve discussed how to use pre-commit hooks from the remote repositories as well as from locally installed packages.&lt;/p&gt;

&lt;p&gt;I hope youâ€™d have enjoyed it.&lt;/p&gt;




&lt;p&gt;Thanks for the read, friend. It seems you and I have lots of common interests. Say Hi to me on &lt;a href="https://www.linkedin.com/in/thuwarakesh/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/Thuwarakesh"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://thuwarakesh.medium.com/subscribe"&gt;Medium&lt;/a&gt;. Iâ€™ll break the ice for you.&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Window mouse position hook in React</title>
      <author>coder4life</author>
      <pubDate>Tue, 04 Jan 2022 07:39:50 +0000</pubDate>
      <link>https://dev.to/coder4_life/window-mouse-position-hook-in-react-bhm</link>
      <guid>https://dev.to/coder4_life/window-mouse-position-hook-in-react-bhm</guid>
      <description>&lt;p&gt;In this video we will create a reuseable hook for getting the window mouse position. It's a simple hook and easy to implement. If you are just getting started with React Hooks this might just be a nice entrypoint to get started with hooks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/p0wltDooH7Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Functional JS</title>
      <author>Varenya Thyagaraj</author>
      <pubDate>Tue, 04 Jan 2022 07:36:14 +0000</pubDate>
      <link>https://dev.to/varenya/functional-js-1ee</link>
      <guid>https://dev.to/varenya/functional-js-1ee</guid>
      <description>&lt;p&gt;There are few functional patterns that have become popular/semi-popular in JS world.&lt;/p&gt;

&lt;p&gt;Javascript as a language is extremely malleable to different patterns/preferences and that can be a good thing and a bad thing.&lt;/p&gt;

&lt;p&gt;The good thing is it can align with any of varied sensibilities in developer community. Bad thing is within a team, individuals with different preferences can write code completely different way within the same app which hurts readability considerably.&lt;/p&gt;

&lt;p&gt;So I wanted to tackle this topic with regards to functional patterns which I am particularly familiar with and have experienced its pro's and con's in the JS world.&lt;/p&gt;

&lt;p&gt;So letâ€™s get started then.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#point-free-pattern"&gt;
  &lt;/a&gt;
  Point Free Pattern
&lt;/h2&gt;

&lt;p&gt;This is basically a famous pattern in FP world where in you basically avoid passing function arguments when they basically pass through.&lt;/p&gt;

&lt;p&gt;An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/*  I want to add one to a array of integers */&lt;/span&gt;

&lt;span class="cm"&gt;/* Way One */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="cm"&gt;/* Way Two */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resultTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically instead of explicitly calling the function and adding another layer of anonymous function we are using the function name itself and the arguments get passed implicitly.&lt;/p&gt;

&lt;p&gt;So is this a good to have? My Take &lt;strong&gt;No&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Reason being its very easy to shoot your self in the foot with this pattern. Lets see how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* convert string of numbers to integers using parseInt */&lt;/span&gt;

&lt;span class="cm"&gt;/* Using pointfree */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pointFree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* Expected result : [1,2,3] *

/* Actual Result : [1,NaN,NaN] */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why the &lt;strong&gt;NaN's&lt;/strong&gt;? Well &lt;strong&gt;parseInt&lt;/strong&gt; take's two arguments basically the string and the base to which it needs to convert to. And &lt;strong&gt;map&lt;/strong&gt; actually sends in the current index along with current item in the list so the result is messed up.&lt;/p&gt;

&lt;p&gt;So how to fix the above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fixedWay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See explicit is better than implicit! you end up writing few more lines of code but you get the expected result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-functions-immutability"&gt;
  &lt;/a&gt;
  Pure Functions / Immutability
&lt;/h2&gt;

&lt;p&gt;The idea is quite well known in the community. I wonâ€™t dig too deep here since it's been discussed/documented quite well now.&lt;/p&gt;

&lt;p&gt;This is a great thing to simplify your code.&lt;/p&gt;

&lt;p&gt;So my personal approach is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To break down a particular functionality into pure functions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use immutable data structures to maintain state.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach works well with TDD. Makes code a lot more compositional to build other functionality in general.&lt;/p&gt;

&lt;p&gt;But there are some nuances here that are worth discussing in the context of Javascript.&lt;/p&gt;

&lt;p&gt;Javascript is a language that doesnâ€™t enforce these rules at the language level. It's up to developers to make sure the rules are enforced. You can enforce it in the form of tests or other mechanisms but you cannot take it for granted.&lt;/p&gt;

&lt;p&gt;The above fact has consequences. For example, some built-in functions in JS wonâ€™t adhere to those rules. A good example is the &lt;strong&gt;&lt;em&gt;sort&lt;/em&gt;&lt;/strong&gt; function and &lt;strong&gt;&lt;em&gt;splice&lt;/em&gt;&lt;/strong&gt; function which mutates the input you provide them. So when we are using them together with other parts of your software that is pure. The software as a whole wonâ€™t be pure anymore.&lt;/p&gt;

&lt;p&gt;So you can run into subtle issues that can be hard to nail down and it's not just built-in JS functions that can cause this. It can be any piece of JS code - external libraries.&lt;/p&gt;

&lt;p&gt;So should we give up on the idea? Well no - purism is good to have but trying to achieve perfection - not so much. Real life is rarely ever so pure ðŸ˜‰.&lt;/p&gt;

&lt;p&gt;Local mutations are okay:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Here both variables i and total are */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep your state mutations in a single place to so that you can easily know where to look when something breaks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* Pure functions */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/* impure functions with state updates and mutations */&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialCount&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentCount&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterMethods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 11&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;counterMethods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the above feels familiar then your right - its basically what &lt;strong&gt;&lt;em&gt;Redux&lt;/em&gt;&lt;/strong&gt; does!&lt;/p&gt;

&lt;p&gt;Before I wrap this section up its important to know that immutability and pure functions can be costly when it comes to performance. If you are building a performance sensitive application updating objects through spread operator can be costly operation and can be source of problem.&lt;/p&gt;

&lt;p&gt;But in my experience those instances have been rare. This is good advice to follow in general:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;make it work, make it right, make it fast - Kent Beck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reduce-the-use-of-reduce"&gt;
  &lt;/a&gt;
  Reduce the use of reduce
&lt;/h2&gt;

&lt;p&gt;Although &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; is quite a handy higher order function and very flexible it can be taken to an extreme.&lt;/p&gt;

&lt;p&gt;A good example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;person&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// returns "test"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are having to go through all the items on the list even if the path is not present early on. This could be avoided if we use a simple for loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getProp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pathItem&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pathItem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentObj&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The thing about &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; compared to &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/strong&gt; is that &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; is lot more flexible than the others. So itâ€™s tempting to use it in places where it may not really be a good fit.&lt;/p&gt;

&lt;p&gt;This is a blurry line and takes some experience and intuition to say when one is good and when one is bad.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-compositionpipe"&gt;
  &lt;/a&gt;
  Function Composition/Pipe
&lt;/h2&gt;

&lt;p&gt;Here the idea is that we can send a piece of data through series of operations and modify the data in someway to get a desired result.&lt;/p&gt;

&lt;p&gt;This too is very good pattern in general but comes with a few drawbacks in the context of JS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If any of the operations are having side effects or mutations this can cause really hard to find issues.&lt;/li&gt;
&lt;li&gt;Debugging can be tricky if you are composing multiple functions together - determine where something went wrong can be hard.&lt;/li&gt;
&lt;li&gt;Order of arguments is important and can be easily missed which can be a source of confusion.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a proposal currently in stage-2 to make this built into JS - the syntax looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
                &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;double&lt;/span&gt;
                &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt; &lt;span class="c1"&gt;// output 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is very concise and cool thing to have. The above mentioned drawbacks can be avoided by using few constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Always use small pure functions to pipe through.&lt;/li&gt;
&lt;li&gt;In general keep the number of operations at 1-4 to avoid troubles.&lt;/li&gt;
&lt;li&gt;Each function should take at most 1-2 arguments.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The goal here is to strike a balance between functional patterns and JS primitives.&lt;/p&gt;

&lt;p&gt;Some other takeaways from my experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there is a use case where mutating a variable is simplifying your code - go for it. Instead of coming up with a convoluted way of doing the same thing for the sake of purity.&lt;/li&gt;
&lt;li&gt;When it comes to asynchrony separate the effect part from the processing part. Imperative shell and functional core.&lt;/li&gt;
&lt;li&gt;Some libraries make some of the patterns I mentioned earlier turn bad into good. A good example is Ramda: &lt;a href="https://ramdajs.com/"&gt;https://ramdajs.com/&lt;/a&gt;. Itâ€™s built on point-free, currying, composition principles.&lt;/li&gt;
&lt;li&gt;Donâ€™t go for fancy Dependency Injection frameworks. Good old higher-order functions are then good enough to get the job done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thats it. Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
    </item>
    <item>
      <title>RegExp Cheatsheet to speed up code editing and refactor</title>
      <author>Piyush Kumar Baliyan</author>
      <pubDate>Tue, 04 Jan 2022 07:30:00 +0000</pubDate>
      <link>https://dev.to/admitkard/regexp-cheatsheet-to-speed-up-code-editing-and-refactor-d2d</link>
      <guid>https://dev.to/admitkard/regexp-cheatsheet-to-speed-up-code-editing-and-refactor-d2d</guid>
      <description>&lt;p&gt;Have you ever asked yourself some of these questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do I find all the imports of a particular function?&lt;/li&gt;
&lt;li&gt;How do I replace all the variables of the old &lt;code&gt;Service&lt;/code&gt; implementation with &lt;code&gt;ServiceLegacy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;How do I fix the typo across all the files?&lt;/li&gt;
&lt;li&gt;Which files a particular API endpoint is being used?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If yes, you might find this article a little helpful for your future endeavors.&lt;/p&gt;

&lt;p&gt;For some of you, regex might be a mighty beast too difficult to conquer, for a few of the experts out there, my salute to you for mastering the regex magic.&lt;/p&gt;

&lt;p&gt;I myself am pretty average in areas of regex, but I know enough to make some of my tasks easy.&lt;/p&gt;

&lt;p&gt;I'll start with some regex basics, then move to some common patterns, and then discuss using the newfound regex knowledge (i.e. the topic, speed up code editing).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-little-background"&gt;
  &lt;/a&gt;
  A little background
&lt;/h2&gt;

&lt;p&gt;Regex (or sometimes &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"&gt;RegExp&lt;/a&gt; - as in JS), is a sequence of characters that specifies a search pattern.&lt;/p&gt;

&lt;p&gt;Perl was one of the modern languages to provide inbuilt support of regex (as Perl was used for text processing, regex support was a necessity), and many of today's tools and languages (including JS and grep) use Perl inspired regex engines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;^([A-Za-z0-9_.]+)@([A-Za-z0-9-]+)\.([A-Za-z]{2,15})$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;a href="https://stackoverflow.com/questions/46155/whats-the-best-way-to-validate-an-email-address-in-javascript"&gt;Simple email regex&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regex-basics"&gt;
  &lt;/a&gt;
  Regex Basics
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;any character except newline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Match 0 or more characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Match 1 or more characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Match 0 or 1 characters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[abc]&lt;/td&gt;
&lt;td&gt;Any of a,b or c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^abc]&lt;/td&gt;
&lt;td&gt;not a,b or c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;Any of a to z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^$&lt;/td&gt;
&lt;td&gt;Start and end of string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w\d\s&lt;/td&gt;
&lt;td&gt;word, digit, whitespace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W\D\S&lt;/td&gt;
&lt;td&gt;not word, digit, whitespace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a{5}a{2,}&lt;/td&gt;
&lt;td&gt;exactly five, two or more&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a{1,3}&lt;/td&gt;
&lt;td&gt;between one &amp;amp; three&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Find the cheatsheet here &lt;a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/"&gt;Regular Expression Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.*&lt;/code&gt; Match anything (Will match if the string is empty)&lt;br&gt;
&lt;code&gt;.+&lt;/code&gt; Match anything (will not match if the string is empty)&lt;br&gt;
&lt;code&gt;^[a-z]+$&lt;/code&gt; Start and end tokens are there, [a-z]+ will match a string containing characters between a-z and &lt;code&gt;+&lt;/code&gt; will match if there is at least 1 character. So the expression will match any alphabetical string.&lt;/p&gt;

&lt;p&gt;You can learn more here &lt;a href="https://regexone.com/"&gt;Regexone&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-regex"&gt;
  &lt;/a&gt;
  Creating Regex
&lt;/h2&gt;

&lt;p&gt;Now let's try making some regex&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1-valid-css-color"&gt;
  &lt;/a&gt;
  1. Valid CSS Color
&lt;/h4&gt;

&lt;p&gt;This is simple, should be a hexadecimal string of format RRGGBB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^$&lt;/code&gt; - We don't want any stray ending or starting characters, without this, this will match if any random string contains the hexadecimal string.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-f0-9]+$&lt;/code&gt; - match a-f, 0-9, this is now a valid hexadecimal string, but not valid css color&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-f0-9]{6}$&lt;/code&gt; - exact length of 6&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^[a-fA-F0-9]{6}$&lt;/code&gt; - case insensitive match&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#2-mobile-number"&gt;
  &lt;/a&gt;
  2. Mobile Number
&lt;/h4&gt;

&lt;p&gt;The condition is, should start with +, then 91 (India), then 10 digits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^$&lt;/code&gt; - We want number, and not string containing number.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^\+91.*$&lt;/code&gt;, starts with +91, then .* will match anything (&lt;code&gt;+&lt;/code&gt; is special character, so its escaped with &lt;code&gt;\&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;^\+91[0-9]{10}$&lt;/code&gt;, replace &lt;code&gt;.*&lt;/code&gt; with [0-9]{10} exact 10 occurrences of 0-9 digits.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's add another condition, in my country, the number starts with 6,7,8,9, then random 9 digits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^\+91[6789][0-9]{9}$&lt;/code&gt; - This will do it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use the &lt;a href="https://regexr.com/"&gt;RegExr playground&lt;/a&gt; to test my Regex.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#find-and-replace-in-js"&gt;
  &lt;/a&gt;
  Find and replace in JS
&lt;/h2&gt;

&lt;p&gt;In JS RegExp, we can have something called capture groups, with which we can group parts of our regex and use them in string manipulation using regex.&lt;/p&gt;

&lt;p&gt;A simple example, in the string &lt;code&gt;aabbcc&lt;/code&gt;, replace all &lt;code&gt;c&lt;/code&gt; with &lt;code&gt;a&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This will replace first occurrence of all `c`s in the string&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aabbcc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/c*/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// OR better&lt;/span&gt;
&lt;span class="c1"&gt;// this will replace all `c`s with a&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aabbcc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/c/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;/g&lt;/code&gt; is a modifier for global search in regex. Other modifiers are &lt;code&gt;/i&lt;/code&gt; (case insensitive search), &lt;code&gt;/m&lt;/code&gt;, for multiline search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vscode-find-and-replace"&gt;
  &lt;/a&gt;
  VSCode find and replace
&lt;/h2&gt;

&lt;p&gt;Let's say you have a typo in your code, and you named your type as &lt;code&gt;ButonProps&lt;/code&gt;. And you want to replace it with &lt;code&gt;ButtonProps&lt;/code&gt;.&lt;br&gt;
Simple Find and replace in VSCode lets you do that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrzBJCkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jye2lnso89kj0qbggi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrzBJCkh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jye2lnso89kj0qbggi.png" alt="VSCode Find and replace" width="386" height="73"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just put the required strings in each input box&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge1MS8-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb005ld7jvn24erbpi09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge1MS8-U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mb005ld7jvn24erbpi09.png" alt="Find and replace typo" width="378" height="74"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#find-regex-in-vscode"&gt;
  &lt;/a&gt;
  Find Regex in vscode
&lt;/h3&gt;

&lt;p&gt;Now let's say you want to find all the occurrences of &lt;code&gt;ButtonProps&lt;/code&gt; import. The syntax will look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it can be something more complex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//OR&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ButtonProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ButtonColor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now comes our time to use regex in VSCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JkKVq3gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckdnkwefow6bq6ak66gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JkKVq3gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckdnkwefow6bq6ak66gy.png" alt="Regex in VSCode" width="365" height="34"&gt;&lt;/a&gt;&lt;br&gt;
The little button &lt;code&gt;.*&lt;/code&gt; in the search input box is the regex button toggler.&lt;br&gt;
With regex on, we can now use regex in VSCode search.&lt;/p&gt;

&lt;p&gt;So now let's search, and create our regex.&lt;br&gt;
We will first start simple, and then narrow down our search by adding more regex symbols.&lt;br&gt;
Our import statement looks like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import something ButtonProps something from button;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so our regex will be (replace something with &lt;code&gt;.*&lt;/code&gt;&lt;br&gt;
&lt;code&gt;import .*ButtonProps.*from '.*Button';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTIgfNDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7di21k50koe9fskanj4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTIgfNDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7di21k50koe9fskanj4b.png" alt="Find ButtonProps" width="394" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But there is some noise, we are also getting IconButtonProps. Let's remove that.&lt;br&gt;
What we don't want is ButtonProps to be prefixed by any alphabets.&lt;br&gt;
&lt;code&gt;import .*[^a-zA-Z]ButtonProps.*from '.*Button';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now our search is only showing ButtonProps without any noise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#replace-regex-in-vscode"&gt;
  &lt;/a&gt;
  Replace regex in VSCode
&lt;/h3&gt;

&lt;p&gt;Now let's say you want to rename the &lt;code&gt;Button&lt;/code&gt; component to &lt;code&gt;Btn&lt;/code&gt;.&lt;br&gt;
We will need to replace these three occurrences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;imports (&lt;code&gt;import Button from 'Button'&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Usage (&lt;code&gt;&amp;lt;Button &amp;gt;&amp;lt;/Button&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Assignments (&lt;code&gt;const MyComponent = Button&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;





&lt;center&gt;Lets start.&lt;/center&gt;


&lt;h4&gt;
  &lt;a href="#1-imports"&gt;
  &lt;/a&gt;
  1. imports
&lt;/h4&gt;

&lt;p&gt;Here the &lt;code&gt;()&lt;/code&gt; are capture groups that we will access using $1, $2 respectively.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PjRKw5Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jitl0bj7tx98445etln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PjRKw5Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jitl0bj7tx98445etln.png" alt="Find and replace imports" width="384" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what VSCode will show you:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsCcNfxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5r76valt3jq7muye57x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsCcNfxn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5r76valt3jq7muye57x.png" alt="VSCode rename component" width="398" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What we have done here is select everything between &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;Button&lt;/code&gt; by first capture group, then everything between &lt;code&gt;Button&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; by second capture group, and so on.&lt;/li&gt;
&lt;li&gt;Then we carefully want to replace only Button with Btn.&lt;/li&gt;
&lt;li&gt;So we replaced the first capture group with itself ($1), the second one with $2, the third one with $3.&lt;/li&gt;
&lt;li&gt;Hence we get our replacement string &lt;code&gt;import$1Button$2from '$3Button';&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now change &lt;code&gt;Button&lt;/code&gt; to &lt;code&gt;Btn&lt;/code&gt;, and we get &lt;code&gt;import$1Btn$2from '$3Button';&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And your button imports are now renamed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-usage"&gt;
  &lt;/a&gt;
  2. Usage
&lt;/h4&gt;

&lt;p&gt;Continuing on above.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nQA8MGLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy0ymhf011lddkq1xgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nQA8MGLO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/csy0ymhf011lddkq1xgo.png" alt="Find and replace usage" width="390" height="72"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find &lt;code&gt;&amp;lt;Button&lt;/code&gt; that does not have trailing alphabets (to omit something like &lt;code&gt;&amp;lt;ButtonGroup&lt;/code&gt; and maybe have a trailing newline. then replace all of them with &lt;code&gt;&amp;lt;Btn$1&lt;/code&gt; i.e. using $1, replace &lt;code&gt;space&lt;/code&gt; with space, newline with a newline.&lt;/p&gt;

&lt;p&gt;End bracket now&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3tnr37Gr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kecpog2hqxf105r6zeop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3tnr37Gr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kecpog2hqxf105r6zeop.png" alt="Find and replace end bracket" width="394" height="69"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is pretty easy, but why &lt;code&gt;*&lt;/code&gt;. Since &lt;code&gt;&amp;lt;/Button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;/ Button&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;/Button &amp;gt;&lt;/code&gt; all are valid JSX.&lt;br&gt;
But why not $1, or $2. Since this will also clean up the code and replace all the above with clean &lt;code&gt;&amp;lt;Btn&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-assignments"&gt;
  &lt;/a&gt;
  3. Assignments
&lt;/h4&gt;

&lt;p&gt;This one should not be that much in your code, and you can directly search for &lt;code&gt;Button&lt;/code&gt; now.&lt;br&gt;
Find - &lt;code&gt;Button[^']&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But what is &lt;code&gt;[^']&lt;/code&gt; for? To exclude all the occurrences of &lt;code&gt;import.*from 'Button';&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;With this, all our occurrences of Button are now Btn. And we now understand Regex a little better and use it to make our work easy.&lt;/p&gt;

&lt;p&gt;In the future, I'll also try to write some articles highlighting more use-cases of regex to make your life easier.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>regex</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
