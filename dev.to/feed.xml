<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>tsParticles 1.33.2 Released</title>
      <author>Matteo Bruni</author>
      <pubDate>Sat, 31 Jul 2021 23:34:59 +0000</pubDate>
      <link>https://dev.to/matteobruni/tsparticles-1-33-2-6c2</link>
      <guid>https://dev.to/matteobruni/tsparticles-1-33-2-6c2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tsparticles-1332-changelog"&gt;
  &lt;/a&gt;
  tsParticles 1.33.2 Changelog
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Added spin movement options&lt;/li&gt;
&lt;li&gt;Bubble color can now be mixed with the original one to have a smoother effect&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  Improvements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Added resize observer, this will replace window.resize if available&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fixed images shape options&lt;/li&gt;
&lt;li&gt;Fixed broken movement after 1.31&lt;/li&gt;
&lt;li&gt;Fixed frozen frames (more than 1 second), this will fix the issue with pause on blur&lt;/li&gt;
&lt;li&gt;Fixed svelte component&lt;/li&gt;
&lt;li&gt;Improved Absorbers&lt;/li&gt;
&lt;li&gt;Improved Orbits&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>This Is Your Complete Guide To All Python List Methods</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sat, 31 Jul 2021 23:32:31 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/this-is-your-complete-guide-to-all-python-list-methods-b4</link>
      <guid>https://dev.to/ayabouchiha/this-is-your-complete-guide-to-all-python-list-methods-b4</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;, today, I'm going to talk about the list of built-in objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-of-a-list"&gt;
  &lt;/a&gt;
  Definition of a List
&lt;/h2&gt;

&lt;p&gt;A list is a mutable, iterable,  ordered collection of values. It is used to store different and multiple values in one variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-list"&gt;
  &lt;/a&gt;
  Creating a list
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'hi'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;"Aya"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['hi', 1, False, {"name":"Aya"}, [10, 20], None]
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;class 'list'&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#all-list-methods"&gt;
  &lt;/a&gt;
  All list methods
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#append"&gt;
  &lt;/a&gt;
  append()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;append(value)&lt;/strong&gt;: this list method lets you insert an element at the end of the list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# None
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# [10, 20, 30, 40, 50]
&lt;/span&gt;
&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#insert"&gt;
  &lt;/a&gt;
  insert()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;insert(index, value)&lt;/strong&gt;: used to add a new element at a given index&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;admins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Aya Bouchiha'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'John Doe'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Simon Bihao'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ['Simon Bihao', 'Aya Bouchiha', 'John Doe']
&lt;/span&gt;
&lt;span class="n"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Salma Nouhary'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['Simon Bihao', 'Aya Bouchiha', 'Salma Nouhary', 'John Doe']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pop"&gt;
  &lt;/a&gt;
  pop()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;pop(index = -1)&lt;/strong&gt;: delete the elements that exist in the given index, by default the index is the &lt;code&gt;-1&lt;/code&gt; which is the index of the last element. In addition, it returns the deleted element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;admins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Aya Bouchiha'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'John Doe'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;old_admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# John Doe
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['Aya Bouchiha']
&lt;/span&gt;

&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'eat fruits'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'go to gym'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'drink water'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;completed_task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;completed_task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# go to gym
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['eat fruits', 'drink water']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove"&gt;
  &lt;/a&gt;
  remove()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;remove(value)&lt;/strong&gt;: deletes the first item that matches the given value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'eat fruits'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'go to gym'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'drink water'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'eat fruits'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'drink water'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# None
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['go to gym']
&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'something else'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#clear"&gt;
  &lt;/a&gt;
  clear()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;clear()&lt;/strong&gt;: used to remove all list's items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'eat fruits'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'go to gym'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'drink water'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 3
&lt;/span&gt;
&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# []
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#copy"&gt;
  &lt;/a&gt;
  copy()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;copy()&lt;/strong&gt;: this list method is used to return a copy of the specified list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;today_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'eat fruits'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'go to gym'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'drink water'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;tomorrow_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today_tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tomorrow_tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#  ['eat fruits', 'go to gym', 'drink water']
&lt;/span&gt;
&lt;span class="n"&gt;today_tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today_tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# []
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tomorrow_tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['eat fruits', 'go to gym', 'drink water']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  index()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;index(value)&lt;/strong&gt;: returns the index of the first item that matched the given value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;today_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'eat fruits'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'go to gym'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'drink water'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today_tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'eat fruits'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 0
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today_tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'drink water'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today_tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'buy a mouse'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#count"&gt;
  &lt;/a&gt;
  count()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;count(value)&lt;/strong&gt;: returns the number of repeated items that match the specified value in a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;product_prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;227&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;free_products_number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;product_prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;free_products_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product_prices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;224578&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extend"&gt;
  &lt;/a&gt;
  extend()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;extend(iterable)&lt;/strong&gt;: helps you to insert an iterable(list, set,...) at the end of the specified list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;all_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Yasm'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Nopay'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Houssam'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;facebook_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Aya'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Simon'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;instagram_users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Ayman'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Soha'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;all_users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;facebook_users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;all_users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instagram_users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ['Yasm', 'Nopay', 'Houssam', 'Simon', 'Aya', 'Ayman', 'Soha']
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reverse"&gt;
  &lt;/a&gt;
  reverse()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;reverse()&lt;/strong&gt;: reverse the order of the specified list&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# [70, 51, 45, 15]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sort"&gt;
  &lt;/a&gt;
  sort()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;sort(reverse = False, key(optional))&lt;/strong&gt;: sort the list's items, if the reverse parameter was True, the items will be sorted in descending order.&lt;/p&gt;

&lt;p&gt;the key parameter is used to specify a function that will specify the sorting criteria.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example:1&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;62&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# [7, 24, 56, 62, 71]
&lt;/span&gt;
&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# [71, 62, 56, 24, 7]
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Example:2&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_marks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'marks'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Aya Bouchiha"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"developer.aya.b@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"marks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"john.doe@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"marks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Ryan Hosm"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"ryan.hosm@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"marks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;get_marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [{'name': 'Ryan Hosm', 'email': 'ryan.hosm@gmail.com', 'marks': 80}, {'name': 'Aya Bouchiha', 'email': 'developer.aya.b@gmail.com', 'marks': 92}, {'name': 'John Doe', 'email': 'john.doe@gmail.com', 'marks': 95}]
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Example3 (&lt;/em&gt;&lt;em&gt;using lambda&lt;/em&gt;&lt;em&gt;)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"laptop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"keyboard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;highest_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'highest price is: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;highest_price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Output:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'laptop'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'phone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'keyboard'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'mouse'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="n"&gt;highest&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;append(value)&lt;/strong&gt;: inserts an element at the end of the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;insert(index, value)&lt;/strong&gt;: adds a new element at a given index.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;pop(index = -1)&lt;/strong&gt;: deletes the element that exist in the given index.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;remove(value)&lt;/strong&gt;: deletes the first item that match the given value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;clear()&lt;/strong&gt;: removes all list's items.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;copy()&lt;/strong&gt;: returns a copy of the specified list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;index(value)&lt;/strong&gt;: returns the index of the first item that matched the given value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;count(value)&lt;/strong&gt;: returns the number of repeated items that match the specified value in a list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;extend(iterable)&lt;/strong&gt;: inserts an iterable at the end of the specified list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;reverse()&lt;/strong&gt;: reverses the order of the specified list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;sort(reverse = False, key(optional))&lt;/strong&gt;: sorts the list's items.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references-amp-useful-resources"&gt;
  &lt;/a&gt;
  References &amp;amp; useful Resources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3schools.com/python/python_lists.asp"&gt;https://www.w3schools.com/python/python_lists.asp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.programiz.com/python-programming/methods/list"&gt;https://www.programiz.com/python-programming/methods/list&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/datastructures.html"&gt;https://docs.python.org/3/tutorial/datastructures.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=9OeznAkyQz4"&gt;https://www.youtube.com/watch?v=9OeznAkyQz4&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=rrGmQbmTfiA"&gt;https://www.youtube.com/watch?v=rrGmQbmTfiA&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/all-you-need-to-know-about-python-json-module-5ef0"&gt;All You Need To Know About Python JSON Module&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Random Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-helpful-python-math-module-methods-44gf"&gt;5 Helpful Python Math Module Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/ayabouchiha/5-useful-python-string-methods-4pe7"&gt;5 Useful Python String Methods&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Contact Me:&lt;/p&gt;

&lt;p&gt;email:&lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;&lt;br&gt;
telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading this post :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Using array map, filter and reduce in MongoDB aggregation pipeline</title>
      <author>Cássio Lacerda</author>
      <pubDate>Sat, 31 Jul 2021 20:46:34 +0000</pubDate>
      <link>https://dev.to/cassiolacerda/using-array-map-filter-and-reduce-in-mongodb-aggregation-pipeline-1lp2</link>
      <guid>https://dev.to/cassiolacerda/using-array-map-filter-and-reduce-in-mongodb-aggregation-pipeline-1lp2</guid>
      <description>&lt;p&gt;If you work with javascript, the chances of you are using array methods like &lt;strong&gt;map&lt;/strong&gt;, &lt;strong&gt;filter&lt;/strong&gt; and &lt;strong&gt;reducer&lt;/strong&gt; today are really great. &lt;/p&gt;

&lt;p&gt;All simplicity offered by javascript &lt;a href="https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad"&gt;higher-order functions&lt;/a&gt; makes our code more readable and concise, mainly when we work with array data transformations.&lt;/p&gt;

&lt;p&gt;Let's remember these methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;greaterThanFive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;multiplyBy2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filtered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greaterThanFive&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;multiplyBy2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reduced&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [8, 15]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapped&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [4, 16, 30]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reduced&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's really amazing! &lt;/p&gt;

&lt;p&gt;However, in databases scenario, querying data with this simplicity is usually unusual, unless that database is &lt;strong&gt;MongoDB&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Because MongoDB is a &lt;a href="https://www.mongodb.com/nosql-explained"&gt;NoSQL&lt;/a&gt; database with JSON based model, some javascript array methods have similar &lt;a href="https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators"&gt;expression operators&lt;/a&gt;&lt;br&gt;
 in MongoDB Aggregation Pipeline. &lt;/p&gt;

&lt;p&gt;About its JSON nature, official website cites:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MongoDB’s document data model naturally supports &lt;a href="https://www.mongodb.com/json-and-bson"&gt;JSON&lt;/a&gt; and its expressive query language is simple for developers to learn and use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And that makes all difference folks...&lt;/p&gt;

&lt;p&gt;Let's get &lt;code&gt;numbers&lt;/code&gt; array data used in the javascript example to create a new document in a generic collection. For improve the understanding, I will use MongoDB Playground to test our queries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"numbers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://mongoplayground.net/p/kOCZ5hJSqOf"&gt;Mongo Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good! Our collection is ready to receive queries now :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  $filter
&lt;/h2&gt;

&lt;p&gt;Starting, let's use &lt;a href="https://docs.mongodb.com/manual/reference/operator/aggregation/filter/"&gt;$filter&lt;/a&gt; aggregation pipeline operator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Query&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$numbers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;num&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$gt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$num&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mi"&gt;5&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start using &lt;code&gt;aggregate&lt;/code&gt; method to submit the query. That method enables aggregation framework;&lt;/li&gt;
&lt;li&gt;Pipeline starts using &lt;code&gt;$project&lt;/code&gt; aggregation pipeline stage. The specified fields inside it can be existing fields from the input documents or newly computed fields. In our case, &lt;code&gt;filtered&lt;/code&gt; field will be created and added to response;&lt;/li&gt;
&lt;li&gt;The computed value for &lt;code&gt;filtered&lt;/code&gt; field will be given by 
&lt;code&gt;$filter&lt;/code&gt; aggregation pipeline operator;&lt;/li&gt;
&lt;li&gt;Inside filter operator, set &lt;em&gt;input&lt;/em&gt; to &lt;code&gt;$numbers&lt;/code&gt;. That's our array to be iterated;&lt;/li&gt;
&lt;li&gt;Set &lt;em&gt;as&lt;/em&gt; to &lt;code&gt;num&lt;/code&gt; to get each array value to test in filter condition. You could use any name here, just like you did in javascript filter method;&lt;/li&gt;
&lt;li&gt;Then, set the filter condition in &lt;code&gt;cond&lt;/code&gt; using &lt;code&gt;$gt&lt;/code&gt; expression to return a boolean if current array value &lt;code&gt;$$num&lt;/code&gt; is greater than 5;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"filtered"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://mongoplayground.net/p/KNtosi_ymwJ"&gt;Mongo Playground&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  $map
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/manual/reference/operator/aggregation/map/"&gt;$map&lt;/a&gt; operator is pretty similar to &lt;code&gt;$filter&lt;/code&gt;, however while &lt;code&gt;$filter&lt;/code&gt; needs a condition, &lt;code&gt;$map&lt;/code&gt; you must set &lt;code&gt;in&lt;/code&gt; to output a new array value according to some rule.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Query&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;mapped&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$numbers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;num&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$multiply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$num&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mi"&gt;2&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case, using &lt;code&gt;$multiply&lt;/code&gt; expression to return all array values multiplied by 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"mapped"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://mongoplayground.net/p/EuZAMEyeVz_"&gt;Mongo Playground&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  $reduce
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/manual/reference/operator/aggregation/reduce/"&gt;$reduce&lt;/a&gt; operator applies an expression to each element in an array and combines them into a single value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Query&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;reduced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$reduce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$numbers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$this&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Again, set &lt;code&gt;$numbers&lt;/code&gt; array as &lt;code&gt;input&lt;/code&gt; to iterate;&lt;/li&gt;
&lt;li&gt;The initial cumulative value set before &lt;code&gt;in&lt;/code&gt; is applied to the first element of the input array, &lt;code&gt;initialValue&lt;/code&gt; is set to 0;&lt;/li&gt;
&lt;li&gt;Finally, &lt;code&gt;in&lt;/code&gt; expression give us two special variables: &lt;code&gt;$$value&lt;/code&gt; is the variable that represents the cumulative value of the expression (&lt;em&gt;&lt;code&gt;acc&lt;/code&gt; in javascript example&lt;/em&gt;) and &lt;code&gt;$$this&lt;/code&gt; is the variable that refers to the element being processed (&lt;em&gt;&lt;code&gt;num&lt;/code&gt; in javascript example&lt;/em&gt;). In case, using &lt;code&gt;$sum&lt;/code&gt; expression to return the new accumulated value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"reduced"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://mongoplayground.net/p/AmXgwpR3lKp"&gt;Mongo Playground&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-in-one"&gt;
  &lt;/a&gt;
  All in one
&lt;/h2&gt;

&lt;p&gt;In previous examples, we worked with each operator in a separated query, however we could do a single query requesting all operators at once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Query&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filtered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$numbers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;num&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;cond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$num&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mi"&gt;5&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;mapped&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$numbers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;num&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$multiply&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$num&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="mi"&gt;2&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;reduced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$reduce&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$numbers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;$sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$$this&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"filtered"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"mapped"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"reduced"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://mongoplayground.net/p/VbBLVHR1Yzh"&gt;Mongo Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going further, if you add more documents to collection, this same query computes data for each of them. Let's query a collection with 3 documents now:  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collection&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"numbers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"numbers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"numbers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"filtered"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"mapped"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"reduced"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"filtered"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"mapped"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"reduced"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"filtered"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"mapped"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"reduced"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://mongoplayground.net/p/__W2NufcN7j"&gt;Mongo Playground&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;MongoDB for javascript developers is intuitive by nature! Aggregation framework does the hard work directly in the database server using many of features already known by us and data can be delivered ready-to-use, which normally decreases the workload for the application server.&lt;/p&gt;

&lt;p&gt;See also the complete &lt;a href="https://docs.mongodb.com/manual/reference/operator/aggregation/#array-expression-operators"&gt;Array Expression Operators&lt;/a&gt; list in MongoDB official website.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to make your React App a Progressive Web App (PWA)</title>
      <author>Nabil Alamin</author>
      <pubDate>Sat, 31 Jul 2021 20:37:50 +0000</pubDate>
      <link>https://dev.to/arndom/how-to-make-your-react-app-a-progressive-web-app-pwa-3d05</link>
      <guid>https://dev.to/arndom/how-to-make-your-react-app-a-progressive-web-app-pwa-3d05</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro 💨
&lt;/h2&gt;

&lt;p&gt;PWAs are great for your apps because;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Short loading times and overall better performance in poor network conditions for your users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No need for extra development time to make product a native app(iOS and Android).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have native features like push notifications without the hassle of  development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overall better user engagement&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So it's a pretty handy thing to have in any react app.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;:
&lt;/h3&gt;

&lt;p&gt;If your are just starting your project the best thing would be to run the create-react-app command with the pwa template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app my-app --template cra-template-pwa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would save you the time. If you have already progressed into your project &lt;strong&gt;follow along&lt;/strong&gt; ⏬⏬⏬&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#details-%E2%9C%8D"&gt;
  &lt;/a&gt;
  Details ✍
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-first-we-create-a-service-worker"&gt;
  &lt;/a&gt;
  - First we create a service worker
&lt;/h3&gt;

&lt;p&gt;Saving it as &lt;strong&gt;worker.js&lt;/strong&gt;  in our public folder: public/worker.js . &lt;br&gt;
A service worker is a script that your browser runs in the background which in this case pre-caches key assets making your PWA to load faster, improving the interaction between your app and users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var CACHE_NAME = "app name"

var urlsToCache = [
  '/',
  '/completed'
];

// Install a service worker
self.addEventListener('install', event =&amp;gt; {
  // Perform install steps
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(function(cache) {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
  );
});

// Cache and return requests
self.addEventListener('fetch', event =&amp;gt; {
  event.respondWith(
    caches.match(event.request)
      .then(function(response) {
        // Cache hit - return response
        if (response) {
          return response;
        }
        return fetch(event.request);
      }
    )
  );
});

// Update a service worker
self.addEventListener('activate', event =&amp;gt; {
  var cacheWhitelist = ['your-app-name'];
  event.waitUntil(
    caches.keys().then(cacheNames =&amp;gt; {
      return Promise.all(
        cacheNames.map(cacheName =&amp;gt; {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-update-your-html-file-in-your-public-folder-publicindexhtml"&gt;
  &lt;/a&gt;
  - Update your HTML file in  your public folder: &lt;strong&gt;public/index.html&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This confirms if the users browser supports service workers. The following script should be added to the &lt;strong&gt;body&lt;/strong&gt; of the index:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      &amp;lt;script&amp;gt;
        if ('serviceWorker' in navigator) {
          window.addEventListener('load', function() {
            navigator.serviceWorker.register('worker.js').then(function(registration) {
              console.log('Worker registration successful', registration.scope);
            }, function(err) {
              console.log('Worker registration failed', err);
            }).catch(function(err) {
              console.log(err);
            });
          });
        } else {
          console.log('Service Worker is not supported by browser.');
        }
      &amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-start-the-service-worker"&gt;
  &lt;/a&gt;
  - Start the Service Worker
&lt;/h3&gt;

&lt;p&gt;Firstly two files need to be added to the &lt;strong&gt;&lt;em&gt;root of the project&lt;/em&gt;&lt;/strong&gt; ; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;service-worker.js&lt;/strong&gt; :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) =&amp;gt; {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =&amp;gt;
    url.origin === self.location.origin &amp;amp;&amp;amp; url.pathname.endsWith(".png"), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) =&amp;gt; {
  if (event.data &amp;amp;&amp;amp; event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;serviceWorkerRegistration.js&lt;/strong&gt; :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
    window.location.hostname === "localhost" ||
      // [::1] is the IPv6 localhost address.
      window.location.hostname === "[::1]" ||
      // 127.0.0.0/8 are considered localhost for IPv4.
      window.location.hostname.match(
        /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
      )
  );

  export function register(config) {
    if (process.env.NODE_ENV === "production" &amp;amp;&amp;amp; "serviceWorker" in navigator) {
      // The URL constructor is available in all browsers that support SW.
      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
      if (publicUrl.origin !== window.location.origin) {
        // Our service worker won't work if PUBLIC_URL is on a different origin
        // from what our page is served on. This might happen if a CDN is used to
        // serve assets; see https://github.com/facebook/create-react-app/issues/2374
        return;
      }

      window.addEventListener("load", () =&amp;gt; {
        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

        if (isLocalhost) {
          // This is running on localhost. Let's check if a service worker still exists or not.
          checkValidServiceWorker(swUrl, config);

          // Add some additional logging to localhost, pointing developers to the
          // service worker/PWA documentation.
          navigator.serviceWorker.ready.then(() =&amp;gt; {
            console.log(
              "This web app is being served cache-first by a service " +
                "worker. To learn more, visit https://cra.link/PWA"
            );
          });
        } else {
          // Is not localhost. Just register service worker
          registerValidSW(swUrl, config);
        }
      });
    }
  }

  function registerValidSW(swUrl, config) {
    navigator.serviceWorker
      .register(swUrl)
      .then((registration) =&amp;gt; {
        registration.onupdatefound = () =&amp;gt; {
          const installingWorker = registration.installing;
          if (installingWorker == null) {
            return;
          }
          installingWorker.onstatechange = () =&amp;gt; {
            if (installingWorker.state === "installed") {
              if (navigator.serviceWorker.controller) {
                // At this point, the updated precached content has been fetched,
                // but the previous service worker will still serve the older
                // content until all client tabs are closed.
                console.log(
                  "New content is available and will be used when all " +
                    "tabs for this page are closed. See https://cra.link/PWA."
                );

                // Execute callback
                if (config &amp;amp;&amp;amp; config.onUpdate) {
                  config.onUpdate(registration);
                }
              } else {
                // At this point, everything has been precached.
                // It's the perfect time to display a
                // "Content is cached for offline use." message.
                console.log("Content is cached for offline use.");

                // Execute callback
                if (config &amp;amp;&amp;amp; config.onSuccess) {
                  config.onSuccess(registration);
                }
              }
            }
          };
        };
      })
      .catch((error) =&amp;gt; {
        console.error("Error during service worker registration:", error);
      });
  }

  function checkValidServiceWorker(swUrl, config) {
    // Check if the service worker can be found. If it can't reload the page.
    fetch(swUrl, {
      headers: { "Service-Worker": "script" },
    })
      .then((response) =&amp;gt; {
        // Ensure service worker exists, and that we really are getting a JS file.
        const contentType = response.headers.get("content-type");
        if (
          response.status === 404 ||
          (contentType != null &amp;amp;&amp;amp; contentType.indexOf("javascript") === -1)
        ) {
          // No service worker found. Probably a different app. Reload the page.
          navigator.serviceWorker.ready.then((registration) =&amp;gt; {
            registration.unregister().then(() =&amp;gt; {
              window.location.reload();
            });
          });
        } else {
          // Service worker found. Proceed as normal.
          registerValidSW(swUrl, config);
        }
      })
      .catch(() =&amp;gt; {
        console.log(
          "No internet connection found. App is running in offline mode."
        );
      });
  }

  export function unregister() {
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker.ready
        .then((registration) =&amp;gt; {
          registration.unregister();
        })
        .catch((error) =&amp;gt; {
          console.error(error.message);
        });
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-edit-indexjs"&gt;
  &lt;/a&gt;
  - Edit index.js
&lt;/h3&gt;

&lt;p&gt;Go to to your app's index.js file in the src folder: &lt;strong&gt;src/index.js&lt;/strong&gt; . Register the serviceworker as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';
// import './index.css';
import './styles/main.scss'
import App from './App';
import * as serviceWorkerRegistration from "./serviceWorkerRegistration";

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById('root')
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorkerRegistration.register();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB: If your restart the npm your console would log  if the worker registration was successful or not&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#-manifestjson"&gt;
  &lt;/a&gt;
  - manifest.json
&lt;/h3&gt;

&lt;p&gt;You should have it in your project's public folder by default but in the case you don't, create it and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB: The manifest allows chrome browsers to show the add to homescreen prompt.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  Congratulations 👏👏
&lt;/h2&gt;

&lt;p&gt;Reaching this point you have successfully made your React App a PWA, great job 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l41lUjUgLLwWrz20w/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l41lUjUgLLwWrz20w/giphy.gif" alt="end giph"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Don't Let The Lies Of Imposter Syndrome Get To You</title>
      <author>Ayan S</author>
      <pubDate>Sat, 31 Jul 2021 20:10:53 +0000</pubDate>
      <link>https://dev.to/madebyayan/don-t-let-the-lies-of-imposter-syndrome-get-to-you-749</link>
      <guid>https://dev.to/madebyayan/don-t-let-the-lies-of-imposter-syndrome-get-to-you-749</guid>
      <description>&lt;p&gt;Being a developer and coder for years, I recently realized that it's okay to use no code solutions for things I'm not as familiar with&lt;/p&gt;

&lt;p&gt;It's NOT cheating if you use templates or easier solutions, it's just being productive&lt;/p&gt;

&lt;p&gt;In fact it opens up a whole new area of possibilities that you never knew existed.&lt;/p&gt;

&lt;p&gt;You'll be able to build quicker and be more productive as you'll be able to finish projects faster. And at the end of the development journey, the thing that you'll have would be the thing that YOU built&lt;/p&gt;

&lt;p&gt;So, don't let the lies of imposter syndrome get to you!&lt;/p&gt;

</description>
      <category>nocode</category>
      <category>mentalhealth</category>
      <category>devjournal</category>
      <category>impostersyndrome</category>
    </item>
    <item>
      <title>Fine-tuning the performance of the DeepRacer model</title>
      <author>Vivek0712</author>
      <pubDate>Sat, 31 Jul 2021 19:03:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/fine-tuning-the-performance-of-the-model-4pjo</link>
      <guid>https://dev.to/aws-builders/fine-tuning-the-performance-of-the-model-4pjo</guid>
      <description>&lt;p&gt;In the first part of the AWS DeepRacer Blog series, we saw how to create your AWS DeepRacer Model. How cool is to watch your AWS DeepRacer car navigating autonomously every corner and turn in the circuit with your Reinforcement Learning model guiding it? Now its time to fine-tune the model so that we will try to clock the best time.&lt;/p&gt;

&lt;p&gt;We will try to dive deeper into this tutorial and discuss more on the Action Space, Reward Function and Hyper-parameter tuning. I have explained of creating and fine-tuning the model using two algorithms and action spaces. You can choose either one and ignore the rest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-fundamentals"&gt;
  &lt;/a&gt;
  Understanding the fundamentals
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#reinforcement-learning-algorithms"&gt;
  &lt;/a&gt;
  Reinforcement Learning Algorithms
&lt;/h3&gt;

&lt;p&gt;We can train models using either of two RL Algorithms&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proximal Policy Optimization (PPO)&lt;/li&gt;
&lt;li&gt;Soft Actor Critic (SAC)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main differences between the two algorithms are&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;PPO&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;SAC&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Works in both discrete and continuous action spaces&lt;/td&gt;
&lt;td&gt;Works in a continuous action space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;On-policy&lt;/td&gt;
&lt;td&gt;Off-policy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uses entropy regularization&lt;/td&gt;
&lt;td&gt;Adds entropy to the maximization objective&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;To know more about the algorithms, check this &lt;a href="!https://docs.aws.amazon.com/deepracer/latest/developerguide/deepracer-how-it-works-reinforcement-learning-algorithm.html"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#action-space"&gt;
  &lt;/a&gt;
  Action Space
&lt;/h3&gt;

&lt;p&gt;Action Space is the set of actions that is subjected to Maximum speed, Speed Granularity, Maximum Steering Angle and Steering angle Granularity. At a particular instance of the input image from the sensor (Front-facing camera), the model tries to pick one of the actions and the evaluates the reward obtained for the particular action.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Discrete Action Space: The set of actions is defined by the user by specifying the maximum steering angle, speed values, and their respective granularities to generate the corresponding combinations of speed and steering actions. Therefore, the policy returns a discrete distribution of actions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continuous Action Space: The policy only outputs two discrete values. These values are interpreted to be the mean and standard deviation of a continuous normal distribution. You define a range for speed and steering angle. The action for an observed state is chosen from this user-defined range of speed and steering by sampling the normal distribution, defined by the mean and standard deviation returned from the policy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hyperparameters"&gt;
  &lt;/a&gt;
  Hyperparameters:
&lt;/h3&gt;

&lt;p&gt;Hyperparameters are variables to control your reinforcement learning training. They can be tuned to optimize the training time and model performance.&lt;br&gt;
We have provision to fine-tune seven hyperparameters. We will try to understand how each hyperparameter influences model training. Hyperparameter tuning is all about iterative improvement through trial and error method.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Gradient descent batch size:&lt;/em&gt; The batch is a subset of an experience buffer that is composed of images captured by the camera mounted on the AWS DeepRacer vehicle and actions taken by the vehicle.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Number of epochs:&lt;/em&gt; The number of passes through the training data to update the neural network weights during gradient descent.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Learning rate:&lt;/em&gt; The learning rate controls how much a gradient-descent (or ascent) update contributes to the network weights.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Entropy:&lt;/em&gt; The added uncertainty helps the AWS DeepRacer vehicle explore the action space more broadly.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Discount factor:&lt;/em&gt; The discount factor of 0 means the current state is independent of future steps, whereas the discount factor 1 means that contributions from all of the future steps are included.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Loss type:&lt;/em&gt; The type of objective function to update the network weights.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;The number of experience episodes between each policy-updating iteration:&lt;/em&gt; The size of the experience buffer used to draw training data from for learning policy network weights.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;SAC (Alpha Value):&lt;/em&gt; You can tune the amount of entropy to use in SAC with the hyperparameter SAC alpha, with a value between 0.0 and 1.0. The maximum value of the SAC alpha uses the whole entropy value of the policy and favors exploration. The minimum value of SAC alpha recovers the standard RL objective and there is no entropy bonus to incentivize the exploration. A good SAC alpha value to kick off your first model is 0.5.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#reward-function"&gt;
  &lt;/a&gt;
  Reward Function
&lt;/h3&gt;

&lt;p&gt;The reward function and the action space go hand in hand. The reward function must be compatible with the values specified in the action list.&lt;br&gt;
Last time, we had selected one of the default reward function and trained the model. Though that's the best way to start, we need to understand the parameters of the vehicle input and design our own reward function to clock the best time.&lt;br&gt;
The parameter that is passed to the reward function is ‘params’ which is a Python Dictionary object.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;I recommend you to read the official documentation and understand each parameter &lt;a href="https://docs.aws.amazon.com/deepracer/latest/developerguide/deepracer-reward-function-input.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-vehicle"&gt;
  &lt;/a&gt;
  Creating your vehicle
&lt;/h2&gt;

&lt;p&gt;In your DeepRacer Console, head to Your Garage in the side Nav Pane.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating vehicle - Discrete Action Space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click "Create Vehicle" and give a suitable name of your choice and select any vehicle shell and click Next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yThDlif_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dx0z6kqfxovuj55nex4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yThDlif_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dx0z6kqfxovuj55nex4.png" alt="Discrete Vehicle Create"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Vehicle Mod Specifications - select "Camera" as the sensor (Since we are going to race in Time Trials) and click Next&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u1l8Vpvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qijwq3z8cipjw9ep36h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u1l8Vpvd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qijwq3z8cipjw9ep36h.png" alt="Vehicle Mod"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Action Space,  Choose your action space type, select Discrete and change the maximum and granularity values and notice the action list gets updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BfA_hGqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r76497yp8of69zy9lsm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BfA_hGqu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r76497yp8of69zy9lsm8.png" alt="Discrete Action Space"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These action list define the behaviour of the model on the track.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXtISgEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gbxmtw762ja7kjv9egc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXtISgEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gbxmtw762ja7kjv9egc.png" alt="Discrete Action Space List"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click Finish and your Discrete Action Space Vehicle is ready.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating vehicle - Continuous Action Space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Follow same steps in creating a new vehicle and giving new name and selecting the Camera as Sensor.&lt;/p&gt;

&lt;p&gt;For Choose your action space type, select Continuous.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gTtuKw6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g37ycgb96or6azq6omnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gTtuKw6o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g37ycgb96or6azq6omnc.png" alt="Cont Action Space"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you are ready with the vehicles, you should have your vehicles listed in the Garage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VAHfvSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cegyd2mo4mbxk856o5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VAHfvSS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cegyd2mo4mbxk856o5v.png" alt="Vehicle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-model"&gt;
  &lt;/a&gt;
  Create a model
&lt;/h2&gt;

&lt;p&gt;Give a name for the model you are creating. &lt;/p&gt;

&lt;p&gt;In this blog, the model &lt;em&gt;deepracerblog-ppo&lt;/em&gt; for Discrete and &lt;em&gt;deepracerblog-sac&lt;/em&gt; for Continuous Action Space and select Environment Simulation as "ReInvent 2018 Track"&lt;/p&gt;

&lt;p&gt;For Race type, select the type (for this post, we select Time trial).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#training-algorithms-and-hyperparameters"&gt;
  &lt;/a&gt;
  Training Algorithms and Hyperparameters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;deepracerblog-ppo&lt;/em&gt; Model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Training Algorithm: PPO&lt;br&gt;
Hyperparameters: Configure the parameters&lt;br&gt;
Agent: Select the Model you have created with discrete/ continuous action space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDitnx6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zrbut3a65hjcmejjhxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDitnx6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3zrbut3a65hjcmejjhxq.png" alt="PPO"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KMyi6cd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bruurfsz3wgak9pxn8b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KMyi6cd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bruurfsz3wgak9pxn8b2.png" alt="Agent"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;deepracerblog-ppo&lt;/em&gt; Model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Training Algorithm: PPO&lt;br&gt;
Hyperparameters: Configure the parameters&lt;br&gt;
Agent: Select the Model you have created with discrete/ continuous action space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pQC_Ks1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3b68a5geau4aemz3wk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pQC_Ks1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3b68a5geau4aemz3wk3.png" alt="SAC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQcjxa0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2f7l9uzg4pl579p4ogu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQcjxa0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p2f7l9uzg4pl579p4ogu.png" alt="Agent SAC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have fine tuned your model hyper parameters, Choose Next. Lastly, you can write a reward function to configure your vehicle based on the hyperparameters and the total training time. Click Validate to validate the reward function&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WWekdt-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uenu5eu4mohae3s6350b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WWekdt-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uenu5eu4mohae3s6350b.png" alt="Reward Function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-and-evaluating-the-model"&gt;
  &lt;/a&gt;
  Training and Evaluating the model
&lt;/h2&gt;

&lt;p&gt;We need to specify the stopping time for the model training. But there is a catch here. If we train our model for lesser time, there is a high chance of model underfitting, that is, the car may not perform well.&lt;/p&gt;

&lt;p&gt;If the model trained for higher time, the model may experience overfitting, that is the model may perform really well for the current track you had trained for, but may not perform well in other tracks.&lt;/p&gt;

&lt;p&gt;To achieve the generalization, we need to set optimum hours of training, so that the model converges. From other fellow developers, it is said that 4 hours of training yields good result.&lt;/p&gt;

&lt;p&gt;Keep an eye on the evaluation Simulation and the Logs of the model, so that you can improve in future models.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cV3-IuPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlja05bzikrfamorw07s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cV3-IuPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlja05bzikrfamorw07s.png" alt="Reward Graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--29Gmk-mq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pfofvh0e6ljwmvkbt6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--29Gmk-mq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81pfofvh0e6ljwmvkbt6.gif" alt="Evaluate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now we are ready to conquer the checkered flag! Do participate in AWS DeepRacer League and secure top position!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Additional Resources:&lt;br&gt;
AWS DeepRacer e-learning course for free: &lt;a href="https://www.aws.training/Details/eLearning?id=32143"&gt;https://www.aws.training/Details/eLearning?id=32143&lt;/a&gt;&lt;br&gt;
For source-code and get started pack, see &lt;a href="https://github.com/Vivek0712/aws-deepracer"&gt;https://github.com/Vivek0712/aws-deepracer&lt;/a&gt;&lt;br&gt;
For more information about AWS DeepRacer, see &lt;a href="https://aws.amazon.com/deepracer/"&gt;https://aws.amazon.com/deepracer/&lt;/a&gt;.&lt;br&gt;
For more information about AWS Training and Certification, see &lt;a href="https://aws.amazon.com/training/"&gt;https://aws.amazon.com/training/&lt;/a&gt;.&lt;br&gt;
To troubleshoot and collaborate about the AWS DeepRacer, see &lt;a href="https://forums.aws.amazon.com/forum.jspa?forumID=318"&gt;https://forums.aws.amazon.com/forum.jspa?forumID=318&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>deepracer</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Having the rick power!!! Pt.3</title>
      <author>Blitty</author>
      <pubDate>Sat, 31 Jul 2021 18:53:24 +0000</pubDate>
      <link>https://dev.to/blitty/having-the-rick-power-pt-3-2f0k</link>
      <guid>https://dev.to/blitty/having-the-rick-power-pt-3-2f0k</guid>
      <description>&lt;p&gt;Hello again!!! 🙌&lt;/p&gt;

&lt;p&gt;Here I am, I've just open vscode, and the first thing I did was styling the container of the cards, now is amazing how it is!! (Maybe you don't like it, but I DO :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#bit-rrouter"&gt;A bit of react-router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#apollo"&gt;Starting with Apollo&lt;/a&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#little-explanation"&gt;A little explanation&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-return"&gt;Returning to the project&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#a-bit-of-reactrouter"&gt;
  &lt;/a&gt;
  A bit of react-router &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Then I did 'the change', I converted &lt;code&gt;App.jsx&lt;/code&gt; into a Switch for Routes, using &lt;code&gt;react-router-dom&lt;/code&gt;, which I have neves used, but is super simple!!&lt;/p&gt;

&lt;p&gt;(Mini tutorial)&lt;br&gt;
To use &lt;strong&gt;React Router&lt;/strong&gt;, the first thing we have to do is install it :) of course... &lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install react-router-dom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have it installed, the first thing we have to do, is to say to React that we are using it!!! So we tell &lt;code&gt;index.js&lt;/code&gt; (the one that is god, because it controls everything) to have something called &lt;code&gt;BrowserRouter&lt;/code&gt;, which is like a &lt;code&gt;Route&lt;/code&gt; but a bit special, because is the one that keeps a history.&lt;/p&gt;

&lt;p&gt;Next step is to go to out &lt;code&gt;App.jsx&lt;/code&gt; where we used to have all of our things. But now we have it as a Router for Routes. Okey okey... if you have not understand me, we have a &lt;code&gt;Switch&lt;/code&gt; that has &lt;code&gt;Route&lt;/code&gt;s which redirect to the component you want. So we have something like this -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/06k0m?module=/src/App.jsx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So if you try to go to another path that is not &lt;code&gt;/&lt;/code&gt; (home), you will be displayed &lt;code&gt;Error!!&lt;/code&gt;. And why? Because when we used the &lt;code&gt;Switch&lt;/code&gt;, we created a &lt;code&gt;Route&lt;/code&gt; which has no path, when a &lt;code&gt;Route&lt;/code&gt; has no path, it means that any other path will go to that one, so for example if we search: &lt;strong&gt;/blitty&lt;/strong&gt; we will have the same error, or &lt;code&gt;OwO&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;But how do we do, if for example we want &lt;strong&gt;/owo&lt;/strong&gt; to work?&lt;br&gt;
Well.. that's pretty simple, we just create a new &lt;code&gt;Route&lt;/code&gt; and we add the attribute &lt;code&gt;path="/owo"&lt;/code&gt;, also &lt;code&gt;component={Component}&lt;/code&gt;. And that's all!!! So we would have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   // other routes
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;exact&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/owo"&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Owo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And... what does &lt;code&gt;exact&lt;/code&gt; mean???&lt;br&gt;
It means that it will only match the &lt;em&gt;exact&lt;/em&gt; route, so for example, if we search for &lt;code&gt;/owo/uwu&lt;/code&gt; we wouldn't get rendered the component &lt;code&gt;Owo&lt;/code&gt;, only when &lt;code&gt;/owo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's all for todays route, that is all I needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-with-apollo"&gt;
  &lt;/a&gt;
  Starting with Apollo &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We are f*... Okey no hahahahaa, that was a joke!!!!&lt;/p&gt;

&lt;p&gt;We saw what &lt;strong&gt;GraphQL&lt;/strong&gt; and *&lt;em&gt;Apollo&lt;/em&gt; was, now is time to touch it, so I'll come back... (well you will read this at the same time, but meh, I like doing this, is more... entertaining (?) wish so...).&lt;/p&gt;

&lt;p&gt;Now that I have done the tutorial and an approach of fetching data from &lt;a href="https://rickandmortyapi.com/documentation"&gt;rick and morty API&lt;/a&gt;, is time to explain to you 👊.&lt;/p&gt;

&lt;p&gt;Apollo is very very easy, first time I use it and I got everything!! (I'll give you the sandbox, but is the same one).&lt;/p&gt;

&lt;p&gt;What I used was, &lt;code&gt;ApolloProvider&lt;/code&gt;, &lt;code&gt;ApolloClient&lt;/code&gt;, &lt;code&gt;useQuery&lt;/code&gt;, &lt;code&gt;InMemoryCache&lt;/code&gt; and &lt;code&gt;gql&lt;/code&gt;. All from the library &lt;code&gt;@apollo/client&lt;/code&gt; that you can install using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i @apollo/client&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So... what is this all about B?&lt;/li&gt;
&lt;li&gt;Well... you can go to the Docs :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nah, I am going to explain it!!! Don't worry!! I'll try it at least. (The &lt;a href="https://codesandbox.io/s/solitary-wood-06k0m?file=/src/apolloExample.jsx:113-127"&gt;codesandbox&lt;/a&gt; is commented)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-a-little-explanation"&gt;
  &lt;/a&gt;
  » A little explanation &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/docs/react/api/react/hooks/#the-apolloprovider-component"&gt;&lt;code&gt;ApolloProvider&lt;/code&gt;&lt;/a&gt; is like &lt;code&gt;useContext&lt;/code&gt; of React, you can use it to access data from every component inside that &lt;em&gt;context&lt;/em&gt;. So we use it to wrap components that (in this case) needs data from a GraphQL API, so they can access that data. It hhas one prop which is &lt;code&gt;client&lt;/code&gt; that is important because is the object generated by &lt;code&gt;ApolloClient&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/docs/react/api/core/ApolloClient/#gatsby-focus-wrapper"&gt;&lt;code&gt;ApolloClient&lt;/code&gt;&lt;/a&gt; is a class provided by Apollo Client, which we need to communicate to the GraphQL API. This class has a lot of arguments to use in the constructor, but the ones required, are &lt;code&gt;uri&lt;/code&gt; or &lt;code&gt;link&lt;/code&gt; (of course) that is the link ti the GrapQL API. And &lt;code&gt;cache&lt;/code&gt; which is required, and is the cache that Apollo will use to store the fetch results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/docs/react/caching/overview/"&gt;&lt;code&gt;InMemoryCache&lt;/code&gt;&lt;/a&gt; is a type of cache provided by Apollo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/docs/resources/graphql-glossary/#gql-function"&gt;&lt;code&gt;gql&lt;/code&gt;&lt;/a&gt; a JavaScript template literal tag that parses GraphQL queries into an abstract syntax tree (AST). (I have copy the docs, because is very well explained)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.apollographql.com/docs/react/data/queries/"&gt;&lt;code&gt;useQuery&lt;/code&gt;&lt;/a&gt; is the way of fetching data, when we call this hook, we get a JSON with 3 keys: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;loading&lt;/code&gt; which is a boolean that gives us information about the request, so, if the request is pending or loading, then the loading argument is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;error&lt;/code&gt; if the query was loaded and there was an error fetching or collecting the data, we are returned that error.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;data&lt;/code&gt; when it is loaded, and there is no error, we get the data (of the query we passed to the useQuery) in this key of the json.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it is very powerful, because we didn't really did something, and we have 3 states that we can easily use, to know how our fetch of the data has done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#returning-to-the-project"&gt;
  &lt;/a&gt;
  Returning to the project &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since we want to fetch data from the component &lt;code&gt;Search&lt;/code&gt; and &lt;code&gt;CardContainer&lt;/code&gt;.&lt;br&gt;
In &lt;code&gt;Search&lt;/code&gt; to get the characters with the matched name, and in &lt;code&gt;CardContainer&lt;/code&gt; to get 5 random characters.&lt;/p&gt;

&lt;p&gt;So nice everything... I am not sure about giving &lt;code&gt;ApolloProvider&lt;/code&gt; in &lt;code&gt;home.jsx&lt;/code&gt;, which would be a destruction to my self from a lot of developers, thinkers and philosophers. Why I said that? IDK :)&lt;/p&gt;

&lt;p&gt;But I think is the nice place for it, because we have both components which fetches data from the same GraphQL API, but with different queries. (If you think I am wrong, please explain to me).&lt;/p&gt;

&lt;p&gt;I am going to code, I'll be right back.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1VuZTjTISUvZGJ1Fih/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1VuZTjTISUvZGJ1Fih/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So... it has been just 30min, of doing it and thinking...&lt;br&gt;
The main problem was that the &lt;code&gt;Client&lt;/code&gt; I was creating, didn't let me use &lt;code&gt;.query&lt;/code&gt; to test the queries, but now it works fine. I just changed the &lt;code&gt;require&lt;/code&gt; with &lt;code&gt;import ... from ...&lt;/code&gt;. Don't know why it happened, if you it, tell me in comments 🙏.&lt;/p&gt;

&lt;p&gt;Then I added a lot of random, to get 5 random characters from the GraphQL API, every time you render.&lt;/p&gt;

&lt;p&gt;The Loading or Error, are not pretty, I haven't even make nothing, just some &lt;code&gt;h3&lt;/code&gt; hahahahahaha, but don't worry I'll chage it (if you are reading this and the changes have been applied... you are lucky :])&lt;/p&gt;

&lt;p&gt;And this is all bby!!! Well, I didn't say it, but I created one folder called &lt;code&gt;apollo&lt;/code&gt; where I have the &lt;code&gt;Client&lt;/code&gt; and the &lt;code&gt;Queries&lt;/code&gt;, so everything is separated and nice :)&lt;/p&gt;

&lt;p&gt;Wish you like it!!! Here you have the source code &lt;a href="https://github.com/blitty-codes/rick-power"&gt;rick-power&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#follow-me-or-contact"&gt;
  &lt;/a&gt;
  Follow me or contact!
&lt;/h2&gt;

&lt;p&gt;(I liked more the red bird :_()&lt;br&gt;
🐦 &lt;a href="https://twitter.com/blit12_"&gt;Twitter&lt;/a&gt;&lt;br&gt;
🐙 &lt;a href="https://github.com/blitty-codes"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👥 &lt;a href="https://www.linkedin.com/in/blitty/"&gt;LinkdIn&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>apollo</category>
    </item>
    <item>
      <title>Add Social Login in Laravel With Socialite</title>
      <author>Suresh Ramani</author>
      <pubDate>Sat, 31 Jul 2021 18:26:35 +0000</pubDate>
      <link>https://dev.to/sureshramani/add-social-login-in-laravel-with-socialite-3gad</link>
      <guid>https://dev.to/sureshramani/add-social-login-in-laravel-with-socialite-3gad</guid>
      <description>&lt;p&gt;Social login is now an essential part of any site which performs user authentication. It saves the users a lot of time, as they won't need to fill the whole form. They just sign up with their social account and next time they can log into the website with a single click.&lt;/p&gt;

&lt;p&gt;Using social media accounts to sign up for websites is common nowadays and preferred by users because they don't have to remember a password every time they log in to a website. Even though social signup is easy, you can also inadvertently end up with a bunch of very confused users in an app.&lt;/p&gt;

&lt;p&gt;Login with social accounts is a straightforward process and simultaneously enhances the user experience; nowadays, everybody knows a better user experience is the key to any digital product's success.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-laravel-socialite"&gt;
  &lt;/a&gt;
  What is Laravel Socialite?
&lt;/h3&gt;

&lt;p&gt;Laravel Socialite  is a package developed to abstract away any social authentication complexities and boilerplate code into a fluent and expressive interface.&lt;/p&gt;

&lt;p&gt;Socialite only supports Google, Facebook, Twitter, Linked In, Github, and Bitbucket as OAuth providers. They won't be adding any others to the list, however, there's a community-driven collection called  Socialite Providers , which contains plenty of unofficial providers for Socialite.&lt;/p&gt;

&lt;p&gt;In this tutorial, we are going to add Social Authentication to a Laravel app through  Socialite , an official Laravel package that makes adding social authentication to a Laravel app.&lt;/p&gt;

&lt;p&gt;If you want to manage your VPS / VM Server without touching command line go and &lt;a href="//app.serveravatar.com/?affiliate_code=techvblogs&amp;amp;key=dCy9DLa6"&gt;Checkout this link&lt;/a&gt;. ServerAvatar allows you to quickly set up WordPress or Custom PHP websites on VPS / VM in  matter of minutes.  You can host multiple websites on a single VPS / VM, configure SSL certificates, and monitor the health of your server  without ever touching the command line interface .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://techvblogs.com/blog/social-login-laravel-socialite"&gt;Read More&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>mysql</category>
    </item>
    <item>
      <title>Disable Page Pulling</title>
      <author>jfullerco</author>
      <pubDate>Sat, 31 Jul 2021 18:18:56 +0000</pubDate>
      <link>https://dev.to/jfullerco/disable-page-pulling-2m4b</link>
      <guid>https://dev.to/jfullerco/disable-page-pulling-2m4b</guid>
      <description>&lt;p&gt;In case anyone else finds the ability to "pull" your page down or right exposing whitespace that is not actually there...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/updates/2017/11/overscroll-behavior"&gt;https://developers.google.com/web/updates/2017/11/overscroll-behavior&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this helps someone else from having to search around for a solution!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;overscroll&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PCI Devices in Linux</title>
      <author>Gaurav Maheshwari</author>
      <pubDate>Sat, 31 Jul 2021 18:11:07 +0000</pubDate>
      <link>https://dev.to/gaurav24072002/pci-devices-in-linux-36fi</link>
      <guid>https://dev.to/gaurav24072002/pci-devices-in-linux-36fi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-pci-devices-"&gt;
  &lt;/a&gt;
  What are PCI Devices ?
&lt;/h2&gt;

&lt;p&gt;A PCI device is any piece of computer hardware that plugs directly into a PCI slot on a computer's motherboard. PCI, which stands for Peripheral Component Interconnect, was introduced to personal computers by the Intel Corporation in 1993. The technology to operate PCI is integrated into the motherboard of nearly every personal computer manufactured since 1995. A PCI connection on a motherboard can be identified as a long strip of raised copper connectors encased in plastic. This long strip of connectors is usually called a bus.&lt;/p&gt;

&lt;p&gt;The PCI bus is not as fast as the system bus. Its primary purpose is to facilitate communication of hardware devices of all types such as audio, video, network or graphics with the microprocessor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-to-list-down-all-pci-devices-in-linux-system"&gt;
  &lt;/a&gt;
  Command to list down all PCI devices in linux system.
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;lspci&lt;/code&gt; command is used to display detailed information about all PCI buses and devices in the server or desktop or laptop powered by Linux operating system.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifIiBb7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20r1irc930neerpzaybe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifIiBb7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20r1irc930neerpzaybe.PNG" alt="lspci"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;lspci –tv&lt;/code&gt; command will list down all the PCI as tree structure because of &lt;code&gt;–t&lt;/code&gt; and due to &lt;code&gt;-v&lt;/code&gt; shows the device vendors and names.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PNKTdSM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp08jkt5o3ouyy5f2c31.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PNKTdSM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp08jkt5o3ouyy5f2c31.PNG" alt="tree pci"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;lspci -k&lt;/code&gt; shows the kernel driver that is being used to handle the respective PCI device&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLGDrbTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcrtc6654m72n87r1q5r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLGDrbTQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bcrtc6654m72n87r1q5r.PNG" alt="kernel pci"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;lspci -m&lt;/code&gt; is used If you want to pass the output of the lspci command to a shell script, you may want to use &lt;code&gt;-m&lt;/code&gt; option (or &lt;code&gt;-mm&lt;/code&gt; option) as shown below.&lt;br&gt;
This option is also helpful when you want to view the subsystem information.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SA6z-K0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mja1qwajdnlpbhh9fys2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SA6z-K0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mja1qwajdnlpbhh9fys2.PNG" alt="-m"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;lspci -n&lt;/code&gt; If you want to display the PCI vendor code, and the device code only as the numbers, use &lt;code&gt;-n&lt;/code&gt; option. This will not lookup the PCI file to get the corresponding values for the numbers.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRTzY4yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwmlh2igtarli8q1czs4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRTzY4yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwmlh2igtarli8q1czs4.PNG" alt="-n"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you are not able to apply the switches(&lt;code&gt;lspci [&amp;lt;switches&amp;gt;]&lt;/code&gt;) install pciutils.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apt install pciutils
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here In the system I have 10 PCI powered by the Linux operating system. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ifIiBb7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20r1irc930neerpzaybe.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ifIiBb7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20r1irc930neerpzaybe.PNG" alt="lspci"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Host Bridge&lt;/strong&gt; - The "Host Bridge" is what connects the tree of PCI busses (which are
internally connected with PCI-to-PCI Bridges) to the rest of the
system. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kEE2A2Ra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s5j3zh7234v79nh4s7h.gif" alt="host bridge"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ISA Bridge&lt;/strong&gt; – ISA Stands for Industry Standard Architecture. PCI to ISA bridge is the most common method of interfacing ISA devices to modern chipsets. In most respects, these devices perform like a standard PCI device.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IDE interface&lt;/strong&gt; - Integrated Drive Electronics is for connection of storages devices such as Hard Disk Drives (HDD), Solid State Drives (SSD) and CD/DVD drives to the computer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;VGA compatible controller&lt;/strong&gt; - VGA stands for Video Graphics Array. VGA Controller is the digital circuit designed to drive VGA displays.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ethernet controller&lt;/strong&gt; - Ethernet controller allows you to make a wired connection to a computer network. This provides access to the network programs and resources, including a high-speed Internet connection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;System peripheral&lt;/strong&gt; - It is any external device that provides input and output for the computer. For example, a keyboard and mouse&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multimedia audio controller&lt;/strong&gt; - Multimedia audio controller drivers allow your operating system to communicate with the sound hardware such as your speakers, headphones, etc. Thus, if there is a problem with these drivers, your connected audio devices won't work properly.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;USB controller&lt;/strong&gt; - USB controller is an interface that allows an enabled piece of hardware to interact and communicate with a particular piece of software.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bridge&lt;/strong&gt; - Bridge is a device that connects a PCI bus to either another PCI bus or a bus of a different standard&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SATA controller&lt;/strong&gt; - SATA controller is a hardware interface that connects a hard drive to a computer's motherboard and manages or directs the flow of data&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>pci</category>
      <category>ubuntu</category>
      <category>bash</category>
    </item>
    <item>
      <title>JavaScript Behind The Scenes: Scope &amp; The Scope Chain</title>
      <author>Pawan Bhatt 👨‍💻</author>
      <pubDate>Sat, 31 Jul 2021 17:40:59 +0000</pubDate>
      <link>https://dev.to/bhattpawan/javascript-behind-the-scenes-scope-the-scope-chain-4de7</link>
      <guid>https://dev.to/bhattpawan/javascript-behind-the-scenes-scope-the-scope-chain-4de7</guid>
      <description>&lt;p&gt;Hey fellow developers, so now that we are well verse with &lt;a href="https://dev.to/bhattpawan/javascript-behind-the-scenes-the-execution-context-call-stack-4m64"&gt;The Execution Context and Call Stack&lt;/a&gt;, its now time to dive a little deeper into JavaScript and understand what The Scope and Scope Chain is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-we-mean-by-scope"&gt;
  &lt;/a&gt;
  What do we mean by 'Scope'?
&lt;/h2&gt;

&lt;p&gt;Scope is an environment in which a variable is accessible. It determines the &lt;em&gt;visibility&lt;/em&gt; of a variable. We cannot access a variable outside its scope. JavaScript follows &lt;strong&gt;Lexical Scoping&lt;/strong&gt; , which determines the scope of a variable by how the functions and blocks are placed in our code. Following are the different types of scopes in JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Global Scope:&lt;/strong&gt; Variables defined in global scope are defined outside any function or block. These variables can be accessed anywhere throughout the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Function Scope:&lt;/strong&gt; Variables which are defined inside a function, have their visibility limited to inside the function. If we try to access them outside the function, we get a &lt;em&gt;ReferenceError&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Block Scope:&lt;/strong&gt; Block Scope was introduced with ES6 and only the variables defined with &lt;strong&gt;let&lt;/strong&gt; and &lt;strong&gt;const&lt;/strong&gt; have their scope limited to the block they are defined in. A block is any section of code between two curly braces {} (like in if, for and switch statements). However, the variables defined with var have their scope limited to the execution context i.e., global scope if the block is defined in global context and function scoped if the block is defined inside a function.&lt;/p&gt;

&lt;p&gt;Here is a code snippet to explain the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const myName = 'Pawan Bhatt';
    // Globally Scoped, can be accessed anywhere throughout the code

    function myFunc() {
    const age = 20;
    // Function Scoped, can be accessed inside the function only
    if (age &amp;gt; 18) {
        const teenager = false;
        // Block scoped, cannot be accesses outside the if block
        var student = 'No';
        // Function scoped, can be accessed outside if but not outside myFunc()
    }
    console.log(`${myName} is aged ${age} and is teenager? ${teenager}`);
    // ReferenceError: teenager not defined
    }
    myFunc();
    console.log(student); // ReferenceError: student is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#understanding-the-scope-chain"&gt;
  &lt;/a&gt;
  Understanding the Scope Chain:
&lt;/h2&gt;

&lt;p&gt;Scope chain is what helps JavaScript to resolve the value for a variable. Scope Chain enables JavaScript to look for a particular variable or value and inherit it from the parent if it is not found in the current scope. For instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function a() {
  const x = 5;

  function b() {
    console.log(x);
    // Value picked up from parent scope
  }
  b();
}
a();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us consider the below code example and try to understand Scope Chain in a better way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'Pawan';

function first() {
  const marks = 90;

  if (marks &amp;gt; 35) {
    var result = 'Pass';
  }

  function second() {
    const rank = 1;
    console.log(`${name} has marks ${marks} and result is ${result}`);
  }
  second();
}

first();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the code snippet above, if we try to build the scope chain, it will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LIzR3LDq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627751778842/2DxtK47Mf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LIzR3LDq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627751778842/2DxtK47Mf.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_hxCRuq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627752862295/e6lnFRvbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_hxCRuq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627752862295/e6lnFRvbf.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D0U3ctft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627751695128/U0cc3E8lr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0U3ctft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627751695128/U0cc3E8lr.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the scope chain flow goes like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2dXMjII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627752005926/SbjtMIBQQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2dXMjII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627752005926/SbjtMIBQQ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that: &lt;strong&gt;"Every scope has access to all the variables from its outer scope"&lt;/strong&gt;.&lt;br&gt;
However, &lt;strong&gt;"The outer scope cannot access the variables defined in inner scope"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That was all we had to cover about Scope and The Scope Chain. For any queries or suggestions, feel free to use the comment section.&lt;/p&gt;

&lt;p&gt;Stay Safe and Happy Learning🙌&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I made 50+ COLOR PALETTES for you to use in your next projects and designs 🎨</title>
      <author>_CODE</author>
      <pubDate>Sat, 31 Jul 2021 17:18:27 +0000</pubDate>
      <link>https://dev.to/underscorecode/i-made-50-color-palettes-for-you-to-use-in-your-next-projects-and-designs-33f7</link>
      <guid>https://dev.to/underscorecode/i-made-50-color-palettes-for-you-to-use-in-your-next-projects-and-designs-33f7</guid>
      <description>&lt;p&gt;Hi, everybody! 👋&lt;/p&gt;

&lt;p&gt;Today, I bring you &lt;strong&gt;50+ color palettes&lt;/strong&gt; to use in your upcoming projects or to just get some inspiration out of them.&lt;/p&gt;

&lt;p&gt;I've given every palette a name to make it easier to identify them (I've tried my best, promise 😅).&lt;/p&gt;

&lt;p&gt;Let me know if you like this kind of content and if you'd like to see more articles like this in the future (about colors, gradients, fonts, design resources, etc). I'd be glad to hear from you in comments! &lt;/p&gt;

&lt;p&gt;And now, let's have a look at those color schemes 👇&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#package-1"&gt;
  &lt;/a&gt;
  Package 1
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Sunset in Arizona
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Slvxfq8K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mss1kgc88a4co5dm9ar.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Pink Fall Vibes
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEK0Fgcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68ktbji1dsmzihj58ezu.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Desert Adventures
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaPVhd47--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6aa67y4gjdxkfacjdyj.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Chic Garden
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mQRJZ-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypqk17ba1cqj64bxzgqa.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Neon Lights
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rp8s4_O9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kil3v8tbh23t7o1sc587.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Pastel Cake
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZU10A_yo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/skm8ce3kzrzi6g96wxce.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Acid Tangerine
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---24oHxOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvwe7u5bh0houhxy8org.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Frozen Winter
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOnMxij---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u5fkvkekaihr5ut1z5y.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Vibing Summer
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-G489h9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s1hys7wzszugy3podlx.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Drops of Summer
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLnnUyMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pjw4urrqxwjy9sm64g9.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#package-2"&gt;
  &lt;/a&gt;
  Package 2
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt; Pink Mandarin
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n01H_9Ej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2djprisez1l9rc29irgu.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Nomadic Dreams
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jodYQK27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26uooxhg8cmuw151r0i2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Circus Acrobat
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrpJDiN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di4d00yxtnkxgmchd345.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Coffee By The Sea
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LI_NV-c---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54v9hvq3wtx440wng2hh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Strawberry Nights
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmnxWW_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biutwpnl4j3te1nqcy0w.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Dans La Fôret
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wIh-p_aK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/te2wgybwbow7s1uk291j.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Easter Vibes
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ELM_bYCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smkmadp9v1ic999rxroc.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Salty Waters
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssZrjlJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwtb32gpcib4dswzihde.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Fresh Berries
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0MTs2r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gw45h9aw3i0t23hfjzjf.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Skeptical Minds
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KOoykqrP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjgufokwb8jko0kz1cty.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#package-3"&gt;
  &lt;/a&gt;
  Package 3
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Dry Landscape
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mv_RG3Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si03oijh0ni1abcm4yub.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Dark Sunset
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AAY3piFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v55z8atbid4e10cn7rg3.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Antartic Sun
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mDY2GWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvjt11svzxdy44t6tn2a.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Velvet Fall
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m-JCTswH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hv5wehj9bchohug6xgi2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Water Park
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpPjMYxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whbgycbtq19zk7ymui7p.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Origami
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0Shuu6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvz3jubkdynpp7zwo2z3.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Nights In The City
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJw4nmEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo4q59faa2ieog9yr7u7.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Vintage Vineyards
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KNycnRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjne94c9pu7wmoas7aqj.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Fun &amp;amp; Games
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7lvTHP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwgy7vakxhyo6dzq8kts.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Aquamarina
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgXvn0-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxvbqmxs6kp27vm7k652.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#package-4"&gt;
  &lt;/a&gt;
  Package 4
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Cold Pastels
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sEQRhwCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mk5ughr0m60rb7wb5bpg.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Sober Twilight
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utVPWSdI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyklze9q9ywn52118fwj.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Sandy Cocoa
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VouZSQ5n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3d9t1xr6q38ty5deknv.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Tokyo Streets
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Js65BTVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bkeoy2pconjds7d5awh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Tireless Traveler 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7RoYpeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i9kmab68etkw119jwa8.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Candy Dreams
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B32J7F2b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4jiy6zn1lza7qka9b6k.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Roses &amp;amp; Wood
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2Nq7-OS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9igsye7tir515k3xh0a.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Downtown LA
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNox-pCn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c84s9qv9ken61suauxp.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Pumpkin Spice Latte
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iPUmAXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5m1nkt8vpttzw1wt3nl.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Honey Hearts
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKbgP-Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2013mpyd71umuh0uwwfh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#package-5"&gt;
  &lt;/a&gt;
  Package 5
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Orange Muffin
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RX1QJrn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21fvo7sierr55v9lot76.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Self-love
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSM0z_16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gjbmeeco645f2c7yunh.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Trip to Paris
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QDy_J5xI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc2f80enqhe6gtrld89e.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Perfect Getaway
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0omnhTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idjbf2pcgu8f418x764k.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Eclipse Solstice
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0PBL8K8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7aj6dk0tgom222zcno2b.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Muddy Feelings
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kP4b_c1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oltrsrzp9imodojvtwzr.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Watermelon Party
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BedZ2fu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gejnodd9pz8swzlui6fn.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Golden Hour
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0Ew_8eY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um91ixfwl1wmzqpjo37u.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Sun, Sand &amp;amp; Tan
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NdY35-0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nf7gvgbmwet1com7gjgx.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Soft Skies
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D0IOJxIZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6zo0kpx6mxemj2no6eu2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Vibrant Neon
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dn-tj_HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvim0skks1gpbu0dmbc3.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Sweet Surrender
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLVWgGKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qghjp3npsfyj1qvcvjo4.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;90s Child
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UkItNNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y0quualy5yzwiccwrzw.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Pomegranate Paradise
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZa9q5Bn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fidhd5wkgvpkgxkj4kd2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Brown Eyed Soul
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MTNu8YPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/povee5n8owd7tyfy97s8.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;And this is all for today! &lt;/p&gt;

&lt;p&gt;I hope you liked the article and see you all in the next 👋&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hFtVHPDcrVubS/source.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hFtVHPDcrVubS/source.gif" alt="Woman saying bye"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;🎉 Don't forget to follow &lt;a class="mentioned-user" href="https://dev.to/underscorecode"&gt;@underscorecode&lt;/a&gt;
 on &lt;a href="https://instagram.com/underscorecode"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/underscorecode"&gt;Twitter&lt;/a&gt; for more daily webdev content 🖥🖤&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>css</category>
      <category>design</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
