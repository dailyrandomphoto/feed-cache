<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Integrate Authentication to your Android App with Auth0</title>
      <author>Gourav Khunger</author>
      <pubDate>Mon, 27 Sep 2021 10:40:51 +0000</pubDate>
      <link>https://dev.to/byteslash/integrate-authentication-to-your-android-app-with-auth0-2hcf</link>
      <guid>https://dev.to/byteslash/integrate-authentication-to-your-android-app-with-auth0-2hcf</guid>
      <description>&lt;p&gt;&lt;a href="https://auth0.com"&gt;Auth0&lt;/a&gt; is an amazing tool to easily integrate user authentication in any kind of app you are building. It has a great set of tools to enable auth in your app in a few really quick steps.&lt;/p&gt;

&lt;p&gt;Today, we are going to look into how to integrate Auth0 into your Android App! First, we'll set up the local project for integrating Auth0, and then we'll set up the app on the Auth0 dashboard.&lt;/p&gt;

&lt;p&gt;Check out this video to learn what we are going to build in this tutorial:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/obk3q1AaH6I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The code for this basic app that we are going to build is present here on GitHub, star it and follow me :)&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gouravkhunger"&gt;
        gouravkhunger
      &lt;/a&gt; / &lt;a href="https://github.com/gouravkhunger/auth0-demo-android"&gt;
        auth0-demo-android
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Demo implementation of Auth0 Authentication for Android
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Demo Implementation of Auth0&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://genicsblog.com/authentication-in-android-app-with-auth0" rel="nofollow"&gt;Read the article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Demo implementation of Auth0 Authentication for Android.&lt;/p&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;This project is &lt;a href="https://github.com/gouravkhunger/auth0-demo-android/blob/main/LICENSE"&gt;&lt;code&gt;MIT&lt;/code&gt;&lt;/a&gt; Licensed.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;MIT License
Copyright (c) 2021 Gourav Khunger

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gouravkhunger/auth0-demo-android"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#android-app-setup"&gt;
  &lt;/a&gt;
  Android app setup
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#initialize-the-project"&gt;
  &lt;/a&gt;
  Initialize the project
&lt;/h2&gt;

&lt;p&gt;First, create a new Android Studio Project.  If you are just checking out Auth0, you can follow the steps mentioned in one of my previous articles on &lt;a href="https://genicsblog.com/how-to-create-your-first-android-app-using-android-studio"&gt;how to make a basic project using Android Studio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also use any existing project!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-view-binding"&gt;
  &lt;/a&gt;
  Set up view binding
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;View binding is a new way of referencing views from XML layouts inside your java/kotlin classes. View Binding creates a Binding class for each XML layout resource which you can use to refer views without the hassle of using &lt;code&gt;findViewById()&lt;/code&gt; or using the deprecated kotlin synthetics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-view-binding"&gt;
  &lt;/a&gt;
  Enable View Binding
&lt;/h3&gt;

&lt;p&gt;If you are reading this post in the future, chances are that view binding is supported right into new projects using Android Studio.&lt;/p&gt;

&lt;p&gt;If not, you can go into the App level &lt;code&gt;build.gradle&lt;/code&gt; file and add this piece of code anywhere inside the &lt;code&gt;android&lt;/code&gt; scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;buildFeatures&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;viewBinding&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This image will give you a gist of where to add it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2jk4djG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632594546418/IWp7Zd5Ju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2jk4djG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632594546418/IWp7Zd5Ju.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrate-auth0"&gt;
  &lt;/a&gt;
  Integrate Auth0
&lt;/h2&gt;

&lt;p&gt;To integrate Auth0 into our project, we need to do the following things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-auth0-dependencies"&gt;
  &lt;/a&gt;
  Add Auth0 dependencies
&lt;/h3&gt;

&lt;p&gt;In your app level &lt;code&gt;build.gradle&lt;/code&gt; dependencies section, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="k"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ... other dependencies&lt;/span&gt;

  &lt;span class="c1"&gt;// Auth0 Android SDK&lt;/span&gt;
  &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'com.auth0.android:auth0:2.4.0'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kgAJKGMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632596987895/ChRu2ueYY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kgAJKGMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632596987895/ChRu2ueYY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-manifest-placeholders"&gt;
  &lt;/a&gt;
  Add manifest placeholders
&lt;/h3&gt;

&lt;p&gt;You need to add one more simple line of code to the app level &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;defaultConfig&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;

        &lt;span class="c1"&gt;// Add this&lt;/span&gt;
        &lt;span class="n"&gt;manifestPlaceholders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;auth0Domain:&lt;/span&gt; &lt;span class="s2"&gt;"@string/com_auth0_domain"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;auth0Scheme:&lt;/span&gt; &lt;span class="s2"&gt;"demo"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates an &lt;code&gt;intent-filter&lt;/code&gt; which is used by the library to open your app back once the login is done by the user. If this is not done you have to define an &lt;code&gt;intent-filter&lt;/code&gt; on your own. This method is easier than handling that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;@string/com_auth0_domain&lt;/code&gt; is actually a string resource, you need to declare it in your &lt;code&gt;strings.xml&lt;/code&gt; as follows:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;string&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"com_auth0_domain"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Your domain here&lt;span class="nt"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNv0VXFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632597709645/Q0e7v73bC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNv0VXFK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632597709645/Q0e7v73bC.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if you don't have a domain like this yet, scroll below to find the auth0 dashboard setup, or you can skip this for now and come back to it later!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Press Sync Now on the notification bar to complete the finalize the above things&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SwlAAmOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632597868902/ZQFHTYOs_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SwlAAmOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632597868902/ZQFHTYOs_.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-internet-permissions-to-manifest"&gt;
  &lt;/a&gt;
  Add Internet Permissions to Manifest
&lt;/h3&gt;

&lt;p&gt;You would need to add the internet permission to the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file to allow network access, else the app may crash during login process.&lt;/p&gt;

&lt;p&gt;Add this line in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file as shown in the image below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.permission.INTERNET"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpe9uI07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632598305357/oBXJKdYTY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpe9uI07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632598305357/oBXJKdYTY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-basic-ui"&gt;
  &lt;/a&gt;
  Make a basic UI
&lt;/h2&gt;

&lt;p&gt;Open the &lt;code&gt;res/layout/activity_main.xml&lt;/code&gt; file and replace the content with this layout:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt;
    &lt;span class="na"&gt;android:gravity=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/nameTv"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_margin=&lt;/span&gt;&lt;span class="s"&gt;"10dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"30sp"&lt;/span&gt;
        &lt;span class="na"&gt;android:textColor=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"@string/john_doe"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/emailTv"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_marginBottom=&lt;/span&gt;&lt;span class="s"&gt;"28dp"&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"18sp"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"@string/email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"@string/login"&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/loginBtn"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class="s"&gt;"20dp"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"@string/logout"&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/logoutBtn"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class="s"&gt;"10dp"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a simple layout that has the name and email text on top and two buttons to log-in and log-out. You'll have to create string resources for dummy name and email placeholder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oHP4VNki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632600993177/-UK3Y3RsZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oHP4VNki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632600993177/-UK3Y3RsZ.png" alt="Screenshot_1632600899.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-the-raw-mainactivity-endraw-"&gt;
  &lt;/a&gt;
  Coding the &lt;code&gt;MainActivity&lt;/code&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#initialize-view-binding"&gt;
  &lt;/a&gt;
  Initialize View Binding
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;lateinit var&lt;/code&gt; for the view binding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ActivityMainBinding&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inflate the binding the the &lt;code&gt;onCreate()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ActivityMainBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, set the root element of the binding as the content view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what the &lt;code&gt;MainActivity.kt&lt;/code&gt; file looks like after doing the above changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// package name&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.github.gouravkhunger.auth0demo&lt;/span&gt;

&lt;span class="c1"&gt;// imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ActivityMainBinding&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;binding&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ActivityMainBinding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize-auth0"&gt;
  &lt;/a&gt;
  Initialize Auth0
&lt;/h3&gt;

&lt;p&gt;First, you'll need to create an instance of the Auth0 class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Imports&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// other vars ...&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Auth0&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;

        &lt;span class="c1"&gt;// Set up the account object with the Auth0 application details&lt;/span&gt;
        &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Auth0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"xljNBT32DCsVDN7sYDM1qEHMD2mA1fVp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"auth0-demo-android.us.auth0.com"&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This is the client id and domain of my sample app, replace it with yours to make it work.&lt;/em&gt; To get these parameters for your app, skip ahead to the setting up auth0 section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-login"&gt;
  &lt;/a&gt;
  Add Log-in
&lt;/h3&gt;

&lt;p&gt;Now, proceed to set the &lt;code&gt;onClickListener&lt;/code&gt; on the button. This will be triggered whenever the button will be clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loginBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;WebAuthProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"openid profile email"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c1"&gt;// Launch the authentication passing the callback where the results will be received&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// Called when there is an authentication failure&lt;/span&gt;
                    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Something went wrong!&lt;/span&gt;
                        &lt;span class="nc"&gt;Toast&lt;/span&gt;
                            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Login Error: \n${error.message}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_LONG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="c1"&gt;// Called when authentication completed successfully&lt;/span&gt;
                    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Credentials&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Get the access token from the credentials object.&lt;/span&gt;
                        &lt;span class="c1"&gt;// This can be used to call APIs&lt;/span&gt;
                        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;accessToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;
                        &lt;span class="nf"&gt;showUserProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, once a user presses this button, the login process will start and they'll be asked to log in with their E-mail id. &lt;/p&gt;

&lt;p&gt;You can use any scheme name, here I used &lt;code&gt;demo&lt;/code&gt;. But I recommend not to use &lt;code&gt;https&lt;/code&gt; because it might conflict with the intent-filters internally. I got this error while building &lt;a href="https://genicsblog.com/introducing-jekyllex-android-app"&gt;JekyllEx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once the login is successful, we can get the access token which can be used to retrieve the user profile. Let's make a function to get the user profile from the token:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;showUserProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationAPIClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// With the access token, call `userInfo` and get the profile from Auth0.&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;userInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserProfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Something went wrong!&lt;/span&gt;
                &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"Error getting profile \n${error.message}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_LONG&lt;/span&gt;
                &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;UserProfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// We have the user's profile!&lt;/span&gt;
                &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameTv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
                &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emailTv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
                &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"Login Successful!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_SHORT&lt;/span&gt;
                &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-logout"&gt;
  &lt;/a&gt;
  Add Log-out
&lt;/h3&gt;

&lt;p&gt;Now, let's make a function that enables logging out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;WebAuthProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;withScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"demo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Void&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// The user has been logged out!&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"Successfully logged out!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_SHORT&lt;/span&gt;
                    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nameTv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;john_doe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;emailTv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AuthenticationException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@MainActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"Couldn't Logout!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_SHORT&lt;/span&gt;
                    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, our app is ready to handle log-in and logout. You can also &lt;a href="https://github.com/gouravkhunger/auth0-demo-android/blob/main/app/src/main/java/com/github/gouravkhunger/auth0demo/MainActivity.kt"&gt;checkout the content&lt;/a&gt; of the &lt;code&gt;MainActivity.kt&lt;/code&gt; file on the repo.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-auth0"&gt;
  &lt;/a&gt;
  Setting up Auth0
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#make-an-account"&gt;
  &lt;/a&gt;
  Make an account
&lt;/h2&gt;

&lt;p&gt;First, let's do the setup needed at the auth0 dashboard. &lt;/p&gt;

&lt;p&gt;Go to the official &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; site and press signup on the navigation bar. After making an account, you would be taken to the dashboard where you can create a tenant. Here, the tenant is what auth0 calls a project. A project can have a number of applications in it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;All the applications in a single-tenant have the same user database and storage.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-up-the-tenant"&gt;
  &lt;/a&gt;
  Set up the tenant
&lt;/h2&gt;

&lt;p&gt;Create a new tenant. You can choose any domain name for your tenant, here I am choosing &lt;code&gt;auth0-demo-android&lt;/code&gt;. For now, this will be a subdomain, but you can customize it to your custom domain by upgrading your free plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oN6v_PGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632595285718/pzRUUPZSOX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oN6v_PGm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632595285718/pzRUUPZSOX.png" alt="Screenshot 2021-09-26 at 12.10.19 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-new-app"&gt;
  &lt;/a&gt;
  Create a new app
&lt;/h2&gt;

&lt;p&gt;Go to the applications section and press create a new app. Since we are building an Android app, choose the native field and hit create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYCDa9O2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632595589796/u_K9yatlS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYCDa9O2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632595589796/u_K9yatlS.png" alt="Screenshot 2021-09-26 at 12.15.19 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are going to develop an app that will use this tenant, tag it in the &lt;code&gt;development&lt;/code&gt; phase.&lt;/p&gt;

&lt;p&gt;After creating your app, go to the app settings&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8rJrnFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648478901/D6LpFj98V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8rJrnFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648478901/D6LpFj98V.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to the Application URIs section, there add callback URLs for login and logout. These are required to let Auth0 know what apps are authorized to perform these actions as these strings contain identifiers for our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;demo://&amp;lt;tenant-domain&amp;gt;.us.auth0.com/android/PACKAGE_NAME/callback
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Replace the package name and tenant domain with that of your own app. If you have set a scheme other than &lt;code&gt;demo&lt;/code&gt;, change it here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8K1Pxz86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648617407/DJhXTcFJH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8K1Pxz86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648617407/DJhXTcFJH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DZVPS5y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648626448/y2zKRWq53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DZVPS5y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632648626448/y2zKRWq53.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding them, scroll all the way to the bottom and save the changes.&lt;/p&gt;

&lt;p&gt;Now you can go ahead and replace the Client IDs and such things in the code, wherever necessary.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  Congratulations 🥳
&lt;/h1&gt;

&lt;p&gt;You have successfully added Auth0 to your Android app. Trust me, though this post was long, it is actually really easy if you try it on your own.&lt;/p&gt;

&lt;p&gt;If you stayed along till this far, I am really thankful to you! Please comment on your experience with Auth0 and this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://genicsblog.com/contact"&gt;Let's connect&lt;/a&gt; with each other :)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Originally published at &lt;a href="https://genicsblog.com"&gt;genicsblog.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>android</category>
      <category>authentication</category>
      <category>auth0</category>
    </item>
    <item>
      <title>TECH DISCUSS-WHAT IS METAVERSE? WHY THE METAVERSE PUBLIC BLOCKCHAIN CADUCEUS WITH UNLIMITED POTENTIAL?</title>
      <author>blockchainsharing</author>
      <pubDate>Mon, 27 Sep 2021 10:39:33 +0000</pubDate>
      <link>https://dev.to/blockchainsharing/tech-discuss-what-is-metaverse-why-the-metaverse-public-blockchain-caduceus-with-unlimited-potential-5348</link>
      <guid>https://dev.to/blockchainsharing/tech-discuss-what-is-metaverse-why-the-metaverse-public-blockchain-caduceus-with-unlimited-potential-5348</guid>
      <description>&lt;p&gt;What is the metaverse? Why the metaverse public blockchain Caduceus with unlimited potential?&lt;/p&gt;

&lt;p&gt;In 2021, with the hot concept of the metaverse, more and more people know and start to pay attention to this concept. The short video contents of TikTok also begin to frequently appear metaverse terms and elements such as identity, social, low latency, diversity, anytime, anywhere, economic system and civilization. Now there is a big kind of network, meta-universe you don't even know? Do you still have the nerve to talk about the development of the world and the direction of human existence?&lt;/p&gt;

&lt;p&gt;Of course, if some people still don't know what metaverse is, let's popularize it first. MetaVerse comes from the word MetaVerse, which means beyond the universe. The word MetaVerse first came from the science fiction novel "Snow Crash", which describes a world where people interact with various software in a three-dimensional space with virtual images. People use digital virtual identities to compete with each other improve their status. It seems that the novel describes the scene as still ahead of its time in the future world. Others have explained the metaverse in a descending way - "a virtual world parallels to the real world and highly interoperable", with a fully functioning economy, in which data, digital goods, content, and IP can pass, and in which individual users, institutions, and companies can Individual users, organizations, and companies can create content and goods to ensure that the metaverse can continue to grow.&lt;/p&gt;

&lt;p&gt;The six supporting technologies of the metaverse include blockchain technology, interactive technology, video game technology, artificial intelligence technology, network and computing technology and IoT technical, so it can be seen that digital technology is the primary means and support for the metaverse to establish a virtual space. At present, metaverse, which is in the very early stage of technology implementation, faces the embarrassing situation of polarized reputation. Supporters firmly believe that metaverse is the general trend of human technological development, and everything can be metaverse. In contrast, opponents believe that metaverse is full of speculation and bubbles, and most of the metaverse projects and products on the market are worthless.&lt;/p&gt;

&lt;p&gt;In the process of human society, the commodity society is the most important and fastest progressing. From offline transactions in places to online transactions on the internet and even virtual transactions in the future, digital changes are gradually unstoppable. Imagine buying and selling a house, a car. How long does it take in the real world? A week or half a month? But in the metaverse, it may take less than a minute. Of course, the metaverse is still in the early stage of industry development, whether it is the underlying technology or the application scenario, there is still a big gap compared with the mature form in the future, and it will take an extremely long process to subvert the change from physical possession to virtual acquisition completely. However, this also means that there is enormous space for the expansion of metaverse-related industries.&lt;/p&gt;

&lt;p&gt;In the crypto field, innovation and quality tracks mean low value. The concept of the metaverse and the demand for technology is highly compatible with the crypto field. Blockchain giants with multiple advantages want to hold the market. In contrast, crypto startups want to get a chance to bend and overtake the market, so they have come down to layout and even added to the metaverse track, and metaverse-type projects are springing up. According to the data previously released by Coingecko, the total market value of blockchain's meta-universe section has now exceeded $2.139 billion, among which most projects choose to rely on ethereum development. But ethereum is perfect enough for the meta-universe?&lt;/p&gt;

&lt;p&gt;The current status of the ethereum ecology is not perfect. With the rise of decentralized financial DeFi, NFT and chain tour, the block size limit, high gas fee, slow confirmation speed, and network bandwidth on ethereum are no longer enough to support the development of some projects. Not only that, the Ethernet network can no longer even host a decentralized application that can respond to a large number of user data requests on the chain quickly. On the other hand, the Layer 2 solution (Lauer 2) has not been the solution to the inefficient execution of Ether contracts. Just like the early internet that had no choice but to use terminals and text-based tools, today, blockchain has become a niche presence because of the lack of infrastructure that prevents many applications from being used by large-scale users. It is not realistic to pin all hopes on Ether and hope it can carry the meta-universe track on its own. At present, it seems that the wisest choice for the meta-universe way should be to gradually "escape" from Ether.&lt;/p&gt;

&lt;p&gt;At this stage, other public chains have already proposed new structures and ideas to solve the blockchain's usage problems and performance bottlenecks. As a new generation of distributed open-source blockchain platforms, it adopts the HashGraph consensus algorithm and has super high transaction processing speed, security, and maximum parallelism of transaction processing, with the peak transaction speed of a single chain reaching 100.000 transactions per second. It also implements EVM-compatible virtual machines and supports Solidity smart contracts and various development tools on EtherChip; it also has the functions of sub-account and sub-account authority management, GPU acceleration and voting dividends.&lt;/p&gt;

&lt;p&gt;In addition to the underlying blockchain technology, Caduceus also has built-in game ecology, network arithmetic and virtual presentation boards, respectively, from value interaction, content bearing, data network transmission and immersion, to build a meta-universe through presentation fusion.&lt;/p&gt;

&lt;p&gt;First of all, Caduceus technically provides a decentralized settlement platform and value transfer mechanism that can guarantee the value flow of the metaverse, protect the attribution of digital assets and guarantee the stability, efficiency and transparency of the economic system. The decentralized virtual assets can be transferred across platforms and away from the content itself, realizing the "decontextualization".&lt;/p&gt;

&lt;p&gt;Technology provides interaction methods for the metaverse, and UHD and AR/VR devices have achieved continuous iterative upgrades. Caduceus has also laid out the development and production of virtual appliances to ensure that its chain users can have a better experience in the metaverse in the future.&lt;/p&gt;

&lt;p&gt;As the moment of metaverse development in 2021, many people still can't imagine the value of metaverse or question its concept because it is too early. However, in the future of the digital world, the metaverse is a future worth exploring, and the emergence of Caduceus may further lay a solid foundation for the rapid development of metaverse.&lt;/p&gt;

&lt;p&gt;If you interested Caduceus, follow Caduceus on Twitter @CaduceusChain &lt;a href="https://twitter.com/CaduceusChain"&gt;https://twitter.com/CaduceusChain&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
    </item>
    <item>
      <title>How to Build an Ecommerce Application using React, MongoDB, Strapi and Socket.io</title>
      <author>Shada </author>
      <pubDate>Mon, 27 Sep 2021 10:27:47 +0000</pubDate>
      <link>https://dev.to/strapi/how-to-build-an-ecommerce-application-using-react-mongodb-strapi-and-socket-io-3ee4</link>
      <guid>https://dev.to/strapi/how-to-build-an-ecommerce-application-using-react-mongodb-strapi-and-socket-io-3ee4</guid>
      <description>&lt;p&gt;There are many ways to build e-commerce applications. This article will look at how to build an e-commerce application using React, MongoDB, Strapi, and Socket.io.&lt;/p&gt;

&lt;p&gt;We will use React for the frontend, MongoDB for the database, Strapi as our Content Management System (CMS, also serves as our backend tool), and Socket.io for real-time bi-directional communication between the client and the server.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Brief Overview of Strapi&lt;/li&gt;
&lt;li&gt;Brief Overview of Socket.io&lt;/li&gt;
&lt;li&gt;Building the E-commerce application

&lt;ul&gt;
&lt;li&gt;Setting up MongoDB&lt;/li&gt;
&lt;li&gt;Setting up a Strapi project&lt;/li&gt;
&lt;li&gt;Building the collections&lt;/li&gt;
&lt;li&gt;Building the frontend with React&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integrating Sockets

&lt;ul&gt;
&lt;li&gt;Integrating Socket on the Backend&lt;/li&gt;
&lt;li&gt;Integrating Socket on the Frontend&lt;/li&gt;
&lt;li&gt;Adding products in real-time&lt;/li&gt;
&lt;li&gt;Adding reviews in real-time&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Conclusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h1&gt;

&lt;p&gt;In this article, you will learn how Socket.io works and how it is integrated into Strapi and frontend environments as well as how Strapi makes backend development seamless.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;To get the best of this tutorial, you need prior knowledge of the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic knowledge of JavaScript&lt;/li&gt;
&lt;li&gt;Basic knowledge of ReactJS&lt;/li&gt;
&lt;li&gt;Basic understanding of Strapi - &lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;get started here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, download and install &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; if you haven't already.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brief-overview-of-strapi"&gt;
  &lt;/a&gt;
  Brief overview of Strapi?
&lt;/h1&gt;

&lt;p&gt;In a concise form, Strapi is a headless CMS. As the term headless implies, the CMS has no head. It's decoupled.&lt;/p&gt;

&lt;p&gt;If that doesn't make sense yet, think about WordPress. When using WordPress, they manage your frontend, backend, data, and, possibly your hosting too.&lt;/p&gt;

&lt;p&gt;With headless CMSs like Strapi, while managing your content, you choose where your data stays, decide where your application is hosted, and make up your frontend yourself—basically giving you more control over how your application is structured.&lt;/p&gt;

&lt;p&gt;Strapi allows you to develop and manage your content using APIs (REST and GraphQL).&lt;/p&gt;

&lt;p&gt;Here's more information: &lt;a href="https://strapi.io/documentation/developer-docs/latest/getting-started/introduction.html"&gt;Strapi Developer Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brief-overview-of-socketio"&gt;
  &lt;/a&gt;
  Brief Overview of Socket.io
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"&gt;Websockets&lt;/a&gt; in web development is a technology that allows bi-directional and real-time communication between a client and a server.&lt;/p&gt;

&lt;p&gt;Socket.io is a library that makes working with Websockets easier on browsers and Node.js servers.&lt;/p&gt;

&lt;p&gt;The traditional way of building websites involves the client requesting resources from the server and responding to the client. After that response, the server cannot send any other response. It has to wait until there's a request.&lt;/p&gt;

&lt;p&gt;Websockets make things different. With them, servers and clients work together using events. The client emits an event, the server listens for that event and acts accordingly, and vice versa.&lt;/p&gt;

&lt;p&gt;This way, even when the client doesn't request data, the server can emit an event (at any time), and the client's listeners will handle the event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-ecommerce-application"&gt;
  &lt;/a&gt;
  Building the E-commerce application
&lt;/h2&gt;

&lt;p&gt;The e-commerce application we'll be building has two collections—products and reviews. Each Product can have reviews. We'll show how to achieve this seamlessly using the above tools.&lt;/p&gt;

&lt;p&gt;The work of Socket.io here is to improve the interaction in the web application. Here are few things we'll see with Socket.io:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;notify other users when a product is added&lt;/li&gt;
&lt;li&gt;add a product in real-time to the products list&lt;/li&gt;
&lt;li&gt;add a product review in real-time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get started building.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h3&gt;

&lt;p&gt;Before starting with our project, we want to ensure our database is ready. Follow the instructions in this detailed article: &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/configurations/databases/mongodb.html#_2-install-strapi-locally-with-mongodb"&gt;MongoDB - Strapi Developer Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-a-strapi-project"&gt;
  &lt;/a&gt;
  Setting up a Strapi project
&lt;/h3&gt;

&lt;p&gt;Setting up a Strapi project is pretty straightforward. Just like &lt;code&gt;create-react-app&lt;/code&gt;, &lt;code&gt;@vue/cli&lt;/code&gt;, and the rest of them, Strapi has &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project"&gt;create-strapi-app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nb"&gt;mkdir &lt;/span&gt;ecommerce
    npx create-strapi-app backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we create a new directory for our frontend and backend application. Then using &lt;a href="https://www.npmjs.com/package/npx"&gt;npx&lt;/a&gt; (used for executing npm libraries without installing them, you can choose to install the &lt;code&gt;create-strapi-app&lt;/code&gt; globally and use directly), we set up the backend.&lt;/p&gt;

&lt;p&gt;While setting up, you'll be asked some questions. Here's one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQTlLgMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997406784_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQTlLgMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997406784_image.png" alt="Screenshot showing the installation type question"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this tutorial, we want to use MongoDB. Using Quickstart, the default database (SQLite) will be used. So, select custom.&lt;/p&gt;

&lt;p&gt;And the next question:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B32-LRJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997506628_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B32-LRJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997506628_image.png" alt="Screenshot showing some questions from the strapi CLI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Templates are not starters—they are not apps. They are just already made with Strapi configurations, components, and plugins. Here's a list of them: &lt;a href="https://github.com/strapi/awesome-strapi#Templates"&gt;Strapi Templates&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this tutorial, we won't be using them. To enter &lt;code&gt;n&lt;/code&gt; and press enter.&lt;/p&gt;

&lt;p&gt;Next question:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBM-1OpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997925030_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBM-1OpY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997925030_image.png" alt="Screenshot showing the database client question"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You know what to select 😅 &lt;/p&gt;

&lt;p&gt;With your mongo background service running, enter &lt;code&gt;eCommerce&lt;/code&gt; as the database name:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUnv4m-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997969185_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUnv4m-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630997969185_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the remaining inputs, use the default, with the username and password empty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbDtT4H8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630998040227_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbDtT4H8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630998040227_image.png" alt="Screenshot showing some questions and default answers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_gWOEr_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631190814973_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_gWOEr_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631190814973_image.png" alt="Screenshot showing some questions and default answers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the backend code (built with Strapi) exists in the backend directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-collections"&gt;
  &lt;/a&gt;
  Building the collections
&lt;/h2&gt;

&lt;p&gt;We will need two collection types for this tutorial. A Product Collection and the Review Collection will have a relationship with the Product.&lt;/p&gt;

&lt;p&gt;First, ensure you're in the backend directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    &lt;span class="nb"&gt;cd &lt;/span&gt;backend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run &lt;code&gt;yarn develop&lt;/code&gt;. The admin UI will be built with the development configuration, and your browser will open the page at &lt;code&gt;http://localhost:1337/admin/auth/register-admin&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GiHbyoi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631252971982_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GiHbyoi_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631252971982_image.png" alt="Strapi admin registration form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have to register as an administrator, so fill the form (take note of your credentials) and click on "Let's Start." And then you have this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vRHHpI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253057851_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vRHHpI6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253057851_image.png" alt="Strapi admin dashboard panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, for our first Content-Type, click on &lt;code&gt;Create your first Content-Type&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPCEU6pZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630999719105_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPCEU6pZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1630999719105_image.png" alt="Collection Type Dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the Display name, enter &lt;code&gt;Product&lt;/code&gt;, then click Continue. Next, you're to enter some fields:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9tLrrTVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253125039_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tLrrTVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253125039_image.png" alt="Collection fields dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select Text:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A15M4cMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253151869_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A15M4cMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253151869_image.png" alt="Collection fields dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Name field, enter &lt;code&gt;name&lt;/code&gt;, which will be the name of the &lt;strong&gt;Product&lt;/strong&gt;. Then, click on &lt;strong&gt;Advanced settings&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yh4ku2cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253183339_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yh4ku2cy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253183339_image.png" alt="Collection field dialog for the name field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the &lt;code&gt;Required field&lt;/code&gt; checkbox. With this selected, during creation (through the API), there would be a validation error if this field is not provided. You can also set a maximum or minimum length if you want.&lt;/p&gt;

&lt;p&gt;Then click &lt;code&gt;Add another field&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this second field, select Media, and use &lt;code&gt;images&lt;/code&gt; as the name. In the Advanced settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBfqLfpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253281249_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBfqLfpk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253281249_image.png" alt="Collection field dialog for the images field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the &lt;code&gt;allowed types of media&lt;/code&gt; to Images only and check the Required checkbox.&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Add another field&lt;/code&gt; for the last field. Select text, and enter &lt;code&gt;description&lt;/code&gt; as the name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bD-6A5RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253308890_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bD-6A5RW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253308890_image.png" alt="Collection field dialog for the description field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, select &lt;code&gt;Long text&lt;/code&gt;. Go to the advanced settings again and make it required. And then click &lt;code&gt;Finish&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, click &lt;code&gt;Save&lt;/code&gt; at the top to add that collection. The server would restart with the new collection saved.&lt;/p&gt;

&lt;p&gt;Then we have to repeat the same process for the Review collection. Click on &lt;code&gt;Content-Types Builder&lt;/code&gt; from the left-side navigation, and click on &lt;code&gt;Create new collection type&lt;/code&gt; in the &lt;code&gt;Collection Types&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;The display name here would be &lt;code&gt;Review&lt;/code&gt;, and the fields here are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;reviewer_name&lt;/code&gt;, required, of short text&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;review&lt;/code&gt;, required, of long text&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the last field is of the &lt;code&gt;Relation&lt;/code&gt; type. The field name on the Review collection is &lt;code&gt;product&lt;/code&gt;, and the field name on the Product collection is &lt;code&gt;reviews&lt;/code&gt; with a Many to One relationship:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtVB49tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253666062_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtVB49tq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253666062_image.png" alt="Collection field dialog for the Review relation field"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means one Product can have many reviews. Then click Finish and Save.&lt;/p&gt;

&lt;p&gt;Our collections are ready. Under the &lt;code&gt;Collection Types&lt;/code&gt; in the navigation, we can select a collection and add data directly on the UI.&lt;/p&gt;

&lt;p&gt;Go to the Product collection, and add two products of your choice. Here's the information I'm using:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1yC55Ua9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631256385033_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1yC55Ua9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631256385033_image.png" alt="Dashboard for adding a product entry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click Save and Publish.&lt;/p&gt;

&lt;p&gt;Repeat the same for another entry of your choice.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;Review&lt;/code&gt; collection and add three reviews—two for one Product and one for the other.&lt;/p&gt;

&lt;p&gt;When adding reviews, you can select the &lt;code&gt;Product&lt;/code&gt; you're adding a review for because Reviews have a relationship with Products:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XvdhgWv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253984332_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XvdhgWv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631253984332_image.png" alt="UI for adding a Relation entry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's build our frontend and call the available APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-frontend-with-react"&gt;
  &lt;/a&gt;
  Building the Frontend with React
&lt;/h2&gt;

&lt;p&gt;We'll be building the Frontend app with React. You can use any other framework as this serves as the UI and then calling APIs.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;eCommerce&lt;/code&gt; directory, run the following in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npx create-react-app client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd client
    npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll have three pages. First page is to view all products, the second page is to view the detail of a particular product (with the reviews), and the third one to add a product.&lt;/p&gt;

&lt;p&gt;We need a &lt;code&gt;react-router&lt;/code&gt; set up for this. Do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the &lt;code&gt;App.js&lt;/code&gt; file and replace the code there with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import React from 'react'
    import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'
    import Home from './components/Home'

    export default function App() {
      return (
        &amp;lt;Router&amp;gt;
          &amp;lt;Switch&amp;gt;
            &amp;lt;Route exact path="/"&amp;gt;
              &amp;lt;Home /&amp;gt;
            &amp;lt;/Route&amp;gt;
            &amp;lt;Route path="/:product_id"&amp;gt;&amp;lt;/Route&amp;gt;
            &amp;lt;Route path="/add-product"&amp;gt;&amp;lt;/Route&amp;gt;
          &amp;lt;/Switch&amp;gt;
        &amp;lt;/Router&amp;gt;
      )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;components&lt;/code&gt; directory under &lt;code&gt;src&lt;/code&gt; and Add the &lt;code&gt;Home.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    export default function Home() {
      return &amp;lt;h1&amp;gt;Homepage&amp;lt;/h1&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you go to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;, you should see the Homepage heading.&lt;/p&gt;

&lt;p&gt;Now, let's fetch the products from the backend. To call the APIs on the backend, a user would need to be authenticated. Since that's not our focus, we can make some request methods public. &lt;/p&gt;

&lt;p&gt;To do this, go back to your &lt;code&gt;backend&lt;/code&gt; directory and run &lt;code&gt;yarn develop&lt;/code&gt;, and open the admin dashboard at &lt;a href="http://localhost:1337/admin"&gt;http://localhost:1337/admin&lt;/a&gt;. Then log in with your details.&lt;/p&gt;

&lt;p&gt;On the left navigation, go to Settings. Under &lt;code&gt;USERS &amp;amp; PERMISSIONS PLUGIN&lt;/code&gt;, click on Roles:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGEjD8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631255642384_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwGEjD8x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631255642384_image.png" alt="Setting Roles in the Strapi Admin dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on Public. Scroll to Permissions and select all:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VPBi2-ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631255978825_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VPBi2-ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631255978825_image.png" alt="Setting permissions in the Strapi Admin dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click Save.&lt;/p&gt;

&lt;p&gt;Note that this isn't ideal for a public app. Users need to be authenticated.&lt;/p&gt;

&lt;p&gt;Install Axios on our frontend for calling the API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Update &lt;code&gt;Home.js&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from 'axios'
    import { useEffect, useState } from 'react'
    import './Home.css'
    import { Link } from 'react-router-dom'

    export default function Home() {
      const [products, setProducts] = useState([])
      useEffect(() =&amp;gt; {
        axios({
          method: 'get',
          url: 'http://localhost:1337/products',
        }).then((res) =&amp;gt; {
          setProducts(res.data)
        })
      }, [])

      return (
        &amp;lt;div className="container"&amp;gt;
          &amp;lt;h1&amp;gt;Products&amp;lt;/h1&amp;gt;
          &amp;lt;div className="products-container"&amp;gt;
            {products.map((product) =&amp;gt; (
              &amp;lt;Link className="product" to={`/${product.id}`}&amp;gt;
                &amp;lt;img src={`http://localhost:1337${product.images[0].url}`} /&amp;gt;
                &amp;lt;h2 className="product-name"&amp;gt;{product.name}&amp;lt;/h2&amp;gt;
                &amp;lt;p className="product-desc"&amp;gt;{product.description}&amp;lt;/p&amp;gt;
              &amp;lt;/Link&amp;gt;
            ))}
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The images field is an array because when setting up the collection, we accepted multiple media. And the &lt;code&gt;URL&lt;/code&gt; field on each image is in the form of &lt;code&gt;/uploads/…&lt;/code&gt; which means we have to append that to the backend's server's URL to get the complete URL.&lt;/p&gt;

&lt;p&gt;And also, add a &lt;code&gt;Home.css&lt;/code&gt; file in the same directory as &lt;code&gt;Home.js&lt;/code&gt;, with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .products-container {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-gap: 20px;
    }
    .product {
      text-decoration: none;
      border: 1px solid rgb(236, 235, 235);
    }
    .product-image img {
      height: 400px;
      color: rgb(229, 224, 224);
    }
    .product-details {
      padding: 15px;
    }
    .product-name {
      margin: 10px 0 0;
      color: rgb(103, 103, 103);
    }
    .product-desc {
      margin: 10px 0 0;
      color: rgb(187, 187, 187);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also add the &lt;code&gt;.container&lt;/code&gt; class in the &lt;code&gt;index.css&lt;/code&gt; file as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .container {
      padding: 40px;
      max-width: 1000px;
      margin: 0 auto;
    }

    * {
      box-sizing: border-box;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, I have this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7F5H_2Cv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631256950372_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7F5H_2Cv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631256950372_image.png" alt="Screenshot of the built homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On clicking each Product, I expect to see a dedicated page for that Product with the reviews. So, create a &lt;code&gt;ProductDetail&lt;/code&gt; component at the components directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from 'axios'
    import { useEffect, useState } from 'react'
    import { useParams } from 'react-router-dom'
    import './ProductDetail.css'

    export default function ProductDetail() {
      const { product_id } = useParams()
      const [product, setProduct] = useState(null)

      useEffect(() =&amp;gt; {
        axios({
          method: 'get',
          url: `http://localhost:1337/products/${product_id}`,
        }).then((res) =&amp;gt; {
          setProduct(res.data)
        })
      }, [])

      return (
        &amp;lt;div className="container"&amp;gt;
          {!product ? (
            &amp;lt;span&amp;gt;Loading...&amp;lt;/span&amp;gt;
          ) : (
            &amp;lt;div className="product-detail-container"&amp;gt;
              &amp;lt;h1&amp;gt;{product.name}&amp;lt;/h1&amp;gt;
              &amp;lt;div className="product-img-container"&amp;gt;
                &amp;lt;img src={`http://localhost:1337${product.images[0].url}`} /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;p&amp;gt;{product.description}&amp;lt;/p&amp;gt;
              &amp;lt;div className="product-reviews"&amp;gt;
                &amp;lt;h2&amp;gt;Reviews ({product.reviews.length})&amp;lt;/h2&amp;gt;
                {product.reviews.map((review) =&amp;gt; (
                  &amp;lt;div className="product-review"&amp;gt;
                    &amp;lt;h3&amp;gt;{review.reviewer_name}&amp;lt;/h3&amp;gt;
                    &amp;lt;p&amp;gt;{review.review}&amp;lt;/p&amp;gt;
                  &amp;lt;/div&amp;gt;
                ))}
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          )}
        &amp;lt;/div&amp;gt;
      )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a &lt;code&gt;ProductDetail.css&lt;/code&gt; file at the same directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .product-img-container {
      height: 500px;
      overflow: hidden;
    }
    .product-img-container img {
      object-fit: cover;
      width: 100%;
      height: 100%;
    }
    .product-reviews {
      padding-top: 20px;
      border-top: 1px solid #ccc;
    }
    .product-review {
      background-color: #eeecec;
      padding: 15px;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, go back to &lt;code&gt;App.js&lt;/code&gt; and update the second &lt;code&gt;Route&lt;/code&gt; component to this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...       
        &amp;lt;Route path="/:product_id"&amp;gt;
          &amp;lt;ProductDetail /&amp;gt;
        &amp;lt;/Route&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now when you click on a product, you get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N9L5k3MU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631257970168_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N9L5k3MU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631257970168_image.png" alt="Screenshot of a product detail page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-sockets"&gt;
  &lt;/a&gt;
  Integrating Sockets
&lt;/h2&gt;

&lt;p&gt;As our application is currently, there is communication between the frontend and the backend. But we want this communication to be bi-directional and in real-time so let's integrate sockets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrating-socket-on-the-backend"&gt;
  &lt;/a&gt;
  Integrating Socket on the Backend
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;socket.io
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://strapi.io/documentation/developer-docs/latest/setup-deployment-guides/configurations.html#functions"&gt;config/functions/bootstrap.js&lt;/a&gt; file is the starting point that Strapi uses when your development starts. So it's in here we integrate Sockets—our listeners and emitters and so on.&lt;/p&gt;

&lt;p&gt;Replace the bootstrap file with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    module.exports = () =&amp;gt; {
      const io = require("socket.io")(strapi.server, {
        cors: {
          origin: "http://localhost:3000",
          methods: ["GET", "POST"],
        },
      });
      io.on("connection", function (socket) {
        // send message on user connection
        socket.emit("hello", JSON.stringify({ message: "Welcome to my website" }));
      });
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've configured the &lt;code&gt;socket.io&lt;/code&gt; library to use Strapi's server, with some &lt;code&gt;cors&lt;/code&gt; permissions. When any client connects to the server, the &lt;code&gt;connection&lt;/code&gt; event is automatically emitted, and the server can listen to it and do whatever it wants.&lt;/p&gt;

&lt;p&gt;In this example, on &lt;code&gt;connection&lt;/code&gt;, the server emits the &lt;code&gt;hello&lt;/code&gt; event, and the client can listen to it and display the message.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-socket-on-the-frontend"&gt;
  &lt;/a&gt;
  Integrating Socket on the Frontend
&lt;/h2&gt;

&lt;p&gt;Install the socket.io client library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm i socket.io-client react-toastify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://www.npmjs.com/package/react-toastify"&gt;react-toastify&lt;/a&gt; library is used for adding notifications to our app.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;App.js&lt;/code&gt; file, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    // other imports
    import { ToastContainer } from 'react-toastify'
    import 'react-toastify/dist/ReactToastify.css'

    ...
      &amp;lt;Router&amp;gt;
        &amp;lt;ToastContainer /&amp;gt;
        &amp;lt;Switch&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new directory called &lt;code&gt;config&lt;/code&gt;, and in it, create a &lt;code&gt;socket.js&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { io } from 'socket.io-client'

    export const socket = io('http://localhost:1337')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And back in the &lt;code&gt;Home.js&lt;/code&gt; file, update to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    // other imports
    import { socket } from '../config/socket'
    import { toast } from 'react-toastify'

    socket.on('hello', (res) =&amp;gt; {
      toast.success(res.message)
    })

    export default ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you load the products page, you get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zQvUPgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631259749208_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zQvUPgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631259749208_image.png" alt="Screenshot of the homepage with a notification saying welcome"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is indeed a socket connection.&lt;/p&gt;

&lt;p&gt;The next thing we want to do is emit an event when a product is added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-products-in-realtime"&gt;
  &lt;/a&gt;
  Adding Products in Real-time
&lt;/h2&gt;

&lt;p&gt;Let’s create the component--&lt;code&gt;AddProduct.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useState } from 'react'
    import { toast } from 'react-toastify'
    import { socket } from '../config/socket'

    import './AddProduct.css'

    export default function AddProduct() {
      const [name, setName] = useState(null)
      const [description, setDescription] = useState(null)
      const [processing, setProcessing] = useState(false)

      const formSubmit = (e) =&amp;gt; {
        e.preventDefault()
        setProcessing(true)

        socket.emit('addProduct', { name, description }, (product) =&amp;gt; {
          setProcessing(false)
          toast.success('Product added successfully!')
          setTimeout(() =&amp;gt; {
            window.location.href = `/${product.id}`
          }, 1000)
        })
      }

      return (
        &amp;lt;div className="container"&amp;gt;
          &amp;lt;div className="add-product"&amp;gt;
            &amp;lt;h1&amp;gt;Add Product&amp;lt;/h1&amp;gt;
            &amp;lt;form onSubmit={formSubmit}&amp;gt;
              &amp;lt;div className="input-group"&amp;gt;
                &amp;lt;label htmlFor="name"&amp;gt;Name&amp;lt;/label&amp;gt;
                &amp;lt;input onChange={(e) =&amp;gt; setName(e.target.value)} /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;div className="input-group"&amp;gt;
                &amp;lt;label htmlFor="description"&amp;gt;Description&amp;lt;/label&amp;gt;
                &amp;lt;input onChange={(e) =&amp;gt; setDescription(e.target.value)} /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;button disabled={processing} type="submit"&amp;gt;
                {processing ? 'Processing' : 'Add Product'}
              &amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      )
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the form submit handler, we emit an event named &lt;code&gt;addProduct&lt;/code&gt; with an object of the Product's properties. Notice we aren't using Axios for the POST request? Because sockets do that already.&lt;/p&gt;

&lt;p&gt;We also add a callback function with the argument &lt;code&gt;product&lt;/code&gt;, which will be passed from the backend when created. Then we navigate to that Product's detail page after 1 second.&lt;/p&gt;

&lt;p&gt;And the &lt;code&gt;AddProduct.css file&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .add-product h1 {
      text-align: center;
    }
    .add-product form {
      max-width: 600px;
      margin: 0 auto;
      border: 1px solid #ccc;
      padding: 15px;
    }
    .input-group {
      width: 100%;
      margin-bottom: 20px;
    }
    .input-group label {
      display: block;
      margin-bottom: 5px;
    }
    .input-group input {
      padding: 20px;
      width: 100%;
    }
    .add-product form button {
      width: 100%;
      padding: 20px;
      border: none;
      background: none;
      background-color: rgb(193, 251, 193);
      cursor: pointer;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After adding the AddProduct component in &lt;code&gt;App.js&lt;/code&gt; , &lt;code&gt;/add-product/&lt;/code&gt; gives us:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-0g62dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271104313_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-0g62dy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271104313_image.png" alt="Screenshot of the add product page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll leave adding the image for the Product on the Strapi admin dashboard. In the &lt;code&gt;img&lt;/code&gt; &lt;code&gt;src&lt;/code&gt; in the homepage and product detail page, change it to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;img
      src={
        product.images[0]
          ? `http://localhost:1337${product.images[0].url}`
          : '/empty-box.svg'
      }
    /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, we check if there's an image, and if there isn't, we use a default image. In the public directory at the root, add an &lt;code&gt;empty-box.SVG&lt;/code&gt; file and paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"&amp;gt;
        &amp;lt;path fill="none" d="M0 0h24v24H0z" /&amp;gt;
        &amp;lt;path
            d="M3 10h18v10.004c0 .55-.445.996-.993.996H3.993A.994.994 0 0 1 3 20.004V10zm6 2v2h6v-2H9zM2 4c0-.552.455-1 .992-1h18.016c.548 0 .992.444.992 1v4H2V4z"
            fill="rgba(177,177,177,1)" /&amp;gt;
    &amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, go back to &lt;code&gt;Home.js&lt;/code&gt; and add listen to the product added event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
        socket.on('hello', (res) =&amp;gt; {
          toast.success(res.message)
        })

        socket.on('newProductAdded', (res) =&amp;gt; {
          toast.info('A new product has been added')
          setProducts((products) =&amp;gt; [res.product, ...products])
        })
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the backend emits this event, we can listen to it on the homepage (opened in another tab or window), show the toaster, and add the products to the existing products array.&lt;/p&gt;

&lt;p&gt;Now for the backend work. In the &lt;code&gt;config&lt;/code&gt; directory, create a &lt;code&gt;utils&lt;/code&gt; directory, and in it, create a &lt;code&gt;product-database.js&lt;/code&gt; file. In that file, paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    async function createProduct({ name, description }) {
      try {
        const product = await strapi.services.product.create({
          name,
          description,
        });
        return product;
      } catch (err) {
        console.log({ err });
        return "Product cannot be created. Try again";
      }
    }
    module.exports = {
      createProduct,
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're using the Strapi product service to create the Product, which would add that to the database.&lt;/p&gt;

&lt;p&gt;Now, go back to the &lt;code&gt;bootstrap.js&lt;/code&gt; file and after the &lt;code&gt;hello&lt;/code&gt; emitted event, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
        socket.on("addProduct", async ({ name, description }, callback) =&amp;gt; {
          try {
            const product = await createProduct({
              name,
              description,
            });
            if (product) {
              callback(product);
              socket.broadcast.emit("newProductAdded", { product });
            }
          } catch (err) {
            console.log({ err });
            callback({ type: "error", message: err });
            console.log("Error occured. Please try again");
          }
        });
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We listen to the &lt;code&gt;addProduct&lt;/code&gt; event, add the Product to the database, pass the Product as the argument to the client's callback, and emit the event &lt;code&gt;newProductAdded&lt;/code&gt; with the Product.&lt;/p&gt;

&lt;p&gt;Notice we aren't using a &lt;code&gt;socket.emit&lt;/code&gt; but &lt;code&gt;socket.broadcast.emit instead&lt;/code&gt; since &lt;code&gt;socket.emit&lt;/code&gt; emits the event to the client that emitted the &lt;code&gt;addProduct&lt;/code&gt; event. We don't want this because the client is currently on the add product page, which means the homepage will never listen to the event.&lt;/p&gt;

&lt;p&gt;But with &lt;code&gt;socket.broadcast.emit&lt;/code&gt;, we're emitting the event to every other connected event, except the client that sent the &lt;code&gt;addProduct&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;Now, let's test what we have. I'm using two windows for this. Here are the two pages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ6Zitcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271856592_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ6Zitcf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271856592_image.png" alt="Screenshot of two windows: one for the home page and the other for the add product page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding a product, then this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyoa2e6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271918675_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dyoa2e6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631271918675_image.png" alt="Screenshot of two windows: one showing a new product was added and the other is the add product page after submission"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice in the homepage, the Product is added, and the toaster notifies the user? This is very similar to Twitter telling you, "New tweets available."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-reviews-in-realtime"&gt;
  &lt;/a&gt;
  Adding reviews in real-time
&lt;/h2&gt;

&lt;p&gt;The same thing can be done with reviews. The basic idea is to have a &lt;code&gt;ProductReviews&lt;/code&gt; component that has a form where users can enter reviews.&lt;/p&gt;

&lt;p&gt;On the same Product Reviews component, there'd be a listener for the &lt;code&gt;newReviewAdded&lt;/code&gt; event. And we can broadcast emit to other connected clients, letting them know of the newly added review.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVF2xcx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631274166596_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVF2xcx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_74B6A00D6E55C4AFBA28873EF328A1C0FF93B942E332CF965C772AB3C8A8E7CE_1631274166596_image.png" alt="Screenshot of two windows: one showing the reviews section after submission and the other showing a new review was added"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, the upper window was the client that sent the review. In contrast, the window below is just another client that is notified of an added review.&lt;/p&gt;

&lt;p&gt;Here’s the source code for the tutorial: &lt;a href="https://github.com/dillionmegida/ecommerce-socket-io-strapi"&gt;https://github.com/dillionmegida/ecommerce-socket-io-strapi&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-we-still-need-axios"&gt;
  &lt;/a&gt;
  Do we still need Axios?
&lt;/h2&gt;

&lt;p&gt;We don't. For getting the products initially, we can emit an event from the backend called &lt;code&gt;loadedProducts&lt;/code&gt; and listen to that event on the frontend to fetch and display the products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we've seen how to create a full-stack e-commerce application with Strapi managing the backend and React for the frontend. We also saw how to integrate web sockets to improve the communication and interaction between the client and the server.&lt;/p&gt;

&lt;p&gt;For further reading, check out: &lt;a href="https://strapi.io/blog/how-to-build-a-real-time-chat-forum-using-strapi-socket-io-react-and-mongo-db"&gt;Real-time Chat Forum using Strapi, Socket.io, React, and MongoDB&lt;/a&gt;&lt;/p&gt;

</description>
      <category>socket</category>
      <category>mongodb</category>
      <category>strapi</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Deta Space - What is it and why is it the future?</title>
      <author>Anish De</author>
      <pubDate>Mon, 27 Sep 2021 09:55:27 +0000</pubDate>
      <link>https://dev.to/byteslash/deta-space-what-is-it-and-why-is-it-the-future-52fj</link>
      <guid>https://dev.to/byteslash/deta-space-what-is-it-and-why-is-it-the-future-52fj</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Disclaimer: This article is not sponsored or biased in any way. I liked the idea behind the product and hence wanted to write about it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.deta.sh/"&gt;Deta&lt;/a&gt; was a company founded just over 2 years ago and it has been providing free Cloud solutions since.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-deta-space"&gt;
  &lt;/a&gt;
  What is Deta Space?
&lt;/h1&gt;

&lt;p&gt;Deta Space is a new product from Deta which provides you with your personal cloud hosted by Deta where you can run sandboxed versions of certain apps. It is a relatively new concept but seems to have great potential. Here the developers don't have our data so they cannot sell it. Deta still has our data but in this case, we just need to trust one company rather than trusting a bunch of other companies or developers. You can see Deta's privacy policy &lt;a href="https://www.deta.sh/privacy"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;p&gt;Updates are on an opt-in basis so if you don't want to update to a newer version of an app, you can choose not to. There is no option to downgrade though but that can be added in the future and I hope they do so.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4nzS8jI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632666001421/sATiXbC8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4nzS8jI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632666001421/sATiXbC8w.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also see all the data stored by an app on a per-app basis through Deta's dashboard. To do so, click on the 3-dot menu on the app's icon and click "My Data" and you will be redirected to a page where you can see all the stored data.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#for-developers"&gt;
  &lt;/a&gt;
  For Developers
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iB90cYU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632666204628/bBAjelQfY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iB90cYU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632666204628/bBAjelQfY.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deta Space also provides a marketplace for apps where developers can publish apps. Right now, there are only 5 but as this concept gets more popular and developers start to build more apps compatible with Deta Space, this marketplace is going to expand. You can see the marketplace &lt;a href="https://deta.space/discovery"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Deta aims to make it easy for developers to make applications for Deta Space by completely managing the infrastructure from servers, security, data to payments. You can learn more about it &lt;a href="https://www.deta.sh/space"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-deta-space-can-get-better"&gt;
  &lt;/a&gt;
  How Deta Space can get better
&lt;/h1&gt;

&lt;p&gt;I also see teams using Deta Space as a future use case. Deta Space only supports spaces for individual users now, but later it can be expanded to provide a space that multiple users can access. Also, only one instance of an app can be created currently but the ability to create multiple instances will be a dealbreaker for some.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>My Journey into Technical Writing</title>
      <author>Anish De</author>
      <pubDate>Mon, 27 Sep 2021 09:47:51 +0000</pubDate>
      <link>https://dev.to/anishde12020/my-journey-into-technical-writing-6i</link>
      <guid>https://dev.to/anishde12020/my-journey-into-technical-writing-6i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#before-i-started-writing"&gt;
  &lt;/a&gt;
  Before I started writing
&lt;/h1&gt;

&lt;p&gt;I was interested in tech in general from a very young age and have been expanding my knowledge from watching videos and reading articles for a long time. I used to read articles written across many technical news outlets like &lt;a href="https://www.gsmarena.com/"&gt;GSMArena&lt;/a&gt;, &lt;a href="https://www.xda-developers.com/"&gt;XDA Developers&lt;/a&gt;, and many more. Programming was something I started learning a few years back but I didn't read as many articles about it. About a year back, I found out &lt;a href="https://dev.to/"&gt;dev.to&lt;/a&gt; and that is when I started reading a lot of articles on programming. As a side note, I have a &lt;a href="https://www.youtube.com/channel/UCY-rVWTIsN-G7s81C89SzkA"&gt;YouTube channel&lt;/a&gt; which I started last year and it has been quite a good experience. I have not uploaded any videos for about 3 months now but I aim to resume sometime in the future.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#starting-with-technical-writing"&gt;
  &lt;/a&gt;
  Starting with technical writing
&lt;/h1&gt;

&lt;p&gt;I never wrote an article on DEV until I found out about Hashnode back in April of this year. Hashnode was a great place to start my blog so I made a publication and wrote &lt;a href="https://blog.anishde.dev/cryptography-with-python-using-fernet"&gt;my first article&lt;/a&gt;. I also cross-posted that article to DEV and I got quite a lot of views on that article. I liked it and then wrote &lt;a href="https://blog.anishde.dev/the-random-library-in-python"&gt;my second article&lt;/a&gt; a few days later. Note that I was still making videos on my YouTube channel at this time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-more-interested"&gt;
  &lt;/a&gt;
  Getting more interested
&lt;/h1&gt;

&lt;p&gt;After writing those two articles, I didn't write any for a few months and that was because I didn't know what to write about and I was still not very confident if I would be able to do good. Things changed with the &lt;a href="https://townhall.hashnode.com/auth0-hackathon"&gt;August Hashnode x Auth0 BootCamp&lt;/a&gt; where I made an application and wrote &lt;a href="https://blog.anishde.dev/easy-comments"&gt;an article&lt;/a&gt; as a part of my submission. Suddenly, I got more interested in technical writing and I have written 8 blog posts in the last 3 weeks. Hashnode's &lt;a href="https://hashnode.com/challenge/2articles1week"&gt;2articles1week&lt;/a&gt; challenge has got me into writing consistently and the &lt;a href="https://hashnode.com/bootcamp"&gt;Technical Writing Bootcamp&lt;/a&gt; has taught me a lot about writing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h1&gt;

&lt;p&gt;I aim to write more articles about programming and tech from now on. I also plan on reviving my YouTube channel with videos about programming, let me know your thoughts in the comments section. I am also working on a portfolio site right now and will be working on more projects and learning more. &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; is just 3 days away and I plan on participating in Hacktoberfest as well.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Why and How of Websites for Writers</title>
      <author>Otis Anderson</author>
      <pubDate>Mon, 27 Sep 2021 09:13:02 +0000</pubDate>
      <link>https://dev.to/otisons/the-why-and-how-of-websites-for-writers-59de</link>
      <guid>https://dev.to/otisons/the-why-and-how-of-websites-for-writers-59de</guid>
      <description>&lt;h2&gt;
  &lt;a href="#provide-an-authors-shop-window-for-editors-clients-and-readers"&gt;
  &lt;/a&gt;
  Provide an Author's Shop Window for Editors, Clients and Readers
&lt;/h2&gt;

&lt;p&gt;Many writers feel that a professional website is too hard (to build themselves) or too expensive (to use a web designer). That might have been so once, but not any more.&lt;br&gt;
Readers, editors and clients are being conditioned to expect writers to have a website, and now it's fast becoming something that writers can't afford to leave for another day. Although they understand this, thousands of freelance writers or authors have put off creating &lt;a href="https://worldscholarshipforum.com/paper-writing-service/"&gt;paper writing service&lt;/a&gt; websites because of a seemingly insurmountable problem: they simply have no idea where to start. They know nothing about building a website – and as for the other option, hiring a web designer to do it instead... isn't it prohibitively expensive to get a professional to do it?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--41QXpZbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60p8fnt4pzl0id6rw7ht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41QXpZbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60p8fnt4pzl0id6rw7ht.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#userfriendly-website-templates-xsitepro-and-wordpress"&gt;
  &lt;/a&gt;
  User-Friendly Website Templates: XSitePro and WordPress
&lt;/h2&gt;

&lt;p&gt;Luckily things have evolved to the stage where writers can actually have a good shot at building a professional-looking website on their own. This is thanks to software that provides well-designed templates, so the site doesn't have to have that 'home-made' look. One very easy website builder is XSitePro. This software has a great many more bells and whistles than a writer is likely to need, because it was created with internet marketers in mind. However, just ignore the 'extras' until they are needed (if ever) - the main thing that a writer needs to know is that by using this software, it's possible to come up with a nice-looking site in a very short time.&lt;/p&gt;

&lt;p&gt;The creators of XSitePro even offer a free header tool, XHeader, that anyone can use to create their own personalised site header graphic. It's worth downloading this just to play around with it - especially since writers can create all sorts of graphics for their sites with this tool. It's easy to export the results in standard image files like jpegs or gifs.&lt;/p&gt;

&lt;p&gt;XSitePro website design software will create a very professional-looking site for any writer, but the software is not free. On the other hand, writers on a tight budget will find that PageBreeze (which is free to download) has all the functionality they need to build a website, but the trade-off is that there is much more of a learning curve.&lt;/p&gt;

&lt;p&gt;What if an author wants to have a writer's website, but doesn't have the time or inclination to build a website themselves? There are two options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hire a web designer to build it, or&lt;/li&gt;
&lt;li&gt;use an online website builder (where the writer signs into a website then uses the tools on the host website to create pages and upload photos.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#consider-starting-a-blog"&gt;
  &lt;/a&gt;
  Consider Starting a Blog
&lt;/h2&gt;

&lt;p&gt;Lastly, a very easy and inexpensive way to make a start on becoming visible on the Internet is to start a blog. In fact, many writers have actually chosen to convert their original websites to a blog format. Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A blog allows interaction with readers and other writers; they can post comments.&lt;/li&gt;
&lt;li&gt;A blog can be customised to look like a website - writers can add extra pages and links at will.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/WordPress"&gt;WordPress blogs&lt;/a&gt; are easy to use, highly customisable, and there are lots of useful plug-ins available (to combat spam, upload photos, add links to popular social networking pages and so on). WordPress is easily customisable so that the site looks more like a traditional website than a blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doityourself-website-or-pay-a-website-designer"&gt;
  &lt;/a&gt;
  Do-It-Yourself Website or Pay a Website Designer?
&lt;/h2&gt;

&lt;p&gt;For a writer who can see the benefits of having his or her own website, the first step is to decide how it is going to happen: DIY or use a designer. A few years ago it could become very expensive to have a website professionally designed and uploaded to the Internet. Now there are many website designers who will do this for a very reasonable fee. For example: website designer Gail Breese specalises in creating websites for writers. Her website shows a dozen or so of these sites, along with comments from clients. To find a website designer in your country, just do a search using a phrase like "website designer for writer's website" and see what comes up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-the-content-for-your-writers-website"&gt;
  &lt;/a&gt;
  Plan the Content for Your Writer's Website
&lt;/h2&gt;

&lt;p&gt;The next step is to plan the content. A good place to start is by spending a few hours looking at other writers' websites – and there are thousands of them around. Check out their home pages, their 'about me' page, and the layout of the site. Look at sites that are based on a blog format as well as traditional websites.&lt;/p&gt;

&lt;p&gt;Bookmark any sites that appeal because of the colours, design, or content. This will be useful for writers who design their own sites as well as those to opt to use a website design service. Scroll to the bottom of the home page to see if the site designer has been credited – if so, it's easy to look them up on the Web. Finally, don't be afraid to use the 'Contact Me' section of a website you like to ask the owner who built the site.&lt;/p&gt;

&lt;p&gt;For most writers, it is well worth taking the time – and if necessary, investing some money - to create a professional Internet presence. Don't put it off any longer. Make a start today by investigating the various options for a writer's website, and tomorrow... that website might be a reality!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-find-other-good-websitebuilding-resources"&gt;
  &lt;/a&gt;
  To Find Other Good Website-Building Resources
&lt;/h2&gt;

&lt;p&gt;For other good website design software and resources for those creating their own paper writing &lt;a href="https://writemypaperbro.com/"&gt;website&lt;/a&gt; and blog, try entering terms like 'website design software' and 'graphics for websites' into a search engine. There are new programs being created all the time, and one of them might be exactly what is needed!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Responsive Online Book Store Website Using HTML and Bootsrap5.</title>
      <author>Technical Vandar</author>
      <pubDate>Mon, 27 Sep 2021 08:59:28 +0000</pubDate>
      <link>https://dev.to/technicalvandar885/responsive-online-book-store-website-using-html-and-bootsrap5-3imm</link>
      <guid>https://dev.to/technicalvandar885/responsive-online-book-store-website-using-html-and-bootsrap5-3imm</guid>
      <description>&lt;p&gt;i have made this website using bootstrap, you can use code and you can download book and also add book in that.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#source-code-all-in-one"&gt;
  &lt;/a&gt;
  Source Code All In One:
&lt;/h1&gt;



&lt;h2&gt;
  &lt;a href="#full-source-code"&gt;
  &lt;/a&gt;
  FULL SOURCE CODE:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
    &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Online Book Store&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-expand-lg navbar-dark bg-dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-fluid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Navbar&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggler"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;data-bs-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-bs-target=&lt;/span&gt;&lt;span class="s"&gt;"#navbarSupportedContent"&lt;/span&gt;
        &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"navbarSupportedContent"&lt;/span&gt; &lt;span class="na"&gt;aria-expanded=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Toggle navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggler-icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"collapse navbar-collapse"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navbarSupportedContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav-link active"&lt;/span&gt; &lt;span class="na"&gt;aria-current=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Top Courses Pdf Books Free Download&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row row-col-1 row-cols-md-3 m-auto my-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-auto col-md-3"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cards"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://miro.medium.com/max/1800/1*5eV1xmJs2-sJ4DdejfdnQA.png"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Javascript&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            This Is A Book For Javascript. Beginner Friendly all Things need foe beginners there in pdf book mentioned
            please Download and gain knowledge about javascript
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1YOuhfAak-Z3Ra_NBX9_AMhFShuQsMMpI/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-auto col-md-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.pinimg.com/originals/1f/ec/3e/1fec3ee0665075852c4665a01259682d.png"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt;
          &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C Programming&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Advance C Programming Course From Pdf File Please Download This File From Here and You
            Have From Zero To Hero In C Programming&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1_NA-zRm6BXcI8Q45UJmQ0o1NGBQkFQF8/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 m-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.vtc.com/files/images/courses/33797.jpeg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C++ Course&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Advance C++ Course in Simple English Labguage Please Download A Pdf From Here and Gain Your Knowlwdge in C++
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/11W13yROf4_qr7N0P9HbBeB-SKTdeQs6W/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row row-col-1 row-cols-md-3 m-auto my-4 mb-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-auto col-md-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://miro.medium.com/max/840/1*RJMxLdTHqVBSijKmOO5MAg.jpeg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Python Programming&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Python Programming Course From Basic To Advance Level Please Download a Pdf File and Make You To A
            Professional Python Developer Or Freelancer.
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1BQsKJ7yCo93vCW9SoJibFOUGPYivdgQ_/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"m-auto col-md-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://d1jnx9ba8s6j9r.cloudfront.net/imgver.1551437392/img/co_img_193_1504782213.png"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Java Programming&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Java Programming Language From Basic To Advance Level. Learn Java Programming With Object
            Oriented Programming(OOP) From This Pdf Book.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1I_D-UmWHdXkNKNODdlvfNxtzHyMkA8M8/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-md-3 m-auto"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card h-100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.surat-training-course.com/ampimage/fluttercourseinsurat.webp"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-img-top"&lt;/span&gt;
          &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h5&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Flutter(DART)&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            Learn Flutter From Basic To Advance Level. you can build android, desktop and ios application using flutter.
          &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://drive.google.com/file/d/1wY9Ky8cHO1D5WCnCr0ppFSyL2RiHYP0K/view?usp=sharing"&lt;/span&gt; &lt;span class="na"&gt;download&lt;/span&gt;
            &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-info"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt; &lt;span class="na"&gt;data-bs-placement=&lt;/span&gt;&lt;span class="s"&gt;"right"&lt;/span&gt;
            &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Download Book"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download Book&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/js/bootstrap.bundle.min.js"&lt;/span&gt;
    &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-b5kHyXgcpbZJO/tY9Ul7kGkf1S0CWuKcCD38l8YkeH8z8QjE0GmW1gYU5S9FOnJ0"&lt;/span&gt;
    &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tooltipTriggerList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[data-toggle="tooltip"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tooltipList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tooltipTriggerList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tooltipTriggerEl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tooltip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tooltipTriggerEl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#youtube-tutorial"&gt;
  &lt;/a&gt;
  Youtube Tutorial
&lt;/h1&gt;


&lt;h2&gt;&lt;a href="https://www.youtube.com/watch?v=WALC_40KWi0"&gt;Watch Here&lt;/a&gt;&lt;/h2&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;h2&gt;
  &lt;a href="#find-me-on"&gt;
  &lt;/a&gt;
  Find Me On:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/technicalvandar"&gt;Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/technicalvandar"&gt;Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Technical-Vandar-885/"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hacktoberfest 2021: Let the Contributions Begin! </title>
      <author>Vishnupriya Bhandaram</author>
      <pubDate>Mon, 27 Sep 2021 08:56:49 +0000</pubDate>
      <link>https://dev.to/appsmith/hacktoberfest-2021-let-the-contributions-begin-3gal</link>
      <guid>https://dev.to/appsmith/hacktoberfest-2021-let-the-contributions-begin-3gal</guid>
      <description>&lt;p&gt;Time indeed does fly because it feels just like yesterday when we hosted our first ever Hacktoberfest last year! And what a year it has been. &lt;/p&gt;

&lt;p&gt;We started &lt;a href="https://www.appsmith.com/"&gt;Appsmith&lt;/a&gt; because we wanted to create a developer-first product to make an engineer’s life easy. From being a small, little-known project on &lt;a href="https://github.com/appsmithorg/appsmith"&gt;Github&lt;/a&gt;, we now have 5K stars. This wouldn’t have been possible without our community; apart from giving us incredible feedback, they also contributed immensely to our codebase, from contributing new integrations to helping solve bugs. &lt;/p&gt;

&lt;p&gt;We now have over 100 contributors, and we want to expand our community (that means you!), empowering them to contribute to a project that will always remain developer-first. And so, we’re back again this year for an exciting month-long virtual festival supporting open-source projects. We love it because it’s celebratory and community-oriented! At Appsmith, we genuinely believe open-source can take the way we build things to new heights. And our commitment to the community will never waver. &lt;/p&gt;

&lt;p&gt;In that spirit, we are kicking off the &lt;a href="https://hacktoberfest.appsmith.com/"&gt;Hacktoberfest 2021&lt;/a&gt;. In the run-up to the actual code-fest, there are going to be many talks! We will be bringing together folks from other awesome projects to talk about Hacktoberfest and Open Source. Be sure to check these out. You will definitely get to learn more about how to get involved in open-source projects. And yes! We’re ready to swag it out, too, for every valid PR! And contributors who submit more than 4 PRs and invite others to contribute to our repository will get a special prize. &lt;/p&gt;

&lt;p&gt;You are welcome to contribute to the issues on Appsmith’s repository on Github. Be sure to check contribution guidelines, review, and merge policies. Please note that not all pull requests will count towards Hacktoberfest 2021. &lt;/p&gt;

&lt;p&gt;Contributing to open-source projects is an excellent way for users to become contributors. And it’s both a fun and rewarding experience. Sure, it can be scary to begin, and many think that only code that implements significant features matters. Well, I am here to tell you that it’s not true. We believe that no contribution is too small. Bug fixes, documentation updates, submitting articles are all fantastic ways of participating. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hacktoberfest is open to all: Students, developers, anyone really. Background no bar. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To this end, this year, we’ve included several newbie-friendly issues in the challenge to give a warm welcome to first-timers. If you’ve still got some doubts about participating or need some queries answered, head over to our Hacktoberfest channel on &lt;a href="https://discord.com/invite/rBTTVJp"&gt;Discord&lt;/a&gt;, and we will be happy to help you out!  To know more about how you can participate in this event, take a look at our &lt;a href="https://github.com/appsmithorg/appsmith/blob/release/CONTRIBUTING.md"&gt;Contributor Guidelines&lt;/a&gt; and &lt;a href="https://github.com/appsmithorg/appsmith/blob/release/CODE_OF_CONDUCT.md"&gt;Code of Conduct&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Happy Hacking! 🐱‍💻&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Tracking Page Views in SvelteKit: Intersection Observer</title>
      <author>Rodney Lab</author>
      <pubDate>Mon, 27 Sep 2021 08:49:46 +0000</pubDate>
      <link>https://dev.to/askrodney/tracking-page-views-in-sveltekit-intersection-observer-9g</link>
      <guid>https://dev.to/askrodney/tracking-page-views-in-sveltekit-intersection-observer-9g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#%F0%9F%96%B1-tracking-scroll-events-in-sveltekit"&gt;
  &lt;/a&gt;
  🖱 Tracking Scroll Events in SvelteKit
&lt;/h2&gt;

&lt;p&gt;In this post we look at how to make tracking page views in SvelteKit easy.  You might have a blog and want to add a view counter to improve user experience.  You might also want to keep track of which articles or pages on a website get read right to the end.  This will give stakeholders a better impression of what content works well.  Although we focus on a page view example, the techniques we look at here can be used to track a wider set of scroll events.  As an example, you may want to &lt;a href="https://rodneylab.com/lazy-loading-iframes-sveltekit/"&gt;know when an iframe is about to come into the visible viewport to trigger a lazy load&lt;/a&gt;.  Finally, you might want to change a header component based on which section of the page the user is currently viewing.  All of these problems can be solved using the Intersection Observer API.&lt;/p&gt;

&lt;p&gt;In our example we will consider the page viewed once the user has scrolled the post banner image completely out of view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wddjaCga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ll1uy9g9dftddhb4yg6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wddjaCga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ll1uy9g9dftddhb4yg6.png" alt="Tracking Page Views in SvelteKit: Intersection Observer: Screenshot show top of blog post page with a navigation bar up top and a large postbanner image just below"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intersection-observer-api"&gt;
  &lt;/a&gt;
  🔭 Intersection Observer API
&lt;/h2&gt;

&lt;p&gt;Although the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer API&lt;/a&gt; was introduced to make tracking scroll event simpler, it can be a little daunting, so we will try to break it down here.  We will end with some SvelteKit code which you can use as a starting point for your own projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-iframe-endraw-example"&gt;
  &lt;/a&gt;
  &lt;code&gt;iframe&lt;/code&gt; Example
&lt;/h3&gt;

&lt;p&gt;Essentially we use the Intersection Observer API, to tell us whether an element is in view or not.  This element would be the iframe in the case we were lazy loading an iframe and wanted to know when it was in view.  As well as the element we are tracking we have a reference frame, the root element.&lt;/p&gt;

&lt;p&gt;By default, the root element is the viewport.  So we track whether the observed element (the iframe in our example) is inside the root element.  In the case of a lazy loading iframe, if we wanted to maximise user experience, we would start lazy loading the iframe before it came into the root element (the viewport in our case).  To do this we might say trigger the lazy load when the iframe is within 100 px of the bottom of the root element, so it is not yet visible, but will be visible as soon a the user scrolls up just anothe 100 pixels.  In this case the &lt;code&gt;rootMargin&lt;/code&gt; parameter is helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ad-example"&gt;
  &lt;/a&gt;
  Ad Example
&lt;/h3&gt;

&lt;p&gt;With the iframe example, we want to trigger as soon as the first pixel of the iframe enters our (extended) root element.  If we were placing an ad on our site and want to record the number of views of the ad, we might consider the add viewed once say 90% of it is visible in the viewport.  Here we would not need to extend the root element as with the iframe.  But we would want to trigger once 90% was in view, rather than the very first pixel and can do this by using the &lt;code&gt;threshold&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;One thing to note on the Intersection Observer is that it is triggered in either direction.  Meaning, by default, with the iframe example.  With the iframe initially out of view, the user scrolls down and the event is triggered (iframe switches from being outside the root element to being inside). If the user now scrolls up again, a fresh event is triggered (iframe switches from being inside the reference element to outside).&lt;/p&gt;

&lt;p&gt;Equally, when the iframe is in view and the user scrolls right down to the bottom of the page, so the iframe is no longer visible, another event is triggered (iframe switches from being inside the root element to being outside).  Taking this into account, depending on the use case, you probably want to disable the observer once the first event is triggered.  In the iframe example, you only need to lazy load it once!  In the ad example, the advertiser might accuse you of fraud if you count a view (and bill them for it) when the ad enters the viewport and another when it leaves!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-rootmargin-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;rootMargin&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Root margin can be used to grow or shrink the root element.  Think of it like a CSS margin when you set parameters.  That said, you can only specify in units of pixels or a percentage (also, be sure to write &lt;code&gt;0px&lt;/code&gt;, rather than just &lt;code&gt;0&lt;/code&gt;).  Why would you want to grow or shrink the root element?  By default the root element is the visible viewport.  If we want to the observer to trigger a lazy load of an iframe, it makes sense to trigger before the iframe enters the viewport, to give it time to load and improve user experience.  Here growing the root element helps.  Let's say we went for this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0px 0px 100px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We interpret this as we would a CSS margin, so the first &lt;code&gt;0px&lt;/code&gt; means apply a top margin of zero (i.e. do nothing with the top of the root element).  The second &lt;code&gt;0px&lt;/code&gt; refers to left and right margin, again we do nothing.  The &lt;code&gt;100px&lt;/code&gt; refers to the bottom margin.  We are saying grow the root element by shifting the bottom of it out 100 pixels.  This is just what we need; by growing the root element, we can trigger the observation earlier and anticipate the iframe coming into the view, getting ready a touch sooner.&lt;/p&gt;

&lt;p&gt;Remember this parameter works like a CSS margin so a negative value will decrease the size of the root element while a positive value increases it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-threshold-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;threshold&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;threshold&lt;/code&gt; option just controls how much of the observed element needs to be visible for an event to be triggered.  For the iframe example, we can keep it at the default 0, meaning as soon as the first pixel enters the root element, we trigger an observation.  For the ad example, we might try somehting like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we need to have the observed element 90% visible to trigger.  Rememember that triggers work both ways.  So if we are scrolling the observer element into view and it goes from the top 89% being visible to the top 91% being visible, we have a trigger.  If we continue scrolling, we might get to a point where only the bottom 91% is visible.  If we continue scrolling, we will trigger another event once less than the bottom 90% is visible.&lt;/p&gt;

&lt;p&gt;Hope that I explained it well enough!  Let me know if there's some element I can improve on.  That's enough theory for now.  Let's code up an example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracking-page-views-in-sveltekit"&gt;
  &lt;/a&gt;
  🧱 Tracking Page Views in SvelteKit
&lt;/h2&gt;

&lt;p&gt;Let's leave behind our iframe and ad examples and look at a page view.  We have a blog and want to know how many times each post gets viewed.  We could trigger a view as soon as the page loads.  Though what happens if the user clicked the wrong link and immediately presses the back button?  We would count a view, when the user didn't event read the first sentence.&lt;/p&gt;

&lt;p&gt;In reality you would want to trigger a view once the user scrolls past let's say 25%, 50% or 75% of the article into view.  You would choose the threshold based best-suited to your needs. We'll keep it simple here.  We assume you write semantic HTML and have exactly one &lt;code&gt;main&lt;/code&gt; element on your blog post pages.  We trigger a view once the user scrolls the first child element of the main element out of view.  So let's say we have a structure somthing like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
        ...
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Article Title&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;First sentence&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first child element of the main element is the picture, so once the user scrolls past that, we trigger a view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wddjaCga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ll1uy9g9dftddhb4yg6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wddjaCga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ll1uy9g9dftddhb4yg6.png" alt="Tracking Page Views in SvelteKit: Intersection Observer: Screenshot show top of blog post page with a navigation bar up top and a large post banner image just below"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we know what our metric is, let's write some Svelte!  We'll create a component just for the intersection observer and place it in its own file.  Although the content is in a &lt;code&gt;.svelte&lt;/code&gt; file, it will not actually render anything in our example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onDestroy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$app/env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Intersection Observer view event triggered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleIntersect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unobserve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;handleView&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;rootMargin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100% 0% -100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handleIntersect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;firstElementChild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-closer-look-at-the-code"&gt;
  &lt;/a&gt;
  A Closer Look at the Code
&lt;/h3&gt;

&lt;p&gt;This is not as daunting as it might first look.  Let's break it down and see why.  First we import &lt;code&gt;onMount&lt;/code&gt;, &lt;code&gt;onDestroy&lt;/code&gt; and &lt;code&gt;browser&lt;/code&gt;.  You might already know &lt;code&gt;browser&lt;/code&gt; is a SvelteKit inbuilt boolean which returns true when our code is running in the browser and false, on the server.  &lt;code&gt;onMount&lt;/code&gt; and &lt;code&gt;onDestroy&lt;/code&gt; let us create code that only needs to be run once, as the component is created or once no longer needed.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;handleView&lt;/code&gt; function is lines &lt;code&gt;5&lt;/code&gt;–&lt;code&gt;7&lt;/code&gt; contains the code we would normally run on a view.  This would involve updating the view counter in the UI and also letting the database know there was a new view.&lt;/p&gt;

&lt;p&gt;We will create an &lt;code&gt;observer&lt;/code&gt; variable and want to access it both in &lt;code&gt;onMount&lt;/code&gt; and in &lt;code&gt;onDestroy&lt;/code&gt;.  For that reason we declare it without assigning a value outside of both those functions, so that in can de accessed from within them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#intersection-observer-options"&gt;
  &lt;/a&gt;
  Intersection Observer Options
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;onMount&lt;/code&gt; function contains the substance of our component.  First let's look at line &lt;code&gt;21&lt;/code&gt;.  Here we define the options.  We set a threshold of 1, meaning we trigger the intersection when we go from the picture being less than 100% visible to being 100% visible or vice versa. This does not sound like it will do what we want it to but let's carry on anyway.&lt;/p&gt;

&lt;p&gt;Interestingly, we are increasing the top margin by 100% (also in line &lt;code&gt;21&lt;/code&gt;), this makes the root element bigger.  So if we have a viewport height of 812 px, our root element now starts 812 px above the top of the viewport and ends at the bottom of the view port.  Next, we make no change to the left and right root margin, but decrease the bottom margin by 100%.  Now the bottom margin essentially moves to the top of the view port.&lt;/p&gt;

&lt;p&gt;What have we done here? We have shifted the entire root element so that it is off screen, standing on top of the viewport.  This is actually quite convenient for our use case.  Remember we want to know when our observed element scrolls off the top of the visible viewport.  Now (because of our margin adjustments), when that happens, the entire element will be in our shifted rootElement.  When the last pixel of the picture scrolls up out of view, 100% of the picture will be in our shifted root element.  This is why we set the trigger to 1 —  once 100% of the picture is in the  shifted rootElement, we want to trigger an intersection.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#creating-an-intersection-observer"&gt;
  &lt;/a&gt;
  Creating an Intersection Observer
&lt;/h4&gt;

&lt;p&gt;In line &lt;code&gt;22&lt;/code&gt; we create the Intersection Observer, using the options we just defined.  As well as the options we pass a callback function.  This is called when an intersection is observed. The next lines find the element we want to observe and tell the Intersection Observer to observe it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#intersection-observer-callback"&gt;
  &lt;/a&gt;
  Intersection Observer Callback
&lt;/h4&gt;

&lt;p&gt;Finally, we have our callback function: &lt;code&gt;handleIntersect&lt;/code&gt;.  The API passes in two parameters which we will use: &lt;code&gt;entries&lt;/code&gt; and &lt;code&gt;observer&lt;/code&gt;.  Entries is an array, in our case it will only ever have one entry.  That is because we defined a single threshold.  You can define &lt;code&gt;threshold&lt;/code&gt; as an array though (let's say you want to know when 25%, 50% and 75% of the element is visible) and be able to discern which threshold was triggered in the callback.&lt;/p&gt;

&lt;p&gt;Line &lt;code&gt;16&lt;/code&gt; is quite important as it tells the observer to stop observing, once we have an intersection.  We only need to count a view once the picture first scrolls out of view.  If the user scrolls to the top of the page again, we don't need to count another view.  Once the first view is counted, the observer has done its work and can chill!&lt;/p&gt;

&lt;p&gt;Equally important is remembering to use our intersection event.  In line &lt;code&gt;17&lt;/code&gt; we call our &lt;code&gt;handleView&lt;/code&gt; function.  In a real-world application, this would add a new view to our database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-it-out"&gt;
  &lt;/a&gt;
  💯 Testing it Out
&lt;/h2&gt;

&lt;p&gt;We can test the component by &lt;a href="https://github.com/rodneylab/sveltekit-blog-mdx"&gt;cloning the SvelteKit MDsveX starter&lt;/a&gt;, adding the new component and then adding the component to the rendered content in the BlogPost template.  Let's do that quickly now.&lt;/p&gt;

&lt;h3&gt;How to Track Page Views in SvelteKit&lt;/h3&gt;

&lt;ol&gt;
&lt;li id="how-to-track-page-views-in-svelte-kit-1-1"&gt;Clone the MDsveX blog starter and spin up a local dev server:&lt;pre&gt;&lt;span&gt;&lt;span&gt;git clone https&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;github&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;com&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;rodneylab&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;sveltekit&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;blog&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;mdx&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;git sveltekit&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;intersection&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;observer&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;cd sveltekit&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;intersection&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;span&gt;observer&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;cp &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;env&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;EXAMPLE&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;env&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;pnpm install # or npm install&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;pnpm run dev&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li id="how-to-track-page-views-in-svelte-kit-1-2"&gt;Create a new file &lt;code&gt;src/lib/components/IntersectionObserver.svelte&lt;/code&gt; and paste in the code block above.&lt;/li&gt;
&lt;li id="how-to-track-page-views-in-svelte-kit-1-3"&gt;Edit the &lt;code&gt;src/lib/components/BlogPost.svelte&lt;/code&gt; component to import the IntersectionObserver component and add it to the DOM:&lt;span&gt;src/lib/components/BlogPost.svelte&lt;/span&gt;jsx&lt;pre&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;script&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; readingTime &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'reading-time'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; BannerImage &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'$lib/components/BannerImage.svelte'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="CodeFragment-module--line-number--1xoCV CodeFragment-module--line-number-highlighted--2ykbA"&gt;4&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; IntersectionObserver &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'$lib/components/IntersectionObserver.svelte'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span&gt;import&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;SEO&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;from&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;'$lib/components/SEO/index.svelte'&lt;/span&gt;&lt;span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;span&gt;src/lib/components/BlogPost.svelte&lt;/span&gt;jsx&lt;pre&gt;&lt;span class="CodeFragment-module--line-number--1xoCV CodeFragment-module--line-number-highlighted--2ykbA"&gt;72&lt;/span&gt;&lt;span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;IntersectionObserver&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;73&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;BannerImage &lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;imageData&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;74&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;class&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;span&gt;"&lt;/span&gt;&lt;span&gt;heading&lt;/span&gt;&lt;span&gt;"&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;{&lt;/span&gt;&lt;span&gt;title&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;lt;/&lt;/span&gt;&lt;span&gt;h1&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li id="how-to-track-page-views-in-svelte-kit-1-4"&gt;Navigate to a blog post on the dev site and scroll past a picture, an alert should appear.  You can now customise the code, adding a counter to the DOM and hooking up the &lt;code&gt;handleView&lt;/code&gt; function in the Intersection Observer component to your database.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a &lt;a href="https://github.com/rodneylab/sveltekit-intersection-observer"&gt;full working example on the Rodney Lab GitHub page&lt;/a&gt;.  As well as this I have &lt;a href="https://sveltekit-intersection-observer.rodneylab.com/"&gt;deployed a full working demo&lt;/a&gt;. I hope all the steps above are clear and you know have a working knowledge of the Intersection Observer API and how to use it in SvelteKit.  If there is any way I could improve on this post, please drop a comment below or get in touch.  Also check out the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;MDN docs on the Intersection Observer API&lt;/a&gt;.  I deliberately explained it a little differently here so that you can use those docs to complement the explanation above.  They have a nice animation which might bring it home, if you are not yet 100% comfortable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  🙏🏽 Feedback
&lt;/h2&gt;

&lt;p&gt;Have you found the post useful? Do you have your own methods for solving this problem? Let me know your solution. Would you like to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a few dollars, euros or pounds, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on SvelteKit as well as other topics. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>✨Top React Charts Libraries [2021] </title>
      <author>reactjsfav</author>
      <pubDate>Mon, 27 Sep 2021 08:36:59 +0000</pubDate>
      <link>https://dev.to/pccprint/top-react-charts-libraries-2021-50be</link>
      <guid>https://dev.to/pccprint/top-react-charts-libraries-2021-50be</guid>
      <description>&lt;h2&gt;
  &lt;a href="#recharts"&gt;
  &lt;/a&gt;
  &lt;a href="https://recharts.org/en-US"&gt;Recharts&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Recharts is a &lt;strong&gt;Redefined&lt;/strong&gt; chart library built with &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt; and &lt;a href="http://d3js.org"&gt;D3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main purpose of this library is to help you to write charts in React applications without any pain. Main principles of Recharts are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Simply&lt;/strong&gt; deploy with React components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Native&lt;/strong&gt; SVG support, lightweight depending only on some D3 submodules.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Declarative&lt;/strong&gt; components, components of charts are purely presentational.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the components of Recharts are clearly separated. The lineChart is composed of x axis, tooltip, grid, and line items, and each of them is an independent React Component. The clear separation and composition of components is one of the principle Recharts follows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visx"&gt;
  &lt;/a&gt;
  &lt;a href="https://airbnb.io/visx"&gt;visx&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;visx is a collection of reusable low-level visualization components. visx combines the power of d3 to generate your visualization with the benefits of react for updating the DOM.&lt;br&gt;
&lt;a href="https://airbnb.io/visx/gallery"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlT6CB6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/airbnb/visx/raw/master/assets/visx-gallery.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more examples using &lt;code&gt;visx&lt;/code&gt;, check out the &lt;a href="https://airbnb.io/visx/gallery"&gt;gallery&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nivo"&gt;
  &lt;/a&gt;
  &lt;a href="https://nivo.rocks/"&gt;nivo&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;nivo&lt;/strong&gt; provides supercharged React components to easily build dataviz apps, it's built on top of d3.&lt;/p&gt;

&lt;p&gt;Several libraries already exist for React d3 integration, but just a few provide server side rendering ability and fully declarative charts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;In order to use nivo, you have to install the &lt;code&gt;@nivo/core&lt;/code&gt; package and then choose some of the scoped &lt;code&gt;@nivo&lt;/code&gt; packages according to the charts you wish to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @nivo/core @nivo/bar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Highly customizable&lt;/li&gt;
&lt;li&gt;Motion/transitions, powered by &lt;a href="https://github.com/chenglou/react-motion"&gt;react-motion&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks"&gt;Component playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks"&gt;Exhaustive documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Isomorphic rendering&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/components?filter=svg"&gt;SVG charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/components?filter=html"&gt;HTML charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/components?filter=canvas"&gt;Canvas charts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/plouc/nivo-api"&gt;server side rendering API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/guides/patterns"&gt;SVG patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/guides/gradients"&gt;Gradients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nivo.rocks/components?q=responsive"&gt;responsive charts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#billboardjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/naver/billboard.js/"&gt;billboard.js&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/aa22809b2d2df3249d772e56f42e89e0d12d23c42638a7b1973b47e7d2cd209e/68747470733a2f2f6e617665722e6769746875622e696f2f62696c6c626f6172642e6a732f696d672f6c6f676f2f62696c6c626f6172642e6a732e737667"&gt;&lt;img src="https://camo.githubusercontent.com/aa22809b2d2df3249d772e56f42e89e0d12d23c42638a7b1973b47e7d2cd209e/68747470733a2f2f6e617665722e6769746875622e696f2f62696c6c626f6172642e6a732f696d672f6c6f676f2f62696c6c626f6172642e6a732e737667" alt="billboard.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;billboard.js is a re-usable, easy interface JavaScript chart library, based on &lt;a href="https://d3js.org/"&gt;D3.js&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The name "billboard" comes from the famous &lt;code&gt;billboard chart&lt;/code&gt; which everybody knows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/naver/billboard.js/wiki/Why-we-decided-to-start-billboard.js%3F"&gt;Why we decided to start billboard.js?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#supported-chart-types"&gt;
  &lt;/a&gt;
  Supported chart types
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/eea68068dd5e33b56a05f060e85b6432ad9f57211ea4b2aac62ee3572ea791f0/68747470733a2f2f6e617665722e6769746875622e696f2f62696c6c626f6172642e6a732f696d672f63686172742d74797065732e706e673f763d39"&gt;&lt;img src="https://camo.githubusercontent.com/eea68068dd5e33b56a05f060e85b6432ad9f57211ea4b2aac62ee3572ea791f0/68747470733a2f2f6e617665722e6769746875622e696f2f62696c6c626f6172642e6a732f696d672f63686172742d74797065732e706e673f763d39" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#download-and-installation"&gt;
  &lt;/a&gt;
  Download and Installation
&lt;/h2&gt;

&lt;p&gt;Download dist files from the repo directly or install it via npm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-development-uncompressed"&gt;
  &lt;/a&gt;
  For development (Uncompressed)
&lt;/h3&gt;

&lt;p&gt;You can download the uncompressed files for development&lt;/p&gt;

&lt;p&gt;Latest&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://naver.github.io/billboard.js/release/latest/dist/billboard.js"&gt;https://naver.github.io/billboard.js/release/latest/dist/billboard.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://naver.github.io/billboard.js/release/latest/dist/billboard.css"&gt;https://naver.github.io/billboard.js/release/latest/dist/billboard.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Specific version&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://naver.github.io/billboard.js/release/%5BVERSION%5D/dist/billboard.js"&gt;https://naver.github.io/billboard.js/release/[VERSION]/dist/billboard.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://naver.github.io/billboard.js/release/%5BVERSION%5D/dist/billboard.css"&gt;https://naver.github.io/billboard.js/release/[VERSION]/dist/billboard.css&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reactvis"&gt;
  &lt;/a&gt;
  &lt;a href="http://uber.github.io/react-vis"&gt;react-vis &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://uber.github.io/react-vis/examples/showcases/axes"&gt;Demos&lt;/a&gt; | &lt;a href="http://uber.github.io/react-vis/documentation/getting-started/creating-a-new-react-vis-project"&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A COMPOSABLE VISUALIZATION SYSTEM&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/uber/react-vis/blob/master/docs/assets/react-vis.gif?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mkx8oxV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/uber/react-vis/raw/master/docs/assets/react-vis.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;A collection of react components to render common data visualization charts, such as &lt;strong&gt;line/area/bar charts&lt;/strong&gt;, &lt;strong&gt;heat maps&lt;/strong&gt;, &lt;strong&gt;scatterplots&lt;/strong&gt;, &lt;strong&gt;contour plots&lt;/strong&gt;, &lt;strong&gt;hexagon heatmaps&lt;/strong&gt;, &lt;strong&gt;pie and donut charts&lt;/strong&gt;, &lt;strong&gt;sunbursts&lt;/strong&gt;, &lt;strong&gt;radar charts&lt;/strong&gt;, &lt;strong&gt;parallel coordinates&lt;/strong&gt;, and &lt;strong&gt;tree maps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Some notable features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simplicity. &lt;code&gt;react-vis&lt;/code&gt; doesn't require any deep knowledge of data visualization libraries to start building your first visualizations.&lt;/li&gt;
&lt;li&gt;Flexibility. &lt;code&gt;react-vis&lt;/code&gt; provides a set of basic building blocks for different charts. For instance, separate X and Y axis components. This provides a high level of control of chart layout for applications that need it.&lt;/li&gt;
&lt;li&gt;Ease of use. The library provides a set of defaults which can be overridden by the custom user's settings.&lt;/li&gt;
&lt;li&gt;Integration with React. &lt;code&gt;react-vis&lt;/code&gt; supports the React's lifecycle and doesn't create unnecessary nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reactchartjs2"&gt;
  &lt;/a&gt;
  &lt;a href="http://reactchartjs.github.io/react-chartjs-2"&gt;react-chartjs-2&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;React wrapper for Chart.js 2.0 and 3.0, the most popular charting library 📊&lt;/p&gt;

&lt;p&gt;React wrapper for &lt;a href="http://www.chartjs.org/docs/#getting-started"&gt;Chart.js&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Live: &lt;a href="https://reactchartjs.github.io/react-chartjs-2/#/"&gt;reactchartjs.github.io/react-chartjs-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://github.com/reactchartjs/react-chartjs-2/blob/master/example"&gt;these examples&lt;/a&gt; for more information&lt;/p&gt;

&lt;p&gt;More react resource❤️ &lt;a href="https://bestofreactjs.com/"&gt;A curated list of awesome React frameworks, libraries and Components. &lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>charts</category>
    </item>
    <item>
      <title>How Web Scraping is Used in Google Shopping?</title>
      <author>Scraping Intelligence</author>
      <pubDate>Mon, 27 Sep 2021 08:32:08 +0000</pubDate>
      <link>https://dev.to/website_scraper/how-web-scraping-is-used-in-google-shopping-4ifo</link>
      <guid>https://dev.to/website_scraper/how-web-scraping-is-used-in-google-shopping-4ifo</guid>
      <description>&lt;p&gt;Google Shopping is an excellent place to start when it comes to marketing your online store and increasing sales. If you’re a beginner, you should use a web data extraction tool to observe and understand how your competitor’s brand and advertise their products from the Google Shopping web scraping tool.&lt;/p&gt;

&lt;p&gt;Reasons Behind Using google Shopping for E-Commerce Business&lt;/p&gt;

&lt;p&gt;The conversion rate for Google Shopping is high. Because Google Shopping only attracts customers who are interested in making a purchase, this is the case. For example, a user wants to buy her mother a pair of running shoes as a birthday present. And she will start looking for “running shoes,” on Google then providing all pertinent product information. In a matter of seconds, users may compare costs and features.&lt;/p&gt;

&lt;p&gt;Google Buying not just to make buying easier for customers, but it also allows businesses to better match marketing campaigns to their target audiences. It’s no surprise that Google Shopping has grown in popularity among e-commerce firms. If you can make the most of it, it’s the most effective way to increase your sales.&lt;/p&gt;

&lt;p&gt;How Does Google Shopping Work?&lt;/p&gt;

&lt;p&gt;To get the most out of your Google Shopping promotion, you must grasp its operation. Following official instructions, it becomes very easy to get started with Google Shopping and set up your account in the Google merchant center.&lt;/p&gt;

&lt;p&gt;We’re ready to sync your online stores after you’ve set up your account. When the appropriate product search result kicks in, your product information will go online via Google Shopping scraper.&lt;/p&gt;

&lt;p&gt;Google Shopping utilizes an auction contract system and a quality score for product pages. As a result, for Google Shopping to award your campaign ad the top spot for a certain search result, you must:&lt;/p&gt;

&lt;p&gt;• Offer bids that are greater than those of your competitors.&lt;br&gt;
• To enhance the CTR, develop a conversion-magnetic listing description.&lt;/p&gt;

&lt;p&gt;For the most part, they have no idea how to launch an effective campaign. In this case, the simplest approach to get started is to observe how others, particularly your competitors, sell on Google Shopping.&lt;/p&gt;

&lt;p&gt;Why Use Web Data Extraction?&lt;/p&gt;

&lt;p&gt;Scraped data from Google shopping delivers a wealth of information that can be used for your brand promotion. There are various product monitoring platforms available on the market.&lt;br&gt;
However, investing in these fancy monitoring technologies before testing out an effective marketing approach and becoming ready is a waste of money. The majority of monitoring systems are geared for established online firms with vast product lines distributed across several channels.&lt;/p&gt;

&lt;p&gt;This is where data extraction of Google shopping comes into action. It can automatically collect data from websites and convert it to a usable format for analysis, such as Excel. Furthermore, the optimization strategies are based on a sufficient amount of product data gathered through Google Shopping.&lt;/p&gt;

&lt;p&gt;How to Scrape Google Shopping using Web Data Extraction?&lt;/p&gt;

&lt;p&gt;Web data extraction necessitates a high level of technological expertise. Fortunately, there are online web extraction tools that are simple to use and allow anyone to extract web data in only a few clicks. Scraping Intelligence stands out as the most popular web scraping program for scraping Google shopping prices, and it’s a no-brainer for newcomers. To collect information from most websites, anyone may modify and set up a scraper.&lt;/p&gt;

&lt;p&gt;• To use Scraping Intelligence to extract product details from Google Shopping, create a new task by clicking the add symbol in the right-hand corner and typing the URL into the field.&lt;/p&gt;

&lt;p&gt;• This has a built-in browser that should download the webpage so that we may point-and-click on it. The new edition of OP 8.X will instantly recognize the web page and identifying relevant fields.&lt;/p&gt;

&lt;p&gt;• Click “Save Setting” after following the guide’s advice. It’ll create the process on its own.&lt;/p&gt;

&lt;p&gt;• To begin the extraction process, click “Start Extraction.”&lt;/p&gt;

&lt;p&gt;Depending on the number of listings, it may take a few minutes. After it has finished extracting, save the file as an Excel or CSV file.&lt;/p&gt;

&lt;p&gt;We’ll be able to examine the outcomes once we have enough information. You can also create graphical charts to intuitively visualize the data.&lt;/p&gt;

&lt;p&gt;What Can You Get to Know from Competitors?&lt;/p&gt;

&lt;p&gt;• The Lower Price Enhances CTR&lt;br&gt;
Competitive pricing will always generate a higher CTR, allowing Google Shopping to push your products to the top of the search results more frequently. And the impression you make will boost your click-through rate. There is, however, a limit to how low you can go. That’s why keeping an eye on your competitors’ prices might help you stay competitive.&lt;/p&gt;

&lt;p&gt;• Do Not Mess Up with the Rock&lt;br&gt;
Keep an eye on key companies such as Amazon, Target, and Walmart. If a product has a lot of major players, don’t try to outbid them by increasing your bids. Instead, you can choose a niche product on which they are unlikely to bid aggressively.&lt;/p&gt;

&lt;p&gt;• Optimize the Image’s Quality&lt;br&gt;
In Google Shopping, product photos are not required. A good image can persuade more people to click. Your photograph should be clean and straightforward. In this regard, keep in mind that you may want Photoshop expertise to improve the appearance of your images.&lt;/p&gt;

&lt;p&gt;• Focus on Promotional Text&lt;br&gt;
If your conversion rate lowers, your competitors are most certainly running specials. Promotional texts are more enticing, resulting in a higher CTR. Seasonal promotions, such as “Winter Blowout Sale,” are an option.&lt;/p&gt;

&lt;p&gt;Even a slogan like “Free Delivery on All Orders” can help you attract more clients. Sneaky businesses, on the other hand, will cut their prices by charging buyers for shipping.&lt;/p&gt;

&lt;p&gt;Some clients were unaware that they had paid for shipping from their own pockets and became furious subsequently. Simply ensure that customers are well-informed about the specials and will not cause any problems.&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Although Google Shopping is simple to use, you must be proactive and vigilant. Other Google information, such as Google Play Review, has the same effect. It’s like going on a blind date with Google since there’s so much information to choose from. Web data extraction is your golden standard for automatically keeping track of your competition with no effort. Automate your market strategy so you can concentrate on achieving a competitive advantage when the opportunity arises.&lt;/p&gt;

&lt;p&gt;For any queries, contact Scraping Intelligence, now!!&lt;/p&gt;

&lt;p&gt;Know more : &lt;a href="http://www.websitescraper.com/how-web-scraping-is-used-in-google-shopping/"&gt;http://www.websitescraper.com/how-web-scraping-is-used-in-google-shopping/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webextractiontool</category>
      <category>googleshoppingscraper</category>
      <category>scrapegoogleshopping</category>
      <category>scrapegoogleshoppingprices</category>
    </item>
    <item>
      <title>Install Windows 11 on Unsupported Devices</title>
      <author>Vidhya Varshany</author>
      <pubDate>Mon, 27 Sep 2021 08:29:17 +0000</pubDate>
      <link>https://dev.to/vidhyavarshanyjs/install-windows-11-on-unsupported-devices-5d39</link>
      <guid>https://dev.to/vidhyavarshanyjs/install-windows-11-on-unsupported-devices-5d39</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-netizens-of-hashnodegot-you-some-interesting-stuffs"&gt;
  &lt;/a&gt;
  HELLO NETIZENS OF HASHNODE,GOT YOU SOME INTERESTING STUFFS😊!!!
&lt;/h2&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hHvf0ZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/d8oI97avlJAygnp7RC/giphy.gif%3Fcid%3D790b761146a2e976690a1defb30a5e95a0906f5b47fcb23f%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;Windows 11&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows 11 will bring you closer to what you love when the PC plays a more important role in our lives.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1pTKjMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media3.giphy.com/media/hJaQNVrOPC4Ja/giphy.gif%3Fcid%3Decf05e47v2vqo97os2b647fivujz3fvtapl3rv2wv5wlizqx%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/center&gt;

&lt;p&gt;Windows has long served as a global innovation platform. It's where scrappy companies are named after households, and it's the backbone of global companies. The internet was born and grew up on Windows. Many of us have written our first email, played our first computer game, and coded the first line. Windows is a platform for people to create, connect, learn and achieve – a platform used by more than a billion people today.&lt;/p&gt;

&lt;p&gt;We don't take the responsibility of lightly designing so many people. We went from the PC into our lives to try to fit our whole life on the PC for the last 18 months. Our phones were not just for conferences, lectures, and things are done; they were also where we went for games with friends, watch our favorite shows, and perhaps most importantly, interact with each other. We digitally replicated office conversations, hallways, workouts, happy times, and holidays during the process.&lt;/p&gt;

&lt;p&gt;The transition from something useful and useful to something personal and emotional was profound on the PC we saw and felt. This is why we have created the next Windows iteration. To provide you with a familiar environment where you can create, learn, play, and, above all, connect in new ways.&lt;/p&gt;

&lt;p&gt;Microsoft is honored and pleased to present you with Windows 11, the operating system that brings you closer to your interests.&lt;/p&gt;

&lt;p&gt;We have simplified design and user experience to boost your productivity and stimulate your creativity. It is modern, fresh, clever and beautiful. Everything was done to control and bring a sense of peace and ease to every sound, typeface, and icon from the new Start button and Task Bar. We put Start in the center to make finding what you are looking for easier. Start uses the cloud and Microsoft 365 to view your recent files, regardless of the platform or device you used to view them, including Android and iOS devices.&lt;/p&gt;

&lt;p&gt;Windows has always been about how you can work, with many windows and the ability to snap apps together. Snap layouts, snap groups, and desktops are all new in Windows 11, offering an even more powerful multi-task procedure that stays above what you need to do. These are new tools to help you manage your windows so that you can see exactly what you need in a visually attractive design. You may also build and adjust separate desktops to various aspects of your life, such as work desktops, gaming, and education.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods✨
&lt;/h3&gt;

&lt;p&gt;So, there are 2 methods to update to windows 11.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Update Windows From ISO.&lt;/li&gt;
&lt;li&gt;Update Windows Officially.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#update-windows-from-iso"&gt;
  &lt;/a&gt;
  Update Windows From ISO.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, you have to download the latest Windows ISO from  &lt;a href="https://uupdump.net/"&gt;UUP-DUMP&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt; you have to Download This Bypass File. &lt;/p&gt;


&lt;center&gt;&lt;a href="https://www.mediafire.com/file/loh5cggo3oh2nm7/Windows11_appraiserres.zip/file"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4RBSHk_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/external-flatart-icons-lineal-color-flatarticons/50/000000/external-download-web-security-flatart-icons-lineal-color-flatarticons.png"&gt;&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;Then After that, Boot Windows 11 ISO with the help of Rufus  &lt;a href="https://github.com/pbatard/rufus/releases/download/v3.14/rufus-3.14.exe"&gt;Download&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Extract the Bypass File And &lt;strong&gt;Copy&lt;/strong&gt; Them.&lt;/p&gt;

&lt;p&gt;Goto USB Drive (Where you have booted the windows).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open Booted &lt;strong&gt;USB.&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to **Resources **Folder.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Paste&lt;/strong&gt; Files There.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After this, Install Windows normally :)&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;NOTE: *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If your USB doesn't boot, then copy all your windows files from USB an  past it somewhere on HDD (NOT IN SYSTEM PARTITION), then install from there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-from-system-update"&gt;
  &lt;/a&gt;
  Update From System Update.
&lt;/h3&gt;

&lt;p&gt;As you know, the topic of this article "How to Install Windows 11 on Unsupported Devices," but how can we install the update from Windows Update, so actually guys, you can, by Changing some registry files from your pc, the process is pretty simple. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, You have To Join Windows Insider Program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then&lt;/strong&gt;, You have to download this file.&lt;/p&gt;


&lt;center&gt;&lt;a href="https://www.mediafire.com/file/twqlkskacb7hbhn/win11bypass.zip/file"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4RBSHk_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/external-flatart-icons-lineal-color-flatarticons/50/000000/external-download-web-security-flatart-icons-lineal-color-flatarticons.png"&gt;&lt;/a&gt;&lt;/center&gt;

&lt;p&gt;1.After downloading** Extract** ZIP file&lt;/p&gt;

&lt;p&gt;2.Run &lt;strong&gt;Bypass.reg&lt;/strong&gt; file as an &lt;strong&gt;administrator.&lt;/strong&gt;&lt;br&gt;
   Then Simply Restart your PC.&lt;/p&gt;

&lt;p&gt;After Restarting.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to** Windows Settings.**&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;strong&gt;Windows Updates.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Directly** Update Windows** From There.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;These were two alternative methods to obtain and install the Windows 11 Insider preview update on an unsupported or incompatible PC.&lt;/p&gt;

&lt;p&gt;Do try both of these, and let me know which one works for you in the comments. Also, please continue with caution and be sure you back up any vital data. Feel free to reach out via comments in case of any issues or queries.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sAxnga_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/q2Uh33hQE_cAAAAC/sanditon-mary-parker.gif" alt="Sanditon Mary Parker GIF - Sanditon Mary Parker Final Word GIFs"&gt;&lt;/center&gt;

&lt;p&gt;Thanks for reading this whole content .Have a good day😉.&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;&lt;pre&gt;💙Follow me on&lt;a href="https://twitter.com/vidhyavarshany"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXp3xsG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632213348452/UgQqOEbIc.png"&gt;&lt;/a&gt;&lt;a href="https://github.com/VidhyaVarshanyJS"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ag01ZYfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632214312141/6-HT0TSXR.png"&gt;&lt;/a&gt;for more updates...&lt;/pre&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;𝚂𝚑𝚊𝚛𝚒𝚗𝚐  𝙺𝚗𝚘𝚠𝚕𝚎𝚍𝚐𝚎  𝚘𝚌𝚌𝚞𝚛𝚜  𝚠𝚑𝚎𝚗  𝚙𝚎𝚘𝚙𝚕𝚎  𝚊𝚛𝚎  𝚐𝚎𝚗𝚞𝚒𝚗𝚎𝚕𝚢  𝚒𝚗𝚝𝚎𝚛𝚎𝚜𝚝𝚎𝚍  𝚒𝚗 &lt;br&gt;
 𝚑𝚎𝚕𝚙𝚒𝚗𝚐  𝚘𝚗𝚎  𝚊𝚗𝚘𝚝𝚑𝚎𝚛;  𝚍𝚎𝚟𝚎𝚕𝚘𝚙  𝚗𝚎𝚠  𝚌𝚊𝚙𝚊𝚌𝚒𝚝𝚒𝚎𝚜  𝚏𝚘𝚛  𝚊𝚌𝚝𝚒𝚘𝚗;  𝚒𝚝  𝚒𝚜  𝚊𝚋𝚘𝚞𝚝 &lt;br&gt;
 𝚌𝚛𝚎𝚊𝚝𝚒𝚗𝚐  𝚕𝚎𝚊𝚛𝚗𝚒𝚗𝚐  𝚙𝚛𝚘𝚌𝚎𝚜𝚜𝚎𝚜.  – 𝙿𝚎𝚝𝚎𝚛 𝚂𝚎𝚗𝚐𝚎&lt;/p&gt;


&lt;/blockquote&gt;



&lt;center&gt;💟💟💟💟💟&lt;/center&gt;

</description>
      <category>tutorial</category>
      <category>windows</category>
      <category>solve</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
