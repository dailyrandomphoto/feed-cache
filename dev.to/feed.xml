<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Design Resources for Developers - II</title>
      <author>Suhail Kakar</author>
      <pubDate>Thu, 19 Aug 2021 06:29:57 +0000</pubDate>
      <link>https://dev.to/suhailkakar/best-design-resources-for-developers-ii-2g5a</link>
      <guid>https://dev.to/suhailkakar/best-design-resources-for-developers-ii-2g5a</guid>
      <description>&lt;p&gt;Are you searching for the best design resources? This is a collection that every developer should bookmark since it contains the greatest resources for creating an eye-catching and aesthetically enhanced project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Every developer's job entails some kind of product design. It's not just about having a good appearance; it's also about having engaging visuals and a good overall presentation. Rather than spending time and money on a lengthy design process, it is preferable to leverage resources that offer ready-to-use components and features for a fantastic, amazing, and outstanding product.&lt;/p&gt;

&lt;p&gt;Part one of these resources can be found &lt;a href="https://blog.suhailkakar.com/best-design-resources-for-developers"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#accessibility-resources"&gt;Accessibility resources&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#checklists"&gt;Checklists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guidelines"&gt;Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#industry-leaders-educators-and-consultants"&gt;Industry leaders, educators, and consultants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#online-courses"&gt;Online courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#patterncomponent-libraries"&gt;Pattern/component libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements-and-standards"&gt;Requirements and standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing-tools-and-development-references"&gt;Testing tools and development references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#further-reading"&gt;Further reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#books-and-zines"&gt;Books and zines&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#individual-publications"&gt;Individual publications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessibility"&gt;Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#history"&gt;History&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#independent-practice-consulting-freelancing"&gt;Independent practice, consulting, freelancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#process-and-mindset"&gt;Process and mindset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-experience-and-interaction-design"&gt;User experience and interaction design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-research"&gt;User research&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#publishers-and-distributors"&gt;Publishers and distributors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#browser-features"&gt;Browser features&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#google-chrome-extensions-and-bookmarklets"&gt;Google Chrome extensions and bookmarklets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#google-chrome-devtools"&gt;Google Chrome DevTools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#brushes"&gt;Brushes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#colors-and-color-palettes"&gt;Colors and color palettes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#accessible-color-palettes"&gt;Accessible color palettes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#accessibility-testing-tools"&gt;Accessibility testing tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#fonts"&gt;Fonts&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#directories-and-marketplaces"&gt;Directories and marketplaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#individual-foundries"&gt;Individual foundries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#icons-and-emoji"&gt;Icons and emoji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#inspiration-and-criticism-websites"&gt;Inspiration and criticism websites&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#brand-identity"&gt;Brand identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#illustration-and-art"&gt;Illustration and art&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#print-layout-packaging-art-direction"&gt;Print, layout, packaging, art direction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motion"&gt;Motion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#typography"&gt;Typography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#web-mobile-product"&gt;Web, mobile, product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ux-patterns-and-components"&gt;UX patterns and components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visual-design"&gt;Visual design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#macos-apps"&gt;macOS apps&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#development"&gt;Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#font-management"&gt;Font management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#menubar-apps"&gt;Menubar apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#mockups"&gt;Mockups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prototyping-tools"&gt;Prototyping tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stock-graphics"&gt;Stock graphics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stock-photography"&gt;Stock photography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#user-testing-and-interactive-feedback-tools"&gt;User testing and interactive feedback tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#accessibility-resources"&gt;
  &lt;/a&gt;
  Accessibility resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#checklists"&gt;
  &lt;/a&gt;
  Checklists
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://accessibility.18f.gov/checklist/"&gt;18F Accessibility Guide Checklist&lt;/a&gt; — WCAG 2.0 compliance checklist for developers, driven by priority&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.hhs.gov/web/section-508/making-files-accessible/pdf-required/index.html"&gt;HHS.gov’s checklist for creating accessible PDFs&lt;/a&gt; — designing accessibly for artifacts that aren't apps or websites is important, too!&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://accessibility.voxmedia.com/"&gt;Vox Media Accessibility Guidelines Checklist&lt;/a&gt; — best practices for designers, engineers, PMs, QA, and editorial staff (with sources to read more; great to send to coworkers on different teams)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guidelines"&gt;
  &lt;/a&gt;
  Guidelines
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://accessibility.18f.gov/"&gt;18F Accessibility Guide&lt;/a&gt; — hub of accessibility resources and principles by government office 18F&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://empathyprompts.net/"&gt;Empathy Prompts&lt;/a&gt; — open source list of considerations &amp;amp; challenges to help build empathy&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://material.io/guidelines/usability/accessibility.html#accessibility-principles"&gt;Google Material Design Accessibility Principles&lt;/a&gt; — practices for color, sound, motion, layout, copy, hierarchy, focus, and implementation&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://inclusivedesignprinciples.org/"&gt;Inclusive Design Principles&lt;/a&gt; — seven clear principles to follow to put people first, by leading experts The Paciello Group&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.microsoft.com/en-us/design/inclusive"&gt;Microsoft Inclusive Design Principles&lt;/a&gt; — Microsoft's guidelines for designing accessible and inclusive experiences, including a detailed manual (.pdf) with awesome visualizations, and activity cards for considerations &amp;amp; challenges while brainstorming&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#industry-leaders-educators-and-consultants"&gt;
  &lt;/a&gt;
  Industry leaders, educators, and consultants
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.deque.com/"&gt;Deque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.karlgroves.com/"&gt;Karl Groves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.knowbility.org/"&gt;Knowability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.levelaccess.com/"&gt;Level Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marcysutton.com/"&gt;Marcy Sutton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.paciellogroup.com/"&gt;The Paciello Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://simplyaccessible.com/"&gt;Simply Accessible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webaim.org/resources/designers/"&gt;WebAIM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#online-courses"&gt;
  &lt;/a&gt;
  Online courses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.pluralsight.com/courses/web-accessibility-meeting-guidelines"&gt;Pluralsight “Meeting Web Accssibility Guidelines” course&lt;/a&gt; — [paid] — practical course with code examples to meet Section 508 and/or WCAG 2.0 requirements for government/education projects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udacity.com/course/web-accessibility--ud891"&gt;Udacity Web Accessibility course, by Google&lt;/a&gt; — [free] — practical course focused on front-end design and development regarding markup and visual styling&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#patterncomponent-libraries"&gt;
  &lt;/a&gt;
  Pattern/component libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://a11y-style-guide.com/style-guide/"&gt;A11y Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ianmcburnie.github.io/mindpatterns/index.html"&gt;eBay MIND Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#requirements-and-standards"&gt;
  &lt;/a&gt;
  Requirements and standards
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.w3.org/TR/WCAG20/"&gt;🌐 WCAG 2.0&lt;/a&gt; — the W3C’s “Web Content Accessibility Guidelines” web standards specification&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ada.gov/"&gt;🇺🇸 ADA&lt;/a&gt; — Americans with Disabilities Act prohibits discrimination against people with disabilities&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.section508.gov/"&gt;🇺🇸 Section 508&lt;/a&gt; — amendment to the Workforce Rehabilitation Act federally mandating all tech developed, procured, maintained, or used by the federal government be accessible to persons with disabilities&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.ontario.ca/laws/regulation/110191"&gt;🇨🇦 AODA&lt;/a&gt; — Accessibility for Ontarians with Disabilities Act, enacted for the province to become “accessible for people with disabilities by 2025”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing-tools-and-development-references"&gt;
  &lt;/a&gt;
  Testing tools and development references
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.accessible-email.org/"&gt;Accessible-email.org&lt;/a&gt; — browser-based semantic analysis to report a11y and usability issues errors in marketing emails&lt;/li&gt;
&lt;li&gt;
&lt;a href="#colors"&gt;Colors palettes &amp;amp; contrast testing tools&lt;/a&gt; — listed in the "Colors" category 👇&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.html5accessibility.com/"&gt;HTML5 Accessibility&lt;/a&gt; — lists current accessibility support status of HTML5 features across major browsers&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://pa11y.org/"&gt;pa11y&lt;/a&gt; — automated accessibility testing on the command line for programmatic accessibility reporting&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://khan.github.io/tota11y/"&gt;tota11y&lt;/a&gt; — Khan Academy's jQuery-based semantic analysis that can be inserted into a page or run as a bookmarklet&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://a11ywins.tumblr.com/"&gt;Accessibility Wins&lt;/a&gt; — single-serving Tumblr showcasing small victories in accessible web design and development&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brunopulis/awesome-a11y"&gt;Awesome Accessibility&lt;/a&gt; — a curated list of awesome accessibility tools, articles and resources on GitHub&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Books on accessibility&lt;/em&gt; — listed in the “Books” category 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#books-and-zines"&gt;
  &lt;/a&gt;
  Books and zines
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#individual-publications"&gt;
  &lt;/a&gt;
  Individual publications
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://rosenfeldmedia.com/books/a-web-for-everyone/"&gt;&lt;em&gt;A Web for Everyone&lt;/em&gt; by Sarah Horton &amp;amp; Whitney Quesenbery&lt;/a&gt;, 2014 — practical advice and examples to build accessible web products without sacrificing design or innovation&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.smashingmagazine.com/inclusive-design-patterns/"&gt;&lt;em&gt;Inclusive Design Patterns — Coding Accessibility Into Web Design&lt;/em&gt; by Heydon Pickering&lt;/a&gt;, 2016 — real-world techniques and strategies to build and prototype accessible interfaces&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/641593.Meggs_History_of_Graphic_Design?ac=1&amp;amp;from_search=true"&gt;&lt;em&gt;Megg’s History of Graphic Design&lt;/em&gt; by Philip B. Meggs&lt;/a&gt;, 1983 — the unrivaled college textbook authority on the history of graphic design, mostly in America and Europe&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#independent-practice-consulting-freelancing"&gt;
  &lt;/a&gt;
  Independent practice, consulting, freelancing
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/13574985-design-is-a-job"&gt;&lt;em&gt;Design Is a Job&lt;/em&gt; by Mike Monteiro&lt;/a&gt;, 2012 — no bullshit lessons on selling yourself and working with others&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/28511400-pricing-design"&gt;&lt;em&gt;Pricing Design&lt;/em&gt; by Dan Mall&lt;/a&gt;, 2016 — brief and invaluable reference on value-based pricing&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#process-and-mindset"&gt;
  &lt;/a&gt;
  Process and mindset
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/615570.The_Artist_s_Way"&gt;&lt;em&gt;The Artist’s Way&lt;/em&gt; by Julia Cameron&lt;/a&gt;, 1992 – classic international bestseller on the creative process&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://shapeofdesignbook.com/"&gt;&lt;em&gt;The Shape of Design&lt;/em&gt; by Frank Chimero&lt;/a&gt;, 2012 — sometimes insightful, sometimes insufferable; a rumination on making things for other people&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/25814544-sprint"&gt;&lt;em&gt;Sprint&lt;/em&gt; by Jake Knapp &amp;amp; more&lt;/a&gt;, 2016 — a balanced book of details, examples, checklists, and scripts to perform your own famed Google Ventures design sprint&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#user-experience-and-interaction-design"&gt;
  &lt;/a&gt;
  User experience and interaction design
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/17239285-microinteractions"&gt;&lt;em&gt;Microinteractions: Designing with Details&lt;/em&gt; by Dan Saffer&lt;/a&gt;, 2013 — straight-forward examples on the small details that exist inside &amp;amp; around a product’s features&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#user-research"&gt;
  &lt;/a&gt;
  User research
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.goodreads.com/book/show/17236175-just-enough-research"&gt;&lt;em&gt;Just Enough Research&lt;/em&gt; by Erika Hall&lt;/a&gt;, 2013 — breaks down the huge topic of design research in a digestible, approachable, organized, and humorous way&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#publishers-and-distributors"&gt;
  &lt;/a&gt;
  Publishers and distributors
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://abookapart.com"&gt;A Book Apart&lt;/a&gt; — top of the class brief books for people who make websites&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chroniclebooks.com"&gt;Chronicle Books&lt;/a&gt; — innovative and design-y adult and children’s books, based in San Francisco&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://draw-down.com/"&gt;Draw Down&lt;/a&gt; — large catalog of small-press books and zines on graphic design, culture, criticism, art, and more&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://usshop.gestalten.com/"&gt;Gestalten&lt;/a&gt; — high-quality books on graphic design, art, and culture&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mitpress.mit.edu/"&gt;MIT Press&lt;/a&gt; — hundreds of new books published yearly from leading researchers on technology, art, and science&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://rosenfeldmedia.com/"&gt;Rosenfeld Media&lt;/a&gt; – user experience books, training, workshops, seminars, and experts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.smashingmagazine.com/books"&gt;Smashing Magazine&lt;/a&gt; — affordable, practical books from digital design practitioners&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#browser-features"&gt;
  &lt;/a&gt;
  Browser features
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#google-chrome-extensions-and-bookmarklets"&gt;
  &lt;/a&gt;
  Google Chrome extensions and bookmarklets
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://tachyons.io/xray/"&gt;Tachyons X-ray&lt;/a&gt; — debug &amp;amp; align objects to an 8 or 16px grid&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.typesample.com/"&gt;Type Sample&lt;/a&gt; — identify and sample webfonts — 3 samples for free, or unlimited samples for $5/year subscription. available as a bookmarklet or Chrome extension&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm?hl=en"&gt;WhatFont?&lt;/a&gt; — inspect a webfont’s name, family, weight, size, style, color, line height, and source (if hosted via Google Fonts or Typekit)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#google-chrome-devtools"&gt;
  &lt;/a&gt;
  Google Chrome DevTools
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/tools/chrome-devtools/inspect-styles/animations"&gt;Animation timeline &amp;amp; editing&lt;/a&gt; — powerful tools to inspect and modify CSS animations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/emulate-mobile-viewports"&gt;Device Mode&lt;/a&gt; — test responsiveness by using popular viewport sizes or creating your own presets&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/updates/2017/04/devtools-release-notes##screenshots"&gt;Full-page screenshot&lt;/a&gt; — it’s inside the Device Mode — no additional browser extension required!&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/tools/chrome-devtools/network-performance/"&gt;Network performance&lt;/a&gt; — analyze resource requests and emulate mobile experiences&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#brushes"&gt;
  &lt;/a&gt;
  Brushes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.kylebrush.com/"&gt;Kyle T. Webster&lt;/a&gt; — best Photoshop brushes for drawing and adding small texture (though they are not of much use without a pressure-sensitive tablet)&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.retrosupply.co/collections/brushes"&gt;RetroSupply&lt;/a&gt; — Photoshop and Illustrator brushes for multiple uses, including adding large (2000px) texture. recommended packs: Standard Issue Brush &amp;amp; Texture Bundle, Standard Issue Subtle Brush Kit, VectorFuzz&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.retrosupply.co/products/the-hand-lettering-toolbox?variant=22157366791"&gt;Shauna Lynn Panczyszyn’s "Hand Lettering Toolbox"&lt;/a&gt; — Photoshop brushes made exclusively for digital lettering, with &lt;a href="https://creativemarket.com/shaunaparmesan"&gt;more specific sets here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://patreon.com/sydweiler"&gt;Syd Weiler&lt;/a&gt; — gorgeous Photoshop brushes, niched mostly toward organic shapes and textures&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#colors-and-color-palettes"&gt;
  &lt;/a&gt;
  Colors and color palettes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://clrs.cc/"&gt;clrs.cc&lt;/a&gt; — really pretty default colors for prototyping&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://coolors.co/app"&gt;Coolors&lt;/a&gt; — interactive color palette generator&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://material.io/color/#!/?view.left=1&amp;amp;view.right=0"&gt;Google Material design colors&lt;/a&gt; — choose from all the hues in Google’s material design palette, see a tint and shade of each, and test against white &amp;amp; black text for accessibility&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://color.adobe.com/create/color-wheel/"&gt;Kuler&lt;/a&gt; — Adobe color palette resource&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.palettable.io/"&gt;Paletteable&lt;/a&gt; — interactive color palette generator&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://sipapp.io/"&gt;Sip&lt;/a&gt; — macOS and iOS colorpicker app, allows you to save custom palettes&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Category:Shades_of_color_templates"&gt;Wikipedia’s category for color shades&lt;/a&gt; — if you wanna nerd out&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#accessible-color-palettes"&gt;
  &lt;/a&gt;
  Accessible color palettes
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://randoma11y.com/"&gt;Randoma11y&lt;/a&gt; — accessibility-friendly random color generator for text &amp;amp; background combinations&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#accessibility-testing-tools"&gt;
  &lt;/a&gt;
  Accessibility testing tools
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://colororacle.org/"&gt;Color Oracle&lt;/a&gt; — open source macOS color blindness simulator&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.paciellogroup.com/resources/contrastanalyser/"&gt;Contrast Analyzer&lt;/a&gt; — open source macOS eye-dropper tool for text/bg accessibility testing, shows fail/AA Large/AA/AAA results&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://usecontrast.com/"&gt;Contrast&lt;/a&gt; — [paid] — minimal &amp;amp; gorgeous macOS menubar eye-dropper tool, shows fail/AA Large/AA/AAA results&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hexnaw.com/"&gt;Hex Naw&lt;/a&gt; — input up to 12 hex codes to test entire color systems for accessible contrast&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://webaim.org/resources/contrastchecker/"&gt;Online contrast checker&lt;/a&gt; — input text/bg hex codes for accessible contrast testing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/spectrum/ofclemegkcmilinpcimpjkfhjfgmhieb?hl=en"&gt;Spectrum&lt;/a&gt; — Google Chrome extension to instantly test web pages for different types of color vision deficiency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#directories-and-marketplaces"&gt;
  &lt;/a&gt;
  Directories and marketplaces
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt; — hundreds of free webfonts hosted via Google or self-hosted, downloadable via &lt;a href="https://github.com/google/fonts"&gt;GitHub repo&lt;/a&gt; with individual licenses&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://myfonts.com"&gt;MyFonts&lt;/a&gt; — thousands of fonts from all kinds of foundries, includes some trial fonts &amp;amp; free families. (good for searching and testing, but it’s better to buy through the foundries themselves!)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://typekit.com/"&gt;TypeKit&lt;/a&gt; — included with Adobe CC subscription, some fonts &amp;amp; families are only available for desktop &lt;em&gt;or&lt;/em&gt; web use. larger selection available for individual purchase through Typekit Marketplace&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.typenetwork.com/"&gt;Type Network&lt;/a&gt; — incredibly high-quality fonts by select independent foundries&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youworkforthem.com/fonts/"&gt;YouWorkForThem&lt;/a&gt; — thousands of fonts in the “original creative marketplace”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#individual-foundries"&gt;
  &lt;/a&gt;
  Individual foundries
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.a2-type.co.uk/"&gt;A2 Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://avondaletypeco.com/"&gt;Avondale Type Co.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://betatype.com/"&gt;Beta Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.boldmonday.com/"&gt;Bold Monday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.colophon-foundry.org/"&gt;Colophon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://commercialtype.com/"&gt;Commercial Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.daltonmaag.com/"&gt;Dalton Maag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dstype.com/"&gt;DSType&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fontbureau.typenetwork.com/"&gt;Font Bureau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fontfont.com/"&gt;FontFont&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fountaintype.com/"&gt;Fountain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.grillitype.com/"&gt;GrilliType&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.typography.com/"&gt;Hoefler &amp;amp; Co.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.houseind.com/"&gt;House Industries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hvdfonts.com/"&gt;HvD Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://justanotherfoundry.com/"&gt;Just Another Foundry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lineto.com/"&gt;Lineto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.marksimpson.com/"&gt;Mark Simpson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://okaytype.com/"&gt;Okay Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.p22.com/"&gt;P22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://processtypefoundry.com/fonts/"&gt;Process Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sudtipos.com/"&gt;Sudtipos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thedesignersfoundry.com"&gt;The Designer’s Foundry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.type-together.com/"&gt;TypeTogether&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typotheque.com/"&gt;Typotheque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vllg.com/"&gt;Village&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#icons-and-emoji"&gt;
  &lt;/a&gt;
  Icons and emoji
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.emojione.com/developers/"&gt;EmojiOne&lt;/a&gt; — [free &amp;amp; paid] — emoji set with free &amp;amp; premium licensing options available; downloadable as pngs, vectors, and font files&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://emojipedia.org/apple/"&gt;Emojipedia&lt;/a&gt; — [free] — every emoji, ever&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://material.io/icons/"&gt;Google Material Design icons&lt;/a&gt; — [free] — 900+ open source icons from Google’s gorgeous design language&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://thenounproject.com/"&gt;The Noun Project&lt;/a&gt; — [free &amp;amp; paid] — available for use with Creative Commons attribution or available to purchase without attribution for fair prices; best quality selection in one place&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://symbolset.com/"&gt;SymbolSet&lt;/a&gt; — [paid] — super high-quality icon fonts categorized by topic and style&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://applypixels.com/template/vector-emoji"&gt;Vector Emoji&lt;/a&gt; — [free] — iOS emoji faces recreated in vector as layered PSDs or Sketch files&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#inspiration-and-criticism-websites"&gt;
  &lt;/a&gt;
  Inspiration and criticism websites
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#brand-identity"&gt;
  &lt;/a&gt;
  Brand identity
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://bpando.org"&gt;BP &amp;amp; O&lt;/a&gt; — killer packaging and brand design gallery&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.underconsideration.com/brandnew"&gt;Brand New&lt;/a&gt; — brand identity case studies&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://shipcom.tumblr.com"&gt;Shipcom&lt;/a&gt; — collection of shipping, manufacturing, transport, and logistics logos&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#illustration-and-art"&gt;
  &lt;/a&gt;
  Illustration and art
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.booooooom.com"&gt;Boooooooom&lt;/a&gt; — art, illustration, design, photography interviews and features&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.jackywinter.com/all-artists"&gt;Jacky Winter&lt;/a&gt; — illustration collective&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#motion"&gt;
  &lt;/a&gt;
  Motion
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vimeo.com/channels/wineaftercoffee"&gt;Wine After Coffee&lt;/a&gt; — curated channel of the best motion graphics, animation, and video&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#print-layout-packaging-art-direction"&gt;
  &lt;/a&gt;
  Print, layout, packaging, art direction
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.underconsideration.com/artofthemenu"&gt;Art of the Menu&lt;/a&gt; — restaurant-specific print menu design case studies&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://designspiration.net"&gt;Designspiration&lt;/a&gt; — photography, print design, cool stuff gallery, Pinterest style&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.underconsideration.com/fpo"&gt;FPO&lt;/a&gt; — print design case studies&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.grafik.net"&gt;Grafik&lt;/a&gt; — cutting-edge and old school fringe aesthetic case studies&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.itsnicethat.com"&gt;It’s Nice That&lt;/a&gt; — creative inspiration worldwide&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://mindsparklemag.com"&gt;Mind Sparkle Mag&lt;/a&gt; — print, brand, interior, industrial design features&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.trendlist.org"&gt;Trendlist&lt;/a&gt; — graphic design trends for the designer’s designer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#typography"&gt;
  &lt;/a&gt;
  Typography
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.alphabettes.org"&gt;Alphabettes&lt;/a&gt; — commentary, research, and work showcases by women in type design&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fontsinuse.com"&gt;Fonts In Use&lt;/a&gt; — highest quality public archive of typography indexed by typeface, format, and industry&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://typographica.org"&gt;Typographica&lt;/a&gt; — reviews and commentary on type books and typefaces&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.typewolf.com"&gt;Type Wolf&lt;/a&gt; — curated examples of typography on the web with premium guides and resources&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#web-mobile-product"&gt;
  &lt;/a&gt;
  Web, mobile, product
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#ux-patterns-and-components"&gt;
  &lt;/a&gt;
  UX patterns and components
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://capptivate.co"&gt;Capptivate&lt;/a&gt; — mobile design patterns and components in video form&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://collectui.com"&gt;Collect UI&lt;/a&gt; — UI design components gallery populated from Dribbble posts&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://emptystat.es"&gt;Empty Stat.es&lt;/a&gt; — empty state designs&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://littlebigdetails.com"&gt;Little Big Details&lt;/a&gt; — delightful, thoughtful UX components that make a big difference&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://pttrns.com"&gt;PTTRNS&lt;/a&gt; — mobile design patterns and components&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://zurb.com/patterntap"&gt;Pattern Tap&lt;/a&gt; — website components gallery&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://uimovement.com/"&gt;UI Movement&lt;/a&gt; — UI design components gallery and newsletter, largely culled from Dribbble&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://unmatchedstyle.com"&gt;Unmatched Style&lt;/a&gt; — website design and interactive components gallery&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#visual-design"&gt;
  &lt;/a&gt;
  Visual design
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://httpster.net"&gt;HTTPSTER&lt;/a&gt; — website design gallery. sort by category and style&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.lapa.ninja/"&gt;Lapa&lt;/a&gt; — website design gallery. sort by category and color&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://onepagelove.com"&gt;One Page Love&lt;/a&gt; — website design gallery featuring only one-page websites&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.pages.xyz/"&gt;Pages.xyz&lt;/a&gt; — website design gallery for digital product marketing and ecommerce sites&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://reallygoodemails.com"&gt;Really Good Emails&lt;/a&gt; — email design gallery&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://siteinspire.com"&gt;Siteinspire&lt;/a&gt; — website design gallery with the tightest curation. sort by category, style, subject, or CMS. includes starred favorites&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sitesee.co"&gt;Site See&lt;/a&gt; — website design gallery. sort by category and color. includes custom curated collections&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.webcreme.com"&gt;Web Creme&lt;/a&gt; — website design gallery, updated sporadically, online since 2005(!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#macos-apps"&gt;
  &lt;/a&gt;
  macOS apps
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://kapeli.com/dash"&gt;Dash&lt;/a&gt; — [paid] — instant offline access to 150+ API documentation sets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#font-management"&gt;
  &lt;/a&gt;
  Font management
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://rightfont.com/"&gt;RightFont&lt;/a&gt; — [paid] — preview, sync, install, and manage fonts on your Mac or Dropbox/Google Drive&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#menubar-apps"&gt;
  &lt;/a&gt;
  Menubar apps
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://dustinsenos.com/littleIpsum"&gt;LittleIpsum&lt;/a&gt; — [free] — sgenerate lorem ipsum lightning fast (can automatically wrap in &lt;code&gt;p&lt;/code&gt; tags, too)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.cockos.com/licecap/"&gt;LICEcap&lt;/a&gt; — [free] — weirdest name, most straightforward and lightweight way to capture parts of your screen as a gif (also available for Windows)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mockups"&gt;
  &lt;/a&gt;
  Mockups
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://facebook.design/handskit/"&gt;Facebook Design&lt;/a&gt; — [free] — diverse hands holding mobile devices&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://graphicburger.com/mock-ups/"&gt;Graphicburger&lt;/a&gt; — [free] — physical product mockups &amp;amp; templates&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://graphicriver.net/"&gt;GraphicRiver&lt;/a&gt; — [paid] — any product mockup you could ever think of&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.pixeden.com"&gt;Pixeden&lt;/a&gt; — [free &amp;amp; paid] — physical product mockups &amp;amp; templates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prototyping-tools"&gt;
  &lt;/a&gt;
  Prototyping tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.adobe.com/products/experience-design.html"&gt;Adobe Experience Design&lt;/a&gt; — included with Adobe CC subscription, for creating wireframes and protoyping interactivity&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://atomic.io"&gt;Atomic&lt;/a&gt; — prototyping tool for mobile or desktop interactions or animations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://figma.com"&gt;Figma&lt;/a&gt; — the first real-time collaborative interface design tool&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://framerjs.com"&gt;Framer&lt;/a&gt; — prototyping tool built on framer.js for prototyping mobile and desktop apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.invisionapp.com/"&gt;InVision&lt;/a&gt; — collaborative click-through prototyping tool for web and mobile&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marvelapp.com/"&gt;Marvel&lt;/a&gt; — simple click-through prototyping tool for web and mobile apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://principleformac.com/"&gt;Principle&lt;/a&gt; — motion design prototyping tool for mobile and web applications&lt;/li&gt;
&lt;li&gt;👆 &lt;a href="https://www.cooper.com/prototyping-tools"&gt;More details on these apps and the differences between them @ cooper.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stock-graphics"&gt;
  &lt;/a&gt;
  Stock graphics
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://creativemarket.com/"&gt;CreativeMarket&lt;/a&gt; — huge marketplace for design assets of varying qualities (including fonts and stock photos), great for when you need to recreate a specific style or work in a particular niche&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.retrosupply.co/"&gt;RetroSupply&lt;/a&gt; — well-made and well-priced assets that skew toward retro/vintage&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youworkforthem.com/graphics/"&gt;YouWorkForThem&lt;/a&gt; — cool textures and imagery from the original online creative marketplace&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#stock-photography"&gt;
  &lt;/a&gt;
  Stock photography
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://deathtothestockphoto.com/"&gt;Death to the Stock Photo&lt;/a&gt; — [free &amp;amp; paid] — new sets emailed weekly, premium plans available for more photos and unlimited access&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://gratisography.com/"&gt;Gratisography&lt;/a&gt; — [free] — photos by one photographer requiring no attribution, most are weird but some are chill to save in a folder for later since they’re free&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://magdeleine.co/browse/"&gt;Magdeline&lt;/a&gt; — [free] — similar to unsplash, some are licensed in public domain, some require Creative Commons attribution&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://masterfile.com"&gt;Masterfile&lt;/a&gt; — [paid] — stock photos, a little higher quality than iStock. registered account includes unwatermarked hi-res comps&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://stocksy.com"&gt;Stocksy&lt;/a&gt; — [paid] — high quality, stylish lifestyle paid stock photos (watermarked comps)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt; — [free] — the first of the hip and gorgeous free with no strings attached stock photo sites&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.flickr.com/photos/wocintechchat/albums"&gt;Women of Color in Tech&lt;/a&gt; — [free] — photos of women in color in tech settings since every other stock photo site fails at this hardcore&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-testing-and-interactive-feedback-tools"&gt;
  &lt;/a&gt;
  User testing and interactive feedback tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://lookback.io"&gt;Lookback&lt;/a&gt; — users record their screen, face, voice, and touches while using your site/app/prototype/wireframe&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://usabilityhub.com"&gt;UsabilityHub&lt;/a&gt; — for quick 5-minute qualitative, navigation-based, or hot-spot based remote tests for static images or a series of images&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://usertesting.com"&gt;UserTesting&lt;/a&gt; — finds participants for you, runs a usability test, and records and stores videos of real people speaking their thoughts as they use your site/app/prototype/wireframe&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This list is provided by Skullface and other contributors &lt;a href="https://github.com/skullface/design-resources"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you found this list helpful. If you need any help please let me know in the comment section&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>design</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Make Money As A Developer By Selling APIs</title>
      <author>The Code Lounge</author>
      <pubDate>Thu, 19 Aug 2021 06:02:58 +0000</pubDate>
      <link>https://dev.to/codeloungedev/make-money-as-a-developer-by-selling-apis-251f</link>
      <guid>https://dev.to/codeloungedev/make-money-as-a-developer-by-selling-apis-251f</guid>
      <description>&lt;p&gt;Do you know you can make money by selling your APIs? Building and selling APIs is a great way to create a new source of passive income.&lt;/p&gt;

&lt;p&gt;Thus, in this article, you will see how to do that! First, you will create an API from scratch, and then you will sell it on &lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;RapidAPI&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-an-api"&gt;
  &lt;/a&gt;
  What's an API?
&lt;/h2&gt;

&lt;p&gt;Let's start by refreshing our memory on what an API is. The acronym &lt;strong&gt;API&lt;/strong&gt; stands for Application Programming Interface, and it's a way for two computer programs to communicate between them.&lt;/p&gt;

&lt;p&gt;In simple terms, it's a piece of software offering its services to other programs through a pre-defined set of functions. The other programs do not need to know about the API implementation because the functions describe how the API can be used. You communicate with APIs through requests, and there are four types of requests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt; requests - Get all the information&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt; requests - Create new data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT&lt;/code&gt; requests - Update existing data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE&lt;/code&gt; requests - Delete data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The API exposes different endpoints that are URLs to which you can make any of the four requests. &lt;/p&gt;

&lt;p&gt;Whenever you access a webpage on the internet, you are most likely interacting with an API. For example, when you access the newsfeed of a social media platform, you make a GET request to that platform's API to get the people's posts. Or, when you check your email or weather application on your phone, you interact with an API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A real-world analogy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's look at a real-world analogy by taking a flower shop as an example.&lt;/p&gt;

&lt;p&gt;You go to the flower shop to buy some flowers. You enter the shop and ask the florist for a custom bouquet. The florist has a list of all the flowers and decorations you can use. You choose the flowers, the decorations, and then you make an order. The florist prepares the custom bouquet you asked for, and once it's ready, it brings it to you. You buy the bouquet and leave the shop.&lt;/p&gt;

&lt;p&gt;Thus, you (&lt;strong&gt;client&lt;/strong&gt;) made a &lt;strong&gt;request&lt;/strong&gt; to the florist (&lt;strong&gt;API&lt;/strong&gt;) with custom &lt;strong&gt;data&lt;/strong&gt;. The florist went to the flower shop atelier (&lt;strong&gt;server/database&lt;/strong&gt;) and brought your bouquet back (&lt;strong&gt;API response&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why APIs?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The use of APIs speeds up the development time and process. It also simplifies the work of developers since they can use ready-made solutions. There is no need to re-invent the wheel and spend time building something that already exists.&lt;/p&gt;

&lt;p&gt;Let's take as an example Google Maps, which developers can embed in applications and websites. Rather than building a map each time you need one, you can simply use the one provided by Google. Can you see how much time and resources you save this way?&lt;/p&gt;

&lt;p&gt;Additionally, it opens ways to monetize your work. You can create an API and monetize its usage. For instance, the first 1000 requests might be free each month. However, after that, you can charge a sum like $0.001 for each additional request.&lt;/p&gt;

&lt;p&gt;Thus, by using APIs, you can save time, resources and also monetize your work!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-can-you-sell-the-api"&gt;
  &lt;/a&gt;
  How can you sell the API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;RapidAPI&lt;/a&gt; is the largest hub for APIs on the internet, so we will use it to monetize our API! What makes RapidAPI different is that they allow developers to sell access to their API. Thus, you can turn your APIs into a revenue stream and even turn them into passive income.&lt;/p&gt;

&lt;p&gt;Additionally, their platform allows developers to discover and consume existing APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does that mean?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You can use the RapidAPI platform to find and use APIs from all categories. For example, they have Translation, Flight Data, Text to Speech APIs and more. Thus, you can find any API you need for your application.&lt;/p&gt;

&lt;p&gt;Moreover, you can use multiple APIs without having to worry about different SDKs and API Keys. With RapidAPI, you can use multiple APIs with &lt;strong&gt;one&lt;/strong&gt; SDK, API Key and dashboard, all in one place!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udfebkEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627801868179/PDuO2G5Py.png" alt="Screenshot of RapidAPI webpage"&gt;&lt;/a&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, there is more! Using their platform, you can also &lt;strong&gt;add your APIs and sell access to them through pricing tiers&lt;/strong&gt;. RapidAPI created the infrastructure for you to monetize your API. You do not need to worry about doing any additional work to sell your API. You can simply upload your API, configure the tiers and let developers use it.&lt;/p&gt;

&lt;p&gt;In figure 2 below, you can see an example of Imgur, the online image hosting service, monetizing its API. They have four plans, each with its associated price. You can also see the extra charges for any additional requests and uploads.&lt;/p&gt;

&lt;p&gt;Thus, people can choose the plan suited to their needs and start using it. This way, you can transform your APIs into a source of a passive income!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZQ20C8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627803110670/iEev2ImWR.png" alt="Screenshot of Imgur selling their API on RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 2&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The best thing about RapidAPI is that anyone can sell their APIs. You do not need to be a corporation, a popular developer or anything like that. Anyone can do it!&lt;/p&gt;

&lt;p&gt;Thus, let's see how one can sell their API!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#build-and-deploy-the-api"&gt;
  &lt;/a&gt;
  Build and deploy the API
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to skip straight to the monetization part, you can do it &lt;a href="#setup-api-on-rapidapi"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, you will build a very simple application with Node.js and Express. The purpose of this article is to show how you can monetize your API, so you will create a dummy API with only one endpoint.&lt;/p&gt;

&lt;p&gt;For this example, you will use the Express application generator, which creates an application skeleton. To start the generator, run the following command in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx express-generator rapidapi-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The application only exposes one endpoint &lt;code&gt;/users&lt;/code&gt;, which returns a list of people with fake details. Thus, developers can use this simple API to test their applications with fake data before making it available to the public.&lt;/p&gt;

&lt;p&gt;Let's start by modifying the skeleton application. &lt;/p&gt;

&lt;p&gt;Open the project &lt;code&gt;rapidapi-example&lt;/code&gt;. After it opened, go to the &lt;code&gt;views&lt;/code&gt; folder and open &lt;code&gt;index.jade&lt;/code&gt;. Replace the content with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extends layout

block content
  h1= title
  p Welcome to #{title}
  p See the available list of 
    a(href='/users') users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to create a folder in the root directory. The new folder will contain the JSON file with the fake users. Thus, you can create the new folder and the file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir data
touch data/users.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, open the &lt;code&gt;users.js&lt;/code&gt; file and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;melissa.fleming@example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phone_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0740-304-475&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3655 manchester road&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;winchester&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;berkshire&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YB2 8EJ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;melissa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;last_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fleming&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;christoffer.christiansen@example.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phone_number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;05761325&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;location&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;street&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3391 pilevangen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;overby lyng&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;danmark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;88520&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;christoffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;last_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;christiansen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you create an array of persons and then export it. The reason for doing it is so you can import the data into your API.&lt;/p&gt;

&lt;p&gt;Thus, let's import the data into the API. First, go to the &lt;code&gt;routes&lt;/code&gt; folder and open the file &lt;code&gt;users.js&lt;/code&gt;. After that, import the array of persons by adding the following line under the &lt;code&gt;var router&lt;/code&gt; line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, replace the line &lt;code&gt;res.send('respond with a resource');&lt;/code&gt; with the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when people access the endpoint &lt;code&gt;/users&lt;/code&gt;, they get back the array of people in JSON format.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npm start&lt;/code&gt; in the terminal from the project's root directory to start and test the application. Then, after the application starts, go to &lt;code&gt;localhost:3000/users&lt;/code&gt; to test it!&lt;/p&gt;

&lt;p&gt;Figure 3 below illustrates what you should see!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoFGG1NV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627818881266/sMzp6u0wb.png" alt="Screenshot of the API"&gt;&lt;/a&gt;&lt;em&gt;Figure 3&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The final file, &lt;code&gt;users.js&lt;/code&gt;, should look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cm"&gt;/* GET users listing. */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the API has only one endpoint that returns an array of people with fake details. Therefore, before publishing the API on RapidAPI, you need to deploy it on a hosting service.&lt;/p&gt;

&lt;p&gt;You can see my repository on &lt;a href="https://github.com/catalinpit/rapidapi-example"&gt;Github&lt;/a&gt; for reference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-the-api"&gt;
  &lt;/a&gt;
  Deploy the API
&lt;/h3&gt;

&lt;p&gt;There are many platforms where you can deploy Node.js applications, but you will see how to deploy on Heroku in this tutorial.&lt;/p&gt;

&lt;p&gt;The article shows a high-level overview of deploying to Heroku. If you want an in-depth guide, I recommend checking the &lt;a href="https://devcenter.heroku.com/articles/git"&gt;official documentation&lt;/a&gt;. With that being said, let’s quickly deploy the newly created application!&lt;/p&gt;

&lt;p&gt;The first step is to log into Heroku and go to the &lt;a href="https://dashboard.heroku.com/apps"&gt;dashboard&lt;/a&gt;. From the dashboard, click on the button saying “New” and select “Create new app”. Figure 4 illustrates what you should see.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OqtygRFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627907757681/qawxUYKdr.png" alt="Heroku App Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 4&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The next step is to choose the &lt;strong&gt;app name&lt;/strong&gt; and the &lt;strong&gt;region&lt;/strong&gt; for your application. You can use the same details from figure 5 below, or you can use custom ones. Once you finish entering the details, click on the “Create app” button, as shown in figure 5.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZ0OdmlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627909361008/a8IMZAEMa.png" alt="Create Heroku Deployment"&gt;&lt;/a&gt;&lt;em&gt;Figure 5&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After clicking on the “Create app” button, you are taken to a new page where you can find the deployment details. You can deploy your application using the Heroku CLI or Github. Choose the method that fits your needs.&lt;/p&gt;

&lt;p&gt;However, in this tutorial, you will see how to deploy to Heroku using Github. On the "deploy" page, choose the "Github" method for deployment. After that, search for the repository name, and once you find it, click on the "Connect" button.&lt;/p&gt;

&lt;p&gt;See figure 6 for reference!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kz4uuvKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627909818278/0BHesP2s3.png" alt="How to find your Github repository on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 6&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before going further and deploying the application, you need to choose the buildpack for the API. A buildpack is a script Heroku runs when your application is deployed. It's used to configure your app environment and install the dependencies needed by the application. Since the API is built with Node.js, you will need to install the &lt;code&gt;Node.js&lt;/code&gt; buildpack.&lt;/p&gt;

&lt;p&gt;As shown in figure 7, go to the settings page and scroll until you see the "Buildpacks" section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gnoCcL-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627910465542/zRBIaV-oA.png" alt="The settings page on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 7&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Figure 8 illustrates what you should see when you scroll down the page. Now click on the "Add buildpack" button, as shown in figure 8 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWsZ29Iv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627918692972/cBEqReKnS.png" alt="Add buildpack button on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 8&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you click on the "Add buildpack" button, a new window appears from where you can select Node.js - see figure 9 below for reference. Click on it and then click on "Save changes".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FZzURVX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627919692811/5ZC5qaCSL.png" alt="Select buildpack on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 9&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, you are ready to deploy the application on Heroku. First of all, go back to the "deploy" section. If you cannot find it, it's the third option in figure 7.&lt;/p&gt;

&lt;p&gt;Once you are there, scroll to the bottom of the page to see the section "Manual deploy". At this point, you should see a button saying "Deploy Branch" to deploy your application. See figure 10 for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBeBWO6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628174361784/OYUTQocS_.png" alt="Deploy on Heroku"&gt;&lt;/a&gt;&lt;em&gt;Figure 10&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the button triggers the deployment, which should be done in a couple of seconds or minutes. Once the application is deployed, you should see a success message, as shown in figure 11.&lt;/p&gt;

&lt;p&gt;You can open the API in your browser by clicking on the "View" button!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ea5EPvMg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1627922288323/4xJXdngx81.png" alt="Heroku App Deployment Notification"&gt;&lt;/a&gt;&lt;em&gt;Figure 11&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, you are ready to publish and sell your API on the RapidAPI platform. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setup-api-on-rapidapi"&gt;
  &lt;/a&gt;
  Setup API on RapidAPI
&lt;/h2&gt;

&lt;p&gt;In this section, you will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a RapidAPI account&lt;/li&gt;
&lt;li&gt;upload the API to the platform&lt;/li&gt;
&lt;li&gt;set the pricing tiers&lt;/li&gt;
&lt;li&gt;release the API to the public&lt;/li&gt;
&lt;li&gt;wait for passive income&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus, let's start with the first step, which is about creating a RapidAPI account. To create an account, go to the &lt;a href="https://rapidapi.com/auth/sign-up?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;RapidAPI Hub&lt;/a&gt; and sign up with your preferred method. &lt;/p&gt;

&lt;p&gt;Follow the instructions, and once you signed up successfully, you should see the RapidAPI Hub homepage, as shown in figure 12.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rT7QqTUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628086661930/lQdz9Lncr.png" alt="RapidAPI Hub Homepage"&gt;&lt;/a&gt;&lt;em&gt;Figure 12&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On the homepage, you should see an option called &lt;strong&gt;My APIs&lt;/strong&gt; (highlighted in figure 12). Click on it, and it will take you to a new page where you can add your API.&lt;/p&gt;

&lt;p&gt;At this point, you should be on the same page as the one in figure 13 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ravhrq3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628087204038/KUY_odOvT.png" alt="RapidAPI Hub Add API"&gt;&lt;/a&gt;&lt;em&gt;Figure 13&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once on this page, click on the button saying &lt;strong&gt;Add New API&lt;/strong&gt;, which is highlighted in figure 13. The next step is to enter the details about your API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;API Name&lt;/strong&gt; - name your API&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Short Description&lt;/strong&gt; - describe what your API does, so people know its purpose&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Category&lt;/strong&gt; - select a category for the API&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How to specify the API&lt;/strong&gt; - you can select any option from those five options. However, in this tutorial, you will see the &lt;strong&gt;UI&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you enter all the details, click on the blue button saying &lt;strong&gt;Add API&lt;/strong&gt;. Clicking on the button takes you to the API dashboard, as shown in figure 14 below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNWXPe9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628088961364/xi2D9_6f3.png" alt="RapidAPI API Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 14&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The last steps of the process are to &lt;strong&gt;enter your base API URL&lt;/strong&gt;, &lt;strong&gt;add the endpoints&lt;/strong&gt;, and &lt;strong&gt;define the pricing tiers&lt;/strong&gt;. Thus, click on the second step, which is highlighted in figure 14 above.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-the-base-url"&gt;
  &lt;/a&gt;
  Add the base URL
&lt;/h4&gt;

&lt;p&gt;The next step is to add the base URL for your API. The base URL is your API's "homepage". For example, the base URL for the API built in this tutorial is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://rapidapi-example.herokuapp.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason why you need to add the base URL is that you will have various endpoints. Then, you will need to configure each endpoint individually in RapidAPI. For instance, the only endpoint for this API is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://rapidapi-example.herokuapp.com/users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving forward, add the base URL by clicking on the &lt;strong&gt;Configure&lt;/strong&gt; button, as shown in figure 15.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ghockrUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628089296179/YI4seYVfB.png" alt="RapidAPI Add Base URL for API"&gt;&lt;/a&gt;&lt;em&gt;Figure 15&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After clicking on the button, a new pop-up appears where you can enter the URL. Enter it and then save it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F633MRtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628089361247/3z-FwA9kF.png" alt="Add Base URL for API"&gt;&lt;/a&gt;&lt;em&gt;Figure 16&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Figure 17 illustrate what you should see on the screen. Now that you have the base URL set, you need to configure each endpoint individually. Click on the &lt;strong&gt;Endpoints&lt;/strong&gt; option, as shown in figure 17.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouFVpwtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628170587291/An1xMSyXN.png" alt="Create API endpoints"&gt;&lt;/a&gt;&lt;em&gt;Figure 17&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configure-the-rest-endpoint"&gt;
  &lt;/a&gt;
  Configure the REST endpoint
&lt;/h4&gt;

&lt;p&gt;On the new page, you can add either a REST endpoint or a GraphQL one. Since we have a REST API, click on the option &lt;strong&gt;Create REST Endpoint&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FsWWiE4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628088298828/LvQPTesi6.png" alt="RapidAPI API Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 18&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The next step is to configure the following for your endpoint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a name&lt;/li&gt;
&lt;li&gt;a description&lt;/li&gt;
&lt;li&gt;the HTTP method and the endpoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Figure 19 illustrates the details for the &lt;code&gt;/users&lt;/code&gt; endpoint. Observe how you only need to specify the endpoint &lt;code&gt;/users&lt;/code&gt; rather than entering the whole URL. The reason why this works is because you set the base URL previously.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOhA7nVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628090416260/okp6hqkYv.png" alt="Configure the API endpoint"&gt;&lt;/a&gt;&lt;em&gt;Figure 19&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, you can test your endpoint. Save the endpoint by clicking on any of the buttons highlighted in figure 20.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bYY7RRcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628091519787/6nMz3XGPo.png" alt="Test API endpoint in RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 20&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After saving the endpoint, the button &lt;strong&gt;Save To Test Endpoint&lt;/strong&gt; transforms to &lt;strong&gt;Test Endpoint&lt;/strong&gt;. Click on it to test and see if the endpoint returns the correct data.&lt;/p&gt;

&lt;p&gt;In figure 21, you can see a successful endpoint test - it returned the array of users. &lt;/p&gt;

&lt;p&gt;From here, you can set an example response to display on the API's page. The purpose of this example response is to help developers understand what kind of response they should get for an endpoint.&lt;/p&gt;

&lt;p&gt;To create an example response, click on the button saying &lt;strong&gt;Create example from response&lt;/strong&gt;. That's all you have to do!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTQa5YMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628093295369/9zA6SMvAw.png" alt="Test API endpoint in RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 21&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now you can save the endpoint and move onto the next step, which is about setting the pricing tiers. Yes, you are going to see the monetization part in this next step!&lt;/p&gt;

&lt;p&gt;To do that, click on the &lt;strong&gt;Plans &amp;amp; Pricing&lt;/strong&gt; option, as shown in figure 22.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90m6YlpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628094074680/CGbck-b1R.png" alt="RapidAPI Plans &amp;amp; Pricing"&gt;&lt;/a&gt;&lt;em&gt;Figure 22&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing-the-api"&gt;
  &lt;/a&gt;
  Pricing the API
&lt;/h3&gt;

&lt;p&gt;For in-depth information about pricing plans, check the &lt;a href="https://docs.rapidapi.com/docs/pricing-your-api-1?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;official guide&lt;/a&gt; from RapidAPI. It teaches you about advanced options such as custom quotas, rate limiting, and private subscription plans.&lt;/p&gt;

&lt;p&gt;In this article, you price the API based on the number of requests made by users. In figure 23, you can see the pricing page on RapidAPI. From here, you can monetize your API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VloP4OcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628094627916/8S4hz5Iwu.png" alt="Plans and pricing RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 23&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's start with the "BASIC" plan, which is the free plan. To configure the tier, click on the "Edit" button. Once you click on the edit button, a new page opens. On this page, you can configure your pricing tier as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Object Name&lt;/strong&gt; - here, you select based on what you want to charge the users. For instance, with this API, you charge people based on the number of requests they make.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quota Type&lt;/strong&gt; - quota type specifies the type of quota for users - that is, how many requests are free each day/month.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quota Limit&lt;/strong&gt; - with quota limit, you specify how many requests are free. In this example, people can make 500 free requests each day.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Limit Type&lt;/strong&gt; - here, you have a hard and soft limit. A hard limit means the users cannot make any additional requests after exceeding their quota limit. On the other hand, a soft limit means users will pay a specific fee after exceeding their quota limit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nV47Si_n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628094967761/rIQV_Lz8o.png" alt="Configure the free tier of the API"&gt;&lt;/a&gt;&lt;em&gt;Figure 24&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For this example, the free tier for the API will have 500 free requests each day. If the users exceed the quota limit, they will not be able to make any more requests.&lt;/p&gt;

&lt;p&gt;Figure 25 illustrates the configuration for this pricing tier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VBg1b1xN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628094986575/LQtSs-Izu.png" alt="RapidAPI Provider Dashboard Setting the Pricing"&gt;&lt;/a&gt;&lt;em&gt;Figure 25&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Similarly, let's add some paid plans as well. After all, we are here to make money, right? Click on the "Add Plan" button under the "pro" section, as shown in figure 26.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGuFSDkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628096295479/1EBBHtAYj1.png" alt="RapidAPI Provider Dashboard Public and Private Plans"&gt;&lt;/a&gt;&lt;em&gt;Figure 26&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A new page opens, where you can add the usual details about the tier. For the object name, select "Requests" again because you want to charge based on the number of requests made by users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wMjjjLnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628096801895/VI87VOuJT.png" alt="Setting the Pro Plan in RapidAPI Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 27&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After that, enter the following information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Quota Type&lt;/strong&gt; - choose the monthly quota type.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quota Limit&lt;/strong&gt; - enter 10000, so you allow people to make 10000 free requests each month.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Limit Type&lt;/strong&gt; - choose a soft limit for this endpoint and then charge $0.01 for any additional request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See figure 28 for reference. Now you are done with the pro plan as well. Before it takes effect, you need to scroll down at the bottom of the page and save it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtzfX5OC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628096812531/8xGwbEqB2.png" alt="Setting the Pro Plan in RapidAPI Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 28&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you save the plan, you can go back to the pricing dashboard and see the configured tiers. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3o3cAWKF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628098112732/efj1XwHZK.png" alt="Plans Preview in RapidAPI Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 29&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, you can click on the "Preview" button, highlighted in figure 29, to see the plans in more detail. See figure 30 for reference.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4TsJHp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628098357208/m9qkfmF-M.png" alt="Plans Preview in RapidAPI Dashboard"&gt;&lt;/a&gt;&lt;em&gt;Figure 30&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Configuring the other two tiers - &lt;strong&gt;Ultra&lt;/strong&gt; and &lt;strong&gt;Mega&lt;/strong&gt; - is similar to the two plans you already set up. Thus, as an exercise, create those two tiers yourself!&lt;/p&gt;

&lt;p&gt;The next and last step is to make the API public, so other developers can use it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publish-the-api"&gt;
  &lt;/a&gt;
  Publish the API
&lt;/h3&gt;

&lt;p&gt;Before anyone can use your API and pay for it, you need to make it available to the public. Thus, go to the &lt;strong&gt;Global Settings&lt;/strong&gt;, as shown in figure 31.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uaZwIBmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628176079324/ofCHNfIW4.png" alt="API Global Settings"&gt;&lt;/a&gt;&lt;em&gt;Figure 31&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you are there, switch the API visibility to "public". To do that, click on the switch highlighted in figure 31.&lt;/p&gt;

&lt;p&gt;After clicking on the switch, a new pop-up appears, which tells you that you are about to make your API public. Lastly, click on the blue button saying "Make API public", and you are done!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZYUhKx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628175907325/doiHnpmS6.png" alt="Publish API on RapidAPI"&gt;&lt;/a&gt;&lt;em&gt;Figure 32&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, you should see your API in the RapidAPI Hub. That means the API is public, and other developers can use it in their applications.&lt;/p&gt;

&lt;p&gt;Figure 33 illustrates the example API from this tutorial on the RapidAPI hub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rapidapi.com/hub?utm_source=Catalin-Pit&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wejm8eMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628175652124/Ls8Gzh4jN.png" alt="Making an API public on RapidAPi"&gt;&lt;/a&gt;&lt;em&gt;Figure 33&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Well done for selling your first API! In this article, you learnt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what an API is&lt;/li&gt;
&lt;li&gt;how to build and deploy a simple API&lt;/li&gt;
&lt;li&gt;how to sell access to it on RapidAPI hub&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there is a lot of potential in selling your APIs. You can turn your API into a new stream of income, and it can even be passive. You build the API once and sell it and then sell it multiple times.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TvRe8NLbF30"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Article originally published on &lt;a href="https://catalins.tech"&gt;catalins.tech&lt;/a&gt; - &lt;a href="https://catalins.tech/make-money-as-a-developer-by-selling-apis"&gt;how to make money as a developer by selling APIs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Save files with Apollo Server and React JS in 3 steps</title>
      <author>Nelson Adonis Hernandez</author>
      <pubDate>Thu, 19 Aug 2021 05:58:50 +0000</pubDate>
      <link>https://dev.to/nelsoncode/save-files-with-apollo-server-and-react-js-in-3-steps-58ad</link>
      <guid>https://dev.to/nelsoncode/save-files-with-apollo-server-and-react-js-in-3-steps-58ad</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1-backend-with-express-and-apollo-server"&gt;
  &lt;/a&gt;
  1. Backend with Express and Apollo Server
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-server-express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createWriteStream&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;typeDefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
  type Query {
    welcome: String
  }
  type Mutation {
    singleUpload(file: Upload): String
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveImagesWithStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mimetype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`images/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;stream&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createWriteStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;finish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mimetype&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;Mutation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;singleUpload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mimetype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createReadStream&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReadStream&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;saveImagesWithStream&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mimetype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloServer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;typeDefs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;typeDefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;resolvers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyMiddleware&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`http://localhost:4000&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphqlPath&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-setup-apollo-upload-client"&gt;
  &lt;/a&gt;
  2. Setup Apollo Upload Client
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./graphql/ApolloClient&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createUploadLink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apollo-upload-client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createUploadLink&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:4000/graphql&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ApolloProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ApolloProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-send-image-with-apollo-client"&gt;
  &lt;/a&gt;
  3. Send Image with Apollo Client
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gql&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@apollo/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UploadImages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setnewImage&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;uploadImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gql&lt;/span&gt;&lt;span class="s2"&gt;`
    mutation singleUpload($file: Upload) {
      singleUpload(file: $file)
    }
  `&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setnewImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;uploadImage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        SEND IMAGE
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UploadImages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/NelsonCode/save-files-express-react-graphql"&gt;Code of example in Github 🔗&lt;/a&gt;&lt;/p&gt;

</description>
      <category>apollo</category>
      <category>react</category>
      <category>expressjs</category>
      <category>nelsoncode</category>
    </item>
    <item>
      <title>How to create Middlewares with FastAPI</title>
      <author>Nelson Adonis Hernandez</author>
      <pubDate>Thu, 19 Aug 2021 05:46:36 +0000</pubDate>
      <link>https://dev.to/nelsoncode/how-to-create-middlewares-with-fastapi-1pn8</link>
      <guid>https://dev.to/nelsoncode/how-to-create-middlewares-with-fastapi-1pn8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#how-do-i-add-custom-middleware"&gt;
  &lt;/a&gt;
  ¿how do i add custom middleware?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;starlette.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;verify_user_agent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;call_next&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'User-Agent'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mobile"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;call_next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"we do not allow mobiles"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'ok'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#default-middlewares-in-fastapi"&gt;
  &lt;/a&gt;
  Default middlewares in FASTAPI
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;CORS
&lt;a href="https://fastapi.tiangolo.com/tutorial/cors/"&gt;https://fastapi.tiangolo.com/tutorial/cors/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GZIP
&lt;a href="https://fastapi.tiangolo.com/advanced/middleware/#gzipmiddleware"&gt;https://fastapi.tiangolo.com/advanced/middleware/#gzipmiddleware&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;HTTPSREDIRECT &lt;a href="https://fastapi.tiangolo.com/advanced/middleware/#httpsredirectmiddleware"&gt;https://fastapi.tiangolo.com/advanced/middleware/#httpsredirectmiddleware&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;TRUSTEDHOST
&lt;a href="https://fastapi.tiangolo.com/advanced/middleware/#trustedhostmiddleware"&gt;https://fastapi.tiangolo.com/advanced/middleware/#trustedhostmiddleware&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¿How to add CORS with FastAPI ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;starlette.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.middleware.wsgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CORSMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_credentials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;allow_methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;allow_headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'ok'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>fastapi</category>
      <category>middleware</category>
      <category>python</category>
      <category>nelsoncode</category>
    </item>
    <item>
      <title>[Part 3] Executing batch jobs in a multi-container environment using NodeJS and express.</title>
      <author>Mohammed Ali Chherawalla (MAC)</author>
      <pubDate>Thu, 19 Aug 2021 05:26:19 +0000</pubDate>
      <link>https://dev.to/alichherawalla/part-3-executing-batch-jobs-in-a-multi-container-environment-using-nodejs-and-express-dj6</link>
      <guid>https://dev.to/alichherawalla/part-3-executing-batch-jobs-in-a-multi-container-environment-using-nodejs-and-express-dj6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#add-support-for-subscriptions"&gt;
  &lt;/a&gt;
  Add support for subscriptions
&lt;/h2&gt;

&lt;p&gt;We will use &lt;code&gt;RedisPubSub&lt;/code&gt; from &lt;code&gt;graphql-redis-subscriptions&lt;/code&gt; to publish to subscription topics. We will publish a message when the user invokes the &lt;code&gt;scheduleJob&lt;/code&gt; mutation. A new CRON will be registered that will execute every minute. This is done so that "an automated" message is published to the notifications topic every minute.&lt;/p&gt;

&lt;p&gt;Let's start by installing all the dependencies. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;br&gt;
Install the necessary packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add graphql-subscriptions graphql-redis-subscriptions \
ioredis cors whatwg-fetch apollo-server-express \
http subscriptions-transport-ws@0.9.17
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the required packages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;graphql-subscriptions&lt;/li&gt;
&lt;li&gt;graphql-redis-subscriptions&lt;/li&gt;
&lt;li&gt;ioredis&lt;/li&gt;
&lt;li&gt;cors&lt;/li&gt;
&lt;li&gt;whatwg-fetch&lt;/li&gt;
&lt;li&gt;apollo-server-express&lt;/li&gt;
&lt;li&gt;http&lt;/li&gt;
&lt;li&gt;subscriptions-transport-ws&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch server/utils/pubsub.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the snippet below into the &lt;code&gt;pubsub.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { RedisPubSub } from 'graphql-redis-subscriptions';
import Redis from 'ioredis';

const options = {
  host: process.env.REDIS_DOMAIN,
  port: process.env.REDIS_PORT,
  connectTimeout: 10000,
  retryStrategy: times =&amp;gt;
    // reconnect after
    Math.min(times * 50, 2000)
};

export const pubsub = new RedisPubSub({
  publisher: new Redis(options),
  subscriber: new Redis(options)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a subscription topic. Add the following snippet in the &lt;code&gt;utils/constants.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const SUBSCRIPTION_TOPICS = {
  NOTIFICATIONS: 'notifications'
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create the subscription file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch server/gql/subscriptions.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the following snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { GraphQLNonNull, GraphQLObjectType, GraphQLString, GraphQLInt } from 'graphql';
import { pubsub } from '@utils/pubsub';
import { SUBSCRIPTION_TOPICS } from '@utils/constants';
export const SubscriptionRoot = new GraphQLObjectType({
  name: 'Subscription',
  fields: {
    notifications: {
      type: new GraphQLObjectType({
        name: 'ScheduleJobSubscription',
        fields: () =&amp;gt; ({
          message: {
            type: GraphQLNonNull(GraphQLString)
          },
          scheduleIn: {
            type: GraphQLNonNull(GraphQLInt)
          }
        })
      }),
      subscribe: (_, args) =&amp;gt; pubsub.asyncIterator(SUBSCRIPTION_TOPICS.NOTIFICATIONS)
    }
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make the following changes in the &lt;code&gt;server/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import cors from 'cors';
import { SubscriptionServer } from 'subscriptions-transport-ws/dist/server';
import { GraphQLSchema, execute, subscribe } from 'graphql';
import 'whatwg-fetch';
import { ApolloServer } from 'apollo-server-express';
import { createServer } from 'http';
import { SubscriptionRoot } from '@gql/subscriptions';
...
export const init = async () =&amp;gt; {
  ...
  const schema = new GraphQLSchema({ query: QueryRoot, mutation: MutationRoot, subscription: SubscriptionRoot });
  ...
  app.use(rTracer.expressMiddleware());
  app.use(cors()); // 
  ...
  if (!isTestEnv()) {
    const httpServer = createServer(app);
    const server = new ApolloServer({
      schema
    });
    await server.start();
    server.applyMiddleware({ app });
        // 2
    const subscriptionServer = SubscriptionServer.create(
      { schema, execute, subscribe },
      { server: httpServer, path: server.graphqlPath }
    );
    ['SIGINT', 'SIGTERM'].forEach(signal =&amp;gt; {
      process.on(signal, () =&amp;gt; subscriptionServer.close());
    });
    httpServer.listen(9000, () =&amp;gt; {
      console.log(`Server is now running on http://localhost:9000/graphql`);
    });
    initQueues();
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Handle CORS error thrown by &lt;code&gt;studio.apollographql&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a subscription server that will expose a websocket on the same pathname as the mutations and queries. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To test your subscriptions go to &lt;a href="https://studio.apollographql.com/sandbox/explorer"&gt;&lt;code&gt;https://studio.apollographql.com/sandbox/explorer&lt;/code&gt;&lt;/a&gt;. Add &lt;a href="http://localhost:9000/graphql"&gt;&lt;code&gt;http://localhost:9000/graphql&lt;/code&gt;&lt;/a&gt; in the top left URL bar. Click &lt;strong&gt;documentation&lt;/strong&gt; tab on the top left pane header and filter by subscription → notifications and you will see the newly added subscription.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_sicPAX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pptsitp7wqp9k1km7ml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sicPAX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1pptsitp7wqp9k1km7ml.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vcd0x2KE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h1kgxpbwhid53h8wmkw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vcd0x2KE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4h1kgxpbwhid53h8wmkw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M4usE42Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dud64wgjqrcvtk4muiwn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4usE42Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dud64wgjqrcvtk4muiwn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Copy the snippet below in the &lt;code&gt;server/utils/queues.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import { pubsub } from '@utils/pubsub';
import { SUBSCRIPTION_TOPICS } from '@utils/constants';
...

...
const CRON_EXPRESSIONS = {
  MIDNIGHT: '0 0 * * *',
  EVERY_MINUTE: '* * * * *'
};

export const QUEUE_NAMES = {
  ...,
  EVERY_MINUTE_CRON: 'everyMinuteCron'
};

export const QUEUE_PROCESSORS = {
  ...,
  [QUEUE_NAMES.EVERY_MINUTE_CRON]: (job, done) =&amp;gt; {
    console.log(`publishing to ${SUBSCRIPTION_TOPICS.NOTIFICATIONS}`);
    pubsub.publish(SUBSCRIPTION_TOPICS.NOTIFICATIONS, {
      notifications: {
        message: 'This message is from the CRON',
        scheduleIn: 0
      }
    });
    done();
  }
};
export const initQueues = () =&amp;gt; {
  console.log(' init queues');
  ...
  queues[QUEUE_NAMES.EVERY_MINUTE_CRON].add({}, { repeat: { cron: CRON_EXPRESSIONS.EVERY_MINUTE } });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add support to publish to the newly created &lt;code&gt;notifications&lt;/code&gt; topic when the &lt;code&gt;scheduleJob&lt;/code&gt;mutation is invoked. &lt;/p&gt;

&lt;p&gt;Copy the snippet below in the &lt;code&gt;server/gql/custom/scheduleJobMutation.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { pubsub } from '@utils/pubsub';
import { SUBSCRIPTION_TOPICS } from '@utils/constants';
...

  async resolve(source, args, context, info) {
    ...
    ...
    .then(job =&amp;gt; {
        console.log(`${moment()}::Job with id: ${job.id} scheduled in ${args.scheduleIn} milliseconds`);
        pubsub.publish(SUBSCRIPTION_TOPICS.NOTIFICATIONS, {
            notifications: args
        })
        return { success: true };
      })
      ...
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a CRON that runs every minutes and publishes a message to the &lt;code&gt;notifications&lt;/code&gt; topic. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Time to test out your subscription! Go to &lt;a href="https://studio.apollographql.com/sandbox/explorer"&gt;&lt;code&gt;https://studio.apollographql.com/sandbox/explorer&lt;/code&gt;&lt;/a&gt;. Paste the snippet below in the left top pane&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;subscription Notifications {
  notifications {
    message
    scheduleIn
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5is1OwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ghe6y995qj0mpodx6di.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5is1OwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ghe6y995qj0mpodx6di.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit the &lt;strong&gt;Play&lt;/strong&gt; button and you will see a subscription tab pop-up in the bottom right&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--agTgJBUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oll525vvj49mpjuudyji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--agTgJBUc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oll525vvj49mpjuudyji.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste the snippet below in the left pane&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mutation ScheduleJob($scheduleJobScheduleIn: Int!, $scheduleJobMessage: String!) {
  scheduleJob(scheduleIn: $scheduleJobScheduleIn, message: $scheduleJobMessage) {
    success
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pv9HzrLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l023bx83fc8i5joneo6i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pv9HzrLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l023bx83fc8i5joneo6i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste the snippet below in the variables pane&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "scheduleJobScheduleIn": 100,
  "scheduleJobMessage": "Scheduled job message"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9bLCDKMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo5q3rr3wwi17aj5ujlh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9bLCDKMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo5q3rr3wwi17aj5ujlh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;ScheduleJob&lt;/code&gt; and hit the play button&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HeBrbt_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt8dj0q78mak6xco4uc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HeBrbt_---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt8dj0q78mak6xco4uc2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very soon you'll see another message come up in the subscriptions tab because of the &lt;code&gt;EVERY_MINUTE&lt;/code&gt; CRON&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq72-sCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckkbg4r58qkzdmlshu1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq72-sCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ckkbg4r58qkzdmlshu1f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Commit your code using the following git commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m 'Add support for graphql redis subcriptions!'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#where-to-go-from%C2%A0here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h3&gt;

&lt;p&gt;You can find the complete code here: &lt;a href="https://github.com/wednesday-solutions/node-express-batch-jobs"&gt;https://github.com/wednesday-solutions/node-express-batch-jobs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would recommend going through the articles below&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/blog/backend/subscriptions/graphql-subscriptions-with-redis-pub-sub/"&gt;https://www.apollographql.com/blog/backend/subscriptions/graphql-subscriptions-with-redis-pub-sub/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/docs/apollo-server/data/subscriptions/"&gt;https://www.apollographql.com/docs/apollo-server/data/subscriptions/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this series peaked your interest please stay tuned for the next tutorial in which we will write a CD pipeline to deploy this application using ECS. &lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading this series on how to create container-aware CRONS, scheduled jobs, and GraphQL Subscriptions. If you have any questions or comments, please join the forum discussion below.&lt;/p&gt;

&lt;p&gt;➤This blog was originally posted on &lt;a href="https://wednesday.is"&gt;https://wednesday.is&lt;/a&gt; To know more about what it’s like to work with Wednesday follow us on: &lt;a href="https://www.instagram.com/wednesday.sol/"&gt;Instagram&lt;/a&gt;|&lt;a href="https://twitter.com/wednesdaysol"&gt;Twitter&lt;/a&gt;|&lt;a href="https://www.linkedin.com/company/wednesday-solutions"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>redis</category>
      <category>javascript</category>
      <category>docker</category>
      <category>node</category>
    </item>
    <item>
      <title>[Part 2] Executing batch jobs in a multi-container environment using NodeJS and express.</title>
      <author>Mohammed Ali Chherawalla (MAC)</author>
      <pubDate>Thu, 19 Aug 2021 05:19:30 +0000</pubDate>
      <link>https://dev.to/alichherawalla/part-2-executing-batch-jobs-in-a-multi-container-environment-using-nodejs-and-express-10j6</link>
      <guid>https://dev.to/alichherawalla/part-2-executing-batch-jobs-in-a-multi-container-environment-using-nodejs-and-express-10j6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#create-a-cron-job-to-be-executed-at-12-am-every-day"&gt;
  &lt;/a&gt;
  Create a CRON job to be executed at 12 am every day
&lt;/h2&gt;

&lt;p&gt;In this step, we will register a CRON job that executes at 12 am every day. This CRON job will simply console log the time of execution and a static message. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add a new &lt;code&gt;QUEUE_NAME&lt;/code&gt; called &lt;strong&gt;MIDNIGHT_CRON&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const QUEUE_NAMES = {
  SCHEDULE_JOB: 'scheduleJob',
  MIDNIGHT_CRON: 'midnightCron'
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add a new processor for &lt;code&gt;CRON&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const CRON_EXPRESSIONS = {
  MIDNIGHT: '0 0 * * *'
};

export const QUEUE_PROCESSORS = {
   ...,
  [QUEUE_NAMES.MIDNIGHT_CRON]: (job, done) =&amp;gt; {
        console.log({ job, done });
    console.log(`${moment()}::The MIDNIGHT_CRON is being executed at 12:00am`);
    done();
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Register the CRON job in the &lt;strong&gt;server/utils/queue.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const initQueues = () =&amp;gt; {
  ...
  queues[QUEUE_NAMES.MIDNIGHT_CRON].add({}, { repeat: { cron: CRON_EXPRESSIONS.MIDNIGHT } });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will invoke the &lt;code&gt;initQueues&lt;/code&gt; method from the &lt;code&gt;server/index.js&lt;/code&gt; to initialize the queues on startup. After initializing the queues we will add a CRON job to be executed at 12 am.&lt;/p&gt;

&lt;p&gt;You should see the below logs at 12 am! Feel free to update the regex and execute the CRON sooner than 12 am to test how it works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6s1bIeQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljl9h7zoje2hgmlv72c4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6s1bIeQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljl9h7zoje2hgmlv72c4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Commit your code using the following git commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m 'Add support to run a CRON job at 12 AM everyday'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;You now have the ability to set up CRON jobs in a multi-container environment.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading this article as much as I enjoyed writing it. If this peaked your interest stay tuned for the next article in the series where I will take you through how to write GraphQL subscriptions in a multi-container environment using  &lt;code&gt;graphql-redis-subscriptions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, please join the forum discussion below.&lt;/p&gt;

&lt;p&gt;➤This blog was originally posted on &lt;a href="https://wednesday.is"&gt;https://wednesday.is&lt;/a&gt; To know more about what it’s like to work with Wednesday follow us on: &lt;a href="https://www.instagram.com/wednesday.sol/"&gt;Instagram&lt;/a&gt;|&lt;a href="https://twitter.com/wednesdaysol"&gt;Twitter&lt;/a&gt;|&lt;a href="https://www.linkedin.com/company/wednesday-solutions"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>redis</category>
      <category>javascript</category>
      <category>docker</category>
    </item>
    <item>
      <title>Did someone say AWS Lambda?</title>
      <author>Mursal Furqan</author>
      <pubDate>Thu, 19 Aug 2021 05:16:37 +0000</pubDate>
      <link>https://dev.to/mursalfk/did-someone-say-aws-lambda-35m5</link>
      <guid>https://dev.to/mursalfk/did-someone-say-aws-lambda-35m5</guid>
      <description>&lt;p&gt;As much as we love programming, there is always a major road block, and that is, we can't find a way to scale the implementation in production. Well, good for us, AWS solved this for us 🎉&lt;br&gt;
Yes, you heard that right. AWS solved this problem by introducing AWS Lambda. Now for those who are pythoneers, would be fimiliar with Lambda Functions, but what's cool about AWS Lambda, iss.... of wait! First, let's start our way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-lambda"&gt;
  &lt;/a&gt;
  What is AWS LAMBDA?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If someone say "We are going SERVERLESS"?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just one word: "AWS LAMBDA"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZN1Ld8qj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmus1i4wr370k9rk3sm6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZN1Ld8qj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmus1i4wr370k9rk3sm6.jpg" alt="AWS Lambda Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda is an Amazon Web Services (AWS) service that uses the Function as a Service (FaaS) architecture. That implies you, as a developer, are solely responsible for providing the function (i.e., code) that will be performed once the lambda function has completed. AWS handles everything else (servers, infrastructure, and scalability).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-no-servers-in-serverless"&gt;
  &lt;/a&gt;
  So no servers in Serverless?
&lt;/h2&gt;

&lt;p&gt;Of course, there are servers, but you don't have to worry about providing and managing them as a developer. As a result, instead of tinkering with servers and worrying about whether they'll survive the next wave of consumers, you can focus on executing your business logic and addressing problems. Okay, however this appears to be rather costly. That's not the case! You only pay for the computing time you use using AWS Lambda.&lt;/p&gt;

&lt;p&gt;What that means is that a lambda function can take up to 15 minutes to execute, but if your function only takes a second to execute, you will only be charged for that one second. The best thing is that you don't have to pay up front.&lt;/p&gt;

&lt;p&gt;The free AWS Lambda tier offers ONE MILLION FREE REQUESTS PER MONTH. Yeah, not joking actually. In other words, you don't have to pay until your service becomes rather successful; one million requests per month is a substantial number. And when you exceed a million requests per month, you just pay $0.20 per million requests. (As an exercise for the reader, calculate how many requests you'd need to process until the cost of your serverless services exceeds the cost of a Starbucks cup of coffee.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cool-how-do-i-do-this"&gt;
  &lt;/a&gt;
  Cool! How do I do this?
&lt;/h2&gt;

&lt;p&gt;There are a number of programming languages supported in AWS Lambda:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ecfXnh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnnfrrjordmw965tdl7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ecfXnh0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnnfrrjordmw965tdl7s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;.NET, Go, Java, Node.js, Python, Ruby - a little something for everyone.&lt;/p&gt;

&lt;p&gt;Note: NO JQUERY Please!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#noted-how-do-i-use-my-lambda-function"&gt;
  &lt;/a&gt;
  Noted. How do I use my lambda function?
&lt;/h2&gt;

&lt;p&gt;A lambda function can be triggered by quite a lot of sources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wipmgeUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg8kziepz76zf5dvgvtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wipmgeUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg8kziepz76zf5dvgvtl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Honorable mentions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS Gateway can trigger your lambda function by an HTTP request (useful when you want to create an API&lt;/li&gt;
&lt;li&gt;AWS IoT - you can literally have a "push to prod" button on your desk&lt;/li&gt;
&lt;li&gt;AWS S3 - a lambda function can be triggered by uploading a file to an S3 bucket (if you don't know what a bucket is, check this post out.)&lt;/li&gt;
&lt;li&gt;AWS DynamoDB - you can trigger a lambda function by for instance adding an item to your DynamoDB table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's an insanely powerful paradigm, allowing you to build large processes and business logic out of serverless functions while reducing expenses to a minimum.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>ReactJs Roadmap🗺 for beginners - 2021</title>
      <author>Suhail Shaikh</author>
      <pubDate>Thu, 19 Aug 2021 04:44:24 +0000</pubDate>
      <link>https://dev.to/suhailzone/reactjs-roadmap-for-beginners-2021-14en</link>
      <guid>https://dev.to/suhailzone/reactjs-roadmap-for-beginners-2021-14en</guid>
      <description>&lt;p&gt;Hello, In this blog I am gonna walk you through the roadmap for learning React, I've broken down the concept of React into small parts as modules so that It will be easier to understand. This is only for the beginners, Soon I'll publish another blog on advance roadmap of React and also this is just a roadmap(learning path), For learning these concepts I've added the official documentation links(for most of the concepts) where you can go and learn, One interesting thing is that I have also added what you gonna achieve by learning those concepts🎯.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites📝:
&lt;/h3&gt;

&lt;p&gt;I assume that you have some basic understanding of the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Basics of HTML(such as HTML elements, form, table, div and list tags with their attributes).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basics of CSS(such as styling the html elements, CSS selectors and box model).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basics of JavaScript(such as variables, conditional statements, loops, data types, DOM manipulation and event triggering).  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#so-before-jumping-into-the-roadmap-lets-see-first-what-is-react"&gt;
  &lt;/a&gt;
  So Before jumping into the roadmap let's see first, what is React?
&lt;/h3&gt;

&lt;p&gt;React is one of the most popular JavaScript library for designing rich and interactive User Interfaces. React's component-based functionality lets you make reusable components with which you can scale your application effectively. Using React the views of your app makes your code more predictable and easier to debug. &lt;/p&gt;

&lt;p&gt;Below is the mind-map of learning React. I have divided the learning structure into modules and then further into concepts for easy understating the path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59KAnPTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gox9e6qe492nbd9xe444.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59KAnPTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gox9e6qe492nbd9xe444.png" alt="roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The roadmap is divided into three modules. Core, Basics and Styling the UI. I've added the numbers against each module for better understanding. I prefer not to skip any module as each module is mandatory for understanding React. I've designed this according to my understanding for easy learning, this differs from person to person.  &lt;/p&gt;

&lt;p&gt;So let's begin!🚀 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-core"&gt;
  &lt;/a&gt;
  1. Core
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Usuh1VCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwo5dpo40zwsxvlzl1ez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Usuh1VCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwo5dpo40zwsxvlzl1ez.png" alt="core-roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;Setting up react project&lt;/a&gt;&lt;/strong&gt; - You can set up a react project by executing some commands, on completing this it gives a React app boilerplate, you can then run you react app to see the initial UI of React. By completing this step you should be familiar with the concept of creating a new react project locally using CLI(Command-line Interface).&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.geeksforgeeks.org/reactjs-lifecycle-components/"&gt;Execution flow of React&lt;/a&gt;&lt;/strong&gt; - It is important for a React developer to understand the code flow of a react app. Also understanding the project structure. By completing this step you should be familiar with React app folder structure, Also how react app runs in the browser, what is virtual DOM and how DOM is manipulated in React.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;Using JSX&lt;/a&gt;&lt;/strong&gt; - JSX looks like HTML, It is based on XML, JSX transformed into HTML tags during runtime. By learning JSX concept you should be having a good understanding of JSX, Similarities between HTML and JSX and Advantages of JSX over HTML element tags.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://medium.com/wesionary-team/types-of-react-components-you-should-know-251cceacd8ac"&gt;Component types&lt;/a&gt;&lt;/strong&gt; - It is important to have knowledge of Component, their types and component life-cycle. By learning the Component concept you should have a good understanding of different component types and which to use when.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/hooks-state.html"&gt;Handling states/useState hook&lt;/a&gt;&lt;/strong&gt; - State is an object within which we can store, read and update data in a component. In the functional component we can use 'useState' hook to manage state locally. By learning the React state you should have a good understanding of how a state works, using the useState hook,  how to show state value in JSX and how to update the state. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"&gt;Handling functions&lt;/a&gt;&lt;/strong&gt; - Function in react is same as javascript functions, we can create our own functions to perform specific tasks. By learning about functions you should be able to create functions in react component and calling the function.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/handling-events.html"&gt;Handling JSX events&lt;/a&gt;&lt;/strong&gt; - JSX events allows us to handle events which are react's element(JSX) specific. By learning about JSX events you should have a good understanding of different JSX events(such as onClick, onChange, etc), and their use. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules"&gt;Modules&lt;/a&gt;&lt;/strong&gt; - Modules lets you write sharable code so that you can reuse it by importing. By learning about modules you should be able to understand the concept of modules such as importing and exporting modules, public and private properties and function.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://blog.logrocket.com/building-reusable-ui-components-with-react-hooks/"&gt;Components nesting and reusability&lt;/a&gt;&lt;/strong&gt; - Components are an independent and reusable block of code which returns JSX and can also perform some specific tasks. By learning component reusability you should be able to understand component nesting, also root, parent and child component, and component tree. you should also be having a good knowledge of creating component in such a way that they can be used in multiple places. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;Props&lt;/a&gt;&lt;/strong&gt; - Using Props we can pass data from one component to another. By learning Props you must be familiar with passing the props from the parent component to the child component and then receiving and using them in the child component.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/conditional-rendering.html"&gt;Conditional rendering&lt;/a&gt;&lt;/strong&gt; - Conditional rendering lets you render JSX conditionally just like we use if else condition in javascript. By learning about conditional rendering you should be able to display UI conditionally, and understanding the ternary operator used in React JSX.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-basics"&gt;
  &lt;/a&gt;
  2. Basics
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n6fvHlLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjtevi6fcinqcrynwrvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n6fvHlLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qjtevi6fcinqcrynwrvi.png" alt="basic-roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://blog.logrocket.com/debug-react-applications-with-the-new-react-devtools/"&gt;Debugging and logging&lt;/a&gt;&lt;/strong&gt; - React dev tools extension helps you monitor react state and components within the browsers window. By learning this step you should be able to debug react app.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/faq-ajax.html"&gt;Fetching &amp;amp; displaying data from external API&lt;/a&gt;&lt;/strong&gt; - This lets you perform REST API methods using the built-in method of javascript. By learning this step you should be having a good understanding of javascript's built-in fetch function to fetch the data from an endpoint, storing the data and displaying accordingly on the UI. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.npmjs.com/package/axios"&gt;Understanding and using Axios package&lt;/a&gt;&lt;/strong&gt; - Axios is one of the popular library for making HTTP requests to external API endpoints effectively. By learning axios you should be familiar with fetching async data from an endpoint using axios and should also be familiar with other REST API methods using axios.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;UseEffect hook&lt;/a&gt;&lt;/strong&gt; - UseEffect hook lets you decide what to perform after rendering a component, Also affecting the component based on the dependency provided to it. By learning the UseEffect hook you should be familiar with the side effect of the component rendering with dependency.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/context.html"&gt;Context API/useContext hook&lt;/a&gt;&lt;/strong&gt; - Context API is React's built-in functionality to performs state management without using any external library. By learning about Context API you should be having a good understanding of global state and state management, consumer and provider, useContext and UserReducer hook.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://programmingwithmosh.com/react/localstorage-react/"&gt;Browser's local storage&lt;/a&gt;&lt;/strong&gt; - Local storage lets you store the data locally within the browser's storage. By learning this step you should have a good understanding of browser local storage, reading and writing to and from local storage.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;React router&lt;/a&gt;&lt;/strong&gt; - React router DOM is one of the popular external library for navigating your react app, It also lets your UI in sync with the URL. By learning about React router DOM library you should be familiar with navigating and routing your react application and switching the UI as per the route.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-styling-ui"&gt;
  &lt;/a&gt;
  3. Styling UI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7EOh-Arm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drja6s5pqbu4wjfow4po.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7EOh-Arm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drja6s5pqbu4wjfow4po.png" alt="styling-ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"&gt;Grid layout&lt;/a&gt;&lt;/strong&gt; - CSS Grid Layout concept offers a grid-based layout system for designing the UI on the basis of rows and columns. By learning Grid layout you should be having a good understanding of placing UI elements as a cell in the grid layout.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox"&gt;Flexbox&lt;/a&gt;&lt;/strong&gt; - Flexbox Layout lets you build flexible and responsive UI without using CSS's positioning and float. By learning flexbox you should be familiar with concept of container, and aligning and justifying elements. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://create-react-app.dev/docs/adding-a-sass-stylesheet/"&gt;SCSS&lt;/a&gt;&lt;/strong&gt; - To use scss you have to install node-sass package using npm. It's a CSS preprocessor. By learning SCSS you should be familiar with importing other scss files, declaring and using variables, nesting and a lot more things.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading! 👍 I hope you understood each and everything. If you have any doubt or you think I missed something let me know in the comments section.📑&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>React VS Vue | What about them?</title>
      <author>Atif Aiman</author>
      <pubDate>Thu, 19 Aug 2021 03:51:59 +0000</pubDate>
      <link>https://dev.to/alserembani94/react-vs-vue-what-about-them-2o</link>
      <guid>https://dev.to/alserembani94/react-vs-vue-what-about-them-2o</guid>
      <description>&lt;p&gt;There are a lot of Javascript frontend framework in market right now, in which their hype to their own. The famous 3 - Angular, React and Vue (Svelte is still in the race as well), and also honorable mention for MeteorJS, Ionic. Of course there are higher frontend framework as well such as NestJS, NextJS and NuxtJS, but let's leave them for another discussion, shall we?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The purpose of this writing is not comparing both great framework for modern web app, but to highlight both features&lt;/strong&gt; that gives the great developer experience, and where they can interchange the knowledge between both, so you won't have to start from scratch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I have professional experience in React for more than two years (and still counting upon me writing this article), and I just involved in Vue in my new project, so the comparison might not be fair towards Vue, so I hope I can do the best I can for Vue as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another disclaimer:&lt;/strong&gt; This is not a proper documentation for both frameworks, so if you look on how to use the framework, I recommend you to go to the documentation for the respective framework.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-similarity"&gt;
  &lt;/a&gt;
  The Similarity
&lt;/h2&gt;

&lt;p&gt;Both are javascript framework. I know right 😜?&lt;/p&gt;

&lt;p&gt;Just kidding! Let us see the similarity offered by both before highlighting features those are unique to the respective frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#virtual-dom"&gt;
  &lt;/a&gt;
  Virtual DOM
&lt;/h3&gt;

&lt;p&gt;Document Object Model (DOM) is an object that defines the document structure. To put it the easy way, the way you arrange all HTML elements. To optimize the DOM rendering when there is a change, both utilizes virtual DOM, where the DOM is structured right before the page with changes displayed to the user, so user won't have to experience a glitch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#event-changes"&gt;
  &lt;/a&gt;
  Event changes
&lt;/h3&gt;

&lt;p&gt;Both relies on event changes, where state plays an important role in triggering events such as mounts, renders, and updates (known as lifecycles). Differs with traditional JQuery approach, where you have to trigger the event on your own, React and Vue helps developer to encapsulate everything into an event, so the rerender can be triggered when there is state changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentbased"&gt;
  &lt;/a&gt;
  Component-based
&lt;/h3&gt;

&lt;p&gt;To be able to produce components are what makes the framework the choice of developers, since it can save a lot of work, holding to the Don't Repeat Yourself (DRY) principle.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#jsx"&gt;
  &lt;/a&gt;
  JSX
&lt;/h3&gt;

&lt;p&gt;When you mention React, &lt;strong&gt;JSX&lt;/strong&gt; will always come into play. Though you feel like you are writing HTML, you are actually using JSX, where Javascript will parse it in object later on and React will run the function to convert in into something like &lt;code&gt;document.getElementByElement&lt;/code&gt;. That is why, inside JSX, you have to use &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; since the word &lt;code&gt;class&lt;/code&gt; is reserved in Javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#declaratives"&gt;
  &lt;/a&gt;
  Declaratives
&lt;/h3&gt;

&lt;p&gt;Since we composite everything under single function for a single component, it is easy to use the declared variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To trigger all javascript inside JSX, you only need to open curly braces, and you can do anything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Adam&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increaseAge&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase Age&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hooks"&gt;
  &lt;/a&gt;
  Hooks
&lt;/h3&gt;

&lt;p&gt;Don't get me wrong. Vue also has its own hook. However, React really has its strong suit with their hook implementation (given that you need to use functional pattern to use it). Before this, React uses Higher Order Component (HOC), which can also be implemented for both class component and functional component. To make it more verbose, React introduces hooks, which later introduce more verbose pattern and developer is able to split their code based on functionality, and not lifecycle. The most basic hook, &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; are the most used hooks in React ecosystem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello console!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#states-and-props"&gt;
  &lt;/a&gt;
  States and props
&lt;/h3&gt;

&lt;p&gt;What I love about React is how you can actually optimize the state and props. From &lt;code&gt;useState&lt;/code&gt;, you can optimize by memoize it using &lt;code&gt;useMemo&lt;/code&gt;, then if you need to elevate and group bunch of states, you can use &lt;code&gt;useReducer&lt;/code&gt;. Note that, you also need to know the cost of using the hooks as well.&lt;/p&gt;

&lt;p&gt;To pass the props, you can simply pass it along with the function of the component as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The rest of the component&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you import the component, you can pass anything that you need to the component this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"John"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let say, you don't have a lot of changes happened to a certain component, we can also use pure component, so the render is predictable for the renders, and you don't have to put &lt;code&gt;useState&lt;/code&gt; inside it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-lifecycle"&gt;
  &lt;/a&gt;
  React Lifecycle
&lt;/h3&gt;

&lt;p&gt;React has a standard component lifecycle - mount, update, unmount. In class component, there are methods that is used, like &lt;code&gt;componentDidUpdate&lt;/code&gt;, &lt;code&gt;componentWillUnmount&lt;/code&gt;. In functional components, its all packed inside &lt;code&gt;useEffect&lt;/code&gt;, where you can set which changes will it subscribe to, and split code better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Functions here are equivalent to&lt;/span&gt;
    &lt;span class="c1"&gt;// `componentDidMount`, `shouldComponentUpdate`&lt;/span&gt;
    &lt;span class="c1"&gt;// and `componentDidUpdate`&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Functions here are equivalent to&lt;/span&gt;
      &lt;span class="c1"&gt;// `componentWillUnmount`&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;changesDeps&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Changes can be state, props&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that useEffect can be used repeatedly, oppose to class lifecycle method which can only be used once in a single class.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h2&gt;

&lt;p&gt;Before going into details about Vue, I will only use Vue 3 approach, mostly on Composition API. For React developers, I personally use Vue Composition API which are really similar to React. I might touch a little bit about the usual pattern, just to compare how simple Vue has been in term of verbosity and optimization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#templates"&gt;
  &lt;/a&gt;
  Templates
&lt;/h3&gt;

&lt;p&gt;Differs with React, Vue uses the usual HTML pattern, and not JSX. That is why, Vue recommends usage of templates (though you can also use render function and JSX if there is the need). You can use the usual pattern, including the usual element class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#declarative"&gt;
  &lt;/a&gt;
  Declarative
&lt;/h3&gt;

&lt;p&gt;Vue has its own style of declare a variable. In traditional way, you can pass variable as &lt;code&gt;data&lt;/code&gt; when you export the component, along with the templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, starting Vue 3, where Composition API has been introduced, it provides developer a new way of writing the component, where React developer such as me, feel close to home, and helps me to adopt Vue as fast as I can.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that Composition API in Vue 3 didn't totally replace the old pattern in Vue 2, it's just providing a more verbose way of writing your component.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simpler, right?&lt;/p&gt;

&lt;p&gt;So, how about render that involve conditions and loops? Vue introduce binding, where you bind a variable to the content inside the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"wrapperClass"&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"counter &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"increaseCounter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Increase&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapperClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#states-and-props"&gt;
  &lt;/a&gt;
  States and props
&lt;/h3&gt;

&lt;p&gt;Noticed that before this, we have a thing called &lt;code&gt;data&lt;/code&gt;? Yeah, it serves the same purpose as React's &lt;code&gt;state&lt;/code&gt;, where it will handle reactivity. This is to make sure the state is immutable. But in the following example, I'll just show the &lt;code&gt;script setup&lt;/code&gt; equivalent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, how about props? Okay, let me show you the old and the new way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defineProps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, when you you import your component elsewhere, it behaves the same way as React pass the props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Countdown&lt;/span&gt; &lt;span class="na"&gt;counter=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Countdown&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../sources/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vue-lifecycles"&gt;
  &lt;/a&gt;
  Vue Lifecycles
&lt;/h3&gt;

&lt;p&gt;The flow of lifecycles between React and Vue are generally same, with Vue introducing some addition to the process. (I haven't use lifecycle extensively yet, so I will update it if I found new information).&lt;/p&gt;

&lt;p&gt;So, the old way (Option API)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Execute function after mounted&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;script setup&lt;/code&gt; way (Composition API),&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt; &lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;onMounted&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute function after mounted&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There, you can see the usage of hooks inside Vue!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;React and Vue both offers their own way of managing states and props, the lifecycles, and their own way of binding and executing function to the HTML. Of course the next question should be "which one is better?", nevertheless both have evolved tremendously and will improve in future. So again, my aim to highlight the feature from both sides, so we can mutually recognize each pattern. Later, you can jump right to the other side, without worrying about relearning again.&lt;/p&gt;

&lt;p&gt;Which one is easier for me? I will still say React is easy-win for me, but that doesn't give a fair comparison to Vue, given that I am still new to Vue.&lt;/p&gt;

&lt;p&gt;If there's a missing part, that you believe is the key to each framework, comment down below 👇!&lt;/p&gt;

</description>
      <category>react</category>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Query table data in Azure Data Explorer with Kusto to analyse load test results</title>
      <author>Ayaka Hara</author>
      <pubDate>Thu, 19 Aug 2021 03:11:19 +0000</pubDate>
      <link>https://dev.to/aykhara/query-table-data-in-azure-data-explorer-with-kusto-to-analyse-load-test-results-1b93</link>
      <guid>https://dev.to/aykhara/query-table-data-in-azure-data-explorer-with-kusto-to-analyse-load-test-results-1b93</guid>
      <description>&lt;p&gt;There are situations where we want to query Table data, such as analysing load test results.&lt;br&gt;
Since the maximum number of entities* that are returned in a single query with LINQ Take operator is 1,000 (&lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/writing-linq-queries-against-the-table-service#returning-the-top-n-entities"&gt;Ref - Returning the Top n Entities&lt;/a&gt;), you may need to code more to retrieve what you want.&lt;/p&gt;

&lt;p&gt;*Entities are sets of properties and can be thought of like rows in a database. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_oSu6WUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sangh2tby4gf8q30918h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_oSu6WUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sangh2tby4gf8q30918h.png" alt="architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LINQ has an upper limit of 1000, while Data Explorer with Kusto allows to query large numbers of entities.&lt;/p&gt;

&lt;p&gt;In this article, how to query with Kusto in Azure Data Explorer (ADX) will be explained in particular.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#pre-requisites"&gt;Pre-requisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#objective"&gt;Objective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#example-table-data"&gt;Example table data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kusto-queries-to-calculate-processing-time"&gt;Kusto queries to calculate processing time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#result"&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;First of all, you need to complete the steps to ingest data from Table Storage into Data Explorer via Data Factory to prepare to query large numbers of entities with Kusto.&lt;br&gt;
Please refer to &lt;a href="https://dev.to/aykhara/ingest-data-from-azure-table-storage-into-data-explorer-133c"&gt;the post "Ingest data from Azure Table Storage into Data Explorer"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once done with the steps above, you're ready to query data ingested from Azure Table Storage with Kusto.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#objective"&gt;
  &lt;/a&gt;
  Objective &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In this article, I will use an example from &lt;a href="https://dev.to/aykhara/cost-comparison-between-azure-services-to-determine-architecture-579o"&gt;the post "Cost comparison between Azure services to determine architecture"&lt;/a&gt; to illustrate how to query Table data with Kusto. &lt;/p&gt;

&lt;p&gt;The purpose of querying the table data here is to make sure that one of the requirements, &lt;strong&gt;the processing time between device and storage is less than 10 seconds&lt;/strong&gt;, is met.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#example-table-data"&gt;
  &lt;/a&gt;
  Example table data &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Let's see how an example table data looks like. It is assumed that there are around 1.2 million entities adding into a single table.&lt;/p&gt;

&lt;p&gt;Table Name : telemetry202108180820&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;PartitionKey&lt;/th&gt;
&lt;th&gt;RowKey&lt;/th&gt;
&lt;th&gt;Timestamp&lt;/th&gt;
&lt;th&gt;Data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;992c9af9-b490-44cd-bf95-d9fa61bc3aa4&lt;/td&gt;
&lt;td&gt;abcdefghigklmn&lt;/td&gt;
&lt;td&gt;2021-08-18T10:33:25.355Z&lt;/td&gt;
&lt;td&gt;{&lt;br&gt;"deviceId": "992c9af9-b490-44cd-bf95-d9fa61bc3aa4",&lt;br&gt;"connectivity": "Online",&lt;br&gt;"eventType": "Telemetry",&lt;br&gt;"timestamp": "2021-08-18T19:12:08.1844379+09:00",&lt;br&gt;"telemetry": {&lt;br&gt;"6E8E2CE5-3A7D-4997-9056-297BAD62C601":&lt;br&gt;"12345678901234567890123456789",&lt;br&gt;"1023EF00-093C-4702-886F-6C9C8B4D3102":&lt;br&gt;"12345678901234567890123456789",&lt;br&gt;...&lt;br&gt;}&lt;br&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c06145f6-7843-420c-ae80-fc52710198b5&lt;/td&gt;
&lt;td&gt;abcdefghigklmn&lt;/td&gt;
&lt;td&gt;2021-08-18T10:33:25.433Z&lt;/td&gt;
&lt;td&gt;{&lt;br&gt;"deviceId": "c06145f6-7843-420c-ae80-fc52710198b5",&lt;br&gt;"connectivity": "Online",&lt;br&gt;"eventType": "Telemetry",&lt;br&gt;"timestamp": "2021-08-18T19:12:08.1933468+09:00",&lt;br&gt;"telemetry": {&lt;br&gt;"6E8E2CE5-3A7D-4997-9056-297BAD62C601":&lt;br&gt;"12345678901234567890123456789",&lt;br&gt;"1023EF00-093C-4702-886F-6C9C8B4D3102":&lt;br&gt;"12345678901234567890123456789",&lt;br&gt;...&lt;br&gt;}&lt;br&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;timestamp in column Data&lt;/strong&gt; is the time when telemetry message is sent from each device. &lt;strong&gt;Column Timestamp&lt;/strong&gt; is the time when telemetry message is ingested into Table Storage after processing it with Function App.&lt;br&gt;
These timestamp data will be used to calculate processing time between device and table storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Px-qK25K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86rf9ya01i1n0nl2azln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Px-qK25K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86rf9ya01i1n0nl2azln.png" alt="Data_Timestamp"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#kusto-queries-to-calculate-processing-time"&gt;
  &lt;/a&gt;
  Kusto queries to calculate processing time &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here is an example of Kusto queries to calculate processing time between device and table storage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;telemetry202108180820
| project data = parse_json(Data), ingestedTime = Timestamp
| project generatedTime = todatetime(data, timestamp), ingestedTime
| project diff = datetime_diff("Millisecond", ingestedTime, generatedTime)
| summarize avg(diff), max(diff), min(diff), percentiles(diff, 5, 90, 99)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What each step is doing will be explained as the following.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-reference-to-a-table"&gt;
  &lt;/a&gt;
  1. Reference to a table
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;telemetry202108180820
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The statement starts with a reference to a table. In this article, the table 'telemetry202108180820' is being used as shown in the example table data section above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-interpret-column-data-as-a-json"&gt;
  &lt;/a&gt;
  2. Interpret column Data as a JSON
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| project 
    data = parse_json(Data), // Interpret column Data as a JSON and rename it to data
    ingestedTime = Timestamp // Rename column Timestamp to ingestedTime
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'project' is an operator to select the columns to include, rename or drop, and insert new computed columns.&lt;/p&gt;

&lt;p&gt;In the example here, Data is a string and it needs to be interpreted as a JSON value to extract just some properties from the JSON column later.&lt;br&gt;
Also, column Timestamp is renamed to ingestedTime to clarify the difference from another timestamp.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-convert-timestamp-in-column-data-to-datetime"&gt;
  &lt;/a&gt;
  3. Convert timestamp in column Data to datetime
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| project 
    generatedTime = todatetime(data, timestamp), // Convert timestamp in column data to datetime scalar and rename it to generatedTime
    ingestedTime // Include ingestedTime
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'todatetime' is a function to convert input to datetime scalar. Timestamp in column data is renamed to generatedTime after converting with 'todatetime' function.&lt;br&gt;
ingestedTime which was renamed above is also included again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-calculates-calendarian-difference-between-two-datetime-values"&gt;
  &lt;/a&gt;
  4. Calculates calendarian difference between two datetime values
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| project 
    diff = datetime_diff("Millisecond", ingestedTime, generatedTime) // Calculates calendarian difference (millisecond) between two datetime values: ingestedTime and generatedTime, and rename it to diff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'datetime_diff' is a function to calculates calendarian difference between two datetime values.&lt;br&gt;
By calculating the difference in millisecond between the ingestedTimeand (when telemetry message is ingested into Table Storage) and the geteratedTime (when telemetry message is sent from each device), the processing time can be obtained. The value is renamed to diff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-produce-a-table-with-aggregation-functions"&gt;
  &lt;/a&gt;
  5. Produce a table with aggregation functions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| summarize 
    avg(diff), 
    max(diff), 
    min(diff), 
    percentiles(diff, 5, 50, 90, 99) // Produce a table including the average, maximum, minimum, percentile approximate of diff which is calendarian difference (millisecond) between ingestedTime and generatedTime
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'summarize' is an operator to produce a table that aggregates the content of the input table.&lt;br&gt;
As an example, the following four aggregation functions are used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;avg : Returns an average value across the group&lt;/li&gt;
&lt;li&gt;max : Returns the maximum value across the group&lt;/li&gt;
&lt;li&gt;min : Returns the minimum value across the group&lt;/li&gt;
&lt;li&gt;percentiles : Returns the percentile approximate of the group&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here is the result of the Kusto queries explained ealier. The average is about 5,023 milliseconds which means 5.023 seconds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xQY7vMWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fm1azdj7a06sn31ukxi4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xQY7vMWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fm1azdj7a06sn31ukxi4.png" alt="ADX_ProcessingTime_Average_result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result shows that the requirement which the processing time between device and storage should be less than 10 seconds.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;This is just an example of how to query table data in Azure Data Explorer with Kusto to analyse load test results.&lt;br&gt;
If you want to retrieve/query large numbers of entities from Table Storage, much more than 1000, one way to do it is to use Kusto instead of LINQ.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/rest/api/storageservices/writing-linq-queries-against-the-table-service#returning-the-top-n-entities"&gt;Writing LINQ queries against the Table service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/"&gt;Overview - Kusto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/projectoperator"&gt;project operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/parsejsonfunction"&gt;parse_json()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/todatetimefunction"&gt;todatetime()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/datetime-difffunction"&gt;datetime_diff()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/summarizeoperator"&gt;summarize operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/aykhara/ingest-data-from-azure-table-storage-into-data-explorer-133c"&gt;Ingest data from Azure Table Storage into Data Explorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/aykhara/cost-comparison-between-azure-services-to-determine-architecture-579o"&gt;Cost comparison between Azure services to determine architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>azure</category>
    </item>
    <item>
      <title>Python Contact/Address Book Demo Project - GUI</title>
      <author>rrtutors</author>
      <pubDate>Thu, 19 Aug 2021 03:05:45 +0000</pubDate>
      <link>https://dev.to/rrtutors/python-contact-address-book-demo-project-gui-o6</link>
      <guid>https://dev.to/rrtutors/python-contact-address-book-demo-project-gui-o6</guid>
      <description>&lt;p&gt;This &lt;a href="https://rrtutors.com/projectsinfo/How-to-Create-Contact-Book-in-Python"&gt;python contact Book&lt;/a&gt; GUI application  is store entries related to a people’s contacts like a phone number, email address, etc.&lt;/p&gt;


&lt;li&gt; Basic pattern of the CBook App&lt;/li&gt;
&lt;br&gt;
   &lt;li&gt; Specification of the CBook App&lt;/li&gt;
&lt;br&gt;
   &lt;li&gt; General structure of the CBook App&lt;/li&gt;
&lt;br&gt;
   &lt;li&gt; Folder organization of the CBook App   &lt;/li&gt;
&lt;br&gt;
    &lt;li&gt;Installing a IDE Application &lt;/li&gt;
&lt;br&gt;&lt;br&gt;
    &lt;li&gt;Development of the CBook App&lt;/li&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/A7F76BX_-xg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Download &lt;a href="https://rrtutors.com/projectsinfo/How-to-Create-Contact-Book-in-Python"&gt;Python address Book source Code&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beginner's guide to Chaos Engineering</title>
      <author>Shatakshi Gupta</author>
      <pubDate>Thu, 19 Aug 2021 02:37:37 +0000</pubDate>
      <link>https://dev.to/shatakshiigupta/beginner-s-guide-to-chaos-engineering-5edp</link>
      <guid>https://dev.to/shatakshiigupta/beginner-s-guide-to-chaos-engineering-5edp</guid>
      <description>&lt;p&gt;Have you ever wondered what firms/companies do or would do when their product or service that they are offering to customers suffers from &lt;a href="https://www.merriam-webster.com/dictionary/downtime"&gt;Downtime&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Well, if not then this article will definitely help you in knowing about it in depth.&lt;/p&gt;

&lt;p&gt;So taking the concept from scratch what is Chaos and why are we talking about it?&lt;/p&gt;

&lt;p&gt;Let's suppose you create an application and deploy it on an online platform accessible to the public and all of a sudden your project/application gets recognized and you observe a lot of traffic over your application, people start using it as it might be helpful to them in some or the other way. Now you had no idea that something like this would happen and due to this you never took into account that whether you should scale your project or not. &lt;br&gt;
As the traffic increases more and more each day, you observe that people are not able to access your application as some issues are being faced by a lot of people. &lt;/p&gt;

&lt;p&gt;Now here comes the concept of scaling your application so that more and more people can access your application. So you now scaled your application to a large extent, still some issues were being faced that some microservices of your application were down and people were not able to update/make changes.&lt;/p&gt;

&lt;p&gt;Here comes the concept of testing which is done while updating/scaling your application so that people can easily make use of it. We test our applications/system so that people in the near future do not face any difficulties while making use of your application.&lt;br&gt;
Testing is done to ensure our system can withstand unexpected disruptions.&lt;/p&gt;

&lt;p&gt;What we do is we inject Chaos in our applications to test for resiliency.&lt;br&gt;
&lt;strong&gt;Chaos&lt;/strong&gt; can also be explained as a technique that helps us to get to know that how our application would react when so and so changes are made in the system. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resilience&lt;/strong&gt; is the crucial concept of our testing as through this we can know that whether our application can stay afloat during downtimes.&lt;br&gt;
One good example can be when there are sales on E-commerce websites be that for any occasion or literally any thing. Then there is huge amount of customers each day during the sale due to the low prices.&lt;/p&gt;

&lt;p&gt;Chaos is used in four steps while testing your application-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6Bj-sOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6wy767cct1o4w28ueid.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6Bj-sOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6wy767cct1o4w28ueid.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;u&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/u&gt;:&lt;br&gt;
We basically observe and take into account how your system is behaving in normal state or in the steady state&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/u&gt;:&lt;br&gt;
We make a hypothesis how our system would behave during Vulnerability/chaotic state and in steady state &lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/u&gt;:&lt;br&gt;
This hypothesis further leads to experiments that help us know about what changes our system needs in chaotic state&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/u&gt;:&lt;br&gt;
And this cycle continues till our system starts getting adapted to the experiments provided.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Chaos Engineering&lt;/em&gt; also has some states that help us better understand the state of our application. These states are listed below-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WC7vGs18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unsd0i9xaa39b28387jd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WC7vGs18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/unsd0i9xaa39b28387jd.jpg" alt="Chaos cycle"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;STEADY STATE OF AN APPLICATION&lt;/strong&gt;-&lt;br&gt;
Identify the steady state that how your application behaves during normal state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INTRODUCTION OF FAULTS&lt;/strong&gt;-&lt;br&gt;
Another state is the deliberate introduction of a fault. This is done so as to test that how would our application react when it would experience a downtime&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEADY STATE REGAINED OR NOT&lt;/strong&gt;-&lt;br&gt;
If we see no difference after introducing a fault then our application is in healthy state or resilient state&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WEAKNESS FOUND&lt;/strong&gt;-&lt;br&gt;
If we do observe that the application isn't working or stopped working then that is called as weakness&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FIXING &amp;amp; AGAIN PASS THE FAULT&lt;/strong&gt;-&lt;br&gt;
In this we try to fix the weakness or vulnerability and pass the faults again for testing of resiliency&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RESILIENT&lt;/strong&gt;-&lt;br&gt;
This process continues till we observe that our application has achieved resiliency and is no longer in weak state even after introduction of multiple faults&lt;/p&gt;

&lt;p&gt;These all the states help us better know about our system and how we should scale and test them so that it can be easily accessed by people.&lt;br&gt;
&lt;strong&gt;Chaos Engineering&lt;/strong&gt; is one of the most important and interesting concepts in the field of testing as through this once can inject chaos in application/system to test for Resiliency.&lt;/p&gt;

&lt;p&gt;Here including some of the resources to get you started with Chaos if you found this article interesting:&lt;/p&gt;

&lt;p&gt;1.&lt;a href="https://chaos-mesh.org/docs/quick-start"&gt;Quick Start-Chaos Engineering&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;a href="https://groups.google.com/g/chaos-community"&gt;Chaos Community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.&lt;a href="https://cloud-native.slack.com/ssb/redirect"&gt;CNCF Slack for #project-chaos-mesh channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you so much for reading this article! Hope you found it interesting. Have a Great day ahead! :)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>engineering</category>
      <category>guide</category>
      <category>chaosengineering</category>
    </item>
  </channel>
</rss>
