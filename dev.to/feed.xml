<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Node.js Packages and Resources</title>
      <author>ZigRazor</author>
      <pubDate>Tue, 07 Sep 2021 06:35:05 +0000</pubDate>
      <link>https://dev.to/zigrazor/node-js-packages-and-resources-5en4</link>
      <guid>https://dev.to/zigrazor/node-js-packages-and-resources-5en4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9aA65zvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk2f69ujz2firh5nccm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9aA65zvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk2f69ujz2firh5nccm7.png" alt="JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt; Packages and Resources is a list of useful links to Node.js frameworks and resources.&lt;/p&gt;

&lt;p&gt;Starting with the &lt;a href="https://nodejs.org"&gt;Official Website&lt;/a&gt; and the &lt;a href="https://nodejs.org/dist/latest/docs/api/"&gt;Official Documentation&lt;/a&gt;, without forget the  &lt;a href="https://github.com/nodejs/node"&gt;Official Repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packages"&gt;
  &lt;/a&gt;
  Packages
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#mad-science"&gt;
  &lt;/a&gt;
  Mad science
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/feross/webtorrent"&gt;webtorrent&lt;/a&gt; - Streaming torrent client for Node.js and the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/peerflix"&gt;peerflix&lt;/a&gt; - Streaming torrent client.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/datproject/dat-node"&gt;dat&lt;/a&gt; - Real-time replication and versioning for data sets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ipfs/js-ipfs"&gt;ipfs&lt;/a&gt; - Distributed file system that seeks to connect all computing devices with the same system of files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stackgl"&gt;stackgl&lt;/a&gt; - Open software ecosystem for WebGL, built on top of browserify and npm.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/peerwiki"&gt;peerwiki&lt;/a&gt; - All of Wikipedia on BitTorrent.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/peercast"&gt;peercast&lt;/a&gt; - Stream a torrent video to Chromecast.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bitcoinjs/bitcoinjs-lib"&gt;BitcoinJS&lt;/a&gt; - Clean, readable, proven Bitcoin library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bitpay/bitcore"&gt;Bitcore&lt;/a&gt; - Pure and powerful Bitcoin library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/devongovett/pdfkit"&gt;PDFKit&lt;/a&gt; - PDF generation library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Turfjs/turf"&gt;turf&lt;/a&gt; - Modular geospatial processing and analysis engine.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/webcat"&gt;webcat&lt;/a&gt; - p2p pipe across the web using WebRTC that uses your GitHub private/public key for authentication.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NodeOS/NodeOS"&gt;NodeOS&lt;/a&gt; - The first operating system powered by npm.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yodaos-project/yodaos"&gt;YodaOS&lt;/a&gt; - AI operating system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/BrainJS/brain.js"&gt;Brain.js&lt;/a&gt; - Machine-learning framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alibaba/pipcook"&gt;Pipcook&lt;/a&gt; - Front-end algorithm framework to create a machine learning pipeline.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cytoscape/cytoscape.js"&gt;Cytoscape.js&lt;/a&gt; - Graph theory (a.k.a. network) modeling and analysis.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gitlab.com/deadcanaries/kadence"&gt;Kadence&lt;/a&gt; - Kademlia distributed hash table.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/twobucks/seedshot"&gt;seedshot&lt;/a&gt; - Temporary P2P screenshot sharing from your browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/creationix/js-git"&gt;js-git&lt;/a&gt; - JavaScript implementation of Git.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/skale-me/skale-engine"&gt;skale&lt;/a&gt; - High performance distributed data processing engine.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sheetjs/js-xlsx"&gt;xlsx&lt;/a&gt; - Pure JS Excel spreadsheet reader and writer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/isomorphic-git/isomorphic-git"&gt;isomorphic-git&lt;/a&gt; - Pure JavaScript implementation of Git.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#commandline-apps"&gt;
  &lt;/a&gt;
  Command-line apps
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/np"&gt;np&lt;/a&gt; - Better &lt;code&gt;npm publish&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/npm-name"&gt;npm-name&lt;/a&gt; - Check a package name's availability on npm.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/gh-home"&gt;gh-home&lt;/a&gt; - Open the GitHub page of the repo in the current directory.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/npm-home"&gt;npm-home&lt;/a&gt; - Open the npm page of a package.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/trash"&gt;trash&lt;/a&gt; - Safer alternative to &lt;code&gt;rm&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/speed-test"&gt;speed-test&lt;/a&gt; - Test your internet connection speed and ping.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/emoj"&gt;emoj&lt;/a&gt; - Find relevant emoji from text on the command-line.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/pageres"&gt;pageres&lt;/a&gt; - Capture website screenshots.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/cpy"&gt;cpy&lt;/a&gt; - Copy files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/MrRio/vtop"&gt;vtop&lt;/a&gt; - More better top, with nice charts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/empty-trash"&gt;empty-trash&lt;/a&gt; - Empty the trash.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/is-up"&gt;is-up&lt;/a&gt; - Check whether a website is up or down.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/is-online"&gt;is-online&lt;/a&gt; - Check if the internet connection is up.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/public-ip"&gt;public-ip&lt;/a&gt; - Get your public IP address.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/clipboard-cli"&gt;clipboard-cli&lt;/a&gt; - Copy &amp;amp; paste on the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xojs/xo"&gt;XO&lt;/a&gt; - Enforce strict code style using the JavaScript happiness style.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/feross/standard"&gt;Standard&lt;/a&gt; - JavaScript Standard Style — One style to rule them all.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/eslint/eslint"&gt;ESLint&lt;/a&gt; - The pluggable linting utility for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/samverschueren/dev-time-cli"&gt;dev-time&lt;/a&gt; - Get the current local time of a GitHub user.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alanshaw/david"&gt;David&lt;/a&gt; - Tells you when your package npm dependencies are out of date.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/indexzero/http-server"&gt;http-server&lt;/a&gt; - Simple, zero-config command-line HTTP server.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tapio/live-server"&gt;Live Server&lt;/a&gt; - Development HTTP-server with livereload capability.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kessler/node-bcat"&gt;bcat&lt;/a&gt; - Pipe command output to web browsers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pawurb/normit"&gt;normit&lt;/a&gt; - Google Translate with speech synthesis in your terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/fkill-cli"&gt;fkill&lt;/a&gt; - Fabulously kill processes. Cross-platform.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/danielstjules/pjs"&gt;pjs&lt;/a&gt; - Pipeable JavaScript. Quickly filter, map, and reduce from the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davglass/license-checker"&gt;license-checker&lt;/a&gt; - Check licenses of your app's dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/juliangruber/browser-run"&gt;browser-run&lt;/a&gt; - Easily run code in a browser environment.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/tmpin"&gt;tmpin&lt;/a&gt; - Adds stdin support to any CLI app that accepts file input.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kevva/wifi-password-cli"&gt;wifi-password&lt;/a&gt; - Get the current wifi password.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/wallpaper"&gt;wallpaper&lt;/a&gt; - Change the desktop wallpaper.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kevva/brightness-cli"&gt;brightness&lt;/a&gt; - Change the screen brightness.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/maxogden/torrent"&gt;torrent&lt;/a&gt; - Download torrents.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/kill-tabs"&gt;kill-tabs&lt;/a&gt; - Kill all Chrome tabs to improve performance, decrease battery usage, and save memory.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wooorm/alex"&gt;alex&lt;/a&gt; - Catch insensitive, inconsiderate writing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/noraesae/pen"&gt;pen&lt;/a&gt; - Live Markdown preview in the browser from your favorite editor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/beatfreaker/subdownloader"&gt;subdownloader&lt;/a&gt; - Subtitle downloader for movies and TV series.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/dark-mode"&gt;dark-mode&lt;/a&gt; - Toggle the macOS Dark Mode.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nogizhopaboroda/iponmap"&gt;iponmap&lt;/a&gt; - IP location finder.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Javascipt/Jsome"&gt;Jsome&lt;/a&gt; - Pretty prints JSON with configurable colors and indentation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mischah/itunes-remote"&gt;itunes-remote&lt;/a&gt; - Interactively control iTunes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/samverschueren/mobicon-cli"&gt;mobicon&lt;/a&gt; - Mobile app icon generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/samverschueren/mobisplash-cli"&gt;mobisplash&lt;/a&gt; - Mobile app splash screen generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtfpessoa/diff2html-cli"&gt;diff2html-cli&lt;/a&gt; - Pretty git diff to HTML generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dthree/cash"&gt;Cash&lt;/a&gt; - Cross-platform Unix shell commands in pure JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/VictorBjelkholm/trymodule"&gt;trymodule&lt;/a&gt; - Try out npm packages in the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kucherenko/jscpd"&gt;jscpd&lt;/a&gt; - Copy/paste detector for source code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Raathigesh/Atmo"&gt;atmo&lt;/a&gt; - Server-side API mocking.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/siddharthkp/auto-install"&gt;auto-install&lt;/a&gt; - Auto installs dependencies as you code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/linuxenko/lessmd"&gt;lessmd&lt;/a&gt; - Markdown in the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/siddharthkp/cost-of-modules"&gt;cost-of-modules&lt;/a&gt; - Find out which dependencies are slowing you down.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/localtunnel/localtunnel"&gt;localtunnel&lt;/a&gt; - Expose your localhost to the world.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marionebl/svg-term-cli"&gt;svg-term-cli&lt;/a&gt; - Share terminal sessions via SVG.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aksakalli/gtop"&gt;gtop&lt;/a&gt; - System monitoring dashboard for the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mjswensen/themer"&gt;themer&lt;/a&gt; - Generate themes for your editor, terminal, wallpaper, Slack, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mixn/carbon-now-cli"&gt;carbon-now-cli&lt;/a&gt; - Beautiful images of your code — from right inside your terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xxczaki/cash-cli"&gt;cash-cli&lt;/a&gt; - Convert between 170 currencies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/klauscfhq/taskbook"&gt;taskbook&lt;/a&gt; - Tasks, boards &amp;amp; notes for the command-line habitat.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brandonweiss/discharge"&gt;discharge&lt;/a&gt; - Easily deploy static websites to Amazon S3.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/voidcosmos/npkill"&gt;npkill&lt;/a&gt; - Easily find and remove old and heavy node_modules folders.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional programming
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/lodash/lodash"&gt;lodash&lt;/a&gt; - Utility library delivering consistency, customization, performance, &amp;amp; extras. A better and faster Underscore.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/immutable-js"&gt;immutable&lt;/a&gt; - Immutable data collections.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ramda/ramda"&gt;Ramda&lt;/a&gt; - Utility library with a focus on flexible functional composition enabled by automatic currying and reversed argument order. Avoids mutating data.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/origamitower/folktale"&gt;Folktale&lt;/a&gt; - Suite of libraries for generic functional programming in JavaScript that allows you to write elegant, modular applications with fewer bugs, and more reuse.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mout/mout"&gt;Mout&lt;/a&gt; - Utility library with the biggest difference between other existing solutions is that you can choose to load only the modules/functions that you need, no extra overhead.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/baconjs/bacon.js"&gt;Bacon.js&lt;/a&gt; - Functional reactive programming.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/reactivex/rxjs"&gt;RxJS&lt;/a&gt; - Functional reactive library for transforming, composing, and querying various kinds of data.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dtao/lazy.js"&gt;Lazy.js&lt;/a&gt; - Utility library similar to lodash/Underscore but with lazy evaluation, which can translate to superior performance in many cases.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kefirjs/kefir"&gt;Kefir.js&lt;/a&gt; - Reactive library with focus on high performance and low memory usage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#http"&gt;
  &lt;/a&gt;
  HTTP
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/got"&gt;got&lt;/a&gt; - Nicer interface to the built-in &lt;code&gt;http&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/gh-got"&gt;gh-got&lt;/a&gt; - Convenience wrapper for &lt;code&gt;got&lt;/code&gt; to interact with the GitHub API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mzabriskie/axios"&gt;axios&lt;/a&gt; - Promise based HTTP client (works in the browser too).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hapijs/wreck"&gt;wreck&lt;/a&gt; - HTTP Client Utilities.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kevva/download"&gt;download&lt;/a&gt; - Download and extract files effortlessly.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodejitsu/node-http-proxy"&gt;http-proxy&lt;/a&gt; - HTTP proxy.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/visionmedia/superagent"&gt;superagent&lt;/a&gt; - HTTP request library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bitinn/node-fetch"&gt;node-fetch&lt;/a&gt; - &lt;code&gt;window.fetch&lt;/code&gt; for Node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bbc/flashheart"&gt;flashheart&lt;/a&gt; - REST client.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/micromata/http-fake-backend"&gt;http-fake-backend&lt;/a&gt; - Build a fake backend by providing the content of JSON files or JavaScript objects through configurable routes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lukechilds/cacheable-request"&gt;cacheable-request&lt;/a&gt; - Wrap native HTTP requests with RFC compliant cache support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/khaosdoctor/gotql"&gt;gotql&lt;/a&gt; - GraphQL request library built on &lt;a href="https://github.com/sindresorhus/got"&gt;got&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gajus/global-agent"&gt;global-agent&lt;/a&gt; - Global HTTP/HTTPS proxy agent that is configurable using environment variables.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sinedied/smoke"&gt;smoke&lt;/a&gt; - File-based HTTP mock server with recording abilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#debugging-profiling"&gt;
  &lt;/a&gt;
  Debugging / Profiling
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/GoogleChromeLabs/ndb"&gt;ndb&lt;/a&gt; - Improved debugging experience, enabled by Chrome DevTools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/s-a/iron-node"&gt;ironNode&lt;/a&gt; - Node.js debugger supporting ES2015 out of the box.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/node-inspector/node-inspector"&gt;node-inspector&lt;/a&gt; - Debugger based on Blink Developer Tools.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/visionmedia/debug"&gt;debug&lt;/a&gt; - Tiny debugging utility.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/why-is-node-running"&gt;why-is-node-running&lt;/a&gt; - Node.js is running but you don't know why?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/valyouw/njstrace"&gt;njsTrace&lt;/a&gt; - Instrument and trace your code, see all function calls, arguments, return values, as well as the time spent in each function.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/joyent/node-vstream"&gt;vstream&lt;/a&gt; - Instrumentable streams mix-ins to inspect a pipeline of streams.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/watson/stackman"&gt;stackman&lt;/a&gt; - Enhance an error stacktrace with code excerpts and other goodies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alidavut/locus"&gt;locus&lt;/a&gt; - Starts a REPL at runtime that has access to all variables.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davidmarkclements/0x"&gt;0x&lt;/a&gt; - Flamegraph profiling.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/automation-stack/ctrace"&gt;ctrace&lt;/a&gt; - Well-formatted and improved trace system calls and signals.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/andywer/leakage"&gt;leakage&lt;/a&gt; - Write memory leak tests.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodejs/llnode"&gt;llnode&lt;/a&gt; - Post-mortem analysis tool which allows you to inspect objects and get insights from a crashed Node.js process.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sfninja/thetool"&gt;thetool&lt;/a&gt; - Capture different CPU, memory, and other profiles for your app in Chrome DevTools friendly format.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/slanatech/swagger-stats"&gt;swagger-stats&lt;/a&gt; - Trace API calls and monitor API performance, health, and usage metrics.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/june07/nim"&gt;NiM&lt;/a&gt; - Manages DevTools debugging workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/pinojs/pino"&gt;pino&lt;/a&gt; - Extremely fast logger inspired by Bunyan.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/winstonjs/winston"&gt;winston&lt;/a&gt; - Multi-transport async logging library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/watson/console-log-level"&gt;console-log-level&lt;/a&gt; - The most simple logger imaginable with support for log levels and custom prefixes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/guigrpa/storyboard"&gt;storyboard&lt;/a&gt; - End-to-end, hierarchical, real-time, colorful logs and stories.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/klauscfhq/signale"&gt;signale&lt;/a&gt; - Console logger.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nuxt/consola"&gt;consola&lt;/a&gt; - Console logger.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#commandline-utilities"&gt;
  &lt;/a&gt;
  Command-line utilities
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/chalk/chalk"&gt;chalk&lt;/a&gt; - Terminal string styling done right.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/meow"&gt;meow&lt;/a&gt; - CLI app helper.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yargs/yargs"&gt;yargs&lt;/a&gt; - Command-line parser that automatically generates an elegant user-interface.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/ora"&gt;ora&lt;/a&gt; - Elegant terminal spinner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/get-stdin"&gt;get-stdin&lt;/a&gt; - Easier stdin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/log-update"&gt;log-update&lt;/a&gt; - Log by overwriting the previous output in the terminal. Useful for rendering progress bars, animations, etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vadimdemedes/ink"&gt;Ink&lt;/a&gt; - React for interactive command-line apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/samverschueren/listr"&gt;listr&lt;/a&gt; - Terminal task list.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/conf"&gt;conf&lt;/a&gt; - Simple config handling for your app or module.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/ansi-escapes"&gt;ansi-escapes&lt;/a&gt; - ANSI escape codes for manipulating the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/log-symbols"&gt;log-symbols&lt;/a&gt; - Colored symbols for various log levels.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/figures"&gt;figures&lt;/a&gt; - Unicode symbols with Windows CMD fallbacks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/boxen"&gt;boxen&lt;/a&gt; - Create boxes in the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/terminal-link"&gt;terminal-link&lt;/a&gt; - Create clickable links in the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/terminal-image"&gt;terminal-image&lt;/a&gt; - Display images in the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/string-width"&gt;string-width&lt;/a&gt; - Get the visual width of a string - the number of columns required to display it.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/cli-truncate"&gt;cli-truncate&lt;/a&gt; - Truncate a string to a specific width in the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/first-run"&gt;first-run&lt;/a&gt; - Check if it's the first time the process is run.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chjj/blessed"&gt;blessed&lt;/a&gt; - Curses-like library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SBoudrias/Inquirer.js"&gt;Inquirer.js&lt;/a&gt; - Interactive command-line prompt.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/yn"&gt;yn&lt;/a&gt; - Parse yes/no like values.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cli-table/cli-table3"&gt;cli-table3&lt;/a&gt; - Pretty unicode tables.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/madbence/node-drawille"&gt;drawille&lt;/a&gt; - Draw on the terminal with unicode braille characters.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yeoman/update-notifier"&gt;update-notifier&lt;/a&gt; - Update notifications for your CLI app.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jstrace/chart"&gt;ascii-charts&lt;/a&gt; - ASCII bar chart in the terminal.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tj/node-progress"&gt;progress&lt;/a&gt; - Flexible ascii progress bar.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/yeoman/insight"&gt;insight&lt;/a&gt; - Helps you understand how your tool is being used by anonymously reporting usage metrics to Google Analytics.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/cli-cursor"&gt;cli-cursor&lt;/a&gt; - Toggle the CLI cursor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/timoxley/columnify"&gt;columnify&lt;/a&gt; - Create text-based columns suitable for console output. Supports cell wrapping.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/shannonmoeller/cli-columns"&gt;cli-columns&lt;/a&gt; - Columnated unicode and ansi-safe text lists.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dominikwilkowski/cfonts"&gt;cfonts&lt;/a&gt; - Sexy ASCII fonts for the console.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codekirei/node-multispinner"&gt;multispinner&lt;/a&gt; - Multiple, simultaneous, individually controllable CLI spinners.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/f/omelette"&gt;omelette&lt;/a&gt; - Shell autocompletion helper.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kentcdodds/cross-env"&gt;cross-env&lt;/a&gt; - Set environment variables cross-platform.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/shelljs/shelljs"&gt;shelljs&lt;/a&gt; - Portable Unix shell commands.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/sudo-block"&gt;sudo-block&lt;/a&gt; - Block users from running your app with root permissions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/loud-rejection"&gt;loud-rejection&lt;/a&gt; - Make unhandled promise rejections fail loudly instead of the default silent fail.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/sparkly"&gt;sparkly&lt;/a&gt; - Generate sparklines &lt;code&gt;▁▂▃▅▂▇&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/teambit/bit"&gt;Bit&lt;/a&gt; - Create, maintain, find and use small modules and components across repositories.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bokub/gradient-string"&gt;gradient-string&lt;/a&gt; - Beautiful color gradients in terminal output.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/oclif/oclif"&gt;oclif&lt;/a&gt; - CLI framework complete with parser, automatic documentation, testing, and plugins.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/term-size"&gt;term-size&lt;/a&gt; - Reliably get the terminal window size.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/drew-y/cliffy"&gt;Cliffy&lt;/a&gt; - Framework for interactive CLIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#build-tools"&gt;
  &lt;/a&gt;
  Build tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/parcel-bundler/parcel"&gt;parcel&lt;/a&gt; - Blazing fast, zero config web app bundler.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/webpack/webpack"&gt;webpack&lt;/a&gt; - Packs modules and assets for the browser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rollup/rollup"&gt;rollup&lt;/a&gt; - Next-generation ES2015 module bundler.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gulpjs/gulp"&gt;gulp&lt;/a&gt; - Streaming and fast build system that favors code over config.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/broccolijs/broccoli"&gt;Broccoli&lt;/a&gt; - Fast, reliable asset pipeline, supporting constant-time rebuilds and compact build definitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brunch/brunch"&gt;Brunch&lt;/a&gt; - Front-end web app build tool with simple declarative config, fast incremental compilation, and an opinionated workflow.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/deepsweet/start"&gt;Start&lt;/a&gt; - Functional task runner with shareable presets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/shannonmoeller/ygor"&gt;ygor&lt;/a&gt; - Promising task runner for when &lt;code&gt;npm run&lt;/code&gt; isn't enough and everything else is too much.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fuse-box/fuse-box"&gt;FuseBox&lt;/a&gt; - Fast build system that combines the power of webpack, JSPM and SystemJS, with first-class TypeScript support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zeit/pkg"&gt;pkg&lt;/a&gt; - Package your Node.js project into an executable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hardware"&gt;
  &lt;/a&gt;
  Hardware
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/rwaldron/johnny-five"&gt;johnny-five&lt;/a&gt; - Firmata based Arduino Framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/voodootikigod/node-serialport"&gt;serialport&lt;/a&gt; - Access serial ports for reading and writing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nonolith/node-usb"&gt;usb&lt;/a&gt; - USB library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fivdi/i2c-bus"&gt;i2c-bus&lt;/a&gt; - I2C serial bus access.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fivdi/onoff"&gt;onoff&lt;/a&gt; - GPIO access and interrupt detection.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fivdi/spi-device"&gt;spi-device&lt;/a&gt; - SPI serial bus access.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fivdi/pigpio"&gt;pigpio&lt;/a&gt; - Fast GPIO, PWM, servo control, state change notification, and interrupt handling on the Raspberry Pi.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infusion/GPS.js"&gt;gps&lt;/a&gt; - NMEA parser for handling GPS receivers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#templating"&gt;
  &lt;/a&gt;
  Templating
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/marko-js/marko"&gt;marko&lt;/a&gt; - HTML-based templating engine that compiles templates to CommonJS modules and supports streaming, async rendering and custom tags.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mozilla/nunjucks"&gt;nunjucks&lt;/a&gt; - Templating engine with inheritance, asynchronous control, and more (jinja2 inspired).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wycats/handlebars.js"&gt;handlebars.js&lt;/a&gt; - Superset of Mustache templates which adds powerful features like helpers and more advanced blocks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mde/ejs"&gt;EJS&lt;/a&gt; - Simple unopinionated templating language.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pugjs/pug"&gt;Pug&lt;/a&gt; - High-performance template engine heavily influenced by Haml.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-frameworks"&gt;
  &lt;/a&gt;
  Web frameworks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/hapijs/hapi"&gt;Hapi&lt;/a&gt; - Framework for building applications and services.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/koajs/koa"&gt;Koa&lt;/a&gt; - Framework designed by the team behind Express, which aims to be a smaller, more expressive, and more robust foundation for web applications and APIs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt; - Web application framework, providing a robust set of features for building single and multi-page, and hybrid web applications.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/feathersjs/feathers"&gt;Feathers&lt;/a&gt; - Microservice framework built in the spirit of Express.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/strongloop/loopback-next"&gt;LoopBack&lt;/a&gt; - Powerful framework for creating REST APIs and easily connecting to backend data sources.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/meteor/meteor"&gt;Meteor&lt;/a&gt; - An ultra-simple, database-everywhere, data-on-the-wire, pure-Javascript web framework. &lt;em&gt;(You might like &lt;a href="https://github.com/Urigo/awesome-meteor"&gt;awesome-meteor&lt;/a&gt;)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/restify/node-restify"&gt;Restify&lt;/a&gt; - Enables you to build correct REST web services.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thinkjs/thinkjs"&gt;ThinkJS&lt;/a&gt; - Framework with ES2015+ support, WebSockets, REST API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/actionhero/actionhero"&gt;ActionHero&lt;/a&gt; - Framework for making reusable &amp;amp; scalable APIs for TCP sockets, WebSockets, and HTTP clients.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zeit/next.js"&gt;Next.js&lt;/a&gt; - Minimalistic framework for server-rendered universal JavaScript web apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nuxt/nuxt.js"&gt;Nuxt.js&lt;/a&gt; - Minimalistic framework for server-rendered Vue.js apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/senecajs/seneca"&gt;seneca&lt;/a&gt; - Toolkit for writing microservices.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://adonisjs.com"&gt;AdonisJs&lt;/a&gt; - A true MVC framework for Node.js built on solid foundations of Dependency Injection and IoC container.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hemerajs/hemera"&gt;Hemera&lt;/a&gt; - Write reliable and fault-tolerant microservices with &lt;a href="https://nats.io"&gt;NATS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zeit/micro"&gt;Micro&lt;/a&gt; - Minimalistic microservice framework with an async approach.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://moleculer.services"&gt;Moleculer&lt;/a&gt; - Fast &amp;amp; powerful microservices framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fastify/fastify"&gt;Fastify&lt;/a&gt; - Fast and low overhead web framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nestjs/nest"&gt;Nest&lt;/a&gt; - Angular-inspired framework for building efficient and scalable server-side apps.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/19majkel94/type-graphql"&gt;TypeGraphQL&lt;/a&gt; - Modern framework for creating GraphQL APIs with TypeScript, using classes and decorators.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/talentlessguy/tinyhttp"&gt;Tinyhttp&lt;/a&gt; - Modern and fast Express-like web framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/marblejs/marble"&gt;Marble.js&lt;/a&gt; - Functional reactive framework for building server-side apps, based on TypeScript and RxJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/documentationjs/documentation"&gt;documentation.js&lt;/a&gt; - API documentation generator with support for ES2015+ and flow annotation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/esdoc/esdoc"&gt;ESDoc&lt;/a&gt; - Documentation generator targeting ES2015, attaching test code and measuring documentation coverage.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jashkenas/docco"&gt;Docco&lt;/a&gt; - Documentation generator which produces an HTML document that displays your comments intermingled with your code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jsdoc3/jsdoc"&gt;JSDoc&lt;/a&gt; - API documentation generator similar to JavaDoc or PHPDoc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/docusaurus"&gt;Docusaurus&lt;/a&gt; - Documentation website generator that leverages React and Markdown, and comes with translation and versioning features.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#filesystem"&gt;
  &lt;/a&gt;
  Filesystem
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/del"&gt;del&lt;/a&gt; - Delete files/folders using globs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/globby"&gt;globby&lt;/a&gt; - Glob files with support for multiple patterns.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/cpy"&gt;cpy&lt;/a&gt; - Copy files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/isaacs/rimraf"&gt;rimraf&lt;/a&gt; - Recursively delete files like &lt;code&gt;rm -rf&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/make-dir"&gt;make-dir&lt;/a&gt; - Recursively create directories like &lt;code&gt;mkdir -p&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/isaacs/node-graceful-fs"&gt;graceful-fs&lt;/a&gt; - Drop-in replacement for the &lt;code&gt;fs&lt;/code&gt; module with various improvements.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/paulmillr/chokidar"&gt;chokidar&lt;/a&gt; - Filesystem watcher which stabilizes events from &lt;code&gt;fs.watch&lt;/code&gt; and &lt;code&gt;fs.watchFile&lt;/code&gt; as well as using native &lt;code&gt;fsevents&lt;/code&gt; on macOS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/find-up"&gt;find-up&lt;/a&gt; - Find a file by walking up parent directories.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/IndigoUnited/node-proper-lockfile"&gt;proper-lockfile&lt;/a&gt; - Inter-process and inter-machine lockfile utility.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/load-json-file"&gt;load-json-file&lt;/a&gt; - Read and parse a JSON file.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/write-json-file"&gt;write-json-file&lt;/a&gt; - Stringify and write JSON to a file atomically.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/npm/fs-write-stream-atomic"&gt;fs-write-stream-atomic&lt;/a&gt; - Like &lt;code&gt;fs.createWriteStream()&lt;/code&gt;, but atomic.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/filenamify"&gt;filenamify&lt;/a&gt; - Convert a string to a valid filename.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kevva/lnfs"&gt;lnfs&lt;/a&gt; - Force create symlinks like &lt;code&gt;ln -fs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bevry/istextorbinary"&gt;istextorbinary&lt;/a&gt; - Check if a file is text or binary.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/szwacz/fs-jetpack"&gt;fs-jetpack&lt;/a&gt; - Completely redesigned file system API for convenience in everyday use.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jprichardson/node-fs-extra"&gt;fs-extra&lt;/a&gt; - Extra methods for the &lt;code&gt;fs&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/pkg-dir"&gt;pkg-dir&lt;/a&gt; - Find the root directory of an npm package.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nspragg/filehound"&gt;filehound&lt;/a&gt; - Flexible and fluent interface for searching the file system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/move-file"&gt;move-file&lt;/a&gt; - Move a file, even works across devices.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/tempy"&gt;tempy&lt;/a&gt; - Get a random temporary file or directory path.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#control-flow"&gt;
  &lt;/a&gt;
  Control flow
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Promises

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/petkaantonov/bluebird"&gt;Bluebird&lt;/a&gt; - Promise library with focus on innovative features and performance.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/pify"&gt;pify&lt;/a&gt; - Promisify a callback-style function.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/delay"&gt;delay&lt;/a&gt; - Delay a promise a specified amount of time.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/promise-memoize"&gt;promise-memoize&lt;/a&gt; - Memoize promise-returning functions, with expire and prefetch.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lpinca/valvelet"&gt;valvelet&lt;/a&gt; - Limit the execution rate of a promise-returning function.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/p-map"&gt;p-map&lt;/a&gt; - Map over promises concurrently.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/promise-fun"&gt;More…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Observables

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/zenparsing/zen-observable"&gt;zen-observable&lt;/a&gt; - Implementation of Observables.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ReactiveX/RxJS"&gt;RxJS&lt;/a&gt; - Reactive programming.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/awesome-observables"&gt;observable-to-promise&lt;/a&gt; - Convert an Observable to a Promise.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/awesome-observables"&gt;More…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Streams

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/caolan/highland"&gt;Highland.js&lt;/a&gt; - Manages synchronous and asynchronous code easily, using nothing more than standard JavaScript and Node-like Streams.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Callbacks

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/each-async"&gt;each-async&lt;/a&gt; - Async concurrent iterator like forEach.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/caolan/async"&gt;async&lt;/a&gt; - Provides straight-forward, powerful functions for working with asynchronicity.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Channels

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ubolonton/js-csp"&gt;js-csp&lt;/a&gt; - Communicating sequential processes for JavaScript (like Clojurescript core.async, or Go).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#streams"&gt;
  &lt;/a&gt;
  Streams
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/rvagg/through2"&gt;through2&lt;/a&gt; - Tiny wrapper around streams2 Transform to avoid explicit subclassing noise.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hughsk/from2"&gt;from2&lt;/a&gt; - Convenience wrapper for ReadableStream, inspired by &lt;code&gt;through2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/get-stream"&gt;get-stream&lt;/a&gt; - Get a stream as a string or buffer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/into-stream"&gt;into-stream&lt;/a&gt; - Convert a buffer/string/array/object into a stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/duplexify"&gt;duplexify&lt;/a&gt; - Turn a writeable and readable stream into a single streams2 duplex stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/pumpify"&gt;pumpify&lt;/a&gt; - Combine an array of streams into a single duplex stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/peek-stream"&gt;peek-stream&lt;/a&gt; - Transform stream that lets you peek the first line before deciding how to parse it.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/maxogden/binary-split"&gt;binary-split&lt;/a&gt; - Newline (or any delimiter) splitter stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jahewson/node-byline"&gt;byline&lt;/a&gt; - Super-simple line-by-line Stream reader.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/first-chunk-stream"&gt;first-chunk-stream&lt;/a&gt; - Transform the first chunk in a stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/pad-stream"&gt;pad-stream&lt;/a&gt; - Pad each line in a stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/feross/multistream"&gt;multistream&lt;/a&gt; - Combine multiple streams into a single stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/substack/stream-combiner2"&gt;stream-combiner2&lt;/a&gt; - Turn a pipeline into a single stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodejs/readable-stream"&gt;readable-stream&lt;/a&gt; - Mirror of Streams2 and Streams3 implementations in core.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/almost/through2-concurrent"&gt;through2-concurrent&lt;/a&gt; - Transform object streams concurrently.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#realtime"&gt;
  &lt;/a&gt;
  Real-time
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/uWebSockets/uWebSockets"&gt;µWebSockets&lt;/a&gt; - Highly scalable WebSocket server &amp;amp; client library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/socketio/socket.io"&gt;Socket.io&lt;/a&gt; - Enables real-time bidirectional event-based communication.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/faye/faye"&gt;Faye&lt;/a&gt; - Real-time client-server message bus, based on Bayeux protocol.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SocketCluster/socketcluster"&gt;SocketCluster&lt;/a&gt; - Scalable HTTP + WebSocket engine which can run on multiple CPU cores.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/primus/primus"&gt;Primus&lt;/a&gt; - An abstraction layer for real-time frameworks to prevent module lock-in.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/deepstreamIO/deepstream.io-client-js"&gt;deepstream.io&lt;/a&gt; - Scalable real-time microservice framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kalm/kalm.js"&gt;Kalm&lt;/a&gt; - Low-level socket router and middleware framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mqttjs/MQTT.js"&gt;MQTT.js&lt;/a&gt; - Client for MQTT - Pub-sub based messaging protocol for use on top of TCP/IP.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/elpheria/rpc-websockets"&gt;rpc-websockets&lt;/a&gt; - JSON-RPC 2.0 implementation over WebSockets.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mcollina/aedes"&gt;Aedes&lt;/a&gt; - Barebone MQTT server that can run on any stream server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#image"&gt;
  &lt;/a&gt;
  Image
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/lovell/sharp"&gt;sharp&lt;/a&gt; - The fastest module for resizing JPEG, PNG, WebP and TIFF images.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/image-type"&gt;image-type&lt;/a&gt; - Detect the image type of a Buffer/Uint8Array.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aheckmann/gm"&gt;gm&lt;/a&gt; - GraphicsMagick and ImageMagick wrapper.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EyalAr/lwip"&gt;lwip&lt;/a&gt; - Lightweight image processor which does not require ImageMagick.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/pica"&gt;pica&lt;/a&gt; - High quality &amp;amp; fast resize (lanczos3) in pure JS. Alternative to canvas drawImage(), when no pixelation allowed.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/oliver-moran/jimp"&gt;jimp&lt;/a&gt; - Image processing in pure JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/probe-image-size"&gt;probe-image-size&lt;/a&gt; - Get the size of most image formats without a full download.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/soldair/node-qrcode"&gt;qrcode&lt;/a&gt; - QR code and bar code generator.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  Text
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ashtuchkin/iconv-lite"&gt;iconv-lite&lt;/a&gt; - Convert character encodings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/string-length"&gt;string-length&lt;/a&gt; - Get the real length of a string - by correctly counting astral symbols and ignoring ansi escape codes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/camelcase"&gt;camelcase&lt;/a&gt; - Convert a dash/dot/underscore/space separated string to camelCase: foo-bar → fooBar.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/escape-string-regexp"&gt;escape-string-regexp&lt;/a&gt; - Escape RegExp special characters.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/execall"&gt;execall&lt;/a&gt; - Find multiple RegExp matches in a string.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/splice-string"&gt;splice-string&lt;/a&gt; - Remove or replace part of a string like &lt;code&gt;Array#splice&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/indent-string"&gt;indent-string&lt;/a&gt; - Indent each line in a string.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/strip-indent"&gt;strip-indent&lt;/a&gt; - Strip leading whitespace from every line in a string.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/detect-indent"&gt;detect-indent&lt;/a&gt; - Detect the indentation of code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mathiasbynens/he"&gt;he&lt;/a&gt; - HTML entity encoder/decoder.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mashpie/i18n-node"&gt;i18n-node&lt;/a&gt; - Simple translation module with dynamic JSON storage.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/babelfish"&gt;babelfish&lt;/a&gt; - i18n with very easy syntax for plurals.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/matcher"&gt;matcher&lt;/a&gt; - Simple wildcard matching.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/unhomoglyph"&gt;unhomoglyph&lt;/a&gt; - Normalize visually similar unicode characters.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/i18next/i18next"&gt;i18next&lt;/a&gt; - Internationalization framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ai/nanoid"&gt;nanoid&lt;/a&gt; - Tiny, secure, URL-friendly, unique string ID generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kurolabs/stegcloak"&gt;StegCloak&lt;/a&gt; - Conceal secrets within strings, in plain sight.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#number"&gt;
  &lt;/a&gt;
  Number
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/random-int"&gt;random-int&lt;/a&gt; - Generate a random integer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/random-float"&gt;random-float&lt;/a&gt; - Generate a random float.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/unique-random"&gt;unique-random&lt;/a&gt; - Generate random numbers that are consecutively unique.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/round-to"&gt;round-to&lt;/a&gt; - Round a number to a specific number of decimal places: &lt;code&gt;1.234&lt;/code&gt; → &lt;code&gt;1.2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#math"&gt;
  &lt;/a&gt;
  Math
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/scijs/ndarray"&gt;ndarray&lt;/a&gt; - Multidimensional arrays.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/josdejong/mathjs"&gt;mathjs&lt;/a&gt; - An extensive math library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/math-clamp"&gt;math-clamp&lt;/a&gt; - Clamp a number.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fibo/algebra"&gt;algebra&lt;/a&gt; - Algebraic structures.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/multimath"&gt;multimath&lt;/a&gt; - Core to create fast image math in WebAssembly and JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#date"&gt;
  &lt;/a&gt;
  Date
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/moment/luxon"&gt;Luxon&lt;/a&gt; - Library for working with dates and times.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/date-fns/date-fns"&gt;date-fns&lt;/a&gt; - Modern date utility.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://momentjs.com"&gt;Moment.js&lt;/a&gt; - Parse, validate, manipulate, and display dates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/iamkun/dayjs"&gt;Day.js&lt;/a&gt; - Immutable date library alternative to Moment.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/felixge/node-dateformat"&gt;dateformat&lt;/a&gt; - Date formatting.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/samverschueren/tz-format"&gt;tz-format&lt;/a&gt; - Format a date with timezone: &lt;code&gt;2015-11-30T10:40:35+01:00&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/floatdrop/node-cctz"&gt;cctz&lt;/a&gt; - Fast parsing, formatting, and timezone conversation for dates.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#url"&gt;
  &lt;/a&gt;
  URL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/normalize-url"&gt;normalize-url&lt;/a&gt; - Normalize a URL.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/humanize-url"&gt;humanize-url&lt;/a&gt; - Humanize a URL: &lt;a href="http://sindresorhus.com"&gt;http://sindresorhus.com&lt;/a&gt; → sindresorhus.com.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/url-unshort"&gt;url-unshort&lt;/a&gt; - Expand shortened URLs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pid/speakingurl"&gt;speakingurl&lt;/a&gt; - Generate a slug from a string with transliteration.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markdown-it/linkify-it"&gt;linkify-it&lt;/a&gt; - Link patterns detector with full unicode support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/snd/url-pattern"&gt;url-pattern&lt;/a&gt; - Easier than regex string matching patterns for URLs and other strings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/embedza"&gt;embedza&lt;/a&gt; - Create HTML snippets/embeds from URLs using info from oEmbed, Open Graph, meta tags.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-validation"&gt;
  &lt;/a&gt;
  Data validation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/hapijs/joi"&gt;joi&lt;/a&gt; - Object schema description language and validator for JavaScript objects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/is-my-json-valid"&gt;is-my-json-valid&lt;/a&gt; - JSON Schema validator that uses code generation to be extremely fast.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nettofarah/property-validator"&gt;property-validator&lt;/a&gt; - Easy property validation for Express.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Atinux/schema-inspector"&gt;schema-inspector&lt;/a&gt; - JSON API sanitization and validation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/epoberezkin/ajv"&gt;ajv&lt;/a&gt; - The fastest JSON Schema validator. Supports v5, v6 and v7 proposals.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ianstormtaylor/superstruct"&gt;Superstruct&lt;/a&gt; - Simple and composable way to validate data in JavaScript (and TypeScript).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#parsing"&gt;
  &lt;/a&gt;
  Parsing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/wooorm/remark"&gt;remark&lt;/a&gt; - Markdown processor powered by plugins.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markdown-it/markdown-it"&gt;markdown-it&lt;/a&gt; - Markdown parser with 100% CommonMark support, extensions and syntax plugins.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/inikulin/parse5"&gt;parse5&lt;/a&gt; - Fast full-featured spec compliant HTML parser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/strip-json-comments"&gt;strip-json-comments&lt;/a&gt; - Strip comments from JSON.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/strip-css-comments"&gt;strip-css-comments&lt;/a&gt; - Strip comments from CSS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/parse-json"&gt;parse-json&lt;/a&gt; - Parse JSON with more helpful errors.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/medialize/URI.js"&gt;URI.js&lt;/a&gt; - URL mutation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/postcss/postcss"&gt;PostCSS&lt;/a&gt; - CSS parser / stringifier.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dominictarr/JSONStream"&gt;JSONStream&lt;/a&gt; - Streaming JSON.parse and stringify.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/neat-csv"&gt;neat-csv&lt;/a&gt; - Fast CSV parser. Callback interface for the above.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/csv-parser"&gt;csv-parser&lt;/a&gt; - Streaming CSV parser that aims to be faster than everyone else.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pegjs/pegjs"&gt;PEG.js&lt;/a&gt; - Simple parser generator that produces fast parsers with excellent error reporting.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lapwinglabs/x-ray"&gt;x-ray&lt;/a&gt; - Web scraping utility.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Hardmath123/nearley"&gt;nearley&lt;/a&gt; - Simple, fast, powerful parsing for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/juliangruber/binary-extract"&gt;binary-extract&lt;/a&gt; - Extract a value from a buffer of JSON without parsing the whole thing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stylecow/stylecow"&gt;Stylecow&lt;/a&gt; - Parse, manipulate and convert modern CSS to make it compatible with all browsers. Extensible with plugins.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/js-yaml"&gt;js-yaml&lt;/a&gt; - Very fast YAML parser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Leonidas-from-XIV/node-xml2js"&gt;xml2js&lt;/a&gt; - XML to JavaScript object converter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zaach/jison"&gt;Jison&lt;/a&gt; - Friendly JavaScript parser generator. It shares genes with Bison, Yacc and family.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/seegno/google-libphonenumber"&gt;google-libphonenumber&lt;/a&gt; - Parse, format, store and validate phone numbers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/TooTallNate/ref"&gt;ref&lt;/a&gt; - Read/write structured binary data in Buffers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dtjohnson/xlsx-populate"&gt;xlsx-populate&lt;/a&gt; - Read/write Excel XLSX.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Chevrotain/chevrotain"&gt;Chevrotain&lt;/a&gt; - Very fast and feature rich parser building toolkit for JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NaturalIntelligence/fast-xml-parser"&gt;fast-xml-parser&lt;/a&gt; - Validate and parse XML.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#humanize"&gt;
  &lt;/a&gt;
  Humanize
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/pretty-bytes"&gt;pretty-bytes&lt;/a&gt; - Convert bytes to a human readable string: &lt;code&gt;1337&lt;/code&gt; → &lt;code&gt;1.34 kB&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/pretty-ms"&gt;pretty-ms&lt;/a&gt; - Convert milliseconds to a human readable string: &lt;code&gt;1337000000&lt;/code&gt; → &lt;code&gt;15d 11h 23m 20s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rauchg/ms.js"&gt;ms&lt;/a&gt; - Tiny millisecond conversion utility.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/AriaMinaei/pretty-error"&gt;pretty-error&lt;/a&gt; - Errors with less clutter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Tjatse/node-readability"&gt;read-art&lt;/a&gt; - Extract readable content from any page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#compression"&gt;
  &lt;/a&gt;
  Compression
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/thejoshwolfe/yazl"&gt;yazl&lt;/a&gt; - Zip.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thejoshwolfe/yauzl"&gt;yauzl&lt;/a&gt; - Unzip.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/archiverjs/node-archiver"&gt;Archiver&lt;/a&gt; - Streaming interface for archive generation, supporting ZIP and TAR.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/pako"&gt;pako&lt;/a&gt; - High speed zlib port to pure js (deflate, inflate, gzip).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mafintosh/tar-stream"&gt;tar-stream&lt;/a&gt; - Streaming tar parser and generator. Also see &lt;a href="https://github.com/mafintosh/tar-fs"&gt;tar-fs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/kevva/decompress"&gt;decompress&lt;/a&gt; - Decompression module with support for &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;tar.gz&lt;/code&gt; and &lt;code&gt;zip&lt;/code&gt; files out of the box.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#network"&gt;
  &lt;/a&gt;
  Network
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/get-port"&gt;get-port&lt;/a&gt; - Get an available port.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/ipify"&gt;ipify&lt;/a&gt; - Get your public IP address.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bevry/getmac"&gt;getmac&lt;/a&gt; - Get the computer MAC address.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/infusion/node-dhcp"&gt;DHCP&lt;/a&gt; - DHCP client and server.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/roccomuso/netcat"&gt;netcat&lt;/a&gt; - Netcat port in pure JS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Drivers

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/brianc/node-postgres"&gt;PostgreSQL&lt;/a&gt; - PostgreSQL client. Pure JavaScript and native libpq bindings.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/luin/ioredis"&gt;Redis&lt;/a&gt; - Redis client.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Level/levelup"&gt;LevelUP&lt;/a&gt; - LevelDB.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mysqljs/mysql"&gt;MySQL&lt;/a&gt; - MySQL client.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apache/couchdb-nano"&gt;couchdb-nano&lt;/a&gt; - CouchDB client.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/aerospike/aerospike-client-nodejs"&gt;Aerospike&lt;/a&gt; - Aerospike client.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/couchbase/couchnode"&gt;Couchbase&lt;/a&gt; - Couchbase client.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mongodb/node-mongodb-native"&gt;MongoDB&lt;/a&gt; - MongoDB driver.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;ODM / ORM

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sequelize/sequelize"&gt;Sequelize&lt;/a&gt; - Multi-dialect ORM. Supports PostgreSQL, SQLite, MySQL, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bookshelf/bookshelf"&gt;Bookshelf&lt;/a&gt; - ORM for PostgreSQL, MySQL and SQLite3 in the style of Backbone.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/robconery/massive-js"&gt;Massive&lt;/a&gt; - PostgreSQL data access tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Automattic/mongoose"&gt;Mongoose&lt;/a&gt; - Elegant MongoDB object modeling.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/balderdashy/waterline"&gt;Waterline&lt;/a&gt; - Datastore-agnostic tool that dramatically simplifies interaction with one or more databases.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/PhilWaldmann/openrecord"&gt;OpenRecord&lt;/a&gt; - ORM for PostgreSQL, MySQL, SQLite3 and RESTful datastores. Similar to ActiveRecord.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vitaly-t/pg-promise"&gt;pg-promise&lt;/a&gt; - PostgreSQL framework for native SQL using promises.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gajus/slonik"&gt;slonik&lt;/a&gt; - PostgreSQL client with strict types, detailed logging and assertions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Vincit/objection.js"&gt;Objection.js&lt;/a&gt; - Lightweight ORM built on the SQL query builder Knex.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/typeorm/typeorm"&gt;TypeORM&lt;/a&gt; - ORM for PostgreSQL, MariaDB, MySQL, SQLite, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mikro-orm/mikro-orm"&gt;MikroORM&lt;/a&gt; - TypeScript ORM based on Data Mapper, Unit of Work and Identity Map patterns. Supports MongoDB, PostgreSQL, MySQL and SQLite.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/prisma/prisma"&gt;Prisma&lt;/a&gt; - Modern database access (ORM alternative). Auto-generated and type-safe query builder in TypeScript. Supports PostgreSQL, MySQL &amp;amp; SQLite.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Query builder

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/tgriesser/knex"&gt;Knex&lt;/a&gt; - Query builder for PostgreSQL, MySQL and SQLite3, designed to be flexible, portable, and fun to use.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Other

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/louischatriot/nedb"&gt;NeDB&lt;/a&gt; - Embedded persistent database written in JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/typicode/lowdb"&gt;Lowdb&lt;/a&gt; - Small JavaScript database powered by Lodash.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lukechilds/keyv"&gt;Keyv&lt;/a&gt; - Simple key-value storage with support for multiple backends.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tommybananas/finale"&gt;Finale&lt;/a&gt; - RESTful endpoint generator for your Sequelize models.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mlaanderson/database-js"&gt;database-js&lt;/a&gt; - Wrapper for multiple databases with a JDBC-like connection.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pkosiec/mongo-seeding"&gt;Mongo Seeding&lt;/a&gt; - Populate MongoDB databases with JavaScript and JSON files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ForbesLindesay/atdatabases"&gt;@databases&lt;/a&gt; - Query PostgreSQL, MySQL and SQLite3 with plain SQL without risking SQL injection.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/oguimbal/pg-mem"&gt;pg-mem&lt;/a&gt; - In-memory PostgreSQL instance for your tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/avajs/ava"&gt;AVA&lt;/a&gt; - Futuristic test runner.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mochajs/mocha"&gt;Mocha&lt;/a&gt; - Feature-rich test framework making asynchronous testing simple and fun.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bcoe/nyc"&gt;nyc&lt;/a&gt; - Code coverage tool built on istanbul that works with subprocesses.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/isaacs/node-tap"&gt;tap&lt;/a&gt; - TAP test framework.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/substack/tape"&gt;tape&lt;/a&gt; - TAP-producing test harness.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/power-assert-js/power-assert"&gt;power-assert&lt;/a&gt; - Provides descriptive assertion messages through the standard assert interface.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mantoni/mochify.js"&gt;Mochify&lt;/a&gt; - TDD with Browserify, Mocha, PhantomJS and WebDriver.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vdemedes/trevor"&gt;trevor&lt;/a&gt; - Run tests against multiple versions of Node.js without switching versions manually or pushing to Travis CI.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alexfernandez/loadtest"&gt;loadtest&lt;/a&gt; - Run load tests for your web application, with an API for automation.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sinonjs/sinon"&gt;Sinon.JS&lt;/a&gt; - Test spies, stubs and mocks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/navit"&gt;navit&lt;/a&gt; - PhantomJS / SlimerJS wrapper to simplify browser test scripting.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pgte/nock"&gt;Nock&lt;/a&gt; - HTTP mocking and expectations.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/theintern/intern"&gt;intern&lt;/a&gt; - Code testing stack.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/h2non/toxy"&gt;toxy&lt;/a&gt; - Hackable HTTP proxy to simulate failure scenarios and network conditions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/hook-std"&gt;hook-std&lt;/a&gt; - Hook and modify stdout/stderr.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/egoist/testen"&gt;testen&lt;/a&gt; - Run tests for multiple versions of Node.js locally with NVM.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nightwatchjs/nightwatch"&gt;Nightwatch&lt;/a&gt; - Automated UI testing framework based on Selenium WebDriver.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/webdriverio/webdriverio"&gt;WebdriverIO&lt;/a&gt; - Automated testing based on the WebDriver protocol.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/jest"&gt;Jest&lt;/a&gt; - Painless JavaScript testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/DevExpress/testcafe"&gt;TestCafe&lt;/a&gt; - Automated browser testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bleenco/abstruse"&gt;abstruse&lt;/a&gt; - Continuous Integration server.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Codeception/CodeceptJS"&gt;CodeceptJS&lt;/a&gt; - End-to-end testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/GoogleChrome/puppeteer"&gt;Puppeteer&lt;/a&gt; - Headless Chrome.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/playwright"&gt;Playwright&lt;/a&gt; - Headless Chromium, WebKit, and Firefox with a single API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ehmicky/nve"&gt;nve&lt;/a&gt; - Run any command on multiple versions of Node.js locally.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dequelabs/axe-core"&gt;axe-core&lt;/a&gt; - Accessibility engine for automated Web UI testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/testcontainers/testcontainers-node"&gt;testcontainers-node&lt;/a&gt; - Provides lightweight, throwaway instances of common databases, Selenium web browsers, or anything else that can run in a Docker container.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/simonepri/upash"&gt;upash&lt;/a&gt; - Unified API for all password hashing algorithms.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cossacklabs/themis"&gt;themis&lt;/a&gt; - Multilanguage framework for making typical encryption schemes easy to use: data at rest, authenticated data exchange, transport protection, authentication, and so on.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apps/guardrails"&gt;GuardRails&lt;/a&gt; - GitHub app that provides security feedback in pull requests.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/animir/node-rate-limiter-flexible"&gt;rate-limiter-flexible&lt;/a&gt; - Brute-force and DDoS attack protection.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/crypto-hash"&gt;crypto-hash&lt;/a&gt; - Async non-blocking hashing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/davesag/jose-simple"&gt;jose-simple&lt;/a&gt; - Encryption and decryption of data using the JOSE (JSON Object Signing and Encryption) standard.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#benchmarking"&gt;
  &lt;/a&gt;
  Benchmarking
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/bestiejs/benchmark.js"&gt;Benchmark.js&lt;/a&gt; - Benchmarking library that supports high-resolution timers and returns statistically significant results.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/logicalparadox/matcha"&gt;matcha&lt;/a&gt; - Simplistic approach to benchmarking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#minifiers"&gt;
  &lt;/a&gt;
  Minifiers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/babel/babili"&gt;babili&lt;/a&gt; - ES2015+ aware minifier based on the Babel toolchain.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mishoo/UglifyJS2"&gt;UglifyJS2&lt;/a&gt; - JavaScript minifier.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jakubpawlowicz/clean-css"&gt;clean-css&lt;/a&gt; - CSS minifier.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Swaagie/minimize"&gt;minimize&lt;/a&gt; - HTML minifier.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/imagemin/imagemin"&gt;imagemin&lt;/a&gt; - Image minifier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/jaredhanson/passport"&gt;Passport&lt;/a&gt; - Simple, unobtrusive authentication.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/simov/grant"&gt;Grant&lt;/a&gt; - OAuth providers for Express, Koa, Hapi, Fastify, AWS Lambda, Azure, Google Cloud, Vercel, and many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#authorization"&gt;
  &lt;/a&gt;
  Authorization
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/stalniy/casl"&gt;CASL&lt;/a&gt; - Isomorphic authorization for UI and API.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/casbin/node-casbin"&gt;node-casbin&lt;/a&gt; - Authorization library that supports access control models like ACL, RBAC and ABAC.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#email"&gt;
  &lt;/a&gt;
  Email
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/andris9/Nodemailer"&gt;Nodemailer&lt;/a&gt; - The fastest way to handle email.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/eleith/emailjs"&gt;emailjs&lt;/a&gt; - Send text/HTML emails with attachments to any SMTP server.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/niftylettuce/email-templates"&gt;email-templates&lt;/a&gt; - Create, preview, and send custom email templates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mjmlio/mjml"&gt;MJML&lt;/a&gt; - Markup language designed to reduce the pain of creating responsive emails.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#job-queues"&gt;
  &lt;/a&gt;
  Job queues
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/OptimalBits/bull"&gt;bull&lt;/a&gt; - Persistent job and message queue.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rschmukler/agenda"&gt;agenda&lt;/a&gt; - MongoDB-backed job scheduling.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeca/idoit"&gt;idoit&lt;/a&gt; - Redis-backed job queue engine with advanced job control.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/taskrabbit/node-resque"&gt;node-resque&lt;/a&gt; - Redis-backed job queue.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/smrchy/rsmq"&gt;rsmq&lt;/a&gt; - Redis-backed message queue.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bee-queue/bee-queue"&gt;bee-queue&lt;/a&gt; - High-performance Redis-backed job queue.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/weyoss/redis-smq"&gt;RedisSMQ&lt;/a&gt; - Simple high-performance Redis message queue with real-time monitoring.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bbc/sqs-consumer"&gt;sqs-consumer&lt;/a&gt; - Build Amazon Simple Queue Service (SQS) based apps without the boilerplate.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/diamondio/better-queue"&gt;better-queue&lt;/a&gt; - Simple and efficient job queue when you cannot use Redis.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-management"&gt;
  &lt;/a&gt;
  Node.js management
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/tj/n"&gt;n&lt;/a&gt; - Node.js version management.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/isaacs/nave"&gt;nave&lt;/a&gt; - Virtual Environments for Node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ekalinin/nodeenv"&gt;nodeenv&lt;/a&gt; - Node.js virtual environment compatible to Python's virtualenv.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/coreybutler/nvm-windows"&gt;nvm for Windows&lt;/a&gt; - Version management for Windows.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodenv/nodenv"&gt;nodenv&lt;/a&gt; - Version manager that is similar to Ruby's rbenv. It supports auto version switching.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Schniz/fnm"&gt;fnm&lt;/a&gt; - Cross-platform Node.js version manager built in Rust.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#natural-language-processing"&gt;
  &lt;/a&gt;
  Natural language processing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/wooorm/retext"&gt;retext&lt;/a&gt; - An extensible natural language system.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/wooorm/franc"&gt;franc&lt;/a&gt; - Detect the language of text.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/leven"&gt;leven&lt;/a&gt; - Measure the difference between two strings using the Levenshtein distance algorithm.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NaturalNode/natural"&gt;natural&lt;/a&gt; - Natural language facility.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/axa-group/nlp.js"&gt;nlp.js&lt;/a&gt; - Building bots, with entity extraction, sentiment analysis, automatic language identify, and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#process-management"&gt;
  &lt;/a&gt;
  Process management
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Unitech/pm2"&gt;PM2&lt;/a&gt; - Advanced Process Manager.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/remy/nodemon"&gt;nodemon&lt;/a&gt; - Monitor for changes in your app and automatically restart the server.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/coreybutler/node-mac"&gt;node-mac&lt;/a&gt; - Run scripts as a native Mac daemon and log to the console app.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/coreybutler/node-linux"&gt;node-linux&lt;/a&gt; - Run scripts as native system service and log to syslog.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/coreybutler/node-windows"&gt;node-windows&lt;/a&gt; - Run scripts as a native Windows service and log to the Event viewer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/petruisfan/node-supervisor"&gt;supervisor&lt;/a&gt; - Restart scripts when they crash or restart when a &lt;code&gt;*.js&lt;/code&gt; file changes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/phusion/passenger"&gt;Phusion Passenger&lt;/a&gt; - Friendly process manager that integrates directly into Nginx.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#automation"&gt;
  &lt;/a&gt;
  Automation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/octalmage/robotjs"&gt;robotjs&lt;/a&gt; - Desktop Automation: control the mouse, keyboard and read the screen.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nut-tree/nut.js"&gt;nut.js&lt;/a&gt; - Cross-platform native GUI automation / testing framework with image matching capabilities which integrates with Jest.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ast"&gt;
  &lt;/a&gt;
  AST
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ternjs/acorn"&gt;Acorn&lt;/a&gt; - Tiny, fast JavaScript parser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/babel/babel/tree/master/packages/babel-parser"&gt;babel-parser&lt;/a&gt; - JavaScript parser used in Babel.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cherow/cherow"&gt;cherow&lt;/a&gt; - JavaScript parser with focus on performance and stability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#static-site-generators"&gt;
  &lt;/a&gt;
  Static site generators
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/jnordberg/wintersmith"&gt;Wintersmith&lt;/a&gt; - Flexible, minimalistic, multi-platform static site generator.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/assemble/assemble/"&gt;Assemble&lt;/a&gt; - Static site generator for Node.js, Grunt.js, and Yeoman.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/docpad/docpad"&gt;DocPad&lt;/a&gt; - Static site generator with dynamic abilities and huge plugin ecosystem.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/phenomic/phenomic"&gt;Phenomic&lt;/a&gt; - Modern static website generator based on the React and Webpack ecosystem.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/QingWei-Li/docsify"&gt;docsify&lt;/a&gt; - Markdown documentation site generator with no statically built HTML files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/brandonweiss/charge"&gt;Charge&lt;/a&gt; - Opinionated, zero-config static site generator using JSX and MDX.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#content-management-systems"&gt;
  &lt;/a&gt;
  Content management systems
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/keystonejs/keystone"&gt;KeystoneJS&lt;/a&gt; - CMS and web application platform built on Express and MongoDB.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/apostrophecms/apostrophe"&gt;ApostropheCMS&lt;/a&gt; - Content management system with an emphasis on intuitive front end content editing and administration built on Express and MongoDB.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/strapi/strapi"&gt;Strapi&lt;/a&gt; - Content Management Framework (headless-CMS) to build powerful APIs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tipeio/tipe"&gt;Tipe&lt;/a&gt; - Developer-first content management system with GraphQL and REST API from a schema file.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fiction-com/factor"&gt;Factor&lt;/a&gt; - Vue.js dashboard framework and headless CMS.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SoftwareBrothers/admin-bro"&gt;AdminBro&lt;/a&gt; - Auto-generated admin panel with CRUD for all your resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#forum"&gt;
  &lt;/a&gt;
  Forum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/NodeBB/NodeBB"&gt;nodeBB&lt;/a&gt; - Forum platform for the modern web.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#blogging"&gt;
  &lt;/a&gt;
  Blogging
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/TryGhost/Ghost"&gt;Ghost&lt;/a&gt; - Simple, powerful publishing platform.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/hexojs/hexo"&gt;Hexo&lt;/a&gt; - Fast, simple and powerful blogging framework.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#weird"&gt;
  &lt;/a&gt;
  Weird
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/cows"&gt;cows&lt;/a&gt; - ASCII cows.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/superb"&gt;superb&lt;/a&gt; - Get superb like words.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/cat-names"&gt;cat-names&lt;/a&gt; - Get popular cat names.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/dog-names"&gt;dog-names&lt;/a&gt; - Get popular dog names.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/superheroes"&gt;superheroes&lt;/a&gt; - Get superhero names.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/supervillains"&gt;supervillains&lt;/a&gt; - Get supervillain names.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/maxogden/cool-ascii-faces"&gt;cool-ascii-faces&lt;/a&gt; - Get some cool ascii faces.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/melaniecebula/cat-ascii-faces"&gt;cat-ascii-faces&lt;/a&gt; - &lt;code&gt;₍˄·͈༝·͈˄₎◞ ̑̑ෆ⃛ (=ↀωↀ=)✧ (^･o･^)ﾉ”&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SkyHacks/nerds"&gt;nerds&lt;/a&gt; - Get data from nerdy topics like Harry Potter, Star Wars, and Pokémon.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#serialization"&gt;
  &lt;/a&gt;
  Serialization
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/kesla/node-snappy"&gt;snappy&lt;/a&gt; - Native bindings for Google's Snappy compression library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/dcodeIO/protobuf.js"&gt;protobuf&lt;/a&gt; - Implementation of Protocol Buffers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/compactr/compactr.js"&gt;compactr&lt;/a&gt; - Implementation of the Compactr protocol.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#miscellaneous"&gt;
  &lt;/a&gt;
  Miscellaneous
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/execa"&gt;execa&lt;/a&gt; - Better &lt;code&gt;child_process&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cheeriojs/cheerio"&gt;cheerio&lt;/a&gt; - Fast, flexible, and lean implementation of core jQuery designed specifically for the server.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/atom/electron"&gt;Electron&lt;/a&gt; - Build cross platform desktop apps with web technologies. &lt;em&gt;(You might like &lt;a href="https://github.com/sindresorhus/awesome-electron"&gt;awesome-electron&lt;/a&gt;)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/open"&gt;open&lt;/a&gt; - Opens stuff like websites, files, executables.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/hasha"&gt;hasha&lt;/a&gt; - Hashing made simple. Get the hash of a buffer/string/stream/file.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/dot-prop"&gt;dot-prop&lt;/a&gt; - Get a property from a nested object using a dot path.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/onetime"&gt;onetime&lt;/a&gt; - Only run a function once.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/mem"&gt;mem&lt;/a&gt; - Memoize functions - an optimization technique used to speed up consecutive function calls by caching the result of calls with identical input.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/import-fresh"&gt;import-fresh&lt;/a&gt; - Import a module while bypassing the cache.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/strip-bom"&gt;strip-bom&lt;/a&gt; - Strip UTF-8 byte order mark (BOM) from a string/buffer/stream.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/os-locale"&gt;os-locale&lt;/a&gt; - Get the system locale.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mscdex/ssh2"&gt;ssh2&lt;/a&gt; - SSH2 client and server module.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/markelog/adit"&gt;adit&lt;/a&gt; - SSH tunneling made simple.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/import-lazy"&gt;import-lazy&lt;/a&gt; - Import a module lazily.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/file-type"&gt;file-type&lt;/a&gt; - Detect the file type of a Buffer.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/SGrondin/bottleneck"&gt;Bottleneck&lt;/a&gt; - Rate limiter that makes throttling easy.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/ow"&gt;ow&lt;/a&gt; - Function argument validation for humans.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/audreyt/node-webworker-threads"&gt;webworker-threads&lt;/a&gt; - Lightweight Web Worker API implementation with native threads.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/clipboardy"&gt;clipboardy&lt;/a&gt; - Access the system clipboard (copy/paste).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mapbox/node-pre-gyp"&gt;node-pre-gyp&lt;/a&gt; - Makes it easy to publish and install Node.js C++ addons from binaries.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/peterbraden/node-opencv"&gt;opencv&lt;/a&gt; - Bindings for OpenCV. The defacto computer vision library.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/motdotla/dotenv"&gt;dotenv&lt;/a&gt; - Load environment variables from .env file.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/remote-git-tags"&gt;remote-git-tags&lt;/a&gt; - Get tags from a remote git repo.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/npm/node-semver"&gt;semver&lt;/a&gt; - Semantic version parser.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Marak/Faker.js"&gt;Faker.js&lt;/a&gt; - Generate massive amounts of fake data.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodegit/nodegit"&gt;nodegit&lt;/a&gt; - Native bindings to Git.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/pigulla/json-strictify"&gt;json-strictify&lt;/a&gt; - Safely serialize a value to JSON without data loss or going into an infinite loop.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/resolve-from"&gt;resolve-from&lt;/a&gt; - Resolve the path of a module like &lt;code&gt;require.resolve()&lt;/code&gt; but from a given path.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/cgiffard/node-simplecrawler"&gt;simplecrawler&lt;/a&gt; - Event driven web crawler.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tmpvar/jsdom"&gt;jsdom&lt;/a&gt; - JavaScript implementation of HTML and the DOM.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/airbnb/hypernova"&gt;hypernova&lt;/a&gt; - Server-side rendering your JavaScript views.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/is"&gt;@sindresorhus/is&lt;/a&gt; - Type check values.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/simonepri/env-dot-prop"&gt;env-dot-prop&lt;/a&gt; - Get, set, or delete nested properties of process.env using a dot path.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/emittery"&gt;emittery&lt;/a&gt; - Simple and modern async event emitter.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gkozlenko/node-video-lib"&gt;node-video-lib&lt;/a&gt; - Pure JavaScript library for working with MP4 and FLV video files and creating MPEG-TS chunks for HLS streaming.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/patrickjuchli/basic-ftp"&gt;basic-ftp&lt;/a&gt; – FTP/FTPS client.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/xxczaki/cashify"&gt;cashify&lt;/a&gt; - Currency conversion.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Geode-solutions/genepi"&gt;genepi&lt;/a&gt; - Automatically generate a native Node.js addon from C++ code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/typicode/husky"&gt;husky&lt;/a&gt; - Create Git hook scripts.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ds300/patch-package"&gt;patch-package&lt;/a&gt; - Make and preserve fixes to npm dependencies.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mifi/editly"&gt;editly&lt;/a&gt; - Declarative video editing API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tutorials"&gt;
  &lt;/a&gt;
  Tutorials
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/i0natan/nodebestpractices"&gt;Node.js Best Practices&lt;/a&gt; - Summary and curation of the top-ranked content on Node.js best practices, available in multiple languages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nodeschool"&gt;Nodeschool&lt;/a&gt; - Learn Node.js with interactive lessons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/maxogden/art-of-node/#the-art-of-node"&gt;The Art of Node&lt;/a&gt; - An introduction to Node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/substack/stream-handbook"&gt;stream-handbook&lt;/a&gt; - How to write Node.js programs with streams.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/mattdesl/module-best-practices"&gt;module-best-practices&lt;/a&gt; - Some good practices when writing new npm modules.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://thenodeway.io"&gt;The Node Way&lt;/a&gt; - An entire philosophy of Node.js best practices and guiding principles exists for writing maintainable modules, scalable applications, and code that is actually pleasant to read.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/azat-co/you-dont-know-node"&gt;You Don't Know Node.js&lt;/a&gt; - Introduction to Node.js core features and asynchronous JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ehmicky/portable-node-guide"&gt;Portable Node.js guide&lt;/a&gt; - Practical guide on how to write portable/cross-platform Node.js code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://frameworkless.js.org/course"&gt;Build a real web app with no frameworks&lt;/a&gt; - A set of video tutorials/livestreams to help you build and deploy a real, live web app using a handful of simple libraries and the core Node.js modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discovery"&gt;
  &lt;/a&gt;
  Discovery
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://npms.io"&gt;npms&lt;/a&gt; - Superb package search with deep analysis of package quality using a &lt;a href="https://npms.io/about"&gt;myriad of metrics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://npmaddict.com"&gt;npm addict&lt;/a&gt; - Your daily injection of npm packages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://npmcompare.com"&gt;npmcompare.com&lt;/a&gt; - Compare and discover npm packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#articles"&gt;
  &lt;/a&gt;
  Articles
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.joyent.com/node-js/production/design/errors"&gt;Error Handling in Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ponyfoo.com/articles/teach-yourself-nodejs-in-10-steps"&gt;Teach Yourself Node.js in 10 Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@yoshuawuyts/mastering-the-filesystem-in-node-js-4706b7cb0801"&gt;Mastering the filesystem in Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodesource.com/blog/semver-a-primer/"&gt;Semver: A Primer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodesource.com/blog/semver-tilde-and-caret/"&gt;Semver: Tilde and Caret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodesource.com/blog/why-asynchronous/"&gt;Why Asynchronous?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodesource.com/blog/understanding-the-nodejs-event-loop/"&gt;Understanding the Node.js Event Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodesource.com/blog/understanding-object-streams/"&gt;Understanding Object Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/noffle/art-of-readme"&gt;Art of README&lt;/a&gt; - Learn the art of writing quality READMEs.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snipcart.com/blog/graphql-nodejs-express-tutorial"&gt;Using Express to Quickly Build a GraphQL Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#newsletters"&gt;
  &lt;/a&gt;
  Newsletters
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://nodeweekly.com"&gt;Node Weekly&lt;/a&gt; - Weekly e-mail round-up of Node.js news and articles.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nmotw.in"&gt;Node Module Of The Week!&lt;/a&gt; - Weekly dose of hand picked node modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jo_B4LTHi3I"&gt;Introduction to Node.js with Ryan Dahl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.bevry.me/hands-on-with-node.js/preface"&gt;Hands on with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://nodetuts.com"&gt;Nodetuts&lt;/a&gt; - Series of talks, including TCP &amp;amp; HTTP API servers, async programming, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://v8.dev/blog/trash-talk"&gt;V8 Garbage Collector&lt;/a&gt; - Trash talk about the V8 garbage collector.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=M3BM9TB-8yA"&gt;10 Things I Regret About Node.js by Ryan Dahl&lt;/a&gt; - Insightful talk by the creator of Node.js about some of its limitions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.manning.com/livevideo/mastering-rest-apis-in-nodejs"&gt;Mastering REST APIs in Node.js: Zero-To-Hero&lt;/a&gt; - Video course on how to make REST APIs using Node.js.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=_1xa8Bsho6A"&gt;Make a vanilla Node.js REST API&lt;/a&gt; - Building a REST API without using a framework like Express.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=FrufJFBSoQY"&gt;Google I/O 2009 - V8: High Performance JavaScript Engine&lt;/a&gt; - The basics of V8 architecture and how it optimizes JavaScript execution.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=UJPdhx5zTaw"&gt;Google I/O 2012 - Breaking the JavaScript Speed Limit with V8&lt;/a&gt; - How V8 optimizes JavaScript execution.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=VhpdsjBUS3g"&gt;Google I/O 2013 - Accelerating Oz with V8: Follow the Yellow Brick Road to JavaScript Performance&lt;/a&gt; - How to detect app bottlenecks and optimize performance with V8 knowledge.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=OCjvhCFFPTw"&gt;Node.js Internal Architecture | Ignition, Turbofan, Libuv&lt;/a&gt; - How Node.js works internally, with a focus on V8 and libuv.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=_c51fcXRLGw"&gt;Introduction to libuv: What's a Unicorn Velociraptor?&lt;/a&gt; - &lt;code&gt;libuv&lt;/code&gt; architecture, thread pool, and event loop, with its source code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=kCJ3PFU8Ke8"&gt;libuv Cross platform asynchronous i/o&lt;/a&gt; - &lt;code&gt;libuv&lt;/code&gt; architecture in detail, such as where it's actually using threads.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=oPo4EQmkjvY"&gt;You Don't Know Node - ForwardJS San Francisco&lt;/a&gt; - Explaining Node.js internals with quizzes about V8, libuv, event loop, module, stream, and cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.manning.com/books/node-js-in-action-second-edition"&gt;Node.js in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Node-js-Practice-Alex-R-Young/dp/1617290939"&gt;Node.js in Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://visionmedia.github.io/masteringnode/"&gt;Mastering Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pragprog.com/book/jwnode2/node-js-8-the-right-way"&gt;Node.js 8 the Right Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Professional-Node-js-Building-Javascript-Scalable-ebook/dp/B009L7QETY/"&gt;Professional Node.js: Building JavaScript Based Scalable Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://practicalnodebook.com"&gt;Practical Node.js: Building Real-World Scalable Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.mixu.net/node/"&gt;Mixu's Node book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://proexpressjs.com"&gt;Pro Express.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Secure-Your-Node-js-Web-Application/dp/1680500856"&gt;Secure Your Node.js Web Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.manning.com/books/express-in-action"&gt;Express in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Practical-Modern-JavaScript-Dive-Future/dp/149194353X"&gt;Practical Modern JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Mastering-Modular-JavaScript-Nicolas-Bevacqua/dp/1491955686/"&gt;Mastering Modular JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.manning.com/books/get-programming-with-node-js"&gt;Get Programming with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/dp/1838558756"&gt;Node.js Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nodejsdesignpatterns.com"&gt;Node.js Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#blogs"&gt;
  &lt;/a&gt;
  Blogs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/blog/"&gt;Node.js blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://webapplog.com/tag/node-js/"&gt;webapplog.com&lt;/a&gt; - Blog posts on Node.js and JavaScript from the author of Practical Node.js and Pro Express.js Azat Mardan.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#courses"&gt;
  &lt;/a&gt;
  Courses
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://learnnode.com/friend/AWESOME"&gt;Learn to build apps and APIs with Node.js&lt;/a&gt; - Video course by Wes Bos.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codeschool.com/courses/real-time-web-with-node-js"&gt;Real Time Web with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/understand-nodejs"&gt;Learn and Understand Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cheatsheets"&gt;
  &lt;/a&gt;
  Cheatsheets
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/azat-co/cheatsheets/blob/master/express4"&gt;Express.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/stephenplusplus/stream-faqs"&gt;Stream FAQs&lt;/a&gt; - Answering common questions about streams, covering pagination, events, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/jesusprubio/strong-node"&gt;Strong Node.js&lt;/a&gt; - Checklist for source code security analysis of a Node.js web service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/octolinker/jlmafbaeoofdegohdhinkhilhclaklkp"&gt;OctoLinker&lt;/a&gt; - Chrome extension that linkifies dependencies in package.json, .js, .jsx, .coffee and .md files on GitHub.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/npm-hub/kbbbjimdjbjclaebffknlabpogocablj"&gt;npm-hub&lt;/a&gt; - Chrome extension to display npm dependencies at the bottom of a repo's readme.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://blog.tonicdev.com/2015/09/30/embedded-tonic.html"&gt;RunKit&lt;/a&gt; - Embed a Node.js environment on any website.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/github-npm-stats/oomfflokggoffaiagenekchfnpighcef"&gt;github-npm-stats&lt;/a&gt; - Chrome extension that displays npm download stats on GitHub.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://semver.npmjs.com"&gt;npm semver calculator&lt;/a&gt; - Visually explore what versions of a package a semver range matches.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codesandbox.io/s/node-http-server-node"&gt;CodeSandbox&lt;/a&gt; - Online IDE and prototyping.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitter.im/nodejs/node"&gt;Gitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://webchat.freenode.net/?channels=node.js"&gt;&lt;code&gt;#node.js&lt;/code&gt; on Freenode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/tagged/node.js"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/node"&gt;Reddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nodejs"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hashnode.com/n/nodejs"&gt;Hashnode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discordapp.com/invite/96WGtJt"&gt;Discord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#miscellaneous"&gt;
  &lt;/a&gt;
  Miscellaneous
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://nodebots.io"&gt;nodebots&lt;/a&gt; - Robots powered by JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/node-module-boilerplate"&gt;node-module-boilerplate&lt;/a&gt; - Boilerplate to kickstart creating a node module.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sheerun/modern-node"&gt;modern-node&lt;/a&gt; - Toolkit for creating node modules with Jest, Prettier, ESLint, and Standard.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/generator-nm"&gt;generator-nm&lt;/a&gt; - Scaffold out a node module.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Microsoft/nodejs-guidelines"&gt;Microsoft Node.js Guidelines&lt;/a&gt; - Tips, tricks, and resources for working with Node.js on Microsoft platforms.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sindresorhus/module-requests"&gt;Module Requests &amp;amp; Ideas&lt;/a&gt; - Request a JavaScript module you wish existed or get ideas for modules.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thlorenz/v8-perf"&gt;v8-perf&lt;/a&gt; - Notes and resources related to V8 and thus Node.js performance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This Content is distributed under the &lt;a href="http://creativecommons.org/publicdomain/zero/1.0/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4_3ZEhI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://i.creativecommons.org/p/zero/1.0/88x31.png" alt="CC0"&gt;&lt;/a&gt; license.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>The Ultimate HTML &amp; CSS Cheatsheet</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Tue, 07 Sep 2021 06:12:42 +0000</pubDate>
      <link>https://dev.to/rainboestrykr/the-ultimate-html-css-cheatsheet-45an</link>
      <guid>https://dev.to/rainboestrykr/the-ultimate-html-css-cheatsheet-45an</guid>
      <description>&lt;h2&gt;
  &lt;a href="#html-cheatsheet"&gt;
  &lt;/a&gt;
  HTML Cheatsheet
&lt;/h2&gt;

&lt;p&gt;Structure&lt;/p&gt;

&lt;p&gt;This is the basic template or barebone structure of HTML.&lt;/p&gt;

&lt;p&gt;Boilerplate&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Headings&lt;/p&gt;

&lt;p&gt;There are six headings available in HTML, H1 is the largest among all, and H6 is the smallest.&lt;/p&gt;

&lt;p&gt;h1 Tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Heading 1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;h2 Tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Heading 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;h3 Tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Heading 3&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;h4 Tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Heading 4&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;h5 Tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;Heading 5&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;h6 Tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h6&amp;gt;&lt;/span&gt;Heading 6&lt;span class="nt"&gt;&amp;lt;/h6&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Container&lt;/p&gt;

&lt;p&gt;Container tags are the tags that contain some data such as text, image, etc. There are several container tags in HTML.&lt;/p&gt;

&lt;p&gt;div tag&lt;br&gt;
div tag or division tag is used to make blocks or divisions in the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt; This is div block &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;span tag&lt;br&gt;
span is a container for inline content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt; This is span block &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;p tag&lt;br&gt;
Paragraph&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; This is a paragraph &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;pre tag&lt;br&gt;
pre tag represents pre-formatted text&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt; Hello World &lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;code tag&lt;br&gt;
code tag is used to represent source codes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;
import python
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Text Formatting&lt;/p&gt;

&lt;p&gt;Text formatting tags are used to format text or data of HTML documents. You can do certain things like creating italic, bold, strong text to make your document look more attractive and understandable.&lt;/p&gt;

&lt;p&gt;bold tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;I'm bold text&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;strong tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;I'm important text&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;italics&lt;/em&gt; tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;I'm italic text&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;em tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;Emphasized text&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;sub tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sub&amp;gt;&lt;/span&gt;Subscript&lt;span class="nt"&gt;&amp;lt;/sub&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;sup tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;Superscript&lt;span class="nt"&gt;&amp;lt;/sup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lists&lt;/p&gt;

&lt;p&gt;Lists can be either numerical, alphabetic, bullet, or other symbols. You can specify list type and list items in HTML for the clean document.&lt;/p&gt;

&lt;p&gt;Ordered list tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Data 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Data 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Data 3&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;unordered list tag&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Your Data&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Your Data&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Media&lt;/p&gt;

&lt;p&gt;Media is anything that is present in digital form such as image, video, audio, etc.&lt;/p&gt;

&lt;p&gt;audio tag&lt;/p&gt;

&lt;p&gt;It is used to embed sound content in the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;audio&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"demo.mp3"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"audio/mpeg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Your browser does not support the audio element.
&lt;span class="nt"&gt;&amp;lt;/audio&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;img tag&lt;/p&gt;

&lt;p&gt;It is used to embed or import image in a webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"Source_of_image"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Alternate text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;video tag&lt;/p&gt;

&lt;p&gt;It is used to embed video in the webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"480"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"demo_move.mp4"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"video/mp4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Your browser does not support the video tag.
&lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Table&lt;/p&gt;

&lt;p&gt;A table is a collection of rows and columns. It is used to represent data in tabular form.&lt;/p&gt;

&lt;p&gt;Table Structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;caption&amp;gt;&lt;/span&gt;Demo Table&lt;span class="nt"&gt;&amp;lt;/caption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Column1&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;th&lt;/span&gt; &lt;span class="na"&gt;colspan=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Column2&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data1&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data1&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tfoot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Data&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tfoot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Links&lt;br&gt;
Links are clickable text that can redirect you to some other page.&lt;/p&gt;

&lt;p&gt;a tag&lt;br&gt;
a or anchor tag defines a hyperlink.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.abhiraj.glitch.me/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Visit My Portfolio&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Form&lt;/p&gt;

&lt;p&gt;Sample Form&lt;/p&gt;

&lt;p&gt;Form is used to collect user's input, generally user's data is sent to server for further processing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/action.php"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Name: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Age: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"90"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;step=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;selected=&lt;/span&gt;&lt;span class="s"&gt;"selected"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"male"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Male&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"female"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Female&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;"checked"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"newsletter"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"daily"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; Daily &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"newsletter"&lt;/span&gt;
&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"weekly"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; Weekly&lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;cols=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"comments"&lt;/span&gt; &lt;span class="na"&gt;rows=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comment&lt;span class="nt"&gt;&amp;lt;/textarea&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"terms"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"tandc"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;Accept terms&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Characters &amp;amp; Symbols&lt;br&gt;
Some symbols are not directly present on the keyboard, but there are some ways to use them in HTML documents. We can display them either by entity name, decimal, or hexadecimal value.&lt;/p&gt;

&lt;p&gt;Copyright Symbol (©)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Less than (&amp;lt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;lt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Greater than (&amp;gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ampersand (&amp;amp;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="ni"&gt;&amp;amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dollar ($)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="ni"&gt;&amp;amp;dollar;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Random Text&lt;br&gt;
Elon Musk&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Elon Reeve Musk FRS is an entrepreneur and business magnate. He is the founder, CEO, and Chief Engineer at SpaceX; early stage investor, CEO, and Product Architect of Tesla, Inc.; founder of The Boring Company; and co-founder of Neuralink and OpenAI. A billionaire, Musk is one of the richest people in the world.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Semantic Elements&lt;/p&gt;

&lt;p&gt;Semantic elements are those elements that are self describable, i.e., from their name itself, you can understand their meaning.&lt;/p&gt;

&lt;p&gt;section tag&lt;br&gt;
It defines a section in the document&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;This is a section&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;article tag&lt;br&gt;
It represents self-contained content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt; Enter your data here &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;aside tag&lt;br&gt;
It is used to place content in the sidebar&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt; Your data &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-cheatsheet"&gt;
  &lt;/a&gt;
  CSS Cheatsheet
&lt;/h2&gt;

&lt;p&gt;Font&lt;/p&gt;

&lt;p&gt;There are many properties related to the font, such as the face, weight, style, etc. These properties allow you to change the style or complete look of your text.&lt;/p&gt;

&lt;p&gt;Font-Family&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Segoe UI'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;Tahoma&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;Geneva&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;Verdana&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;sans-serif&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Font-Style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;italic&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Font-Variant&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;font-variant&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;small-caps&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Font-Weight&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;font-weight&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Font-Size&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;larger&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Font&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;font&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="nt"&gt;variant&lt;/span&gt; &lt;span class="nt"&gt;weight&lt;/span&gt; &lt;span class="nt"&gt;size&lt;/span&gt; &lt;span class="nt"&gt;family&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Text&lt;/p&gt;

&lt;p&gt;Text properties allow one to manipulate alignment, spacing, decoration, indentation, etc., in the document.&lt;/p&gt;

&lt;p&gt;Text-Align&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;text-align&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;justify&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Letter-Spacing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;letter-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Text-Decoration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;underline&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Word-Spacing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;word-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="nt"&gt;em&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Text-Transform&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;text-transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;uppercase&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Text-Indent&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;text-indent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Line-Height&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;line-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Background&lt;/p&gt;

&lt;p&gt;As the name suggests, these properties are related to background, i.e., you can change the color, image, position, size, etc., of the document.&lt;/p&gt;

&lt;p&gt;Background-Image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;"Path"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Background-Position&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt; &lt;span class="nt"&gt;top&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Background-Size&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;cover&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Background-Repeat&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-repeat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;no-repeat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Background-Attachment&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-attachment&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;scroll&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Background-Color&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;fuchsia&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Background&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;color&lt;/span&gt; &lt;span class="nt"&gt;image&lt;/span&gt; &lt;span class="nt"&gt;repeat&lt;/span&gt; &lt;span class="nt"&gt;attachment&lt;/span&gt; &lt;span class="nt"&gt;position&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Border&lt;/p&gt;

&lt;p&gt;Border properties are used to change the style, radius, color, etc., of buttons or other items of the document.&lt;/p&gt;

&lt;p&gt;Border-Width&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Border-Style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;solid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Border-Color&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;aqua&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Border-Radius&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Border&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;width&lt;/span&gt; &lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Box Model&lt;/p&gt;

&lt;p&gt;In laymen's terms, the CSS box model is a container that wraps around every HTML element. It consists of margins, borders, padding, and the actual content. It is used to create the design and layout of web pages.&lt;/p&gt;

&lt;p&gt;Float&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clear&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;both&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Display&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;block&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Height&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;fit-content&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Width&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Margin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;top&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Padding&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;top&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Overflow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;overflow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;hidden&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visibility&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;visibility&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Colors&lt;/p&gt;

&lt;p&gt;With the help of the color property, one can give color to text, shape, or any other object.&lt;/p&gt;

&lt;p&gt;Color&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;cornsilk&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Opacity&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;opacity&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Template Layout&lt;/p&gt;

&lt;p&gt;Specifies the visual look of the content inside a template&lt;/p&gt;

&lt;p&gt;Box-Align&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;box-align&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Box-Direction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;box-direction&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Box-Flex&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;box-flex&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Box-Flex-Group&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;box-flex-group&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Box-Orient&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;box-orient&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Box-Pack&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;box-pack&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;justify&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Box-Sizing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;box-sizing&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;margin-box&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;max-width&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;800&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;min-width&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;500&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;max-height&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;max-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;min-height&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;min-height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Table&lt;/p&gt;

&lt;p&gt;Table properties are used to give style to the tables in the document. You can change many things like border-spacing, table layout, caption, etc.&lt;/p&gt;

&lt;p&gt;Border-Collapse&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-collapse&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;separate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Empty-Cells&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;empty-cells&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;show&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Border-Spacing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;border-spacing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Table-Layout&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;table-layout&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Caption-Side&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;caption-side&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Columns&lt;/p&gt;

&lt;p&gt;These properties are used explicitly with columns of the tables, and they are used to give the table an incredible look.&lt;/p&gt;

&lt;p&gt;Column-Count&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;column-count&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Column-Gap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;column-gap&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Column-rule-width&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;column-rule-width&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;medium&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Column-rule-style&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;column-rule-style&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;dotted&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Column-rule-color&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;column-rule-color&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Column-width&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;column-width&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Column-span&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;column-span&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;all&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List &amp;amp; Markers&lt;/p&gt;

&lt;p&gt;List and marker properties are used to customize lists in the document.&lt;/p&gt;

&lt;p&gt;List-style-type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;list-style-type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;square&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List-style-position&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;list-style-position&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;List-style-image&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;list-style-image&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="nc"&gt;.gif&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Marker-offset&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;marker-offset&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Animations&lt;/p&gt;

&lt;p&gt;CSS animations allow one to animate transitions or other media files on the web page.&lt;/p&gt;

&lt;p&gt;Animation-name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-name&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;myanimation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Animation-duration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-duration&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Animation-timing-function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-timing-function&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;ease&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Animation-delay&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-delay&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Animation-iteration-count&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-iteration-count&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Animation-direction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-direction&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Animation-play-state&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-play-state&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;running&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Animation-fill-mode&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;animation-fill-mode&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;both&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Transitions&lt;/p&gt;

&lt;p&gt;Transitions let you define the transition between two states of an element.&lt;/p&gt;

&lt;p&gt;Transition-property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transition-property&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Transition-duration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transition-duration&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Transition-timing-function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transition-timing-function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;ease-in-out&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Trancsssition-delay&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transition-delay&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="nt"&gt;ms&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Flexbox&lt;/p&gt;

&lt;p&gt;Flexbox is a layout of CSS that lets you format HTML easily. Flexbox makes it simple to align items vertically and horizontally using rows and columns. Items will "flex" to different sizes to fill the space. And overall, it makes the responsive design more manageable.&lt;/p&gt;

&lt;p&gt;Parent Properties (flex container)&lt;br&gt;
display&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;flex-direction&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex-direction&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;row-reverse&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;column&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;column-reverse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;flex-wrap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex-wrap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;nowrap&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;wrap&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;wrap-reverse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;flex-flow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex-flow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;column&lt;/span&gt; &lt;span class="nt"&gt;wrap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;justify-content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;flex-start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;flex-end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-between&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-around&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-evenly&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;left&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;safe&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;align-items&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;align-items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;flex-start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;flex-end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;first&lt;/span&gt; &lt;span class="nt"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;last&lt;/span&gt; &lt;span class="nt"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;self-start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;self-end&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;safe&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;align-content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;align-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;flex-start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;flex-end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-between&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-around&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-evenly&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;first&lt;/span&gt; &lt;span class="nt"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;last&lt;/span&gt; &lt;span class="nt"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;safe&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;unsafe&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Child Properties (flex items)&lt;br&gt;
order&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;order&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* default is 0 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;flex-grow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex-grow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* default 0 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;flex-shrink&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex-shrink&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* default 1 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;flex-basis&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex-basis&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* default auto */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;flex shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;flex&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;'flex-grow'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;'flex-shrink'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;'flex-basis'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;align-self&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;align-self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;flex-start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;flex-end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;baseline&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Grid&lt;/p&gt;

&lt;p&gt;Grid layout is a 2-Dimensional grid system to CSS that creates complex responsive web design layouts more easily and consistently across browsers.&lt;/p&gt;

&lt;p&gt;Parent Properties (Grid container)&lt;/p&gt;

&lt;p&gt;display&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;inline-grid&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-template-columns&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-template-rows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-template-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;8&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt; &lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-template&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;none&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;grid-template-rows&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;column-gap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;column-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;line-size&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;row-gap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;row-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;line-size&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-column-gap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-column-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;line-size&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-row-gap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-row-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;line-size&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;gap shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;grid-row-gap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;grid-column-gap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-gap shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-gap&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;grid-row-gap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;grid-column-gap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;justify-items&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;justify-items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;align-items&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;align-items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;place-items&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;place-items&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;justify-content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-around&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-between&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-evenly&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;align-content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;align-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-around&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-between&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;space-evenly&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;place-content&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;place-content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;align-content&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;justify-content&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-auto-columns&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-auto-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;track-size&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-auto-rows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-auto-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;track-size&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;...;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-auto-flow&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-auto-flow&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;column&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;row&lt;/span&gt; &lt;span class="nt"&gt;dense&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;column&lt;/span&gt; &lt;span class="nt"&gt;dense&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Child Properties (Grid items)&lt;/p&gt;

&lt;p&gt;grid-column-start&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-column-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-column-end&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-column-end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-row-start&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-row-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-row-end&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-row-end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-column shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-column&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;start-line&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;end-line&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;start-line&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-row shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-row&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;start-line&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;end-line&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;start-line&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;grid-area&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-area&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;row-start&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;column-start&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;row-end&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;column-end&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;justify-self&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;justify-self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;align-self&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;align-self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;start&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;end&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;stretch&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;place-self&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;place-self&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;center&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Native App Development Service for Your Business </title>
      <author>Polosoft Technologies</author>
      <pubDate>Tue, 07 Sep 2021 06:12:28 +0000</pubDate>
      <link>https://dev.to/polosofttech/native-app-development-service-for-your-business-23fc</link>
      <guid>https://dev.to/polosofttech/native-app-development-service-for-your-business-23fc</guid>
      <description>&lt;p&gt;Native apps are the applications that are developed and designed specifically for platforms that particularly allow the use of device specific software and hardware. Such apps have the potential to utilize the resources that are specifically given to an OS without having any negative impact on the other functionalities. Native App development is the perfect option for you if you want to make an impact on the digital platform with your business strategies and offerings.&lt;/p&gt;

&lt;p&gt;So if digitalization is the need of your business then look no further, Polosoft Technologies is where you will find the solutions to all your problems and needs. We at &lt;strong&gt;Polosoft Technologies&lt;/strong&gt; provide the best &lt;a href="https://www.polosoftech.com/app-solutions/native-app-development"&gt;native app development services&lt;/a&gt; that helps you to optimize your business performance and hence increase your revenue generation using the best and latest technologies available in the market.&lt;/p&gt;

&lt;p&gt;We provide designing and development native apps for Android, iOS and Windows devices. Our apps include many astonishing features like 3D touch, multitasking, Beacon technology etc. which gives you an upper hand than your competitors in terms of code performance, implementation through native apps, loading hardware, cross platform functionalities, scalability and user specific Android, iOS or Windows User Interface. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9w3w1qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpccv5iqzl0n72vg9t5e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9w3w1qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpccv5iqzl0n72vg9t5e.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-choose-native-app-development-service"&gt;
  &lt;/a&gt;
  Why choose Native app development service:
&lt;/h1&gt;

&lt;p&gt;We at &lt;a href="https://www.polosoftech.com/app-solutions/native-app-development"&gt;Polosoft technologies&lt;/a&gt; provide our clients with various benefits and the prominent ones are listed below:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-performance"&gt;
  &lt;/a&gt;
  High performance:
&lt;/h2&gt;

&lt;p&gt;The native apps we provide perform way better than many web-based or even hybrid apps. They have direct access to the device features and this ensures optimum and effective use of the present components and better performance of the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usability"&gt;
  &lt;/a&gt;
  Usability:
&lt;/h2&gt;

&lt;p&gt;We make sure to exceed the expectations of our users. At no point of time they feel that something is missing from our app. Starting from functionality to the design patterns, our native application has got it all. Moreover all these functions are easily accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reliability-and-responsiveness"&gt;
  &lt;/a&gt;
  Reliability and Responsiveness:
&lt;/h2&gt;

&lt;p&gt;Our &lt;a href="https://www.polosoftech.com/app-solutions/native-app-development"&gt;native applications&lt;/a&gt;are reliable, responsive and provide exceptional experience to our users in terms of speed and functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aspect-ratios"&gt;
  &lt;/a&gt;
  Aspect ratios:
&lt;/h2&gt;

&lt;p&gt;With the help of our native app, our users can have control over the app resolution, orientation and even the size.&lt;br&gt;
We provide iOS, android and windows app development as well so that there remains no user who has any problem in accessing or using our native app. We make sure to make all the necessary changes and updates whenever required.&lt;br&gt;
Our clients can have access over our native app using any device of their choice. Our app is compatible in android devices, Windows, iPhone and iPad as well. &lt;/p&gt;

&lt;p&gt;Not crowing but by now you must be believing &lt;strong&gt;Polosoft Technologies&lt;/strong&gt; is the perfect &lt;a href="https://www.polosoftech.com/app-solutions/native-app-development"&gt;native app development company&lt;/a&gt; renowned for its solutions when it comes to native app development services. Our &lt;a href="https://www.polosoftech.com/app-solutions/native-app-development"&gt;native app developers&lt;/a&gt;re certified and keen on providing tailored business grade solutions for your business to rank up its game. &lt;/p&gt;

</description>
      <category>mobile</category>
      <category>reactnative</category>
      <category>development</category>
      <category>technology</category>
    </item>
    <item>
      <title>How to design a rate limiter </title>
      <author>Salah Elhossiny</author>
      <pubDate>Tue, 07 Sep 2021 05:30:30 +0000</pubDate>
      <link>https://dev.to/salah856/how-to-design-a-rate-limiter-27d3</link>
      <guid>https://dev.to/salah856/how-to-design-a-rate-limiter-27d3</guid>
      <description>&lt;p&gt;In a network system, a rate limiter is used to control the rate of traffic sent by a client or a service. In the HTTP world, a rate limiter limits the number of client requests allowed to be sent over a specified period. If the API request count exceeds the threshold defined by the rate limiter, all the excess calls are blocked. Here are a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; A user can write no more than 2 posts per second.&lt;/li&gt;
&lt;li&gt;You can create a maximum of 10 accounts per day from the same IP address.&lt;/li&gt;
&lt;li&gt;You can claim rewards no more than 5 times per week from the same device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before starting the design, we first look at the benefits of using an API rate limiter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prevent resource starvation caused by Denial of Service (DoS) attack [1]. Almost all APIs published by large tech companies enforce some form of rate limiting. For example, Twitter limits the number of tweets to 300 per 3 hours. Google docs APIs have the following default limit: 300 per user per 60 seconds for read requests. A rate limiter prevents DoS attacks, either intentional or unintentional, by blocking the excess calls.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduce cost. Limiting excess requests means fewer servers and allocating more resources to high priority APIs. Rate limiting is extremely important for companies that use paid third party APIs. For example, you are charged on a per-call basis for the following external APIs: check credit, make a payment, retrieve health records, etc. Limiting the number of calls is essential to reduce costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prevent servers from being overloaded. To reduce server load, a rate limiter is used to filter out excess requests caused by bots or users’ misbehavior&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1-understand-the-problem-and-establish-design-scope"&gt;
  &lt;/a&gt;
  Step 1 - Understand the problem and establish design scope
&lt;/h2&gt;

&lt;p&gt;Rate limiting can be implemented using different algorithms, each with its pros and cons. The interactions between an interviewer and a candidate help to clarify the type of rate limiters we are trying to build&lt;/p&gt;

&lt;p&gt;Candidate: What kind of rate limiter are we going to design? Is it a client-side rate limiter or server-side API rate limiter?&lt;/p&gt;

&lt;p&gt;Interviewer: Great question. We focus on the server-side API rate limiter.&lt;/p&gt;

&lt;p&gt;Candidate: Does the rate limiter throttle API requests based on IP, the user ID, or other properties?&lt;/p&gt;

&lt;p&gt;Interviewer: The rate limiter should be flexible enough to support different sets of throttle rules.&lt;/p&gt;

&lt;p&gt;Candidate: What is the scale of the system? Is it built for a startup or a big company with a large user base?&lt;br&gt;
Interviewer: The system must be able to handle a large number of requests.&lt;/p&gt;

&lt;p&gt;Candidate: Will the system work in a distributed environment?&lt;/p&gt;

&lt;p&gt;Interviewer: Yes.&lt;/p&gt;

&lt;p&gt;Candidate: Is the rate limiter a separate service or should it be implemented in application code?&lt;br&gt;
Interviewer: It is a design decision up to you.&lt;/p&gt;

&lt;p&gt;Candidate: Do we need to inform users who are throttled?&lt;br&gt;
Interviewer: Yes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;p&gt;Here is a summary of the requirements for the system:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accurately limit excessive requests.&lt;/li&gt;
&lt;li&gt;Low latency. The rate limiter should not slow down HTTP response time.&lt;/li&gt;
&lt;li&gt;Use as little memory as possible.&lt;/li&gt;
&lt;li&gt;Distributed rate limiting. The rate limiter can be shared across multiple servers or processes.&lt;/li&gt;
&lt;li&gt;Exception handling. Show clear exceptions to users when their requests are throttled.&lt;/li&gt;
&lt;li&gt;High fault tolerance. If there are any problems with the rate limiter (for example, a cache server goes offline), it does not affect the entire system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-2-propose-highlevel-design-and-get-buyin"&gt;
  &lt;/a&gt;
  Step 2 - Propose high-level design and get buy-in
&lt;/h2&gt;

&lt;p&gt;Let us keep things simple and use a basic client and server model for communication.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#where-to-put-the-rate-limiter"&gt;
  &lt;/a&gt;
  Where to put the rate limiter?
&lt;/h4&gt;

&lt;p&gt;Intuitively, you can implement a rate limiter at either the client or server-side.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Client-side implementation. Generally speaking, client is an unreliable place to enforce rate limiting because client requests can easily be forged by malicious actors. Moreover, we might not have control over the client implementation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server-side implementation. Figure 4-1 shows a rate limiter that is placed on the server- side.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BaNLwIII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120378-d579933f-556e-4cd3-8b63-8ef6d63b4d90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BaNLwIII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120378-d579933f-556e-4cd3-8b63-8ef6d63b4d90.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides the client and server-side implementations, there is an alternative way. Instead of putting a rate limiter at the API servers, we create a rate limiter middleware, which throttles requests to your APIs. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hdZwKFZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120384-74c77aff-fda1-4cd5-b0ce-c712b840e0aa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdZwKFZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120384-74c77aff-fda1-4cd5-b0ce-c712b840e0aa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assume our API allows 2 requests per second, and a client sends 3 requests to the server within a second. The first two requests are routed to API servers. However, the rate limiter middleware throttles the third request and returns a HTTP status code 429. The HTTP 429 response status code indicates a user has sent too many requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yehSI4bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120396-f3dd7e42-df2d-4c44-bf7b-3bdbfde5cbdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yehSI4bI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120396-f3dd7e42-df2d-4c44-bf7b-3bdbfde5cbdf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cloud microservices [4] have become widely popular and rate limiting is usually implemented within a component called API gateway. API gateway is a fully managed&lt;br&gt;
service that supports rate limiting, SSL termination, authentication, IP whitelisting, servicing static content, etc. For now, we only need to know that the API gateway is a middleware that supports rate limiting.&lt;/p&gt;

&lt;p&gt;While designing a rate limiter, an important question to ask ourselves is: where should the rater limiter be implemented, on the server-side or in a gateway? There is no absolute answer.&lt;/p&gt;

&lt;p&gt;It depends on your company’s current technology stack, engineering resources, priorities, goals, etc. Here are a few general guidelines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Evaluate your current technology stack, such as programming language, cache service, etc. Make sure your current programming language is efficient to implement rate limiting on the server-side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Identify the rate limiting algorithm that fits your business needs. When you implement everything on the server-side, you have full control of the algorithm. However, your choice might be limited if you use a third-party gateway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you have already used microservice architecture and included an API gateway in the design to perform authentication, IP whitelisting, etc., you may add a rate limiter to the API gateway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Building your own rate limiting service takes time. If you do not have enough engineering resources to implement a rate limiter, a commercial API gateway is a better option.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#algorithms-for-rate-limiting"&gt;
  &lt;/a&gt;
  Algorithms for rate limiting
&lt;/h2&gt;

&lt;p&gt;Rate limiting can be implemented using different algorithms, and each of them has distinct pros and cons. Even though this chapter does not focus on algorithms, understanding them at high-level helps to choose the right algorithm or combination of algorithms to fit our use cases. Here is a list of popular algorithms:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;• Token bucket
• Leaking bucket
• Fixed window counter
• Sliding window log
• Sliding window counter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
  &lt;a href="#token-bucket-algorithm"&gt;
  &lt;/a&gt;
  Token bucket algorithm
&lt;/h4&gt;

&lt;p&gt;The token bucket algorithm is widely used for rate limiting. It is simple, well understood andcommonly used by internet companies. Both Amazon and Stripe use this algorithm to throttle their API requests.&lt;/p&gt;

&lt;p&gt;The token bucket algorithm work as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A token bucket is a container that has pre-defined capacity. &lt;/li&gt;
&lt;li&gt;Tokens are put in the bucket at preset rates periodically. &lt;/li&gt;
&lt;li&gt;Once the bucket is full, no more tokens are added. &lt;/li&gt;
&lt;li&gt;The refiller puts 2 tokens into the bucket every second. Once the bucket is full, extra tokens will overflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GX_4o_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120508-e55a0136-e72c-448c-a84f-bff662be24d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GX_4o_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132120508-e55a0136-e72c-448c-a84f-bff662be24d7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#leaking-bucket-algorithm"&gt;
  &lt;/a&gt;
  Leaking bucket algorithm
&lt;/h4&gt;

&lt;p&gt;The leaking bucket algorithm is similar to the token bucket except that requests are processed at a fixed rate. It is usually implemented with a first-in-first-out (FIFO) queue. The algorithm works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a request arrives, the system checks if the queue is full. If it is not full, the request is added to the queue.&lt;/li&gt;
&lt;li&gt;Otherwise, the request is dropped.&lt;/li&gt;
&lt;li&gt;Requests are pulled from the queue and processed at regular intervals.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIUYe5JI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132173606-16b92216-374c-4b89-9356-e807dae1618e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIUYe5JI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132173606-16b92216-374c-4b89-9356-e807dae1618e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leaking bucket algorithm takes the following two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bucket size: it is equal to the queue size. The queue holds the requests to be processed at a fixed rate.&lt;/li&gt;
&lt;li&gt;Outflow rate: it defines how many requests can be processed at a fixed rate, usually in seconds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shopify, an ecommerce company, uses leaky buckets for rate-limiting&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory efficient given the limited queue size.&lt;/li&gt;
&lt;li&gt;Requests are processed at a fixed rate therefore it is suitable for use cases that a stable outflow rate is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A burst of traffic fills up the queue with old requests, and if they are not processed in time, recent requests will be rate limited.&lt;/li&gt;
&lt;li&gt;There are two parameters in the algorithm. It might not be easy to tune them properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#fixed-window-counter-algorithm"&gt;
  &lt;/a&gt;
  Fixed window counter algorithm
&lt;/h4&gt;

&lt;p&gt;Fixed window counter algorithm works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The algorithm divides the timeline into fix-sized time windows and assign a counter for each window.&lt;/li&gt;
&lt;li&gt;Each request increments the counter by one.&lt;/li&gt;
&lt;li&gt;Once the counter reaches the pre-defined threshold, new requests are dropped until a new time window starts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPO38c-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132173976-d45e74e0-b632-4508-a6e5-360126d7520b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPO38c-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132173976-d45e74e0-b632-4508-a6e5-360126d7520b.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A major problem with this algorithm is that a burst of traffic at the edges of time windows could cause more requests than allowed quota to go through.&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory efficient.&lt;/li&gt;
&lt;li&gt;Easy to understand.&lt;/li&gt;
&lt;li&gt;Resetting available quota at the end of a unit time window fits certain use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spike in traffic at the edges of a window could cause more requests than the allowed quota to go through.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#sliding-window-log-algorithm"&gt;
  &lt;/a&gt;
  Sliding window log algorithm
&lt;/h4&gt;

&lt;p&gt;The fixed window counter algorithm has a major issue: it allows more requests to go through at the edges of a window. The sliding window log algorithm fixes the issue. It works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The algorithm keeps track of request timestamps. Timestamp data is usually kept in cache, such as sorted sets of Redis. &lt;/li&gt;
&lt;li&gt;When a new request comes in, remove all the outdated timestamps. Outdated timestamps are defined as those older than the start of the current time window.&lt;/li&gt;
&lt;li&gt;Add timestamp of the new request to the log.&lt;/li&gt;
&lt;li&gt;If the log size is the same or lower than the allowed count, a request is accepted. Otherwise, it is rejected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjzhgQfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132174782-401a4eeb-321b-40e1-94ce-1a6e7d4989a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjzhgQfu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132174782-401a4eeb-321b-40e1-94ce-1a6e7d4989a7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, the rate limiter allows 2 requests per minute. Usually, Linux timestamps are stored in the log. However, human-readable representation of time is used in our example for better readability.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The log is empty when a new request arrives at 1:00:01. Thus, the request is allowed.• A new request arrives at 1:00:30, the timestamp 1:00:30 is inserted into the log. After the insertion, the log size is 2, not larger than the allowed count. Thus, the request is allowed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A new request arrives at 1:00:50, and the timestamp is inserted into the log. After the insertion, the log size is 3, larger than the allowed size 2. Therefore, this request is rejected even though the timestamp remains in the log.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A new request arrives at 1:01:40. Requests in the range [1:00:40,1:01:40) are within the latest time frame, but requests sent before 1:00:40 are outdated. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two outdated timestamps, 1:00:01 and 1:00:30, are removed from the log. After the remove operation, the log size becomes 2; therefore, the request is accepted.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rate limiting implemented by this algorithm is very accurate. In any rolling window, requests will not exceed the rate limit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The algorithm consumes a lot of memory because even if a request is rejected, its timestamp might still be stored in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#sliding-window-counter-algorithm"&gt;
  &lt;/a&gt;
  Sliding window counter algorithm
&lt;/h4&gt;

&lt;p&gt;The sliding window counter algorithm is a hybrid approach that combines the fixed window counter and sliding window log. The algorithm can be implemented by two different approaches. We will explain one implementation in this section and provide reference for the other implementation at the end of the section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qeemt3XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132175266-5fd0470d-e71a-441a-a058-81d0dd942b49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qeemt3XB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132175266-5fd0470d-e71a-441a-a058-81d0dd942b49.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assume the rate limiter allows a maximum of 7 requests per minute, and there are 5 requests in the previous minute and 3 in the current minute. For a new request that arrives at a 30% position in the current minute, the number of requests in the rolling window is calculated using the following formula:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requests in current window + requests in the previous window * overlap percentage of the rolling window and previous window.&lt;/li&gt;
&lt;li&gt;Using this formula, we get 3 + 5 * 0.7% = 6.5 request. Depending on the use case, the number can either be rounded up or down. &lt;/li&gt;
&lt;li&gt;In our example, it is rounded down to 6. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the rate limiter allows a maximum of 7 requests per minute, the current request can go through. However, the limit will be reached after receiving one more request.&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It smooths out spikes in traffic because the rate is based on the average rate of the previous window.&lt;/li&gt;
&lt;li&gt;Memory efficient.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It only works for not-so-strict look back window. It is an approximation of the actual rate because it assumes requests in the previous window are evenly distributed. However, this problem may not be as bad as it seems. &lt;/li&gt;
&lt;li&gt;According to experiments done by Cloudflare, only 0.003% of requests are wrongly allowed or rate limited among 400 million requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#highlevel-architecture"&gt;
  &lt;/a&gt;
  High-level architecture
&lt;/h3&gt;

&lt;p&gt;The basic idea of rate limiting algorithms is simple. At the high-level, we need a counter to keep track of how many requests are sent from the same user, IP address, etc. If the counter is larger than the limit, the request is disallowed. Where shall we store counters? Using the database is not a good idea due to slowness of disk access. In-memory cache is chosen because it is fast and supports time-based expiration strategy. For instance, Redis is a popular option to implement rate limiting. It is an in- memory store that offers two commands: INCR and EXPIRE.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;INCR: It increases the stored counter by 1.&lt;/li&gt;
&lt;li&gt;EXPIRE: It sets a timeout for the counter. If the timeout expires, the counter is automatically deleted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNsqnMsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132176124-60d39b6a-3532-452e-81f3-cd08d9d9587a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNsqnMsd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132176124-60d39b6a-3532-452e-81f3-cd08d9d9587a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The client sends a request to rate limiting middleware.&lt;/li&gt;
&lt;li&gt;Rate limiting middleware fetches the counter from the corresponding bucket in Redis andchecks if the limit is reached or not.

&lt;ul&gt;
&lt;li&gt;If the limit is reached, the request is rejected.&lt;/li&gt;
&lt;li&gt;If the limit is not reached, the request is sent to API servers. Meanwhile, the system increments the counter and saves it back to Redis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#step-3-design-deep-dive"&gt;
  &lt;/a&gt;
  Step 3 - Design deep dive
&lt;/h3&gt;

&lt;p&gt;The high-level design does not answer the following questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How are rate limiting rules created? Where are the rules stored?&lt;/li&gt;
&lt;li&gt;How to handle requests that are rate limited?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this section, we will first answer the questions regarding rate limiting rules and then go over the strategies to handle rate-limited requests. Finally, we will discuss rate limiting in distributed environment, a detailed design, performance optimization and monitoring.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#rate-limiting-rules"&gt;
  &lt;/a&gt;
  Rate limiting rules
&lt;/h4&gt;

&lt;p&gt;Lyft open-sourced their rate-limiting component. We will peek inside of the component and look at some examples of rate limiting rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;messaging&lt;/span&gt;
&lt;span class="na"&gt;descriptors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;message_type&lt;/span&gt;
  &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;marketing&lt;/span&gt;
  &lt;span class="na"&gt;rate_limit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;unit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;day&lt;/span&gt;
    &lt;span class="na"&gt;requests_per_unit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the system is configured to allow a maximum of 5 marketing messages per day. Here is another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auth&lt;/span&gt;
&lt;span class="na"&gt;descriptors&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auth_type&lt;/span&gt;
  &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;login&lt;/span&gt;
  &lt;span class="na"&gt;rate_limit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;unit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;minute&lt;/span&gt;
    &lt;span class="na"&gt;requests_per_unit&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#exceeding-the-rate-limit"&gt;
  &lt;/a&gt;
  Exceeding the rate limit
&lt;/h4&gt;

&lt;p&gt;In case a request is rate limited, APIs return a HTTP response code 429 (too many requests) to the client. Depending on the use cases, we may enqueue the rate-limited requests to be processed later. For example, if some orders are rate limited due to system overload, we may keep those orders to be processed later.&lt;/p&gt;

&lt;p&gt;How does a client know whether it is being throttled? And how does a client know the number of allowed remaining requests before being throttled? The answer lies in HTTP response headers. The rate limiter returns the following HTTP headers to clients:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X-Ratelimit-Remaining: The remaining number of allowed requests within the window.

X-Ratelimit-Limit: It indicates how many calls the client can make per time window.

X-Ratelimit-Retry-After: The number of seconds to wait until you can make a request again without being throttled.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When a user has sent too many requests, a 429 too many requests error and X-Ratelimit-Retry-After header are returned to the client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imuIIDlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132287806-04de0d48-0056-485e-b809-0e06ddec791d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imuIIDlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/23625821/132287806-04de0d48-0056-485e-b809-0e06ddec791d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rules are stored on the disk. Workers frequently pull rules from the disk and store them in the cache.&lt;/li&gt;
&lt;li&gt;When a client sends a request to the server, the request is sent to the rate limiter middleware first.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rate limiter middleware loads rules from the cache. It fetches counters and last request timestamp from Redis cache. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Based on the response, the rate limiter decides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the request is not rate limited, it is forwarded to API servers.&lt;/li&gt;
&lt;li&gt;if the request is rate limited, the rate limiter returns 429 too many requests error to the client. &lt;/li&gt;
&lt;li&gt;In the meantime, the request is either dropped or forwarded to the queue.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#monitoring"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h3&gt;

&lt;p&gt;After the rate limiter is put in place, it is important to gather analytics data to check whether the rate limiter is effective. Primarily, we want to make sure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The rate limiting algorithm is effective.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The rate limiting rules are effective.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example, if rate limiting rules are too strict, many valid requests are dropped. In this case, we want to relax the rules a little bit. &lt;/li&gt;
&lt;li&gt;In another example, we notice our rate limiter becomes ineffective when there is a sudden increase in traffic like flash sales. &lt;/li&gt;
&lt;li&gt;In this scenario, we may replace the algorithm to support burst traffic. Token bucket is a good fit here.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Avoid being rate limited. Design your client with best practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use client cache to avoid making frequent API calls.&lt;/li&gt;
&lt;li&gt;Understand the limit and do not send too many requests in a short time frame.&lt;/li&gt;
&lt;li&gt;Include code to catch exceptions or errors so your client can gracefully recover fromexceptions.&lt;/li&gt;
&lt;li&gt;Add sufficient back off time to retry logic.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF"&gt; System Design Interview Book &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rate Limiting in Javascript with a Token Bucket: &lt;br&gt;
&lt;a href="https://kendru.github.io/javascript/2018/12/28/rate-limiting-in-javascript-with-a-token-bucket/"&gt;https://kendru.github.io/javascript/2018/12/28/rate-limiting-in-javascript-with-a-token-bucket/&lt;/a&gt;&lt;br&gt;
Rate-limiting strategies and techniques: &lt;a href="https://cloud.google.com/solutions/rate-limiting-strategies-techniques"&gt;https://cloud.google.com/solutions/rate-limiting-strategies-techniques&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter rate limits: &lt;a href="https://developer.twitter.com/en/docs/basics/rate-limits"&gt;https://developer.twitter.com/en/docs/basics/rate-limits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google docs usage limits: &lt;a href="https://developers.google.com/docs/api/limits"&gt;https://developers.google.com/docs/api/limits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IBM microservices: &lt;a href="https://www.ibm.com/cloud/learn/microservices"&gt;https://www.ibm.com/cloud/learn/microservices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Throttle API requests for better throughput: &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html"&gt;https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stripe rate limiters: &lt;a href="https://stripe.com/blog/rate-limiters"&gt;https://stripe.com/blog/rate-limiters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shopify REST Admin API rate limits: &lt;a href="https://help.shopify.com/en/api/reference/rest-admin-api-rate-limits"&gt;https://help.shopify.com/en/api/reference/rest-admin-api-rate-limits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Better Rate Limiting With Redis Sorted Sets: &lt;a href="https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/"&gt;https://engineering.classdojo.com/blog/2015/02/06/rolling-rate-limiter/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;System Design — Rate limiter and Data modelling:&lt;a href="https://medium.com/@saisandeepmopuri/system-design-rate-limiter-and-data-modelling-9304b0d18250"&gt;https://medium.com/@saisandeepmopuri/system-design-rate-limiter-and-data-modelling-9304b0d18250&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How we built rate limiting capable of scaling to millions of domains: &lt;a href="https://blog.cloudflare.com/counting-things-a-lot-of-different-things/"&gt;https://blog.cloudflare.com/counting-things-a-lot-of-different-things/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Redis website: &lt;a href="https://redis.io/"&gt;https://redis.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lyft rate limiting: &lt;a href="https://github.com/lyft/ratelimit"&gt;https://github.com/lyft/ratelimit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scaling your API with rate limiters: &lt;a href="https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#request-rate-limiter"&gt;https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d#request-rate-limiter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is edge computing: &lt;a href="https://www.cloudflare.com/learning/serverless/glossary/what-is-edge-computing/"&gt;https://www.cloudflare.com/learning/serverless/glossary/what-is-edge-computing/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rate Limit Requests with Iptables: &lt;a href="https://blog.programster.org/rate-limit-requests-with-iptables"&gt;https://blog.programster.org/rate-limit-requests-with-iptables&lt;/a&gt;&lt;/p&gt;

</description>
      <category>systems</category>
      <category>architecture</category>
      <category>design</category>
    </item>
    <item>
      <title>10 Free Online Resume Builders for professional career</title>
      <author>NITESH TALIYAN</author>
      <pubDate>Tue, 07 Sep 2021 05:08:14 +0000</pubDate>
      <link>https://dev.to/niteshtaliyan/10-free-online-resume-builders-for-professional-career-46o8</link>
      <guid>https://dev.to/niteshtaliyan/10-free-online-resume-builders-for-professional-career-46o8</guid>
      <description>&lt;p&gt;When it comes to building a resume, I believe less is more. Content is way more important than the template. So whenever I face rejection, I would rather spend my time and energy building new projects, researching, or finding part-time jobs to polish my skills than focus too much on resume aesthetics. Here are some resume builders you can use to build your resume in no time.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oRm0eL_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e997aptg31gzdrebrydx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oRm0eL_C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e997aptg31gzdrebrydx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TL;DR:&lt;br&gt;
&lt;em&gt;MS Word&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Canva&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Resumake.io&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Novoresume&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Resume-now&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Resume Genius&lt;/em&gt;&lt;br&gt;
&lt;em&gt;MyPerfectResume&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Zety (free resources only)&lt;/em&gt;&lt;br&gt;
&lt;em&gt;VisualCV&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Indeed.com&lt;/em&gt;&lt;/p&gt;

</description>
      <category>resume</category>
      <category>requestforpost</category>
      <category>portfolio</category>
      <category>career</category>
    </item>
    <item>
      <title>THE 6 BEST SITES TO LEARN JAVASCRIPT FOR FREE</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Tue, 07 Sep 2021 04:52:15 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/the-6-best-sites-to-learn-javascript-for-free-343c</link>
      <guid>https://dev.to/koulurunandakishorereddy/the-6-best-sites-to-learn-javascript-for-free-343c</guid>
      <description>&lt;p&gt;JavaScript is everywhere, so we wanted to make it easier for JavaScript learners to choose the resources that will empower them as they progress through their learning journey. Sites like these are incredible opportunities to develop your skills and share them.&lt;/p&gt;

&lt;h1&gt;1 . JavaScript Algorithms and Data Structures  &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered in This Course:&lt;/b&gt; JavaScript ES6, Regular Expressions, Data Structures, Debugging&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAj0CDpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391318518/wYVcp_0wW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAj0CDpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628391318518/wYVcp_0wW.png" alt="u09kss7fb8l61.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Certification : &lt;/b&gt;&lt;a href="https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/"&gt;freecodecamp.org&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;2 . JavaScript Fundamentals&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered in This Course:&lt;/b&gt; HTML basics, Variables,Operators,Errors,Custom Objects,Popups&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcb8v_Cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628392365543/IbH8_nYAs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jcb8v_Cg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628392365543/IbH8_nYAs.png" alt="Screenshot (122) (1).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Course : &lt;/b&gt; &lt;a href="https://www.udemy.com/course/javascriptfundamentals/"&gt;udemy.com&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;3 . The Modern JavaScript Tutorial &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Fundamentals,Code Quality,Objects,Data Types,Functions,Prototypes&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--53Ws0jwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398562511/EPS4978n8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--53Ws0jwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398562511/EPS4978n8.png" alt="the-modern-javascript-tutorial.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Blog :&lt;/b&gt;&lt;a href="https://javascript.info/"&gt;javascript.info&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;4 . Eloquent JavaScript &lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Values,Types,Operators,Functions,HTTP,Modules,Node.js,Projects&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFyv6Mzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398901302/SF3i_lkHX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFyv6Mzl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628398901302/SF3i_lkHX.png" alt="eloquent-javascript.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Ebook : &lt;/b&gt; &lt;a href="https://eloquentjavascript.net/"&gt;eloquentjavascript&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;5 . A re-introduction to JavaScript&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;Numbers,Strings,Other types,Variables,Operators,Control structures,Objects,Arrays,Functions,Custom objects&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOsKvkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628399481121/yDmczQLbe.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYOsKvkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628399481121/yDmczQLbe.jpeg" alt="0452-05-reintroduction-javascript.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Blog :&lt;/b&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript"&gt;developer.mozilla.org&lt;/a&gt;&lt;a&gt; &lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;6 . Learn modern JavaScript&lt;/h1&gt;

&lt;p&gt;&lt;b&gt;Topics Covered : &lt;/b&gt;ES6 from scratch,var &amp;amp; let,const,Javascript scope,Mutation,Object.freeze(),Arrow functions,High order functions,Default parameters,Rest operator,Spread operator,Object destructuring,Array destructuring,
Constructor functions,Declarative functions, ES6 classes, Getters and setters, ES6 modules, Import &amp;amp; Export&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAIIL4f3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628400176178/tE-iVWFxF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAIIL4f3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628400176178/tE-iVWFxF.png" alt="js.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;interactive : &lt;/b&gt;&lt;a href="https://scrimba.com/learn/es6"&gt;scrimba.com&lt;/a&gt;&lt;a&gt;  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is your favourite website to learn JavaScript? Let us know down in the comments below!&lt;/p&gt;



&lt;br&gt;
To all my readers out here I have an interesting thing to share with you. There's a hackathon going on there. For more information, keep reading.

&lt;p&gt;A hackathon might be an alternative for you if you are a computer science student or an upcoming developer. The benefit of participating in an online or physical hackathon is that you can develop coding skills, work with developers, develop a resume, and meet peers.&lt;/p&gt;

&lt;p&gt;I recommend Hack This Fall 2.0 if you are interested in such an event. The event takes place between 22nd and 24th of October. A 48-Hour Virtual Hackathon is taking this to the next level this year, with the aim of promoting hackers and helping them to develop new ideas and prototypes in various domains. A part of their mission is also to support beginners to hack our society and bring a positive change.&lt;/p&gt;

&lt;p&gt;If you want to register for this wonderful hackathon you can do it:&lt;a href="https://hackthisfall.devpost.com/"&gt;click here&lt;/a&gt;.don't forget to use my referral code : HTFHE068. Over a thousand hackers have already signed up.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Divide and Conquer! An approach to software engineering project management.</title>
      <author>Davide de Paolis</author>
      <pubDate>Tue, 07 Sep 2021 04:51:05 +0000</pubDate>
      <link>https://dev.to/dvddpl/divide-and-conquer-an-approach-to-software-engineering-project-management-2e0n</link>
      <guid>https://dev.to/dvddpl/divide-and-conquer-an-approach-to-software-engineering-project-management-2e0n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#divide-et-impera"&gt;
  &lt;/a&gt;
  Divide et Impera!
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Divide and conquer!&lt;/em&gt; : in politics and sociology, it is &lt;em&gt;a strategy of gaining and maintaining power by breaking up larger concentrations of power into pieces that individually have less power than the one implementing the strategy.&lt;/em&gt; &lt;a href="https://en.wikipedia.org/wiki/Divide_and_rule"&gt;wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, split the forces of your enemy into smaller groups or individuals, which are easier to control and defeat.&lt;/p&gt;

&lt;p&gt;Wait,  what has that to do with project management in software engineering?&lt;/p&gt;

&lt;p&gt;Do I mean to &lt;strong&gt;isolate and weaken the individual team members&lt;/strong&gt; so that they can be easily &lt;em&gt;ruled&lt;/em&gt;, sorry, &lt;strong&gt;managed&lt;/strong&gt;, and that the goals can be achieved without any form of dissent?&lt;/p&gt;

&lt;p&gt;Of course, not!&lt;/p&gt;

&lt;p&gt;But how could I achieve the goal that was assigned to the team I was working with - 20 developers, more than 1 million lines of code, more than 15 thousand errors, hundreds of features to be rewritten - if not with  Divide and Conquer!?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Software development is the act of breaking a complex problem down into smaller problems and composing simple solutions to form a complete solution to the complex problem&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is actually true for any big task, it helps if you break the task down into smaller, more manageable parts. &lt;strong&gt;Little piece by little piece, the big task is less intimidating.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“How do you eat an elephant?"&lt;/p&gt;

&lt;p&gt;“Easy — One bite at a time”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#so-what-did-we-do-in-practice"&gt;
  &lt;/a&gt;
  So what did we do in practice?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we individuated 4 &lt;strong&gt;macro-areas of intervention&lt;/strong&gt; within the project/codebase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we split the team of 20 + people into 4 &lt;strong&gt;squads&lt;/strong&gt; who could focus on one of these 4 macro areas independently - almost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we run an &lt;strong&gt;analysis&lt;/strong&gt; on features and errors, aggregated them, and then split them into categories that were assigned to the different squads and individual members who were in charge of that category.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;we made iterations more frequent.  instead of monthly deadlines, we were reassessing our status weekly ( at the beginning we did not even have anything “showable” if not that the number of bugs (defects) and errors was decreasing…) and eventually, &lt;strong&gt;re-adjust course&lt;/strong&gt;.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not everything though could be broken down in smaller bits, nor was it advisable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-did-we-not-divide-instead"&gt;
  &lt;/a&gt;
  Where did we not divide instead?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Decision making: &lt;strong&gt;devs can be solitary animals&lt;/strong&gt;:  but we didn’t want to have a developer working on his task alone, just to realise after days or weeks the solution was wrong or did not fit the big picture.   So,  we had iterative coding design sessions to discuss solutions collectively ( within the small groups though).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knowledge sharing:  weekly present some interesting solutions or learnings to other team members.&lt;br&gt;
We dismantled &lt;strong&gt;Silos&lt;/strong&gt; and &lt;strong&gt;Towers of Knowledge&lt;/strong&gt;: especially with this high churn rate - we could not afford to have someone be the only one responsible for doing things or knowing how to do certain things.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helping each other:   &lt;strong&gt;devs are stubborn and like challenges&lt;/strong&gt; - but we could not afford people being stuck for hours, or days on a problem - so we enforced “asking for help, or seeking people in need”  30 minutes of struggle → shout it out to the team:  &lt;strong&gt;maybe someone already went through a similar problem and already has a solution&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end, &lt;strong&gt;by combining an atomic and aggressive approach to the problem with a mutualistic approach to the people&lt;/strong&gt;, we were able to reduce the scope and increase productivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/dvddpl/the-biggest-advice-i-could-give-to-another-developer-3jme"&gt;By working on a smaller scope&lt;/a&gt;, we could ignore the rest.&lt;br&gt;
&lt;a href="https://dev.to/dvddpl/you-have-only-limited-time-and-attention-eliminate-the-noise-4f0b"&gt;By avoiding distractions&lt;/a&gt; we could improve focus &lt;br&gt;
By having a shorter feedback loop -  &lt;em&gt;"Do something, Make sure it is ok, Rework or Move onto the next task"&lt;/em&gt; -  we improved our speed&lt;br&gt;
By sharing the struggles, celebrating the progress, sharing knowledge, and showing help to each other, we &lt;strong&gt;fought frustration, insecurity&lt;/strong&gt; and a sense of impotence in front of a massive task.&lt;br&gt;
And in the end, despite all my predictions, we made it.&lt;/p&gt;

&lt;p&gt;As Francis of Assisi said: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Start by doing what’s necessary; then do what’s possible, and suddenly you are doing the impossible.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;This is the transcript of a speech I gave at my local &lt;a href="https://www.toastmasters.org/"&gt;Toastmasters Club&lt;/a&gt; (an international organization to practice public speaking and leadership skills) for Level 4 of my &lt;a href="https://www.toastmasters.org/pathways-overview/pathways-innovative-planning-path"&gt;Innovative Planning Pathways&lt;/a&gt; where I had to write and present a speech about my experience in a project. &lt;/p&gt;

&lt;p&gt;You can consider it a &lt;strong&gt;fictional story&lt;/strong&gt;, although a lot of what is described there comes from my &lt;strong&gt;direct experience&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;I hope you find it interesting and of some help.&lt;/p&gt;

</description>
      <category>career</category>
      <category>publicspeaking</category>
      <category>development</category>
      <category>projectmanagement</category>
    </item>
    <item>
      <title>Linked List Questions: Detect a Cycle - Set or Hashtable Approach</title>
      <author>Kathan Vakharia</author>
      <pubDate>Tue, 07 Sep 2021 04:33:17 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/linked-list-questions-detect-a-cycle-set-or-hashtable-approach-5gb2</link>
      <guid>https://dev.to/kathanvakharia/linked-list-questions-detect-a-cycle-set-or-hashtable-approach-5gb2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#video-explanation"&gt;
  &lt;/a&gt;
  Video Explanation
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8zVzUl7v-ds"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Note: In the youtube video above, I have explained 2 approaches. In this post, I'll explain the first one i.e. first 8 mins of the video.&lt;/p&gt;

&lt;p&gt;If you are more into reading, continue with the blog. I would still suggest you at least download the annotations that I did in the video :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/linked-list-cycle/"&gt;https://leetcode.com/problems/linked-list-cycle/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given &lt;code&gt;head&lt;/code&gt;, the head of a linked list, determine if the linked list has a cycle in it.&lt;/p&gt;

&lt;p&gt;There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the &lt;code&gt;next&lt;/code&gt; pointer.&lt;/p&gt;

&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if there is a cycle in the linked list. Otherwise, return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Give yourself at least 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;The idea here is to traverse the list, and while doing that store the nodes in a &lt;code&gt;set&lt;/code&gt;. If there's a cycle present, we'll try to insert a node(the &lt;em&gt;starting point&lt;/em&gt; of cycle) for the &lt;em&gt;second&lt;/em&gt; time, and as a &lt;code&gt;set&lt;/code&gt; cannot have &lt;strong&gt;duplicate&lt;/strong&gt; values, we can happily stop the algorithm by saying, YES there's a cycle in list. On the contrary, if a cycle is not present, we'll reach the end of the list and stop the algorithm by saying NO there's no cycle in the list.&lt;/p&gt;

&lt;p&gt;Here's the pseudo code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ListNode Node = head
Set s
while(Node != NULL)
    if(s.contains(Node)) // a node is encountered second time
        return true 
    else
        s.insert(Node)
        Node = Node.next
//if cycle was not found ie. 'if' condition was never met
return false

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;🗒 We are creating a &lt;em&gt;set of node's addresses&lt;/em&gt; here NOT the node's values, Why? because node's addresses are &lt;strong&gt;unique&lt;/strong&gt; in the list and values are not. For Example, 1→2→3→3→NULL doesn't contain a cycle but if we go by storing values in the set, the algorithm will say it does contain a cycle.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-raw-set-endraw-important"&gt;
  &lt;/a&gt;
  Why &lt;code&gt;set&lt;/code&gt;? (IMPORTANT)
&lt;/h3&gt;

&lt;p&gt;Problem-solving is not just about solving questions, it is also about deciding proper data structure. Some of you may have this question, why did we use set here and not any other data structure?&lt;/p&gt;

&lt;p&gt;Our need here is to perform two operations: &lt;em&gt;store&lt;/em&gt; and &lt;em&gt;lookup(read)&lt;/em&gt; from our data structure in every iteration and as a &lt;code&gt;set&lt;/code&gt; is implemented as &lt;code&gt;hashtable&lt;/code&gt; in programming languages, we can do &lt;strong&gt;O(1)&lt;/strong&gt; &lt;em&gt;insertion&lt;/em&gt; as well as &lt;em&gt;lookup&lt;/em&gt;. So although you can use any data structure of your choice, &lt;code&gt;set&lt;/code&gt; a.k.a &lt;code&gt;hashtable&lt;/code&gt;  is the best choice!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you still have any doubts, you can refer the video explanation :)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linked-list"&gt;
  &lt;/a&gt;
  Definition of Linked List
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* A note about 'count(Key)'
*Searches the container for elements whose value is k and returns 
*  the number of elements found
*Because unordered_set containers do not allow for duplicate keys,
*   this means that the function returns 1 if an element with 
*   that value exists in the container, and zero otherwise.
*/&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;hasCycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;unordered_set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;nodes_seen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;N&lt;/code&gt;: Length of Linked List&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-on"&gt;
  &lt;/a&gt;
  Time Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are traversing the entire list and at every iteration, constant-time operations are done. ( and one more time if a cycle exists but asymptotically, it's still O(N) )&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-on"&gt;
  &lt;/a&gt;
  Space Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are storing every node exactly once.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Backend Developer Roadmap 2021 | How to Become a Backend Developer</title>
      <author>Pranav</author>
      <pubDate>Tue, 07 Sep 2021 02:52:15 +0000</pubDate>
      <link>https://dev.to/codedamn/backend-developer-roadmap-2021-how-to-become-a-backend-developer-3flg</link>
      <guid>https://dev.to/codedamn/backend-developer-roadmap-2021-how-to-become-a-backend-developer-3flg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-http"&gt;
  &lt;/a&gt;
  1) HTTP
&lt;/h2&gt;

&lt;p&gt;HTTP stands for HyperText Transfer Protocol, a widely understood acronym, but do you know what this protocol is and why it is required. Think that you are only given a terminal with Curl or NetCat installed. Will you be able to send a raw HTTP Request without any help? It doesn't mean that you have to memorize the format of an HTTP Request. It simply means whether you are capable of sending a request without any help.‌&lt;br&gt;
‌You must have a semantic understanding of HTTP Object &amp;amp; its method, status code, headers &amp;amp; body of an HTTP Object. You should understand the different types of content types in the response headers. You should not only understand the syntax level, but you must also understand the technical level about what HTTP is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-rest"&gt;
  &lt;/a&gt;
  2) REST
&lt;/h2&gt;

&lt;p&gt;REST is another popular term among beginner devs that stands for Representational State Transfer, but it is essential to understand to perform HTTP requests better. While many people continue to use the terms REST and HTTP interchangeably, the truth is that they are two different things. REST refers to a set of attributes of a particular architectural style, while HTTP is a well-defined protocol that happens to exhibit many features of a RESTful system.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lH1QNxYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi9y3n8astreoq4enj3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lH1QNxYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi9y3n8astreoq4enj3k.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
REST architecture states different status codes and using the correct method names. You should be familiar with the different types of HTTP Methods and their use cases. The most important HTTP methods are GET, POST, PUT &amp;amp; DELETE. Also, you should know about the JSON response from the server and how to handle it.‌&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9p20GnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acat0lt3uv35zhq3a5dy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9p20GnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/acat0lt3uv35zhq3a5dy.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Similarly, you can also learn GraphQL. It is technically not an alternative to REST but has advantageous features over REST. While using GraphQL, you don't need to care about the different HTTP Methods. Your focus will be on the Schema of the GraphQL Query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-programming-language"&gt;
  &lt;/a&gt;
  3) Programming Language
&lt;/h2&gt;

&lt;p&gt;The most important is to have a solid grip on a programming language that can run on a server. This does not include HTML as it is a Markup language and not a programming language. You can learn many languages here, namely, Node.JS (a runtime environment to run JavaScript in the server), Python, Rust, PHP &amp;amp; Golang. These are the most used languages for the back-end of your web application.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KM8VxmSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygl0koaspkkym5adfb2d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KM8VxmSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygl0koaspkkym5adfb2d.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
A solid understanding of programming languages is very necessary. This doesn't mean learning how the loops, variables, functions works. This also includes creating HTTP requests &amp;amp; servers using the programming language and having good fundamentals in the networking (which is covered in the next point).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-networking-amp-linux-fundamentals"&gt;
  &lt;/a&gt;
  4) Networking &amp;amp; Linux Fundamentals
&lt;/h2&gt;

&lt;p&gt;You need to have a good understanding of how networks work on any operating system level. You'll primarily be working with the TCP, a 4th level protocol as per the OSI Model.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--71_5L9ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58o0q52v5pa445y5g7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--71_5L9ZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u58o0q52v5pa445y5g7y.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Understanding the basics of Linux Fundamentals is essential as when you are working with a server, you most probably won't have interactive Graphical User Interfaces to handle the server. Therefore, it is very important to find your way around the terminal or command line, which is probably "bash" if you use Linux servers.‌&lt;br&gt;
‌Also, networking is important at the Operating System level as it is sometimes essential to communicate and retrieve and insert data into a database which brings us to the following necessary things, Databases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-database"&gt;
  &lt;/a&gt;
  5) Database
&lt;/h2&gt;

&lt;p&gt;Databases are very essential to maintain and organize the data generated by the users. This could be a SQL (Structured Query Language) or a NoSQL (Not Only Structured Query Language) database. Both have a lot in common, for example, indexing is a common concept in both kinds of databases.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFbDM8ie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujkdrsn0lqurkpjoyh5n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFbDM8ie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujkdrsn0lqurkpjoyh5n.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The most common SQL databases would be Postgres or MySQL, and for NoSQL databases, it would be MongoDB or Cassandra or Redis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-caching"&gt;
  &lt;/a&gt;
  6) Caching
&lt;/h2&gt;

&lt;p&gt;Caching data is important because it helps speed up application performance and increase efficiency. It stores data locally, which means browsers and websites will load faster because access elements like homepage images have previously been downloaded.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rP8X4WRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5glxvk9o65d0kr5l2tep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rP8X4WRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5glxvk9o65d0kr5l2tep.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The most common caching technologies that are used are Redis &amp;amp; Memcached. Another promising technology that helps you with caching is AWS ElastiCache, which brings us to our following topic, cloud providers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-cloud-providers"&gt;
  &lt;/a&gt;
  7) Cloud Providers
&lt;/h2&gt;

&lt;p&gt;When it comes to Cloud Providers, the most resonating names are Amazon Web Services, Google Cloud Platform, and Microsoft Azure, among others like Digital Ocean.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZzZdgVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cw4xqsjwui43m2dugt9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZzZdgVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cw4xqsjwui43m2dugt9.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You have to pick any one of the cloud providers and get into their ecosystem and understand their embedded features for explicable use. Most of them also provide some free credits for you to use their cloud service. Cloud provides increased amounts of storage and processing power to run the applications &amp;amp; it's easy to access information, process and analyze data, and connect people and resources from any location anywhere in the world. So it's vital to have some fundamental understanding of any cloud provider.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-web-security"&gt;
  &lt;/a&gt;
  8) Web Security
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2DdXdRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9gr1rg1pf3t3no13tdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DdXdRHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9gr1rg1pf3t3no13tdh.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Anyone can code but is your code secure enough that it's not vulnerable, and the data you are capturing is safe, probably!. So it's very, very important to understand web security before developing scalable applications.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5i1fquWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyigrgo6bp96cfnt0o9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5i1fquWg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qyigrgo6bp96cfnt0o9h.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
You probably don't want your database to be corrupted or just got cloned and getting dumped by the hacker. Any back-end developer can make and manage servers, but a good back-end engineer can write secure code that keeps the collected data and the users' privacy safe. More about web security can be read &lt;a href="https://codedamn.com/news/5-web-security-tips-for-web-apps"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-containerization-amp-testing"&gt;
  &lt;/a&gt;
  9) Containerization &amp;amp; Testing
&lt;/h2&gt;

&lt;p&gt;Containerization and Testing are optional technologies for you to learn as a beginner. As a beginner, you can choose Docker to learn Containerization. You can also prefer Kubernetes but it is overkill. For testing, you can use Jest for your back-end testing and Postman for your API testing.&lt;/p&gt;

&lt;p&gt;You can watch the YouTube video &lt;a href="https://www.youtube.com/watch?v=aZkG0b6oi4s"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>backend</category>
      <category>graphql</category>
      <category>http</category>
      <category>linux</category>
    </item>
    <item>
      <title>use emoji as your className</title>
      <author>油炸皮卡丘的大号</author>
      <pubDate>Tue, 07 Sep 2021 02:42:40 +0000</pubDate>
      <link>https://dev.to/yzpkq/use-emoji-as-your-classname-21jl</link>
      <guid>https://dev.to/yzpkq/use-emoji-as-your-classname-21jl</guid>
      <description>&lt;p&gt;I use emoticons as the className, I think it should be able to impress my colleagues&lt;/p&gt;

&lt;p&gt;ha ha 💩&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fu0cmnr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dzb8bdrne6r87e7jn0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fu0cmnr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dzb8bdrne6r87e7jn0e.png" alt="css-emoji"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Intercepting HTTP Requests with NodeJS</title>
      <author>Henry Williams</author>
      <pubDate>Tue, 07 Sep 2021 02:20:02 +0000</pubDate>
      <link>https://dev.to/henryjw/intercepting-http-requests-with-nodejs-21ba</link>
      <guid>https://dev.to/henryjw/intercepting-http-requests-with-nodejs-21ba</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;As part of a project at work, I had to develop a way to intercept and store HTTP traffic for any given backend application (microservice in this case). This would have been a fairly straightforward task, but our backend is composed of many services (and many repos). Therefore, the solution had to be as seamless as possible so that it could be easily integrated into any of the services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;Using &lt;a href="https://www.npmjs.com/package/@mswjs/interceptors"&gt;&lt;code&gt;@mswjs/interceptors&lt;/code&gt;&lt;/a&gt; makes it straightforward to intercept HTTP traffic on your backend app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intercepting-http-traffic"&gt;
  &lt;/a&gt;
  Intercepting HTTP Traffic
&lt;/h2&gt;

&lt;p&gt;For my use case, there were two options I could think of for capturing the HTTP traffic:&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Create a library that wraps an HTTP client library like Axios&lt;/li&gt;
    &lt;li&gt;Somehow intercept all HTTP traffic&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In an ideal world, I would have chosen &lt;strong&gt;option 1&lt;/strong&gt; since it would be the simplest. Unfortunately, the project I work on consists of many microservices owned by different teams. Therefore, it would make it difficult for everyone to go back and refactor their code to use this new library.&lt;/p&gt;

&lt;p&gt;Therefore, my only option was really &lt;strong&gt;option 2&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-attempt"&gt;
  &lt;/a&gt;
  First attempt
&lt;/h3&gt;

&lt;p&gt;My first attempt was ok, but far from perfect. After trying to intercept the traffic directly through the low-level &lt;a href="https://nodejs.org/api/http.html"&gt;http&lt;/a&gt; module, I opted for a more higher-level solution. My idea was to &lt;a href="https://stackoverflow.com/a/5626250/1650910"&gt;monkey patch&lt;/a&gt; Axios's request methods to inject my own logic before a request is sent and after the response is received.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;put&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;patch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;options&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;originalFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thisArgument&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_parseAxiosArguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;


      &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
      &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;originalFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thisArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedMethod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method worked fine, but then I accidentally bumped into a cleaner approach while reading the Axios docs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-attempt"&gt;
  &lt;/a&gt;
  Second attempt
&lt;/h3&gt;

&lt;p&gt;To my surprise, Axios actually offers an API for intercepting requests and responses!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createInterceptor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InterceptorApi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicResponse&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;interceptXMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors/lib/interceptors/XMLHttpRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;interceptClientRequest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mswjs/interceptors/lib/interceptors/ClientRequest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentAxios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;axiosInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;interceptors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_instrumentHttpResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosRequestConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;AxiosRequestConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;common&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;requestConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AxiosResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;AxiosResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ah! Much better. &lt;strong&gt;However&lt;/strong&gt;, there is another complication to this approach that's also present in the first attempt: the interception has to be set for every Axios instance; this makes for a less than ideal developer experience. I initially assumed everyone used the default axios instance. However, it turns out that it's also possible to create new instances via &lt;a href="https://github.com/axios/axios#creating-an-instance"&gt;&lt;code&gt;axios.create()&lt;/code&gt;&lt;/a&gt;. So back to the drawing board 😔&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-solution"&gt;
  &lt;/a&gt;
  Final solution
&lt;/h3&gt;

&lt;p&gt;Before attempting to mess with the low-level &lt;code&gt;http&lt;/code&gt; module, I decided to look for some existing solutions. And after digging around for some time, I stumbled into &lt;a href="https://www.npmjs.com/package/@mswjs/interceptors"&gt;&lt;code&gt;@mswjs/interceptors&lt;/code&gt;&lt;/a&gt;. This library is very well documented and is TypeScript friendly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_instrumentHTTPTraffic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interceptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createInterceptor&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="c1"&gt;// Required even if not used&lt;/span&gt;
      &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;interceptXMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;interceptClientRequest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpRequest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpResponse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;interceptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpRequestEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;


   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;requestEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_handleHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IsomorphicResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpResponseEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="c1"&gt;// Intentionally not waiting for a response to avoid adding any latency with this instrumentation&lt;/span&gt;
   &lt;span class="nx"&gt;doSomethingWithResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;responseEvent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#caviats"&gt;
  &lt;/a&gt;
  Caviats
&lt;/h3&gt;

&lt;p&gt;Although the final solution is more general and is also agnostic to the client HTTP library used, there are some downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since all HTTP traffic going thorugh the app is intercepted, there needs to be some logic in place to know which requests to ignore. E.g., instrumentation tools like NewRelic regularly send requests to capture metadata. This can add a lot of noise if not handled properly&lt;/li&gt;
&lt;li&gt;Dependence on another library. Whether this is a big deal depends on what the interception is used for. Probably not a big deal for most projects&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Parallelism in JavaScript: build super programs🔥🔥</title>
      <author>sk</author>
      <pubDate>Tue, 07 Sep 2021 01:19:11 +0000</pubDate>
      <link>https://dev.to/sfundomhlungu/parallelism-in-javascript-build-super-programs-5a9k</link>
      <guid>https://dev.to/sfundomhlungu/parallelism-in-javascript-build-super-programs-5a9k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#concurrency-vs-parallelism"&gt;
  &lt;/a&gt;
  Concurrency vs Parallelism
&lt;/h1&gt;



&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  concurrency:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;single object&lt;/strong&gt; performing multiple tasks( example: a juggler) &lt;/p&gt;

&lt;p&gt;we already talked about this system in the previous chapter: the task queue and microtask queue which are both executed by a single thread (interchanged), the main thread.&lt;/p&gt;

&lt;p&gt;both async and sync code in JS is executed by a single thread, which juggles both of them based on the state of the event loop.&lt;/p&gt;

&lt;p&gt;Concurrency example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
 // doing multiple tasks in a period of time

task a task b  task c

 concurrency:  
        task a

        task c

        task a

        task b

        task a

        task c - complete 

        task b

        task a

        task b

        task a - complete 

        task b - complete

        final result

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;a single thread juggles multiple tasks, giving the illusion that they are happening at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallelism"&gt;
  &lt;/a&gt;
  parallelism
&lt;/h2&gt;

&lt;p&gt;multiple objects working at the same time, on one or multiple tasks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
task a   task b    task c 

task a   task b    task c 

task a   task b    complete

task a   complete  complete

task a   complete  complete

complete   complete  complete



final result


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple independent objects, working independently of each other(not interleaved) this is usually achieved through multiple threads and cores, languages such as java have this feature built in I believe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parallelism-in-browsers"&gt;
  &lt;/a&gt;
  Parallelism in browsers
&lt;/h2&gt;

&lt;p&gt;Browsers are fundamentally single threaded, having only the main thread handling both the execution of JavaScript code and rendering the browser window, async programming does relieve the main thread by pausing execution of specific code, but in the end even that code will run on the main thread, needless to say the main thread works pretty hard, which is actually the source of "a script is slowing down your browser" message, when a script is taking to long to finish a task and blocks the main thread, while async is the solution, an even better solution is creating a new thread and that is where web workers come in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-workers"&gt;
  &lt;/a&gt;
  web workers
&lt;/h2&gt;

&lt;p&gt;a web worker creates/spawns a second JS thread separate from the front end browser,  the thread does not have access to the DOM, window and anything in the front-end browser accept given by the main thread, all the is, is JS, this is true parallelism: the idea of two separate threads not inability to access the DOM, these threads run at the same time without blocking each other.&lt;/p&gt;

&lt;p&gt;they communicate via a message system, they are able to send messages to each, which can be strings, objects or simple values.&lt;/p&gt;

&lt;p&gt;This way we can migrate heavy computation from the main thread to the 2nd, and allow the main to perform it's primary duty to handle use input and react seamlessly.&lt;/p&gt;

&lt;p&gt;This is a true game changer, you can literally perform heavy tasks in the worker, without the browser missing a frame, this is ultimate optimization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-workers"&gt;
  &lt;/a&gt;
  getting started with workers
&lt;/h2&gt;

&lt;p&gt;because workers run in the browser we need an HTML file for this part, &lt;/p&gt;

&lt;p&gt;create three files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
 index.html
 main.js
 worker.js


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will be using  vscode live server plugin to serve index.html, you can use whatever you like, or even a bundler like parcel which support imports and live reload. &lt;/p&gt;

&lt;p&gt;Goal: create a second thread running an infinite loop, while the browser's main thread plays animation at 60FPS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

     &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;



 &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;



 &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;





&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in main.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main thread&lt;/span&gt;



&lt;span class="cm"&gt;/**

 * @type {HTMLLabelElement}

 */&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;




&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ionic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nativescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sass&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;



&lt;span class="c1"&gt;// simple DOM update&lt;/span&gt;
&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// choosing a random skill every 16ms and updating the label element to show that skill&lt;/span&gt;

     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

     &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know this does not seem much, given that set interval is a microtask, but if we add an infinite loop in the main file, one of two things will happen your browser will trash or not update the UI at all, since the main thread is stuck in this infinite loop, because of the run-to-completion rule, you can test it by adding an infinite loop in main.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;



&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this sets us up nicely to prove that a worker spawns a new thread separate from the browser window and document, if we can run an infinite loop logging something in the worker thread while updating the browser successfully every 16ms this will prove that these threads are separate, &lt;/p&gt;

&lt;p&gt;remove the infinite loop in main and add the following on top&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creates a worker thread(spawning a new thread)&lt;/span&gt;
&lt;span class="c1"&gt;// Worker() takes name of an existing js file, which the worker will load in it's own environment &lt;/span&gt;
&lt;span class="c1"&gt;// separate from the the main js and it's thread &lt;/span&gt;
&lt;span class="c1"&gt;// every code in worker.js will run in the second thread&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;// we use the worker object to communicate and receive communcication from the second thread&lt;/span&gt;


&lt;span class="c1"&gt;// sending a msg to the second thread&lt;/span&gt;
&lt;span class="c1"&gt;// the msg can be an object, stringified JSON object, buffer arrays etc&lt;/span&gt;
&lt;span class="c1"&gt;// but you cannot send DOM elements, classes etc &lt;/span&gt;

&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open worker.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//worker.js thread&lt;/span&gt;


&lt;span class="c1"&gt;//catching/receiving messages&lt;/span&gt;


&lt;span class="c1"&gt;// self = refers to the worker, &lt;/span&gt;
&lt;span class="c1"&gt;// listening to messages&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


  &lt;span class="c1"&gt;// logging the recieved message&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



 &lt;span class="c1"&gt;// sending back a message to the main thread after 10 seconds&lt;/span&gt;
 &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="c1"&gt;// sending a message to main thread &lt;/span&gt;

 &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;after 10 000 milliseconds&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;




&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In main.js we can also listen to messages from the second/worker thread using the worker object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from second thread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you reload, in the console you will see worker.js logging "hello there" and after 10000ms  the main thread will receive a message from worker and logs it&lt;/p&gt;

&lt;p&gt;the infinite loop experiment&lt;/p&gt;

&lt;p&gt;in the worker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;



&lt;span class="c1"&gt;// infinite loop&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;



 &lt;span class="c1"&gt;// logging at an interval, logging at every iteration will crash the browser&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10000000000&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;while loop&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="p"&gt;}&lt;/span&gt;




 &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.00000000000000000000000000000001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;



&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;magic, the browser is not skipping a bit, while the infinite loop is running, if you have been using JS for a while, you'll understand how much of a big deal this is, just having a while(true) statement in JavaScript is super impressive.&lt;/p&gt;

&lt;p&gt;the browser might crash because of the frequent console logs, make sure you clear the console while it is running.&lt;/p&gt;

&lt;p&gt;Using this simple architecture there are many possibilities: operating on big files, large amounts of data and algorithms, only sending the computation result to the main thread. &lt;/p&gt;

&lt;p&gt;In term of the DOM access, there are libraries out there, for one workerDom which allows manipulation of the DOM in the worker, workerDom also works well with major front-end frameworks.&lt;/p&gt;

&lt;p&gt;With that we have achieved true parallelism in JavaScript.&lt;/p&gt;

&lt;p&gt;This is an excerpt from an eBook &lt;a href="https://sk76.gumroad.com/l/JS4AdvancedB?_ga=2.231950431.1783815175.1630970910-637662627.1625442646"&gt;JavaScript for advanced beginners&lt;/a&gt; available on gumroad as a pre-order, and should be launching soon, &lt;/p&gt;

&lt;p&gt;The eBooks main goal is to provide a gentle but needed push towards advanced JS, range of topics are covered from Object Oriented JS, Object composition to generators, promises, computational media and metaprogramming  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>parallelism</category>
      <category>webworkers</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
