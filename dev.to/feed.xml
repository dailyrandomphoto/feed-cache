<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Python Tools for Data Science: The Best Python Packages, Libraries and Frameworks</title>
      <author>images.cv</author>
      <pubDate>Sun, 12 Dec 2021 22:55:50 +0000</pubDate>
      <link>https://dev.to/imagescv/python-tools-for-data-science-the-best-python-packages-libraries-and-frameworks-28im</link>
      <guid>https://dev.to/imagescv/python-tools-for-data-science-the-best-python-packages-libraries-and-frameworks-28im</guid>
      <description>&lt;p&gt;&lt;strong&gt;If you're just getting started with data science, then Python programming is a great language to start with. It's the most popular programming language for data scientists and it has many powerful packages, libraries and frameworks that are designed specifically for their needs. In this post, we'll take a look at some of the best tools out there - so read on if you want to get up-to-speed quickly!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt; is the fundamental package for scientific computing in Python. It provides an efficient and comprehensive array-processing facility that can handle large multi-dimensional arrays. NumPy also contains high-level mathematical functions for linear algebra, Fourier transforms, and other operations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; is a powerful data analysis library that provides everything you need to manipulate, process, and analyze data in Python. It's built on top of NumPy, which means that it uses efficient arrays to handle structured data. Pandas is great for working with time series analysis (e.g., stocks prices) or relational data (e.g., Excel files).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://seaborn.pydata.org/"&gt;Seaborn&lt;/a&gt; is a powerful statistical plotting library for Python that's built on top of Matplotlib. It provides a wide range of high-level plotting functions for statistical data, as well as support for customizing the look and feel of your plots. Seaborn is great for visualizing regression models or clustering data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scikit-learn.org/"&gt;Scikit-Learn &lt;/a&gt; is a versatile machine learning library that provides tools for data mining, preprocessing and modeling. You can use this tool to do everything from clustering your text data to building random forests or deep neural networks. What's really great about Scikit-learn is that it allows you to work with Python code instead of having to learn a new language.&lt;/p&gt;




&lt;p&gt;These are just some of the best Python tools for data science - there are many others out there that can help you get your job done quickly and efficiently. So don't be afraid to experiment with different libraries and frameworks until you find the one that's right for you!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Using MongoDB with Node.JS</title>
      <author>Pepper.</author>
      <pubDate>Sun, 12 Dec 2021 22:33:22 +0000</pubDate>
      <link>https://dev.to/peppermints/using-mongodb-with-nodejs-4n94</link>
      <guid>https://dev.to/peppermints/using-mongodb-with-nodejs-4n94</guid>
      <description>&lt;p&gt;First, create a new project.&lt;/p&gt;

&lt;p&gt;CD into the project folder and run &lt;code&gt;npm init&lt;/code&gt;. Follow those steps until you're done.&lt;/p&gt;

&lt;p&gt;Run: &lt;code&gt;npm i mongodb&lt;/code&gt;. This will install the official MongoDB driver for Node.&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;index.js&lt;/code&gt;, or &lt;code&gt;main.js&lt;/code&gt;, depending on your main file when you ran &lt;code&gt;npm init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside there: add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {MongoClient} = require("mongodb");
const mongouri = 'mongodb://your_connection_string';
const client = new MongoClient(mongouri);

client.connect().then(console.log("Connected to MongoDB"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congrats, if you run &lt;code&gt;node .&lt;/code&gt;, you should see 'Connected to MongoDB'.&lt;/p&gt;

&lt;p&gt;Let's create a quick question database by using an asynchronous function. Add this above &lt;code&gt;client.connect().then(console.log("Connected to MongoDB"));&lt;/code&gt; and under the constants:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function createListing(db, collection, data) {
    await client.db(db).collection(collection).insertOne(data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, under &lt;code&gt;client.connect(...&lt;/code&gt;, put:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;createListing('question', 'questions', {
    question: "What's 2+2?",
    answer: 4
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go ahead and run &lt;code&gt;node .&lt;/code&gt;. If you have access to your database, you should see that listing in the database.&lt;/p&gt;

&lt;p&gt;Let's read a listing and compare an answer by creating another asynchronous function. Under the 'createListing' function, add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function readListing(db, collection, data) {
    const result = await client.db(db).collection(collection).findOne(data);
    if(result === null || result === undefined) {
        return false;
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, let's remove the lines where we created our listing, and we will replace it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let guess = 4;
const res = readListing('question', 'questions', {
    answer: guess
});
if(res === false) {
    console.log("Oops, you got it wrong.");
} else {
    console.log("Yay! You got it right!");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, we will run &lt;code&gt;node .&lt;/code&gt;, it should output: "Yay! You got it right!"&lt;/p&gt;

&lt;p&gt;Congratulations! You've just created and read data from a database!&lt;/p&gt;

&lt;p&gt;To the beginners: Keep learning. You never know what you can accomplish if you keep putting your all into it. This tutorial has just showed you how to use one of the BEST databases out there, very easily. So go and do what we all beginners &lt;em&gt;should&lt;/em&gt; do, keep learning, and keep attempting new things. Good luck!&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>I made a Bandersnatch clone. Come interview me!</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 12 Dec 2021 22:25:14 +0000</pubDate>
      <link>https://dev.to/noriller/i-made-a-bandersnatch-clone-come-interview-me-5bkg</link>
      <guid>https://dev.to/noriller/i-made-a-bandersnatch-clone-come-interview-me-5bkg</guid>
      <description>&lt;p&gt;It's amazing how complex something can get.&lt;br&gt;
And something like this sure demanded a lot, especially because, many of the APIs I had never used.&lt;br&gt;
And also... all the event listeners and triggers... so many triggers.&lt;/p&gt;

&lt;p&gt;My player has a fraction of the functionalities a player like Youtube has, and yet I was already drowning in endless "pages" of events.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-stack"&gt;
  &lt;/a&gt;
  The stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next.js / React.js

&lt;ul&gt;
&lt;li&gt;Mostly because is what I'm used to... and since I'm using React, no reason not to go with Next, even though I'm not actually using anything it offers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chakra UI

&lt;ul&gt;
&lt;li&gt;I love the developer experience of Chakra UI. I mean... what's more intuitive than &lt;code&gt;fontSize={[1em', '1.2em', '1.5em']}&lt;/code&gt; to handle breakpoint values?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS S3/Cloudfront

&lt;ul&gt;
&lt;li&gt;The videos are hosted there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Github of the project: &lt;a href="https://github.com/Noriller/bander-interview"&gt;https://github.com/Noriller/bander-interview&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-im-not-using"&gt;
  &lt;/a&gt;
  What I'm not using
&lt;/h3&gt;

&lt;p&gt;The video data should probably be inside a CMS... and if I want to make it a "boilerplate" of sorts for other things, I could probably refactor a lot to make all the configuration taken from a CMS... &lt;br&gt;
If I did that, I could actually put Next to use and have multiple different copies, each one for one occasion.&lt;br&gt;
But that will come another time...&lt;/p&gt;

&lt;p&gt;And tests... I chose not to have tests because the components are either too humble or too "godly".&lt;br&gt;
The actual video player has too many triggers going on and I was changing a lot from commit to commit, alongside learning the APIs... so, I'm ashamed to say... it's not tested.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-player"&gt;
  &lt;/a&gt;
  The player
&lt;/h2&gt;

&lt;p&gt;What do you need for a player?&lt;/p&gt;

&lt;p&gt;I choose to go vanilla on this one, using the pure &lt;code&gt;&amp;lt;video /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;For those who don't know, the most important APIs for the player are the &lt;code&gt;[HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement)&lt;/code&gt; and the &lt;code&gt;[Media Source API](https://developer.mozilla.org/en-US/docs/Web/API/MediaSource)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTMLMediaElement&lt;/code&gt; is the one you use for the video components.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Media Source API&lt;/code&gt; is the one you use if you want full control of the buffer you're using on your video. (This one, basically gives you player superpowers!)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#things-to-consider"&gt;
  &lt;/a&gt;
  Things to consider
&lt;/h3&gt;

&lt;p&gt;When making the best video player possible... you probably want to make your own controls, so give a look at my &lt;a href="https://dev.to/noriller/the-fullscreen-api-4mbj"&gt;Fullscreen API&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;And, when I think about a video player I think about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Play/Pause&lt;/li&gt;
&lt;li&gt;Volume&lt;/li&gt;
&lt;li&gt;Video Quality&lt;/li&gt;
&lt;li&gt;Playback Speed&lt;/li&gt;
&lt;li&gt;Seek bar&lt;/li&gt;
&lt;li&gt;Fullscreen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All with buttons (or clicks) and with listeners for the keyboard. &lt;/p&gt;

&lt;p&gt;Of course, you're always free to not implement something, maybe because it's something you think your app shouldn't do... (as I did!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#interview"&gt;
  &lt;/a&gt;
  Interview?
&lt;/h2&gt;

&lt;p&gt;Fine, you want to see the finished product right?&lt;/p&gt;

&lt;p&gt;But first...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whats-the-interview-about"&gt;
  &lt;/a&gt;
  What's the interview about?
&lt;/h3&gt;

&lt;p&gt;And the interview is actually a job interview... mine!&lt;br&gt;
You can interview me at &lt;a href="https://noriller-interview.vercel.app/"&gt;https://noriller-interview.vercel.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm currently job hunting for a job opportunity outside Brazil (where I'm currently living).&lt;br&gt;
And since I had little success, I decided to spice my portfolio a bit while making sure I could get interviewed by anyone who wants it.&lt;br&gt;
There are a lot of opportunities out there, but for reasons... even when I got to the interview phase...&lt;/p&gt;

&lt;p&gt;If you or your company is hiring... I want to work with you!&lt;br&gt;
I like frontend, but I'm fullstack. And while I do have some years of programming, I'm considering even junior positions (I do still have a lot to learn!).&lt;br&gt;
I would love to work on-site or hybrid... so I would need sponsorship.&lt;/p&gt;

&lt;p&gt;If not, you can always help by sharing... maybe someone will want to work with an "outside the box" guy who made a Bandersnatch clone to get interviews.&lt;/p&gt;

&lt;p&gt;If you want, you can share this very message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Check this out: mad lad made a Bandersnatch clone to get interviews!
Watch here: https://noriller-interview.vercel.app/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And regardless of that... feel free to add me on &lt;a href="https://www.linkedin.com/in/noriller/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a special thanks, I have to acknowledge another "outside the box" person who used a chatbot to get a lot of interviews. I saw in the news somewhere, a few months ago and since I can do frontend... well... there you have it.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>javascript</category>
      <category>devjournal</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Introduction to Blockchain Technology and  Development.</title>
      <author>Daniel Onuoha  Agbo</author>
      <pubDate>Sun, 12 Dec 2021 22:09:39 +0000</pubDate>
      <link>https://dev.to/shieldstring/introduction-to-blockchain-technology-and-development-4g50</link>
      <guid>https://dev.to/shieldstring/introduction-to-blockchain-technology-and-development-4g50</guid>
      <description>&lt;p&gt;After going through the material here, you would've learned a lot about Blockchain and What it is all about. Let's dive in 🚀.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  🔰Definition
&lt;/h3&gt;

&lt;p&gt;A Blockchain is a decentralized distributed ledger network that is cryptographically secured.&lt;/p&gt;

&lt;p&gt;Think of it as a database where different features can be built on such as coins, apps etc and no single entity has control over it. This allows for transparency, security and gives everyone full control of their assets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#networks"&gt;
  &lt;/a&gt;
  🔰Networks:
&lt;/h3&gt;

&lt;p&gt;We have 3 major types of networks in computing, they are:&lt;br&gt;
Centralized, Decentralized and Distributed Networks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YV1Minqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb3fec07pta7l3mh5pie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YV1Minqh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb3fec07pta7l3mh5pie.png" alt="Image description" width="600" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a centralized network, all the data and information is regulated by a single entity. Example Facebook, WhatsApp etc they are all centralized.&lt;/p&gt;

&lt;p&gt;In a decentralized network, different nodes on the network have equally control and the source of Truth is checked on the network to ensure that everyone has a correct copy regardless of if any node tampers with It's copy.&lt;/p&gt;

&lt;p&gt;In a distributed network, there are not only few nodes that have access to the data but the idea is stretched such that it is peer-to-peer and every participant in the network has equal access.&lt;/p&gt;

&lt;p&gt;A Blockchain combines the features of a Decentralized &amp;amp; a Distributed network, to provide transparency, security and peer-to-peer interaction.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blockchain-development"&gt;
  &lt;/a&gt;
  💻&lt;strong&gt;Blockchain Development&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The idea of Blockchain Development is all about building on the Blockchain.&lt;/p&gt;

&lt;p&gt;This can be anything from Cryptocurrencies, tokens, smart contracts or dApps. What do all these mean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cryptocurrency"&gt;
  &lt;/a&gt;
  🔰Cryptocurrency:
&lt;/h2&gt;

&lt;p&gt;This is a digital currency that runs on the Blockchain Network. Similar to the way we have physical cash or fiat. Cryptocurrencies can be stored in a wallet and used as a viable means of exchange.&lt;/p&gt;

&lt;p&gt;*A wallet can be an App or Device that stores the digital assets. And is accessible using a private key.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tokens"&gt;
  &lt;/a&gt;
  🔰 Tokens:
&lt;/h2&gt;

&lt;p&gt;Tokens serve as digital assets on the blockchain. They are very similar to native Cryptocurrencies in the sense that they can be easily created by any entity for the purpose of generating funds, driving a product on the blockchain or providing incentives for the use of certain services provided on the blockchain. Tokens can equally be traded and fungible(divisible into smaller parts). Most tokens are usually distributed with an Initial Coin Offering (ICO)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smart-contracts"&gt;
  &lt;/a&gt;
  🔰Smart Contracts:
&lt;/h2&gt;

&lt;p&gt;A smart contract is a self-executing contract with the terms of the agreement between buyer and seller being directly written into lines of code. The code and the agreements contained therein exist across a distributed, decentralized blockchain network. The code controls the execution, and transactions are track-able and irreversible.&lt;/p&gt;

&lt;p&gt;Smart contracts permit trusted transactions and agreements to be carried out among disparate, anonymous parties without the need for a central authority, legal system, or external enforcement mechanism.&lt;/p&gt;

&lt;p&gt;In simple terms smart contracts are just pieces of code that enables transactions, entities, apps etc to interact with the Blockchain Network without a 3rd party.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nfts"&gt;
  &lt;/a&gt;
  🔰NFTS
&lt;/h2&gt;

&lt;p&gt;(NON-FUNGIBLE TOKENS)&lt;/p&gt;

&lt;p&gt;These are digital assets that are not divisible as the name implies. Unlike Cryptocurrencies which can be exchange and look identical, NFTs are unique and have a metadata that ties them to the identity of it's owner.&lt;/p&gt;

&lt;p&gt;NFTs are a revolution because it has created a means to define the authenticity of assets and can be tied to documents, real estate, arts etc.&lt;/p&gt;

&lt;p&gt;Imagine writing a book and selling it as an NFT, this would mean that whosoever buys it has sole ownership of it and everybody would know that they own it. They can choose to sell it or transfer it at any perceived value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  🔰Conclusion
&lt;/h2&gt;

&lt;p&gt;Blockchain  technology  might  become  the  defining technology of the future, specifically because it has unique  building  blocks  that  allow  us  to  build  trust enabling  infrastructures.  Where  we  go  from  here would be a defining moment that future generations would be grateful for and understanding how it all fits in would go a long way to enable everyone to be a part of this alternate possibility.&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>web3</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>A Simple chat app using Socket.io with NodeJS and ReactJS </title>
      <author>Malik-Idrees</author>
      <pubDate>Sun, 12 Dec 2021 21:16:52 +0000</pubDate>
      <link>https://dev.to/malikidrees/a-simple-chat-app-using-socketio-with-nodejs-and-reactjs-46i0</link>
      <guid>https://dev.to/malikidrees/a-simple-chat-app-using-socketio-with-nodejs-and-reactjs-46i0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-used"&gt;
  &lt;/a&gt;
  I have used:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;NodeJS with Express for server side logic&lt;/li&gt;
&lt;li&gt;ReactJS to build a simple client app&lt;/li&gt;
&lt;li&gt;Socket.io for real-time connection between both sides&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://reactsocket.netlify.app"&gt;Live Preview&lt;/a&gt;&lt;br&gt;
Connect from two different tabs or two different PC's to test it out&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5d_UFbHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avw8utrdbq9rhq29b6y9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5d_UFbHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avw8utrdbq9rhq29b6y9.PNG" alt="shows the landing page" width="880" height="349"&gt;&lt;/a&gt;&lt;br&gt;
You can use it to understand how sockets work in react with a bit of touch from Material UI.&lt;/p&gt;

&lt;p&gt;I am a full stack developer and i created this small app to understand working of sockets. Here is another &lt;a href="https://youtu.be/ZwFA3YMfkoc"&gt;resource&lt;/a&gt; to learn about socket by JavaScript Mastery.&lt;/p&gt;

&lt;p&gt;Stay Tuned  for more coming soon! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;A detailed article about creating API's using Node.js and MongoDb along with In-memory testing and optional GitHub actions to test and deploy to Heroku whenever I have free time.&lt;/p&gt;

&lt;p&gt;GitHub: &lt;a href="https://dev.tomalik-idrees"&gt;https://github.com/malik-Idrees&lt;/a&gt; ⭐&lt;br&gt;
Fiverr: &lt;a href="https://www.fiverr.com/share/27Yy04"&gt;imidrees&lt;/a&gt; ✨&lt;br&gt;
Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>socket</category>
    </item>
    <item>
      <title>Caso de uso: RegEx</title>
      <author>bug_elseif</author>
      <pubDate>Sun, 12 Dec 2021 21:10:45 +0000</pubDate>
      <link>https://dev.to/feministech/caso-de-uso-regex-19bn</link>
      <guid>https://dev.to/feministech/caso-de-uso-regex-19bn</guid>
      <description>&lt;p&gt;Podemos identificar padrões em uma cadeia de caracteres usando Expressões Regulares (&lt;em&gt;Regular Expression&lt;/em&gt; ou RegEx).&lt;/p&gt;

&lt;p&gt;Para validar o formato de um CPF, por exemplo, é necessário que esteja no seguinte padrão:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;xxx.xxx.xxx-xx&lt;/code&gt; (cada &lt;code&gt;x&lt;/code&gt; corresponde à um dígito decimal)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então através de uma RegEx conseguimos identificar se esse padrão foi seguido ou não.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introdu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Introdução
&lt;/h2&gt;

&lt;p&gt;Usando a linguagem de programação Python, importa-se o módulo &lt;code&gt;re&lt;/code&gt; que fornece operações de expressões regulares.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cria-se uma função &lt;code&gt;validar&lt;/code&gt; a qual recebe uma string &lt;code&gt;cpf&lt;/code&gt;, ela retorna &lt;code&gt;válido&lt;/code&gt; ou &lt;code&gt;inválido&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;validador&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expressao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cpf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;validador&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'válido'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'inválido'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primeiro-caso"&gt;
  &lt;/a&gt;
  Primeiro caso
&lt;/h2&gt;

&lt;p&gt;Usando a função &lt;code&gt;re.match&lt;/code&gt;, compara-se o &lt;code&gt;cpf&lt;/code&gt; com a expressão regular compilada &lt;code&gt;expressao&lt;/code&gt;, ela retorna um &lt;code&gt;Match Object&lt;/code&gt; caso combine, do contrário retorna &lt;code&gt;None&lt;/code&gt;, o valor é atribuído à variável &lt;code&gt;validador&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A expressão escrita a seguir contém alguns símbolos com significado especial, são eles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;^&lt;/code&gt; sinaliza o início de uma linha ou string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$&lt;/code&gt; sinaliza o fim de uma linha ou string&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\d&lt;/code&gt; corresponde aos dígitos decimais de 0 a 9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um detalhe importante, o uso de &lt;code&gt;.&lt;/code&gt; também possui um significado especial e para retirar esse significado usa-se a &lt;code&gt;\&lt;/code&gt; antes do caracter, assim ele se torna o &lt;code&gt;.&lt;/code&gt; (ponto literal).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\d\d\d\.\d\d\d\.\d\d\d-\d\d$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essa expressão é escrita de uma forma simples, repetindo os caracteres no formato esperado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evitando-repeti%C3%A7%C3%A3o-de-elementos"&gt;
  &lt;/a&gt;
  Evitando repetição de elementos
&lt;/h2&gt;

&lt;p&gt;Podemos reescrevê-la usando mais recursos implementados no módulo &lt;code&gt;re&lt;/code&gt;, usando o conceito de repetição de elementos da RegEx representados por chaves &lt;code&gt;{}&lt;/code&gt;, aplicando-o ao conjunto de dígitos &lt;code&gt;\d&lt;/code&gt; que é repetido um certo número de vezes, obtem-se:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^\d{3}\.\d{3}\.\d{3}-\d{2}$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#evitando-repeti%C3%A7%C3%A3o-de-trechos"&gt;
  &lt;/a&gt;
  Evitando repetição de trechos
&lt;/h2&gt;

&lt;p&gt;Outra forma de expressar a RegEx é usando o conceito de grupos. Nesse caso podemos agrupar um trecho do formato que se repete, fazendo um grupo de 3 dígitos e um &lt;code&gt;.&lt;/code&gt; (ponto literal), que devem ser repetidos duas vezes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;expressao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'^(\d{3}\.){2}\d{3}-\d{2}$'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#exemplos-de-execu%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Exemplos de execução
&lt;/h2&gt;

&lt;p&gt;Usaremos três exemplos para testar a validação do CPF:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'111.222.333-44'&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'1234.123.789-88'&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'123.12.789-88'&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'abs.ert.yui.lk'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'''
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    O CPF: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; é &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;validar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;
    '''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Analisando a saída obtida, notamos que:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;O exemplo &lt;code&gt;a&lt;/code&gt; está no formato correto.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;b&lt;/code&gt; contém mais dígitos do que o esperado no primeiro trecho.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;c&lt;/code&gt; contém menos dígitos do que o esperado no segundo trecho.&lt;/li&gt;
&lt;li&gt;O exemplo &lt;code&gt;d&lt;/code&gt; apresenta caracteres não-dígitos, sendo inválido.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    O CPF: 111.222.333-44 é válido
    O CPF: 1234.123.789-88 é inválido
    O CPF: 1234.12.789-88 é inválido
    O CPF: abs.ert.yui.lk é inválido
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Vimos que uma RegEx pode ser escrita de várias formas para validar o mesmo padrão e ainda existem diversas outras maneiras, podendo levar em conta a legibilidade ou complexidade da escrita para fazer sua escolha.&lt;/p&gt;

&lt;p&gt;Aprendendo mais sobre os recursos do &lt;a href="https://docs.python.org/pt-br/3/library/re.html"&gt;módulo &lt;em&gt;re&lt;/em&gt; do Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estudando mais sobre &lt;a href="https://aurelio.net/regex/"&gt;expressões regulares&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se escreve &lt;a href="https://www.flip.pt/Duvidas-Linguisticas/Duvida-Linguistica/DID/745"&gt;caracter/caráter/caracteres&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

</description>
      <category>python</category>
      <category>regex</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>OSD600 - Final Release</title>
      <author>DukeManh</author>
      <pubDate>Sun, 12 Dec 2021 20:55:37 +0000</pubDate>
      <link>https://dev.to/dukemanh/osd600-final-release-2pl</link>
      <guid>https://dev.to/dukemanh/osd600-final-release-2pl</guid>
      <description>&lt;p&gt;For release 0.4, I decided to take the the time to participate in the 2021 GitHub Action hackathon and continue to contribute to Telescope.&lt;/p&gt;

&lt;p&gt;About the same time we worked on integrating GitHub Continuous Integration into our SSG project, GitHub announced they are holding &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4"&gt;2021 GitHub Action&lt;/a&gt; hackathon in collaboration with Dev. This year, we’re encouraged to utilize existing GitHub Actions to create workflows solutions other developers can utilize to solve problems with open source. &lt;a href="https://dev.to/dukemanh/run-prettier-eslint-on-changed-files-and-run-tests-on-changed-workspaces-25n8"&gt;My submission&lt;/a&gt; was a workflow to run code linter and formatter on only changed files and run test on only changed workspaces of a monorepo. I used what learned from building an SSG in OSD600 to build this project. After all, I walked away having a deeper understanding of GitHub actions, from exploring many existing actions, to building a useful one and publishing it to GitHub marketplace.&lt;/p&gt;

&lt;p&gt;The other contributions were for improving website accessibility and responsiveness in Telescope. These fixed some of the minor issues I encountered while using Telescope myself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Truncate post titles at 2 lines vs 1&lt;/li&gt;
&lt;li&gt;Fluid post titles&lt;/li&gt;
&lt;li&gt;Smaller code block padding on mobile&lt;/li&gt;
&lt;li&gt;Smaller code font-size&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; for date data. Interesting, I learned that &lt;a href="https://github.com/humphd"&gt;David&lt;/a&gt; was the &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=629801"&gt;original author&lt;/a&gt; of the &lt;time&gt; element, implemented 11 years ago. Thank you Dave for your many contributions in open-source technology.&lt;/time&gt;
&lt;/li&gt;
&lt;li&gt;Fix &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; cannot be descendant of &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; DOM warning&lt;/li&gt;
&lt;li&gt;Do not skip heading levels (e.g, from &lt;code&gt;h1&lt;/code&gt; to &lt;code&gt;h3&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2594"&gt;#2594&lt;/a&gt;, &lt;br&gt;
&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2593"&gt;#2593&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Python: The Best Image Processing Libraries</title>
      <author>images.cv</author>
      <pubDate>Sun, 12 Dec 2021 20:48:34 +0000</pubDate>
      <link>https://dev.to/imagescv/python-the-best-image-processing-libraries-1gfl</link>
      <guid>https://dev.to/imagescv/python-the-best-image-processing-libraries-1gfl</guid>
      <description>&lt;p&gt;&lt;strong&gt;In this blog post, we will take a look at some of the best image processing libraries in Python. We'll spend time looking at their strengths and weaknesses to help you pick one that is right for your needs!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html"&gt;OpenCV&lt;/a&gt; &lt;br&gt;
The Open Computer Vision library, or simply OpenCV, is a collection of powerful image processing tools. It was originally developed for use in the video game industry but has since found widespread success outside of it as well! If you are looking for an open source alternative to MATLAB, then this might be your best bet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://matplotlib.org/"&gt;Matplotlib&lt;/a&gt; &lt;br&gt;
The matplotlib library is a plotting library for Python. It can be used to generate plots in either the "matlab" style or the more traditional gnuplot-style, depending on your preference. Best of all, it's actually built into numpy; simply use np.imshow() and youj'll be on your way!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://numpy.org/"&gt;Numpy&lt;/a&gt; &lt;br&gt;
While not exactly an image processing library, numpy is one of the most important libraries for scientific computing in Python today. It provides powerful tools like linear algebra and Fourier transforms that make it easier to work with images. If you are doing serious mathematics or data analysis with your images, then this is probably the library you want to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://imagemagick.org/script/develop.php"&gt;ImageMagick&lt;/a&gt; &lt;br&gt;
ImageMagick is a software suite for processing images. It has its own programming language that allows users to manipulate their image files in many ways, including resizing, adjusting color balance or applying filters and effects. Image processing with ImageMagick can be done from the command line or through a graphical interface.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pillow.readthedocs.io/en/stable/"&gt;Pillow&lt;/a&gt; &lt;br&gt;
The Pillow library is a fork of the PIL library that aims to be more user-friendly and maintainable. It includes many of the same features as PIL, but also adds support for animated GIFs, JPEG2000 files, and WebP images. If you are looking for a drop-in replacement for PIL, then this is probably your best bet!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://scikit-image.org/"&gt;Scikit-image&lt;/a&gt; &lt;br&gt;
The Scikit-image library is a collection of image processing algorithms that are designed to be easy to use and understand. It includes algorithms for common tasks like edge detection, feature extraction, and image restoration. If you are just starting out in image processing, then this is a good library to check out!&lt;/p&gt;




&lt;p&gt;That's it for our roundup of the best image processing libraries in Python! We hope this gives you a better idea of which one is right for your needs. If you have any questions, feel free to leave a comment below!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size, and data augmentation.&lt;br&gt;
👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>imageprocessing</category>
    </item>
    <item>
      <title>Sentiment Analysis With 🐍. Making Your First Sentiment Analysis Script.</title>
      <author>Code_Jedi</author>
      <pubDate>Sun, 12 Dec 2021 20:22:14 +0000</pubDate>
      <link>https://dev.to/code_jedi/sentiment-analysis-with-making-your-first-sentiment-analysis-script-4ea8</link>
      <guid>https://dev.to/code_jedi/sentiment-analysis-with-making-your-first-sentiment-analysis-script-4ea8</guid>
      <description>&lt;p&gt;Do you want to perform sentiment analysis with Python but don't know how to get started? Not to worry. In this article, I'll demonstrate and explain how you can make your own sentiment analysis app, even if you are new to Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-is-sentiment-analysis"&gt;
  &lt;/a&gt;
  What Exactly Is Sentiment Analysis?
&lt;/h2&gt;

&lt;p&gt;If you've been following programming and data science, you'll probably be familiar with sentiment analysis. If you're not, here the definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The process of computationally identifying and categorizing opinions expressed in a piece of text, especially in order to determine whether the writer's attitude towards a particular topic, product, etc. is positive, negative, or neutral.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sentiment analysis programs have become increasingly popular in the tech world. It's time you make one for yourself!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#educative"&gt;
  &lt;/a&gt;
  Educative
&lt;/h2&gt;

&lt;p&gt;Before I get on with the article, I'd like to recommend &lt;a href="https://bit.ly/3rVIDoN"&gt;Educative&lt;/a&gt; for learners like you.&lt;br&gt;
&lt;strong&gt;Why Educative?&lt;/strong&gt;&lt;br&gt;
It is home to hundreds of development courses, hands on tutorials, guides and demonstrations to help you stay ahead of the curve in your development journey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get started with Educative &lt;a href="https://bit.ly/3EeDfAi"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#making-a-simple-sentiment-analysis-script"&gt;
  &lt;/a&gt;
  Making A Simple Sentiment Analysis Script
&lt;/h1&gt;

&lt;p&gt;Let's make a simple sentiment analysis script with Python. What will it do? &lt;br&gt;
It will:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scrape news headlines from BBC news.&lt;/li&gt;
&lt;li&gt;Get rid of unwanted scraped elements and duplicates.&lt;/li&gt;
&lt;li&gt;Scan every headline for words that may indicate it's sentiment.&lt;/li&gt;
&lt;li&gt;Based on the found words, determine each headline's sentiment.&lt;/li&gt;
&lt;li&gt;Aggregate the headlines into different arrays based on their sentiment.&lt;/li&gt;
&lt;li&gt;Print the number of scraped headlines and number of headlines with a positive, negative and neutral sentiment.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Create a new Python file with your favorite text-editor. You can name it however you want, but I'll name the file &lt;em&gt;main.py&lt;/em&gt; for this tutorial.&lt;br&gt;
Before writing the main code, make sure to install(if not already installed) and import the following libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-dataset"&gt;
  &lt;/a&gt;
  The Dataset
&lt;/h2&gt;

&lt;p&gt;A sentiment analysis script needs a dataset to train on.&lt;br&gt;
Here's &lt;a href="https://github.com/matveynikon/Sentiment-Analysis-With-Python/blob/main/sentiment.csv"&gt;the dataset&lt;/a&gt; that I made for this script. I've tested it and found it to work well.&lt;br&gt;
To work with this tutorial, make sure to download this dataset, move it into your Python file's directory and add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you take a look at this dataset, you'll notice that it's just over 100 lines long. Each line contains a number, 1 or 0 and a word.&lt;br&gt;
The number just gives a way for the Python file to paddle through each word, the word is what is going to indicate a headline's sentiment, and the 1 or 0 indicates whether the word has negative(0) or positive(1) sentiment.&lt;br&gt;
This isn't a lot, but it is enough to perform accurate sentiment analysis on news headlines, which are typically only about 6-10 words long. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#scraping-the-news-headlines"&gt;
  &lt;/a&gt;
  Scraping The News Headlines
&lt;/h2&gt;

&lt;p&gt;Here's the code that is going to scrape the news headlines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this is not a web scraping tutorial, you don't have to understand what's happening here. In case you are interested in how this works, here's a tutorial on how to &lt;a href="https://dev.to/code_jedi/scrape-news-headlines-with-python-1go6"&gt;scrape news headlines with Python in &amp;lt;10 lines of code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before performing sentiment analysis on the scraped headlines, add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;unwanted&lt;/em&gt; array contains elements that will be scraped from BBC news, that are not news headlines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performing-sentiment-analysis"&gt;
  &lt;/a&gt;
  Performing Sentiment Analysis
&lt;/h2&gt;

&lt;p&gt;It's time to write the code which will perform sentiment analysis on the scraped headlines.&lt;br&gt;
Add the following code to your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what this code does:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, it defines the &lt;em&gt;neutral&lt;/em&gt;, &lt;em&gt;bad&lt;/em&gt; and &lt;em&gt;good&lt;/em&gt; arrays.&lt;/li&gt;
&lt;li&gt;While paddling through every scraped headline element, it checks if it's not inside the &lt;em&gt;unwanted&lt;/em&gt; and &lt;em&gt;news&lt;/em&gt; array.&lt;/li&gt;
&lt;li&gt;It appends the headline to the &lt;em&gt;news&lt;/em&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason why it checks if the headline is in the &lt;em&gt;unwanted&lt;/em&gt; and &lt;em&gt;news&lt;/em&gt; array is to exclude non-headline elements and prevent duplicate headlines to be analyzed more than once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's perform sentiment analysis on the news headlines by adding the following code to the &lt;code&gt;if x.text.strip() not in unwanted and x.text.strip() not in news:&lt;/code&gt; condition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    for i in range(len(df['n'])):
        if sen[i] in x.text.strip().lower():
            if cat[i] == 0:
                bad.append(x.text.strip().lower())
            else:
                good.append(x.text.strip().lower())

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's what this code does:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, the &lt;code&gt;for i in range(len(df["n"])):&lt;/code&gt; loop makes sure to search the headlines for any of the words in the &lt;em&gt;sentiment.csv&lt;/em&gt; dataset.&lt;/li&gt;
&lt;li&gt;If a word from the dataset is found in the headline using the &lt;code&gt;if sen[i] in x.text.strip().lower():&lt;/code&gt; condition, the &lt;code&gt;if cat[i] == 0:&lt;/code&gt; condition then finds if the found word has a negative or positive sentiment and adds the headline to either the &lt;em&gt;bad&lt;/em&gt; or &lt;em&gt;good&lt;/em&gt; array.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;The &lt;code&gt;lower()&lt;/code&gt; function converts all the letters inside the headlines to lowercase. This is done because the word search algorithm is case sensitive.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
        for i in range(len(df['n'])):
            if sen[i] in x.text.strip().lower():
                if cat[i] == 0:
                    bad.append(x.text.strip().lower())
                else:
                    good.append(x.text.strip().lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#theres-one-thing-left-to-do"&gt;
  &lt;/a&gt;
  There's one thing left to do.
&lt;/h3&gt;

&lt;p&gt;Add the following code to the end of your Python file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;badp = len(bad)
goodp = len(good)
nep = len(news) - (badp + goodp)
print('Scraped headlines: '+ str(len(news)))
print('Headlines with negative sentiment: ' + str(badp) + '\nHeadlines with positive sentiment: ' + str(goodp) + '\nHeadlines with neutral sentiment: ' + str(nep))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print the number of scraped headlines and the number of headlines with a bad, good and neutral sentiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The End Result
&lt;/h2&gt;

&lt;p&gt;Here's the full sentiment analysis code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
import pandas
from bs4 import BeautifulSoup
import numpy as np

df = pandas.read_csv('sentiment.csv')
sen = df['word']
cat = df['sentiment']

url='https://www.bbc.com/news'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
headlines = soup.find('body').find_all('h3')
unwanted = ['BBC World News TV', 'BBC World Service Radio', 'News daily newsletter', 'Mobile app', 'Get in touch']
news = []
neutral = []
bad = []
good = []
for x in headlines:
    if x.text.strip() not in unwanted and x.text.strip() not in news:
        news.append(x.text.strip())
        for i in range(len(df['n'])):
            if sen[i] in x.text.strip().lower():
                if cat[i] == 0:
                    bad.append(x.text.strip().lower())
                else:
                    good.append(x.text.strip().lower())

badp = len(bad)
goodp = len(good)
nep = len(news) - (badp + goodp)
print('Scraped headlines: '+ str(len(news)))
print('Headlines with negative sentiment: ' + str(badp) + '\nHeadlines with positive sentiment: ' + str(goodp) + '\nHeadlines with neutral sentiment: ' + str(nep))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you run your Python file containing the above code, you will see an output similar to the below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ziVqoBNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7v1ssnnlfyb96aakdz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ziVqoBNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7v1ssnnlfyb96aakdz5.png" alt="Output" width="880" height="178"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that this tutorial has successfully demonstrated how you can perform sentiment analysis with Python.&lt;/p&gt;

&lt;p&gt;Byeeee👋&lt;/p&gt;

</description>
      <category>python</category>
      <category>datascience</category>
      <category>tutorial</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Documentation in Python - Part 1</title>
      <author>Dev_it</author>
      <pubDate>Sun, 12 Dec 2021 20:13:49 +0000</pubDate>
      <link>https://dev.to/alizdevcorner/documentation-in-python-part-1-4h8l</link>
      <guid>https://dev.to/alizdevcorner/documentation-in-python-part-1-4h8l</guid>
      <description>&lt;p&gt;One of the major challenges in software engineering is documentation. After all, software is not only about code but the documentation that comes with it. It is a manual, costly process which should be human legible and comprehensible.&lt;/p&gt;

&lt;p&gt;So why is documentation so important ? &lt;br&gt;
When the code-base is huge and the complexities are high, having a well documented code is extremely helpful. Even more so, when a developer leaves an organization taking the code-base specific developer knowledge with them.&lt;/p&gt;

&lt;p&gt;In this blog we will talk about some of the ways we can document code functionality in Python. &lt;/p&gt;

&lt;p&gt;Since Python is a dynamically typed language, coding modules for example a piece of code for a function can take any parameter values without any validations or checks. In some cases, the function name and parameters may be self-explanatory but how the parameters and function work may be unknown unless the code is read which can contain large number of complexities.Therefore having documentation on inputs and outputs of a function provides utility and potentially yielding higher productivity.&lt;/p&gt;

&lt;p&gt;Python offers docstrings which are strings placed in the code for documentation purposes. They are used for explanations rather than justifications. Wait, wait, hold on so you are claiming a developer should use docstrings for documenting the code ? Okayy, what about comments ?&lt;/p&gt;

&lt;p&gt;Excellent question! Comments in the code base show that there is a flaw in how the code works that is why it was left. Flawed code means that the code can be improved upon as it fails to be self-explanatory. Worse than reading complicated code is, reading a comment on how it works and then finding out that the code does something else. This is specially true when the code changes and the comment stays.&lt;/p&gt;

&lt;p&gt;The more accepted and encouraged practice is to use docstrings. They should be added in the code-base wherever possible. &lt;/p&gt;

&lt;p&gt;Lets look at an example of a docstring in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User:
    """
    A class to represent a User.

    ...

    Attributes
    ----------
    username : str
        username of the user
    email: str
        email of the user

    """

    def __init__(self, username, email):
        """
        Initializes the attributes for the User object.

        Parameters
        ----------
            username: str
                username of the user
            email: str
                email of the user
        """

        self.username = username
        self.email = email
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have defined a simple class for a User Type with only 2 attributes and no methods. The multiline strings serve as documentation for the User Type and are placed right below a class method, or a function. The documentation can be accessed either with the &lt;em&gt;help&lt;/em&gt; command or &lt;em&gt;&lt;strong&gt;doc&lt;/strong&gt;&lt;/em&gt; command like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; help(User)
class User(builtins.object)
 |  User(username, email)
 |
 |  A class to represent a User.
 |
 |  ...
 |
 |  Attributes
 |  ----------
 |  username : str
 |      username of the user
 |  email: str
 |      email of the user
 |
 |  Methods defined here:
 |
 |  __init__(self, username, email)
 |      Initializes the attributes for the User object.
 |
 |      Parameters
 |      ----------
 |          username: str
 |              username of the user
 |          email: str
 |              email of the user
 |
 |  ----------------------------------------------------------------------
&amp;gt;&amp;gt;&amp;gt; User.__doc__
A class to represent a User.
  ...

  Attributes
  ----------
  username : str
      username of the user
  email: str
      email of the user
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As seen in the above examples, both methods display the documentation for the User Type with the help function providing more details. So the next time, the code is changed don't forget to change the documentation as well. Think of your future self or the next developer who will work on the code-base.&lt;/p&gt;

&lt;p&gt;In the next article, we will talk about Annotations in Python. In the meantime, Happy Documenting!&lt;/p&gt;

</description>
      <category>python</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Building a simple alarm clock with Dasha, Express, Ejs and tailwind which force user to wake up</title>
      <author>Muhammad Ali (Nerdjfpb)</author>
      <pubDate>Sun, 12 Dec 2021 19:55:40 +0000</pubDate>
      <link>https://dev.to/nerdjfpb/building-a-simple-alarm-clock-with-dasha-express-ejs-and-tailwind-which-force-user-to-wake-up-5b7a</link>
      <guid>https://dev.to/nerdjfpb/building-a-simple-alarm-clock-with-dasha-express-ejs-and-tailwind-which-force-user-to-wake-up-5b7a</guid>
      <description>&lt;p&gt;Most probably, the title doesn't give a good idea about what we will build together today! We are trying to build an alarm clock that will call users and solve a riddle. It'd not cut the call unless they got it correct. But there is a chance of saying no if they don't want to wake up at that point. This blog will be vast if I complete the full features. So I'll try to make a minimal version where we'll use Dasha(&lt;a href="https://dasha.ai/"&gt;https://dasha.ai/&lt;/a&gt;) to make this. We are going to use &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Npm (for installing packages)&lt;/li&gt;
&lt;li&gt;Express js (For the API development) &lt;/li&gt;
&lt;li&gt;Ejs (templating language for HTML)&lt;/li&gt;
&lt;li&gt;TailwindCSS (for styling)&lt;/li&gt;
&lt;li&gt;Dasha (for making alarm clock interesting with the help of conversational AI)&lt;/li&gt;
&lt;li&gt;Vscode (code editor)&lt;/li&gt;
&lt;li&gt;Github (for getting dasha blank app)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start building, but before that, let's learn what it'll look like. Here is the final screenshot - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFgSgEkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6su8s7rfocwjcyeuixfk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFgSgEkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6su8s7rfocwjcyeuixfk.png" alt="final screenshot" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By putting the phone number, we'll get a call to give the correct answer to end the call! We will build a short version of it because otherwise, the blog will be vast and hard to follow. &lt;/p&gt;

&lt;p&gt;Let's explore the Dasha first about learning how we can start. For using Dasha, you need to get an account there first. It's straightforward to register an account in Dasha; go to this URL (&lt;a href="https://auth.dasha.ai/account/register"&gt;https://auth.dasha.ai/account/register&lt;/a&gt;) and register your account for your key. It's still in beta mode, so that UI can change from time to time.&lt;/p&gt;

&lt;p&gt;Now, let's install the Dasha to log in and use its features. We are following this URL (&lt;a href="https://docs.dasha.ai/en-us/default"&gt;https://docs.dasha.ai/en-us/default&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g "@dasha.ai/cli@latest"
dasha account login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the login, it'll be better to install Dasha studio in our vscode &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxF4DJ70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibqvbpnjgcu9o3xeyqdd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxF4DJ70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibqvbpnjgcu9o3xeyqdd.png" alt="dasha studio" width="880" height="753"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use a blank app from Dasha to build our part! Let clone it from Github.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/dasha-samples/blank-slate-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's install the packages to run it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we install, we've two paths to run this, either we can use chat or phone. I prefer the phone way so we'll run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start PHONE_NUMBER_HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this will get me a call on my phone to talk with the Dasha AI bot. But the most exciting part is that there is nothing much to talk about, as this is a small functionality. So let's look at what we've inside &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wfd089Nq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xom7w9t3ctqvgjctuwpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfd089Nq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xom7w9t3ctqvgjctuwpd.png" alt="folder structure" width="237" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The basic app comes with lots of stuff, but first, ignore the index.js file because that one is set up to run the Dasha part. So let's go to the app folder and look into the &lt;code&gt;main.dsl&lt;/code&gt; where things started!&lt;/p&gt;

&lt;p&gt;It quite looks like another programming, but there is some weird thing going on, right? Confusing right? It's a Dasha Scripting Language! So it's a little different from others. &lt;br&gt;
If we look into the first part&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "commonReactions/all.dsl";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's importing something, we can check the common reactions folder, and it'll give us some idea about what is happening here. We are loading some prewritten libraries here. So we can ignore this part for now, and let's go to the second part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;context 
{
    input phone: string;
    input name: string = ""; 
    var1: string = "";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where we are getting the variables and doing stuff; we can create variables as we want from here and use them through this file. &lt;/p&gt;

&lt;p&gt;Below this, you'll find a function like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;external function function1(log: string): string;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also ignore this one because we're not going to use the complex stuff here. Let's check what is happening in the next part (root node)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start node root 
{
    do 
    {
        #connectSafe($phone); 
        #waitForSpeech(1000);
        #say("greeting", {name: $name} );
        wait *;
    }
    transitions 
    {
        yes: goto yes on #messageHasIntent("yes"); 
        no: goto no on #messageHasIntent("no"); 
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;start node root&lt;/code&gt; is the first part where the conversation will start. This node currently has two parts; this has a do &amp;amp; transition. In the &lt;code&gt;do&lt;/code&gt; part, it'll try to run it first; then, based on user talk, it'll go to function from transition. This basic app is a basic one, so it'll just ask if the user can hear the AI voice; if the user says something which has an intent of "yes" then it'll just go to "yes function"; otherwise, this will go in no intent route. &lt;/p&gt;

&lt;p&gt;Before exploring the next node, I'll start building our part because I think it's good enough to understand what's happening here. As we are going to develop the alarm clock, we can have the common reaction for our app, so in our main.dsl, we are going to import the common reaction first. We'll just keep the phone number input because we're going to connect users using the phone. so it'll look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import "commonReactions/all.dsl";

context
{
    input phone: string;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to write our main starting root. We are creating two-part of the start node root; the first part is done. Here we'll try to connect with the phone first; then, we'll try to delay a moment for a user to give a time, then AI will start talking. We'll use the #sayText function, where we'll write what AI will ask the user. Then we'll wait for the user to reply. Here the code -&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start node root
{
    do
    {
        #connectSafe($phone);
        #waitForSpeech(1000);
        #sayText("Hello there! I am from Dasha AI and trying to call you as you requested! Are you interested to play a game?");
        wait *;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the user response, we can't go anywhere right now, so we'll create transitions now. For this basic case, we'll either go with yes intention or no intention user.  The new code will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;start node root
{
    do
    {
        #connectSafe($phone);
        #waitForSpeech(1000);
        #sayText("Hello there! I am from Dasha AI and trying to call you as you requested! Are you interested to play a game?");
        wait *;
    }
    transitions
    {
        yes: goto yes on #messageHasIntent("yes");
        no: goto no on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you must be thinking about how it's getting the intent of a user? Is this prewritten? Yes! Because we've cloned the blank app repo, now it's time to explore the data.json file. &lt;code&gt;data.json&lt;/code&gt; file has all the intent listed for us. We are using yes &amp;amp; no intent for the first step, so we're not going to change anything right now and go back to our main.dsl file to write the transitions. So let's do the easy part first, suppose the user doesn't want to wake up and say something with no intent. What should we do? We need to on &lt;code&gt;no node&lt;/code&gt; to run the rest. Let's write a &lt;code&gt;no node&lt;/code&gt; for now -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node no
{
    do
    {
        #say("no");
        exit;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are not even writing a transition because we want to end the call when the user is not interested in waking up at this moment. But here, we didn't use any direct text like old-time; instead, we used #say("no"); which is going to data from &lt;code&gt;phrasemap.json&lt;/code&gt; file. Let's have a look in there and change the no text to new text so that it works well with our desired idea.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"no": 
      {
        "first": 
        [{ "text": "Understandable! Have a nice sleep!" }]
      },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This upper one will be our data in the &lt;code&gt;phrasemap.json&lt;/code&gt; file. If you create a custom phrasemap, don't forget to add that in &lt;code&gt;macros&lt;/code&gt; in the down part of &lt;code&gt;phrasemap.json&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;Now time to build the yes part. So we're going to ask a riddle-type question here to help the user to wake up! Let's keep it simple and use #sayText to tell the text to the user and wait for his response, and based on his response, let's take a transition. The code will look like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node yes
{
    do
    {
        #sayText("I am tall when I am young, and I am short when I am old. What am I?");
        wait *;
    }

    transitions
    {
        correct: goto correct on #messageHasIntent("correctAnswer");
        no: goto no on #messageHasIntent("no");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are using two transitions; the first part is if they got the correct answer, then it'll go to a correct node. Otherwise, it'll repeat the question once (from the importing common reaction part). If the user doesn't guess correctly or try to say no, it'll end the call for now. This question is tricky, so for answering this question, the user needs to be wake &amp;amp; think, and this is the alarm part! Now let's build the final part of the puzzle, the correct answer node.&lt;/p&gt;

&lt;p&gt;The correct node will be really easy to work; we'll just say the answer is correct and end the call. Here is the simple node.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node correct
{
    do
    {
        #sayText("This is a correct answer! Have a nice morning!");
        exit;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
'&lt;br&gt;
If it's hard to follow, you can check the whole code from the GitHub link -&amp;gt; (&lt;a href="https://github.com/nerdjfpb/Dasha-alarm-clock-example/blob/master/app/main.dsl"&gt;https://github.com/nerdjfpb/Dasha-alarm-clock-example/blob/master/app/main.dsl&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;We can test the app by running it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start PHONE_NUMBER
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we will improve the app and build a view for the app, so first, start with the API. First, we need to import the expressjs, ejs to start the UI part. &lt;br&gt;
For the express API endpoints, we are going to write (in index.js file, delete the dasha code for now)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// importing express js
const express = require('express')
const app = express()

// using for getting json input
app.use(express.json())

// setting the view engine js so that we can load the file from views/pages
app.set('view engine', 'ejs')

// for showing the ui 
app.get('/', (_req, res) =&amp;gt; {
  res.render('pages/index')
})

// post url to send the phone number and run the Dasha part
app.post('/', (req, res) =&amp;gt; {
  // Calling dasha will be happen here
  res.json({ success: true })
})

// port selection to run
const port = process.env.PORT || 3000
app.listen(port, () =&amp;gt; console.log(`listening on port ${port}`))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's write the view part; I'm using tailwindcss as CDN (which is a really bad idea, but I don't want to really install lots of stuff now and this one is mostly for demonstrating this tutorial). For the UI &lt;code&gt;index.ejs&lt;/code&gt; file will look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Alarm Clock By Dasha &amp;amp; Nodejs&amp;lt;/title&amp;gt;
  &amp;lt;script src="https://cdn.tailwindcss.com"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;main class="min-h-screen flex flex-col row-column items-center justify-center text-center"&amp;gt;
    &amp;lt;h1 class="text-4xl font-bold"&amp;gt;
      Alarm Clock With Dasha AI
    &amp;lt;/h1&amp;gt;
    &amp;lt;div class="text-gray-400 text-xs italic py-2"&amp;gt;please add the country code before your number&amp;lt;/div&amp;gt;

    &amp;lt;form class="min-w-[40%]" onsubmit="return handleOnSubmit(event)" method="get" action="#"&amp;gt;
      &amp;lt;input
        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
        id="phone" type="text" placeholder="Enter your number..." /&amp;gt;

      &amp;lt;button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded my-2" type="submit"&amp;gt;
        Alarm Call
      &amp;lt;/button&amp;gt;

    &amp;lt;/form&amp;gt;
  &amp;lt;/main&amp;gt;

  &amp;lt;script&amp;gt;

    function handleOnSubmit(e) {
      e.preventDefault();

      const phone = document.getElementById('phone').value

      if (phone) {
        postData('/', { phone })
          .then(data =&amp;gt; {
            if (data.success) {
              alert('Alarm call is coming on your way! Please wait....')
            } else {
              alert('Something went wrong!')
            }
          });
      }

    }


    async function postData(url = '', data = {}) {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },

        body: JSON.stringify(data)
      });
      return response.json();
    }
  &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can get the file from here -&amp;gt; &lt;a href="https://github.com/nerdjfpb/Dasha-alarm-clock-example/blob/master/views/pages/index.ejs"&gt;https://github.com/nerdjfpb/Dasha-alarm-clock-example/blob/master/views/pages/index.ejs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are ready to finalize the last part for running the Dasha once the user clicks on the &lt;code&gt;Alarm Call&lt;/code&gt;. First, require the dasha&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dasha = require('@dasha.ai/sdk')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll simply use the things from &lt;code&gt;blank-slate-app&lt;/code&gt; we are not going to use everything from there; we are just going to use it for a phone call, and here is the simple version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
async function dashaCall(phone) {
  const app = await dasha.deploy('./app')

  app.connectionProvider = async (conv) =&amp;gt;
    conv.input.phone === 'chat'
      ? dasha.chat.connect(await dasha.chat.createConsoleChat())
      : dasha.sip.connect(new dasha.sip.Endpoint('default'))

  app.ttsDispatcher = () =&amp;gt; 'dasha'

  app.setExternal('function1', (args) =&amp;gt; {
    console.log(args.log)
  })

  await app.start()

  const conv = app.createConversation({ phone: phone })

  if (conv.input.phone !== 'chat') conv.on('transcription', console.log)

  const result = await conv.execute()

  console.log(result.output)

  await app.stop()
  app.dispose()
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Call this function from the post part of &lt;code&gt;index.js&lt;/code&gt;, which will look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.post('/', (req, res) =&amp;gt; {
  dashaCall(req.body.phone)
  res.json({ success: true })
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we are ready to run our app by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it will load, and you can put your number here to get a call from AI. &lt;/p&gt;

&lt;p&gt;This app simplifies the overall idea; we can improve a lot. Like&lt;br&gt;
Riddles can be randomize&lt;br&gt;
UI can be rich with a dashboard and alarm time (which I didn't make because this will be really hard to follow if I do that)&lt;br&gt;
Sometimes users can just ignore the call, so if users can't solve a riddle, we should call them again. This feature we can add. We could put a number in the database if they correctly answered. Based on that, we can call again!&lt;/p&gt;

&lt;p&gt;Overall there is a lot of scopes to improve. But this was a plan to demonstrate Dasha's conversational ai, which is fun to play with. I hope you enjoyed this tutorial. &lt;/p&gt;

&lt;p&gt;If you are looking for the whole code, here is the Github repo - &lt;a href="https://github.com/nerdjfpb/Dasha-alarm-clock-example"&gt;https://github.com/nerdjfpb/Dasha-alarm-clock-example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>ai</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Stacks</title>
      <author>sndp</author>
      <pubDate>Sun, 12 Dec 2021 19:44:50 +0000</pubDate>
      <link>https://dev.to/lizardkinglk/stacks-1ian</link>
      <guid>https://dev.to/lizardkinglk/stacks-1ian</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-stacks-"&gt;
  &lt;/a&gt;
  What are stacks ?
&lt;/h1&gt;

&lt;p&gt;A stack is a data structure that serves according to last-in first-out (LIFO) mechanism. To understand this, imagine a scenario where someone putting some objects sequentially in some container to retreive at a later time. But they will happen to take the last object first, and then second to last and so on. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-we-imagine-something-similar"&gt;
  &lt;/a&gt;
  Can we imagine something similar?
&lt;/h3&gt;

&lt;p&gt;A pistol magazine (in a video game) is a correct scenario because last round will be fired first. We can see it works according to stacks. &lt;/p&gt;

&lt;p&gt;In programming scene, a stack has many uses, including,&lt;br&gt;
i. Memory management.&lt;br&gt;
ii. Reversing an array/reordering an array.&lt;br&gt;
iii. To check the validation of an expression.&lt;br&gt;
iv. Implementing rollback option as a function.&lt;/p&gt;

&lt;p&gt;In addition, web browser and windows in operating system also uses stacks to manage memory.&lt;/p&gt;

&lt;p&gt;A stack is an abstract data type which means the logic can be applied to user-defined scenarios by the user itself. &lt;br&gt;
This is similar to implementing an abstract method definition as a concrete function. Therefore imagine abstract data type is a logic and we implement that logic ourself in code for our scenario.&lt;/p&gt;

&lt;p&gt;A stack design has the following methods need to be implemented.&lt;br&gt;
i. push&lt;br&gt;
ii. pop&lt;br&gt;
iii. peek&lt;br&gt;
iv. isEmpty&lt;/p&gt;

&lt;p&gt;We use arrays to implement these methods. I'll refer the array as container and its values as objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the object inside the parameters will be added to the container. Push is like inserting an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the last item entered to the container will be removed and will be sent to user. Pop is like removing an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;seek
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the last item will be returned to the user. It will not get removed from the container. Seek is for displaying the last item in the container when user needed to check.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;isEmpty
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When called, the user will know whether the container is empty or not.&lt;/p&gt;

&lt;p&gt;Know that a container's size can be user-defined or it can be a value of a predefined constant when implemented using arrays.&lt;/p&gt;

&lt;p&gt;Let's assume we have implemented a MyStack class with a container's object type of int to save numbers with a user-defined container size of five.&lt;/p&gt;

&lt;p&gt;So it will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyStack stack = new MyStack(5);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll add some random five numbers and another number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stack.push(11);
stack.push(87);
stack.push(43);
stack.push(117);
stack.push(-96);

stack.push(68);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should be possible to insert first five values and after that it will show a message that saying we cannot add further objects to our container. Therefore value 68 will not get pushed.&lt;/p&gt;

&lt;p&gt;Now let's try popping an item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int popped = stack.pop();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we print the variable defined as popped above, it will return the last number inserted which is -96.&lt;/p&gt;

&lt;p&gt;Now remove the next remaining items also and try popping one more time. &lt;br&gt;
Therefore if we called pop four and one more time it will show a message that says we cannot pop any further. At this time our stack is empty and isEmpty will return true.&lt;/p&gt;

&lt;p&gt;If printed the values returned at each time you will see it is the opposite of the inserted order which means we have our stack working correctly and last-in first-out rule is in effect. &lt;/p&gt;

&lt;p&gt;Learn more about stack implementation using following links&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/stack-data-structure-introduction-program/"&gt;https://www.geeksforgeeks.org/stack-data-structure-introduction-program/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
