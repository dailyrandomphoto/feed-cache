<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Supercharge Your Website Using PWA: Deferred Installation</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 25 Apr 2021 03:04:32 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/supercharge-your-website-using-pwa-deferred-installation-nhb</link>
      <guid>https://dev.to/ruppysuppy/supercharge-your-website-using-pwa-deferred-installation-nhb</guid>
      <description>&lt;p&gt;This is continuation of the &lt;a href="https://dev.to/ruppysuppy/supercharge-your-website-using-pwa-installable-website-32i3"&gt;previous blog&lt;/a&gt; on making a website installable, you are highly encouraged to check it out before continuing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-raw-deferred-installation-endraw-"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;deferred installation&lt;/code&gt;?
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Installation Prompt&lt;/code&gt;, makes it easy for users to install a &lt;strong&gt;Progressive Web App&lt;/strong&gt; (&lt;code&gt;PWA&lt;/code&gt;) on their mobile or desktop device. Installing a &lt;code&gt;PWA&lt;/code&gt; adds it to a user's launcher, allowing it to be run like any other installed app. &lt;code&gt;Deferred installation&lt;/code&gt; allows the developer to display the &lt;code&gt;installation prompt&lt;/code&gt; only when the user performs certain action, like clicking a button or hitting the bottom of the page (something to indicate that they are &lt;strong&gt;engaging with your site&lt;/strong&gt;, makes it more likely that the user will install the &lt;code&gt;PWA&lt;/code&gt; when prompted to do so).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;p&gt;We will be continuing from where we left off in the &lt;a href="https://dev.to/ruppysuppy/supercharge-your-website-using-pwa-installable-website-32i3"&gt;previous blog&lt;/a&gt;. But we require a small change in &lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;PWA: Installable website&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- CHANGE: BUTTON ADDED --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;serviceWorker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/service-worker.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Service worker is not supported&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#setting-up-raw-deferred-installation-endraw-"&gt;
  &lt;/a&gt;
  Setting up &lt;code&gt;deferred installation&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;To set up &lt;code&gt;deferred installation&lt;/code&gt; we need to add a script.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;deferredPrompt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Storing the installation prompt&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beforeinstallprompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;deferredPrompt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Displaying the prompt on button click&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;deferredPrompt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="nx"&gt;deferredPrompt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Link the script in &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Voila! That's all you need to defer the &lt;code&gt;Installation Prompt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can display the &lt;code&gt;Installation Prompt&lt;/code&gt; only on user interaction like: &lt;em&gt;click&lt;/em&gt;, &lt;em&gt;scroll&lt;/em&gt;, &lt;em&gt;form submit&lt;/em&gt;, etc.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#project-using-this-implementation"&gt;
  &lt;/a&gt;
  Project using this Implementation
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Smartsapp&lt;/strong&gt; (&lt;code&gt;deferred prompt&lt;/code&gt; on &lt;strong&gt;Google OAuth&lt;/strong&gt; button click, &lt;strong&gt;login&lt;/strong&gt; and &lt;strong&gt;registration&lt;/strong&gt; )&lt;/p&gt;

&lt;p&gt;Web-app: &lt;a href="https://smartsapp-ba40f.firebaseapp.com/"&gt;https://smartsapp-ba40f.firebaseapp.com&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruppysuppy"&gt;
        ruppysuppy
      &lt;/a&gt; / &lt;a href="https://github.com/ruppysuppy/SmartsApp"&gt;
        SmartsApp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      💬📱 An End to End Encrypted Cross Platform messenger app.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Smartsapp&lt;/h1&gt;
&lt;div&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ns_GzKXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/logo.svg"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;A fully &lt;strong&gt;cross-platform messenger&lt;/strong&gt; app with &lt;strong&gt;End to End Encryption (E2EE)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
Demo&lt;/h2&gt;

&lt;div&gt;
    &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyjN1v8j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ruppysuppy/SmartsApp/master/./readme_img/demo.gif"&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The features shown in the demo is not exhaustive. Only the core features are showcased in the demo.&lt;/p&gt;

&lt;h2&gt;
Platforms Supported&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Desktop:&lt;/strong&gt; Windows, Linux, MacOS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mobile:&lt;/strong&gt; Android, iOS&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Website:&lt;/strong&gt; Any device with a browser&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
Back-end Setup&lt;/h2&gt;

&lt;p&gt;The back-end of the app is handled by &lt;code&gt;Firebase&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
Basic Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to firebase console and create a new project with the name &lt;code&gt;Smartsapp&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Enable &lt;code&gt;Google Analylitics&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
App Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create an &lt;code&gt;App&lt;/code&gt; for the project from the overview page&lt;/li&gt;
&lt;li&gt;Copy and paste the configurations in the required location (given in the readme of the respective apps)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
Auth Setup&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to the project &lt;code&gt;Authentication&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Sign-in method&lt;/code&gt; tab&lt;/li&gt;
&lt;li&gt;Enable &lt;code&gt;Email/Password&lt;/code&gt; and &lt;code&gt;Google&lt;/code&gt; sign in&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
Firestore Setup&lt;/h3&gt;


&lt;ol&gt;
&lt;li&gt;Go to the project &lt;code&gt;Firestore&lt;/code&gt; section&lt;/li&gt;
&lt;li&gt;Create firestore provisions for the project (choose the server nearest to your location)&lt;/li&gt;
&lt;li&gt;Go to the &lt;code&gt;Rules&lt;/code&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ruppysuppy/SmartsApp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Reach out to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt; (For freelance projects, reach out through the contact form)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>pwa</category>
      <category>webdev</category>
      <category>ux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Best Options For Recurring Developer Income?</title>
      <author>Jack Harner 🚀</author>
      <pubDate>Sun, 25 Apr 2021 02:01:18 +0000</pubDate>
      <link>https://dev.to/jackharner/best-options-for-recurring-developer-income-4m46</link>
      <guid>https://dev.to/jackharner/best-options-for-recurring-developer-income-4m46</guid>
      <description>&lt;p&gt;As a Freelance developer, what's the best way to get recurring income? &lt;/p&gt;

&lt;p&gt;Things like maintenance plans, monthly hosting packages, etc. I'd love to hear what's worked and what didn't for you!&lt;/p&gt;

</description>
      <category>career</category>
      <category>freelance</category>
      <category>money</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Ruby 101: Strings</title>
      <author>Eric Chapman</author>
      <pubDate>Sun, 25 Apr 2021 00:42:42 +0000</pubDate>
      <link>https://dev.to/ericchapman/ruby-101-strings-2l0n</link>
      <guid>https://dev.to/ericchapman/ruby-101-strings-2l0n</guid>
      <description>&lt;p&gt;I develop in Javascript, Python, PHP and Ruby. By far Ruby is my favorite programming language. Together let start a journey and revisit our Ruby foundations. &lt;/p&gt;

&lt;h2&gt;You want to learn Ruby or your Ruby is a bit rusty?&lt;/h2&gt; 

&lt;p&gt;In this series we will start from the beginning and will learn every aspect of Ruby one step at a time. &lt;/p&gt;

&lt;p&gt;Each post will include some theory but also exercise and solution.&lt;/p&gt;

&lt;p&gt;If you have any questions/comments or your are new and need help, you can comment below or send me a message.&lt;/p&gt;

&lt;h2&gt;Strings Declaration&lt;/h2&gt;

&lt;p&gt;String variable represent any text data. A key point for the syntax of strings declaration is that they have to be enclosed in single or double quotes. The program will throw an error if they are not wrapped inside quotation marks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Bad&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Mike&lt;/span&gt; &lt;span class="c1"&gt;# Will throw a error&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;

&lt;span class="c1"&gt;# Good&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Mike"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Number can also be represent as string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;text_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"45"&lt;/span&gt;
&lt;span class="n"&gt;number_age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable text_age is a string variable. It cannot be process in Ruby as a number like be use in addition or multiplication etc. &lt;/p&gt;

&lt;p&gt;The number_age variable is integer number so that variable can be part of any Ruby number manipulations methods.&lt;/p&gt;

&lt;h2&gt;String Interpolation&lt;/h2&gt;

&lt;p&gt;String interpolation is replacing placeholders with values in a string literal. &lt;/p&gt;

&lt;p&gt;For string interpolation to work. String have to be wrapped inside double quotation mark. Here a example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 
&lt;span class="c1"&gt;# Hello Mike&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the last code snippet, the message variable will be process by Ruby before assignment. The #{name} placeholder will be replace by the containing variable value.&lt;/p&gt;

&lt;p&gt;Inside placeholder #{} any Ruby expression can be use...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Your age in 2 years will be &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;# Your age in 2 years will be 47&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;In Ruby everything is an object!&lt;/h2&gt;

&lt;p&gt;You maybe have ear this before. What that mean for us the developer?&lt;/p&gt;

&lt;p&gt;First, what is an object? An object refers to a particular instance of a class with their own methods and properties.&lt;/p&gt;

&lt;p&gt;In Ruby type are define as classes, so for example if you have a string variable, it's an instance of the String class.&lt;/p&gt;

&lt;p&gt;For example take this variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello World"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This 'message' variable will be dynamically type by Ruby as a string. That string is a class. So message is an instance of the class string. &lt;/p&gt;

&lt;p&gt;In Ruby the String class already have many methods to help do basic and advance string manipulations.&lt;/p&gt;

&lt;p&gt;That's also mean that 'message' variable will inherits all the methods and properties of his parent class (String).&lt;/p&gt;

&lt;p&gt;Example of method call (syntax: object.method)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="c1"&gt;# MIKE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;'upcase' is a method of the String class. This method convert all the string characters to uppercase.&lt;/p&gt;

&lt;p&gt;For now if you don't understand all that class instance thing THAT'S NORMAL! We will cover class and object later. &lt;/p&gt;

&lt;p&gt;The only thing we need to understand for now is variable like a string variable have methods we can call to do some stuff automatically.&lt;/p&gt;

&lt;p&gt;Here are some string methods available in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;
&lt;span class="c1"&gt;# MIKE&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
&lt;span class="c1"&gt;# mike&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;capitalize&lt;/span&gt;
&lt;span class="c1"&gt;# Mike&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;
&lt;span class="c1"&gt;# ekiM&lt;/span&gt;

&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;length&lt;/span&gt;
&lt;span class="c1"&gt;# 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look how those methods name are self descriptive. We do not need any comments and any explanation to understand what each method do... Welcome to Ruby world!&lt;/p&gt;

&lt;h2&gt;More String methods&lt;/h2&gt;

&lt;p&gt;Now that we understand the basic we will start to learn more advance string methods. &lt;/p&gt;

&lt;h3&gt;The sub and gsub method&lt;/h3&gt;

&lt;p&gt;Ruby have a handy string method to replace part of a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The sky is blue'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;
&lt;span class="c1"&gt;# The sky is red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the method call have no parentheses to enclose parameters. In Ruby those are optionals.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Valid&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;

&lt;span class="c1"&gt;# Also valid&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The convention is to omit the parentheses unless the code seem clearer with them.&lt;/p&gt;

&lt;p&gt;The sub method replace the first occurrence. The gsub method replace all the occurrences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'The sky is blue and the car is also blue'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt; &lt;span class="s1"&gt;'blue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'red'&lt;/span&gt;
&lt;span class="c1"&gt;# The sky is red and the car is also red&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Strip method&lt;/h3&gt;

&lt;p&gt;Remove white space before or after string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'  Welcome to Ruby World  '&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;
&lt;span class="c1"&gt;# 'Welcome to Ruby World'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Chaining methods&lt;/h3&gt;

&lt;p&gt;It is possible to chain string methods&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'   Mike Taylor '&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Paul'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;
&lt;span class="c1"&gt;# paul taylor&lt;/span&gt;
&lt;span class="c1"&gt;# In that specific situation, using the parentheses make the code easier to read&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;Exercice&lt;/h1&gt;

&lt;p&gt;Create a little program that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input the user name and store the result in a variable&lt;/li&gt;
&lt;li&gt;Input the user password and store the result in a variable&lt;/li&gt;
&lt;li&gt;Remove password before or after white space&lt;/li&gt;
&lt;li&gt;Convert the password to lowercase&lt;/li&gt;
&lt;li&gt;Display user name and password but replace the password letter 'e' with a star
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the result&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Enter user name: _Mike
Enter user password: _secret

The user name is Mike and his password is s*cr*t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user name: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Enter user password: '&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"The user name is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and his password is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'e'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That's it for today. The journey just started, stay tune for the next post very soon. (later today or tomorrow)&lt;/p&gt;

&lt;p&gt;If you have any comments or questions please do so here or send me a message on twitter. &lt;/p&gt;

&lt;p&gt;I am new on twitter so if you want to make me happy&lt;br&gt;
Follow me: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Have you tried using JŌTAI with React yet?</title>
      <author>Marius Espejo</author>
      <pubDate>Sat, 24 Apr 2021 23:42:01 +0000</pubDate>
      <link>https://dev.to/marius/have-you-tried-using-jotai-with-react-yet-404p</link>
      <guid>https://dev.to/marius/have-you-tried-using-jotai-with-react-yet-404p</guid>
      <description>&lt;p&gt;&lt;a href="https://youtu.be/oKFj5gBeauw"&gt;In this video&lt;/a&gt; we're going to explore the &lt;a href="https://github.com/pmndrs/jotai"&gt;Jōtai&lt;/a&gt; library! &lt;/p&gt;

&lt;p&gt;In the ReactJS ecosystem you've got so many state management solutions to pick from. You've got useState, useReducer, context API, recoil, redux, zustand, and so many more! &lt;/p&gt;

&lt;p&gt;Jotai provides a very simple minimalistic API and focuses on composing "atoms" as a bottom-up model/approach to managing state in a frontend application. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Jotai is pronounced "joe-tie" and means "state" in Japanese.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'll be walking you through a basic ReactJS tutorial of Jotai as well as some notes on my own first impressions of using the library. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have any of you used Jotai in production? What are your thoughts about it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Code with me and let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oKFj5gBeauw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you're interested, I also recently made content on Zustand, &lt;em&gt;another&lt;/em&gt; approach to state management from the same authors as Jotai.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UcHkC5sJPWw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I've completely replaced the need for Postman with this one extension in VS Code!</title>
      <author>Philip Mutua</author>
      <pubDate>Sat, 24 Apr 2021 23:10:51 +0000</pubDate>
      <link>https://dev.to/pmutua/i-ve-completely-replaced-the-need-for-postman-with-this-one-extension-in-vs-code-1oa9</link>
      <guid>https://dev.to/pmutua/i-ve-completely-replaced-the-need-for-postman-with-this-one-extension-in-vs-code-1oa9</guid>
      <description>&lt;p&gt;I've completely replaced the need for Postman with this one extension in VS Code! The &lt;a href="https://www.thunderclient.io/"&gt;Thunder Client extension&lt;/a&gt; for &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; can do everything I need to when testing HTTP Requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;create and send requests&lt;/li&gt;
&lt;li&gt;group requests into collections&lt;/li&gt;
&lt;li&gt;use variables&lt;/li&gt;
&lt;li&gt;much more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.thunderclient.io/"&gt;Thunder Client&lt;/a&gt; &lt;/p&gt;

</description>
      <category>thunder</category>
      <category>client</category>
      <category>vscode</category>
      <category>extensions</category>
    </item>
    <item>
      <title>6 Great podcasts for Frontend Developers
</title>
      <author>Jordi Enric</author>
      <pubDate>Sat, 24 Apr 2021 22:57:30 +0000</pubDate>
      <link>https://dev.to/jordienr/6-great-podcasts-for-frontend-developers-1mf5</link>
      <guid>https://dev.to/jordienr/6-great-podcasts-for-frontend-developers-1mf5</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@juja_han?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Juja Han&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/podcast?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyxsuNaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://layout.fm/static/ccbda74b7edb4fd36bcc1c900e1ebfba/46604/artwork-spec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyxsuNaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://layout.fm/static/ccbda74b7edb4fd36bcc1c900e1ebfba/46604/artwork-spec.png" alt="Layout.fm logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layoutfm"&gt;
  &lt;/a&gt;
  Layout.fm
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://layout.fm/"&gt;https://layout.fm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A weekly podcast about design, technology, programming and everything else.&lt;br&gt;
By @rafahari previously Netlify, currently superlist.com and &lt;br&gt;
 @vernalkick Senior UX Manager at @Shopify&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--khsdOYVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dbs.radioline.fr/pictures/podcast_774f88f5bf8f3aad35d8a0d8c8918a21/logo200.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--khsdOYVa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dbs.radioline.fr/pictures/podcast_774f88f5bf8f3aad35d8a0d8c8918a21/logo200.jpg" alt="Codepen Radio Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codepen-radio"&gt;
  &lt;/a&gt;
  Codepen Radio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://blog.codepen.io/radio/"&gt;https://blog.codepen.io/radio/&lt;/a&gt;&lt;br&gt;
Chris Coyier, Alex Vazquez, and Tim Sabat, the co-founders of CodePen talk about the ins and outs of running a web software business.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gpqgdkt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.sndcdn.com/avatars-000287353351-tdlqh4-t240x240.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gpqgdkt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.sndcdn.com/avatars-000287353351-tdlqh4-t240x240.jpg" alt="Frontend HH Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-happy-hour"&gt;
  &lt;/a&gt;
  Frontend Happy Hour
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://frontendhappyhour.com/"&gt;http://frontendhappyhour.com/&lt;/a&gt;&lt;br&gt;
A podcast featuring a panel of Software Engineers from Netflix, Twitch, &amp;amp; Atlassian talking over drinks about all things Front End development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnR0mn8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1143042724070907904/a0IYZ0uW.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZnR0mn8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1143042724070907904/a0IYZ0uW.jpg" alt="Ladybug Podcast Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ladybug"&gt;
  &lt;/a&gt;
  Ladybug
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.ladybug.dev/"&gt;https://www.ladybug.dev/&lt;/a&gt;&lt;br&gt;
By Kelly Vaughn, Emma Bostian, Sidney Buckner &amp;amp; Ali Spittel share their thoughts and stories from working in tech. They also share some really fun and interesting interviews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4ob5cnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/875075946096676864/MEEwGMpY.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4ob5cnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/875075946096676864/MEEwGMpY.jpg" alt="Syntax FM Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax-fm"&gt;
  &lt;/a&gt;
  Syntax FM
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://syntax.fm/"&gt;https://syntax.fm/&lt;/a&gt;&lt;br&gt;
By Wes Bos &amp;amp; Scott Tolinski&lt;br&gt;
"Full Stack Developers Wes Bos and Scott Tolinski dive deep into web development topics, explaining how they work and talking about their own experiences."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3UGRKNgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.scdn.co/image/88ca4712d7edf416343a6b4ffd5d2b5b7f111a9b" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3UGRKNgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.scdn.co/image/88ca4712d7edf416343a6b4ffd5d2b5b7f111a9b" alt="Fullstack Radio Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fullstack-radio"&gt;
  &lt;/a&gt;
  Fullstack Radio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://fullstackradio.com/"&gt;https://fullstackradio.com/&lt;/a&gt;&lt;br&gt;
A podcast for developers interested in building great software products. Hosted by Adam Wathan.&lt;/p&gt;

&lt;p&gt;And that's it! If you ask me my favorite I recommend Frontend Happy Hour.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; or subscribe to my newsletter for more resources and tools for Frontend Developers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zero-to-frontend"&gt;
  &lt;/a&gt;
  &lt;a href="https://zerotofrontend.dev/"&gt;Zero to Frontend&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>Cool CSS tips And Tricks</title>
      <author>Kinanee Samson</author>
      <pubDate>Sat, 24 Apr 2021 22:49:40 +0000</pubDate>
      <link>https://dev.to/kalashin1/cool-css-tips-and-tricks-5bd8</link>
      <guid>https://dev.to/kalashin1/cool-css-tips-and-tricks-5bd8</guid>
      <description>&lt;p&gt;Good day guys, css is to a website what beauty is to a woman and you cannot get away with writing bad css, i'm going to share with you some cool css tips and tricks today. I saw a video on youtube that &lt;a href="//fireship.io/tags/css"&gt;fireship.io&lt;/a&gt; made on a similar topic, i learnt some cool css tips that can make writing css much easier. There are also a few tips i use personally, i thought i should share with you guys, let's get to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-variables"&gt;
  &lt;/a&gt;
  Use Variables
&lt;/h3&gt;

&lt;p&gt;You wouldn't believe it but if you can define some variables in your CSS that will hold a certain value that you might use in more than one rule or over several lines. Rather than hard coding the value each time, you can just call the variable, Later you can just change the value of the variable and it will take effect in all rules it is used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="c"&gt;/* syntax */&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;/* example */&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;
&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;--danger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--danger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--min-width&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a simple use case but it might come in hand when you want to manage your css file, maybe update or change something, you can just do that once and it takes effect over multiple lines rather than manually having to change all values by yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clamp-function"&gt;
  &lt;/a&gt;
  Clamp function
&lt;/h3&gt;

&lt;p&gt;In the example above i used media queries, but css now has a clamp function that will reduce the amount of media queries in your code. The clamp function accepts three values, the first is the lowest possible value, the next is the default value while the last is the maximum value. As the screen size changes the values will automatically switch, with the minimum being used for small screen sizes while the maximum for large screens.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;font-Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;36px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* rather than */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nc"&gt;.foo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* and again, thank God for clamp() */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-relative-units"&gt;
  &lt;/a&gt;
  use relative units
&lt;/h3&gt;

&lt;p&gt;Keeping in mind that your website needs to be as responsive as hell, you should do away with static units like px, inch or cm and use rems, ems as much as possible, you can combime this with the clamp function to achieve heaven while writing css.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="n"&gt;rem&lt;/span&gt; &lt;span class="c"&gt;/* and now its fully fluid */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And relative units are not only em and rem, you have fr, which represents a fraction of a container size although you can only use this with grid, talking about grids.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-grid-for-layout"&gt;
  &lt;/a&gt;
  using Grid for layout
&lt;/h3&gt;

&lt;p&gt;If you still use floats or table to define a grid system for your web project then you should be hanging out with internet explorer. Css has a grid value that you pass to the display property and now you have god like control over the structure of your layout.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;john&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;doe&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/* grid container */&lt;/span&gt;
&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* this specifies the width of each item in the grid */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is more to css grid than i can explain here because that would take us outside the scope of this article and it deserves it's own article so i might make one in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-emoji-characters-for-class-names"&gt;
  &lt;/a&gt;
  using emoji characters for class names
&lt;/h3&gt;

&lt;p&gt;This might sound wierd but you should probably use emoji characters as your class names to style up your elements rather than using complex class names that might lead to typos or is too long and disconnected from what you're tying to style, emoji characters are short and there's no spelling anything so the risk of making a typo is virtually eliminated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"😂"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Foo bar
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;😂&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will agree with me thst this is shorter and makes reviewing your code much more fun.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exadiv"&gt;
  &lt;/a&gt;
  exadiv
&lt;/h3&gt;

&lt;p&gt;This is a chrome extension you can download from the chrome web store and it's totally free, you can click on an element and exadiv will give you a rundown of the styles of that element. I use this a lot when i want to copy some styles from another website. It also highlights the element so you can see it's width, border and padding. It will really increase your css skills and make you more productive, so you should definitely try it out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visbug"&gt;
  &lt;/a&gt;
  visbug
&lt;/h3&gt;

&lt;p&gt;This is another chrome extension and this also gives u god-like control over the elements on a website, you can use this extension to visually interact with a website and do stuffs like drag an element to a new position, see the styles associated with the element, change its z-index with button press on your keyboard, measure the element, see it's box-model representation and more. It might take you some time to learn all the features of the extension but it is worth having and i would advice you to get it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#colorsco"&gt;
  &lt;/a&gt;
  colors.co
&lt;/h3&gt;

&lt;p&gt;This is an amazing website that can help you generate a color palette that you can use accross your application, it has a fun to use UI and you can just press space on your pc to generate a random color, once you find one you like, you can lock it in and continue till you have your palette all selected, then you can download it as an image or svg or pdf, or whatever format suits you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-scss-instead-of-css"&gt;
  &lt;/a&gt;
  write SCSS instead of CSS
&lt;/h3&gt;

&lt;p&gt;SCSS is to CSS what TypeScript is to javascript, all valid CSS is valid SCSS because it compiles down to CSS. And like TypeScript, browsers cannot directly understand SCSS so we need to compile it to CSS, we can easily do that from vs code by installing SCSS compiler extension from the vs code extension marketplace. I will not go into SCSS here because it is outsids the scope of this article but if you want to learn about SCSS then you should check &lt;a href="//thenetninja.co.uk"&gt;the net ninja scss tutorial&lt;/a&gt; on youtube.&lt;/p&gt;

&lt;p&gt;That's it for this article, i hope you find it useful, untill the next one it's bye for now. &lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Git tip: get back to work after a revert on master </title>
      <author>Guillaume Gautreau</author>
      <pubDate>Sat, 24 Apr 2021 22:02:28 +0000</pubDate>
      <link>https://dev.to/ghusse_/git-tip-get-back-to-work-after-a-revert-on-master-2gji</link>
      <guid>https://dev.to/ghusse_/git-tip-get-back-to-work-after-a-revert-on-master-2gji</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ozl4wOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/903inki3qfkgkp8efgeq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ozl4wOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/903inki3qfkgkp8efgeq.jpg" alt="Git diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shit happens.&lt;/p&gt;

&lt;p&gt;Sometimes, a &lt;strong&gt;sneaky bug&lt;/strong&gt; hid itself into the beautiful change you worked on. It even flew below unit tests' radars and tiptoed without being noticed during manual tests.&lt;/p&gt;

&lt;p&gt;Now, this nasty &lt;strong&gt;bug&lt;/strong&gt; is live in production and &lt;strong&gt;EVERYONE notices it&lt;/strong&gt;, you have to &lt;strong&gt;revert&lt;/strong&gt; your changes from master. 😢 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%86%A9-the-revert"&gt;
  &lt;/a&gt;
  ↩ The revert
&lt;/h2&gt;

&lt;p&gt;Ok, this is the time where you revert your code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Assuming that you have to create a PR&lt;/span&gt;
&lt;span class="c"&gt;# for the revert&lt;/span&gt;
git checkout master
git pull
git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; fix/revert-superb-change
git revert HASH-OF-MERGE-COMMIT
git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin fix/revert-superb-change
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once your PR gets approved, your revert just cancelled everything that was in your cool change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#work-on-a-fix"&gt;
  &lt;/a&gt;
  👷 Work on a fix
&lt;/h2&gt;

&lt;p&gt;At this point, the easiest thing to do is to just make a fix on the branch containing all your changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout feat/superb-change
&lt;span class="c"&gt;# Work on a fix&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"fix: sneaky bug"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#omg-if-i-merge-master-on-my-branch-i-lose-almost-all-my-work"&gt;
  &lt;/a&gt;
  😨 OMG, if I merge master on my branch, I lose almost all my work
&lt;/h2&gt;

&lt;p&gt;That's it, if you want to prepare your branch to be merged again on master, you'll face another problem:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Master contains a commit that &lt;strong&gt;removes&lt;/strong&gt; the work from your branch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you merge master into your feature branch as usual, it will actually remove a large proportion of your changes on your branch. 🤯 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#merge-mastery-to-the-rescue"&gt;
  &lt;/a&gt;
  🚒 Merge mastery to the rescue
&lt;/h2&gt;

&lt;p&gt;This is the trick: you can &lt;strong&gt;tell git&lt;/strong&gt; that a particular commit &lt;strong&gt;had been merged&lt;/strong&gt; &lt;strong&gt;without&lt;/strong&gt; actually &lt;strong&gt;merging it&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout feat/superb-change

&lt;span class="c"&gt;# This will allow you to apply all &lt;/span&gt;
&lt;span class="c"&gt;# changes between your first merge &lt;/span&gt;
&lt;span class="c"&gt;# and the revert, if any&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# ⚠ It's important to carefully choose&lt;/span&gt;
&lt;span class="c"&gt;# the commit JUST BEFORE the revert commit&lt;/span&gt;
git merge HASH-OF-COMMIT-JUST-BEFORE-REVERT

&lt;span class="c"&gt;# This is how you tell git to merge&lt;/span&gt;
&lt;span class="c"&gt;# without really merging the revert&lt;/span&gt;
git merge HASH-OF-REVERT-COMMIT &lt;span class="nt"&gt;--strategy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ours
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The option &lt;code&gt;--strategy=ours&lt;/code&gt; tells git to keep all our &lt;strong&gt;current changes&lt;/strong&gt; when merging. &lt;/p&gt;

&lt;p&gt;It means that it will only &lt;strong&gt;record&lt;/strong&gt; the merge &lt;strong&gt;without changing anything&lt;/strong&gt; in your branch.&lt;/p&gt;

&lt;p&gt;It's important to note that you should first merge all changes made &lt;strong&gt;before the revert&lt;/strong&gt; in order to correctly apply them. This way, only the revert will be merged without changes on your code.&lt;/p&gt;

&lt;p&gt;Once everything had been done, you can proceed as usual:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Will merge all changes made after the revert&lt;/span&gt;
git merge master
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, your branch is ready to be merged into master, with all your changes!&lt;/p&gt;




&lt;p&gt;&lt;small&gt;Thanks to &lt;a href="https://gist.github.com/bryanbraun"&gt;@bryanbraun&lt;/a&gt; for his awesome &lt;a href="https://gist.github.com/bryanbraun/8c93e154a93a08794291df1fcdce6918"&gt;git diagram template&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

</description>
      <category>git</category>
    </item>
    <item>
      <title>Ferramentas para desenvolvedores web</title>
      <author>Patrick</author>
      <pubDate>Sat, 24 Apr 2021 21:33:55 +0000</pubDate>
      <link>https://dev.to/patrickwilker/ferramentas-para-desenvolvedores-web-59fb</link>
      <guid>https://dev.to/patrickwilker/ferramentas-para-desenvolvedores-web-59fb</guid>
      <description>&lt;p&gt;Nesse post você conhecerá algumas ferramentas que lhe auxiliaram na construção de suas aplicações.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#imagens"&gt;
  &lt;/a&gt;
  Imagens
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#pexels"&gt;
  &lt;/a&gt;
  &lt;a href="http://pexels.com"&gt;Pexels&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens e vídeos gratuitos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsplash"&gt;
  &lt;/a&gt;
  &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens gratuitas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pixabay"&gt;
  &lt;/a&gt;
  &lt;a href="https://pixabay.com/pt/"&gt;Pixabay&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens gratuitas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stocksnap"&gt;
  &lt;/a&gt;
  &lt;a href="https://stocksnap.io/"&gt;StockSnap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens gratuitas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-images"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.freeimages.com/pt"&gt;Free Images&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com imagens gratuitas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#moose"&gt;
  &lt;/a&gt;
  &lt;a href="https://icons8.com/creator"&gt;Moose&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site que permite criar fotos incríveis.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Obs: alguns sites não permitem uso comercial das imagens, ícones ou ilustrações, mas ainda sim podem ser usados para uso pessoal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#ilustra%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Ilustrações
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#illustrations"&gt;
  &lt;/a&gt;
  &lt;a href="https://undraw.co/illustrations"&gt;Illustrations&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Sites com ilustrações para você usar em seus sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#landing-stock"&gt;
  &lt;/a&gt;
  &lt;a href="https://landingstock.com/"&gt;Landing Stock&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Sites com ilustrações para você usar em seus sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawkit"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.drawkit.io/"&gt;Drawkit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com belas ilustrações.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lukasz-adam"&gt;
  &lt;/a&gt;
  &lt;a href="https://lukaszadam.com/illustrations"&gt;Lukasz Adam&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ilustrações incríveis disponibilizadas gratuitamente pelo Lukasz Adam.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#waves-e-blobs"&gt;
  &lt;/a&gt;
  Waves e Blobs
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#get-waves"&gt;
  &lt;/a&gt;
  &lt;a href="https://getwaves.io/"&gt;Get Waves&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site para criar ondas. Aquelas ondas usadas em background.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blobmaker"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.blobmaker.app/"&gt;Blobmaker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site para criar blobs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%C3%ADcones"&gt;
  &lt;/a&gt;
  Ícones
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#flaticon"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.flaticon.com/br/"&gt;Flaticon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com ícones vetoriais gratuitos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feather"&gt;
  &lt;/a&gt;
  &lt;a href="https://feathericons.com/"&gt;Feather&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com ícones simples e belos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shape"&gt;
  &lt;/a&gt;
  &lt;a href="https://shape.so/"&gt;Shape&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site com ícones simples e editáveis. Uso pessoal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#anima%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Animações
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#animate"&gt;
  &lt;/a&gt;
  &lt;a href="https://animate.style/"&gt;Animate&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site para adicionar animações nas suas telas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animaticons"&gt;
  &lt;/a&gt;
  &lt;a href="https://animaticons.co/"&gt;Animaticons&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Belos e personalizáveis ícones GIF animados&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#paleta-de-cores"&gt;
  &lt;/a&gt;
  Paleta de cores
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#picular"&gt;
  &lt;/a&gt;
  &lt;a href="//picular.co"&gt;Picular&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ajuda a encontrar cores com base no que você procura.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canva"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.canva.com/colors/color-palette-generator/"&gt;Canva&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Gerar paleta de cores e tem a possibilidade de gerar essa paleta a partir de uma logo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tint-and-shade-generator"&gt;
  &lt;/a&gt;
  &lt;a href="https://maketintsandshades.com/"&gt;Tint and Shade Generator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A partir do hexadecimal de uma cor (ou várias) o site gerar cores mais escuras e claras a partir dela. É útil quando se quer saber a cor certa num botão de hover.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contrast-checker"&gt;
  &lt;/a&gt;
  &lt;a href="https://contrastchecker.com/"&gt;Contrast Checker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site para dizer se há contraste suficiente nas cores escolhidas. É útil para saber se as cores tem acessibilidade para pessoas daltônicas. O site vai apontar se passou nos testes ou não.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#inspira%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Inspirações
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#dribbble"&gt;
  &lt;/a&gt;
  &lt;a href="https://dribbble.com/"&gt;Dribbble&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Site que reúne trabalho dos melhores designs do mundo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pinterest"&gt;
  &lt;/a&gt;
  &lt;a href="https://br.pinterest.com/"&gt;Pinterest&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Um ótimo site para se inspirar é Pinterest. Lá você pode achar de tudo.&lt;/p&gt;

&lt;p&gt;Espero que tenha ajudado.&lt;/p&gt;

&lt;p&gt;Que o código esteja com você!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tooling</category>
      <category>css</category>
    </item>
    <item>
      <title>JS interview in 2 minutes / == vs ===</title>
      <author>Nikita Kozlov</author>
      <pubDate>Sat, 24 Apr 2021 21:11:43 +0000</pubDate>
      <link>https://dev.to/kozlovzxc/js-interview-in-2-minutes-vs-1f58</link>
      <guid>https://dev.to/kozlovzxc/js-interview-in-2-minutes-vs-1f58</guid>
      <description>&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br&gt;
What is the difference between &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt; operators?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick answer:&lt;/strong&gt;&lt;br&gt;
These are both comparison operators, but the &lt;code&gt;===&lt;/code&gt; also compare types of operands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longer answer:&lt;/strong&gt;&lt;br&gt;
Javascript and basically typescript are languages with &lt;a href="https://en.wikipedia.org/wiki/Type_conversion#Implicit_type_conversion"&gt;implicit type conversion&lt;/a&gt;. This means they try to convert variables to "proper" types when performing operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 1
let b = '1';
console.log(a+b)
// "11"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when comparing objects it will also try to convert them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 1
let b = '1'
console.log(a == b)
// true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can reference &lt;a href="https://dorey.github.io/JavaScript-Equality-Table/"&gt;this table&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHZbcuYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l1enutrlh4c9yduq4xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHZbcuYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l1enutrlh4c9yduq4xa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-life example:&lt;/strong&gt;&lt;br&gt;
It turned out really hard to provide some realistic example of a real-life issue when you use &lt;code&gt;==&lt;/code&gt; instead of &lt;code&gt;===&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can imagine a case when API returns a JSON object where some field can be in 3 states - present, missing, and null.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  ...
  { "username": "admin", roles: ["admin"] },
  { "username": "hacker", roles: null }, // disabled
  { "username": "user" },
  ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(It is weird, but I actually had this case myself when API returned &lt;code&gt;null&lt;/code&gt; instead of &lt;code&gt;[]&lt;/code&gt; if object property was empty array 🤷)&lt;/p&gt;

&lt;p&gt;So if you will write a condition using &lt;code&gt;==&lt;/code&gt; there will be a mistake.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// both these cases will be triggered
// since undefined == null is true
if (obj.prop == undefined) { ... }
if (obj.prop == null) { ... }
if (obj.prop) { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;// yeah, this example is still a bit artificial, but if you can come up with something different, please share it in the comments 🙏&lt;/p&gt;




&lt;p&gt;Btw I will post more fun stuff here and on &lt;a href="https://twitter.com/kozlovzxc"&gt;Twitter&lt;/a&gt; let's be friends 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>CSS Container Queries</title>
      <author>Andrew Bone</author>
      <pubDate>Sat, 24 Apr 2021 21:07:58 +0000</pubDate>
      <link>https://dev.to/link2twenty/css-container-queries-1205</link>
      <guid>https://dev.to/link2twenty/css-container-queries-1205</guid>
      <description>&lt;p&gt;Something new, and exciting, is coming to CSS and when I say 'is coming' I mean it's not &lt;a href="https://caniuse.com/css-container-queries"&gt;supported&lt;/a&gt; in any browsers yet and the spec is not finalised (at the time of writing). That all being said it's behind a flag in the next version of chrome and I have no doubt will be in all 'modern' browsers in no time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-container-queries"&gt;
  &lt;/a&gt;
  What are container queries
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries"&gt;Container queries&lt;/a&gt; are similar to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries"&gt;media queries&lt;/a&gt; but with one major, and crucial, difference. Media queries query the entire document and are used to modify content depending on those queries. For instance if the document is over 1025px you may want to move content in two columns rather than one. This would look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;column-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1025px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;column-count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Container queries follow the same principle but rather than querying the entire document they, instead, query the container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-they-help-developers"&gt;
  &lt;/a&gt;
  How do they help developers
&lt;/h2&gt;

&lt;p&gt;Imagine the following scenario; you've got a contact card you want to display all over your site. In some places it's in the main content but in other places you've decided to display it in an aside. On the same media query the aside could be 250px but the main section could be 700px leading to the cards needing to look different. The solution is easy enough you need to have different classes for the cards with different media queries but there is a better way... Container queries!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-you-use-container-queries"&gt;
  &lt;/a&gt;
  How do you use container queries
&lt;/h1&gt;

&lt;p&gt;To use container queries we have to tell the container (the parent of the element we want to apply the query to) that we care about its dimensions, we do this with the new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/contain"&gt;&lt;code&gt;contain&lt;/code&gt;&lt;/a&gt; property.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;none&lt;/strong&gt;&lt;br&gt;
Indicates the element renders as normal, with no containment applied.&lt;br&gt;
&lt;strong&gt;strict&lt;/strong&gt;&lt;br&gt;
Indicates that all containment rules except style are applied to the element. This is equivalent to contain: size layout paint.&lt;br&gt;
&lt;strong&gt;content&lt;/strong&gt;&lt;br&gt;
Indicates that all containment rules except size and style are applied to the element. This is equivalent to contain: layout paint.&lt;br&gt;
&lt;strong&gt;size&lt;/strong&gt;&lt;br&gt;
Indicates that the element can be sized without the need to examine its descendants' sizes.&lt;br&gt;
&lt;strong&gt;layout&lt;/strong&gt;&lt;br&gt;
Indicates that nothing outside the element may affect its internal layout and vice versa.&lt;br&gt;
&lt;strong&gt;style&lt;/strong&gt;&lt;br&gt;
Indicates that, for properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element. Note that this value is marked "at-risk" in the spec and may not be supported everywhere.&lt;br&gt;
&lt;strong&gt;paint&lt;/strong&gt;&lt;br&gt;
Indicates that descendants of the element don't display outside its bounds. If the containing box is offscreen, the browser does not need to paint its contained elements — these must also be offscreen as they are contained completely by that box. And if a descendant overflows the containing element's bounds, then that descendant will be clipped to the containing element's border-box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation is a little lacking on Mozilla at the moment, which is rare. We want to use the &lt;code&gt;inline-size&lt;/code&gt; property which is described on Mozilla elsewhere as&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we use media queries, most of the time we care about the available width (or &lt;code&gt;inline-size&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#practical-examples"&gt;
  &lt;/a&gt;
  Practical examples
&lt;/h2&gt;

&lt;p&gt;Let's take our contact card example from earlier and come up with some code to describe it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"site"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card__profile-image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"profile.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card__profile-information"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Both Names&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Some info about me&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"side-panel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card__profile-image"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"profile.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"contact-card__profile-information"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Both Names&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Some info about me&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTML is quite simplistic but I think it gets the point across we have a contact card, its in two places with, potentially, drastically different widths.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Just some simple css to get it started */&lt;/span&gt;
&lt;span class="nc"&gt;.site&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="nc"&gt;.side-panel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;tomato&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Real css starts here */&lt;/span&gt;
&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;aside&lt;/span&gt;&lt;span class="nc"&gt;.side-panel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;inline-size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card__profile-image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.contact-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.contact-card__profile-information&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this CSS we style the &lt;code&gt;contact-card&lt;/code&gt; and then we have a container query that changes the style of the card when we pass a width of 450px. As you can see it's basically the same as a media query but is based on the container.&lt;/p&gt;

&lt;p&gt;Here is how the code will render (hopefully we can try it in more browsers one day soon). Here's the code if for when it actually works, &lt;a href="https://jsfiddle.net/f74depvk/"&gt;jsfiddle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcw9xrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqxjuutfqo2tq5im8lv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcw9xrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqxjuutfqo2tq5im8lv5.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#influence-the-spec"&gt;
  &lt;/a&gt;
  Influence the spec
&lt;/h1&gt;

&lt;p&gt;As I said right at the start the spec isn't yet finalised, if you want to look at what people are suggesting or if you want to make a suggestion yourself there is still time to do it. Head over to the &lt;a href="https://github.com/w3c/csswg-drafts/issues?q=is%3Aissue+is%3Aopen+label%3Acss-contain-3+"&gt;git issues board&lt;/a&gt; and have a look.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h1&gt;

&lt;p&gt;I'm very excited about this, I work mostly with React and I am really looking forward to components being able to change based on their parent's size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QA4b-1qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/AmazingTintedIberianmole-max-1mb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QA4b-1qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/AmazingTintedIberianmole-max-1mb.gif" alt="A very exciting time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well that's it, that's the post. If you have any questions feel free to post them in comments I might not be able to answer them off the top of my head but let's learn together. You can come find me on &lt;a href="https://twitter.com/Link2Twenty?s=09"&gt;Twitter&lt;/a&gt; if you like.&lt;/p&gt;

&lt;p&gt;Thank you so much for reading ❤️🧠🧠❤️🦄🦄🧠❤️🧠&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Escreva testes úteis</title>
      <author>Matheus Marques</author>
      <pubDate>Sat, 24 Apr 2021 21:03:11 +0000</pubDate>
      <link>https://dev.to/matiosfm/escreva-testes-uteis-10e</link>
      <guid>https://dev.to/matiosfm/escreva-testes-uteis-10e</guid>
      <description>&lt;p&gt;Testes de software são constantemente negligenciados e vítimas da falsa sensação de baixa produtividade quando se dá o primeiro passo nesse mundo.&lt;/p&gt;

&lt;p&gt;Muitos projetos com a mentalidade #GoHorse crescem de forma rápida e dinâmica, sem se importar muito com o alicerce e definições. Porém, o galopar desse cavalo imponente e selvagem pode se transformar em um belo de um tropeço, uma queda bem feia e muito esforço desnecessário para recolocá-lo em movimento.&lt;/p&gt;

&lt;p&gt;Testes são o equilíbrio entre o código que se escreve para atingir um comportamento esperado pelas pessoas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fluxograma-de-um-software"&gt;
  &lt;/a&gt;
  Fluxograma de um software
&lt;/h2&gt;

&lt;p&gt;Gosto de pensar que qualquer software é definido pelo fluxograma abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkR7vQKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqnaqszkm13e5ormbnr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkR7vQKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqnaqszkm13e5ormbnr9.png" alt="Fluxograma de um software"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba que o usuário interage com as regras de negócio através da UI. Essa interação gera uma nova atualização no estado, pois a própria regra tinha esse foco ou a busca por dados teve a culpa nessa atualização. Também é possível ver que indiretamente, o usuário busca, constantemente, por dados em nossas aplicações através de um intermediador.&lt;/p&gt;

&lt;p&gt;Para que os testes se comuniquem com esse fluxograma, definem-se alguns pontos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-devem-testar-comportamentos"&gt;
  &lt;/a&gt;
  Testes devem testar comportamentos
&lt;/h2&gt;

&lt;p&gt;O objetivo central de testes de software é garantir a integridade de uma aplicação. Indo um pouco além, &lt;strong&gt;testes devem focar em testar comportamento de pessoas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;O comportamento é definido como o conjunto de ação-reação de um sistema dinâmico.&lt;/p&gt;

&lt;p&gt;Portanto, as pessoas não estão interessadas em qual padrão de software foi usado no projeto, muito menos a linguagem. Elas querem interagir com a aplicação da forma mais fluida possível.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Todos os testes devem ser uma combinação de ações que simula a interação de uma pessoa e testar a sua percepção às mudanças sempre que necessário.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#testes-devem-ter-foco"&gt;
  &lt;/a&gt;
  Testes devem ter foco
&lt;/h2&gt;

&lt;p&gt;Aliado ao conceito de comportamento, os testes precisam de foco.&lt;/p&gt;

&lt;p&gt;Não é interessante misturar comportamentos em um mesmo teste, pois em situações onde é necessário dar a manutenção no software, não será fácil mapear qual comportamento está com problema.&lt;/p&gt;

&lt;p&gt;Ter foco também ajuda a entender onde começa e termina cada teste. Dessa forma, tem-se uma base de testes mais enxuta, direta ao ponto e de fácil manutenção.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-devem-ser-previs%C3%ADveis"&gt;
  &lt;/a&gt;
  Testes devem ser previsíveis
&lt;/h2&gt;

&lt;p&gt;Previsibilidade em testes significa que independente de quantas vezes serão executados, dado uma mesma entrada, a mesma saída deverá retornada.&lt;/p&gt;

&lt;p&gt;Testes previsíveis contribuem para uma boa manutenção de todo o ecossistema, ajuda na leitura e entendimento, além de estabelecer marcos bem definidos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-n%C3%A3o-devem-modificar-controles-internos-muitos-menos-manipular-estados"&gt;
  &lt;/a&gt;
  Testes não devem modificar controles internos, muitos menos manipular estados.
&lt;/h2&gt;

&lt;p&gt;É intuitivo pensar que se deve utilizar mocks para controlar as Regras de Negócio do sistema.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gosto de pensar que Mocks é uma ferramenta que permite simular retornos específicos de comportamentos reais implementados.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essa decisão pode ser perigosa, pois é muito fácil chegar em um aglomerado de testes que combinam diversas situações das regras de negócio, mas que no fundo pouco agrega na integridade do software.&lt;/p&gt;

&lt;p&gt;Testar todas essas possibilidades tiram as pessoas do ponto central do porque se escreve testes de software e as regras de negócio tomam esse lugar. Com essa pequena mudança, os comportamentos estão limitados, agora, àquilo que se escreveu, não mais ao que as pessoas conseguem fazer.&lt;/p&gt;

&lt;p&gt;Portanto, as regras de negócio devem sempre apoiar as decisões das pessoas durante uma interação e o foco é, justamente, em testar essas decisões.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-s%C3%B3-devem-manipular-aquilo-que-%C3%A9-retornado-para-a-camada-de-neg%C3%B3cio"&gt;
  &lt;/a&gt;
  Testes só devem manipular aquilo que é retornado para a camada de negócio
&lt;/h2&gt;

&lt;p&gt;Quando é necessário buscar por dados (APIs, Banco de Dados, Cache, etc), sabe-se que as regras de negócio reagem de forma diferente dependendo de como essa informação é retornada.&lt;/p&gt;

&lt;p&gt;Essas reações produzem atualizações de estados e que são apresentados na UI.&lt;/p&gt;

&lt;p&gt;Já foi dito que as pessoas interagem com os dados por meio das regras de negócio. Essa interação pode ser bem sucedida ou não. Além disso, a regra de negócio tem o dever de alterar a UI para um estado de espera até que se termine a busca por esses dados.&lt;/p&gt;

&lt;p&gt;Para que os testes sejam sempre previsíveis é preciso utilizar dos mocks para controlar os possíveis retornos (sucesso ou falha) dos agentes. Dessa forma, é possível testar todas as percepções das pessoas enquanto estão esperando pelos dados, quando são bem sucedidas e podem continuar ou quando ocorre uma falha do sistema.&lt;/p&gt;

&lt;p&gt;Novamente, os testes se limitam àquilo que as pessoas conseguem fazer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-n%C3%A3o-s%C3%A3o-f%C3%A1ceis-de-construir"&gt;
  &lt;/a&gt;
  Testes não são fáceis de construir
&lt;/h2&gt;

&lt;p&gt;Por fim, gostaria de ressaltar que construir bons testes é tão difícil quanto construir software. É preciso determinação e bastante conhecimento para evitar duplicação de código e facilitar a sua manutenção, que é constante.&lt;/p&gt;

&lt;p&gt;É preciso ter responsabilidade ao construir testes, pois são mais linhas de código que requer atenção e que vão agregar em todo o sistema construído.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Encerro essa discussão sobre como escrever bons testes de software e que sejam úteis para o seu negócio. Precisamos ser mais pragmáticos e sempre escrever software com o propósito de atender as pessoas.&lt;/p&gt;

&lt;p&gt;Adoraria escutar a opinião de vocês! Fiquem à vontade para estender esse assunto nos comentários.&lt;/p&gt;

&lt;p&gt;Um abraço e até a próxima :)&lt;/p&gt;

</description>
      <category>testing</category>
    </item>
  </channel>
</rss>
