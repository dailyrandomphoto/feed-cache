<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>OMG! 50,000 views on my blogs üôÄ</title>
      <author>Yash Makan</author>
      <pubDate>Tue, 28 Dec 2021 09:06:14 +0000</pubDate>
      <link>https://dev.to/yash_makan/omg-50000-views-on-my-blogs-1fd4</link>
      <guid>https://dev.to/yash_makan/omg-50000-views-on-my-blogs-1fd4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LaKuFcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/fxI1G5PNC5esyNlIUs/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LaKuFcY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/fxI1G5PNC5esyNlIUs/giphy.webp" alt="Thank You" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hi developers, I am Yash Makan and this is not the kind of post where I will tell you guys something which will help you in any way. But before clicking the back button, I would like you to stay. First I would like to tell you a little story... &lt;/p&gt;

&lt;p&gt;Hi, I am Yash Makan a 17yo boy living in a small city in India, it all started in the year 2018 when I first stepped on this beautiful journey. It‚Äôs been 4 years of dedication, motivation and belief that I am here. This year I got my very first job as a full-stack app developer &amp;amp; I am loving it. For next year, I‚Äôve decided to move and live independently on my own. I would like to embark on this journey of life and take full responsibility for myself. I love my parents and to be quite honest they are sad that I have to leave so early but they completely believe in me and that‚Äôs what makes me motivated. I‚Äôve decided to skip the college education(BTech) and learn on my own and help the community as I learn.&lt;/p&gt;

&lt;p&gt;I am simply telling you this because I want you guys to take the step not from next year but from today itself. I want that everyone should do stuff whatever they love or their gut tells. I know that there will be difficulties in the path but It‚Äôll all pass away and the rest will be happiness for you and your loved ones. I hope you all the very best and wish you everything you need from life. &lt;/p&gt;

&lt;p&gt;Peace ‚úåüèº&lt;/p&gt;




&lt;p&gt;With all of that said, I want to thank you guys for your support &amp;amp; love. I love to be a part of the community and my only regret is that I should have joined early on. I cannot believe what I‚Äôve achieved in the past 1.5 months and it‚Äôs all because of you guys, so THANK YOU! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6oMWzkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njn0x5ys02yc1lvtcc0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6oMWzkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njn0x5ys02yc1lvtcc0i.png" alt="Screenshot" width="880" height="130"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have so much planned to grow this 50,000 number in the upcoming future. So, if you guys don‚Äôt want to miss any of my upcoming blogs then you can follow me on &lt;a href="https://twitter.com/Yash_Makan"&gt;twitter&lt;/a&gt; or &lt;a href="https://dev.to/yash_makan"&gt;dev.to&lt;/a&gt;. With that being said, I would like to conclude this short blog and hope to see you again. Till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4y5n1K-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TfFDiw5gBuEns4ykJl/giphy.gif%3Fcid%3D790b7611431abc7a85c76da6c399a5727f24e501f9a5cae9%26rid%3Dgiphy.gif%26ct%3Dg" alt="Bye Bye Gif" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-2021-articles"&gt;
  &lt;/a&gt;
  My 2021 Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/21-must-read-books-for-kids-begineer-advanced-interview-with-pdf-56c7"&gt;21 must-read books for kids, beginner, advanced &amp;amp; interview with PDF üêç&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/everything-about-automation-in-python-pc-mobile-web-raspberry-pi-4cgh"&gt;Improve your workflow using Automation in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-ways-to-create-modern-gui-in-python-in-easiest-way-possible-5e0e"&gt;4 ways to create modern GUI in python in the easiest way possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-best-python-web-app-hosting-services-for-freewith-complete-process-57nb"&gt;4 Free hosting platforms for python web app with step-by-step process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md"&gt;18 Python one-liners that will speed up your coding process.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/ai-bot-that-could-answer-any-questions-asked-gmn"&gt;AI bot that could answer your questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3"&gt;Generate your own favourite TV episode using python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  Contact Me
&lt;/h2&gt;

&lt;p&gt;Website: &lt;a href="http://yashmakan.co.in"&gt;yashmakan.co.in&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/Yash_Makan"&gt;@Yash_Makan&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;buymeacoffee: &lt;a href="https://www.buymeacoffee.com/yashmakan"&gt;@Here&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Things to Know Before You Start Tailwind CSS</title>
      <author>Kaushal Joshi</author>
      <pubDate>Tue, 28 Dec 2021 08:32:32 +0000</pubDate>
      <link>https://dev.to/clumsycoder/things-to-know-before-you-start-tailwind-css-4ebj</link>
      <guid>https://dev.to/clumsycoder/things-to-know-before-you-start-tailwind-css-4ebj</guid>
      <description>&lt;p&gt;With the rising popularity of Tailwind CSS, many of us might jump directly on Tailwind just to catch up with the hype. It won't take them much of their time to realize that it is not like any other traditional CSS framework. They might not even get a full picture of Tailwind and end up hating it thinking it's harder than plain CSS.  &lt;/p&gt;

&lt;p&gt;Here is my attempt to cover everything that you need to know to use Tailwind CSS in your next project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This blog focuses on CSS concepts that are essential to know for using Tailwind CSS. It is &lt;strong&gt;not&lt;/strong&gt; a tutorial to get started with it.&lt;br&gt;
&lt;a href="https://tailwindcss.com/docs/installation"&gt;Official documentation&lt;/a&gt; has covered that part pretty well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#utility-first-frameworks"&gt;
  &lt;/a&gt;
  Utility First Frameworks
&lt;/h2&gt;

&lt;p&gt;The main reason why Tailwind is different from other frameworks is that it is a utility based framework, whereas frameworks like Bootstrap or Bulma are component based frameworks. Now, what's the difference?&lt;br&gt;&lt;br&gt;
Component based frameworks provide a set of components that are used by adding predefined classes to HTML elements. For example, Bootstrap has a total of 24 components that we can use by simply adding related classes.&lt;br&gt;&lt;br&gt;
Tailwind CSS on the other hand is a utility framework. It doesn't limit your design by predefined opinionated components but provides powerful building blocks that are useful to create a unique design for your projects.&lt;/p&gt;

&lt;p&gt;Tailwind achieves this by having a class for every CSS property. Additionally, we can add our valid CSS properties to make a new tailwind class as per our needs. This gives total freedom and flexibility while designing the front end.&lt;/p&gt;

&lt;p&gt;But this comes with a cost. Component based libraries don't require you to know much about plain CSS. You refer to the documentation and use the code that you need. Tailwind being a low level utility based framework doesn't work in that way. You need to have a profound understanding of CSS to use Tailwind in the best way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intermediate-css"&gt;
  &lt;/a&gt;
  Intermediate CSS
&lt;/h2&gt;

&lt;p&gt;There is only one word that describes CSS - overwhelming. Though Tailwind gives you flexibility and saves time requires to type everything explicitly, your knowledge of plain CSS is considered as the main pre-requisites. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sizing-units"&gt;
  &lt;/a&gt;
  Sizing Units
&lt;/h3&gt;

&lt;p&gt;Especially, &lt;code&gt;rem&lt;/code&gt;.  All utility classes use &lt;code&gt;rem&lt;/code&gt; for styling. Tailwind has classes from smallest rem unit  &lt;code&gt;0.125rem&lt;/code&gt; (2px) to all the way up to 24rem. Additionally, you can add units as per your choice in &lt;code&gt;tailwind.config&lt;/code&gt; file (which can be &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt; or anything else too).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#responsive-design"&gt;
  &lt;/a&gt;
  Responsive Design
&lt;/h3&gt;

&lt;p&gt;Tailwind is mobile first approach to styling. So whatever you write is suited for the smallest screen size defined while configuring tailwind. By default, the smallest utility class is &lt;code&gt;sm&lt;/code&gt; that sets media query of a minimum width of 640px. You are supposed to mention the breakpoint if you are adding classes for bigger sizes than that.&lt;br&gt;
That's why, knowing about responsive design, sizing units and media queries are a must to create anything eye-pleasing with Tailwind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flexbox-amp-grid"&gt;
  &lt;/a&gt;
  Flexbox &amp;amp; Grid
&lt;/h3&gt;

&lt;p&gt;Creating layouts using grid and flexbox classes is easy as compared to traditional ways of using them. However, you might find it confusing because many classes conflict with each other resulting in a single class that is used with both layouts.&lt;br&gt;
I was talking about &lt;code&gt;justify-{value}&lt;/code&gt;, &lt;code&gt;align-{value}&lt;/code&gt;, &lt;code&gt;place-{value}&lt;/code&gt; and &lt;code&gt;gap&lt;/code&gt;. These classes serve the same purpose for flexbox as well as grid. Having a clear understanding of them would help you to save hours of confusion.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-important-concepts"&gt;
  &lt;/a&gt;
  Other Important Concepts
&lt;/h3&gt;

&lt;p&gt;Of course, this is not it; CSS is more than that, and so is Tailwind. Units, responsive design and Flexbox/Grid need a special mention because once you understand how these things work, it won't be difficult for you to use Tailwind with its max out capacity.&lt;/p&gt;

&lt;p&gt;Other than that, here are a few more things that are good to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CSS Transition and Transform Property&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/docs/aspect-ratio"&gt;Aspect Ratios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com/docs/preflight"&gt;Preflight&lt;/a&gt;: Tailwind has a set of base styling  practices built on top of &lt;a href="https://github.com/sindresorhus/modern-normalize"&gt;modern-normalize&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am not mentioning padding, margin, box sizing, float and z-index because I believe that if you don't know how to work with them, you should think about sticking to plain CSS for some more time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-tailwind"&gt;
  &lt;/a&gt;
  When to Use Tailwind?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If you have intermediary experience with plain CSS and know how CSS is supposed to work, you can use Tailwind pretty much anywhere you want.&lt;/li&gt;
&lt;li&gt;If your front end stack has a component based library such as react, using tailwind will allow you to use it with its maximum reusability and scalability of Tailwind.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#when-not-to-use-tailwind"&gt;
  &lt;/a&gt;
  When NOT to use Tailwind?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Do not even consider using Tailwind if you don't have intermediate experience with CSS. You might not face issues in the very beginning but as your project gets bigger, it'd get messier and confusing.&lt;/li&gt;
&lt;li&gt;If you are building websites with Vanilla JS, you might not use Tailwind at its full potential. Using same class names for every different component would make the code redundant, non-readable and messy.&lt;/li&gt;
&lt;li&gt;If you are building prototypes and time/deadline is a major factor, using tailwind will slow you down. Tailwind is best suitable for big projects which give you enough time to focus on design as well as logic.&lt;/li&gt;
&lt;li&gt;Similarly, using Tailwind with projects where backend logic or backend services is more important than design must be avoided. Because you'd end up spending more time on design when your focus should be on logic.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Tailwind CSS is a utility based framework so you have to combine multiple utilities and create a component by yourself. That's why knowing about plain CSS is a must. You should have a clear understanding of sizing units, responsive design and media queries. Knowing about conflicting flexbox and grid properties would also save your confusion when you start building projects.&lt;br&gt;&lt;br&gt;
Don't jump to Tailwind if you are not comfortable with plain CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Using Tailwind when you struggle with fundamentals will only lead to frustrations. But once your fundamentals are clear, no one can stop you from harnessing the full potential of Tailwind CSS! &lt;/p&gt;

&lt;p&gt;I have scheduled more blogs about starting Tailwind CSS so if you're interested, do subscribe to the newsletter and follow &lt;a href="https://clumsycoder.hashnode.dev/"&gt;my blog&lt;/a&gt;. Also, if you think there's anything that can be improved or added, I am happy to hear your opinion. I am most active on &lt;a href="https://twitter.com/clumsy_coder"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/7JKaushal"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy Designing! üé®&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>beginners</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>peviitor.ro - diferen»õierea</title>
      <author>Boga Sebastian Nicolae</author>
      <pubDate>Tue, 28 Dec 2021 08:25:10 +0000</pubDate>
      <link>https://dev.to/sebiboga/peviitorro-diferentierea-14h2</link>
      <guid>https://dev.to/sebiboga/peviitorro-diferentierea-14h2</guid>
      <description>&lt;p&gt;Un &lt;code&gt;motor de cautare&lt;/code&gt; este diferit de platformele de recrutare prezente pe piata muncii in prezent.&lt;/p&gt;

&lt;p&gt;Sa luam cateva elemente si sa mentionam diferen»õele:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cont-de-utilizator"&gt;
  &lt;/a&gt;
  Cont de utilizator
&lt;/h4&gt;

&lt;p&gt;Pentru a avea acces la informatia prezentata de motorul de cautare peviitor.ro &lt;code&gt;nu ai nevoie de un cont de utilizator&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ejobs&lt;/strong&gt;: Pe platforma ejobs ai nevoie de un cont de utilizator. Ei te incurajeaza sa iti creezi un profil care poate deveni in timp CV-ul tau. Diferenta intre ejobs si peviitor.ro este ca acest motor de cautare: &lt;em&gt;peviitor.ro&lt;/em&gt; &lt;code&gt;nu are nevoie de datele tale personale&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;bestjobs&lt;/strong&gt;: La fel ca si pentru ejobs, ei iti recomanda sa iti creezi un profil - cont de utilizator. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;LinkedIN&lt;/strong&gt;: La fel ca si pentru bestjos si ejobs, si platforma LinkedIN recomanda sa ai un cont de utilizator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;cariere.ro&lt;/strong&gt;: La fel ca si pentru ejobs si bestjobs sau LinkedIN, si aceasta platforma te incurajeaza sa iti creezi un profil de utilizator sau un profil de companie.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#duplicare-de-continut"&gt;
  &lt;/a&gt;
  Duplicare de continut
&lt;/h4&gt;

&lt;p&gt;Ai putea fi tentat sa spui ca prin aceasta diferentiere prezentata, ejobs ofera mai mult decat un motor de cautare. Partial adevarat insa, tinand cont de faptul ca pe platforma oamenii de HR &lt;code&gt;trebuie sa re-opereze anunturile de angajare&lt;/code&gt;, duplicand contintul de pe website-ul lor -sectiunea cariere, atunci putem sa reconsideram afirmatia.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#informatia-completa"&gt;
  &lt;/a&gt;
  Informatia completa
&lt;/h4&gt;

&lt;p&gt;Nu toate locurile de munca ale unei companii sunt prezente si pe ejobs sau alte platforme unde oamenii de HR trebuie sa re-opereze manual anuntul de angajare.  &lt;/p&gt;

&lt;p&gt;peviitor.ro &lt;code&gt;isi propune sa agregheze absolut toate locurile de munca oferite de o companie&lt;/code&gt; nu doar cateva anunturi. Consideram ca este important sa ai acces la informatia completa. Luam in serios dreptul cetateanului de a fi informat, care este un drept si nu un favor.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#date-actualizate"&gt;
  &lt;/a&gt;
  Date actualizate
&lt;/h4&gt;

&lt;p&gt;Cand o oferta de munca expira, adica acel loc de munca este ocupat, prima preocupare a persoanei din HR este sa dezactiveze anuntul de pe website-ul propriu al companiei iar dezactivarea manuala de pe platformele de tip ejobs se face putin mai tarziu. Astfel, avem prezente pe platformele de recrutare oferte de locuri de munca expirate. &lt;br&gt;
In motorul de cautare peviitor.ro &lt;code&gt;vei gasi informatia actualizata&lt;/code&gt;. Cel putin o data pe zi aducem informatiile de pe website-ul companiei si reimprospatam indexul motorului de cautare.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#viteza-de-raspuns"&gt;
  &lt;/a&gt;
  Viteza de raspuns
&lt;/h4&gt;

&lt;p&gt;Tehnologiile pe care le-am ales la implementarea solutiei tehnice ne &lt;code&gt;garanteaza faptul ca timpul de raspuns va fi cel putin surprinzator&lt;/code&gt;. Daca ne uitam la Google - care este un motor de cautare doar ca nu e specializat pe locuri de munca, observam ca aduce sute de mii de raspunsuri in sub o secunda. &lt;br&gt;
Ne-am pus problema: ei cum au reusit? Si tot ce am dezvoltat se invarte in jurul motorului de cautare, indexului si scraperului.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solutie-open-source"&gt;
  &lt;/a&gt;
  Solutie OPEN SOURCE
&lt;/h4&gt;

&lt;p&gt;Daca celelalte platforme de recrutare se bazeaza pe un soft proprietar al unei companii, noi, in dezvoltarea motorului de cautare peviitor.ro am dezvoltat solutia tehnica avand in gand solutiile OPEN SOURCE. De ce open source? Pentru ca noi consideram ca toti pot contribui la succesul acestui proiect, cei care vor, desigur.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pretul"&gt;
  &lt;/a&gt;
  Pretul
&lt;/h4&gt;

&lt;p&gt;Daca pentru companii a publica un anunt de angajare pe ejobs sau bestjobs sau alte platforme de recrutare implica niste costuri, pe platforma &lt;code&gt;peviitor.ro totul este GRATUIT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Am prezentat aici cateva dintre aspectele care ne diferentiaza. Mai sunt si altele pe care le vom dezvalui pe masura ce dezvoltam proiectul. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://splash.peviitor.ro/"&gt;https://splash.peviitor.ro/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>searchengine</category>
      <category>peviitor</category>
      <category>job</category>
      <category>locuridemunca</category>
    </item>
    <item>
      <title>Top 10 Trending Technologies to Learn in 2022</title>
      <author>Ashish Yadav</author>
      <pubDate>Tue, 28 Dec 2021 08:12:44 +0000</pubDate>
      <link>https://dev.to/expoashish/top-10-trending-technologies-to-learn-in-2022-19pd</link>
      <guid>https://dev.to/expoashish/top-10-trending-technologies-to-learn-in-2022-19pd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#top-10-trending-technologies-to-learn-in-2022"&gt;
  &lt;/a&gt;
  Top 10 Trending Technologies to Learn in 2022
&lt;/h2&gt;

&lt;p&gt;In this blog we are going to see top 10 trending Technologies to learn in 2022. Top 10 trending and new technologies in 2022. If you like my post then follow me. Lets Start:-üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-trending-technologies-to-learn.html"&gt;Top 10 Trending Technologies to Learn in 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>ai</category>
      <category>blockchain</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>A/B testing with the JAMstack</title>
      <author>Marvin</author>
      <pubDate>Tue, 28 Dec 2021 08:03:45 +0000</pubDate>
      <link>https://dev.to/mfrachet/ab-testing-with-the-jamstack-22mp</link>
      <guid>https://dev.to/mfrachet/ab-testing-with-the-jamstack-22mp</guid>
      <description>&lt;p&gt;The JAMstack has been talked about in recent years like a way to create static websites that scales very well in many different ways.&lt;br&gt;
Since it becomes more and more mainstream, it made sense to people to think about how to apply older patterns that we like in this&lt;br&gt;
quite particular context.&lt;/p&gt;

&lt;p&gt;In this post, I will share with you &lt;strong&gt;my vision&lt;/strong&gt; of A/B testing (or feature flagging, everything written below may apply to both) using the JAMstack.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#but-first-why-do-we-use-the-jamstack"&gt;
  &lt;/a&gt;
  But first, why do we use the JAMstack?
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://jamstack.org/"&gt;jamstack.org&lt;/a&gt;, we use it because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it's about building &lt;strong&gt;simple static pages&lt;/strong&gt; (HTML files)&lt;/li&gt;
&lt;li&gt;most of the job is made at build-time, no potential leak at runtime, it's more &lt;strong&gt;secured&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;static pages are basically HTML files and thus &lt;strong&gt;load very fast&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;we benefit from &lt;strong&gt;cheap hosting&lt;/strong&gt; (putting files on a server and there we go)&lt;/li&gt;
&lt;li&gt;it's &lt;strong&gt;highly scalable&lt;/strong&gt;, just put the files on another machine and scaling is done&lt;/li&gt;
&lt;li&gt;it already exists great tools to create amazing sites (&lt;a href="https://www.gatsbyjs.com/"&gt;Gatsbyjs&lt;/a&gt;, &lt;a href="https://nextjs.org/"&gt;Nextjs&lt;/a&gt;, &lt;a href="https://www.11ty.dev/"&gt;11ty&lt;/a&gt;, &lt;a href="https://jamstack.org/generators/"&gt;etc...&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#why-do-we-use-ab-testing"&gt;
  &lt;/a&gt;
  Why do we use A/B testing?
&lt;/h2&gt;

&lt;p&gt;People use A/B testing to measure which variant of a website is more appreciated by their users. The idea is simply to provide different visual representations of some data and check which one attracts more people.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irfewGZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/ab-tests.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irfewGZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/ab-tests.png" alt="Visual representation of two different variants of an A/B tests" width="507" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the visitors of the variant A come more often than the visitors of the variant B, then we can assume that variant A is a more viable solution to represent the data on the page.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-do-we-use-ab-testing-in-non-jamstack-applications"&gt;
  &lt;/a&gt;
  How do we use A/B testing in non JAMstack applications?
&lt;/h2&gt;

&lt;p&gt;In applications that are not built on top of the JAMstack, the idea is quite straightforward.&lt;/p&gt;

&lt;p&gt;When opening the application, it will make a request to a remote server to get the different available variants. Then, based on some conditions in the codebase, we are able to display the good variant to the good user.&lt;/p&gt;

&lt;p&gt;The following is an example of a client-side A/B test written with &lt;a href="https://reactjs.org/"&gt;Reactjs&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useABVariant&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Preparing the application...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Here's the A variant!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Here's the B variant!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we see in the snippet, the code is executed in the user's browser. Also notice &lt;strong&gt;the loading information while the request is pending&lt;/strong&gt; before being able to display the variant content.&lt;/p&gt;

&lt;p&gt;The following is a tiny sandbox allowing to switch on and off a feature flag to display a new variant of a homepage. When using services like &lt;a href="https://launchdarkly.com/"&gt;LaunchDarkly&lt;/a&gt;, this is exactly the kind of actions you're provided with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-ab-testing-on-the-jamstack-is-different"&gt;
  &lt;/a&gt;
  Why A/B testing on the JAMstack is different?
&lt;/h2&gt;

&lt;p&gt;Remember one of the main arguments of building on top of the JAMstack is &lt;strong&gt;fast page loading&lt;/strong&gt; (performance).&lt;/p&gt;

&lt;p&gt;When dealing with A/B tests the "standard way", &lt;strong&gt;we need to make an HTTP request to get the different variants&lt;/strong&gt;. Making an HTTP request means that &lt;strong&gt;there is a delay&lt;/strong&gt; between the moment we ask for the variants and the moment we get them back from the server.&lt;/p&gt;

&lt;p&gt;The problem is that &lt;strong&gt;making the HTTP request is so critical&lt;/strong&gt; that we can't show anything else than a loading information to the user before resolving the variants and being able to show them the good content.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a static environment, we are waiting for a dynamic information to display meaningful information.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When A/B testing the "standard way", using runtime information will &lt;strong&gt;make the application performances worse by increasing the time for the displaying the first meaningful content&lt;/strong&gt;. Loading static pages should be "instant" but relying on an HTTP request and an intermediate loading state before displaying the content will take extra time and decrease the experience.&lt;/p&gt;

&lt;p&gt;In some scenarios, &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; performance score can drop by around &lt;code&gt;25&lt;/code&gt; points (up to you to determine if it's significant or not).&lt;/p&gt;

&lt;p&gt;Also note that some tools helping building applications using the JAMstack &lt;strong&gt;don't even run JavaScript at all&lt;/strong&gt;, meaning that it's not possible to rely on HTTP requests to access remote data at runtime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-ab-testing-in-a-jamstack-fashion"&gt;
  &lt;/a&gt;
  How to make A/B testing in a JAMstack fashion?
&lt;/h2&gt;

&lt;p&gt;The JAMstack is about &lt;strong&gt;building static pages&lt;/strong&gt;. Taking this notion to the extreme, we can imagine creating a dedicated set of static pages for different variants and host them in different places, like for example, different machines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FouN6kE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/machine-ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FouN6kE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/machine-ab.png" alt="Visual representation of two machines hosting two different variants of an A/B test" width="851" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The machine 1&lt;/strong&gt; owns all the statically generated HTML pages impacted by the variant A and &lt;strong&gt;the machine 2&lt;/strong&gt; owns all of the statically generated HTML pages of the variant B.&lt;/p&gt;

&lt;p&gt;Since pages are statically generated at build time, we can rely on environment variables to display the good variant content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AB_EXPERIMENT_VARIANT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;AB_EXPERIMENT_VARIANTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AB_EXPERIMENT_VARIANT&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Here's the A variant!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Here's the B variant!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to rely on some kind of proxy to route the different users to one of the two variants and make sure they always see that variant.&lt;/p&gt;

&lt;p&gt;Remember, &lt;strong&gt;we can't rely on runtime information to store the variant&lt;/strong&gt;, like an authenticated user id for example. We need to rely on something else. Hopefully, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"&gt;HTTP Cookies&lt;/a&gt; exist that allow for a client-server kind of data sharing. We can benefit from them to store the actual variant requested by the user and make sure that they will always get routed to that variant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zS66SKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/cookie-ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zS66SKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/cookie-ab.png" alt="Visual representation of a proxy routing an HTTP request to the good machine for an A/B test" width="851" height="1263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#observations-on-this-approach"&gt;
  &lt;/a&gt;
  Observations on this approach
&lt;/h2&gt;

&lt;p&gt;The first observations to push upfront is that &lt;strong&gt;we have kept the page loading performances provided by default by the JAMstack&lt;/strong&gt;. We don't have to wait for runtime computations to display content on the page.&lt;/p&gt;

&lt;p&gt;The second observation is about the tradeoffs we decided to make: we shifted the A/B testing responsibility &lt;strong&gt;closer to the infrastructure layer&lt;/strong&gt;. The proxy has an important role to play in this scenario.&lt;/p&gt;

&lt;p&gt;Also note that we need more "places" to put the different variants: 1 variant corresponds to 1 website that corresponds to 1 set of static pages that should entirely be hosted. &lt;strong&gt;The more we have variants, the more we may pay for hosting&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJdzBuH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/all-variants.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJdzBuH---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mfrachet.github.io/blog/a-b-testing-with-the-jamstack/all-variants.png" alt="A visual representation of a project having 4 different variants" width="880" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's also one side effect that I find positive (but it can feel negative) is that it can be hard to combine multiple A/B experiments.&lt;/p&gt;

&lt;p&gt;Let's say that we have 2 pages and that we want to run an experiment on both the pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What can be a visual representation of these scenarios at the hosting level?&lt;/li&gt;
&lt;li&gt;Should we create 4 different websites, one for each variant?&lt;/li&gt;
&lt;li&gt;Should we create N different websites with combinations of variants?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My expectations is that there will be solutions allowing to make A/B testing at the file level itself, and not at that site level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;If you're using &lt;a href=""&gt;Netlify&lt;/a&gt; for hosting your websites, they have a feature called &lt;a href="https://docs.netlify.com/site-deploys/split-testing/"&gt;Split-testing&lt;/a&gt; that allows for these kind of testing using a branch based approach.&lt;/p&gt;

&lt;p&gt;If you have any other references in mind concerning A/B testing or Split Testing on top of the JAMstack, feel free to drop them on &lt;a href="https://twitter.com/mfrachet"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 6 Consulting Firms in Pune</title>
      <author>Sakshi Thorat</author>
      <pubDate>Tue, 28 Dec 2021 07:39:29 +0000</pubDate>
      <link>https://dev.to/sakshithorat/top-6-consulting-firms-in-pune-4i7d</link>
      <guid>https://dev.to/sakshithorat/top-6-consulting-firms-in-pune-4i7d</guid>
      <description>&lt;p&gt;Do you need consulting services in Pune to assist your company to become more productive by simplifying and enabling procedures that increase communication, save expenses, and boost overall performance? &lt;/p&gt;

&lt;p&gt;You may acquire competitive advantages and develop unique goods and services with the help of several consulting organisations in Pune. &lt;/p&gt;

&lt;p&gt;By collaborating with customers, the majority of consultants advise them on how to use information technology to fulfil their business objectives or solve challenges. &lt;/p&gt;

&lt;p&gt;We have compiled a list of the best consulting firms in Pune that can help enterprises improve the structure and effectiveness of their IT systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top 6 consulting firms in Pune&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following are the list of the top 10 consulting firms in Pune:&lt;/p&gt;

&lt;p&gt;1.** REGO Techno Solutions**&lt;/p&gt;

&lt;p&gt;Rego Techno Solutions is one of India's leading website design firms. Professional Online Design and Web Development Company in a wide range of creative and technical web solutions, including web design, web development, website hosting, digital marketing, and SEO. &lt;/p&gt;

&lt;p&gt;Whether it's building a successful ECommerce store (e-commerce website development) or establishing a corporate online presence, they can help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Britwise Technologies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Britwise Technologies is a well-known offshore Web &amp;amp; Mobile application development business in India that provides unique and best-in-class solutions to clients all over the world. &lt;/p&gt;

&lt;p&gt;With the help of qualified expert developers, They can turn your concept into a personalised and scalable application that will help you grow your business. Britwise Technology, with its empowered team of professionals and industry experts, specialises in cutting-edge technology. &lt;/p&gt;

&lt;p&gt;They deal with startups, mid-sized businesses, and major organisations, assisting them with their business operations via the use of technology. They've served customers in a variety of time zones and verticals, with retail, automotive, hotel, real estate, education, tourism, and medical being the most common.&lt;/p&gt;

&lt;p&gt;Please connect with them for more information about development services. They turn your ideas into creating apps, and they are the global leader in development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Logic Research and Solutions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hotel management, event management, b2b portal, classified services, career services, healthcare analogue forecasting tools, and many more online applications have been built by Logic Research and Solutions for our happy clients. &lt;/p&gt;

&lt;p&gt;They have a team of web application developers that are proficient in PHP, Android, Advanced Java, Asp.net, and other programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. ShivShakti Web Solutions &amp;amp; Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They are committed to providing you with whatever you need (in terms of web and internet services) for your online presence on the internet. &lt;/p&gt;

&lt;p&gt;In the following spheres of operation, they provide a variety of personal and professional services: Web hosting, domain registration, website design and development, eCommerce services, email hosting, digital certificates, SEO services, CMS services, website logo design, web advertising, and excellent customer service are just a few of the services available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. QuadLogix Technologies Pvt. Ltd.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They are an IT consulting and software development firm that provides end-to-end IT solutions to businesses all over the world. &lt;/p&gt;

&lt;p&gt;They are the chosen IT consultants and development partners for organisations all over the world because of our strong expertise in technology, our diverse experience across numerous sectors, and our well-designed software best practices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;a href="https://www.behievehrsolutions.com/"&gt;Behieve HR Solutions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pune Based leading best class corporate leadership training company offers analytics-focused OD and performance consulting for Small Medium Enterprises, &lt;a href="https://www.behievehrsolutions.com/services/business-coaching/"&gt;leadership training&lt;/a&gt;, soft skills training, management, and executive coaching solutions for professionals and companies looking to partner with foremost corporate leadership training companies. They customize and deliver &lt;a href="https://www.behievehrsolutions.com/services/hr-processes/"&gt;HR Processes&lt;/a&gt;, Learning &amp;amp; development, corporate pieces of training, and webinars keeping our client‚Äôs business, organizational culture.&lt;/p&gt;

&lt;p&gt;They also provide &lt;a href="https://www.behievehrsolutions.com/services/recruitment/"&gt;Recruitment Process Outsourcing (RPO)&lt;/a&gt; which is an entire business process outsourcing where a company transfer all or part of its recruitment processes to an external service provider.&lt;/p&gt;

&lt;p&gt;Behieve offer &lt;a href="https://www.behievehrsolutions.com/services/learning-development/"&gt;Learning and Development&lt;/a&gt; which best describes everything a business does to encourage professional development among its employees. Training courses, analysis, content management programs, learning plan implementations, development activities ‚Äì as well as much more ‚Äì all fall under the bracket of Learning and Development.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Flow control using JS</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 28 Dec 2021 07:38:30 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/flow-control-using-js-3f2m</link>
      <guid>https://dev.to/whitehatdevv/flow-control-using-js-3f2m</guid>
      <description>&lt;p&gt;Yes, it's one of the most &lt;strong&gt;important topic&lt;/strong&gt; when you are learning how to &lt;strong&gt;write&lt;/strong&gt; code with &lt;strong&gt;JS&lt;/strong&gt; ü§î&lt;/p&gt;

&lt;p&gt;First, you need to understand what does it mean, what is exactly &lt;em&gt;flow control&lt;/em&gt;, when your code needs to take a decision about which sentence should be run it's made with &lt;strong&gt;FLOW CONTROL&lt;/strong&gt; üòá. There are different methods to control flow using JS, let's going to see some examples: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-else-clause"&gt;
  &lt;/a&gt;
  if - else clause
&lt;/h2&gt;

&lt;p&gt;This is the most &lt;strong&gt;typical&lt;/strong&gt; one, it gives us a lot of control about code execution, we can &lt;em&gt;decide&lt;/em&gt; which code should be run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// run here is condition is true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// run here is condition is false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the &lt;em&gt;basic syntax&lt;/em&gt; you must use üòÅ, it's really easy, you have a condition which is evaluated and depending on that you will run one side or &lt;strong&gt;another&lt;/strong&gt;. &lt;strong&gt;OMG!!&lt;/strong&gt; Yes, it gives us a lot of power. Let's try one more example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum contains a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum is not a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, this code checks if this &lt;code&gt;const&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt; and run the following sentences according to the condition, &lt;strong&gt;obviously&lt;/strong&gt; this condition is &lt;code&gt;true&lt;/code&gt;, the you will see &lt;code&gt;My Mum contains a string&lt;/code&gt; in your &lt;code&gt;console&lt;/code&gt; üòá. &lt;/p&gt;

&lt;p&gt;Moreover you are able to evaluate multiple conditions using &lt;code&gt;logic operators&lt;/code&gt;, AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and OR &lt;code&gt;||&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;: It means that all the conditions must be true due to &lt;code&gt;true&lt;/code&gt; of the entire condition.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// It returns true due to both sides are true.&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;OR &lt;code&gt;||&lt;/code&gt;: It means that at least one of the conditions must be true to get a final &lt;code&gt;true&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// it returns true due to at least one side is true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It gives us more powerful tools to check multiple conditions using the same &lt;code&gt;if&lt;/code&gt; clause ü§ñ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum contains a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum is not a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, it will print &lt;code&gt;My mum contains a string&lt;/code&gt; because two conditions are true and I have used an &lt;strong&gt;AND&lt;/strong&gt; logic port. &lt;br&gt;
I recommend you to practise some conditions using JS to &lt;strong&gt;understand better&lt;/strong&gt; ‚ò∫Ô∏è how to use that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#switchcase-clause"&gt;
  &lt;/a&gt;
  Switch-case clause
&lt;/h2&gt;

&lt;p&gt;It allows you to check multiple &lt;em&gt;static&lt;/em&gt; conditions and take decisions depending on that value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valor1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valor1` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valor2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valor2` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valorN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valorN` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when all the conditions are false&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has a lot of power and bring us the opportunity to check &lt;strong&gt;multiple possible values&lt;/strong&gt; easily, instead, we can use multiple &lt;code&gt;if-else&lt;/code&gt; clauses, but your code will not be legible ü§í. It comes to bring us more &lt;strong&gt;organisation&lt;/strong&gt; when we need to check conditions that can take a lot different values, Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 negative&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// foo is 0, then the following block will be run&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Break allow us not to run case1&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Break allow us not to run case2&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, you can run the same for conditions that need to perform the same &lt;strong&gt;action&lt;/strong&gt;, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giraffe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giraffe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bird&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This animal will live.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;elephant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This animal will not.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, we will take the same action if animal math &lt;strong&gt;one of the four&lt;/strong&gt; case exposed üòá.&lt;/p&gt;

&lt;p&gt;Here you have seen how to check conditions and how to make your code take &lt;strong&gt;decisions&lt;/strong&gt; in execution time about possible values of your &lt;strong&gt;expressions&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;That's all for &lt;em&gt;today&lt;/em&gt; post!!!&lt;/p&gt;

&lt;p&gt;If you really like our post, please don't forget to share with your friends and give us some likes, it'll help us to grow more and get more &lt;strong&gt;advance&lt;/strong&gt; content üë®üèº‚Äçüíª to this blog. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The main reason why I don't use Redux in my projects</title>
      <author>Nitsan Cohen</author>
      <pubDate>Tue, 28 Dec 2021 07:32:26 +0000</pubDate>
      <link>https://dev.to/nitsancohen770/the-main-reason-why-i-dont-use-redux-in-my-projects-i9d</link>
      <guid>https://dev.to/nitsancohen770/the-main-reason-why-i-dont-use-redux-in-my-projects-i9d</guid>
      <description>&lt;p&gt;The main reason why I don't use Redux in my projects&lt;/p&gt;

&lt;p&gt;There are several reasons why not to use Redux.&lt;/p&gt;

&lt;p&gt;And choose another more modern library like Recoil.&lt;/p&gt;

&lt;p&gt;But the main reason why I don't use Redux has nothing to do with Redux itself. For the same following explanation, I won't use Recoil as well.&lt;/p&gt;

&lt;p&gt;I don't use Redux because I want my components to be decoupled from a third-party library.&lt;/p&gt;

&lt;p&gt;What do I mean?&lt;/p&gt;

&lt;p&gt;When I create a component with Bit, I know these components will be used in dozens or even hundreds of applications.&lt;/p&gt;

&lt;p&gt;A component in Bit is independent - it is versioned and built independently and installed in your project like any other package using npm (for instance - &lt;code&gt;npm i @teambit/base-ui.input.button&lt;/code&gt; also don't forget to configure your npm registry &lt;code&gt;npm config set '@teambit:registry' https://node.bit.dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I don't know what libraries the consumers of my components will want to use. Maybe they will want to use Recoil? Perhaps Redux? Or even the beloved Context!&lt;/p&gt;

&lt;p&gt;That is why I have to abstract my components from any third-party library. That way, I enable everyone to use it with ease.&lt;/p&gt;

&lt;p&gt;If I have to pass something from a distant parent, I use Context. Context is part of the React library, so I have no problem using it!&lt;/p&gt;

&lt;p&gt;I am sure my consumers will be using React since I am creating a React component.&lt;/p&gt;

&lt;p&gt;I will show you how I create agnostic components in the next post. Meanwhile, try making your components and exporting them.&lt;/p&gt;

&lt;p&gt;In the attached code block, you will find instructions on quickly starting your own lab to create and export independent components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xMUUxXE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzflv7o7m0baom9l9roc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMUUxXE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzflv7o7m0baom9l9roc.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>redux</category>
    </item>
    <item>
      <title>Vitest - Jest Alternative powered by Vite</title>
      <author>Eugene Kopich</author>
      <pubDate>Tue, 28 Dec 2021 07:27:55 +0000</pubDate>
      <link>https://dev.to/web2033/vitest-jest-alternative-powered-by-vite-5hc7</link>
      <guid>https://dev.to/web2033/vitest-jest-alternative-powered-by-vite-5hc7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-vitest"&gt;
  &lt;/a&gt;
  Why &lt;a href="https://vitest.dev/"&gt;Vitest&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This guide assumes that you are familiar with Vite. A good way to start learning more is to read the &lt;a href="https://vitejs.dev/guide/why.html"&gt;Why Vite Guide&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=UJypSr8IhKY"&gt;Next generation frontend tooling with ViteJS&lt;/a&gt;, a stream where &lt;a href="https://twitter.com/youyuxi"&gt;Evan You&lt;/a&gt; did a demo explaining the main concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-need-for-a-vite-native-test-runner"&gt;
  &lt;/a&gt;
  The need for a Vite native test runner
&lt;/h2&gt;

&lt;p&gt;Vite's out-of-the-box support for common web patterns, features like glob imports and SSR primitives, and its many plugins and integrations are fostering a vibrant ecosystem. Its dev and build story are key to its success. For docs, there are several SSG-based alternatives powered by Vite. Vite's Unit Testing story hasn't been clear though. Existing options like &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; were created in a different context. There is a lot of duplication between Jest and Vite, forcing users to configure two different pipelines. &lt;/p&gt;

&lt;p&gt;Using Vite dev server to transform your files during testing, enables the creation of a simple runner that doesn't need to deal with the complexity of transforming source files and can solely focus on providing the best DX during testing. A test runner that uses the same configuration of your App (through &lt;code&gt;vite.config.js&lt;/code&gt;), sharing a common transformation pipeline during dev, build, and test time. That is extensible with the same plugin API that lets you and the maintainers of your tools provide first-class integration with Vite. A tool that is built with Vite in mind from the start, taking advantage of its improvements in DX, like its instant Hot Module Reload (HMR). This is Vitest, a blazing fast unit-test framework powered by Vite. &lt;/p&gt;

&lt;p&gt;Given Jest's massive adoption, Vitest provides a compatible API that allows you to use it as a drop-in replacement in most projects. It also includes the most common features required when setting up your unit tests (mocking, snapshots, coverage). Vitest cares a lot about performance and uses Worker threads to run as much as possible in parallel. Some ports have seen test running an order of magnitude faster. Watch mode is enabled by default, aligning itself with the way Vite pushes for a dev first experience. Even with all these improvements in DX, Vitest stays lightweight by carefully choosing its dependencies (or directly inlining needed pieces). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vitest aims to position itself as the Test Runner of choice for Vite projects, and as a solid alternative even for projects not using Vite.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vitest-vs-jest"&gt;
  &lt;/a&gt;
  Vitest vs Jest
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; took over the Testing Framework space by providing out-of-the-box support for most JavaScript projects, a comfortable API (&lt;code&gt;it&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt;), and the full pack of testing features that most setups would require (snapshots, mocks, coverage). We are thankful to the Jest team and community for creating a delightful testing API and pushing forward a lot of the testing patterns that are now a standard in the web ecosystem. It is possible to use Jest in Vite setups. &lt;a href="https://twitter.com/haoqunjiang"&gt;@sodatea&lt;/a&gt; is building &lt;a href="https://github.com/sodatea/vite-jest#readme"&gt;vite-jest&lt;/a&gt;, which aims to provide first-class Vite integration for &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;. The last &lt;a href="https://github.com/sodatea/vite-jest/blob/main/packages/vite-jest/README.md#vite-jest"&gt;blockers in Jest&lt;/a&gt; have been solved so this is a valid option for your unit tests. However, in a world where we have &lt;a href="https://vitejs.dev"&gt;Vite&lt;/a&gt; providing support for the most common web tooling (typescript, JSX, most popular UI Frameworks), Jest represents a duplication of complexity. If your app is powered by Vite, having two different pipelines to configure and maintain is not justifiable. With Vitest you get to define the configuration for your dev, build and test environments as a single pipeline, sharing the same plugins and the same vite.config.js. Even if your library is not using Vite (for example, if it is built with esbuild or rollup), Vitest is an interesting option as it gives you a faster run for your unit tests and a jump in DX thanks to the default watch mode using Vite instant Hot Module Reload (HMR). Vitest offers compatibility with most of the Jest API and ecosystem libraries, so in most projects, it should be a drop-in replacement for Jest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vitest-features"&gt;
  &lt;/a&gt;
  Vitest Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vite's config, transformers, resolvers, and plugins. Use the same setup from your app!&lt;/li&gt;
&lt;li&gt;Jest Snapshot&lt;/li&gt;
&lt;li&gt;Chai built-in for assertions, with Jest expect compatible APIs.&lt;/li&gt;
&lt;li&gt;Smart &amp;amp; instant watch mode, like HMR for tests!&lt;/li&gt;
&lt;li&gt;Native code coverage via c8&lt;/li&gt;
&lt;li&gt;Tinyspy built-in for mocking, stubbing, and spies.&lt;/li&gt;
&lt;li&gt;JSDOM and happy-dom for DOM and browser API mocking&lt;/li&gt;
&lt;li&gt;Components testing (Vue, React, Lit, Vitesse)&lt;/li&gt;
&lt;li&gt;Workers multi-threading via tinypool (a lightweight fork of Piscina)&lt;/li&gt;
&lt;li&gt;ESM first, top level await&lt;/li&gt;
&lt;li&gt;Out-of-box TypeScript / JSX support&lt;/li&gt;
&lt;li&gt;Filtering, timeouts, concurrent for suite and tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vitest-example"&gt;
  &lt;/a&gt;
  Vitest Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vitest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;suite name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snapshot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g50JDX0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ffh77i34mjb4dcuggs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g50JDX0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ffh77i34mjb4dcuggs.png" alt="Vitest logo" width="740" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vitest.dev/guide/"&gt;Vitest Documentaion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vite</category>
      <category>jest</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Basics of Python "String"</title>
      <author>Umme Abira AZMARY</author>
      <pubDate>Tue, 28 Dec 2021 06:22:53 +0000</pubDate>
      <link>https://dev.to/mouly22/basics-of-python-string-glg</link>
      <guid>https://dev.to/mouly22/basics-of-python-string-glg</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strings are what we use in python when working with words.&lt;/em&gt;&lt;/strong&gt; Strings are either enclosed with single quotes or double quotes.Also we can write multi line string using triple qutations(single and double both)&lt;br&gt;
So, we can use either single quotes or double quotes as long as we are consistant about which qutation we are using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_name = "Hello! I am mouly"
myy_name = 'Helloo! I am Mouly'
x = '''this is
a multi line 
string
that we can write'''
print(my_name)
print(myy_name)
print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello! I am mouly
Helloo! I am Mouly
this is
a multi line 
string
that we can write
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also make an &lt;strong&gt;&lt;em&gt;empty string&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = " "                                       #empty string
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can &lt;strong&gt;&lt;em&gt;concatenate&lt;/em&gt;&lt;/strong&gt; strings by using the plus(+) sign.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var1 = "we want"
var2 = "to visit a"
var3 = "zoo"
var =  var1 +" "+ var2 +" "+ var3             #concetenation of a string
print(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;we want to visit a zoo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice one thing, this + sign doesn't add any &lt;strong&gt;&lt;em&gt;space&lt;/em&gt;&lt;/strong&gt; while concatenating. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;type&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;this built-in fuction returns the type of an object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "alan walker"  
print(type(name))                             #type of name variable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;class 'str'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"                                      #this is a string
q = 5                                        #this is an integer
print(type(p))
print(type(q))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;class 'str'&amp;gt;
&amp;lt;class 'int'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though p and q might look same to you.. their types are different and there are different consequences for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"
q = 5
print(p)
print(q + 45)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
50
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"
q = 5
print(p + 45)                                 #this will give an error
print(q)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TypeError: can only concatenate str (not "int") to str
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here, p is a string. Even though 5 happens to look like a number, in python it's just a sequence of characters and we can't add a number to a sequence of characters.&lt;br&gt;
we can add them if we cast this p string into an integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"
q = 5
print(int(p) + 45))                          #this won't give an error
print(q)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;50
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"
print(p + "45")                              #string concetenation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;545
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call a int of float to cast a string it needs to be a valid number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "20 taka"
print(p + 25)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TypeError: can only concatenate str (not "int") to str
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, python can't convert this string into integer.&lt;/p&gt;

&lt;p&gt;Strings are sequential collection datatype.This means a string is actually a collection of single characters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Indexing&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can access a sub-string or part of a string using the indexing operator.&lt;br&gt;
This operator is handy for accessing a single character by it's position or &lt;strong&gt;&lt;em&gt;index value&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This index value for sequential collection datatypes always begins at &lt;strong&gt;&lt;em&gt;zero&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
For example, string with six character have entities from 0 through 5. So if we want to access a 5th character of a string we'll use an index of 4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xmple = "we want to access"
print(xmple[0])
print(xmple[2])   
print(xmple[8]) 
print(xmple[-1])                                 #negative indexing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;w

t
s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Positive indexing starts from 0 and from the right side while negative indexing starts from the left side,&lt;br&gt;
so we can access the last characters also by using negative indexing.&lt;br&gt;
Yess, the space also counts.&lt;br&gt;
the built-in function &lt;strong&gt;&lt;em&gt;len()&lt;/em&gt;&lt;/strong&gt; can help us determine the length of a string. So the last index of a stirng will always be &lt;strong&gt;&lt;em&gt;one less&lt;/em&gt;&lt;/strong&gt; than the length of that string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xmple = "we want to access"
print(len(xmple))                               #length of a string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to access last character of a string we can do either of them from below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xmple = "we want to access"
print(xmple[len(xmple)-1])
print(xmple[-1])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;e
e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Slice Operator&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another way of accessing characters in a stirng is to use the slice operator. This allows us to create a sub-string that is more than one character long.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Keep in mind&lt;/em&gt;&lt;/strong&gt; that, the slice operator leaves the original operator intact.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xmple = "we want to access"
print(xmple[1:9:1])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;e want t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example,the colon used in this slicing operator will return the characters from index 1 upto index 8(so not including index 9) and the increment will be 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Built-in methods&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;It's important to remember that, Python is immutable&lt;/em&gt;&lt;/strong&gt; means they can not be changed.&lt;/p&gt;

&lt;p&gt;Python has some built-in method to access or process characters in string.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;count method&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
we can use the count method to count the occurances of a particular substring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;place = "I want to visit USA"
print(place.count("i"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As python is &lt;strong&gt;&lt;em&gt;case-sensitive,&lt;/em&gt;&lt;/strong&gt; we can't access I here cause the ASCII value of I is different than i***&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;index method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;we can use the index method to find the index of the &lt;strong&gt;&lt;em&gt;first occurance&lt;/em&gt;&lt;/strong&gt; of a given substring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;place = "I want to visit USA"
print(place.index("i"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Upper and lower method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Upper returns the copy of a given string in all uppercase letters; while lower returns the copy of a given string in all lowercase letters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;place = "I want to visit USA"
print(place.upper())
print(place.lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I WANT TO VISIT USA
i want to visit usa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;upper or lower method takes no arguments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;strip method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;this strip method returns the copy of a string with the leading and trailing &lt;strong&gt;&lt;em&gt;whitespaces&lt;/em&gt;&lt;/strong&gt; removed.&lt;/p&gt;

&lt;p&gt;Whitespaces refers to any character that represents a space in text like a tab,a space or a new line character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new = "   Well this is another line   !     "       #Strips all whitespace characters from both ends.
print(new.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Well this is another line   !
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice, the whitespace between characters are not removed, only the leading and trailing whitespaces are removed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;split method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Split helps us breaking sentences of a string into more managable pieces.&lt;/p&gt;

&lt;p&gt;Split takes a &lt;strong&gt;&lt;em&gt;delimiter&lt;/em&gt;&lt;/strong&gt; and splits the string into sub-strings.The method returns a list where each item is a sub-string that is cut at every instance of that delimeter.&lt;/p&gt;

&lt;p&gt;For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;song = "Tell me why? Aint noting but a heartache. Tell me why? Aint noting but a mistake"
print(song.split("?"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Tell me why', ' Aint noting but a heartache. Tell me why', ' Aint noting but a mistake']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This output comes as a list&lt;br&gt;
Here "?" is the delimeter.. so It will cut in those places and won't return the delimeter in output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = "Library is a place where you can find peace"
print(x.split(" "))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Library', 'is', 'a', 'place', 'where', 'you', 'can', 'find', 'peace']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here my delimeter is a space. So the resulting list will include every word in that sentence but no spaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = "Library is a place where you can find peace"
print(x.split("a"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Libr', 'ry is ', ' pl', 'ce where you c', 'n find pe', 'ce']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the split method won't include the delimeter in the list it returns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;join method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The inverse of the split method is join. We can choose a desired separator string, (often called the glue) and join the list with the glue between each of the elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = ["*light blue?", "sky", "it's raining hard","colin, where you go","?*"]
y = "! "
p = y.join(x)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*light blue?! sky! it's raining hard! colin, where you go! ?*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use empty string or multi-character strings as glue.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>basics</category>
    </item>
    <item>
      <title>Public Solving: Calculating the wind chill</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 28 Dec 2021 06:02:06 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-calculating-the-wind-chill-9mc</link>
      <guid>https://dev.to/dailydevtips1/public-solving-calculating-the-wind-chill-9mc</guid>
      <description>&lt;p&gt;Santa's sled is pretty modern. Hey, we even upgraded it to have an &lt;a href="https://daily-dev-tips.com/posts/public-solving-making-an-autopilot-navigator/"&gt;autopilot&lt;/a&gt;.&lt;br&gt;
But now, the elves want to surprise Santa by adding a wind chill gauge.&lt;/p&gt;

&lt;p&gt;The wind chill is the "feel" temperature, you know when it's like 30 degrees, but it feels like 35?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-18"&gt;You can find the complete puzzle here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, we can use an already provided mathematical calculation which can be found &lt;a href="https://sciencing.com/calculate-wind-chill-factor-5981683.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The wind chill can be calculated for English and Metric values.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thinking-about-the-solution"&gt;
  &lt;/a&gt;
  Thinking about the solution
&lt;/h2&gt;

&lt;p&gt;The main thing we have to achieve today is to actually make the formula in JavaScript.&lt;br&gt;
This should be a pretty straightforward process.&lt;/p&gt;

&lt;p&gt;The formula for English units looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.6215&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="err"&gt;‚Äì&lt;/span&gt; &lt;span class="mf"&gt;35.75&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.4275&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;T&lt;/code&gt; = Temperature in degrees Fahrenheit and &lt;code&gt;V&lt;/code&gt; = wind speed in miles per hour.&lt;/p&gt;

&lt;p&gt;In JavaScript this should look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.6215&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;35.75&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.4275&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you note the &lt;code&gt;(V^0.16)&lt;/code&gt; exponent? We can use &lt;code&gt;Math.pow&lt;/code&gt; or the shortcut &lt;code&gt;**&lt;/code&gt; for that.&lt;/p&gt;

&lt;p&gt;Then we can simply wrap this in a &lt;code&gt;Math.round&lt;/code&gt; to get the rounded number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="mf"&gt;0.6215&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
    &lt;span class="mf"&gt;35.75&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="mf"&gt;0.4275&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we also need a way to calculate the metric version.&lt;/p&gt;

&lt;p&gt;I decided to just catch and return the English units beforehand.&lt;/p&gt;

&lt;p&gt;And if that didn't hit, surely it must be the metric version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;units&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="mf"&gt;0.6215&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
        &lt;span class="mf"&gt;35.75&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="mf"&gt;0.4275&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mf"&gt;13.12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="mf"&gt;0.6215&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
      &lt;span class="mf"&gt;11.37&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="mf"&gt;0.3965&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! We solved the issue.&lt;/p&gt;

&lt;p&gt;Let's try it out and see if our test turns green.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hu8MrfZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639835530374/FAKl-22B2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hu8MrfZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639835530374/FAKl-22B2.png" alt="Wind chill test in JavaScript turning green" width="634" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Would love to hear what you would do differently to solve this problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Reverse HTTP proxy over WebSocket in Go (Part 4)</title>
      <author>Kazuki Higashiguchi</author>
      <pubDate>Tue, 28 Dec 2021 06:01:33 +0000</pubDate>
      <link>https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c</link>
      <guid>https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#series-introduction"&gt;
  &lt;/a&gt;
  Series introduction
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;part 3&lt;/a&gt; I talked about how to relay TCP connection from "App" to the peer of WebSocket, especially implementation to receive requests to be proxied and to pool the WebSocket connection on the server for relaying in Go.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Reverse HTTP proxy over WebSocket in Go (Part 3)&lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi „Éª Dec 16 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#websocket&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In this post, I will be starting to talk about how to relay TCP connection from "App" to the peer of WebSocket in Go.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start a WebSocket server (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-1-13n4"&gt;Part 1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Establish a WebSocket connection (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-2-o4a"&gt;Part 2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Relay TCP connection from "App" to the peer of WebSocket (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;Part 3&lt;/a&gt; | &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-213i-temp-slug-1615861"&gt;Part 4&lt;/a&gt; | Part 5)&lt;/li&gt;
&lt;li&gt;Relay TCP connection in WebSocket data to "internal API"&lt;/li&gt;
&lt;li&gt;Keep a established connection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reverse-http-proxy-over-websocket"&gt;
  &lt;/a&gt;
  Reverse HTTP proxy over WebSocket
&lt;/h2&gt;

&lt;p&gt;A reverse HTTP proxy over WebSocket is a type of proxies, which retrieves resources on behalf on a client from servers and uses the WebSocket protocol as a "tunnel" to pass TCP communication from server to client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46eqlV8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iupaoeq283lyeqpkg049.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46eqlV8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iupaoeq283lyeqpkg049.png" alt="A network diagram for reverse proxy over WebSocket" width="681" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll introduce Go sample project forked from &lt;a href="https://github.com/root-gg/wsp"&gt;root-gg/wsp&lt;/a&gt; (I forked it because maintenance has stopped and the Go language and libraries version needed to be updated).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hgsgtk"&gt;
        hgsgtk
      &lt;/a&gt; / &lt;a href="https://github.com/hgsgtk/wsp"&gt;
        wsp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      HTTP tunnel over Websocket
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#relay-tcp-connection-to-the-peer-websocket"&gt;
  &lt;/a&gt;
  Relay TCP connection to the peer WebSocket
&lt;/h2&gt;

&lt;p&gt;A reverse HTTP proxy over WebSocket relay TCP connection to the peer WebSocket over the WebSocket connection. &lt;/p&gt;

&lt;p&gt;HTTP communication is relayed by the following route.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app -[1]-&amp;gt; wsp server -[2](WebSocket)-&amp;gt; wsp client -&amp;gt; internal API
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;And, these flow are divided into three parts to explain it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Receive requests to be proxied (&lt;code&gt;[1]&lt;/code&gt; in the relay flow)&lt;/li&gt;
&lt;li&gt;Pool the WebSocket connection on the server for relaying&lt;/li&gt;
&lt;li&gt;Relay TCP connection to the peer WebSocket (&lt;code&gt;[2]&lt;/code&gt; in the relay flow)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I explained the 1st and 2nd flow in &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;part 3&lt;/a&gt;, so let's move on the 3rd flow.&lt;/p&gt;

&lt;p&gt;Let's take a look at the continuation of the previous &lt;a href="https://github.com/hgsgtk/wsp/blob/8d7d7b4eb6aa700950c41756608177514b935507/server/server.go#L189"&gt;HTTP handler code&lt;/a&gt;, which waits the request from "app" to the endpoint &lt;code&gt;/requests/&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit): [1]: Receive requests to be proxied&lt;/span&gt;

    &lt;span class="c"&gt;// [2]: Take a WebSocket connection available from pools for relaying received requests.&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewConnectionRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c"&gt;// "Dispatcher" is running in a separate thread from the server by `go s.dispatchConnections()`.&lt;/span&gt;
    &lt;span class="c"&gt;// It waits to receive requests to dispatch connection from available pools to clients requests.&lt;/span&gt;
    &lt;span class="c"&gt;// https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L93&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Notify request from handler to dispatcher through Server.dispatcher channel.&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
    &lt;span class="c"&gt;// Dispatcher tries to find an available connection pool,&lt;/span&gt;
    &lt;span class="c"&gt;// and it returns the connection through Server.connection channel.&lt;/span&gt;
    &lt;span class="c"&gt;// https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L189&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Here waiting for a result from dispatcher.&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// It means that dispatcher has set `nil` which is a system error case that is&lt;/span&gt;
        &lt;span class="c"&gt;// not expected in the normal flow.&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// [3]: Send the request to the peer through the WebSocket connection.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// An error occurred throw the connection away&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;// Try to return an error to the client&lt;/span&gt;
        &lt;span class="c"&gt;// This might fail if response headers have already been sent&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In brief, the following process is performed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take a WebSocket connection available from pools for relaying received requests&lt;/li&gt;
&lt;li&gt;Send the request to the peer through the WebSocket connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll explain the one by one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#take-a-websocket-connection-available-from-pools-for-relaying-received-requests"&gt;
  &lt;/a&gt;
  Take a WebSocket connection available from pools for relaying received requests
&lt;/h2&gt;

&lt;p&gt;As a pre-requisite, we will start with WebSocket connection already established with the WebSocket client (&lt;code&gt;wsp_client&lt;/code&gt;) and held by the server as a pool (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;Chapter 2&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// - 1. Upgrade a received HTTP request to a WebSocket connection&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="c"&gt;// - 2. Wait a greeting message from the peer and parse it&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// 3. Register the connection into server pools.&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="c"&gt;// Add the WebSocket connection to the pool&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There are several possible designs for retrieving the connection from the pools, and I'll explain the pattern of using multiple threads. Specifically, there are two threads running: "Server", which accepts http requests, and "Dispatcher", which dispatches connections from the pools to be used to relay. Here is &lt;a href="https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L93"&gt;the Go code&lt;/a&gt; to start "Server" and "Dispatcher" that will be called from the main function.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)...&lt;/span&gt;

    &lt;span class="c"&gt;// start the "Dispatcher"&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatchConnections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// start the "Server"&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAddr&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;}()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://go.dev/ref/spec#Go_statements"&gt;go&lt;/a&gt; statement starts the execution of a function call as an independent concurrent thread of control, or goroutine, within the same the address space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIcxR0Ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivlo56namrbjratgod7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIcxR0Ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivlo56namrbjratgod7z.png" alt="A diagram describing two threads in wsp_server" width="862" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move on the implementation of &lt;a href="https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L189"&gt;dispatchConnections&lt;/a&gt; function that starts a "dispatcher" thread.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// Through dispatcher channel it communicates between "server" thread and "dispatcher" thread.&lt;/span&gt;
    &lt;span class="c"&gt;// "server" thread sends the value to this channel when accepting requests in the endpoint /requests, &lt;/span&gt;
    &lt;span class="c"&gt;// and "dispatcher" thread reads this channel.&lt;/span&gt;
    &lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ConnectionRequest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dispatchConnections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;//  The operator &amp;lt;- is "receive operator", which expression blocks until a value is available.&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// The value of `ok` is false if it is a zero value generated because the channel is closed an empty.&lt;/span&gt;
            &lt;span class="c"&gt;// In this case, that means server shutdowns.           break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// (omit)...&lt;/span&gt;

            &lt;span class="c"&gt;// Verify that we can use this connection&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// (omit)...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The type of the field &lt;code&gt;dispatcher&lt;/code&gt; in the &lt;code&gt;Server&lt;/code&gt; structure is &lt;a href="https://go.dev/ref/spec#Channel_types"&gt;channel&lt;/a&gt;. Channel types provide a mechanism for concurrently executing functions to communicate by sending and receiving values of a specified element type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0cBJ2NO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v117tv59ad82h6bxvadt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cBJ2NO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v117tv59ad82h6bxvadt.png" alt="A diagram describing how dispatcher channel is used" width="880" height="537"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The operator &lt;code&gt;x, ok := &amp;lt;-ch&lt;/code&gt; is &lt;a href="https://go.dev/ref/spec#Receive_operator"&gt;receiver operator&lt;/a&gt;. The value of the receive operation &lt;code&gt;&amp;lt;-s.dispatcher&lt;/code&gt; is the value received from the channel &lt;code&gt;s.dispatcher&lt;/code&gt;. Also, the expression &lt;code&gt;&amp;lt;-&lt;/code&gt; blocks until a value is available, so waits until a connection request is sent by "Server" thread.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;ok&lt;/code&gt; is false if it is a zero value generated because the channel is closed or empty. In this case, that means server shutdowns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPqgTALN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aacxr03gw3qo752gx3bs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPqgTALN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aacxr03gw3qo752gx3bs.png" alt="A diagram describing how dispatcher channel is used" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, the &lt;code&gt;/request/&lt;/code&gt; handler on the "Server" tread sends a value to this channel.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit): [1]: Receive requests to be proxied&lt;/span&gt;

    &lt;span class="c"&gt;// Here! Sends a value to dispatcher channel&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewConnectionRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The operator &lt;code&gt;ch &amp;lt;- x&lt;/code&gt; is &lt;a href="https://go.dev/ref/spec#Send_operator"&gt;send statements&lt;/a&gt;, which sends a value on a channel. Here it sends the request to the &lt;code&gt;dispatcher&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;By the way, the type of variable &lt;code&gt;request&lt;/code&gt; is &lt;a href="https://github.com/hgsgtk/wsp/blob/9d5deef64b859d74f58218c310069a965e658ec9/server/server.go#L51"&gt;ConnectionRequest&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ConnectionRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After sending the value to the &lt;code&gt;s.dispatcher&lt;/code&gt; channel, it waits to be available to get the value in the &lt;code&gt;request.connection&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQJfsGht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buoin8b4n1pvx8md300y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQJfsGht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buoin8b4n1pvx8md300y.png" alt="A diagram describing how connection channel is used" width="880" height="706"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

    &lt;span class="c"&gt;// Here!&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, let's look at the "Dispatcher" thread.&lt;/p&gt;

&lt;p&gt;To summarize, "Server" thread sends the value to this channel when accepting requests in the endpoint /requests, and "dispatcher" thread reads this channel.&lt;/p&gt;

&lt;p&gt;Let's move on the implementation of &lt;a href="https://github.com/hgsgtk/wsp/blob/9d5deef64b859d74f58218c310069a965e658ec9/server/server.go#L140"&gt;dispatchConnections&lt;/a&gt; function that starts a "dispatcher" thread.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// Through dispatcher channel it communicates between "server" thread and "dispatcher" thread.&lt;/span&gt;
    &lt;span class="c"&gt;// "server" thread sends the value to this channel when accepting requests in the endpoint /requests, &lt;/span&gt;
    &lt;span class="c"&gt;// and "dispatcher" thread reads this channel.&lt;/span&gt;
    &lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ConnectionRequest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dispatchConnections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Runs in an infinite loop and keeps receiving the value from the `server.dispatcher` channel&lt;/span&gt;
        &lt;span class="c"&gt;// The operator &amp;lt;- is "receive operator", which expression blocks until a value is available.&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// The value of `ok` is false if it is a zero value generated because the channel is closed an empty.&lt;/span&gt;
            &lt;span class="c"&gt;// In this case, that means server shutdowns.&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// A timeout is set for each dispatch request.&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;// The timeout elapses&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;// Go through&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// No connection pool available&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RUnlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c"&gt;// [1]: Select a pool which has an idle connection&lt;/span&gt;
            &lt;span class="c"&gt;// Build a select statement dynamically to handle an arbitrary number of pools.&lt;/span&gt;
            &lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectRecv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;Chan&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectDefault&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RUnlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="c"&gt;// a pool has been removed, try again&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;// [2]: Verify that we can use this connection and take it.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;First, dispatchConnections runs in an infinite loop and keeps receiving the value from the &lt;code&gt;server.dispatcher&lt;/code&gt; channel.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The next step is to set the timeout, if no idle connection is obtained after a predetermined time, the channel will be closed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// A timeout is set for each dispatch request.&lt;/span&gt;
&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;// The timeout elapses&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;// Go through&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When the channel is closed, a receive operation on a closed channel can always proceed immediately, yielding the element type's zero value after any previously sent values have been received (See &lt;a href="https://go.dev/ref/spec#Receive_operator"&gt;The Go Programming Language Specification#Receive operator&lt;/a&gt; more detail). In this case, the "Server" thread waits to receive the value, and will get nil from request.connection channel, so the "Server" will return the error response.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

    &lt;span class="c"&gt;// Here!&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Also, if you want to know more about timeout using the context package, please refer to the following post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/timeout-using-context-package-in-go-1b3c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Timeout using context package in Go&lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi „Éª Dec 28 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Then, Select a pool which has an idle connection by building a select statement dynamically to handle an arbitrary number of pools.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectRecv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Chan&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectDefault&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RUnlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="c"&gt;// a pool has been removed, try again&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pkg.go.dev/reflect#Select"&gt;reflect.Select&lt;/a&gt; allows us to receive a variable number of channels. See the following post for more information.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/handling-with-arbitrary-channels-by-reflectselect-4d5g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Handling with arbitrary channels by reflect.Select &lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi „Éª Dec 28 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Lastly, Verify that we can use this connection and take it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;connection.Take&lt;/code&gt; verify the status of connection whether it's available one or not, then if it's available one, mark it busy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRp7vnEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4hv4vrgexyuta605s7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRp7vnEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4hv4vrgexyuta605s7w.png" alt="A diagram describing how connection channel is used" width="880" height="716"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it to take a WebSocket connection available from pools for relaying received requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Following &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;part 3&lt;/a&gt;, I explained how to relay TCP connection from "App" to the peer of WebSocket. Especially, I focused on the way to take a WebSocket connection available from pools for relaying received requests.&lt;/p&gt;

&lt;p&gt;In part 5, I'll explain how to send the request to the peer through the WebSocket connection.&lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>websocket</category>
    </item>
  </channel>
</rss>
