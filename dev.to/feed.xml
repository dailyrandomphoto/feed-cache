<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is Nix and how to use it?</title>
      <author>Catherine Galkina</author>
      <pubDate>Mon, 19 Apr 2021 13:48:15 +0000</pubDate>
      <link>https://dev.to/typeable/what-is-nix-and-how-to-use-it-1iff</link>
      <guid>https://dev.to/typeable/what-is-nix-and-how-to-use-it-1iff</guid>
      <description>&lt;p&gt;Author: Nick Sigulya&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQvWaC7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/nix/nix1_en.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQvWaC7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/nix/nix1_en.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here at Typeable, we wanted to publish a small series of posts about the way Nix helps us (and slightly hinders) in software development. We would like to start with an introduction to Nix which we might refer to further on.&lt;/p&gt;

&lt;p&gt;You can find the files for this post &lt;a href="https://github.com/typeable/blog-posts-ru/tree/main/Nix_Intro"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-get-it"&gt;
  &lt;/a&gt;
  Where to get it?
&lt;/h2&gt;

&lt;p&gt;Apart from NixOS, where you don’t need to do anything, Nix can be installed on any (or almost any) Linux distribution. To this end, you just have to run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sh &amp;lt;(curl -L https://nixos.org/nix/install)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, the installation script will do everything on its own. The recent changes in MacOS have made the installation more difficult. Before the changes, the above-mentioned command was sufficient. You can read about the installation on the latest MacOS versions &lt;a href="https://nixos.org/manual/nix/stable/#sect-macos-installation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nix-language"&gt;
  &lt;/a&gt;
  The Nix language
&lt;/h2&gt;

&lt;p&gt;When you speak about Nix, you often imply two different entities: Nix as a language and nixpkgs as the package repository also constituting the basis of NixOS. Let’s start with the first one.&lt;/p&gt;

&lt;p&gt;Nix is a lazy functional language with dynamic typing. The syntax looks much like the languages of the ML family (SML, OCaml, Haskell), which is why those who know them are not likely to face any issues.&lt;/p&gt;

&lt;p&gt;You can start getting familiar with the language simply by running the interpreter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nix repl
Welcome to Nix version 2.3.10. Type :? for help.

nix-repl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is no special syntax used to declare the functions in Nix. The functions are defined by assigning, similarly to other values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nix-repl&amp;gt; "Hello " + "World!"
"Hello World!"

nix-repl&amp;gt; add = a: b: a + b

nix-repl&amp;gt; add 1 2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All functions are curried, in the same way as in the languages which have influenced Nix.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nix-repl&amp;gt; addOne = add 1

nix-repl&amp;gt; addOne 3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the primitive types such as numbers and lines, Nix supports the lists and dictionaries (attribute sets in the Nix terminology).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nix-repl&amp;gt; list = [ 1 2 3 ]

nix-repl&amp;gt; set = { a = 1; b = list; }

nix-repl&amp;gt; set
{ a = 1; b = [ ... ]; }

nix-repl&amp;gt; set.b
[ 1 2 3 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The values within the local scope can be set using the expression &lt;code&gt;let...in&lt;/code&gt;. For example, here is a simple function implementing a factorial, as it is usually done in other posts on functional programming.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fac.nix&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let
  fac = n:
    if n == 0
    then 1
    else n * fac (n - 1);
in { inherit fac; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Directive &lt;code&gt;inherit&lt;/code&gt; introduces or "inherits" the term from the current scope and gives it the same name. The example above is equivalent to the record &lt;code&gt;let fac = ... in { fac = fac; }&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nix repl fac.nix
Welcome to Nix version 2.3.10. Type :? for help.

Loading 'fac.nix'...
Added 1 variables.

nix-repl&amp;gt; fac 3
6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When files or modules are uploaded to REPL, Nix expects that the module computation will result in a set whose elements will be imported in the current scope.&lt;/p&gt;

&lt;p&gt;To download the code from other files, Nix uses the function &lt;code&gt;import&lt;/code&gt; accepting the path to the code file and returning the result of this code.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mul.nix&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let
  mul = a: b: a * b;
in { inherit mul; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;New &lt;code&gt;fac.nix&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let
  multMod = import ./mul.nix;
  fac = n:
    if n == 0
    then 1
    else multMod.mul n (fac (n - 1));
in { inherit fac; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Though assigning the module to an individual variable is done rather often, it looks somewhat awkward here, doesn’t it? Nix includes the &lt;code&gt;with&lt;/code&gt; directive adding all names from the set passed as the parameter to the current scope.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fac.nix&lt;/code&gt; using &lt;code&gt;with&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;with import ./mul.nix;
let
  fac = n:
    if n == 0
    then 1
    else mul n (fac (n - 1));
in { inherit fac; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-programs"&gt;
  &lt;/a&gt;
  Building programs
&lt;/h2&gt;

&lt;p&gt;Building programs and individual components is the main function of the Nix language.&lt;/p&gt;

&lt;p&gt;When working with packages, the main tool you should know about is &lt;code&gt;Derivation&lt;/code&gt;. In itself, &lt;code&gt;Derivation&lt;/code&gt; is a special file containing the recipe for a machine-readable build. The derivation compiling a program in C that displays "Hello World!” looks approximately as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Derive([("out","/nix/store/1nq46fyv3629slgxnagqn2c01skp7xrq-hello-world","","")],[("/nix/store/60xqp516mkfhf31n6ycyvxppcknb2dwr-build-hello.drv",["out"])],["/nix/store/wiviq2xyz0ylhl0qcgfgl9221nkvvxfj-hello.c"],"x86_64-linux","/nix/store/r5lh8zg768swlm9hxxfrf9j8gwyadi72-build-hello",[],[("builder","/nix/store/r5lh8zg768swlm9hxxfrf9j8gwyadi72-build-hello"),("name","hello-world"),("out","/nix/store/1nq46fyv3629slgxnagqn2c01skp7xrq-hello-world"),("src","/nix/store/wiviq2xyz0ylhl0qcgfgl9221nkvvxfj-hello.c"),("system","x86_64-linux")])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, this expression includes the path to the resulting build and the paths to the source files, build script, and metadata: the project name and platform. It should also be noted that the paths to the source code start with &lt;code&gt;/nix/store&lt;/code&gt;. During the build, Nix copies everything it needs to this directory. After that, the build is carried out in an isolated environment (sandbox). Thus, the reproducibility of all package builds is achieved.&lt;/p&gt;

&lt;p&gt;Surely, it’s insanity to write this manually! For simple cases, Nix offers the built-in &lt;code&gt;derivation&lt;/code&gt; function accepting the build description.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;simple-derivation/default.nix&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ pkgs ? import &amp;lt;nixpkgs&amp;gt; {} }:

derivation {
  name = "hello-world";
  builder = pkgs.writeShellScript "build-hello" ''
    ${pkgs.coreutils}/bin/mkdir -p $out/bin
    ${pkgs.gcc}/bin/gcc $src -o $out/bin/hello -O2
  '';
  src = ./hello.c;
  system = builtins.currentSystem;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s analyze this example. The entire file is the definition of the function accepting one parameter – the dictionary containing the &lt;code&gt;pkgs&lt;/code&gt; field. If it was not passed during the function call, the default value will be used: &lt;code&gt;import &amp;lt;nixpkgs&amp;gt; {}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;derivation&lt;/code&gt; is the function also accepting the dictionary with the build parameters: The &lt;code&gt;name&lt;/code&gt; is the package name, the &lt;code&gt;builder&lt;/code&gt; is the build script, the &lt;code&gt;src&lt;/code&gt; is the source code, the &lt;code&gt;system&lt;/code&gt; is the system or list of systems the package can be built for.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;writeShellScript&lt;/code&gt; is one of the &lt;code&gt;nixpkgs&lt;/code&gt; functions accepting the script name and code and returning the executable file path. For multiline text, Nix offers an alternative syntax with two pairs of single quotes.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;nix build&lt;/code&gt; command you can run this build recipe and obtain a working binary file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nix build -f ./simple-derivation/default.nix
[1 built]

$ ./result/bin/hello
Hello World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run &lt;code&gt;nix build&lt;/code&gt;, the symbolic link &lt;code&gt;result&lt;/code&gt; referring to the package created in the &lt;code&gt;/nix/store&lt;/code&gt; will be generated in the current directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls -l result
lrwxrwxrwx 1 user users 50 Mar 29 17:53 result -&amp;gt; /nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple

$ find /nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple
/nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple
/nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple/bin
/nix/store/vpcddray35g2jrv40dg1809xrmz73awi-simple/bin/hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-programs-advanced-version"&gt;
  &lt;/a&gt;
  Building programs, advanced version
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;derivation&lt;/code&gt; is the fairly low-level function Nix uses as the basis for far more powerful primitives. As an example, we can consider the build of the well-known &lt;code&gt;cowsay&lt;/code&gt; utility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ lib, stdenv, fetchurl, perl }:

stdenv.mkDerivation rec {
  version = "3.03+dfsg2";
  pname = "cowsay";

  src = fetchurl {
    url = "http://http.debian.net/debian/pool/main/c/cowsay/cowsay_${version}.orig.tar.gz";
    sha256 = "0ghqnkp8njc3wyqx4mlg0qv0v0pc996x2nbyhqhz66bbgmf9d29v";
  };

  buildInputs = [ perl ];

  postBuild = ''
    substituteInPlace cowsay --replace "%BANGPERL%" "!${perl}/bin/perl" \
      --replace "%PREFIX%" "$out"
  '';

  installPhase = ''
    mkdir -p $out/{bin,man/man1,share/cows}
    install -m755 cowsay $out/bin/cowsay
    ln -s cowsay $out/bin/cowthink
    install -m644 cowsay.1 $out/man/man1/cowsay.1
    ln -s cowsay.1 $out/man/man1/cowthink.1
    install -m644 cows/* -t $out/share/cows/
  '';

  meta = with lib; {
    description = "A program which generates ASCII pictures of a cow with a message";
    homepage = "https://en.wikipedia.org/wiki/Cowsay";
    license = licenses.gpl1;
    platforms = platforms.all;
    maintainers = [ maintainers.rob ];
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The original script can be found &lt;a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/tools/misc/cowsay/default.nix"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stdenv&lt;/code&gt; is a special &lt;code&gt;derivation&lt;/code&gt; containing the build rules for the current system: the required compiler, flags, and other parameters. Its main content is the huge Bash script named &lt;code&gt;setup&lt;/code&gt; working as the &lt;code&gt;builder&lt;/code&gt; script in our simple example shown above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; $ nix build nixpkgs.stdenv

 $ find result/
result/
result/setup
result/nix-support

$ wc -l result/setup
1330 result/setup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mkDerivation&lt;/code&gt; is the function creating the &lt;code&gt;derivation&lt;/code&gt; with this script and simultaneously filling out other fields.&lt;/p&gt;

&lt;p&gt;Those readers who used to write package build scripts in Arch Linux or Gentoo might see a pretty familiar structure here. Just as in other distributions, the build is broken down into phases, dependencies enumeration is available (&lt;code&gt;buildInputs&lt;/code&gt;), and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this part, I’ve tried to describe the most basic aspects of using Nix as the build description language. In the next posts, I’m going to show you the ways we use Nix at Typeable and the ways you’d better not use it. Stay tuned!&lt;/p&gt;

&lt;p&gt;Besides, a far more detailed introduction to Nix is published on the website of the project itself under the name of &lt;a href="https://nixos.org/guides/nix-pills/"&gt;Nix pills&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nix</category>
      <category>package</category>
      <category>tutorial</category>
      <category>build</category>
    </item>
    <item>
      <title>Don't underestimate development time.</title>
      <author>Moemin Mamdouh 👨‍💻</author>
      <pubDate>Mon, 19 Apr 2021 13:36:54 +0000</pubDate>
      <link>https://dev.to/mamdouhmoemin/don-t-underestimate-development-time-1dgg</link>
      <guid>https://dev.to/mamdouhmoemin/don-t-underestimate-development-time-1dgg</guid>
      <description>&lt;p&gt;Hi there, dev.to! 👋&lt;/p&gt;

&lt;p&gt;I was supposed to launch my side project 20 days ago. I think you can see where i'm going with this, but long story short, i'm falling short of that promise. &lt;/p&gt;

&lt;p&gt;A little background: I'm a designer who's working on a side project with a developer friend. We started around early February and estimated that we would be able to launch by the end of March. &lt;/p&gt;

&lt;p&gt;Everything was going great, we wrapped up development and pushed to Netlify to test it out with a few users who have signed up to our waitlist. &lt;em&gt;Except:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1- We use Github login, we completely forgot the permissions to be read-only. Lots of users pointed that out.&lt;/p&gt;

&lt;p&gt;2- Edge cases for subscriptions were not handled properly. &lt;/p&gt;

&lt;p&gt;3- Some edge cases for our downloadable templates required design modification, so back to the drawing board we went.&lt;/p&gt;

&lt;p&gt;4- Some of the templates were missing files (woops).&lt;/p&gt;

&lt;p&gt;5- Solutions/comments showed the wrong timestamps. &lt;/p&gt;

&lt;p&gt;There's a ton of bugs that showed up during early user testing which if you think about it, isn't that bad. We avoided what could have been a disaster if we launched. &lt;/p&gt;

&lt;p&gt;The point is, we thought if we wrap up development, that's the project. User testing was always going to be after we launch and receive feedback from &lt;em&gt;actual users&lt;/em&gt;, thankfully we did not go that route and it ended up to our advantage, but it's back to development for us.&lt;/p&gt;

&lt;p&gt;I'm building this project in public on &lt;a href="https://twitter.com/MamdouhMoemin"&gt;Twitter&lt;/a&gt; if you'd like to follow me on the journey :) &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Why QA is so important in your development process?</title>
      <author>Carmen Amengual</author>
      <pubDate>Mon, 19 Apr 2021 13:18:52 +0000</pubDate>
      <link>https://dev.to/carmenqa/why-qa-is-so-important-in-your-development-process-4ecg</link>
      <guid>https://dev.to/carmenqa/why-qa-is-so-important-in-your-development-process-4ecg</guid>
      <description>&lt;p&gt;This shouldn't be a question, and probably everyone in the software world should know the answer, but (there's always a but) not everyone does.&lt;/p&gt;

&lt;p&gt;In this article, I will mention why I consider that a QA team is important in any software company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-one-test-a-day-keeps-the-bugs-away"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. "One test a day keeps the bugs away"&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Yes, as you read it, I have used the phrase of the apple, but because it is 100% applicable to what I want to say.&lt;br&gt;
A test in time prevents a disaster in the future, perhaps not all software companies have a QA team because they start from the logic that, "why are we going to pay a person to verify that things work if we have developers that they can test what they do? ", and the truth is that the developers are not able to judge the masterpiece that maybe took days to make, they need an extra pair of eyes to help them see that their masterpiece is not yet ready to be exhibited, and don't get me wrong, our job is precisely to help developers to make their work perfect and also for the user to have a nice experience in mobile apps or web apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-it-is-better-to-have-a-qa-team-and-not-need-it-than-need-it-and-not-have-it"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. It is better to have a QA team and not need it than need it and not have it&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It sounds like a slogan for an insurance company, but it is a fact, having a quality team guarantees that your products or features, come out ready to use and you may not need them in some moments, but it is always better to know that a group of people is there for taking a look at the app before you decide to put anything into production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-we-test-because-we-care"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. We test because we care&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;I do not know of any quality course or workshop that does not mention how important it is to think like a user, because our main objective will always be the user, and that the company does not have great losses due to errors that could be prevented in time. so yes we test because we care.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-test-is-the-key-for-a-better-release"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. The test is the key for a better release&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Just as companies that make skincare products do many tests before saying that a product is ready to go on the market, we also do many tests before saying yes to a release, precisely because we worry about everything coming out, we do a series of tests to check that everything is ready for the release works as expected and that there are no surprises later that can cost millions.&lt;/p&gt;




&lt;p&gt;Well, I think I have made my points clear, and I hope nothing escapes me because if so, that would speak very badly of me as a tester.&lt;/p&gt;

&lt;p&gt;Remember " QA´s are friends not enemies".&lt;br&gt;
&lt;a href="https://i.giphy.com/media/Le5eHA05wkYCs/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Le5eHA05wkYCs/giphy.gif" alt="nemorefference"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to promote myself( because if I don't do it, who will?):&lt;br&gt;
you can follow me on my Instagram &lt;a href="https://www.instagram.com/mela.qa/"&gt;@mela.qa&lt;/a&gt;, for some QA content.&lt;br&gt;
And if you want to help a tester to survive a pre-release night feel free to &lt;a href="https://www.buymeacoffee.com/melaq"&gt;buy me a coffee&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>healthydebate</category>
      <category>motivation</category>
      <category>testing</category>
    </item>
    <item>
      <title>EC2インスタンス作成時にホスト名変更＆AD参加する（UserData編）</title>
      <author>ryanc</author>
      <pubDate>Mon, 19 Apr 2021 13:18:48 +0000</pubDate>
      <link>https://dev.to/ryanch79/ec2-ad-userdata-19k6</link>
      <guid>https://dev.to/ryanch79/ec2-ad-userdata-19k6</guid>
      <description>&lt;p&gt;検証環境でWindows Serverをたくさんたてるのだが、&lt;br&gt;
①（AWS Managed ADではない）ADに参加&lt;br&gt;
②ホスト名を、自分がつけたNameタグの値に揃える&lt;br&gt;
これはだいたい必ずやる。②に関しては、自動的につけられるランダムなホスト名だと分かりづらいので早々に自分がつけたい名前にしておきたいという意図。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
これを一々手動でやるのはとても面倒なので（再起動も発生するし）、もちろん自動化したい。自動化する方法は色々あるが、今回は一番原始的（？）UserDataスクリプトを利用する方法を使ってみる。&lt;/p&gt;

&lt;p&gt;ちなみにUserDataスクリプトはインスタンス作成時の一回しか実行されないので、少々柔軟性にかけるし、何かしらの問題でスクリプト実行が失敗したら手動で直さないといけない。とはいえアドホックでやるには簡単な方法だし楽な場合もある。&lt;/p&gt;

&lt;p&gt;AWS Managed ADを使う場合は、インスタンス作成時に簡単に指定できちゃうのだが、EC2上に構築したADや、オンプレのAD等の場合はこういう方法を使う必要がある。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
ドメイン参加にはその権限を持ったドメインアカウントが必要なのだが、その認証情報をスクリプトにハードコードしたくはないのでSecrets Managerを使うとしよう。&lt;/p&gt;

&lt;p&gt;「その他シークレット」のタイプで作成。&lt;br&gt;
参加するドメインは&lt;code&gt;onprem.example.com&lt;/code&gt;という設定だ。&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhiDsxh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epbervqypq4rcsvq10n7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhiDsxh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epbervqypq4rcsvq10n7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;こんな感じでドメインアカウントのユーザー名とパスワードを設定しておく（もちろん、コンピュータをドメイン参加させる権限のあるアカウントを使ってね）。 &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzE2Cc5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h551iospq3not6ty3sif.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzE2Cc5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h551iospq3not6ty3sif.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;onprem.example.com/DomainJoin&lt;/code&gt;という名前でシークレットを作成した。 &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ua1Flobi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ne6ktw8q2wb4fwb0nhov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ua1Flobi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ne6ktw8q2wb4fwb0nhov.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
ここから先は、EC2インスタンスプロファイル（IAMロール）にこの2つの権限が必要になってくる。&lt;br&gt;
①さきほど作成したシークレット&lt;code&gt;onprem.example.com/DomainJoin&lt;/code&gt;を読み取る権限&lt;br&gt;
②EC2のタグを読み取る権限（Nameタグの値を読み取って、ホスト名に使う必要があるので）&lt;/p&gt;

&lt;p&gt;こんな感じのポリシーを最低限追加しておく必要あり。&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"Statement": [
        {
            "Sid": "ReadTag",
            "Effect": "Allow",
            "Action": "ec2:DescribeTags",
            "Resource": "*"
        },
        {
            "Sid": "SecretsMgrRead",
            "Effect": "Allow",
            "Action": [
                "secretsmanager:GetSecretValue"
            ],
            "Resource": "arn:aws:secretsmanager:&amp;lt;リージョン&amp;gt;:&amp;lt;AWSアカウント番号&amp;gt;:secret:onprem.example.com/DomainJoin-tewFSS"
        }
    ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;secretsmanager:GetSecretValue&lt;/code&gt;アクションの権限で指定する&lt;code&gt;Resource&lt;/code&gt;の値は、さきほど作成したシークレットのARNを代入する。Secrets Managerで簡単に確認できる。&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LTTa9_lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2n2g6nzp67d3fwmrjzwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LTTa9_lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2n2g6nzp67d3fwmrjzwb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
これで準備が揃ったので、こういうスクリプトをUserDataに貼り付けて、Windows ServerのEC2インスタンスをたてる。&lt;br&gt;
※AWS Tools for PowerShellを使うので、Amazonが提供する標準Windows ServerのAMIを使っていることを想定。自前のAMIを使うのであれば、AWS Tools for PowerShellをイメージにあらかじめ入れておく必要あり。&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;powershell&amp;gt;
# ドメイン名とシークレット名を定義
$domainName = "onprem.example.com"
$secretName = "onprem.example.com/DomainJoin"

# シークレットの値をとってくる
$secretManager = Get-SECSecretValue -SecretId $secretName

# シークレットの値をオブジェクトに入れる
$secret = $secretManager.SecretString | ConvertFrom-Json

# ドメイン参加用認証情報を作成
$username = $domainName + "\" + $secret.Account
$password = $secret.Password | ConvertTo-SecureString -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential($username,$password)

# EC2インスタンスメタデータからインスタンスIDを取得し、続けてNameタグを取得
$instanceID = Get-EC2InstanceMetadata -Category InstanceId
$nameTag = Get-EC2Tag -Filter @{Name="resource-id";Value="$instanceID"},@{Name="key";Value="Name"}
$newName = $nameTag.Value

# ドメイン参加を実施
Add-Computer -DomainName "$domainName" -NewName "$newName" -Credential $credential -Passthru -Force -Restart
&amp;lt;/powershell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
これで、EC2インスタンス作成と同時にドメイン参加・ホスト名変更までできた。ローカルアドミンのパスワードを一度も復号化する必要なくドメインアカウントでログインできるので便利。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
ちなみに、ドメイン参加のためにはドメインコントローラーを名前解決できる必要があるので、&lt;br&gt;
①Route 53 Resolverのアウトバウンドエンドポイントを作成し、ルールでADドメインの名前は、ADのDNSサーバーにルーティングさせる&lt;br&gt;
②DHCPオプションセットを設定しておく&lt;br&gt;
③UserDataスクリプトに、DNS設定をADに向けるように設定する操作を追加する&lt;br&gt;
のどれかをする必要はある（他にも方法あるかも）。&lt;br&gt;
私の場合は、①を設定しているので他の設定は特に不要。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
次回にはSystems Manager Automationを使う方法かChefを使う方法を試そうかなと思う。&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
※イラストはこちらからご提供いただきました：&lt;br&gt;
&lt;a href="https://www.freepik.com/vectors/computer"&gt;Computer vector created by macrovector - &lt;/a&gt;&lt;a href="http://www.freepik.com"&gt;www.freepik.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>windows</category>
      <category>ec2</category>
      <category>activedirectory</category>
    </item>
    <item>
      <title>10 SaaS Startups Ideas to Build in 2021</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 19 Apr 2021 12:58:29 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/10-saas-startups-ideas-to-build-in-2021-2047</link>
      <guid>https://dev.to/bobbyiliev/10-saas-startups-ideas-to-build-in-2021-2047</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Software-as-a-Service, or SaaS for short, in most cases, is a platform that provides a specific service on a monthly or yearly subscription plan.&lt;/p&gt;

&lt;p&gt;Popular SaaS products are Netflix, Spotify, Dropbox, and Slack. They all offer a specific service which you pay a certain amount for every month.&lt;/p&gt;

&lt;p&gt;Running a SaaS business could help you earn some extra income and eventually even turn it into your full-time project.&lt;/p&gt;

&lt;p&gt;In this post, I will share 10 SaaS ideas that you could build in 2021 and that have the potential to turn into profitable products!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-laravel-wave"&gt;
  &lt;/a&gt;
  What is Laravel Wave
&lt;/h1&gt;

&lt;p&gt;Wave is the ultimate Software as a Service Starter Kit packed with great features like authentication, subscriptions, invoices, announcements, user profiles, and so much more. The best thing is that Wave is now open-source, and you can download it for free &lt;a href="https://github.com/thedevdojo/wave"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4HZLNjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114724123-eb3dd600-9d43-11eb-861f-c70806f9aec6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4HZLNjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114724123-eb3dd600-9d43-11eb-861f-c70806f9aec6.png" alt="Laravel Wave SaaS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building a SaaS from scratch could be pretty time-consuming and costly, especially in the beginning when it is not making you any money. This is why Wave is so beneficial for small startups and solopreneurs!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-saas-blog"&gt;
  &lt;/a&gt;
  1. SaaS blog
&lt;/h1&gt;

&lt;p&gt;Content creation has been a big thing for many years now. If you are an expert on any topic, having a blog is a great way to share your knowledge with the world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4U3maRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114724468-4079e780-9d44-11eb-8b94-c3efccb4c337.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4U3maRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114724468-4079e780-9d44-11eb-8b94-c3efccb4c337.png" alt="SaaS DevBlog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Laravel Wave could help you build a platform where people would have to sign up in order to be able to read your premium content.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-courses-platform"&gt;
  &lt;/a&gt;
  2. Courses platform
&lt;/h1&gt;

&lt;p&gt;As many people prefer video rather than reading, similar to the SaaS Blog, you could create a platform where you would upload your video courses. It would be similar to Netflix but for developers or the specific topic that you are an expert on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKZJ28_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114725336-170d8b80-9d45-11eb-885a-f767238b8260.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKZJ28_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/21223421/114725336-170d8b80-9d45-11eb-885a-f767238b8260.png" alt="Courses platform SaaS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Platforms like Pluralsight and Udemy have been extremely successful, and they are changing the education system for good. Why not start your own courses platform instead?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-doctors-appointment-management-and-review"&gt;
  &lt;/a&gt;
  3. Doctors Appointment Management and Review
&lt;/h1&gt;

&lt;p&gt;Finding a good doctor is crucial, but it is also very challenging.&lt;/p&gt;

&lt;p&gt;An idea for a great SaaS would be to create a platform where doctors could register and manage appointments for patients.&lt;/p&gt;

&lt;p&gt;The patients, on the other side, would be able to review the visits after each appointment.&lt;/p&gt;

&lt;p&gt;This would be beneficial for both the doctors and help them gain new patients, but also for the patients as they will be able to read some feedback for the specific doctor before they visit them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-rental-property-management-platform"&gt;
  &lt;/a&gt;
  4. Rental Property Management platform
&lt;/h1&gt;

&lt;p&gt;If you have ever been looking for a rental property, you probably know that it could be a real struggle to find a reliable landlord and decent property.&lt;/p&gt;

&lt;p&gt;Similar to the Doctors Appointment Management system, a good SaaS product idea could be to create a platform where landlords and people looking for rental properties could connect and arrange visits.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-website-monitoring-system"&gt;
  &lt;/a&gt;
  5. Website monitoring system
&lt;/h1&gt;

&lt;p&gt;If you have ever managed a website, you probably know that your website uptime is crucial. So being notified when your website goes down is essential so that you could take the necessary actions on time.&lt;/p&gt;

&lt;p&gt;You could build a SaaS product where your users could register and add their domain names that they want to be monitored. Then for a small monthly fee, they will be notified if their website goes down. Pingdom is one such platform.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-product-review-system"&gt;
  &lt;/a&gt;
  6. Product review system
&lt;/h1&gt;

&lt;p&gt;With so many products out there, it could be hard to decide which one to pick. It would be nice to have a reliable product review platform where consumers could check the honest opinions of actual customers of the specific product.&lt;/p&gt;

&lt;p&gt;One such platform is Trustpilot.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-freelance-website"&gt;
  &lt;/a&gt;
  7. Freelance website
&lt;/h1&gt;

&lt;p&gt;Freelancing is quite a big thing. A lot of people are looking for opportunities, and a lot of companies are looking for people to do specific work for them.&lt;/p&gt;

&lt;p&gt;There are large platforms like Freelance.com and Upwork, but you could build your own platform where you could showcase the services that you offer and let your customers register and pay for a specific service directly via your own freelance website!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-invoice-generator"&gt;
  &lt;/a&gt;
  8. Invoice generator
&lt;/h1&gt;

&lt;p&gt;If you are a freelancer who is just getting started sending a professional invoice to your customers is key. &lt;/p&gt;

&lt;p&gt;An easy-to-use platform that lets your users generate professional-looking invoices and mail them out to their customers is definitely a service that I would be willing to pay for on a monthly basis.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-cv-generator"&gt;
  &lt;/a&gt;
  9. CV Generator
&lt;/h1&gt;

&lt;p&gt;Having a professional CV is essential for everyone who is applying for a new role. The CV makes you stand out among other candidates, and it is the first impression that your possible future employer gets about you.&lt;/p&gt;

&lt;p&gt;Creating a CV generator SaaS that stands out compared to other large platforms like reasume.io and Enhance CV where millions of users use them and have nearly identical-looking CVs could be a game-changer!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-posts-management-platform"&gt;
  &lt;/a&gt;
  10. Posts management platform
&lt;/h1&gt;

&lt;p&gt;With so many blogging platforms out there like DEV.to, Hash node, Medium and etc., it could be time-consuming to share your posts on each platform.&lt;/p&gt;

&lt;p&gt;It would be cool if people could have a centralized spot where they could publish their content, and then the posts would get automatically re-published on all other platforms, too, kind of like the ultimate post aggregation system!&lt;/p&gt;

&lt;p&gt;So for a small monthly fee, your users could post all of their posts on your platform, and then thanks to the APIs provided by the other platforms, you could automatically re-publish them on all the platforms that you've built an integration with.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope that you find this helpful and hope that you choose an idea and build your SaaS soon!&lt;/p&gt;

&lt;p&gt;If you enjoy the Wave project, make sure to star it on GitHub!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thedevdojo/wave"&gt;Laravel Wave GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about building a SaaS product from scratch, I strongly recommend &lt;a href="https://saasadventure.io/"&gt;the SaaS Adventure course&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>saas</category>
      <category>laravel</category>
      <category>php</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Kubernetes vs Docker: Understanding Containers in 2021</title>
      <author>Tomas Fernandez</author>
      <pubDate>Mon, 19 Apr 2021 12:41:16 +0000</pubDate>
      <link>https://dev.to/semaphore/kubernetes-vs-docker-understanding-containers-in-2021-132i</link>
      <guid>https://dev.to/semaphore/kubernetes-vs-docker-understanding-containers-in-2021-132i</guid>
      <description>&lt;p&gt;A few weeks ago, the Kubernetes development team announced that they are &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#deprecation"&gt;deprecating Docker&lt;/a&gt;. This piece of news made the rounds through tech communities and social networks alike. Will Kubernetes clusters break, and if so, how will we run our applications? What should we do now? Today, we’ll examine all these questions and more.&lt;/p&gt;

&lt;p&gt;Let’s start from the top. If you’re already familiar with Docker and Kubernetes and want to get to the juicy parts, skip to &lt;em&gt;&lt;a href="https://semaphoreci.com/blog/kubernetes-vs-docker#h-how-does-kubernetes-deprecating-docker-impact-you"&gt;how does the Dockershim deprecation impact you?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-container"&gt;
  &lt;/a&gt;
  What is a Container?
&lt;/h2&gt;

&lt;p&gt;Even though Docker is used as a synonym for containers, the reality is that they have existed long before Docker was a thing. Unix and Linux have had containers in some form or another since the late 70s, when &lt;a href="https://man7.org/linux/man-pages/man2/chroot.2.html"&gt;chroot&lt;/a&gt; was introduced. Chroot allowed system admins to run programs in a kind-but-not-really-isolated filesystem. Later, the idea was refined and enhanced into container engines such as &lt;a href="https://docs-dev.freebsd.org/en/books/handbook/jails"&gt;FreeBSD Jails&lt;/a&gt;, &lt;a href="https://openvz.org/"&gt;OpenVZ&lt;/a&gt;, or &lt;a href="https://linuxcontainers.org/"&gt;Linux Containers (LXC)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what are containers?&lt;/p&gt;

&lt;p&gt;A container is a logical partition where we can run applications isolated from the rest of the system. Each application gets its own private network and a virtual filesystem that is not shared with other containers or the host.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8OiRQPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11kny3fqmdxbc4jnxa75.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8OiRQPv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11kny3fqmdxbc4jnxa75.png" alt="Containers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running containerized applications is a lot more convenient than installing and configuring software. For one thing, containers are portable; we can build in one server with the confidence that it will work in any server. Another advantage is that we can run multiple copies of the same program simultaneously without conflict or overlap, something really hard to do otherwise.&lt;/p&gt;

&lt;p&gt;However, for all this to work, we need a &lt;em&gt;container runtime&lt;/em&gt;, a piece of software capable of running containers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h2&gt;

&lt;p&gt;Docker is the most popular container runtime — by a long shot. It shouldn’t be surprising, as it brought the concept of containers into the mainstream, which in turn inspired the creation of platforms like Kubernetes.&lt;/p&gt;

&lt;p&gt;Before Docker, running containers was indeed possible, but it was hard work. Docker made things simple because it’s a complete tech stack that can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage container lifecycle.&lt;/li&gt;
&lt;li&gt;Proxy requests to and from the containers.&lt;/li&gt;
&lt;li&gt;Monitor and log container activity.&lt;/li&gt;
&lt;li&gt;Mount shared directories.&lt;/li&gt;
&lt;li&gt;Set resource limits on containers.&lt;/li&gt;
&lt;li&gt;Build images. The &lt;code&gt;Dockerfile&lt;/code&gt; is the de-facto format for building container images.&lt;/li&gt;
&lt;li&gt;Push and pull images from registries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In its first iterations, Docker used Linux Containers (LXC) as the runtime backend. As the project evolved, LXC was replaced by &lt;a href="https://containerd.io/"&gt;containerd&lt;/a&gt;, Docker’s own implementation. A modern Docker installation is divided into two services: &lt;code&gt;containerd&lt;/code&gt;, responsible for managing containers, and &lt;code&gt;dockerd&lt;/code&gt;, which does all the rest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N7gsu5-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcfalfee13a57sx4krl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N7gsu5-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcfalfee13a57sx4krl9.png" alt="Docker Engine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kubernetes"&gt;
  &lt;/a&gt;
  What is Kubernetes?
&lt;/h2&gt;

&lt;p&gt;Kubernetes takes the idea of containers and turns it up a notch. Instead of running containerized applications in a single server, Kubernetes distributes them across a cluster of machines. Applications running in Kubernetes look and behave like a single unit, even though, in reality, they may consist of an arrangement of loosely-coupled containers.&lt;/p&gt;

&lt;p&gt;Kubernetes adds distributed computing features on top of containers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pods&lt;/strong&gt;: pods are logical groups of containers that share resources like memory, CPU, storage, and network.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auto-scaling&lt;/strong&gt;: Kubernetes can automatically adapt to changing workloads by starting and stopping pods as needed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Self-healing&lt;/strong&gt;: containers are monitored and restarted on failure.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Load-balancing&lt;/strong&gt;: requests are distributed over the healthy available pods.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rollouts&lt;/strong&gt;: Kubernetes supports automated rollouts and rollbacks. Making otherwise complex procedures like &lt;a href="https://semaphoreci.com/blog/what-is-canary-deployment"&gt;Canary&lt;/a&gt; and &lt;a href="https://semaphoreci.com/blog/continuous-blue-green-deployments-with-kubernetes"&gt;Blue-Green&lt;/a&gt; releases trivial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can think of Kubernetes’ architecture as a combination of two planes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;control plane&lt;/strong&gt; is the coordinating brain of the cluster. It has a &lt;em&gt;controller&lt;/em&gt; that manages nodes and services, a &lt;em&gt;scheduler&lt;/em&gt; that assigns pods to the nodes, and the &lt;em&gt;API service&lt;/em&gt;, which handles communication. Configuration and state are stored on a highly-available database called &lt;em&gt;etcd&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;worker nodes&lt;/strong&gt; are the machines that run the containers. Each worker node runs a few components like the &lt;em&gt;kubelet&lt;/em&gt; agent, a network proxy, and the container runtime. The default container runtime up to Kubernetes version v1.20 was Docker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TKBqvRrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fl00m90gqkd2dcyow92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TKBqvRrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fl00m90gqkd2dcyow92.png" alt="control plane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#container-formats"&gt;
  &lt;/a&gt;
  Container Formats
&lt;/h2&gt;

&lt;p&gt;Before starting a container, we need to either build or download a &lt;em&gt;container image&lt;/em&gt;, which is a filesystem packed with everything the application needs: code, binaries, configuration files, libraries, and dependencies.&lt;/p&gt;

&lt;p&gt;The rise in popularity of containers showed the need for an open image standard. As a result, Docker Inc and CoreOS established the &lt;a href="https://opencontainers.org/"&gt;Open Container Initiative&lt;/a&gt; (OCI) in 2015, with the mission of producing vendor-neutral formats. The result of this effort was the creation of two standards:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An image specification that defines the image binary format.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/opencontainers/runtime-spec"&gt;runtime specification&lt;/a&gt; that describes how to unpack and run a container. OCI maintains a reference implementation called &lt;a href="https://github.com/opencontainers/runc"&gt;runc&lt;/a&gt;. Both containerd and CRI-O use runc in the background to spawn containers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The OCI standard brought interoperability among different container solutions. As a result, images built in one system can run in any other compliant stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hq9BFNb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5fd32d876qlof6ejsxs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hq9BFNb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5fd32d876qlof6ejsxs.png" alt="Kubernetes vs. Docker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docker-vs-kubernetes"&gt;
  &lt;/a&gt;
  Docker Vs. Kubernetes
&lt;/h2&gt;

&lt;p&gt;Here is where things get a bit more technical. I said that each Kubernetes worker node needs a container runtime. In its first &lt;a href="https://github.com/kubernetes/kubernetes/blob/release-0.4/DESIGN.md"&gt;original design&lt;/a&gt;, Docker was inseparable from Kubernetes because it was the only runtime supported.&lt;/p&gt;

&lt;p&gt;Docker, however, was never designed to run inside Kubernetes. Realizing this problem, the Kubernetes developers eventually implemented an API called &lt;em&gt;Container Runtime Interface&lt;/em&gt; (CRI). This interface allows us to choose among different container runtimes, making the platform more flexible and less dependent on Docker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RckigPvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/659l9hlvek0movokq7dm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RckigPvW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/659l9hlvek0movokq7dm.png" alt="Container runtime"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This change introduced a new difficulty for the Kubernetes team since Docker doesn’t know about or support the CRI. Hence, at the same time the API was introduced, they had to write an adaptor called &lt;em&gt;Dockershim&lt;/em&gt; to translate CRI messages into Docker-specific commands.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dockershim-deprecation"&gt;
  &lt;/a&gt;
  The Dockershim Deprecation
&lt;/h2&gt;

&lt;p&gt;While Docker was the first and only supported engine for a time, it was never on the long-term plans. &lt;a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.20.md#deprecation"&gt;Kubernetes version 1.20 deprecates Dockershim&lt;/a&gt;, kicking off the transition away from Docker.&lt;/p&gt;

&lt;p&gt;Once the transition is done, the stack gets significantly smaller. It goes from this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i1fQu9lX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9pdnro0abksec0k9l9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i1fQu9lX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9pdnro0abksec0k9l9j.png" alt="The Dockershim Deprecation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u307Ig7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/063zqh9j6nmknvvlykjp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u307Ig7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/063zqh9j6nmknvvlykjp.png" alt="The Dockershim deprecation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result is less bloat and fewer dependencies needed on each of the worker nodes.&lt;/p&gt;

&lt;p&gt;So, why the change?&lt;/p&gt;

&lt;p&gt;Simply put, Docker is heavy. We get better performance with a lightweight container runtime like containerd or &lt;a href="https://cri-o.io/"&gt;CRI-O&lt;/a&gt;. As a recent example, Google &lt;a href="https://kubernetes.io/blog/2018/05/24/kubernetes-containerd-integration-goes-ga/"&gt;benchmarks&lt;/a&gt; have shown that containerd consumes less memory and CPU, and that pods start in less time than on Docker.&lt;/p&gt;

&lt;p&gt;Besides, in some ways Docker itself can be considered &lt;a href="https://www.tariqislam.com/posts/kubernetes-docker-dep/"&gt;technical debt&lt;/a&gt;. What Kubernetes needs from Docker is, in fact, the container runtime: containerd. The rest, at least as far as Kubernetes is concerned, is overhead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-kubernetes-deprecating-docker-impact-you"&gt;
  &lt;/a&gt;
  How Does Kubernetes Deprecating Docker Impact You?
&lt;/h2&gt;

&lt;p&gt;Things are not as dramatic as they sound. Let’s preface this whole section by saying the only thing that changes in v1.20 is that you’ll get a deprecation warning, only if you’re running Docker. That’s all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I still use Docker for development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, you absolutely can, now and in the foreseeable future. You see, Docker doesn’t run Docker-specific images; it runs OCI-compliant containers. As long as Docker continues using this format, Kubernetes will keep accepting them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I Still Package My Production Apps With Docker?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, for the same reasons as in the previous question. Applications packaged with Docker will continue to run — no change there. Thus, you can still build and test containers with the tools you know and love. You don’t need to change your &lt;a href="https://semaphoreci.com/blog/cicd-pipeline"&gt;CI/CD pipelines&lt;/a&gt; or switch to other image registries, Docker-produced images will continue to work in your cluster just as they always have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Do I Need to Change?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right now, nothing. If your cluster uses Docker as a runtime, you’ll get a deprecation warning after upgrading to v1.20. But the change is a clear signal from the Kubernetes community about the direction they want to take. It’s time to start planning for the future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When Is the Change Going to Happen?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The plan is to have all Docker dependencies completely removed by &lt;a href="https://kubernetes.io/blog/2020/12/02/dont-panic-kubernetes-and-docker/#so-why-the-confusion-and-what-is-everyone-freaking-out-about"&gt;v1.23 in late 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When Dockershim Goes Away, What Will Happen?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At that point, Kubernetes cluster admins will be forced to switch to a CRI-compliant container runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are an end-user&lt;/strong&gt; not a lot changes for you. Unless you are running some kind of &lt;a href="https://kubernetes.io/docs/concepts/extend-kubernetes/extend-cluster/"&gt;node customizations&lt;/a&gt;, you probably won’t have to do anything special. Only test that your applications work with the new container runtime.&lt;/p&gt;

&lt;p&gt;These are some of the things that will cause problems or break after upgrading to v1.23:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using Docker-specific logging and monitoring. That is, parsing docker messages from a log or polling the Docker API.&lt;/li&gt;
&lt;li&gt;Using Docker optimizations.&lt;/li&gt;
&lt;li&gt;Running scripts that rely on &lt;code&gt;docker&lt;/code&gt; CLI.&lt;/li&gt;
&lt;li&gt;Running Docker commands in privileged pods. For instance: to build images with &lt;code&gt;docker build&lt;/code&gt;. See projects like &lt;a href="https://github.com/GoogleContainerTools/kaniko"&gt;kaniko&lt;/a&gt; for alternative solutions.&lt;/li&gt;
&lt;li&gt;Using Docker-in-Docker setups.&lt;/li&gt;
&lt;li&gt;Running Windows containers. Containerd does work in Windows, but its support level is not yet up to par with Docker’s. The objective is to have a stable containerd release for Windows by &lt;a href="https://github.com/kubernetes/enhancements/issues/1001"&gt;containerd version 1.20&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you’re using a managed cluster&lt;/strong&gt; on a cloud provider like AWS EKS, Google GKE, or Azure AKS, check that your cluster uses a supported runtime before Docker support goes away. Some cloud vendors are a few versions behind, so you may have more time to plan. So, check with your provider. To give an example, Google Cloud announced they are changing the default runtime from Docker to containerd for all newly-created worker nodes, but you can still opt-in for Docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you run your own cluster&lt;/strong&gt;: in addition to checking the points mentioned above, you will need to evaluate moving to another container runtime that is fully compatible with CRI. The Kubernetes docs explain the steps in detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd"&gt;Switching to containerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cri-o"&gt;Switching to CRI-O&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, if you want to keep on using Docker past version 1.23, follow the &lt;a href="https://github.com/Mirantis/cri-dockerd"&gt;cri-dockerd&lt;/a&gt; project, which &lt;a href="https://www.mirantis.com/blog/mirantis-to-take-over-support-of-kubernetes-dockershim-2/"&gt;plans to keep Docker&lt;/a&gt; as a viable runtime alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Kubernetes is growing, but the change doesn’t need to be a traumatic experience. Most users won’t have to take any action. For those who do, there’s still time to test and plan.&lt;/p&gt;

&lt;p&gt;To continue learning about Docker and Kubernetes, read these next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/resources/cicd-docker-kubernetes"&gt;Download our free book: CI/CD with Docker and Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/product/docker"&gt;Powerful CI/CD for Docker and Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/guide-continuous-deployment-kubernetes"&gt;A Step-by-Step Guide to Continuous Deployment on Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/blog/2018/03/14/docker-image-size.html"&gt;Docker Image Size – Does It Matter?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Command-Line Interfaces: Structure &amp; Syntax</title>
      <author>Paula Santamaría</author>
      <pubDate>Mon, 19 Apr 2021 12:30:30 +0000</pubDate>
      <link>https://dev.to/paulasantamaria/command-line-interfaces-structure-syntax-2533</link>
      <guid>https://dev.to/paulasantamaria/command-line-interfaces-structure-syntax-2533</guid>
      <description>&lt;p&gt;If you are a developer, chances are you have used or read about CLIs already (maybe to execute git or npm commands or in some library's documentation). &lt;/p&gt;

&lt;p&gt;I work with multiple CLIs every day (docker, dotnet, npm, git, etc.), but I had never stopped to learn much about their structure or syntax until recently. Reading documentation and examples is usually enough to get by. &lt;/p&gt;

&lt;p&gt;However, I'm currently developing my own CLI for a personal project, so I decided to learn more about &lt;strong&gt;CLI design, structure, syntax, and conventions&lt;/strong&gt;. I did my research, which I documented and decided to share here in this post.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#1-introduction"&gt;1. Introduction&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#11-structure"&gt;1.1. Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-arguments"&gt;2. Arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#3-options"&gt;3. Options&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#31-flags"&gt;3.1. Flags&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#4-the---help-flag"&gt;4. The --help flag&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#41-common-aliases-for-the---help-flag"&gt;4.1. Common aliases for the --help flag:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#42-levels-of-verbosity"&gt;4.2. Levels of verbosity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#43-the-help-command"&gt;4.3. The help command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#5-cli-description-syntax-conventions"&gt;5. CLI description syntax conventions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#51-required-parameters"&gt;5.1. Required Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#52-optional-parameters"&gt;5.2. Optional Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#53-arguments-that-can-receive-many-values"&gt;5.3. Arguments that can receive many values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#54-mutually-exclusive-arguments"&gt;5.4. Mutually exclusive arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-references"&gt;6. References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#1-introduction"&gt;
  &lt;/a&gt;
  1. Introduction
&lt;/h1&gt;

&lt;p&gt;A CLI or Command Line Interface is an application that &lt;strong&gt;handles user interaction through the Command Line&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;They don't have graphics (except, maybe, for ASCII Art 😂).&lt;br&gt;
All the &lt;strong&gt;information is presented&lt;/strong&gt; to the user &lt;strong&gt;in the form of text&lt;/strong&gt; and &lt;strong&gt;the user interacts&lt;/strong&gt; with it by &lt;strong&gt;typing in commands&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;CLIs can be faster than GUIs for certain tasks (especially for monotonous tasks and when you're already familiar with the commands). One of the main advantages they have over GUI is that they're &lt;strong&gt;easier to *automate&lt;/strong&gt;* (running "npm install" in a CI pipeline could be a lot trickier without a CLI).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#11-structure"&gt;
  &lt;/a&gt;
  1.1. Structure
&lt;/h2&gt;

&lt;p&gt;Most CLIs are designed with the following structures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;command&amp;gt; [arguments] [options]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;ls /home/dir --all&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;program&amp;gt; &amp;lt;command&amp;gt; [arguments] [options]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;git fetch origin main --depth=10&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;program&amp;gt; [arguments] [options]&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;docker -v&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iBJ_bwEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lG5NuVa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBJ_bwEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lG5NuVa.png" alt="Example: ls /home/my-dir --all"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qibf0e8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KmzktBL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qibf0e8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KmzktBL.png" alt="Example: git fetch origin main --depth=10 "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Commands are usually represented as &lt;em&gt;verbs&lt;/em&gt; and programs as &lt;em&gt;nouns&lt;/em&gt; (as they are usually a short version of the program's name). There are some cases where a second (or third, or more) noun is used to narrow the scope in which the command will operate, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here, we have the program (docker), the context (container), and the command (start).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#2-arguments"&gt;
  &lt;/a&gt;
  2. Arguments
&lt;/h1&gt;

&lt;p&gt;Arguments in a CLI allow &lt;strong&gt;users to send data&lt;/strong&gt; to the application, sometimes in a command context. They are often called &lt;em&gt;positional arguments&lt;/em&gt; because they are &lt;strong&gt;identified by their position&lt;/strong&gt;, which means users must write the value for each argument in the &lt;em&gt;correct position&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mycli command argValue1 argValue2
              |_______| |_______|
                  0         1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They can be required or not. If they are not required, the command's behavior may vary in the absence of the parameter, often using a &lt;em&gt;default value&lt;/em&gt; instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# No argument provided -&amp;gt; Installs all dependencies from the package.json&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;# Argument value: some-package -&amp;gt; Installs only some-package&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install &lt;/span&gt;some-package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;# No arguments -&amp;gt; Uses default remote and branch.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git fetch

&lt;span class="c"&gt;# Passing a specific remote and branch as arguments.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git fetch origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-options"&gt;
  &lt;/a&gt;
  3. Options
&lt;/h1&gt;

&lt;p&gt;Options are &lt;strong&gt;named parameters&lt;/strong&gt; that can be passed to a command and are represented by &lt;strong&gt;key-value pairs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Unlike positional arguments, their &lt;strong&gt;position is not important&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You're probably familiar with the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Key: --message &lt;/span&gt;
&lt;span class="c"&gt;# Value: "commit message"&lt;/span&gt;
git commit &lt;span class="nt"&gt;--message&lt;/span&gt; &lt;span class="s2"&gt;"commit message"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Options are usually (not always) used to represent &lt;strong&gt;optional&lt;/strong&gt; parameters. In most cases, if a parameter is required, a positional argument is the best way to go.&lt;/p&gt;

&lt;p&gt;Some options have &lt;strong&gt;aliases&lt;/strong&gt;, which are &lt;strong&gt;short versions&lt;/strong&gt; of the same option, easier to type and remember. They're usually identified by a single dash prefix:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Long version&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;--help&lt;/span&gt;

&lt;span class="c"&gt;# Alias&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Different &lt;em&gt;delimiters&lt;/em&gt; are supported, depending on the CLI and Operating System. These are some of the most common:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Single space&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;--file&lt;/span&gt; text.txt

&lt;span class="c"&gt;# =&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;--file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;text.txt

&lt;span class="c"&gt;# :&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mycli &lt;span class="nt"&gt;--file&lt;/span&gt;:text.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#31-flags"&gt;
  &lt;/a&gt;
  3.1. Flags
&lt;/h2&gt;

&lt;p&gt;Options that &lt;strong&gt;don't require a value&lt;/strong&gt; are often called Flags. They are boolean, meaning their presence indicates "true" and their absence "false".&lt;/p&gt;

&lt;p&gt;Some examples of commands using flags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git push &lt;span class="nt"&gt;--force&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-the-help-flag"&gt;
  &lt;/a&gt;
  4. The --help flag
&lt;/h1&gt;

&lt;p&gt;Informing our users about the &lt;strong&gt;available commands&lt;/strong&gt; and their &lt;strong&gt;arguments and options&lt;/strong&gt; can be &lt;em&gt;tricky without a GUI&lt;/em&gt;. &lt;br&gt;
That's when the &lt;code&gt;--help&lt;/code&gt; flag comes in.&lt;/p&gt;

&lt;p&gt;When we include the help flag after a command, we ask the CLI to give us more information about it. &lt;br&gt;
Usually, this information will include a short description of the command, arguments, options, and aliases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#41-common-aliases-for-the-help-flag"&gt;
  &lt;/a&gt;
  4.1. Common aliases for the --help flag:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-help, -h, -?, -H
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#42-levels-of-verbosity"&gt;
  &lt;/a&gt;
  4.2. Levels of verbosity
&lt;/h2&gt;

&lt;p&gt;Some CLIs allow the user to ask for &lt;strong&gt;different levels of help&lt;/strong&gt;. &lt;br&gt;
For example, the dotnet CLI will print the short version when we use &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; , and the long version when we use &lt;code&gt;-H&lt;/code&gt; or &lt;code&gt;-HELP&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Short version&lt;/span&gt;
dotnet &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt;

&lt;span class="c"&gt;# Long version&lt;/span&gt;
dotnet &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;-H&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, git CLI prints a summary of the command briefly explaining how to use it when we use &lt;code&gt;-h&lt;/code&gt;, but redirects to the offline HTML documentation when we use &lt;code&gt;--help&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Short version&lt;/span&gt;
git &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt;

&lt;span class="c"&gt;# Offline HTML docs&lt;/span&gt;
git &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Learning about the different levels of verbosity was really helpful (I've been using it frequently), although it's a shame there's not a standard for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#43-the-help-command"&gt;
  &lt;/a&gt;
  4.3. The help command
&lt;/h2&gt;

&lt;p&gt;Some CLIs also provide a &lt;strong&gt;help command&lt;/strong&gt;, which usually gives more detailed information than the &lt;code&gt;--help&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;program &lt;span class="nb"&gt;help&lt;/span&gt; &amp;lt;command-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, both dotnet CLI and npm CLI will open a browser and redirect you to the command's full documentation when we use the help command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet &lt;span class="nb"&gt;help&lt;/span&gt; &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

npm &lt;span class="nb"&gt;help&lt;/span&gt; &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-cli-description-syntax-conventions"&gt;
  &lt;/a&gt;
  5. CLI description syntax conventions
&lt;/h1&gt;

&lt;p&gt;When reading a CLI's documentation or a "man" page, you'll likely come across a particular &lt;strong&gt;syntax used to describe commands&lt;/strong&gt;, their arguments, and options (located often under "Synopsis"). &lt;br&gt;
I used to not pay much attention to it (other than trying and figuring out the general anatomy of the command) and going straight to the examples. But after learning about it and how to interpret it, these descriptions have become much more useful to me.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#51-required-parameters"&gt;
  &lt;/a&gt;
  5.1. Required Parameters
&lt;/h2&gt;

&lt;p&gt;Required parameters are often represented using just the name of the param, although in some cases, you may find them between angle brackets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;dotnet new &amp;lt;template&amp;gt;&lt;/code&gt;: We can't create a new dotnet project without specifying a template.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv source dest&lt;/code&gt;: When moving a file/directory, we must specify the source and destination parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#52-optional-parameters"&gt;
  &lt;/a&gt;
  5.2. Optional Parameters
&lt;/h2&gt;

&lt;p&gt;Optional parameters are most commonly represented using square brackets: &lt;code&gt;mycli command [optionalParameter]&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;docker container ls [options]&lt;/code&gt; We can add some flags and options to alter the command's behavior.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git remote [-v | --verbose]&lt;/code&gt; We can use -v or --verbose to get more information about each git remote.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#53-arguments-that-can-receive-many-values"&gt;
  &lt;/a&gt;
  5.3. Arguments that can receive many values
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Ellipses&lt;/strong&gt; indicate the argument/option expects &lt;strong&gt;many values&lt;/strong&gt;. It can be applied to optional or required parameters &lt;/p&gt;

&lt;p&gt;Here's how it looks like applied to &lt;strong&gt;optional parameters&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mycli &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;parameter...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The previous statement tells us our parameter expects &lt;strong&gt;0 to N values&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required parameters&lt;/strong&gt; that receive many values are usually represented in one of two ways. Here is one of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mycli &lt;span class="nb"&gt;command&lt;/span&gt; &amp;lt;myParameter&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;myParameter...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This statement tells us the command receives at least a single value for  &lt;code&gt;&amp;lt;myParameter&amp;gt;&lt;/code&gt; but can also receive more values, represented by &lt;code&gt;[myParameter...]&lt;/code&gt; &lt;strong&gt;resulting in 1 to N values&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example from the Docker CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container start &amp;lt;container&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;container...]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When executing the start command, we must specify at least one container, but we can also start more than one in the same command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second way of representing required parameters with many 1 to N values is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mycli command &amp;lt;myParameter...&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Or: &lt;code&gt;mycli command myParameter...&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we are not using square brackets, it's clear &lt;code&gt;myParameter&lt;/code&gt; is required, which indicates it needs &lt;strong&gt;at least one value (1 to N)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;directory...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We need to specify at least one directory to create when using mkdir, but we can also create more than one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#54-mutually-exclusive-arguments"&gt;
  &lt;/a&gt;
  5.4. Mutually exclusive arguments
&lt;/h2&gt;

&lt;p&gt;Some arguments &lt;strong&gt;cannot be used together&lt;/strong&gt; in the same command. Their &lt;em&gt;exclusive relationship&lt;/em&gt; is represented using pipes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mycli &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;--option1&lt;/span&gt; | &lt;span class="nt"&gt;--option2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The square brackets tell us we &lt;em&gt;don't have to&lt;/em&gt; use any of those options, and the pipe tells us that, if we decide to use them, we can't use them both at the same time. So any of the following are valid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mycli command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mycli command --option1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mycli command --option2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But the following would be invalid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mycli command --option1 --option2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example from git commit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; | &lt;span class="nt"&gt;--interactive&lt;/span&gt; | &lt;span class="nt"&gt;--patch&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The previous statement tells us we can use any of those flags (&lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;--interactive&lt;/code&gt; or &lt;code&gt;--patch&lt;/code&gt; ) but not together&lt;/li&gt;
&lt;li&gt;Also, the square brackets indicate we can also decide not to use any of them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's what happens when we try to use &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;--patch&lt;/code&gt; together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;--patch&lt;/span&gt; 

fatal: Only one of &lt;span class="nt"&gt;--include&lt;/span&gt;/--only/--all/--interactive/--patch can be used.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This syntax is often used to represent &lt;strong&gt;aliases&lt;/strong&gt;: &lt;code&gt;git remote [ - v | --verbose ]&lt;/code&gt;. Both flags are valid individually, but it doesn't make sense to use them simultaneously.&lt;/p&gt;

&lt;p&gt;Similarly, there are cases when &lt;strong&gt;at least one option must be included&lt;/strong&gt;. In those cases, we use vertical bars, and we group the parameters using curly brackets or parentheses, like so:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mycli command { --option1 | --option2 }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Or:  &lt;code&gt;mycli command ( --option1 | --option2 )&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The curly brackets or parentheses indicate that at least one option must be included.&lt;/p&gt;

&lt;p&gt;Here's an example from &lt;code&gt;git remote&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote set-head &amp;lt;name&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-a&lt;/span&gt; | &lt;span class="nt"&gt;--auto&lt;/span&gt; | &lt;span class="nt"&gt;-d&lt;/span&gt; | &lt;span class="nt"&gt;--delete&lt;/span&gt; | &amp;lt;branch&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;parenthesis&lt;/strong&gt; indicates that we must &lt;strong&gt;choose at least one&lt;/strong&gt; of those options&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;pipes&lt;/strong&gt; tell us &lt;strong&gt;we can't choose two or more&lt;/strong&gt; of them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we don't use any of the required options, we get this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git remote set-head origin 

usage: git remote set-head &amp;lt;name&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;-a&lt;/span&gt; | &lt;span class="nt"&gt;--auto&lt;/span&gt; | &lt;span class="nt"&gt;-d&lt;/span&gt; | &lt;span class="nt"&gt;--delete&lt;/span&gt; | &amp;lt;branch&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt; 
    &lt;span class="nt"&gt;-a&lt;/span&gt;, &lt;span class="nt"&gt;--auto&lt;/span&gt;            &lt;span class="nb"&gt;set &lt;/span&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD according to remote 
    &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;--delete&lt;/span&gt;          delete refs/remotes/&amp;lt;name&amp;gt;/HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example from &lt;code&gt;dotnet new&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new &amp;lt;template&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;-lang&lt;/span&gt;|--language &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"C#"&lt;/span&gt;|&lt;span class="s2"&gt;"F#"&lt;/span&gt;|VB&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So, the &lt;strong&gt;square brackets&lt;/strong&gt; indicate that passing a &lt;code&gt;-lang&lt;/code&gt;  or &lt;code&gt;--language&lt;/code&gt;  is optional&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;curly braces&lt;/strong&gt; and &lt;strong&gt;pipe&lt;/strong&gt; indicate that we must choose between C#, F#, and VB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I know I could have developed my CLI without stopping to learn any of this. After all, there are libraries that would take care of the syntax and interpretation of commands. Nonetheless, I found it extremely interesting, and I have been using this new knowledge a lot after acquiring it. Finding and reading CLIs documentation has become a lot easier, and I learned many tips that will definitely help me develop a better, more intuitive CLI following the conventions and standards described in this article.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-references"&gt;
  &lt;/a&gt;
  6. References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codecademy.com/articles/command-line-interface"&gt;Command Line Interface - Codeacademy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/style/code-syntax"&gt;Documenting command-line syntax - Google Developer Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/core/tools/"&gt;.NET CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs"&gt;Git CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/cli/v7/commands"&gt;NPM CLI documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>terminal</category>
      <category>cli</category>
      <category>commandline</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Reflecting on my 1st month blogging; a retrospect 💭</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Mon, 19 Apr 2021 11:51:56 +0000</pubDate>
      <link>https://dev.to/technoglot/reflecting-on-my-1st-month-blogging-a-retrospect-1c6k</link>
      <guid>https://dev.to/technoglot/reflecting-on-my-1st-month-blogging-a-retrospect-1c6k</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@adigold1?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Adi Goldstein&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/celebrate?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hi there! 👋🏻 Fancy seeing you here! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: This post is a little different from my other posts. Despite this, I hope you find value in it. 😊 Proceed at your own risk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#brief-intro"&gt;
  &lt;/a&gt;
  Brief intro
&lt;/h1&gt;

&lt;p&gt;16 posts, 3 badges and almost 22K views later (at the time of this writing), here I am, celebrating my first month blogging! 🎉 I still can't believe how fast time has passed by! Time flies when you're having fun, right? 😁&lt;/p&gt;

&lt;p&gt;In this post, I'll walk you through some of the things I learned in the past month and some points that I wish to improve on in the future.&lt;/p&gt;

&lt;p&gt;Let's not waste more time and let us look back at my 1st month blogging! 🎉&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#blogging-platforms"&gt;
  &lt;/a&gt;
  Blogging platforms 👩🏻‍💻
&lt;/h1&gt;

&lt;p&gt;I won't lie. The plan was for me to use Hashnode as my main blogging platform and then cross-post to DEV.to. Well, guess what? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brdP8Ulw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fmedia.giphy.com%252Fmedia%252Fl2JeiETrmiLUlCyLS%252Fgiphy.gif%26f%3D1%26nofb%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brdP8Ulw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fmedia.giphy.com%252Fmedia%252Fl2JeiETrmiLUlCyLS%252Fgiphy.gif%26f%3D1%26nofb%3D1" alt="change of plans GIF"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am now using DEV.to as my main blogging platform. The reason? I just find that I get more engagement here than on the other side (Hashnode), and that is, with almost no effort and self-promo. As a bonus, at least on two or three occasions, &lt;a href="https://dev.to/devteam"&gt;the DEV team&lt;/a&gt; shared my posts on Twitter. (I only created a Twitter account about a week ago or so, therefore I'm essentially a nobody there. Zero shame in admitting this whatsoever 😁). &lt;/p&gt;

&lt;p&gt;With that being said, this made a HUGE difference in how much exposure my blogs got. So, a HUGE thank you goes to &lt;a href="https://dev.to/devteam"&gt;the DEV team&lt;/a&gt; for putting our work in the spotlight! 💖&lt;/p&gt;

&lt;p&gt;Furthermore, since I'm already so comfortable here and it REALLY feels like a community, I'll be more active here than on Hashnode. That's my choice for the time being. (We can go in more details in the comment section, if you like 😉)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sharing-on-socials"&gt;
  &lt;/a&gt;
  Sharing on socials 📣
&lt;/h1&gt;

&lt;p&gt;As I already hinted in the previous point: my social media presence is weak. Matter of fact; I'm not a fan of social platforms to begin with. (Has nothing to do with the fact that I'm an introvert by the way). &lt;/p&gt;

&lt;p&gt;I have a LinkedIn account, but I don't post on LinkedIn. To me LinkedIn is arguably the LAMEST social media platform to ever exist. (Oops, I said it) The atmosphere there also feels...well...uh....uptight. I honestly don't think my posts would benefit from LinkedIn, though PLEASE prove me wrong in the comments if you strongly disagree with me! 😂&lt;/p&gt;

&lt;p&gt;Then there is Twitter. Not gonna lie, I just can't seem to get the hang of Twitter yet. Lots of devs love being on there and I can understand why, but I cannot for the life of me figure out what to post yet. Any help is appreciated, so drop your tips in the comments! 👇🏻 Pretty please! 🥺&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: In this past month, my focus has been exclusively on blogging. I haven't really cared much about promoting my content. Which ain't catastrophic or anything, but I do realize that in order to get my content to reach more people, I'll have to promote it to some degree. For now, this point is a WIP (Work In Progress).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#engagement-sucks"&gt;
  &lt;/a&gt;
  Engagement SUCKS 👎🏻
&lt;/h1&gt;

&lt;p&gt;Oh boy, this one is frustrating! Let me tell you something: I don't lose sleep over this, but if anything, I'd love to hear from others how they feel about my blogs. I personally value comments more than likes. I like to engage in intellectual conversations and discussions whenever possible, but truth is, most people have an easier time dropping likes and moving on with their lives. Totally acceptable, though it leaves me wondering how they really feel about my post.&lt;/p&gt;

&lt;p&gt;On that same note, I garnered almost 300 followers (at the time of this writing) here on DEV.to. In one month! 😲 WOW! Now, hold your horses... Before you go on and praise me (and while I'm thankful for their support), I can count on ONE hand, how many of them actively engage with my posts.&lt;/p&gt;

&lt;p&gt;Nuff complaining! (I ain't, by the way) Allow me to show some gratitude to those of you who either dropped a comment on a post of mine, or threw some 💖s my way or even gave me the 🦄 reaction. THANK YOU FOR YOUR SUPPORT. 🙇🏻‍♀️ And especially thanks for letting me know in one way or another, that my content reached you safe and sound.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tags-matter"&gt;
  &lt;/a&gt;
  Tags matter #️⃣
&lt;/h1&gt;

&lt;p&gt;Like I said, for now, DEV.to is my main blogging platform of choice. In the future, however, I'll most probably self-host my blog. After all, I prefer being in control. -trust issues intensify- 😨. &lt;/p&gt;

&lt;p&gt;Now, as you already may be aware off, there are MANY tags (read hashtags) you can follow on here. But beware: not all of these tags are as popular. So use them at your own discretion.&lt;/p&gt;

&lt;p&gt;Here's a good example of one of my posts using the tag #datascience (among others):&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFu_rAsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tY0BDOkD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/what-on-earth-is-a-data-scientist-44oc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What on earth is a Data Scientist? 🤔&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Mar 22 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#help&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#healthydebate&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;That baby right there, got ZERO traction whatsoever. #datascience is dead as fudge. Prove me wrong!&lt;/p&gt;

&lt;p&gt;But seriously: tags matter. Tags matter more than the time at which you post (at least here on DEV.to, dunno about other platforms). Here on DEV.to you can't see how many people are following a certain tag, but you can see the amount of posts published using that tag. Two things can happen when you choose a tag that is heavily used:&lt;br&gt;
1) Your post gets traction&lt;br&gt;
2) Your post does NOT get traction&lt;/p&gt;

&lt;p&gt;(Excuse the lack of scientific proof here. This is just me making assumptions based on experience. My opinions are subject to change in the future 😂).&lt;/p&gt;

&lt;p&gt;So what tag gave me the most attention? Most probably #productivity. Oh, #javascript may probably make you go viral (or not 😜). #javascript is perhaps the most densely populated tag on here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 PRO tip: Do NOT use tags you came up with, thus tags that are not baked into the DEV.to platform. You risk not being noticed at all if you do this. But who am I to stop you, right?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#title-matters"&gt;
  &lt;/a&gt;
  Title matters ✍🏻
&lt;/h1&gt;

&lt;p&gt;Here's an all time favorite:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/jmdejager" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u8W7sdD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--LKoll5jw--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/585443/75085886-a2b8-4def-86e3-c1ece79db805.jpeg" alt="jmdejager image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmdejager/top-5-tips-to-get-more-views-48cd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 5 easy tips to get more views 😎🕵️‍♂️&lt;/h2&gt;
      &lt;h3&gt; 🐤🥇 Jasper de Jager ・ Apr  6 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;As &lt;a class="mentioned-user" href="https://dev.to/jmdejager"&gt;@jmdejager&lt;/a&gt;
 illustrates here, what makes a post great, is the amount of clickbaitiness in the title! 🤣 In all seriousness: title DOES matter. I have observed that for instance "listicles" are really popular (despite being allegedly despised by most 🧐). You know, these posts that go "50 (insert whatever here) you need in order to be a kick ass dev!". &lt;/p&gt;

&lt;p&gt;Nothing wrong with these posts by the way. I'm NOT mocking or bashing them by any means. I'm just saying that these are pretty popular in general. Probably because most folks don't want to read a 6 min bulky post anyway. They probably prefer to scan through a list with bullet points and move on. Whatever floats your boat. 🤷🏻‍♀️&lt;/p&gt;

&lt;p&gt;Moving forward, I'll pay more attention to my post titles. I want to make them more inviting and enticing to the potential reader. If I'm lucky, it may even help with SEO and discoverability on the net.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#post-views"&gt;
  &lt;/a&gt;
  Post views 👀
&lt;/h1&gt;

&lt;p&gt;I'm looking at ya, lurker! Nothing wrong with being one though. I tend to be one myself, depending on the platform. Point is: my blogs, much to my surprise, got lots of views this month. At the time of this writing, I have a humble total of (almost) 22K views. (Again, thanks lovelies. I appreciate it 😊). &lt;/p&gt;

&lt;p&gt;But, why am I surprised? Well, I got into blogging with near zero expectations. And remember: I did not promote my content on social media at all (or barely). Another thing I didn't see coming: #productivity gets a LOAD of attention. I really thought no one on here had any interest in productivity! &lt;/p&gt;

&lt;p&gt;When I first started posting here, I thought: "Gee, no dev is gonna want to read this. They all expect hardcore technical blogs!" WRONG. Yep, I was wrong. I admit defeat. 🙇🏻‍♀️ &lt;/p&gt;

&lt;p&gt;P.S.: Does views == reads? Let me know in the comments. 🤔&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-stats-amp-accomplishments"&gt;
  &lt;/a&gt;
  Some stats 📉 &amp;amp; accomplishments 🎉
&lt;/h1&gt;

&lt;p&gt;Let me share some stats with you data nerds, not for the sake of bragging, but for the sake of analysis. 🤓 All stats presented here are for the period of February 8th, 2021 till today, 19th of April, 2021. Note that I didn't post anything else after my first post on the 8th of February, until the 17th of March. Now, drumroll please 🥁... (just kidding, hehe).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follower count: 293&lt;/li&gt;
&lt;li&gt;Total views: 22588&lt;/li&gt;
&lt;li&gt;Total reactions: 801 (and counting)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the past month I also managed to get three badges: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Fab 5 badge,&lt;/li&gt;
&lt;li&gt;the 4-week-streak badge and most recently,&lt;/li&gt;
&lt;li&gt;the top 7 badge. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Wasn't expecting the first one anyway, but I comment way too much 🤣. Current comment count: 300+).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S.: Do not be driven by numbers like follower count, amount of likes and views. Though they are nice metrics, they are by no means, at least in my opinion, a measure of success. Do what YOU love, and success will automagically follow! 😉💖&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#a-parting-gift"&gt;
  &lt;/a&gt;
  A parting gift 🎁
&lt;/h1&gt;

&lt;p&gt;In case you missed 'em, find below links to my most popular posts of all time. Go on and binge-read them if you like.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFu_rAsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tY0BDOkD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/time-management-productivity-tips-for-devs-4d33" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Time management &amp;amp; productivity tips for devs ⏳&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Apr  6 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFu_rAsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tY0BDOkD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/prioritize-tasks-like-a-boss-with-the-eisenhower-method-5a5e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Prioritize tasks like a BOSS with the Eisenhower method 😎&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Apr  8 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/technoglot" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eFu_rAsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tY0BDOkD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/430182/bd897f8a-247e-44b6-bac8-db79fbe1a55b.jpeg" alt="technoglot image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/technoglot/supercharge-your-blogging-efforts-with-a-solid-system-3jhf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Supercharge your blogging efforts with a solid system ⚡&lt;/h2&gt;
      &lt;h3&gt;Amelia Vieira Rosado ・ Apr 12 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#techtalks&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#its-a-wrap"&gt;
  &lt;/a&gt;
  It's a wrap 🌯
&lt;/h1&gt;

&lt;p&gt;That's it! Nothing else to add here. I might as well do another retrospective blog 3 months from now. 🤔 I'm curious to see how this experiment unfolds. Feel free to share your learnings from your blogging journey below! 👇🏻 I'd love to hear from you! If you have any questions, shoot 'em as well.&lt;/p&gt;


&lt;p&gt;Until then, &lt;a class="mentioned-user" href="https://dev.to/technoglot"&gt;@technoglot&lt;/a&gt;
 signing off ✌🏻&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;&lt;br&gt;
Still here? Catch me on &lt;a href="https://twitter.com/technoglot"&gt;Twitter&lt;/a&gt; or find me &lt;a href="https://linktr.ee/technoglot"&gt;elsewhere&lt;/a&gt;! If you like my blogs and are feeling generous, kindly consider to 👇🏻&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/technoglot"&gt;&lt;img width="250" src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3AmDEOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir6d1lh7uo59jfi2d2v4.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b4J90nl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00o5biwvy4hi2os3vp8u.png" alt="Footer banner"&gt;

</description>
      <category>writing</category>
      <category>watercooler</category>
      <category>devjournal</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Free desktop tool for insightful reporting. Let me know what you think😺</title>
      <author>Juliia Nikitina</author>
      <pubDate>Mon, 19 Apr 2021 11:51:31 +0000</pubDate>
      <link>https://dev.to/juliianikitina/flexmonster-desktop-on-product-hunt-4mij</link>
      <guid>https://dev.to/juliianikitina/flexmonster-desktop-on-product-hunt-4mij</guid>
      <description>&lt;p&gt;Hey Dev.to community😸, &lt;br&gt;
I want to share the project my team and I are working on. &lt;/p&gt;

&lt;p&gt;We are developers of JS data visualization library that is used by integrators as a powerful pivot table component for any web project. &lt;/p&gt;

&lt;p&gt;Our team has decided to give &lt;strong&gt;free access to the app to all people&lt;/strong&gt; using pivots in their everyday tasks.&lt;/p&gt;

&lt;p&gt;We have embedded our pivot table into a simple desktop application on the base of our integration with Electron.js.&lt;br&gt;
And now everyone can easily start working with it right after the download. This product is a convenient and simple solution for your fast reporting. And it doesn’t require any extra skills, knowledge or technical specialization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexmonster Pivot Table &amp;amp; Charts for desktop&lt;/strong&gt; is a lightweight reporting tool that provides a rich set of data analysis features: grouping, aggregating, filtering, sorting, pivot charts.&lt;br&gt;
Once you build a pivot grid, emphasize important insights with formatting, customize your report or save results to any format, be it PDF, Excel, HTML, CSV, or PNG.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1wPTTCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8olz9bp4sdvx1h0pu463.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1wPTTCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8olz9bp4sdvx1h0pu463.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What makes Flexmonster Desktop an effective reporting tool for anyone is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a super quick start by loading data from desired sources,&lt;/li&gt;
&lt;li&gt;a lot of options to export your result to different formats,&lt;/li&gt;
&lt;li&gt;a simple way to change the view on your data: charts, compact or flat view,&lt;/li&gt;
&lt;li&gt;a convenient drag-and-drop and super friendly UI, that allow you to easily configure your report&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;amp; more.&lt;/p&gt;

&lt;p&gt;You can just &lt;a href="https://desktop.flexmonster.com"&gt;download the app&lt;/a&gt;, run it on your computer and quickly make a customized report to present it to your boss or colleagues in just a few minutes.&lt;/p&gt;

&lt;p&gt;If you find it useful but need more custom scenarios for your own soft or website we have a &lt;a href="https://www.flexmonster.com"&gt;developer's version&lt;/a&gt; of our component that can be embedded in your own project. It is powered by extended API calls and different customization options for any use case. You can also customize the app basing it on our Electron integration&lt;/p&gt;

&lt;p&gt;😼 Today is a very important day for us - we are launching on ProductHunt: &lt;a href="https://www.producthunt.com/posts/flexmonster-desktop"&gt;https://www.producthunt.com/posts/flexmonster-desktop&lt;/a&gt;&lt;br&gt;
So we would greatly appreciate your feedback on the app and support on the platform😻.&lt;/p&gt;

&lt;p&gt;If reporting is something you are familiar with - do give it a try!&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>analytics</category>
      <category>javascript</category>
      <category>report</category>
    </item>
    <item>
      <title>Why “dark mode” is more energy-efficent: How to calculate image energy-cost </title>
      <author>Mads Stoumann</author>
      <pubDate>Mon, 19 Apr 2021 11:42:37 +0000</pubDate>
      <link>https://dev.to/madsstoumann/why-dark-mode-is-more-energy-efficent-how-to-calculate-image-energy-cost-45pp</link>
      <guid>https://dev.to/madsstoumann/why-dark-mode-is-more-energy-efficent-how-to-calculate-image-energy-cost-45pp</guid>
      <description>&lt;p&gt;When I read Tom Greenfords execellent book &lt;a href="https://abookapart.com/products/sustainable-web-design"&gt;Sustainable Web Design&lt;/a&gt;, there was one fact that stuck with me in particular:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Running Google Maps in night mode reduced screen power draw by 63 percent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why is that?&lt;/p&gt;

&lt;p&gt;When you think about it, it's quite simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Black is the most efficient color for OLED screens as the pixels are switched off, and white is the most energy intensive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So images use different amounts of energy, depending on the intensity of the &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt; lights in the pixel.&lt;/p&gt;

&lt;p&gt;Tom goes on to show two examples of his website &lt;strong&gt;before&lt;/strong&gt; and &lt;strong&gt;after&lt;/strong&gt; an update:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oye1nA2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eotv0iy0eevzileimfx2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oye1nA2d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eotv0iy0eevzileimfx2.png" alt="Before"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYaxIY4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt3gk4vors0ac6w6cm47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYaxIY4Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt3gk4vors0ac6w6cm47.png" alt="After"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The latter use almost half the energy of the first one! &lt;/p&gt;

&lt;p&gt;Unebelievable, right?&lt;/p&gt;

&lt;p&gt;So – I sat out to create a small tool for calculating the energy-intensity of an image!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#draw-the-image-onto-a-raw-ltcanvasgt-endraw-"&gt;
  &lt;/a&gt;
  Draw the image onto a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;-tag has a really useful method: &lt;code&gt;getImageData()&lt;/code&gt;, which will return a (very large!) array of all the pixels in an image – in chunks of 4: &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt; and &lt;code&gt;alpha&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this array, we can iterate and return an array of percentages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;imgData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get the average:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tool is on &lt;a href="https://codepen.io/stoumann/full/vYgzpNp"&gt;Codepen&lt;/a&gt; – try uploading your own image to check the light/energy intensity. &lt;/p&gt;

&lt;p&gt;The initial image is a pure rgb-color-image, with &lt;code&gt;blue&lt;/code&gt; set to 127: &lt;code&gt;rgb(0, 0, 127)&lt;/code&gt;. That results in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;R: 0%
G: 0%
B: 49%
Average: 17% 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/vYgzpNp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#but-its-not-so-simple"&gt;
  &lt;/a&gt;
  But … It's Not So Simple
&lt;/h2&gt;

&lt;p&gt;While this tool will give you a hint about the energy-usage of an image, it's much more complex than that.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Visible_spectrum"&gt;photon energy&lt;/a&gt; differs for different wavelengths, with red being lowest and violet being highest.&lt;/p&gt;

&lt;p&gt;A pixel contains approx. 10.000 photons, so I assume it's possible to calculate the &lt;strong&gt;eV&lt;/strong&gt; cost of an image in a particular resolution – and then convert that number to &lt;strong&gt;Watt&lt;/strong&gt; – but it's beyond my skills!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It would be nice, if a tool like &lt;em&gt;Lighthouse&lt;/em&gt; could calculate the energy-effectiveness of a website – perhaps compared to a list of how much energy popular devices use, when all pixels are either black or white.&lt;/p&gt;

&lt;p&gt;This way you could test how much &lt;em&gt;battery drain&lt;/em&gt; you could prevent by designing darker websites!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>How It’s Going</title>
      <author>Timi Bello</author>
      <pubDate>Mon, 19 Apr 2021 11:24:11 +0000</pubDate>
      <link>https://dev.to/ourtimefortech/how-it-s-going-20g</link>
      <guid>https://dev.to/ourtimefortech/how-it-s-going-20g</guid>
      <description>&lt;p&gt;Another week in Our Time for Tech has gone by. In the past week, we had a variety of discussions as regards the development process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, we had to stop the use of the Devise Gem and the reason was that as we worked further on different features of the App, it was seen (with our Senior Engineers’ help) that it is too complex to fit into the needs of our App. This caused us to have another version of the App on the GitHub repo, of which everything has been running smoothly so far. &lt;/p&gt;

&lt;p&gt;This also taught me that;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Just because something is popular doesn’t mean that it’s going to fix your current project.” - Arit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Additionally&lt;/em&gt;, we decided to reduce our App’s MVP by removing the worker-slots feature which allows businesses to alert workers as regards their availability which is specific for upcoming shifts. The removal of this feature was because working on this is far more complex for the time we have which is now less than 7 weeks, including QA(Quality Assurance/smoke testing) and User feedback.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Furthermore&lt;/em&gt;, I learned how important it is to document/write down your progress in whatever you’re learning as it helps you to communicate effectively what you’ve done, which is a vital skill for a developer. &lt;br&gt;
We were also advised and told of the importance of keeping our PRs(Pull Requests) small due to its efficiency and how it makes reviews easier. Everybody likes Small PRs while Long PRs are not liked as they are known to stay for a long time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Currently&lt;/em&gt;, we’re all working on the UI styling of the App of which we are using SASS and Bootstrap which gives us readable code. In advance, I’m excited about how the guide on using the MiniTests Library is going to look like. As promised by Arit, a collaboration is ongoing with her and Chris Oliver Of GoRails in creating the guide for the testing of the App. &lt;/p&gt;

&lt;p&gt;I’m also glad about how my team and I (now 4 of us) have improved on collaborating, communicating more effectively, and growing together.  &lt;/p&gt;

&lt;p&gt;Some Noteworthy points I learned in the past week:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“It’s great to be comfortable with uncertainty”. &lt;br&gt;
“Uncertainty is something that’s part of a developer’s life.”&lt;br&gt;
“Get comfortable with being uncomfortable”&lt;br&gt;
“Assume best intentions when giving and receiving feedback.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m looking forward to more learning and excited to see where we go from here. Thanks for reading!&lt;/p&gt;

&lt;p&gt;Follow along with DEV posts from my cohort: &lt;br&gt;
&lt;a href="https://dev.to/ourtimefortech"&gt;https://dev.to/ourtimefortech&lt;/a&gt;&lt;br&gt;
Check out Our Time for Tech: &lt;br&gt;
&lt;a href="https://ourtimefortech.org/"&gt;https://ourtimefortech.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@ilyapavlov?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ilya Pavlov&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/4096-by-4096-coding-picture?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>weeklylearn</category>
      <category>weeklyretro</category>
      <category>devsjournal</category>
      <category>rails</category>
    </item>
    <item>
      <title>DevDojo Weekly Winners Week 3 April 2021</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 19 Apr 2021 10:49:31 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/devdojo-weekly-winners-week-3-april-2021-4ink</link>
      <guid>https://dev.to/bobbyiliev/devdojo-weekly-winners-week-3-april-2021-4ink</guid>
      <description>&lt;p&gt;It's that time of the week again. That's right, the time of the week where we congratulate five winners on DevDojo to win a quick $20 for writing an awesome article or tutorial.&lt;/p&gt;

&lt;p&gt;If you want to learn more about how you can join in on this weekly contest. Click here to check out the official rules.&lt;/p&gt;

&lt;p&gt;Ok, below are the five posts that we have selected this week. In no particular order, here are your weekly winners. 🏆&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-25-marvelous-image-resources"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://devdojo.com/savio/25-marvelous-resources-to-satisfy-your-image-needs"&gt;25 Marvelous Image Resources&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Check out these awesome 25 resources to find the perfect image for any of your web development needs. Written by &lt;a href="https://devdojo.com/savio"&gt;savio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/savio/25-marvelous-resources-to-satisfy-your-image-needs"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18tyYpG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/25-marvelous-resources-to-satisfy-your-image-needs1.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="25 Marvelous Image Resources"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-css-variables"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://devdojo.com/zfett/css-variables-what-are-they-how-can-they-be-used"&gt;CSS Variables&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Learn all about CSS variables. What are they and how to use them. This fantastic article was written by &lt;a href="https://devdojo.com/zfett"&gt;zfett&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/zfett/css-variables-what-are-they-how-can-they-be-used"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Va5uyGP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/css-variables-what-are-they-how-can-they-be-used4.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="CSS Variables"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-what-is-redux"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://devdojo.com/rahulism/what-is-redux-practical-guide-to-redux"&gt;What is Redux?&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Learn about Redux and how you can use it in your React projects. This rad tutorial was written by &lt;a href="https://devdojo.com/rahulism"&gt;rahulism&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/rahulism/what-is-redux-practical-guide-to-redux"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unwcYXmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/what-is-redux-practical-guide-to-redux2.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="What is Redux?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-how-to-stay-productive-as-a-developer"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://devdojo.com/bo-iliev/5-tips-on-how-to-stay-motivated-and-productive"&gt;How To Stay Productive as a Developer&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here are five sure-fire ways to stay motivated and productive as a developer. You've got to check out this excellent article posted by &lt;a href="https://devdojo.com/bo-iliev"&gt;bo-iliev&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/bo-iliev/5-tips-on-how-to-stay-motivated-and-productive"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wr-0fGbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/5-tips-on-how-to-stay-motivated-and-productive2.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="How To Stay Productive as a Developer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-the-react-tutorial-for-2021"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://devdojo.com/reedbarger/the-react-tutorial-for-2021-a-complete-guide"&gt;The React Tutorial for 2021&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;This post is the ultimate React Tutorial for 2021. It's a complete guide to help you learn the ins and outs of React. This bitchin' guide was written by &lt;a href="https://devdojo.com/reedbarger"&gt;reedbarger&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devdojo.com/reedbarger/the-react-tutorial-for-2021-a-complete-guide"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cK3Ohq5M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/posts/images/April2021/the-react-tutorial-for-2021-a-complete-guide.jpg%3Fauto%3Dformat%26q%3D70%26w%3D1280" alt="The React Tutorial for 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We had another great week of tutorials and posts written on the DevDojo. Thanks to everyone who is helping to make this community thrive with excellent content 🙌&lt;/p&gt;

&lt;p&gt;I wish you a fantastic upcoming week. Remember to have fun as your coding away on your projects because being a developer truly is amazing. 😊&lt;/p&gt;

</description>
      <category>writing</category>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
