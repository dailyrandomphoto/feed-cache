<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Visual Studio Code Keyboard Shortcuts for Windows</title>
      <author>Archit Sharma</author>
      <pubDate>Mon, 02 Aug 2021 10:03:17 +0000</pubDate>
      <link>https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh</link>
      <guid>https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh</guid>
      <description>&lt;p&gt;&lt;strong&gt;Visual Studio Code is the most popular code editor or IDE (Integrated Development Environment) currently. VS Code is Free, built on open source, easy to use code editor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visual Studio Code keyboard shortcuts are helps developers in writing code more efficiently and for boosting their working performance.&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#shortcut-keys-are-categorized-in-following-categories-"&gt;
  &lt;/a&gt;
  Shortcut keys are categorized in following categories :-
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;General Shortcuts&lt;/li&gt;
&lt;li&gt;Basic Editing Shortcuts&lt;/li&gt;
&lt;li&gt;Navigation Shortcuts&lt;/li&gt;
&lt;li&gt;Search and replace Shortcuts&lt;/li&gt;
&lt;li&gt;Multi-cursor and selection Shortcuts&lt;/li&gt;
&lt;li&gt;Rich languages editing Shortcuts&lt;/li&gt;
&lt;li&gt;Editor management Shortcuts&lt;/li&gt;
&lt;li&gt;File management Shortcuts&lt;/li&gt;
&lt;li&gt;Debug Shortcuts&lt;/li&gt;
&lt;li&gt;Integrated terminal Shortcuts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Shortcut Key&lt;/code&gt;       -   Description&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-shortcuts"&gt;
  &lt;/a&gt;
  General Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+Shift+P, F1&lt;/code&gt;   -   &lt;em&gt;Show Command Palette&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt;        -   &lt;em&gt;Quick Open, Go to File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+N&lt;/code&gt;      -   &lt;em&gt;New window&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+W&lt;/code&gt;      -   &lt;em&gt;Close window&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+,&lt;/code&gt;        -   &lt;em&gt;User Settings&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+S&lt;/code&gt;         -   &lt;em&gt;Keyboard Shortcuts&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-editing"&gt;
  &lt;/a&gt;
  Basic Editing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+X&lt;/code&gt;        -   &lt;em&gt;Cut line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+C&lt;/code&gt;        -   &lt;em&gt;Copy line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+ ↑ / ↓&lt;/code&gt;        -   &lt;em&gt;Move line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt + ↓ / ↑&lt;/code&gt;  -    &lt;em&gt;Copy line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+K&lt;/code&gt;      -   &lt;em&gt;Delete line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Enter&lt;/code&gt;        -   &lt;em&gt;Insert line below&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Enter&lt;/code&gt;   -    &lt;em&gt;Insert line above&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+\&lt;/code&gt;      -   &lt;em&gt;Jump to matching bracket&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+] / [&lt;/code&gt;        -   &lt;em&gt;Indent/outdent line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Home / End&lt;/code&gt;        -   &lt;em&gt;Go to beginning/end of line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Home&lt;/code&gt;         -   &lt;em&gt;Go to beginning of file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+End&lt;/code&gt;      -   &lt;em&gt;Go to end of file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+↑ / ↓&lt;/code&gt;        -   &lt;em&gt;Scroll line up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+PgUp / PgDn&lt;/code&gt;    -    &lt;em&gt;Scroll page up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+[&lt;/code&gt;      -   &lt;em&gt;Fold (collapse) region&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+]&lt;/code&gt;      -   &lt;em&gt;Unfold (uncollapse) region&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+[&lt;/code&gt;         -   &lt;em&gt;Fold (collapse) all subregions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+]&lt;/code&gt;         -   &lt;em&gt;Unfold (uncollapse) all subregions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+0&lt;/code&gt;         -   &lt;em&gt;Fold (collapse) all regions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+J&lt;/code&gt;         -   &lt;em&gt;Unfold (uncollapse) all regions&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+C&lt;/code&gt;         -   &lt;em&gt;Add line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+U&lt;/code&gt;         -   &lt;em&gt;Remove line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+/&lt;/code&gt;        -   &lt;em&gt;Toggle line comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+A&lt;/code&gt;       -   &lt;em&gt;Toggle block comment&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+Z&lt;/code&gt;                 -   &lt;em&gt;Toggle word wrap&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#navigation-shortcuts"&gt;
  &lt;/a&gt;
  Navigation Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+T&lt;/code&gt; - &lt;em&gt;Show all Symbols&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+G&lt;/code&gt; - &lt;em&gt;Go to Line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+P&lt;/code&gt; - &lt;em&gt;Go to File&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+O&lt;/code&gt; -   &lt;em&gt;Go to Symbol&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+M&lt;/code&gt; -   &lt;em&gt;Show Problems panel&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F8&lt;/code&gt; - &lt;em&gt;Go to the next error&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F8&lt;/code&gt; -   &lt;em&gt;Go to previous error&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Tab&lt;/code&gt; - &lt;em&gt;Navigate editor group history&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+ ← / →&lt;/code&gt; - &lt;em&gt;Go back / forward&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+M&lt;/code&gt; - &lt;em&gt;Toggle Tab moves the focus&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-and-replace"&gt;
  &lt;/a&gt;
  Search and replace
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+F&lt;/code&gt; - &lt;em&gt;Find&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+H&lt;/code&gt; - &lt;em&gt;Replace&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F3 / Shift+F3&lt;/code&gt;  - &lt;em&gt;Find next/previous&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+Enter&lt;/code&gt;  - &lt;em&gt;Select all occurences of Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+D&lt;/code&gt;  - &lt;em&gt;Add selection to next Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+D&lt;/code&gt; - &lt;em&gt;Move last selection to next Find match&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+C / R / W&lt;/code&gt; - &lt;em&gt;Toggle case-sensitive / regex / whole word&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multicursor-and-selection-shortcuts"&gt;
  &lt;/a&gt;
  Multi-cursor and selection Shortcuts
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Alt+Click&lt;/code&gt; - &lt;em&gt;Insert cursor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Alt+ ↑ / ↓&lt;/code&gt; - &lt;em&gt;Insert cursor above / below&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+U&lt;/code&gt; - &lt;em&gt;Undo last cursor operation&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+I&lt;/code&gt; - &lt;em&gt;Insert cursor at end of each line selected&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+L&lt;/code&gt; - &lt;em&gt;Select current line&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+L&lt;/code&gt; - &lt;em&gt;Select all occurrences of current selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+F2&lt;/code&gt;  - &lt;em&gt;Select all occurrences of current word&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+→&lt;/code&gt; - &lt;em&gt;Expand selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+←&lt;/code&gt; - &lt;em&gt;Shrink selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt + (drag mouse)&lt;/code&gt; - &lt;em&gt;Column (box) selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Alt + (arrow key)&lt;/code&gt; - &lt;em&gt;Column (box) selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Alt + PgUp/PgDn&lt;/code&gt; - &lt;em&gt;Column (box) selection page up/down&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rich-languages-editing"&gt;
  &lt;/a&gt;
  Rich languages editing
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+Space&lt;/code&gt; - &lt;em&gt;Trigger suggestion&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Space&lt;/code&gt;  - &lt;em&gt;Trigger parameter hints&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+Alt+F&lt;/code&gt; - &lt;em&gt;Format document&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+F&lt;/code&gt; - &lt;em&gt;Format selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F12&lt;/code&gt; - &lt;em&gt;Go to Definition&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Alt+F12&lt;/code&gt; - &lt;em&gt;Peek Definition&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K F12&lt;/code&gt; - &lt;em&gt;Open Definition to the side&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+.&lt;/code&gt; - &lt;em&gt;Quick Fix&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F12&lt;/code&gt; - &lt;em&gt;Show References&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F2&lt;/code&gt; - &lt;em&gt;Rename Symbol&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+X&lt;/code&gt; - &lt;em&gt;Trim trailing whitespace&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K M&lt;/code&gt; - &lt;em&gt;Change file language&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editor-management"&gt;
  &lt;/a&gt;
  Editor management
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+F4, Ctrl+W&lt;/code&gt; - &lt;em&gt;Close editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K F&lt;/code&gt; - &lt;em&gt;Close folder&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+\&lt;/code&gt; - &lt;em&gt;Split editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+ 1 / 2 / 3&lt;/code&gt; - &lt;em&gt;Focus into 1st, 2nd or 3rd editor group&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+ ←/→&lt;/code&gt; - &lt;em&gt;Focus into previous/next editor group&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+PgUp / PgDn&lt;/code&gt; - &lt;em&gt;Move editor left/right&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K ← / →&lt;/code&gt; - &lt;em&gt;Move active editor group&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#file-management"&gt;
  &lt;/a&gt;
  File management
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+N - *New File*&lt;br&gt;
&lt;/code&gt;Ctrl+O - &lt;em&gt;Open File...&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+S - *Save*&lt;br&gt;
&lt;/code&gt;Ctrl+Shift+S  - &lt;em&gt;Save As...&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K S - *Save All*&lt;br&gt;
&lt;/code&gt;Ctrl+F4 - &lt;em&gt;Close&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+W - *Close All*&lt;br&gt;
&lt;/code&gt;Ctrl+Shift+T - &lt;em&gt;Reopen closed editor&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K - *Enter Keep preview mode editor open*&lt;br&gt;
&lt;/code&gt;Ctrl+Tab - &lt;em&gt;Open next&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Shift+Tab - *Open previous*&lt;br&gt;
&lt;/code&gt;Ctrl+K P - &lt;em&gt;Copy path of active file&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K R - *Reveal active file in Explorer*&lt;br&gt;
&lt;/code&gt;Ctrl+K O - &lt;em&gt;Show active file in new window/instance&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  Debug
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;F9&lt;/code&gt; - &lt;em&gt;Toggle breakpoint&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F5&lt;/code&gt; - &lt;em&gt;Start/Continue&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+F5&lt;/code&gt; - &lt;em&gt;Stop&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F11 / Shift+F11&lt;/code&gt; - &lt;em&gt;Step into/out&lt;/em&gt;&lt;br&gt;
&lt;code&gt;F10&lt;/code&gt; - &lt;em&gt;Step over&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+K Ctrl+I&lt;/code&gt; - &lt;em&gt;Show hover&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrated-terminal"&gt;
  &lt;/a&gt;
  Integrated terminal
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Ctrl+C&lt;/code&gt; - &lt;em&gt;Copy selection&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+V&lt;/code&gt; - &lt;em&gt;Paste into active terminal&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+↑ / ↓&lt;/code&gt; - &lt;em&gt;Scroll up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Shift+PgUp / PgDn&lt;/code&gt; - &lt;em&gt;Scroll page up/down&lt;/em&gt;&lt;br&gt;
&lt;code&gt;Ctrl+Home / End&lt;/code&gt; - &lt;em&gt;Scroll to top/bottom&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Other operating systems’ keyboard shortcuts and additional&lt;br&gt;
unassigned shortcuts available at &lt;a href="//aka.ms/vscodekeybindings"&gt;Click here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vscode</category>
      <category>windows</category>
      <category>programming</category>
      <category>microsoft</category>
    </item>
    <item>
      <title>Difference between include, require, include_once and require_once in PHP</title>
      <author>Amine Saissi Hassani</author>
      <pubDate>Mon, 02 Aug 2021 09:33:50 +0000</pubDate>
      <link>https://dev.to/aminesaissihassani/difference-between-include-require-includeonce-and-requireonce-in-php-48ok</link>
      <guid>https://dev.to/aminesaissihassani/difference-between-include-require-includeonce-and-requireonce-in-php-48ok</guid>
      <description>&lt;p&gt;First of all we should know what is the difference and similarity between include() and require(), include() and require() are used to include other files into a PHP file, and the difference between them are the include() generates a warning when there is an error, but the script will continue execution, otherwise, the require() generates a fatal error, and the script will stop.&lt;/p&gt;

&lt;p&gt;The require_once() statement is similar to require() except require_once() will check if the file has already been included, and if so, it will not require it again, same with include_once().&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Reasons Why You Need To Have A Professional Portfolio.</title>
      <author>Lucius Emmanuel Emmaccen</author>
      <pubDate>Mon, 02 Aug 2021 09:33:07 +0000</pubDate>
      <link>https://dev.to/emmaccen/reasons-why-you-need-to-have-a-professional-portfolio-5cji</link>
      <guid>https://dev.to/emmaccen/reasons-why-you-need-to-have-a-professional-portfolio-5cji</guid>
      <description>&lt;p&gt;I have often found people to shy away from the practice of having a professional portfolio. While it might seem negligible in some situations, more often than not, it has proven to be of great importance.&lt;/p&gt;

&lt;p&gt;In this article, we are going to observe and answer a few questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is a portfolio?&lt;/li&gt;
&lt;li&gt;Why do you need one?&lt;/li&gt;
&lt;li&gt;What jobs/industries use portfolios&lt;/li&gt;
&lt;li&gt;What should go into a portfolio&lt;/li&gt;
&lt;li&gt;What should not go into a portfolio&lt;/li&gt;
&lt;li&gt;Should you have a "hard copy" or "online" portfolio&lt;/li&gt;
&lt;li&gt;How do you create one?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-a-portfolio"&gt;
  &lt;/a&gt;
  What is a portfolio?
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;A portfolio is a collection of records or documentation that provides proof of accomplishments, experience, skills, attributions and work samples. It can be a website, a binder or a physical book, depending on the line of work or profession.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;It might be necessary to note that a &lt;strong&gt;Portfolio&lt;/strong&gt; is quite different from a &lt;strong&gt;Resume&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/15187218-Adam-Zonski-Personal-Portfolio-Website?utm_source=Clipboard_Shot&amp;amp;utm_campaign=nurpraditya&amp;amp;utm_content=Adam%20Zonski%20-%20Personal%20Portfolio%20Website&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=nurpraditya&amp;amp;utm_content=Adam%20Zonski%20-%20Personal%20Portfolio%20Website&amp;amp;utm_medium=Social_Share"&gt;Design by Nur Praditya&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFl99atE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggt2jsdvv7ie7q819eok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFl99atE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggt2jsdvv7ie7q819eok.png" alt="Design by Nur Praditya"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-do-you-need-one"&gt;
  &lt;/a&gt;
  Why do you need one?
&lt;/h4&gt;

&lt;p&gt;Having a portfolio can improve your recognition in a professional or academic setting. It is an opportunity to illustrate your competencies, presents evidence of your skills and abilities, highlights a comprehensive idea of your best work and can be seen as a brochure for the services you are selling. It allows you to &lt;em&gt;show and not just tell&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Portfolios are great for freelancers or independent contractors, business owners or consultants who need to provide work samples to potential clients. The practice of putting together a portfolio: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serves as a reminder of your past accomplishments and acquired skills&lt;/li&gt;
&lt;li&gt;Allows you to showcase your creativity and persona that differentiates you from your competition&lt;/li&gt;
&lt;li&gt;A source of motivation, high self-esteem and confidence&lt;/li&gt;
&lt;li&gt;Gives you credibility&lt;/li&gt;
&lt;li&gt;Makes you a more effective interviewee&lt;/li&gt;
&lt;li&gt;Helps potential clients visualize working with you&lt;/li&gt;
&lt;li&gt;Can help apply for jobs, scholarships, grants and negotiating promotions and raises.&lt;/li&gt;
&lt;li&gt;Can pass for work and learning experience&lt;/li&gt;
&lt;li&gt;Helps you to be seen and discovered (e.g. online portfolio)&lt;/li&gt;
&lt;li&gt;Allows you to market the services you provide and build a reputation and following.&lt;/li&gt;
&lt;li&gt;Demonstrates consistency and compels you to learn/do more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are more reasons to consider, but I am sure you get the idea.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/14909770-Landing-Page-CV-Head-of-Marketing?utm_source=Clipboard_Shot&amp;amp;utm_campaign=outcrowd&amp;amp;utm_content=Landing%20Page%20-%20CV%20Head%20of%20Marketing&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=outcrowd&amp;amp;utm_content=Landing%20Page%20-%20CV%20Head%20of%20Marketing&amp;amp;utm_medium=Social_Share"&gt;Design by Outcrowd&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YAz-GrhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lzrom74o1b9x4uo31g9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YAz-GrhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7lzrom74o1b9x4uo31g9.png" alt="Design by Outcrowd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-jobs-industries-use-portfolios"&gt;
  &lt;/a&gt;
  What jobs / industries use portfolios?
&lt;/h4&gt;

&lt;p&gt;Years back, it is common to see more people in the &lt;strong&gt;Visual Profession&lt;/strong&gt; having a portfolio, such as Artists and Creative professionals, photographers, architects, teachers, graphic designers, front-end engineers, painters, etc.&lt;/p&gt;

&lt;p&gt;In the world today, every professional can benefit from having one, even those in the fields &lt;em&gt;not directly&lt;/em&gt; related to visual. e.g. Backend engineers (could create documentation of their involvement in a project, a short video or utilize GitHub etc.), Radio broadcasters/podcasters, Attorneys, judges and politicians, coaches and athletes etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dribbble.com/shots/15380331-Modern-Furniture-Website-concept?utm_source=Clipboard_Shot&amp;amp;utm_campaign=thomsoon_com&amp;amp;utm_content=Modern%20Furniture%20-%20Website%20concept&amp;amp;utm_medium=Social_Share&amp;amp;utm_source=Clipboard_Shot&amp;amp;utm_campaign=thomsoon_com&amp;amp;utm_content=Modern%20Furniture%20-%20Website%20concept&amp;amp;utm_medium=Social_Share"&gt;Design by Tomasz Mazurczak&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYlnJzqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78uf0pjfq0lkxd82yqzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYlnJzqM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78uf0pjfq0lkxd82yqzr.png" alt="Design by Tomasz Mazurczak"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-should-go-into-a-portfolio"&gt;
  &lt;/a&gt;
  What should go into a portfolio?
&lt;/h4&gt;

&lt;p&gt;Anything that spotlights your accomplishments and abilities should go in your portfolio. It should capture an idea of who you are and the services you provide.&lt;/p&gt;

&lt;p&gt;Here are some items I would recommend you incorporate in your portfolio:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A short and precise summary of who you are.&lt;/li&gt;
&lt;li&gt;Updated resume or CV&lt;/li&gt;
&lt;li&gt;List of skills, tools or technologies you use&lt;/li&gt;
&lt;li&gt;Work experience&lt;/li&gt;
&lt;li&gt;Diplomas (Education), professional certificates and Transcripts (if any)&lt;/li&gt;
&lt;li&gt;Reference letters, awards, testimonials, and LinkedIn recommendations&lt;/li&gt;
&lt;li&gt;Some of your content (if you create content) e.g. Blogs, YouTube videos, Podcasts etc.&lt;/li&gt;
&lt;li&gt;Work samples you have created e.g. Websites, UI/UX designs, project documentation or case studies, video presentations, Artwork (for artists), PowerPoint presentations, Slides etc.&lt;/li&gt;
&lt;li&gt;Lists of accomplishments/awards&lt;/li&gt;
&lt;li&gt;Thank you notes or emails from clients or co-workers (Testimonials) etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-should-not-go-into-a-portfolio"&gt;
  &lt;/a&gt;
  What should not go into a portfolio?
&lt;/h4&gt;

&lt;p&gt;You might get tempted to want a whole Wikipedia of things on your portfolio, but more often than not, it does not increase positive perception. Being super precise and detailed is very important when structuring your portfolio (which is beyond the scope of this article) as it can considerably improve the way you are seen as a professional.&lt;br&gt;
Here are a couple of things I have found to be less useful in a portfolio&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having a waterfall of summary in your "About Me" section. A couple of lines of text should pretty much tell the story&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Do not put ratings or percentages on your skills&lt;/strong&gt;. I am guilty as I did it in the past. We could argue all day about it, but the truth is, own your skill and do not put a dent in it. Having things like: HTML(50%), CSS(90%), Photoshop(45%) etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Here's a screenshot taken from my first portfolio website&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEHgopDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/burclur56uitbmg0bwq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEHgopDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/burclur56uitbmg0bwq8.png" alt="skills with ratings"&gt;&lt;/a&gt;&lt;br&gt;
Please, remove the ratings. Your 50% rating might be the 100% a company is looking for.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Overly-complicated, overly-designed layout&lt;/li&gt;
&lt;li&gt;Lack of proper structure and personality&lt;/li&gt;
&lt;li&gt;Do not tell personal stories.&lt;/li&gt;
&lt;li&gt;Do not include your house address (Employers will not perceive you as being security conscious, same for your CV). Your email is just fine.&lt;/li&gt;
&lt;li&gt;Only include things relevant to your field of work/study.&lt;/li&gt;
&lt;li&gt;Use only high-fidelity images (but one that will still load fast in the browser)&lt;/li&gt;
&lt;li&gt;Provide a way to get in touch e.g. A mail, link or a contact form.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your get-in-touch section might look something like this if you decided to go with a form field:&lt;br&gt;
&lt;em&gt;Screenshot is taken from my current portfolio&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci2Kpwr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2t7fqfcfvwr3icw2lzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci2Kpwr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2t7fqfcfvwr3icw2lzo.png" alt="portfolio contact section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#should-you-have-a-hard-copy-or-online-portfolio"&gt;
  &lt;/a&gt;
  Should you have a hard copy or online portfolio?
&lt;/h4&gt;

&lt;p&gt;Whether or not you use an online or hard copy portfolio, all depends on your industry and personal preference. Research your industry for what's common and beneficial, then, make a decision. &lt;br&gt;
whichever industry it is, it might still be beneficial to have an online presence.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-do-you-create-one"&gt;
  &lt;/a&gt;
  How do you create one?
&lt;/h4&gt;

&lt;p&gt;For online portfolios, you can build one for yourself if you are a web developer, have someone build one for you, or use a prebuilt template.&lt;br&gt;
Anyone you decide, be sure to research and make good decisions on what design best suits your field.&lt;/p&gt;

&lt;p&gt;For hard-copy portfolios, you can use a ring binder or leather-bound padfolio. Be sure to organize/tab them into sections.&lt;/p&gt;

&lt;p&gt;Feel free to google &lt;em&gt;“online portfolio websites”  or  “online portfolio builder”&lt;/em&gt;. You can also get design inspiration from hundreds of websites out there if you are building one for yourself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note: It does not have to be 100% a website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have seen people use several platforms as their portfolio, e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/u/0/"&gt;Google slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/"&gt;Google Drive portfolio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A PDF hosted online&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt; or &lt;a href="https://www.adobe.com/"&gt;Adobe&lt;/a&gt; Design with a "live link"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other options you could utilize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your &lt;a href="https://www.linkedin.com/"&gt;LinkedIn profile&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.github.com/"&gt;GitHub profile&lt;/a&gt; with projects having detailed ReadMe.md describing project specifications, features and your involvement&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.behance.net/"&gt;Behance&lt;/a&gt; and, many more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, research your industry and find what best suits you.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#pro-tips"&gt;
  &lt;/a&gt;
  Pro Tips
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Replace practice projects with professional ones as soon as you start having them, e.g. Remove the calculator web app you coded and replace it with your new blog website (even if it is just presentation/static).&lt;/li&gt;
&lt;li&gt;Update the CV on your portfolio as you update them on your PC or mobile&lt;/li&gt;
&lt;li&gt;Do not waste considerable time trying to make it perfect, it never will. You can always make minor updates later in the future.&lt;/li&gt;
&lt;li&gt;Get your portfolio reviewed by a more senior person in your field&lt;/li&gt;
&lt;li&gt;You do not need to have a hundred completed projects before you start a portfolio. Start where you're at, and you'll never regret it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's pretty much it. This article doesn't cover all you need to know and I'd appreciate it if you can drop more &lt;strong&gt;suggestions&lt;/strong&gt;, &lt;strong&gt;Portfolio design Inspiration links&lt;/strong&gt;, &lt;strong&gt;Your thoughts&lt;/strong&gt;, &lt;strong&gt;Your portfolio website link&lt;/strong&gt; to inspire others, and &lt;strong&gt;Comments&lt;/strong&gt; in the discussion box below. You might provide/say something important to other readers. Also, your feedbacks are welcome if this post needs improvement. Do bookmark, like/unicorn this post for reference (and also to support me)&lt;/p&gt;

&lt;p&gt;Keep an eye out. Soon, I will post a step by step process on "How to build a simple online portfolio as a web developer".&lt;/p&gt;

&lt;p&gt;Thanks for reading 😊.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>portfolio</category>
      <category>resume</category>
    </item>
    <item>
      <title>GraphQL Federation Crypto App</title>
      <author>Ania Kubow</author>
      <pubDate>Mon, 02 Aug 2021 09:22:55 +0000</pubDate>
      <link>https://dev.to/ania_kubow/graphql-federation-crypto-app-23lj</link>
      <guid>https://dev.to/ania_kubow/graphql-federation-crypto-app-23lj</guid>
      <description>&lt;p&gt;In this video I show you how to use GraphQL Federation by building a Crypto App. I will use React, Apollo GraphQL and a DataStax Astra database.&lt;/p&gt;

&lt;p&gt;0:00 Introduction&lt;br&gt;
1:38 Setting up our Database&lt;br&gt;
3:48 GraphQL API and Playground&lt;br&gt;
7:31 Schema-first approach&lt;br&gt;
14:51 Inserting Coins&lt;br&gt;
18:30 Creating our React App&lt;br&gt;
23:17 Apollo Gateway and Services&lt;br&gt;
51:22 Building out the Frontend&lt;br&gt;
1:14:14 Styling our Project&lt;/p&gt;

&lt;p&gt;Final code here: &lt;a href="https://github.com/kubowania/graphQL-federation-crypto"&gt;https://github.com/kubowania/graphQL-federation-crypto&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Promos codes in this video:&lt;br&gt;
💻 ANIA200 for $200 free credits from &lt;a href="https://www.datastax.com/"&gt;https://www.datastax.com/&lt;/a&gt;&lt;br&gt;
💻 ANIAKUBOW for 3 months free of Webstorm here: &lt;a href="https://jb.gg/webstorm_ide"&gt;https://jb.gg/webstorm_ide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T722_t-HTFw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;⭐ New to code and none of this is making sense? Watch my '12hr+ YouTube Coding Bootcamp' in which you will learn HTML, CSS and JavaScript Fundamentals completely from scratch. It's on my channel and its 100% free.&lt;/p&gt;

&lt;p&gt;⭐ In most videos I use Tabnine as my A.I autocompletion tool. You can download it for free here: &lt;a href="http://bit.ly/tabnine-top-tool"&gt;http://bit.ly/tabnine-top-tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ You can get a blockchain domain with my affiliate link here: &lt;a href="http://bit.ly/get-a-crypto-domain"&gt;http://bit.ly/get-a-crypto-domain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ If you would like to buy me a coffee, well thank you very much that is mega kind! : &lt;a href="https://www.buymeacoffee.com/aniakubow"&gt;https://www.buymeacoffee.com/aniakubow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⭐ Sign up for weekly coding tips from my newsletter partnership: &lt;a href="https://bit.ly/JS-tips"&gt;https://bit.ly/JS-tips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find me on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/ania_kubow"&gt;https://twitter.com/ania_kubow&lt;/a&gt;&lt;br&gt;
Instagram: &lt;a href="https://instagram.com/aniakubow"&gt;https://instagram.com/aniakubow&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>crypto</category>
      <category>react</category>
    </item>
    <item>
      <title>Why I shifted from C++ to JavaScript.</title>
      <author>Voider</author>
      <pubDate>Mon, 02 Aug 2021 09:17:26 +0000</pubDate>
      <link>https://dev.to/voider/why-i-shifted-from-c-to-javascript-2gll</link>
      <guid>https://dev.to/voider/why-i-shifted-from-c-to-javascript-2gll</guid>
      <description>&lt;p&gt;In this article I will talk about shifting from a compiled language (CPP) to an interpreted language (JS).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I have been coding for almost 3 years now and my native language has been C++ for most of that time, but recently I have been preferring JavaScript and I will cover why in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-is-better"&gt;
  &lt;/a&gt;
  Which is better?
&lt;/h2&gt;

&lt;p&gt;Answering this question depends on what do you want to achieve, for example if you want speed then you should definitely choose C++, you can look up tons of comparisons online between the two languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-preferring-js-recently"&gt;
  &lt;/a&gt;
  Why am I preferring JS recently.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I am a very lazy person and I try to use my brain capacity to the very bare minimum, so using a tool that handles my frontend and backend at the same time saves me the hassle of integrating things together if they are of a different language.&lt;/li&gt;
&lt;li&gt;It takes a whole lot less time (and brain capacity) to learn, I didn't even realize how hard C++ was until like a year later, but this will significantly help you as a software engineer.&lt;/li&gt;
&lt;li&gt;You can do so much with so little code, for example let's say you have an array of animals that has a name and species:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var animals = [
  { name: 'Fluffykins', species: 'rabbit' },
  { name: 'Caro',       species: 'dog' },
  { name: 'Hamilton',   species: 'dog' },
  { name: 'Harold',     species: 'fish' },
  { name: 'Ursula',     species: 'cat' },
  { name: 'Jimmy',      species: 'fish' }
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you want to copy the names of all the animals to another array, the normal way to do this is by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
var names = []
for (var i = 0; i &amp;lt; animals.length; i++) {
  names.push(animals[i].name)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-up-87-characters"&gt;
  &lt;/a&gt;
  taking up 87 characters
&lt;/h3&gt;

&lt;p&gt;but thanks to JavaScript's ES6 arrow functions we can do this in literally one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var names = animals.map((x) =&amp;gt; x.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#taking-up-38-characters"&gt;
  &lt;/a&gt;
  taking up 38 characters
&lt;/h3&gt;

&lt;p&gt;you literally just saved up writing 49 characters for yourself, if you can't see beauty in this I don't know when will you ever do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-word"&gt;
  &lt;/a&gt;
  Last word
&lt;/h2&gt;

&lt;p&gt;Again this is not a comparison at all, I am just stating my personal experience, you should use what's best for what you are working on and what you feel most comfortable with. Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>cpp</category>
    </item>
    <item>
      <title>Taking Context &amp; Hooks To The Next Level With Component Factories</title>
      <author>Itay Schechner</author>
      <pubDate>Mon, 02 Aug 2021 09:10:54 +0000</pubDate>
      <link>https://dev.to/itays123/taking-context-hooks-to-the-next-level-with-component-factories-46ad</link>
      <guid>https://dev.to/itays123/taking-context-hooks-to-the-next-level-with-component-factories-46ad</guid>
      <description>&lt;p&gt;Before you slander me in the comments, I just wanted to let you know: &lt;strong&gt;It's my opinion&lt;/strong&gt;. Not all readers will agree with it. I am new to this approach as well, and I wanted to hear your opinion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Why to use the component factory approach&lt;/li&gt;
&lt;li&gt;Supercharging the context API&lt;/li&gt;
&lt;li&gt;Usage outside of the context API&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a typical navigation bar component I wrote for one of my projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-gray-100 nav px-8 w-screen flex"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"md:px-4 lg:px-6 flex items-center h-16 md:ml-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-lg md:text-xl text-purple-900 font-bold"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Partydeck
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"links flex flex-grow md:flex-none items-stretch justify-end pl-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignedOutLinks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NavigationButton&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;GameWebsiteLink&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Join Game
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NavigationButton&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SignedInLinks&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There's nothing wrong with this component. In fact, most of you will even like it. However, what about this one:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NavigationBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"bg-theme-700 h-16 nav px-8 shadow-xl w-screen flex flex-row items-center justify-between"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center space-x-1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logo&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-6 h-6"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LinkablePartydeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-roboto font-bold text-white text-lg hover:text-theme-300"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"links flex items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyDecks&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewDeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NotAuthenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Login&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Register&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;NotAuthenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;JoinGameLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-bold font-roboto px-3 py-2 text-theme-700 bg-green rounded hover:bg-green-light ml-2"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Both components have the exact same functionality. Yet, when you read the second one, you can actually &lt;strong&gt;understand&lt;/strong&gt; exactly what you're seeing.&lt;/p&gt;

&lt;p&gt;Believe it or not, despite having much more components in my codebase - the overall amount of lines in the navigation source code has decreased dramatically.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#component-factories-to-the-rescue"&gt;
  &lt;/a&gt;
  Component factories to the rescue
&lt;/h2&gt;

&lt;p&gt;How did I do that? Using &lt;strong&gt;component factories&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Component factories are functions that return JSX providers. In those factories, you inject the functionality, but leave the styling to the parent component.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#why-do-use-them"&gt;
  &lt;/a&gt;
  Why do use them?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Increased code readability&lt;/li&gt;
&lt;li&gt;Ease of refactoring&lt;/li&gt;
&lt;li&gt;Increased Resusability&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#some-examples"&gt;
  &lt;/a&gt;
  Some examples
&lt;/h3&gt;

&lt;p&gt;The most classic examples I can provide are using the React Context API:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Context Action Factory&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I could create a &lt;code&gt;Logout&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Navigation/buttons.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Logout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Log Out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I used this Logout button in multiple places, and in each one of them it contained different styles.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// NavigationBar.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MyDecks&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NewDeck&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"nav-button hidden-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// AuthPopup.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex font-bold w-max space-x-3 items-center"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Logout&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-500 text-sm"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Authenticated&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The Context Conditional Wrapper Factory&lt;/strong&gt;&lt;br&gt;
I find this one extremely useful. &lt;/p&gt;

&lt;p&gt;Suppose you want to conditionally render a fraction of your application to signed in users only. You'd do something like that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SuperSafeComponent&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Or, suppose you have a dialog and a button that opens it. Your dialog would look something like that:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDialogContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isVisible&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In an enterprise application, you might have tens of those. Whereas, the conditional wrapper factory will save you a lot of time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ConditonalWrapperFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Wrapper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shouldRender&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// AuthFilters.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Authenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NotAuthenticated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createConditionalWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;AuthContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Dialog.tsx&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WhenVisible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DialogContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Dialog&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;WhenVisible&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      ...
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;WhenVisible&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#usage-outside-of-the-context-api"&gt;
  &lt;/a&gt;
  Usage outside of the Context API.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Glyph Factory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In my project, I have 30 decorative photos, located anywhere around the website. To save myself time and effort, I created this simple factory:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// glyphFactory.tsx&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;GlyphProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createGlyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;GlyphProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;''&lt;/span&gt; &lt;span class="cm"&gt;/* My favorite feature! */&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// res/glyphs/LightBulbGlyph.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;glyph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGlyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;glyph&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;List Factory&lt;/strong&gt; and &lt;strong&gt;Decorated Pharagraph Factory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are pretty simple ones to understand. In my website, I had plenty of "about-related" static content. I found myself over-creating a list of text, and over-creating a flexbox with a Glyph and a text.&lt;/p&gt;

&lt;p&gt;For that, I created those factories:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ListFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// DecoratedPharagraphFactory.tsx&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Glyph&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSXProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GlyphProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;withClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Glyph&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h-full"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, I created those in my home page code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home/rules.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CardPick&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/CardPick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;JudgePick&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/JudgePick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/Question&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Victory&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../resources/glyphs/Victory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../shared/decoratedPharagraphFactory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JudgePickedRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;JudgePick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Each round, a judge is picked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;QuestionRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The other players are given a question and and 4 answer cards, and pick the funniest or most clever answer of their choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BestMatchRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;CardPick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The judge gets the question and the answers displayed anonymously, and picks the best answer of their choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VictoryRule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Victory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The player who submitted the answer, wins the round!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I then left it to the home page component to handle he responsive displaying logic and the styling. How Simple Is That?&lt;/p&gt;

&lt;p&gt;Another good usage was in the about page:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IdeaSubtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;LightBulb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Idea of Partydeck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FeaturesList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Playable from distance&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Inclusive and fair - the game makes the judge or the round judge based on the quality of the answer card rather than the quality of the player who had it.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Binding - it’s impossible to win when you are not 100% focused&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Personalized - each one can make their own customized version&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connecting - the game makes you get to know the other players better&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GettingBetterSubtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createDecoratedPharagraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;Growth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Always Getting Better&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GitHubLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;externalLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GitHub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://github.com/itays123/partydeck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ScrollablePageWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Us&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PageTitle&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;IdeaSubtitle&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"decorated-subtitle"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-section"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;When we thought of Partydeck, we wanted a game that is:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FeaturesList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Those Guiding Principals will keep guiding us in the next versions.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GettingBetterSubtitle&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"decorated-subtitle"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"content-section space-y-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Developing an application takes time and patience, and the result is
          not always perfect.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            If you have a bug report, a suggestion, a comment or any feedback at
            all regarding this website, we encourage you to contact us via
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GitHubLink&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"underline"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;, or the email link described there.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Thanks a lot, the Partydeck team.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ScrollablePageWrapper&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Look how simple is that!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Do you have any ideas of using component factories in your next React.js project? Do you think it's a good approach at all? Let me know in the comments!&lt;/p&gt;

&lt;p&gt;View the full source code: (branch &lt;code&gt;1.1.2-redesign&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itays123"&gt;
        itays123
      &lt;/a&gt; / &lt;a href="https://github.com/itays123/partydeck"&gt;
        partydeck
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A cool online card game!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>react</category>
      <category>webdev</category>
      <category>functional</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Tips and Tricks to Ace the Certified Kubernetes Application Developer</title>
      <author>Sahan</author>
      <pubDate>Mon, 02 Aug 2021 09:04:00 +0000</pubDate>
      <link>https://dev.to/sahan/tips-and-tricks-to-ace-the-certified-kubernetes-application-developer-175k</link>
      <guid>https://dev.to/sahan/tips-and-tricks-to-ace-the-certified-kubernetes-application-developer-175k</guid>
      <description>&lt;p&gt;I recently passed the &lt;a href="https://www.cncf.io/certification/ckad/"&gt;Certified Kubernetes Application Developer&lt;/a&gt; exam and thought to share some tips and tricks that might come in handy if you are also planning to take the exam in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  📔 Background
&lt;/h3&gt;

&lt;p&gt;About a month ago, I decided to learn more about Kubernetes as it would be really useful for the my current role. Prior to that, I was always fascinated by Kubernetes but never got the chance to work on an actual system that used it. I knew how it worked from a 10,000 feet view, but didn’t have an idea of core components, basic constructs and literally to be able to do anything with it.&lt;/p&gt;

&lt;p&gt;Having taken the exam, I’m quite comfortable navigating through Kubernetes and now it makes sense when I’m doing something with it, rather than merely following some commands.&lt;/p&gt;

&lt;p&gt;CKAD is a hands-on exam and managing your time is absolutely crucial. I hope you find the following tips useful✌️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-of-the-exam"&gt;
  &lt;/a&gt;
  🗒️ Summary of the exam
&lt;/h3&gt;

&lt;p&gt;To summarize the key facts about the CKAD exam,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passing score is 66%&lt;/li&gt;
&lt;li&gt;2 hours duration, comprised of 19 questions&lt;/li&gt;
&lt;li&gt;Questions will have varying weights (from 2% - 13%)&lt;/li&gt;
&lt;li&gt;You can also open only one tab to browse Kubernetes documentation&lt;/li&gt;
&lt;li&gt;Remotely proctored&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#aliases-and-bash-tricks"&gt;
  &lt;/a&gt;
  💻 Aliases and bash tricks
&lt;/h3&gt;

&lt;p&gt;This is a really important first that I can’t recommend enough. I was using the full &lt;code&gt;kubectl&lt;/code&gt; command during the study phase but later started using just &lt;code&gt;k&lt;/code&gt; by setting up an alias when I was practising simply to cut down the time when typing commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially, it will take a few seconds to type this out but it will pay dividends throughout the exam. Here are a few more if you are interested. You don’t need to use everything in here though. In fact, I only used the above alias.&lt;/p&gt;

&lt;p&gt;Feel free to mix and match the commands you are comfortable with 👍&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl describe'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl run'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl create'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl explain'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kgp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl get pods'&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;kgs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'kubectl get svc'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You don’t need to be a Linux guru to take the exam, but, remember you will do it in some Linux env. (potentially Ubuntu). So it helps to know a few basic Bash commands if you are coming from Windows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;cp&lt;/code&gt; - Copy files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv&lt;/code&gt; - Move/Rename files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mkdir&lt;/code&gt; - Create new folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ls&lt;/code&gt; - List files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rm&lt;/code&gt; - Remove/Delete files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep&lt;/code&gt; - Search through text. Useful when you want to filter a list of pods. Eg: &lt;code&gt;kubectl get pods | grep -i status:&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl+R&lt;/code&gt; - To do a reverse search to find a command you have previously run&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extra tip: Use short names of resources whenever possible.&lt;/p&gt;

&lt;p&gt;Not sure what are the short names? You can check it with &lt;code&gt;kubectl api-resources&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ge4lsYTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bb71424ae729b8cfd1dfcf1dd870eafc/5a190/tips-and-tricks-for-acing-ckad-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ge4lsYTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/bb71424ae729b8cfd1dfcf1dd870eafc/5a190/tips-and-tricks-for-acing-ckad-1.png" alt="tips-and-tricks-for-acing-ckad-1.png" title="tips-and-tricks-for-acing-ckad-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-a-good-grasp-of-vim"&gt;
  &lt;/a&gt;
  ⌨️ Get a good grasp of VIM
&lt;/h3&gt;

&lt;p&gt;I found having previous experience in VIM came in handy. However, you don’t need to be a master at it. Using nano would be fine too if you are good.&lt;/p&gt;

&lt;p&gt;Take the time to set the following to your VIM profile before attempting any questions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vi ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the following lines and save it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;set &lt;/span&gt;expandtab
&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;tabstop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;shiftwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands will save you from having indentation issues and weird syntax issues while working with YAML files during the exam.&lt;/p&gt;

&lt;p&gt;Here are some other commands that may be of help if you are not familiar with VIM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;/&lt;/code&gt; - Search through text. Also, use &lt;code&gt;n&lt;/code&gt; to go to the next result.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dd&lt;/code&gt; - Delete a line&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;u&lt;/code&gt; - Undo&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Shift+A&lt;/code&gt; - Go to the end of the line and enter the INSERT mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gg&lt;/code&gt; - Go to the beginning of the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;G&lt;/code&gt; - Go to the end of the file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;o&lt;/code&gt; - Go to the next line and enter INSERT mode&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;v&lt;/code&gt; - Enter VISUAL mode. You can select a block of lines with arrow keys or &lt;code&gt;j&lt;/code&gt; and &lt;code&gt;k&lt;/code&gt; keys. You can copy with &lt;code&gt;y&lt;/code&gt; and paste with &lt;code&gt;p&lt;/code&gt; . Also, you can indent a block with &lt;code&gt;Shift + &amp;gt;&lt;/code&gt; to right and &lt;code&gt;Shift + &amp;lt;&lt;/code&gt; to indent to the left&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally, while you are in NORMAL mode you can type &lt;code&gt;ZZ&lt;/code&gt; to quickly save and go back to the terminal without having to type &lt;code&gt;:wq&lt;/code&gt; How cool is that? ⚡&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mastering-the-imperative-commands"&gt;
  &lt;/a&gt;
  ☄️ Mastering the imperative commands
&lt;/h3&gt;

&lt;p&gt;You would come across many questions where you would have to create pods, deployments, services etc. In such cases, don’t bother writing up YAML definitions from scratch - or even finding the relevant reference in the k8s docs.&lt;/p&gt;

&lt;p&gt;You can save a lot of time by using imperative commands. For instance, if you are tasked to create a pod with &lt;code&gt;nginx&lt;/code&gt; as the image, &lt;code&gt;tier:frontend&lt;/code&gt; as labels with the port &lt;code&gt;80&lt;/code&gt; exposed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl run tmp &lt;span class="nt"&gt;--image&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx &lt;span class="nt"&gt;--labels&lt;/span&gt; &lt;span class="nv"&gt;tier&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;frontend &lt;span class="nt"&gt;--port&lt;/span&gt; 80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Say you are asked to expose a deployment &lt;code&gt;nginx&lt;/code&gt; with a &lt;code&gt;NodePort&lt;/code&gt; service called &lt;code&gt;nginx-svc&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl expose deploy nginx &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-svc &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80 &lt;span class="nt"&gt;--target-port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;80 &lt;span class="nt"&gt;--type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;NodePort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if you can’t get everything included in a single command you can use the &lt;code&gt;--dry-run=client -o yaml &amp;gt; tmp.yaml&lt;/code&gt; to export it to a file before creating the resource.&lt;/p&gt;

&lt;p&gt;Oh btw, if you need to delete a pod quickly you can use the &lt;code&gt;--grace-period=0 --force&lt;/code&gt; command to quickly delete them without waiting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl delete po &amp;lt;pod name&amp;gt; &lt;span class="nt"&gt;--grace-period&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nt"&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-in-trouble"&gt;
  &lt;/a&gt;
  🤔 When in trouble
&lt;/h3&gt;

&lt;p&gt;Pay attention to the weightage of the question and a rough idea of how long it will take you to solve it. I can remember, I was looking at a question that was quite long and had a fair bit of configuration to be done. But the weightage was only 2% 😆 I marked it down on the provided &lt;strong&gt;notepad&lt;/strong&gt; and skipped it (you can also &lt;strong&gt;Flag&lt;/strong&gt; a question). The next question was 4% and was really really easy! I hope you get the point.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Don’t be afraid to skip and revisit questions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you forgot how something is placed in a resource definition, you can use &lt;code&gt;kubectl explain &amp;lt;resource name&amp;gt; --recursive | less&lt;/code&gt; to find what you are looking for.&lt;/p&gt;

&lt;p&gt;Another useful tip I can give you is, the &lt;code&gt;kubectl &amp;lt;resource name&amp;gt; -h&lt;/code&gt; command. You can use it like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;k run &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DrX4cmiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/a14f5b74fe1046df67075fe6b67a0834/5a190/tips-and-tricks-for-acing-ckad-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DrX4cmiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/a14f5b74fe1046df67075fe6b67a0834/5a190/tips-and-tricks-for-acing-ckad-2.png" alt="tips-and-tricks-for-acing-ckad-2.png" title="tips-and-tricks-for-acing-ckad-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-note-on-clusters-amp-namespaces"&gt;
  &lt;/a&gt;
  ☝️ A note on clusters &amp;amp; namespaces
&lt;/h3&gt;

&lt;p&gt;This is also a very important point you should pay attention to. At the top of each question, if you will be given a command to set the current context. &lt;strong&gt;Make sure to run it for each question&lt;/strong&gt; as different questions will be in different clusters.&lt;/p&gt;

&lt;p&gt;Another point is, &lt;strong&gt;pay attention to any namespaces&lt;/strong&gt; in the given question text. Sometimes it will be worded within the question. Sometimes it will be at the bottom of the question as a separate note!&lt;/p&gt;

&lt;p&gt;In a question where you will have to &lt;code&gt;ssh&lt;/code&gt; into servers please make sure to remember (or note it down) which cluster and server you are in. And remember to &lt;code&gt;exit&lt;/code&gt; out of it before going to the next question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leverage-the-docs"&gt;
  &lt;/a&gt;
  📄 Leverage the docs
&lt;/h3&gt;

&lt;p&gt;In certain cases, it’s better to visit the docs than to spend time to figure out what needs to be done. For instance, if there’s a question on setting up a Persistent Volume, the question will also have a section to create a Persistent Volume Claim and to create a Pod to use that.&lt;/p&gt;

&lt;p&gt;Go to the docs, type &lt;code&gt;pv&lt;/code&gt; at the search bar and click on the link that says “Configure a Pod to Use a PersistentVolume for Storage”. And yes, you need to know where things are at within the K8S docs!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfDWkUML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/9b97538a8cd17fe8d8d482d20d5c327a/5a190/tips-and-tricks-for-acing-ckad-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfDWkUML--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/9b97538a8cd17fe8d8d482d20d5c327a/5a190/tips-and-tricks-for-acing-ckad-3.png" alt="tips-and-tricks-for-acing-ckad-3.png" title="tips-and-tricks-for-acing-ckad-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practice-practice-practice"&gt;
  &lt;/a&gt;
  👟 Practice, practice, practice
&lt;/h3&gt;

&lt;p&gt;Speed is key to the exam. Although you get 2 hours, it will just fly! 🦅&lt;/p&gt;

&lt;p&gt;When you pay for the exam you will get 2 free mock exam sessions before sitting the real exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LLsPDBvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/98/16/67/981667bac32a91436e9dd3fa78afa4ab.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LLsPDBvf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/originals/98/16/67/981667bac32a91436e9dd3fa78afa4ab.jpg" alt="Meme on speed"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;As Jeremy Clarkson would say, "SPEEEEEEEEED!!!!" 😂&lt;/center&gt;

&lt;p&gt;Here are some more exercises I used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/dgkanatsios/CKAD-exercises"&gt;https://github.com/dgkanatsios/CKAD-exercises&lt;/a&gt; [Free]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bmuschko/ckad-prep"&gt;https://github.com/bmuschko/ckad-prep&lt;/a&gt; [Free]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kodekloud.com/courses/certified-kubernetes-application-developer-ckad/"&gt;https://kodekloud.com/courses/certified-kubernetes-application-developer-ckad/&lt;/a&gt; [Paid]&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/bb-tutorials-and-thoughts/practice-enough-with-these-questions-for-the-ckad-exam-2f42d1228552"&gt;https://medium.com/bb-tutorials-and-thoughts/practice-enough-with-these-questions-for-the-ckad-exam-2f42d1228552&lt;/a&gt; [Free]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  👋 Conclusion
&lt;/h3&gt;

&lt;p&gt;Do you know what’s the hardest thing to do after the exam? waiting for the results! 🤣 It might take up to 24 - 36 hours to get your result. Here’s my certificate if you are interested.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wYItoif8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/7f318d8b9269ad918fa442ed8eddaa57/5a190/tips-and-tricks-for-acing-ckad-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wYItoif8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sahansera.dev/static/7f318d8b9269ad918fa442ed8eddaa57/5a190/tips-and-tricks-for-acing-ckad-4.png" alt="tips-and-tricks-for-acing-ckad-4.png" title="tips-and-tricks-for-acing-ckad-4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you found these tips helpful. Feel free to comment below if you have got any tips and tricks too! Good luck with your exam!!! 🎉&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>ckad</category>
      <category>certification</category>
    </item>
    <item>
      <title>What are the benefits of using Angular?</title>
      <author>Aliaksei Kuncevič</author>
      <pubDate>Mon, 02 Aug 2021 08:37:26 +0000</pubDate>
      <link>https://dev.to/kuncevic/what-are-the-benefits-of-using-angular-5840</link>
      <guid>https://dev.to/kuncevic/what-are-the-benefits-of-using-angular-5840</guid>
      <description>&lt;p&gt;&lt;strong&gt;Time changes everything. Angular is timeless and meets all the modern business requirements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular has picked up steam in recent years, and it becomes “the cherry on the cake” for most app developers, and there are many good reasons for it. Let's see the key reasons for using Angular and the top benefits  for your business if you choose to go with Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-lets-understand-what-angular-is"&gt;
  &lt;/a&gt;
  First of all, let's understand what Angular is
&lt;/h2&gt;

&lt;p&gt;Angular is a Javascript-based framework for developing mobile and desktop frame applications created by Google. It is used and favored by the Google Cloud platform, AdWords, and thousands of web applications built within Google. Other big names have also chosen Angular: Forbes, Delta Airlines, BMW, Samsung, Paypal, Tesla, Netflix, SpaceX.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, why do all of these companies choose Angular?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here are the top five main benefits:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#productivity"&gt;
  &lt;/a&gt;
  Productivity
&lt;/h2&gt;

&lt;p&gt;As an app developer, you understand the time is highly precious for each project, and surely you don't want to waste any minute of it. Once you understand the core principles of Angular building blocks and build a first Angular application using it, later you can apply the same thinking creating a new one. Your journey as an Angular developer is to create modular, performant, accessible, and maintainable applications by simply following the best practices and general guidelines that goes with them&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#legolike-building-blocks"&gt;
  &lt;/a&gt;
  Lego-like building blocks
&lt;/h2&gt;

&lt;p&gt;Angular applications are built on logical modular principles, which means that you can simplify your life as an app developer by benefiting from dividing your code into small blocks. Those blocks can be reusable and can help to maintain immense code base health. It will help the business be more efficient, organised, cost-effective, and stay in line with any company’s KPI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-ecosystem"&gt;
  &lt;/a&gt;
  Angular ecosystem
&lt;/h2&gt;

&lt;p&gt;Angular ecosystem contains all the possible fundamental tools and features you need to design and build an app. For example, libraries like Angular Material incorporate diverse components and modules, which helps save a lot of time and costs when building new applications. In addition, all of the Angular Material UI components, patterns, and performance are optimised to meet all expectations and high-quality standards.&lt;/p&gt;

&lt;p&gt;You are not alone on your journey with Angular; by joining Angular, you are becoming a part of a friendly environment where you can become a part of the Angular community and benefit from various tools Angular ecosystem offers .&lt;/p&gt;

&lt;p&gt;The Angular ecosystem is boundless. Its generous selection of well-maintained production-ready components and tools will make your development life simpler and painless. In addition, things such as strong typings will save you time catching errors and help you scale your projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strong-typings-with-typescript"&gt;
  &lt;/a&gt;
  Strong Typings with TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript is a first-class citizen in the Angular ecosystem. Angular itself is built with TypeScript, a Superset of Javascript, meaning that you are on the safe side and have more control over your code. With TypeScript, you can easily spot bugs and typing errors while producing understandable, efficient, and high-quality code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best Practices
&lt;/h2&gt;

&lt;p&gt;Angular programming style is based on best practices, which are embedded with modern component-based architecture. So, what does it mean exactly? First, as a developer, you will build components and other angular building blocks that will be united into a solid application. Then, all you need to do is construct modular parts of  the app, while Angular tooling will take care of everything else. Doing so eliminates unnecessary code creation.  Furthermore, proper and correct preliminary setup and configuration that follow best practices will simplify your work, ensuring a lighter and more efficient development process.&lt;/p&gt;

&lt;p&gt;When it comes to  app development, it can be a challenging journey. Even though we are pretty spoiled with the various options to choose from, only the right decisions and best practices can convert our efforts into success. That is the reason why so many companies are choosing Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-development-tools"&gt;
  &lt;/a&gt;
  Angular Development Tools
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, the Angular ecosystem is boundless and very developed. It provides a wide range of advanced tools that can bring your development experience to an entirely new level. &lt;/p&gt;

&lt;p&gt;Please see below the tip of the week, which can navigate you through the available options:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--57BzX8KM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626940878727/v8hvx9JXY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--57BzX8KM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626940878727/v8hvx9JXY.png" alt="3-static-TIP.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, there is a very fruitful conversation available on Angular Rocks Podcast, which focuses on this matter in every detail.&lt;/p&gt;

&lt;p&gt;The guest we hosted is Minko Gechev, the technical lead, and Angular Team DevRel  Manager at Google. He is passionate about computer science, open-source frameworks, libraries, and performance tooling. His extraordinary expertise helped us cover all of the hot topics that any web developer wants to hear about, from modern dev tools for Angular developers to insightful tips and tricks that will help to improve your development processes. You can listen to the episode &lt;a href="https://share.transistor.fm/s/a21f025f"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Angular will never let you down, and by continuing to explore the Angular world, you can progress and enjoy the development process on an entirely different level. &lt;/p&gt;

</description>
      <category>angular</category>
      <category>tips</category>
      <category>webdev</category>
      <category>inspiration</category>
    </item>
    <item>
      <title>Deploying and building React projects to GitHub Pages with GH Actions</title>
      <author>Alen Duda</author>
      <pubDate>Mon, 02 Aug 2021 08:30:45 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/deploying-and-building-react-projects-to-github-pages-with-gh-actions-8ek</link>
      <guid>https://dev.to/bornfightcompany/deploying-and-building-react-projects-to-github-pages-with-gh-actions-8ek</guid>
      <description>&lt;p&gt;For my private mini-projects, I prefer to use &lt;a href="https://parceljs.org/"&gt;Parcel bundler&lt;/a&gt; over &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; just because there is less overhead and clutter to clean up. However, by using CRA and the &lt;a href="https://github.com/tschaub/gh-pages"&gt;appropriate package&lt;/a&gt;, deploying can be very simple. This post will tell you how to set up build and deploy when using a custom project structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-reactparcel-project"&gt;
  &lt;/a&gt;
  Creating a React/Parcel project
&lt;/h2&gt;

&lt;p&gt;By following steps from &lt;a href="https://blog.jakoblind.no/react-parcel/"&gt;this post&lt;/a&gt; we can be up and running in a few minutes. As always with React, you are free to organize the project structure as needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-for-github-pages"&gt;
  &lt;/a&gt;
  Build for GitHub Pages
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Enable GH Pages inside repo settings (use &lt;strong&gt;docs&lt;/strong&gt; folder, as detailed in &lt;a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site"&gt;the documentation&lt;/a&gt; )&lt;/li&gt;
&lt;li&gt;Specify a build script - Parcel should create built files inside &lt;code&gt;/docs&lt;/code&gt; folder.
Example build script inside package.json: &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;"build-github": "rm -rf docs/* &amp;amp;&amp;amp; parcel build index.html --public-url ./ -d docs"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These two commands: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;delete the existing docs folder and all its contents (to make sure we don't have previously built files lying around)&lt;/li&gt;
&lt;li&gt;run the Parcel build command, as always using &lt;em&gt;index.html&lt;/em&gt; as entry point, but specifying the built files to go inside &lt;em&gt;/docs&lt;/em&gt; folder, while setting the output files to read from that folder (&lt;code&gt;./&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To test this, we can try running &lt;code&gt;npm run build-github&lt;/code&gt; command and committing the changes, pushing them to master. A green checkmark should appear on your GH repository near the latest commit, indicating all went well. The default URL template for GH Pages is &lt;code&gt;https://&amp;lt;your-github-username&amp;gt;.github.io/&amp;lt;your-github-repository&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automating-the-build-with-every-push-to-master"&gt;
  &lt;/a&gt;
  Automating the build with every push to master
&lt;/h2&gt;

&lt;p&gt;To avoid having to run that command manually, we should automate this step by using GitHub Actions, another free service from GitHub.&lt;/p&gt;

&lt;p&gt;In your repository's project root, create a folder named &lt;code&gt;.github&lt;/code&gt; and inside it another folder called &lt;code&gt;workflows&lt;/code&gt;. There, you should create a file named &lt;code&gt;build.yml&lt;/code&gt; (this name is optional).&lt;/p&gt;

&lt;p&gt;Example build.yml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build gh-pages&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-gh-pages&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;      
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build-github&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit files&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auto-commit-action&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stefanzweifel/git-auto-commit-action@v4&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;commit_message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build project for github pages&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Push changes&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.auto-commit-action.outputs.changes_detected == 'true'&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ad-m/github-push-action@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;github_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;No changes detected&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.auto-commit-action.outputs.changes_detected == 'false'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "No changes!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After pushing this file to your remote repository, GitHub will read it and follow steps inside it: on every push to the branch master, it will run the steps detailed in &lt;code&gt;build-gh-pages&lt;/code&gt; job (name optional) - do a clean npm install (&lt;code&gt;npm ci&lt;/code&gt;) and run the &lt;code&gt;npm run build-github&lt;/code&gt; command we created earlier. Make sure you specify the correct node version for your project, as well as replacing the build-github npm command with your custom naming, if required. Feel free to modify the &lt;code&gt;commit_message&lt;/code&gt; variable as well!&lt;/p&gt;

&lt;p&gt;To test this, simply make some changes to your project and push them to the remote repository. An orange circle should appear near the latest commit message on GH repo page, where you can track the progress of the build process. Once ready, a green checkbox will replace the circle and your changes should be visible.&lt;/p&gt;

&lt;p&gt;For me, this mini-automation process was a great introduction to GH Actions. I borrowed some code and inspiration from my colleagues &lt;a href="https://dev.to/shockwavee"&gt;Davor&lt;/a&gt; and &lt;a href="https://dev.to/wnbsmart"&gt;Maroje&lt;/a&gt; with only minor customization required. I hope it will help someone and spark an interest into the wonderful world of automation!&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>github</category>
      <category>parcel</category>
      <category>react</category>
    </item>
    <item>
      <title>React lifecycle methods in Hooks</title>
      <author>Madushan Perera</author>
      <pubDate>Mon, 02 Aug 2021 07:47:34 +0000</pubDate>
      <link>https://dev.to/mcperera/react-lifecycle-methods-in-hooks-53nl</link>
      <guid>https://dev.to/mcperera/react-lifecycle-methods-in-hooks-53nl</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the original post on &lt;a href="https://mcperera.com/blog/react-hooks"&gt;my blog&lt;/a&gt;. Thank you for visiting. 😊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-are-react-hooks"&gt;
  &lt;/a&gt;
  What are React hooks?
&lt;/h2&gt;

&lt;p&gt;When we use React class components, we used to manage state and other React lifecycle features inside those class components using React lifecycle methods like ”componentDidMount”.&lt;/p&gt;

&lt;p&gt;Since React brought us functional component features, it needed to have those lifecycle methods same as the React class components.&lt;br&gt;
Therefore, Hooks are functions that let you “hook into” React state and lifecycle features from function components same as the class components.&lt;/p&gt;

&lt;p&gt;To get to know more details about React life cycle, visit &lt;a href="https://dev.to/blog/react-component-life-cycle"&gt;React Component Life Cycle&lt;/a&gt; post.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#hooks-we-should-use-in-different-stages-of-react-life-cycle"&gt;
  &lt;/a&gt;
  Hooks we should use in different stages of React Life Cycle?
&lt;/h2&gt;

&lt;p&gt;As we know React life cycle can be divided in to 3 main stages according to how the component renders to the DOM respectively mounting, Updating and Unmounting from the DOM. Let’s understand most commonly use hooks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h3&gt;

&lt;p&gt;To update the state of a React function component we need to use "useState" hook. As shown in the below code block, we need to import it as a named import before we use it.&lt;/p&gt;

&lt;p&gt;This “useState” hook takes only one parameter as the initial state of the component and returns two values, the current state of the component (“count” in the below component) and a function (“setCount” in the below component) to update the state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the setCount function we can update our state as we want. In this above code, setCount is used to increase and decrease the state “count”. Passing a callback function to this state changing function we can get the previous state as an argument of this callback function. This is the way that CountMe component gets the previous state and every time we call this “setCount” function, the render method of this CountMe component gets called and render the element with updated state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h3&gt;

&lt;p&gt;This function can perform the most part of react life cycle. Simply we can say that this function can use for same purpose as “componentDidMount”, “componentDidUpdate”, and “componentWillUnmount” in React classes.&lt;/p&gt;

&lt;p&gt;Basically, we use this to perform side effects like data fetching, event subscriptions in React function component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Run on mounting of &amp;lt;CountMe/&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Run on initial &amp;amp; update of count state : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes two parameters. First one is a function and the second one is an array of dependencies. React runs the effects after every render including the first render. But we can avoid it using dependencies.&lt;/p&gt;

&lt;p&gt;To perform “componentDidMount”, all we need to call this function with what we need to do as the first parameter and we can ignore the second parameter snice we need to run it on component mount.&lt;/p&gt;

&lt;p&gt;If we need to execute any code block when the component’s state is updated, all we need to do is add the state value which is going to update in the dependency as shown in the code above in the second “useEffect”. So, the code inside the “useEffect” will run every time the “count” is going to update.&lt;/p&gt;

&lt;p&gt;Note : if we use “useEffect” without the dependency array, at this time “useEffect” will run every update. To specifically run the “useEffect” on a state update, we need to add that variable to the array. At that time “useEffect” will only run according to the given dependencies. Also, “useEffect” will run only once when use an empty dependency array “[]”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CountMe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scrolling&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//Cleanup the EventListener&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollingMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100vh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Scroll&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sometimes, we need to subscribe for some event listeners when the component is mounted to the DOM and also we need to unsubscribe when the component is unmounted from the DOM. In React class components we used “componentDidMount” and “componentWillUnmount” to perform these kind of scenarios.&lt;/p&gt;

&lt;p&gt;We can use “useEffect” hook to subscribe and unsubscribe these events like above by adding return statement. It means if we want to do something on component unmount, we can put that code part inside return statement like above code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-own-hook"&gt;
  &lt;/a&gt;
  Creating your own hook
&lt;/h2&gt;

&lt;p&gt;React has given the capability of creating our own hook to keep the code DRY (Don’t Repeat Yourself) by creating reusable functionalities as a custom hook. Check the post &lt;a href="https://dev.to/blog/react-custom-hooks"&gt;React Custom Hooks&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;Thank you for reading and hope this helps you 🎉&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What is Dynamic Module Import ?</title>
      <author>Madushan Perera</author>
      <pubDate>Mon, 02 Aug 2021 07:44:43 +0000</pubDate>
      <link>https://dev.to/mcperera/what-is-dynamic-module-import-44lk</link>
      <guid>https://dev.to/mcperera/what-is-dynamic-module-import-44lk</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can find the original post on &lt;a href="https://mcperera.com/blog/dynamic-module-imports"&gt;my blog&lt;/a&gt;. Thank you for visiting. 😊&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-we-need-import-in-javascript"&gt;
  &lt;/a&gt;
  Why we need ‘import’ in JavaScript?
&lt;/h2&gt;

&lt;p&gt;The static import is very useful when we want to use read only live bindings which are exporting by other modules in your program. In this way the idea is to manage our code by separating them as we want. This can be functionality, features or component wise. But the entire code is working as a one code block after connecting them by importing.&lt;/p&gt;

&lt;p&gt;Below code block shows how we can import modules in a static way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;alias1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;export2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name/path/to/specific/un-exported/file&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;export2&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;alias2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;export1&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaultExport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way it’s easier to understand the code to some and very helpful for debugging.&lt;br&gt;
The import statement cannot be used in the embedded scripts unless the script has a type=’ module.’&lt;br&gt;
Also, we can import modules as a dynamic import.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-dynamic-import-in-javascript"&gt;
  &lt;/a&gt;
  What’s dynamic import in JavaScript?
&lt;/h2&gt;

&lt;p&gt;Most of the time developers are used to use the standard static import. This will always import the modules at the loading time. No matter what if we use that imported module or not JavaScript always loads the static modules in loading time.&lt;/p&gt;

&lt;p&gt;What if we want to import modules conditionally or on demand? This is the place where you need to implement dynamic import in JavaScript.&lt;/p&gt;

&lt;p&gt;To use dynamic import call the ‘import()’ as a function as pass the module path as an argument. Then you can use JavaScript promise or await to get the rest of the work done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/modules/my-module.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do something with the module.&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module--&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/modules/my-module.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-to-use-dynamic-import"&gt;
  &lt;/a&gt;
  When to use dynamic import?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When importing statically significantly slows the loading of your code.&lt;/li&gt;
&lt;li&gt;When importing statically significantly increases your program's memory usage.&lt;/li&gt;
&lt;li&gt;When the module you are importing does not exist at load time&lt;/li&gt;
&lt;li&gt;When the module being imported has side effects, and you do not want those side effects unless some condition is true.&lt;/li&gt;
&lt;li&gt;When the import specifier string needs to be constructed dynamically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading and Happy Coding 🥳&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>AWS open source news and updates #78</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 02 Aug 2021 07:37:49 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-78-4abk</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-78-4abk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#august-2nd-2021-instalment-78"&gt;
  &lt;/a&gt;
  August 2nd, 2021 - Instalment #78
&lt;/h2&gt;

&lt;p&gt;Newsletter #78.&lt;/p&gt;

&lt;p&gt;This is the last newsletter for the next three weeks, as I will be taking some time off and shutting down my laptop. I will look forward to bringing you a very full edition when I return, but in the meantime enjoy another great collection of open source projects and blog posts to help you get the most out of open source on AWS. This week we have a collection of posts on Apache Airflow, a must read post for AWS CDK users on the Construct Hub Preview, some great posts covering analytics and big data technologies such as Apache Spark and Apache Kafka, a look at some new capabilities within AWS services such as openCypher and a round up of quick updates and case studies to finish off.&lt;/p&gt;

&lt;p&gt;Enjoy the updates, and see you in a few weeks time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Book: Spring Boot on AWS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the weekend Tom Hombergs, Philip Riecks and Björn Wilmsmann held an online launch party for their book &lt;a href="https://aws-oss.beachgeek.co.uk/sn"&gt;Stratospheric: From zero to production with Spring Boot and AWS&lt;/a&gt;. This is an essential resource for any Java developer who is working with AWS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Sofian Hamiti, Jenna Pederson, Sebastien Stormacq, Dotan Horovits, Alex Pulver, Ravi Itha, Muhammad Zahid Ali, César Prieto Ballester, Bruno Bardelli, Tom McMeekin, Parnab Basak, Brad Bebee, Mark Richman, Mikhail Vasilyev, Rob Mesirow, Anil Lalwani, David Sapin, Mihir Desai, Maciej Radzikowski, Trivikram Kamat, Steve Roberts, Biroj Nayak, Jessica Ho, Justin Leto, David Ehrlich, and Shreyas Subramanian&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;metabadger&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/sl"&gt;metabadger&lt;/a&gt; this open source tool from Salesforce helps you to prevent SSRF attacks on AWS EC2 via automated upgrades to the more secure Instance Metadata Service v2 (IMDSv2). The project provides detailed documentation on the background and use cases that this tool is looking to help, how to setup and install as well as how to run this project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qUgF_2BI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/salesforce/metabadger/blob/main/docs/images/metabadger.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qUgF_2BI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/salesforce/metabadger/blob/main/docs/images/metabadger.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-ipv6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/sm"&gt;cdk-ipv6&lt;/a&gt; - my colleague Sebastien Stormacq released this open source project over the weekend that will help you create IPv6 VPCs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cdk-pipelines-datalake-infrastructure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/rz"&gt;aws-cdk-pipelines-datalake-infrastructure&lt;/a&gt; - this is an open sourced solution to help you build a data lake on AWS. To help you get started, Ravi Itha and Muhammad Zahid Ali have written this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/s0"&gt;Deploy data lake ETL jobs using CDK Pipelines&lt;/a&gt; that should make your life a little easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--64fMkOum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/07/02/Aws-cdk-pipelines-blog-datalake-continuous_delivery_data_lake_etl-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--64fMkOum--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/07/02/Aws-cdk-pipelines-blog-datalake-continuous_delivery_data_lake_etl-1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cdk-tfsec&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/s1"&gt;aws-cdk-tfsec&lt;/a&gt; - this is an open source project that shows you how you can analyse and secure Terraform code using a CI/CD Pipeline and tfsec. This blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/s2"&gt;Secure and analyse your Terraform code using AWS CodeCommit, AWS CodePipeline, AWS CodeBuild and tfsec&lt;/a&gt; from César Prieto Ballester and Bruno Bardelli walks you through the code. tfsec is an open sourced static analysis security scanner for your Terraform code, including more than 90 preconfigured checks with the ability to add custom checks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eRXjFut0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/07/27/tfsec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eRXjFut0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/7719a1c782a1ba91c031a682a0a2f8658209adbf/2021/07/27/tfsec.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mwaa-dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/s8"&gt;mwaa-dashboard&lt;/a&gt; is an open source project that helps you automate Amazon CloudWatch dashboards and alarms for your Amazon Managed Workflows for Apache Airflow (MWAA) environments. Mark Richman provides everything you need to help you get this project up and running in his blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/s7"&gt;Automating Amazon CloudWatch dashboards and alarms for Amazon Managed Workflows for Apache Airflow&lt;/a&gt; which is a super nice post (I am using this to monitor my own test/development pipelines, and has really helped simplify this task)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cdk-codecommit-snyk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/sb"&gt;aws-cdk-codecommit-snyk&lt;/a&gt; this open source project provides a CDK construct that uses Snyk CLI to scan Python packages for open source package vulnerabilities. BK Das provides detailed information on the architecture as well as how to get started in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/sa"&gt;Use the Snyk CLI to scan Python packages using AWS CodeCommit, AWS CodePipeline, and AWS CodeBuild&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://logz.io/learn/guides/opentelemetry-guide/"&gt;https://logz.io/learn/guides/opentelemetry-guide/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have a number of posts this week featuring Apache Airflow, or more specifically, Amazon's Managed Workflows for Apache Airflow (MWAA). &lt;/p&gt;

&lt;p&gt;First up we have Parnab Basak with &lt;a href="https://aws-oss.beachgeek.co.uk/s6"&gt;Deploying to Amazon Managed Workflows for Apache Airflow with CI/CD tools&lt;/a&gt; which will show you how you can set up a simple CI/CD system to automate how you can deploy your DAGs into MWAA. He covers how you can do this using CodeCommit/CodePipeline, GitHub/GitHub actions, Jenkins and Bitbucket/Bitbucket Pipelines. &lt;/p&gt;

&lt;p&gt;Next up, we have Justin Leto, David Ehrlich, and Shreyas Subramanian show you how to orchestrate an ML pipeline using the popular XGBoost (eXtreme Gradient Boosting) algorithm in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/sf"&gt;Orchestrate XGBoost ML Pipelines with Amazon Managed Workflows for Apache Airflow&lt;/a&gt;. They cover how to dynamically create and run AWS Glue jobs to preprocess training and validation data. How to construct the DAG to support ML pipelines, including the import statements, the DAG operator configuration, the DAG task definitions, and the DAG dependency definition. Finally, they show the difference between using native Airflow operators vs. invoking AWS SDK API calls from a generic PythonOperator. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eu1rVv-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/07/20/ml-4775-image007.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eu1rVv-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/07/20/ml-4775-image007.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly, I have a post written by myself, &lt;a href="https://aws-oss.beachgeek.co.uk/ru"&gt;Working with parameters and variables in Amazon Managed Workflows for Apache Airflow&lt;/a&gt; which is a long read with examples, scripts and code that will dive deep into how you can work with parameters and variables within MWAA, what you need to be aware of that is perhaps different to self hosted Apache Airflow and how you can put this all together to create re-usable workflows. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking to use Apache Kafka to help you ingest and process high-volume high-frequency streaming data (in this particular example, IoT data), then this is a post you will want to check out. Siddhesh Keluskar has put this detailed post, &lt;a href="https://aws-oss.beachgeek.co.uk/s3"&gt;Field Notes: Deliver Messages Using an IoT Rule Action to Amazon Managed Streaming for Apache Kafka&lt;/a&gt; which will show you how you can build a real-time streaming data pipeline by securely delivering MQTT messages to a highly-scalable, durable, and reliable system using Apache Kafka. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHv1JAfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/07/22/Architecture-representing-an-IoT-ingestion-pipeline.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHv1JAfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fc074d501302eb2b93e2554793fcaf50b3bf7291/2021/07/22/Architecture-representing-an-IoT-ingestion-pipeline.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Spark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What would we ever do if the taxi drivers of NYC stopped working and stopped providing the rich data sets that we use week in, week out to show case how to use data analytics tools? I am not sure, but whilst they are still generating all that great data, we can be thankful that this helps put together blog posts like this one, &lt;a href="https://aws-oss.beachgeek.co.uk/s4"&gt;Visualize data using Apache Spark running on Amazon EMR with Amazon QuickSight&lt;/a&gt; from Tom McMeekin. This a really nice in depth post that covers a lot more than the title suggest. You will explore how to setup and use Apache Spark on Amazon EMR, openLDAP, deploy a Thrift server, use Beeline as your jdbc client and many more great open source tools. Well worth diving deep into. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dr4O_HwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/07/22/BDB143-image009.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dr4O_HwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/07/22/BDB143-image009.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Cloud Development Kit (AWS CDK)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week Alex Pulver put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/sh"&gt;Construct Hub Preview&lt;/a&gt;, that announced the Construct Hub preview. This is a one-stop destination for finding, reusing and sharing constructs authored by AWS, AWS Partner Network partners, third parties, and the developer community. As the CDK developer community has grown, customers have told us that they do not have an easy way to find the construct libraries created by the community because the constructs have been published through various package managers. The Construct Hub will now be a central location where CDK users can find a comprehensive collection of constructs to help them build their applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2sYX9ppD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/07/29/construct-hub-homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2sYX9ppD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/07/29/construct-hub-homepage.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As Alex concludes, "This is an open-source preview, and we need your help to make the Construct Hub the best end-to-end experience for discovering and sharing constructs."  This is a must read post this week, so make sure you check it out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finding the right balance of open-source tools and AWS services that will meet your functional and non-functional requirements, to help you maximise the value you get from those resources is the focus on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/s9"&gt;Choosing a Well-Architected CI/CD approach: Open Source on AWS&lt;/a&gt; from Mikhail Vasilyev. The post helps you with a decision making framework aligned to the Well Architected framework, and looks at source code management, continuous integration and container registry options you can choose from, and how these all can work together.&lt;/p&gt;

&lt;p&gt;Colleague Jenna Pederson has been working on using Inspec, an open-source framework for testing and auditing your applications and infrastructure in her latest blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/sj"&gt;How to use CDK Outputs in your Inspec tests&lt;/a&gt; showing you how you can use this together with a feature of CDK to help you build better tests for your Infrastructure as Code. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MLFlow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MLflow is an open source platform to manage the ML lifecycle, including experimentation, reproducibility, deployment, and a central model registry. Sofian Hamiti builds on a previous blog post showing you how to  deploy MLflow on AWS, and builds on that to share how you can automate an end-to-end ML lifecycle using MLflow and Amazon SageMaker Pipelines. Well worth reading, &lt;a href="https://aws-oss.beachgeek.co.uk/sk"&gt;MLOps with MLFlow and Amazon SageMaker Pipelines&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;openCypher&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brad Bebee posted this last week, &lt;a href="https://aws-oss.beachgeek.co.uk/s5"&gt;Announcing openCypher for Amazon Neptune: Building better graph applications with openCypher and Gremlin together&lt;/a&gt; sharing news of how developers can now use openCypher and Apache TinkerPop Gremlin to build or migrate property graph applications. Check the quick updates section for more details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jy2MdOeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/28/DBBLOG-1785-img02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jy2MdOeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/28/DBBLOG-1785-img02.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;OpenSearch Dashboards Notebooks lets you easily combine live visualizations, narrative text, and SQL and Piped Processing Language (PPL) queries so that you can tell your data’s story. Viraj Phanse, Ashwin Kumar, Anirudha Jadhav, Eli Fisher collaborated on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/so"&gt;Feature Deep Dive: OpenSearch Dashboards Notebooks&lt;/a&gt; that explores popular use cases for Notebooks, how the feature works, and how to get started with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post, &lt;a href="https://aws-oss.beachgeek.co.uk/si"&gt;Beginner’s Guide to OpenTelemetry&lt;/a&gt;, from Dotan Horovits at logz.io provides a really nice, clean and easy to follow introduction into the world of OpenTelemetry. Well worth spending ten minutes of your time, and the videos are also very informative. Make sure you check this out this week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Red Hat Enterprise Linux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the ways many business' are looking to modernise their workloads is to move from proprietary systems to open source. This includes running workloads such as MS SQL Server, which you can now run on Linux. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/sp"&gt;Understanding Amazon Machine Images for Red Hat Enterprise Linux with Microsoft SQL Server&lt;/a&gt; Kumar Abhinav provides a deep dive into how to deploy SQL Server on RHEL using these new AMIs, how to tune instances for performance, and how to reduce licensing costs with RHEL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zTAa1oEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/07/15/RHEL3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTAa1oEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/1b6453892473a467d07372d45eb05abc2031647a/2021/07/15/RHEL3.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS SDKs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/sd"&gt;Mocking modular AWS SDK for JavaScript (v3) in Unit Tests&lt;/a&gt; Trivikram Kamat and Maciej Radzikowski show you how you can mock the SDK clients using the community-driven &lt;a href="https://aws-oss.beachgeek.co.uk/ll"&gt;AWS SDK Client mock library&lt;/a&gt;. [hands on]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-studies"&gt;
  &lt;/a&gt;
  Case Studies
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Cassandra&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/sc"&gt;Idea to product: PricewaterhouseCoopers launches Check-In within three months on Amazon Keyspaces&lt;/a&gt; Rob Mesirow, Anil Lalwani, David Sapin, and Mihir Desai show you how PwC built the Check-In solution from idea to product within 3 months using Amazon Keyspaces (for Apache Cassandra) and additional open source technologies on AWS. Check-In is a single, technology-driven solution that provides clients the data to plan, prevent, and react precisely to mitigate risk to their people and business. Read on to find out more about Check-In and how PwC were able to reduce the time it took them, to go from idea to launch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--16QdtMn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/16/DBBLOG-1733-image001.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16QdtMn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/16/DBBLOG-1733-image001.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Core WCF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Core WCF is a port of Windows Communication Framework (WCF) to .NET Core. Used to build service-oriented applications based on the .NET Framework, WCF enabled applications to asynchronously send data, packaged as messages, between service endpoints.&lt;/p&gt;

&lt;p&gt;In this interview, &lt;a href="https://aws-oss.beachgeek.co.uk/se"&gt;Supporting development of Core WCF&lt;/a&gt;, Steve Roberts is joined by Biroj Nayak, a Senior Software Development Engineer working in Amazon Elastic Compute Cloud (Amazon EC2), to talk about the open source Core WCF project and the contributions he’s been involved with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drupal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jessica Ho takes a look at how Acquia and Amazon Web Services (AWS) together offer a secure, resilient, and highly performant solution with the next-generation enterprise digital experience platform, Acquia Cloud Next. To find out more, read the post, &lt;a href="https://aws-oss.beachgeek.co.uk/sg"&gt;How Acquia Enables a Highly Scalable Drupal Digital Experience Platform on AWS&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7LoFMmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2021/07/28/Acquia-Cloud-Next-3.1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7LoFMmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/77de68daecd823babbb58edb1c8e14d7106e83bb/2021/07/28/Acquia-Cloud-Next-3.1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;openCypher&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Neptune announced support for openCypher, a popular query language for building applications with graph databases. Developers can now use openCypher with Amazon Neptune, giving them more choices to build or migrate graph applications to a highly available, secure, and fully managed graph database. Support for openCypher is compatible with our customers’ existing property graphs and developers can use both Apache TinkerPop Gremlin and openCypher queries within the same graph.&lt;/p&gt;

&lt;p&gt;Customers like openCypher’s syntax, which is inspired by SQL, because it provides a familiar structure to compose queries for graph applications. With the addition of openCypher, Amazon Neptune now provides customers with that widest array of query language support including openCypher, Gremlin, and W3C SPARQL. Customers can use the openCypher and Gremlin query languages together over the same property graph data. Support for openCypher is compatible with the Bolt protocol, enabling customers to continue to run applications that use the Bolt protocol to connect to Neptune.&lt;/p&gt;

&lt;p&gt;openCypher is available in lab mode in this release and is enabled by default. Neptune customers who use Gremlin can immediately start using openCypher to query their graphs. New customers can get started with loading and querying their data using openCypher. Customers migrating to Neptune can easily connect to the graph database and continue to use their existing openCypher queries to build and run graph applications.&lt;/p&gt;

&lt;p&gt;Customers using openCypher have access to all Neptune features, such as the Neptune workbench, which now supports querying and visualising results of openCypher queries. Support for openCypher is available in all regions where Neptune is supported, and there are no additional charges to use openCypher.&lt;/p&gt;

&lt;p&gt;Check out the documentation page, &lt;a href="https://aws-oss.beachgeek.co.uk/rx"&gt;Accessing the Neptune Graph with openCypher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPARQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Neptune announces support for SPARQL 1.1 Graph Store HTTP Protocol (GSP)  for graphs using W3C’s Resource Description Framework (RDF). Using GSP on SPARQL 1.1 endpoints, customers now have an efficient method to interact with complete named graphs within a graph store. This can streamline building graph applications using Amazon Neptune and tools that support the W3C Recommendation GSP such as Apache Jena.&lt;/p&gt;

&lt;p&gt;GSP provides customers with convenient endpoints for manipulating an entire named graph in one HTTP request, instead of having to write multiple complex SPARQL 1.1 queries to achieve the same result. SPARQL 1.1 provides a query-based approach to fetching, inserting, and deleting RDF triples, GSP supports these actions on entire named graphs in the graph store. The addition of GSP in Neptune introduces a new endpoint URL: &lt;strong&gt;&lt;a href="https://your-neptune-endpoint:port/sparql/gsp/"&gt;https://your-neptune-endpoint:port/sparql/gsp/&lt;/a&gt;&lt;/strong&gt; that customers can use to access RDF graphs in Neptune.&lt;/p&gt;

&lt;p&gt;To find out more, check out the documentation page &lt;a href="https://aws-oss.beachgeek.co.uk/ry"&gt;Using the SPARQL Graph-Store HTTP protocol (GSP) in Amazon Neptune&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now launch RabbitMQ 3.8.17 brokers on Amazon MQ. This patch update to RabbitMQ contains several fixes and enhancements compared to the previously supported version, RabbitMQ 3.8.11. To learn more, read the &lt;a href="https://aws-oss.beachgeek.co.uk/rw"&gt;RabbitMQ Changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suricata&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS Network Firewall uses the open source intrusion prevention system (IPS), Suricata, for stateful inspection, and is now a Payment Card Industry Data Security Standard (PCI DSS) compliant service. Customers can now use AWS Network Firewall to capture, transmit, and retrieve sensitive payment card data for use cases such as payment processing that are subject to PCI DSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FreeRTOS 202107.00 now includes the Simple Network Time Protocol (SNTP) client library to make it easier for developers to add time information in their FreeRTOS-based IoT applications. The SNTP client library, named coreSNTP, is used to synchronise clocks between two devices or a device and the cloud. &lt;/p&gt;

&lt;p&gt;You can use coreSNTP in IoT applications where devices need to display time or use time for its business logic (e.g. control temperature and lighting). In addition, you can use coreSNTP to validate certificates during TLS handshakes with the cloud or, if required, generate signatures to authenticate cloud storage requests (e.g. SigV4 signatures for HTTPs requests to Amazon Simple Storage Service). The SNTP functionality becomes especially important in IoT devices that cannot retain time and date information in the absence of external power (e.g., IoT devices that do not contain real-time-clock modules). &lt;/p&gt;

&lt;p&gt;Find out more by reading the &lt;a href="https://aws-oss.beachgeek.co.uk/rv"&gt;README&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on [@AWSOpen](&lt;a href="https://twitter.com/AWSOpen"&gt;https://twitter.com/AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
  </channel>
</rss>
