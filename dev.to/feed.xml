<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Advanced C++: Arena Allocation</title>
      <author>Ashish Bailkeri</author>
      <pubDate>Sat, 16 Oct 2021 22:33:56 +0000</pubDate>
      <link>https://dev.to/aboss123/advanced-c-arena-allocation-3580</link>
      <guid>https://dev.to/aboss123/advanced-c-arena-allocation-3580</guid>
      <description>&lt;p&gt;Hi Everyone, I'm going to starting a mini series of articles about Advanced C++ Programming concepts that are used in a lot of real projects. Today's topic is: &lt;strong&gt;Arena Allocation&lt;/strong&gt;. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code snippets and images posted in this article are under the &lt;strong&gt;MIT License&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#memory-management-is-a-pain-isnt-it"&gt;
  &lt;/a&gt;
  Memory management is a pain, isn't it?
&lt;/h2&gt;

&lt;p&gt;When working in garbage collected languages such as Java or Go, you may be mostly free from dealing closely with memory but in languages like C and C++, memory usually causes a lot of problems, especially since you have a lot of power to manipulate it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-whats-the-best-allocator"&gt;
  &lt;/a&gt;
  So what's the best allocator?
&lt;/h2&gt;

&lt;p&gt;There is no number 1 best allocator in every scenario, rather, if you wanted the best allocator, the programmer is the best allocator because they know exactly what the program will do and thus know the best way to allocate memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arena-allocation"&gt;
  &lt;/a&gt;
  Arena Allocation
&lt;/h2&gt;

&lt;p&gt;Instead of allocating pointers using &lt;code&gt;malloc&lt;/code&gt; or &lt;code&gt;new&lt;/code&gt;, we can create our own allocator known as the arena allocator.&lt;/p&gt;

&lt;p&gt;This kind of allocation involves allocating a large chunk of memory before the logic of your program executes, for example, 20 GiB of memory. Wait, hold up, this sound completely unreasonable right? Yes, it is, but the operating system knows this too, so it allows &lt;a href="https://en.wikipedia.org/wiki/Memory_overcommitment"&gt;overcommitting memory&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linux-overcommit"&gt;
  &lt;/a&gt;
  Linux Overcommit
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dGE_Aa34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbefqnlz91dk2f1bhi4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGE_Aa34--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbefqnlz91dk2f1bhi4j.png" alt="Linux memory overcommit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mac-overcommit"&gt;
  &lt;/a&gt;
  Mac Overcommit
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Vg4UMhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3isi8dmj4nher5o3ndh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Vg4UMhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3isi8dmj4nher5o3ndh.png" alt="Mac memory overcommit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#windows-overcommit"&gt;
  &lt;/a&gt;
  Windows Overcommit
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Windows doesn't have the same ability to overcommit memory, rather large amounts of memory can be reserved and then requested&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v6vFIQP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc0omxuvgjabk2c4tjyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v6vFIQP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nc0omxuvgjabk2c4tjyk.png" alt="Windows memory reserve"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you have your large memory allocated, what do you do with it?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-arena-allocation"&gt;
  &lt;/a&gt;
  When to use arena allocation
&lt;/h3&gt;

&lt;p&gt;Each specific case cannot be listed as it's different for each program but here are some reasons I use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Program run-time is short and I want fast allocation&lt;/li&gt;
&lt;li&gt;Create an optimized allocator that saves on performance and flexibility&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-an-allocator"&gt;
  &lt;/a&gt;
  Create an allocator
&lt;/h3&gt;

&lt;p&gt;Here is the way I set up my arena allocator for my language &lt;a href="https://github.com/The-NextGen-Project/jet/blob/main/import/nextgen/allocator.h#L102-L140"&gt;Jet&lt;/a&gt;,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--voJ6aSYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gu1qrz4qvmv0vood1r1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--voJ6aSYv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gu1qrz4qvmv0vood1r1.png" alt="Allocator Data Structure"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The way this is setup is pretty generic, it allows me to create multiple allocators for different parts of my program, which is general pretty common when using arena allocation. For example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part A of Program &lt;em&gt;5 GiB&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Part B of Program &lt;em&gt;10 GiB&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Part C of Program &lt;em&gt;5 GiB&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is how the large pool of memory can be distributed and is useful if you know which part allocates more memory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Arena allocation is just another tool in the box that will help you advance your knowledge of low-level programming in C++. Understanding allocators behind the scenes will help you in general for any kind of endeavor.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>algorithms</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>12 VS Code Shortcuts To Code Faster!</title>
      <author>Daniela Lima</author>
      <pubDate>Sat, 16 Oct 2021 21:50:38 +0000</pubDate>
      <link>https://dev.to/mrslima/12-vs-code-shortcuts-to-code-faster-55m5</link>
      <guid>https://dev.to/mrslima/12-vs-code-shortcuts-to-code-faster-55m5</guid>
      <description>&lt;p&gt;Some of these tips I took from VS Code documentation. I recommend you to take a look. &lt;a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks"&gt;📃VS Code docs.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-quick-file-open-raw-ctrl-p-endraw-"&gt;
  &lt;/a&gt;
  1. Quick file open: &lt;code&gt;Ctrl + P&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gMm-l9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfzbx8ovn6m3qeav15b4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gMm-l9O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfzbx8ovn6m3qeav15b4.gif" alt="QuickFileOpenPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-show-terminal-raw-ctrl-backtick-endraw-"&gt;
  &lt;/a&gt;
  2. Show terminal: &lt;code&gt;Ctrl + backtick&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---iOqx5KX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxh7t1gp210hqudnbubk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---iOqx5KX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxh7t1gp210hqudnbubk.png" alt="ShowTerminalPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-zen-mode-raw-ctrl-k-then-z-endraw-"&gt;
  &lt;/a&gt;
  3. Zen mode: &lt;code&gt;Ctrl + K, then Z&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqaVeybP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsw29uf09ubedaqfohgz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqaVeybP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsw29uf09ubedaqfohgz.gif" alt="ZenMondePIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-open-new-editor-raw-ctrl-endraw-"&gt;
  &lt;/a&gt;
  4. Open new editor: &lt;code&gt;Ctrl + \&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbJSkAZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z36bcwrvpm02zup6qh3e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbJSkAZt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z36bcwrvpm02zup6qh3e.gif" alt="SplitEditorPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-switch-between-editors-raw-ctrl-1-ctrl-2-endraw-"&gt;
  &lt;/a&gt;
  5. Switch between editors: &lt;code&gt;Ctrl + 1, Ctrl + 2...&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--izN1D_9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zivyzlb097qz42tbx6e.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--izN1D_9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zivyzlb097qz42tbx6e.gif" alt="NavigateEditorPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-multi-cursor-selection-raw-alt-click-endraw-or-raw-ctrl-alt-updown-endraw-"&gt;
  &lt;/a&gt;
  6. Multi cursor selection: &lt;code&gt;Alt + Click&lt;/code&gt; or &lt;code&gt;Ctrl + Alt + Up/Down&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9z0KMZoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjqvww648f1lohqpvr2t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9z0KMZoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjqvww648f1lohqpvr2t.gif" alt="MultiCursorPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-you-can-also-add-additional-cursors-to-all-occurrences-of-the-current-selection-raw-ctrl-shift-l-endraw-"&gt;
  &lt;/a&gt;
  7. You can also add additional cursors to all occurrences of the current selection: &lt;code&gt;Ctrl + Shift + L&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BJE0oheu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01r2ma37aw67lbfg984v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BJE0oheu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01r2ma37aw67lbfg984v.gif" alt="AllOcurPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-or-if-you-want-to-select-only-the-next-occurrence-raw-ctrl-d-endraw-"&gt;
  &lt;/a&gt;
  8. Or if you want to select only the next occurrence: &lt;code&gt;Ctrl + D&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xs-YvBUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1owbm92ngpbpjjfhovpt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xs-YvBUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1owbm92ngpbpjjfhovpt.gif" alt="OneByOnePIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-copy-line-up-down-raw-shift-alt-updown-endraw-"&gt;
  &lt;/a&gt;
  9. Copy line up / down: &lt;code&gt;Shift + Alt + Up/Down&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kTa-pTYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88q15n4gm13fuxpwqlig.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kTa-pTYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88q15n4gm13fuxpwqlig.gif" alt="CopyLinePIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-move-line-up-and-down-raw-alt-updown-endraw-"&gt;
  &lt;/a&gt;
  10. Move line up and down: &lt;code&gt;Alt + Up/Down&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqieEQm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8widg4jh7twym1wcr333.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqieEQm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8widg4jh7twym1wcr333.gif" alt="MoveLinePIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-code-formatting-raw-shift-alt-f-endraw-whole-document"&gt;
  &lt;/a&gt;
  11. Code formatting: &lt;code&gt;Shift + Alt + F&lt;/code&gt; (whole document)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3eR4k3S6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frsg2yorcx7y17ur2u8h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eR4k3S6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frsg2yorcx7y17ur2u8h.gif" alt="FormatPIC"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-rename-raw-f2-endraw-"&gt;
  &lt;/a&gt;
  12. Rename: &lt;code&gt;F2&lt;/code&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-cUCfk9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuxxm9wm9jmrkw7n7fv5.gif" alt="RenamePIC"&gt;
&lt;/h2&gt;

&lt;p&gt;😎 You might also like:&lt;br&gt;
&lt;a href="https://dev.to/mrslima/python-typing-kl4"&gt;Python Typing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📫 Where to find me:&lt;br&gt;
&lt;a href="http://taplink.cc/limaa.ds"&gt;All my links&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Build a video player with React.
</title>
      <author>Adeola</author>
      <pubDate>Sat, 16 Oct 2021 21:27:09 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-a-video-player-with-react-24h8</link>
      <guid>https://dev.to/hackmamba/build-a-video-player-with-react-24h8</guid>
      <description>&lt;p&gt;The use of video content on webpages is becoming increasingly popular. Its importance cannot be overestimated as it engages users, and creates a lasting impression in just a few seconds.&lt;br&gt;
It is for this reason that the steps involved in the creation of a video component using React will be discussed in this article.&lt;/p&gt;

&lt;p&gt;The component supports YouTube and Vimeo to allow for the flexibility in its use by users.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sandbox"&gt;
  &lt;/a&gt;
  Sandbox
&lt;/h2&gt;

&lt;p&gt;We completed the entire project on Codesandbox, and you can fork the repo to run it.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CodeSandbox id="react-videoplayer-f62ej" title="React-Videocomponent"/&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisitesinstallation"&gt;
  &lt;/a&gt;
  Prerequisites/Installation
&lt;/h2&gt;

&lt;p&gt;No advanced requirements are needed. However, a basic knowledge of React installation is required.&lt;/p&gt;

&lt;p&gt;To create a React application, open the terminal window or command prompt and change the directory to the folder where you want to create the application.&lt;/p&gt;

&lt;p&gt;Moreover, an online code editor which supports React can be used.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npx create-react-app react-video-player&lt;/code&gt;  to create the application. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The above command installs the create-react-app package into the react-video-player folder of our application. The react-video-player can be given a different name, but should be in lower case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Change directory to the application folder by running &lt;code&gt;cd react-video-player command&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After the application has been created, install &lt;code&gt;reactjs-media&lt;/code&gt; from a terminal window to install the application dependencies.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install reactjs-media&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Start the application by running &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-video-component"&gt;
  &lt;/a&gt;
  Creating the video component
&lt;/h2&gt;

&lt;p&gt;To structure the video player, the video component remains our primary interest. The video component of the reactjs-media involves an effortless process. To do this, the original code in the &lt;code&gt;src/App.jsfolder&lt;/code&gt; is replaced with the snippet below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//imports basic styling from the css file.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactVideo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reactjs-media&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//imports the React video component the reactjs-media &lt;/span&gt;
    &lt;span class="nx"&gt;dependency&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//exports the default app into the index.js for rendering&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;//defines the properties of the video component&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactVideo&lt;/span&gt;
        &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://player.vimeo.com/external/527751333.hd.mp4? s=6c0db75ad52213d37e122ed4038c6150997e870e&amp;amp;profile_id=172&amp;amp;oauth2_t oken_id=57447761&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;autoPlay&lt;/span&gt;
        &lt;span class="nx"&gt;primaryColor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;poster&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://images.pexels.com/photos/7422113/pexels- photo-7422113.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=1&amp;amp;w=500&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The audio component could also be created using a similar approach.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we went through the creation of a video player using a React component that supports YouTube and Vimeo. The application dependencies with the video component which is reactjs-media was installed through npm.&lt;/p&gt;

&lt;p&gt;This article would not be complete without a mention of how this single page application can be authenticated with Auth0.&lt;br&gt;
With Auth0, an authentication API would be integrated into the application in just a couple of steps. To find out how, visit &lt;a href="https://auth0.com/docs/libraries/auth0-react"&gt;https://auth0.com/docs/libraries/auth0-react&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, the media and other image assets can be stored in the cloud with just a few clicks using Cloudinary. For a detailed overview, visit &lt;a href="https://cloudinary.com/documentation/upload_images"&gt;https://cloudinary.com/documentation/upload_images&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As the code was run in codesandbox, the images might need to be resized to fit the desktop screen, if it is going to be run from an offline code editor. To resize the images, follow the complete walkthrough on &lt;a href="https://cloudinary.com/blog/cool_tricks_for_resizing_images_in_javascript"&gt;https://cloudinary.com/blog/cool_tricks_for_resizing_images_in_javascript&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/jim-junior/reactjs-media"&gt;https://github.com/jim-junior/reactjs-media&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/auth0/auth0-react"&gt;https://github.com/auth0/auth0-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloudinary.com/"&gt;https://cloudinary.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Content created for the Hackmamba Jamstack Content Hackathon&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>100 Bytes of CSS to look great everywhere</title>
      <author>swyx</author>
      <pubDate>Sat, 16 Oct 2021 21:05:53 +0000</pubDate>
      <link>https://dev.to/swyx/100-bytes-of-css-to-look-great-everywhere-19pd</link>
      <guid>https://dev.to/swyx/100-bytes-of-css-to-look-great-everywhere-19pd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Dan Luu always writes fascinating posts, but &lt;a href="https://danluu.com/"&gt;the design&lt;/a&gt; makes it very painful to read:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQiENkcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB2PmLXVEAYu7GN%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQiENkcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB2PmLXVEAYu7GN%3Fformat%3Djpg%26name%3Dlarge" alt="https://pbs.twimg.com/media/FB2PmLXVEAYu7GN?format=jpg&amp;amp;name=large"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A couple years ago, &lt;a href="https://news.ycombinator.com/item?id=19607169"&gt;this post on HN&lt;/a&gt; was fairly popular, and I saved it on my &lt;a href="https://github.com/sw-yx/spark-joy/blob/master/README.md#drop-in-css-frameworks"&gt;spark-joy repo&lt;/a&gt;, which is a &lt;a href="https://twitter.com/swyx/status/1434206569881694210"&gt;swipe file&lt;/a&gt; of design tips I've collected over the past few years. &lt;/p&gt;

&lt;p&gt;However, I noticed that the original website link is dead. So I thought I would refresh it with what I have now implemented for Dan's site:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZcYIvU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB2Po1tVIAA-i3O%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZcYIvU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FB2Po1tVIAA-i3O%3Fformat%3Djpg%26name%3Dlarge" alt="https://pbs.twimg.com/media/FB2Po1tVIAA-i3O?format=jpg&amp;amp;name=large"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#100-bytes-of-css-to-look-great-nearly-everywhere"&gt;
  &lt;/a&gt;
  100 bytes of css to look great nearly everywhere
&lt;/h1&gt;

&lt;p&gt;This should be simple drop-in css to look good on most displays:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this down. I've adapted the original text with my own commentary.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;max-width: 60ch&lt;/code&gt;: the "readable range" is usually 50-80 character widths, and CSS lets you express that directly with the &lt;code&gt;ch&lt;/code&gt; unit. &lt;a href="https://twitter.com/swyx/status/1223025553986347009"&gt;I blogged more on line lengths last year&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;padding: 1.5rem&lt;/code&gt;: If the display's width goes under &lt;code&gt;60ch&lt;/code&gt;, then this padding keeps things looking good on mobile. While this may seem optional, it actually hits two birds with one stone - the padding also provides sorely-needed top and bottom whitespace.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;margin: auto&lt;/code&gt;: This is really all that is needed to center the page - applied on &lt;code&gt;html&lt;/code&gt;, because Dan's site doesnt have a semantic &lt;code&gt;main&lt;/code&gt; tag and &lt;code&gt;html&lt;/code&gt; is more likely to exist in most sites (no judgment pls, i've heard enough semantic HTML preaching). That the top tag centers itself relative to nothing is unintuitive, but thats how browsers do.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;line-height: 1.75rem&lt;/code&gt;: Spacing between the lines to help increase visual clarity.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;font-size: 1.5rem&lt;/code&gt;: I've noticed that recent design trends and screen sizes have tended toward bigger font sizes. Or maybe I'm getting old. Use &lt;code&gt;rem&lt;/code&gt; to just be bigger than the user-set default&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#optional-100-more-bytes"&gt;
  &lt;/a&gt;
  Optional 100 more bytes
&lt;/h2&gt;

&lt;p&gt;If you can spare a few extra bytes of CSS, I'd also recommend margins for headers, paragraphs, and lists, and softening your text color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1d1d1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktMDQTTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sw0uu6y0cwp6lue3d9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktMDQTTM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sw0uu6y0cwp6lue3d9g.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stylebot"&gt;
  &lt;/a&gt;
  Stylebot
&lt;/h2&gt;

&lt;p&gt;You can auto apply these styles on to pages with &lt;a href="https://github.com/ankit/stylebot"&gt;https://github.com/ankit/stylebot&lt;/a&gt;. I can't vouch for their security as I only just started using it.&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>Hacktoberfest - Beginner Project</title>
      <author>S3cBar0n</author>
      <pubDate>Sat, 16 Oct 2021 20:54:44 +0000</pubDate>
      <link>https://dev.to/s3cbar0n/hacktoberfest-beginner-project-1aa7</link>
      <guid>https://dev.to/s3cbar0n/hacktoberfest-beginner-project-1aa7</guid>
      <description>&lt;p&gt;Still need to contribute PR's for Hacktoberfest?&lt;/p&gt;

&lt;p&gt;Checkout this great beginner repo for HTML, CSS, and JS!&lt;br&gt;
&lt;a href="https://github.com/P2PHackClub/website"&gt;https://github.com/P2PHackClub/website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Debugging Mindset</title>
      <author>Vedran Mihočinec</author>
      <pubDate>Sat, 16 Oct 2021 20:36:24 +0000</pubDate>
      <link>https://dev.to/vedran/debugging-mindset-3n77</link>
      <guid>https://dev.to/vedran/debugging-mindset-3n77</guid>
      <description>&lt;p&gt;Bugs here, bugs there, bugs everywhere. Some are easy to fix, some are complex and obscure. So, is there a generic approach to fixing every bug? Probably not.&lt;/p&gt;

&lt;p&gt;Anyway, there are four parts of fixing a bug:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Understanding a bug;&lt;/li&gt;
&lt;li&gt;Identifying the cause of a bug;&lt;/li&gt;
&lt;li&gt;Planning a bug fix;&lt;/li&gt;
&lt;li&gt;Applying a bug fix.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#understanding-a-bug"&gt;
  &lt;/a&gt;
  Understanding a bug
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-steps-to-reproduce-a-bug"&gt;
  &lt;/a&gt;
  What are the steps to reproduce a bug?
&lt;/h3&gt;

&lt;p&gt;It is crucial to have as much information as possible about a bug, even if some of that information ends up irrelevant. For example, knowing at what time which user on which platform with which input got which output. You should almost always have all the required information already written in the bug report and if you constantly end up asking this question, then consider writing a list of required information for reporting a bug.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-expected-flow"&gt;
  &lt;/a&gt;
  What is the expected flow?
&lt;/h3&gt;

&lt;p&gt;Sometimes features end up reported as bugs. And that's okay, as developers don't know every part of the application code the same way bug reporters might not know about some feature. So it's important to have the expected flow explained in the bug report.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-your-bug-a-bug-and-is-expected-flow-an-expected-flow"&gt;
  &lt;/a&gt;
  Is your bug a bug and is expected flow an expected flow?
&lt;/h3&gt;

&lt;p&gt;As mentioned above, not everyone knows everything and features might end up reported as bugs. So, if you think a bug needs to be challenged, challenge it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identifying-the-cause-of-a-bug"&gt;
  &lt;/a&gt;
  Identifying the cause of a bug
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-does-the-log-say"&gt;
  &lt;/a&gt;
  What does the log say?
&lt;/h3&gt;

&lt;p&gt;If you know when a bug happened, are there any logs that might help you? Remember to consider all log types: system logs (example: OOM happened), application logs (example: required third party service was unavailable), third party logs (example: unoptimized database query resulted in slow query execution), etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-the-flow-behave-in-your-local-environment"&gt;
  &lt;/a&gt;
  How does the flow behave in your local environment?
&lt;/h3&gt;

&lt;p&gt;Try to reproduce the bug in your local environment. After you reproduce it, turn on a debugger and try to figure out where the bug is in the code. If needed, write down suspicious points and ponder over them until you figure out where the bug is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-the-flow-behave-in-the-production-environment"&gt;
  &lt;/a&gt;
  How does the flow behave in the production environment?
&lt;/h3&gt;

&lt;p&gt;If you can't reproduce the bug in your local environment, then it might be time to try the production environment. Based on identified suspicious points, use remote debugging or write the information you need in the application logs (example: "If logged user is me, then the log information I need (input data, execution time, etc.)"). After you have that production information, try to reproduce it locally again. And finally, if you didn't use remote debugging, remove added temporary logging code from production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-if-we-cant-identify-the-cause-of-the-bug-after-all-the-steps-mentioned-above"&gt;
  &lt;/a&gt;
  What if we can't identify the cause of the bug after all the steps mentioned above?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Talk to a duck&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain the bug and all the steps and findings to a non-person. Just by explaining, some ideas might pop up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Talk to other developers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain the bug and all the steps and findings to other developers. Maybe you will get some advice or tips on what to check.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give up (temporarily)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add detailed logging to all identified suspicious points (be careful not to impact the application performance), write down all your findings, deploy code with detailed logging to production and wait for the bug to occur again.&lt;/p&gt;

&lt;p&gt;Explain to your client that you are unable to reproduce the bug and that you have added detailed logging so you will know when the bug occurs next time and that you will try to fix it again at that time, with new information you will have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-a-bug-fix"&gt;
  &lt;/a&gt;
  Planning a bug fix
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#is-your-bug-a-bug-and-is-expected-flow-an-expected-flow-vol-2"&gt;
  &lt;/a&gt;
  "Is your bug a bug and is expected flow an expected flow" vol 2
&lt;/h3&gt;

&lt;p&gt;With new information, ask yourself if there is a need to challenge the requested flow. Maybe there is a reason the flow behaves the way it behaves. Maybe the problem is wrong communication to the end-user. Maybe there are security, performance, or some other kind of issues that might occur if that flow is changed. Always check code history where the bug occurs, maybe there are some linked feature requests or explanations for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-many-entities-are-affected-by-this-bug"&gt;
  &lt;/a&gt;
  How many entities are affected by this bug?
&lt;/h3&gt;

&lt;p&gt;It's good practice to check how many entities were affected by a bug. It might lead to different bug solutions or maybe the client might want to know that information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-you-reproduce-a-bug-with-a-test"&gt;
  &lt;/a&gt;
  Can you reproduce a bug with a test?
&lt;/h3&gt;

&lt;p&gt;If you can reproduce a bug with a test, plan to write the test.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-need-a-hotfix"&gt;
  &lt;/a&gt;
  Do you need a hotfix?
&lt;/h3&gt;

&lt;p&gt;If you need to fix a bug ASAP, then plan to create a hotfix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#did-the-bug-cause-some-data-corruption"&gt;
  &lt;/a&gt;
  Did the bug cause some data corruption?
&lt;/h3&gt;

&lt;p&gt;If some data is corrupted because of the bug, analyze the impact and plan the solution for data corruption. For example, you might have to create a background process that will fix all corrupted data, or maybe you might need some manual intervention to fix corrupted data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-need-to-remove-added-logging"&gt;
  &lt;/a&gt;
  Do you need to remove added logging?
&lt;/h3&gt;

&lt;p&gt;If you have added some detailed logging to better identify the bug, maybe you need to remove it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-a-bug-fix"&gt;
  &lt;/a&gt;
  Applying a bug fix
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;If needed, create and deploy a hotfix. A hotfix can be ugly, but, ideally, it should be accompanied by a test that confirms that hotfix works.&lt;/li&gt;
&lt;li&gt;Fix the bug according to your application coding standards and, if possible, write some tests for it. If you added some logging that is not needed anymore, remove it.&lt;/li&gt;
&lt;li&gt;If corrupted data exists, fix corrupted data.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#outro"&gt;
  &lt;/a&gt;
  Outro
&lt;/h2&gt;

&lt;p&gt;These are the steps I often go through when I work on solving bugs. Most of the time there is no need to go through all these steps, but hey, here they are.&lt;br&gt;
And there is still one important thing to mention:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-estimate-bug-fixing"&gt;
  &lt;/a&gt;
  How to estimate bug fixing?
&lt;/h3&gt;

&lt;p&gt;When you have all the information about the bug, somebody might need an estimate on how long it takes to solve that bug. That's easy when the bug is obvious and (probably) easy to solve, but how about when it isn't? Here are my rule-of-thumb rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a task for identifying the cause of the bug and estimate it to a maximum of one day. If you can't reproduce a bug in one day, give up (temporarily) and create a follow-up ticket for a time when the bug is detected again.&lt;/li&gt;
&lt;li&gt;If you identify the cause of the bug within one day and you can fix it in the remaining part of the day, fix that bug.&lt;/li&gt;
&lt;li&gt;If you can't easily fix the bug, create follow-up tasks based on your plan for a bug fix.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that's it, I hope this article helps you in your future bug fixing ventures.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Javascript : Variables and Datatypes</title>
      <author>Rawan Amr Abdulsattar</author>
      <pubDate>Sat, 16 Oct 2021 20:25:12 +0000</pubDate>
      <link>https://dev.to/rawan_amr_abdulsattar/javascript-variables-and-datatypes-532o</link>
      <guid>https://dev.to/rawan_amr_abdulsattar/javascript-variables-and-datatypes-532o</guid>
      <description>&lt;p&gt; &lt;/p&gt;
&lt;a href="https://1.bp.blogspot.com/-lK1OKYFOHs8/YKVj2ENCprI/AAAAAAAAALE/PdZANMJSTfsXDa61pGg46tjV4B0x-aMfQCLcBGAsYHQ/s800/javascript%25232.png"&gt;&lt;img alt="Javascript : #2 Variables and Data types" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9jmP_AX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-lK1OKYFOHs8/YKVj2ENCprI/AAAAAAAAALE/PdZANMJSTfsXDa61pGg46tjV4B0x-aMfQCLcBGAsYHQ/s16000/javascript%2525232.png" title="Javascript : #2 Variables and Data types"&gt;&lt;/a&gt;&lt;br&gt;
&lt;h1&gt;What is a Variable?!&lt;/h1&gt;
&lt;span&gt;A &lt;b&gt;variable&lt;/b&gt; is a container with a label (name) where you store a certain value ( a piece of data ) to use it in your code.&lt;/span&gt;&lt;h1&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;span&gt;Declaring variables and assigning values to them&lt;/span&gt;&lt;/h1&gt;
&lt;h4&gt;&lt;span&gt;To declare a variable is to give it a name, you have to use one of these keywords:&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;var &lt;/b&gt;: most common key to declare variables.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;let &lt;/b&gt;: only visible within the block where it's declared.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;const&lt;/b&gt; : used for constant values and cannot be changed , it will cause an error if you tried to do so.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;span&gt;&lt;b&gt; To declare a variable, use one of the keywords followed by the variable name (which has to be meaningful)&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;var myVariable ;&lt;br&gt;&lt;br&gt;
let myName ;&lt;br&gt;&lt;br&gt;
const pi ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;span&gt;Variable naming conventions &lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;&lt;b&gt;To name a variable in javascript , you should follow some rules:&lt;/b&gt;&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;span&gt;javascript is &lt;b&gt;case sensitive&lt;/b&gt; which means that the letters' case matters (VARIABLE isn't the same as Variable and also not as variable).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;you have to use &lt;b&gt;camelCase&lt;/b&gt; (example: myName, schoolYear, etc.)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;You can add &lt;b&gt;numbers&lt;/b&gt; but not at the beginning (whatever , who will name a variable 2myVarName, this won't satisfy the rule n.o. 2)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;you cannot use &lt;b&gt;hyphens&lt;/b&gt; " - " or &lt;b&gt;spaces&lt;/b&gt; but you can use &lt;b&gt;underscores&lt;/b&gt; " _ " instead (note : underscores can be used as the first character in a variable name).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;You cannot use any of the &lt;b&gt;reserved keywords&lt;/b&gt; (like : var, let, const, if, while, for and so on) . don't worry if you don't know a lot of keywords , if you tried to use one it will be highlighted as a keyword and results in an error.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;span&gt;Assigning values to variables&lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;&lt;b&gt;To assign a value to a variable, use the assignment operator  " = " (equal sign).&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Declaring variables&lt;br&gt;&lt;br&gt;
var myVariable ; &lt;br&gt;&lt;br&gt;
let myName ;&lt;br&gt;&lt;br&gt;
const pi ;


&lt;p&gt;// assigning values to variables&lt;br&gt;&lt;br&gt;
myVariable = 25; &lt;br&gt;&lt;br&gt;
myName= "Rawan";&lt;br&gt;&lt;br&gt;
pi = 3.14;&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;span&gt;&lt;b&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;Note&lt;/b&gt; : you can declare variables and assign values to them on the same line.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;
&lt;pre&gt;&lt;code&gt;&lt;span&gt;// Declaring a variable and assigning a value to it on one line&lt;br&gt;&lt;br&gt;
var myAge = 15; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;span&gt;Datatypes&lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;In Javascript there are a lot of data types, we will discuss the most important and basic ones.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;h3&gt;&lt;span&gt;Main Datatypes :&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Numbers&lt;/b&gt; : they can be integer numbers or floats( numbers with decimal points).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Strings &lt;/b&gt;: any series of characters included between quotes (double quotes " " or single quotes ' ' ).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Boolean value &lt;/b&gt;: has one of the two values &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt; .&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;null &lt;/b&gt;: means nothing.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;undefined &lt;/b&gt;: something that hasn't been defined.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Arrays &lt;/b&gt;: can store more than one piece of data.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;Objects &lt;/b&gt;: used to store key-value pairs( each property associated with its own value).&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;span&gt;Getting output in Javascript &lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;You can output values to the console using &lt;b&gt;console.log()&lt;/b&gt; , inside the parenthesis put a &lt;b&gt;variable name&lt;/b&gt; or any piece of &lt;b&gt;data&lt;/b&gt; to be shown in the console.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;console.log("Hello World !"); // output : Hello World !&lt;br&gt;&lt;br&gt;
var myScore = 320 ;&lt;br&gt;&lt;br&gt;
console.log(myScore); // output : 320&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;span&gt;Notes , Again...&lt;/span&gt;&lt;/h1&gt;
&lt;span&gt;1 . Everything greyed out (not highlighted) after " // " is called a &lt;b&gt;comment &lt;/b&gt;, you write them to explain to yourself and others what your code does , you write them using : &lt;/span&gt; &lt;br&gt;&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;//&lt;/b&gt; : for inline comments&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;b&gt;/*  */&lt;/b&gt; : for multi-line comments&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;&lt;pre&gt;&lt;code&gt;&lt;span&gt;// I am an inline comment


&lt;p&gt;/* I am a &lt;br&gt;&lt;br&gt;
multi-line&lt;br&gt;&lt;br&gt;
comment */&lt;/p&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;2 .  In Javascript we put a &lt;b&gt;semicolon &lt;/b&gt;"&lt;b&gt;; &lt;/b&gt;" after the end of each line, you don't have to do it all the time, but it's a good practice to do so.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;3 . Variables that are declared but not assigned to store any values are called " &lt;b&gt;Uninitialized variables&lt;/b&gt; " and have a default value of &lt;b&gt;undefined&lt;/b&gt; .&lt;/span&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Core Web Vitals</title>
      <author>Carmen Ansio</author>
      <pubDate>Sat, 16 Oct 2021 20:01:19 +0000</pubDate>
      <link>https://dev.to/carmenansio/core-web-vitals-4f7a</link>
      <guid>https://dev.to/carmenansio/core-web-vitals-4f7a</guid>
      <description>&lt;p&gt;The heart of the &lt;strong&gt;Google Core Web Vitals&lt;/strong&gt; update are the new performance metrics which aim to get the user experience. It's not about technical performance, is about feeling fast...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#core-web-vitals-metrics"&gt;
  &lt;/a&gt;
  Core Web Vitals metrics
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Largest Contentful Paint&lt;/strong&gt; — LCP loading metric&lt;br&gt;
LCP measures loading performance. How quickly is content drawn to the page?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Y7f7d1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvp5shia6z8b8pk6ez6w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Y7f7d1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvp5shia6z8b8pk6ez6w.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;First Input Delay&lt;/strong&gt; — FID interactivity metric&lt;br&gt;
FID interface responsiveness. How quickly does the page respond to user actions?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVHQyLV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka013tyd1rv0q7hnoulq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVHQyLV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka013tyd1rv0q7hnoulq.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cumulative Layout Shift&lt;/strong&gt; — CLS visual stability metric&lt;br&gt;
CLS measures visual stability. Does content move unexpectedly on the page?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fce4iLZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0yqzi6y03xq6ur7cpq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fce4iLZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0yqzi6y03xq6ur7cpq5.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#how-can-i-calculate-scores-on-my-local-device"&gt;
  &lt;/a&gt;
  How can I calculate scores on my local device?
&lt;/h3&gt;

&lt;p&gt;With these Core Web Vitals tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://chrome.google.com/webstore/detail/web-vitals/ahfhijdlegdabablpippeagghigmibma/related"&gt;Chrome Web Vitals extension&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/speed/pagespeed/insights"&gt;Google Pagespeed insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The user experience is very important because it aims to provide positive experiences that keep a user loyal to the product or brand.&lt;/p&gt;

&lt;p&gt;I hope this article helps you get up and running with it. Thanks for reading!&lt;/p&gt;

</description>
      <category>webperf</category>
      <category>webvitals</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Processing CPU-intensive Jobs in NodeJS</title>
      <author>Oghenovo Usiwoma</author>
      <pubDate>Sat, 16 Oct 2021 19:51:38 +0000</pubDate>
      <link>https://dev.to/eunovo/processing-cpu-intensive-jobs-in-nodejs-5epd</link>
      <guid>https://dev.to/eunovo/processing-cpu-intensive-jobs-in-nodejs-5epd</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover Photo by &lt;a href="https://unsplash.com/@fifernando?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Fidel Fernando&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I recently had to solve a problem with one of my NodeJS servers. I had to parse and process data from an excel sheet which turned out to be pretty CPU-intensive and it blocked the NodeJS event loop, effectively freezing my server till it's done. I wasn't surprised though; I expected this to happen. While there are several things you could do to resolve this, I'm going to present a solution using the NodeJS worker_threads module. Before we start, let's quickly talk about this thread thing. The code used in this article is available &lt;a href="https://gist.github.com/Eunovo/c062954fd17ecee45a36e5c7ae0cd925"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nodejs-and%C2%A0threads"&gt;
  &lt;/a&gt;
  NodeJS and Threads
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A thread is a path of execution within a process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source &lt;a href="https://www.geeksforgeeks.org/thread-in-operating-system/"&gt;geeksforgeeks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript is a single-threaded programming language which means that only a set of instructions can be executed at a time. NodeJS applications are not really single-threaded but we can't create threads the way we can in a language like Java. NodeJS runs certain tasks like I/O operations in parallel but other CPU operations run on one thread.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-this-mean-for%C2%A0us"&gt;
  &lt;/a&gt;
  What does this mean for us?
&lt;/h3&gt;

&lt;p&gt;Your server will work fine if all the requests you receive only require I/O heavy operations like database reads, writes etc. But if you happen to have a request that requires something CPU-intensive like say parsing a document or running a really long loop like I had to do when processing an excel sheet, your server won't be able to serve other requests because the only thread processing requests will be stuck.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-workerthreads-module"&gt;
  &lt;/a&gt;
  What is the "worker_threads" module?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The worker_threads module enables the use of threads that execute JavaScript in parallel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source &lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/worker_threads.html"&gt;NodeJS v14 docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This allows us to build multi-threaded NodeJS applications which is what we need right now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#okay-so-how-are-we-going-to-use-this-to-solve-our%C2%A0problem"&gt;
  &lt;/a&gt;
  Okay… So, how are we going to use this to solve our problem?
&lt;/h3&gt;

&lt;p&gt;Let's pretend to be Senior Software Engineers for a moment and start by writing some sort of Spec!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-spec"&gt;
  &lt;/a&gt;
  The Spec
&lt;/h3&gt;

&lt;p&gt;The idea is to give CPU-intensive jobs to another thread. As a job is received, it is immediately stored in a queue for processing. A worker pool, a collection of worker threads, regularly request work from this queue for processing. When the job is done, the main thread is notified, the result is stored in the DB. You can do anything you want with the result but in my case, I instructed the system to send an email containing a link to the result, to the user who created the job.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-happens-if-the-process-ends-with-jobs-in-the%C2%A0queue"&gt;
  &lt;/a&gt;
  What happens if the process ends with jobs in the queue?
&lt;/h4&gt;

&lt;p&gt;Well, the queue should also be saved to the DB. When the app starts, it should load all outstanding jobs from the DB and enqueue them for processing. We will save all requests to the DB before putting them in the queue so all jobs on the queue are also on the DB.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-happens-when-the-worker-threads-stop-for-some-reason-with-incomplete-jobs"&gt;
  &lt;/a&gt;
  What happens when the worker threads stop for some reason with incomplete jobs?
&lt;/h4&gt;

&lt;p&gt;We can have exit event handlers on worker threads. This means that, if we keep track of who is doing what, we can tell that a worker has left a job unfinished and try to reassign it to a different worker! A Map will suffice to hold our assignments. Each worker will need to have a unique id we can use as a key for our Map. The &lt;a href="https://www.npmjs.com/package/uuid"&gt;uuid&lt;/a&gt; package will provide us with unique ids for our workers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-happens-if-an-error-occurred-while-processing-a%C2%A0job"&gt;
  &lt;/a&gt;
  What happens if an error occurred while processing a job?
&lt;/h4&gt;

&lt;p&gt;A job status field should account for this. I recommend using the following statuses: &lt;code&gt;pending&lt;/code&gt;, &lt;code&gt;processing&lt;/code&gt;, &lt;code&gt;completed&lt;/code&gt; and &lt;code&gt;failed&lt;/code&gt;. You can also have a &lt;code&gt;message&lt;/code&gt; field that contains useful information about a job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-we-know-what-to-do-enough-talk-lets%C2%A0code"&gt;
  &lt;/a&gt;
  Now, we know what to do. Enough talk, let's code!
&lt;/h2&gt;

&lt;p&gt;I'll be using Typescript here but the JavaScript equivalent shouldn't be too different. I also use Observables a lot but there's nothing too special about it. I don't know exactly what an Observable is supposed to be but for me(and as it is used here), it's just a mechanism to emit events and listen for them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---XneQhsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8gwqnkcyfk0c979mou7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XneQhsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8gwqnkcyfk0c979mou7.png" alt="An image to help us understand the design better"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#job-processor"&gt;
  &lt;/a&gt;
  Job Processor
&lt;/h3&gt;

&lt;p&gt;This guy has a really simple job.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accept a job, save it to the DB then enqueue it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;registerJob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// save job to DB before it is added to queue&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pending&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Initialize the Worker pool and listen for messages from the pool.&lt;/li&gt;
&lt;li&gt;When a worker requests work, dequeue a job and pass it to the worker. Store the assignment in a map and update the job status to &lt;code&gt;processing&lt;/code&gt; in the DB.&lt;/li&gt;
&lt;li&gt;When a worker announces that a job is complete, update the DB, the assignment map and find another job for it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;processJobs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;workers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WorkerPool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nWorkers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;WorkerMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job_complete&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assignedJobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assignedJobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;// update job status&lt;/span&gt;
                &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;newJob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newJob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assignedJobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newJob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// update job status&lt;/span&gt;
            &lt;span class="nx"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;processing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newJob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;exit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ongoingJob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assignedJobs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ongoingJob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="c1"&gt;// Re-queue the job that wasn't finished&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ongoingJob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-queue"&gt;
  &lt;/a&gt;
  The Queue
&lt;/h3&gt;

&lt;p&gt;Nothing special here either, just an implementation of a async Queue that clients can await until there's a new item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... taken from Queue.ts&lt;/span&gt;
    &lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;QueueEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;QueueEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;currentItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;QueueEvents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enqueue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dequeue&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-worker%C2%A0pool"&gt;
  &lt;/a&gt;
  The Worker Pool
&lt;/h3&gt;

&lt;p&gt;Initialize the required number of workers, assign them ids and manage communication between clients and the workers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ... taken from WorkerPool.ts&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;createWorker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/worker.js`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// Create another worker to replace the closing worker&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-worker"&gt;
  &lt;/a&gt;
  The Worker
&lt;/h3&gt;

&lt;p&gt;This guy is responsible for processing our CPU intensive jobs. It will request work when it starts. As soon it receives a job, it processes and alerts the main process that the job is complete with the result. There's no need to send another job request here because the main process will automatically try to find something else for it to do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;workerData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parentPort&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;worker_threads&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;WorkerMessage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./WorkerMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;parentPort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// process job here&lt;/span&gt;
        &lt;span class="nx"&gt;parentPort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;WorkerMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job_complete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resultId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;parentPort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;WorkerMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job_complete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;failed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;parentPort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;WorkerMessage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request_job&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#on-startup"&gt;
  &lt;/a&gt;
  On Startup
&lt;/h3&gt;

&lt;p&gt;All that's left is to call the &lt;code&gt;Job Processor&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;jobProcessor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./JobProcessor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;jobProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadOutstandingJobs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;jobProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processJobs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That was a lot of Code but it's mostly simple stuff. I like that the code is mostly clean and reusable and we managed to solve our problem here but this solution is far from perfect. I can think of a few scenarios where you might want something different.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Your job might be too CPU intensive and you need to split each request among several workers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You might have a lot of server instances set up and you don't want each of them to spin their own workers. Maybe you want a central worker pool for all your server instances to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;… I can think of anymore… if you have more, please drop them in the comments&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, if you think there's something I missed or there's a flaw in my work please let me know in the comments. See the full code on &lt;a href="https://gist.github.com/Eunovo/c062954fd17ecee45a36e5c7ae0cd925"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What language do I start with? (personal opinion)</title>
      <author>‘Abdelraḥman Dwedar 👨🏻‍💻🇵🇸</author>
      <pubDate>Sat, 16 Oct 2021 19:51:12 +0000</pubDate>
      <link>https://dev.to/abdelrahman_dwedar/what-language-do-i-start-with-personal-opinion-30g4</link>
      <guid>https://dev.to/abdelrahman_dwedar/what-language-do-i-start-with-personal-opinion-30g4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-can-we-choose-our-first-languages"&gt;
  &lt;/a&gt;
  How can we choose our first languages? 🤔
&lt;/h1&gt;

&lt;p&gt;We have to take 5 main standards in account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#howEasy"&gt;How easy it's&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communities"&gt;The big of their communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;The amount of free resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#IDE"&gt;The easy you can run the code (Their IDEs are easy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inDemand"&gt;The most in-demand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#how-easy-its"&gt;
  &lt;/a&gt;
  How easy it's &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The start for you has to be easy or you might hate programming from the beginning, so you don't have to start with something like C++ or Java, it's not about how "cool" that language is, it's about how much you understand it and comfortable with it.&lt;/p&gt;

&lt;p&gt;Start with easy programming language such as &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;Ruby&lt;/strong&gt;, &lt;strong&gt;PHP&lt;/strong&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#the-most-important-thing-that-you-dont-think-that-programming-is-easy-that-may-stop-you-too"&gt;
  &lt;/a&gt;
  The most important thing that you don't think that programming is easy, that may stop you too.
&lt;/h6&gt;



&lt;h2&gt;
  &lt;a href="#the-big-of-their-communities"&gt;
  &lt;/a&gt;
  The big of their communities &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Starting with a language that have big community will make starting with it much easier. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can start with something easy like PHP, Ruby, etc... but why do we start with Python &amp;amp; JS?&lt;/strong&gt;&lt;br&gt;because, they have a really big community that can help you whenever you're stuck. and you need that help while starting. BUT you can start with others too.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#some-programming-languages-with-the-biggest-communities"&gt;
  &lt;/a&gt;
  &lt;a href="https://content.techgig.com/10-programming-languages-with-the-biggest-community-support/articleshow/78908491.cms"&gt;Some Programming languages with the biggest communities&lt;/a&gt;
&lt;/h6&gt;



&lt;h3&gt;
  &lt;a href="#the-amount-of-free-resources"&gt;
  &lt;/a&gt;
  The amount of free resources &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When you start learning programming the resources is the most important thing to think about, some languages doesn't have easy to get resources.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#so-find-a-programming-language-that-has-a-lot-of-recourses"&gt;
  &lt;/a&gt;
  So find a programming language that has &lt;strong&gt;a lot of recourses&lt;/strong&gt;
&lt;/h6&gt;



&lt;h3&gt;
  &lt;a href="#the-easy-you-can-run-the-code-their-ides-are-easy"&gt;
  &lt;/a&gt;
  The easy you can run the code (Their IDEs are easy) &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Running&lt;/strong&gt;, &lt;strong&gt;debugging&lt;/strong&gt; and &lt;strong&gt;testing&lt;/strong&gt; is so important for any programmer\developer and you have to learn it, but if it's easy that'll take so much time of you just trying to run it while you can use other language like &lt;strong&gt;Python&lt;/strong&gt; and run it easily and that'll make you will will progress in lesser time.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="https://visualstudio.microsoft.com/"&gt;Visual Studio&lt;/a&gt; or &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio code&lt;/a&gt; since it can run lots of languages and they're easy to use.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-most-indemand"&gt;
  &lt;/a&gt;
  The most in-demand &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The best language to start with is the one that you can work with once you finish learning it, or at least you have more years of experience since you started earlier, which indeed will increase your chance of finding a job.&lt;br&gt;
So you have to choose a language you might start with after learning it, so you have to know what do most of companies search for.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-most-indemand-programming-languages-in-2021"&gt;
  &lt;/a&gt;
  The Most In-Demand Programming Languages in 2021
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://bootcamp.berkeley.edu/blog/most-in-demand-programming-languages/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJ9GvP4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ucberkeleybootcamp.com/wp-content/uploads/sites/106/2020/12/most-demand-programming-languages-2021-1017x1024.jpg" alt="The Most In-Demand Programming Languages in 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#click-on-the-picture-to-check-the-resource"&gt;
  &lt;/a&gt;
  Click on the picture to check the resource
&lt;/h6&gt;

&lt;p&gt;This list is only for 2021, if you are reading this in like 2024, 2025, etc... the in-demand languages will be changed probably, so you have to &lt;a href="https://www.google.com/search?q=most-in-demand-programming-languages&amp;amp;rlz=1C1CHBD_arEG952EG952&amp;amp;oq=most-in-demand-programming-languages&amp;amp;aqs=chrome..69i57j69i60.666j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Google&lt;/a&gt; it yourself 😄&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h2&gt;

&lt;p&gt;You're not required to follow all the standards of this post, there's ones more important the ones, so you have to just measure them, don't take it for granted. Good luck. 👍🏻&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#keep-in-mind"&gt;
  &lt;/a&gt;
  Keep in mind:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Do not be intolerant of the language you will start with or force others to start with it as well.&lt;/li&gt;
&lt;li&gt;Don't stop learning, and don't reject learning new language for no reason.&lt;/li&gt;
&lt;li&gt;When you learn your first language; focus more on learning the basics of programming itself, not just learning the language.


&lt;h3&gt;Thank you for reading 😊&lt;/h3&gt;
I've love to hear what do you think about that topic in the discussion below. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Download Plague Inc Apk</title>
      <author>PLAGUE INC.</author>
      <pubDate>Sat, 16 Oct 2021 19:11:00 +0000</pubDate>
      <link>https://dev.to/jefferey1bailey/download-plague-inc-apk-2hk1</link>
      <guid>https://dev.to/jefferey1bailey/download-plague-inc-apk-2hk1</guid>
      <description>&lt;p&gt;Plague Inc Mod is known as a hyperrealistic model of the world. It is the best time-pass game. Can you infect the world? Plague In cIt is a unique and strategic simulation game, is a  terrifyingly realistic simulation. &lt;/p&gt;

&lt;p&gt;In the game, you’ll be playing as a mad genius who’s plotting against humanity by developing and spreading deadly viruses that are capable of killing millions of people. Now you must bring about the end of human history by evolving a deadly, global Plague whilst adapting against everything humanity can do to defend itself. you should try to make every place in the world infected with the virus quickly. &lt;/p&gt;

&lt;p&gt;The video game is based on a theme that resembles the current global situation. The developers haven’t added the coronavirus to the list of pathogens, but they might make it a part of the gameplay in the coming months. If they add the virus right now, many would see it as insensitive.If you are into simulation strategy games, then do not miss Plague Inc. at any cost.&lt;/p&gt;

&lt;p&gt;Download Plague Inc MOD Apk the Latest Version 2021&lt;br&gt;
&lt;a href="https://apkecho.com/plague-inc"&gt;https://apkecho.com/plague-inc&lt;/a&gt;&lt;/p&gt;

</description>
      <category>game</category>
      <category>android</category>
      <category>mobile</category>
      <category>java</category>
    </item>
    <item>
      <title>How to overload method in Rust (amount of args differ).</title>
      <author>Fomalhaut Weisszwerg</author>
      <pubDate>Sat, 16 Oct 2021 19:04:23 +0000</pubDate>
      <link>https://dev.to/fmtweisszwerg/how-to-overload-method-in-rust-amount-of-args-differ-48id</link>
      <guid>https://dev.to/fmtweisszwerg/how-to-overload-method-in-rust-amount-of-args-differ-48id</guid>
      <description>&lt;h2&gt;
  &lt;a href="#adapt-version"&gt;
  &lt;/a&gt;
  Adapt version
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rustc --version
rustc 1.55.0 (c8dfcfe04 2021-09-06)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to overload methods that have different amount of args likes following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Constructor with 2 args.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Constructor with 1 arg.&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Macro&lt;/em&gt; is your better friend.&lt;/p&gt;

&lt;p&gt;So macro can be used for pseud-overloading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pseudoverloading-with-macro"&gt;
  &lt;/a&gt;
  Pseud-overloading with macro.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ip_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IpAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;port_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;sample_socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;socket2&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;SampleStruct_new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$str_ip:expr&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$num_port:expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IpAddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$str_ip&lt;/span&gt;&lt;span class="py"&gt;.parse&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IpAddr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.unwrap_or_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;panic!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`address` MUST be an IPv4 address or IPv6 address."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="n"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ip_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;port_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$num_port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;sample_socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="nf"&gt;.is_ipv4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Domain&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPV4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Domain&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPV6&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nn"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DGRAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;UDP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$obj_SocketAddr:expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="n"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ip_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$obj_SocketAddr&lt;/span&gt;&lt;span class="nf"&gt;.ip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;port_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$obj_SocketAddr&lt;/span&gt;&lt;span class="nf"&gt;.port&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;sample_socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;$obj_SocketAddr&lt;/span&gt;&lt;span class="nf"&gt;.ip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_ipv4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Domain&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPV4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Domain&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPV6&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nn"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DGRAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;UDP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then it uses as following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;SampleStruct_new!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"IP address = {}, Port = {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="py"&gt;.ip_address&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="py"&gt;.port_number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ipv6_sock_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;SocketAddr&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"::1"&lt;/span&gt;&lt;span class="py"&gt;.parse&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IpAddr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;SampleStruct_new!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipv6_sock_addr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"IP address = {}, Port = {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="py"&gt;.ip_address&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="py"&gt;.port_number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see a sample code, go &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=3d35da870934e08ba41e787237df5ede"&gt;Rust playground&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generics-with-placeholder"&gt;
  &lt;/a&gt;
  Generics with placeholder.
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Generics with placeholder&lt;/em&gt; is also your frind. &lt;code&gt;_:()&lt;/code&gt; in &lt;code&gt;impl&lt;/code&gt; block means "this is unused argument".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;SampleTrait&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;SampleTrait&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.parse&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IpAddr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.unwrap_or_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nd"&gt;panic!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`address` MUST be an IPv4 address (dotted-decimal form) or an IPv6 address."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ip_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;port_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;sample_socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="nf"&gt;.is_ipv4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Domain&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPV4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Domain&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPV6&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nn"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DGRAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;UDP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;SampleTrait&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SocketAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SocketAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:())&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ip_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="nf"&gt;.ip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;port_number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="nf"&gt;.port&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;sample_socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="nf"&gt;.ip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.is_ipv4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Domain&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;IPV4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;Domain&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;IPV6&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="nn"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DGRAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;UDP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When calling &lt;code&gt;fn new(address: SocketAddr, _:())&lt;/code&gt;, the &lt;code&gt;()&lt;/code&gt; MUST be passed to unused args. So it seems slightly ugly in this way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;SampleStruct&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"IP address = {}, Port = {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="py"&gt;.ip_address&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="py"&gt;.port_number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;ipv6_sock_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;SocketAddr&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"::1"&lt;/span&gt;&lt;span class="py"&gt;.parse&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IpAddr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;SampleStruct&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipv6_sock_addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"IP address = {}, Port = {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="py"&gt;.ip_address&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="py"&gt;.port_number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To see a sample code, go &lt;a href="https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=958e0fb6ef45fd918c0011555d1f1add"&gt;Rust playground&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
