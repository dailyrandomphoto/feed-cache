<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 2: Validate Pin, Square Every Digits and String Repeat</title>
      <author>Kingsley Ubah</author>
      <pubDate>Fri, 06 Aug 2021 15:40:41 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/day-2-validate-pin-square-every-digits-and-string-repeat-jfj</link>
      <guid>https://dev.to/ubahthebuilder/day-2-validate-pin-square-every-digits-and-string-repeat-jfj</guid>
      <description>&lt;p&gt;Hi guys!&lt;/p&gt;

&lt;p&gt;Welcome to the Friday edition of our coding challenge. In today's edition, we are going to be solving three every simple challenges.&lt;/p&gt;

&lt;p&gt;For those of who you are just joining today, time for a brief introduction. My name is Kingsley Ubah, 21 year old web developer who loves learning and sharing what he knows.&lt;/p&gt;

&lt;p&gt;In this weekly coding challenge, I will be taking out coding problems from CodeWars and sharing a step-by-step tutorial on how exactly I was able to solve it on my first trial. &lt;/p&gt;

&lt;p&gt;Everyone is then welcome to share his or her own version of the solutions. I do this every Mondays, Wednesdays and Fridays.&lt;/p&gt;

&lt;p&gt;For today, we are going to be solving three simple challenges:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Square Every Digits&lt;/li&gt;
&lt;li&gt;String Repeat&lt;/li&gt;
&lt;li&gt;Validate Pin&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Without further ado, let's dive in!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#square-every-digits"&gt;
  &lt;/a&gt;
  Square Every Digits
&lt;/h3&gt;

&lt;p&gt;The first coding challenge is going to be simple. We are expected to create a function which takes in number as parameter, squares every single digit in the number and then return them in a concatenated form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2323&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// 4949&lt;/span&gt;
&lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// 81818181&lt;/span&gt;
&lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6498&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// 36168164&lt;/span&gt;
&lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// 81818181&lt;/span&gt;
&lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;//   1111&lt;/span&gt;
&lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3412&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;// 91614&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fun, right?&lt;/p&gt;

&lt;p&gt;I pulled this test out of a 7 kyu challenge on CodeWars.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  SOLUTION
&lt;/h4&gt;

&lt;p&gt;As usual, the first step I always take when solving a coding problem is to break down the problem smaller chunks and then outlining the solutions into logical steps, representing each of these steps in pseudocode.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-converting-the-number-to-string-and-splitting-them"&gt;
  &lt;/a&gt;
  STEP 1: Converting the Number To String and Splitting them
&lt;/h4&gt;

&lt;p&gt;In JavaScript, there is no easy way to get each digit in a number separetely. To achieve this in an easy way, we will need to covert the number to a string. This is because it far easier to extract each digits if they were in a string format. We do this with the .toString() String Method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that operation, we will need to split the two &lt;code&gt;stringed&lt;/code&gt; numbers into an array of strings, we do this with the split() method, passing in a closed set of quotes. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-loop-through-the-array-of-stringed-digits-and-square-each-digit"&gt;
  &lt;/a&gt;
  STEP 2: Loop through the Array of stringed digits and Square each digit
&lt;/h4&gt;

&lt;p&gt;First, we will need to create a variable and pass an empty string to it. &lt;/p&gt;

&lt;p&gt;Why? Because when you add (with +) a number to a string, that number becomes part of the string. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;22&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="c1"&gt;// "22" is a string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;morestring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 22 is a number&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moreString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "2222" instead of 44&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will need this behaviour when joining the squared digits together, as you will come to see.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let added = ''

digits.forEach(function (digit) { 
let squared = Number(digit) * Number(digit)

added = added + squared;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After create the variable and passing in an empty string, we then loop through the array of digits. For every single digit encountered, we:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Covert that digit which was previously a string to a number&lt;/li&gt;
&lt;li&gt;Multiple that single digit against itself (aka squaring) and pass it to a variable&lt;/li&gt;
&lt;li&gt;Concatenate the number to the added variable which if you recall, holds an empty string. This will trigger the string concatenation behavior I had explained earlier.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#step-3-covert-the-concatenated-string-to-number-and-return"&gt;
  &lt;/a&gt;
  STEP: 3 Covert the concatenated string to Number and return
&lt;/h4&gt;

&lt;p&gt;At this point, we have already gotten each digit, shared it, and joined it to the previously squared digit.&lt;/p&gt;

&lt;p&gt;Final thing to do is to convert the string back to it's original number type and return that from the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;added&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thats all!&lt;/p&gt;

&lt;p&gt;Here is the full program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;

&lt;span class="nx"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;squared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;digit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;added&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;added&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;squareDigits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1212&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  RESULTS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDto7aWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628260623021/QFHXofFLE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDto7aWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628260623021/QFHXofFLE.png" alt="js fIDDLE SQUARE.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qdum-_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628260635412/fKuGeZpu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qdum-_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628260635412/fKuGeZpu4.png" alt="JSFIDDLESQUARE2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repeat-the-string"&gt;
  &lt;/a&gt;
  Repeat the String
&lt;/h3&gt;

&lt;p&gt;The second challenge is probably the easiest problem you could every encounter anywhere but I chose it to highlight a string method which i believe could be very useful when building your own projects.&lt;/p&gt;

&lt;p&gt;In this challenge, we are expected to create a function which takes in two parameters: a number &lt;code&gt;n&lt;/code&gt; and a string &lt;code&gt;s&lt;/code&gt;, and repeats the giving string &lt;code&gt;s&lt;/code&gt; exactly &lt;code&gt;n&lt;/code&gt; number of times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;repeatStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;// "MeMeMeMe"&lt;/span&gt;
&lt;span class="nx"&gt;repearStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;// "11111111111111111111"&lt;/span&gt;
&lt;span class="nx"&gt;repeatStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;you&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;// "you"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without further ado, lets dive in!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  SOLUTION
&lt;/h4&gt;

&lt;p&gt;The solution to these requres just one step. We achieve what we want, we have one simple string method to utilize: &lt;code&gt;repeat()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This method takes in as a number as an argument and returns the string value repeated to exactly that amount, exactly what we needed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;repeatStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  RESULTS
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mLy6bPT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628260576814/LcpIxWrYE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mLy6bPT2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628260576814/LcpIxWrYE.png" alt="JSFIDDLEREPEAT1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SSzVvjwW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628260590335/Znwk5RK22b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SSzVvjwW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628260590335/Znwk5RK22b.png" alt="jsfiddlerepeat2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validate-pin-code"&gt;
  &lt;/a&gt;
  Validate Pin Code
&lt;/h3&gt;

&lt;p&gt;The third and final challenge is something we all are familiar with. If you have a Bank ATM card, you are aware that the pin code should be four or six characters and consists only of numbers. In this chaalnege, we are expected to create a function which returns true if those conditions are met and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;validatePin("12345") // false
validatePin("2134") // true
validatePin("a345") // false
validatePin("222134") // true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let tackle this.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  SOLUTION
&lt;/h5&gt;

&lt;p&gt;First, we need to convert the string to Number. Then we create a &lt;code&gt;returnValue&lt;/code&gt; variable which will hold our final return value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validatePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numPin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's something to know. Assuming our pin had a letter in it, then the Number(pin) call will return a &lt;code&gt;NaN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;let n = "a1234"&lt;br&gt;
let type = Number(n)&lt;/p&gt;

&lt;p&gt;console.log(type) //NaN&lt;/p&gt;

&lt;p&gt;Next, we create nested if statements: First, to check if the pin is &lt;code&gt;NaN&lt;/code&gt;, that is has a letter in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numPin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in the next two conditonals, we check if pin doesn't has 4 or 6 numbers. If true, we set value to false. Otherwise we set value to true:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After everything, we now return the &lt;code&gt;returnValue&lt;/code&gt;variable which holds the accurate boolean result for our function.&lt;/p&gt;

&lt;p&gt;Here's the full program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validatePin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numPin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numPin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;returnValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;returnValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  RESULT
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHePxvTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628263796489/lYJqmvJve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHePxvTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628263796489/lYJqmvJve.png" alt="jsFIDDLEVALID.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kdz4k_----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628263815027/XGDJ714Ej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kdz4k_----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628263815027/XGDJ714Ej.png" alt="JSFIDDLEVALI.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That's it. I hope you learned something new from this challenge.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have a better way of solving these problems, please put it down in the comments. I'd love to check it out. If you have any suggestions, I'd also love to hear it!&lt;/p&gt;

&lt;p&gt;As i said in the beginning, I will be doing this every Mondays, Wednesdays and Fridays. Follow/Subscribe to this blog to be updated. I will be tackling a new challenge in public on Friday.&lt;/p&gt;

&lt;p&gt;Until then, friends!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: If you are learning JavaScript, I recently created an eBook which teaches 50 topics in hand-written notes. Check it out  &lt;a href="//gum.co/js-50"&gt;here &lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title> SQLite: A tool that allows creating databases from the terminal  </title>
      <author>Danilsa Caraballo</author>
      <pubDate>Fri, 06 Aug 2021 14:43:05 +0000</pubDate>
      <link>https://dev.to/danilsa0109/sqlite-a-tool-that-allows-creating-databases-from-the-terminal-78j</link>
      <guid>https://dev.to/danilsa0109/sqlite-a-tool-that-allows-creating-databases-from-the-terminal-78j</guid>
      <description>&lt;p&gt;I had learned how to create a table for a new database using tools like Excel, Matlab, My sql and table plus.&lt;/p&gt;

&lt;p&gt;Now, with &lt;code&gt;SQLite&lt;/code&gt; I can create the databases in a very practical way, it is similar to &lt;code&gt;Mysql&lt;/code&gt;, so today I a practical example, comparing &lt;code&gt;Mysql&lt;/code&gt; with &lt;code&gt;SQLite&lt;/code&gt;,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We must be in the folder where we will create the database:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To &lt;code&gt;SQLite&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HiHNF_ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn0e16op9ytt6ow195ha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HiHNF_ze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cn0e16op9ytt6ow195ha.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in the case of &lt;code&gt;Mysql&lt;/code&gt;, you must find the location of the program to be able to execute it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew search mysql
//or
./mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Open the tool, giving name to database:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To &lt;code&gt;SQLite&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;~ sqlite3 mydatabase
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in the case of &lt;code&gt;Mysql&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~ create database mydatabase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create new table, taking into account the type of the column:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;SQLite&lt;/code&gt; and &lt;code&gt;Mysql&lt;/code&gt; are the same&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~ use mydatabase
~ create table dataUsers(
          Id integer primary key,
          Name text,
          Last_name text,
          age integer,
          Cell integer 
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;insert the data:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;SQLite&lt;/code&gt; and&lt;code&gt;Mysql&lt;/code&gt; are the same&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;insert into dataUsers(0001,'Ema','Garces', 21, 0573033333055 );

//or

insert into dataUsers( Name text,Last_name text, age real, Cell integer ) VALUES (0001,'Ema','Garces', 21, 0573033333055);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Show table:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To &lt;code&gt;SQLite&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~ .mode {mode of choice}
~ select * from dataUsers; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;there are several view modes to display the table:&lt;br&gt;
ascii, box, csv, column, html, insert, line, list, tabs, tcl, etc.&lt;/p&gt;

&lt;p&gt;in the case of &lt;code&gt;Mysql&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~ show tables;
~ describe dataUsers;
~ select * from dataUsers; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Bonus: Connect to database with table plus&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;6.1 open table plus:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xiu_pP3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vt87wz16b9dfm9ciao33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xiu_pP3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vt87wz16b9dfm9ciao33.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
6.2 create new connection:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OS6E0268--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zephts7lzwp4wdf8e531.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OS6E0268--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zephts7lzwp4wdf8e531.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJ0egRpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebtrbb2rpmnegmwmu7ii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJ0egRpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebtrbb2rpmnegmwmu7ii.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
6.3 name the connection and find the location of the database:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iP3qZxTH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez76pif8qw90un2xkxl1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iP3qZxTH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ez76pif8qw90un2xkxl1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 5 Must-have VS Code extensions</title>
      <author>Archit Sharma</author>
      <pubDate>Fri, 06 Aug 2021 14:37:59 +0000</pubDate>
      <link>https://dev.to/iarchitsharma/top-5-must-have-vs-code-extensions-229k</link>
      <guid>https://dev.to/iarchitsharma/top-5-must-have-vs-code-extensions-229k</guid>
      <description>&lt;p&gt;&lt;strong&gt;Visual Studio Code is the most popular code editor or IDE (Integrated Development Environment) currently. It's a lightweight source code editor, open-source and easy to use.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Visual Studio Code extensions makes the life of developer's much easier just like &lt;a href="https://dev.to/iarchitsharma/visual-studio-code-keyboard-shortcuts-for-windows-1fhh"&gt;VS Code keyboard shortcuts&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#here-is-a-list-of-top-5-must-have-extensions-"&gt;
  &lt;/a&gt;
  Here is a list of top 5 must have extensions :-
&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#1-beautify"&gt;
  &lt;/a&gt;
  1. Beautify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dmEPBZYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4v2gro21hqyoxzky74x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dmEPBZYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4v2gro21hqyoxzky74x.png" alt="Beautify extension VS Code"&gt;&lt;/a&gt;&lt;br&gt;
When it comes to must-have extensions Beautify top's the list. This extension beautify your javascript files, JSON, CSS, Sass, and HTML. The unformatted code in these files is converted into formatted, readable code by this extension.&lt;br&gt;
This extension enables running js-beautify in VS Code, AND honouring any .jsbeautifyrc file in the open file's path tree to load your code styling. Run with F1 Beautify (to beautify a selection) or F1 Beautify file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-snippets-pack"&gt;
  &lt;/a&gt;
  2. Snippets Pack
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JPVdbeym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtsgkdef0mncetne9jye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JPVdbeym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtsgkdef0mncetne9jye.png" alt="Snippet extension VS Code"&gt;&lt;/a&gt;&lt;br&gt;
Snippets help you write repetitive code easily and quickly. However, this might not be enough. You can simply install an extension that includes a bunch of useful snippets according to your programming language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  3. Bracket pair colorizer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLpZAjaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei67du62d3jhp89s5ix8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLpZAjaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei67du62d3jhp89s5ix8.jpg" alt="Bracket pair colorizer"&gt;&lt;/a&gt;&lt;br&gt;
This extension allows matching brackets to be identified with colours. The user can define which characters to match, and which colours to use. It adds color to each set of opening and closing brackets, making it easier to identify each set of brackets. It's up to you to decide whether you'd like to add this feature to VS Code or not. However, it's a popular tool and many developers find it useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-live-sass-compiler"&gt;
  &lt;/a&gt;
  4. Live Sass Compiler
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o5JX3-Fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei2duwaqpofel08hngml.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o5JX3-Fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei2duwaqpofel08hngml.jpg" alt="Live Sass Compiler VS Code extension"&gt;&lt;/a&gt;&lt;br&gt;
Live Sass Compiler Extension helps you to compile/transpile your SASS/SCSS files to CSS files at realtime with live browser reload.&lt;br&gt;
This extension is helpful for web developers while developing web pages with Sass.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-live-server"&gt;
  &lt;/a&gt;
  5. Live server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnyDAAi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6z5ig8e4zegedkn8jt4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnyDAAi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6z5ig8e4zegedkn8jt4.png" alt="Live server VS code extension"&gt;&lt;/a&gt;&lt;br&gt;
The live-server extension automates the reload for you. After installing it, an automated localhost will be able to run in your browser, which you can start with a single button.&lt;br&gt;
This is one of the most helpful extension for web developers.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Vue Academy #4: v-for directive</title>
      <author>CodeOzz</author>
      <pubDate>Fri, 06 Aug 2021 14:27:43 +0000</pubDate>
      <link>https://dev.to/codeozz/vue-academy-4-v-for-directive-4l7k</link>
      <guid>https://dev.to/codeozz/vue-academy-4-v-for-directive-4l7k</guid>
      <description>&lt;p&gt;Welcome to the new vue academy ! It will be a list of lot of article on vue! I have 2.5 years of experience in this and I can teach a few thing about this !&lt;/p&gt;

&lt;p&gt;With vue you can use some directives, today we will see &lt;code&gt;v-for&lt;/code&gt; in details !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-"&gt;
  &lt;/a&gt;
  What is ?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;v-for&lt;/code&gt; is a directive use to render a list of items based on an array or an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in toto"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;third&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this component we will have three div as below 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first
second
third
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also get the current index of the iterated item&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(item, index) in toto"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ item }} {{ index }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It works also with object ! If we replace &lt;code&gt;toto: [ 'first', 'second', 'third' ]&lt;/code&gt; by an object like &lt;code&gt;toto: { a: 1, b: 2, c: 3 }&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;We have 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2
3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also access to the current key !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(item, attribute) in toto"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ item }} {{ attribute }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-key-endraw-attribute"&gt;
  &lt;/a&gt;
  The &lt;code&gt;key&lt;/code&gt; attribute
&lt;/h3&gt;

&lt;p&gt;With the example above, you can ask what is this &lt;code&gt;:key&lt;/code&gt; value?&lt;/p&gt;

&lt;p&gt;In vue, &lt;code&gt;:key&lt;/code&gt; is used in all components, if the key is changed, the component will be reload (destroy and created hook will be triggered). It a simply way to reload properly a component !&lt;/p&gt;

&lt;p&gt;In general you don't need to handle this attribute, but in the &lt;code&gt;v-for&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;MANDATORY&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;And why ?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To give Vue a hint so that it can track each node’s identity, and thus reuse and reorder existing elements, you need to provide a unique key attribute for each item.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I advise you to never use &lt;code&gt;index&lt;/code&gt; as key attribute, always use a unique ID. The answer is not complicated to illustrate, imagine again an array with 1000 items, you delete the second item, so the &lt;code&gt;length&lt;/code&gt; of the iterated array will be changed, and &lt;em&gt;all&lt;/em&gt; index of &lt;em&gt;all&lt;/em&gt; items will changed, so &lt;em&gt;all&lt;/em&gt; components will be reload !&lt;/p&gt;

&lt;p&gt;If you use a unique id by item, and you delete the second item, the other component will be &lt;strong&gt;not reload&lt;/strong&gt; since &lt;strong&gt;all of the key is not changed&lt;/strong&gt; !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vfor-with-vif"&gt;
  &lt;/a&gt;
  v-for with v-if
&lt;/h3&gt;

&lt;p&gt;You should &lt;strong&gt;NEVER&lt;/strong&gt; use &lt;code&gt;v-for&lt;/code&gt; with &lt;code&gt;v-if&lt;/code&gt;, since when they exist on the same node, &lt;code&gt;v-for&lt;/code&gt; has a higher priority than &lt;code&gt;v-if&lt;/code&gt;. That means the &lt;code&gt;v-if&lt;/code&gt; will be run on each iteration of the loop separately !&lt;/p&gt;

&lt;p&gt;Let's go through an example !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in numberList"&lt;/span&gt;
        &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"isEven(item)"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;numberList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For each iteration we will execute the &lt;code&gt;isEven&lt;/code&gt; function !&lt;/p&gt;

&lt;p&gt;How to avoid this?&lt;/p&gt;

&lt;p&gt;Two solutions based on the context:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We need to filter some value in your array ! &lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;computed&lt;/code&gt; property  and iterate it !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"evenItem in evenList"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"evenItem"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;evenItem&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;numberList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;evenList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we filter the array before iterate it ! We don't need to use &lt;code&gt;v-if&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I need to display the items only if the array size is equal to 5 for exemple.&lt;/p&gt;

&lt;p&gt;You can just add an other balise that will wrap the &lt;code&gt;v-for&lt;/code&gt;, it will contain the &lt;code&gt;v-if&lt;/code&gt; !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"numberList.length === 5"&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
           &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in numberList"&lt;/span&gt;
           &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;v-for&lt;/code&gt; is used to show array or object keys, you need to always use a unique id as &lt;code&gt;key&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Never use &lt;code&gt;v-for&lt;/code&gt; with &lt;code&gt;v-if&lt;/code&gt;, depending on the current context you have other possibilities !&lt;/p&gt;

&lt;p&gt;If you want to have nice article to read about web dev, you can subscribe to my &lt;strong&gt;FREE newsletter&lt;/strong&gt; at this url -&amp;gt; &lt;a href="https://codeoz.substack.com/welcome"&gt;https://codeoz.substack.com/welcome&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can follow me on :&lt;/p&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you want to buy me a coffee :D -&amp;gt; &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;https://www.buymeacoffee.com/CodeoZ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>RESTful API, Updating Object by Action Query Parameter </title>
      <author>Ageu Matheus</author>
      <pubDate>Fri, 06 Aug 2021 14:23:05 +0000</pubDate>
      <link>https://dev.to/txiocoder/restful-api-updating-object-by-action-query-parameter-3pmj</link>
      <guid>https://dev.to/txiocoder/restful-api-updating-object-by-action-query-parameter-3pmj</guid>
      <description>&lt;p&gt;Okay, let’s dive into it! In this post I will show you how you can leave your RESTful API design more beautiful and expressive in code and documentation.&lt;/p&gt;

&lt;p&gt;So, what I mean with: updating object by action query parameter?&lt;/p&gt;

&lt;p&gt;Let’s suppose you have a Users resources and you need to update a user and perform some tasks (in background) after updating. Something like send new verification email, notification about username changed or something else.&lt;/p&gt;

&lt;p&gt;Probably you will have an endpoint like: &lt;code&gt;/users/{user_id}/&lt;/code&gt; pointed to some view/controller (class method or function) that accepts &lt;strong&gt;PUT&lt;/strong&gt; operation. Proceed with some verification to see what kind of changes are requested to do, and then you will execute the right task.&lt;/p&gt;

&lt;p&gt;So, doing this will probably result in a lot of verification and big views and not so beautiful to document our API endpoint.&lt;/p&gt;

&lt;p&gt;Or maybe you will add a lot of endpoints such as &lt;code&gt;/users/{user_id}/change-email/&lt;/code&gt;, &lt;code&gt;/users/{user_id}/change-username/&lt;/code&gt;, … and point each endpoint to respective function.&lt;/p&gt;

&lt;p&gt;This results, but isn’t elegant as we want o to be, right? But not only because of this, having multiple functions decentralized related to same resource and objective (update) isn’t the best practice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;That’s why I suggest you to use action query parameter.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With action query parameter we can route the request to the right update (or even retrieve) function. This will bring to us a clean business logic and better API documentation.&lt;/p&gt;

&lt;p&gt;As an example, I will show you some piece of code in &lt;a href="https://python.org"&gt;Python&lt;/a&gt;,  &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; and &lt;a href="https://www.django-rest-framework.org/"&gt;REST Framework&lt;/a&gt;. But I want you to focus on business logic, so that you can implement with different language or framework.&lt;/p&gt;

&lt;p&gt;First we will define the update action that we want to enable in a list and make some imports. Those values will be the values that we’ll expect in query parameter to route and perform the right action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# imports...
# -------------------------------------
&lt;/span&gt;
&lt;span class="n"&gt;UPDATE_ACTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;'change-email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'change-username'&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDetailAPIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea of have a  &lt;code&gt;UPDATE_ACTIONS&lt;/code&gt; list is great because it’s can bring us the flexibility to disable (if necessary) an action just by comment the action line.&lt;/p&gt;

&lt;p&gt;Next, let’s define the default method that will handler all incoming update requests&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDetailAPIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# this will get the object and check related permissions between
&lt;/span&gt;        &lt;span class="c1"&gt;# the authenticated account and the object
&lt;/span&gt;        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# I defined my action query parameter name as 'action'
&lt;/span&gt;        &lt;span class="c1"&gt;# but you can call something else
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'action'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;UPDATE_ACTIONS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# following python naming convention
&lt;/span&gt;            &lt;span class="n"&gt;action_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action_method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action_method&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Update action temporarily unavailable'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Unrecognized update action'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, all our main update method do is get the object and check related permissions and route dynamically the action to the right method.&lt;/p&gt;

&lt;p&gt;We also make some basic checks in case an action is unrecognized or the method isn’t available in our class.&lt;/p&gt;

&lt;p&gt;What we have next to do is implement the action methods defined in our &lt;code&gt;UPDATE_ACTION&lt;/code&gt;. I will show you in abstract way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDetailAPIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;## change email business logic
&lt;/span&gt;        &lt;span class="c1"&gt;## run bg task
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serializer_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'request'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_202_ACCEPTED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;## change username business logic
&lt;/span&gt;        &lt;span class="c1"&gt;## run bg task
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serializer_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'request'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_202_ACCEPTED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, our full class will be something like shown below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;user.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserDetail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;user.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AuthenticatedUserIsOwner&lt;/span&gt;

&lt;span class="c1"&gt;# --------------------------------------------
&lt;/span&gt;
&lt;span class="n"&gt;UPDATE_ACTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;'change-email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'change-username'&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDetailAPIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UserDetail&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;AuthenticatedUserIsOwner&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ---------------------------------------
&lt;/span&gt;    &lt;span class="c1"&gt;# API Calls
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# this will get the object and check related permissions between
&lt;/span&gt;        &lt;span class="c1"&gt;# the authenticated account and the object
&lt;/span&gt;        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# I defined my action query parameter name as 'action'
&lt;/span&gt;        &lt;span class="c1"&gt;# but you can call something else
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'action'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;UPDATE_ACTIONS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# following python naming convention
&lt;/span&gt;            &lt;span class="n"&gt;action_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'-'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action_method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action_method&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Update action temporarily unavailable'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Unrecognized update action'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# ---------------------------------------
&lt;/span&gt;    &lt;span class="c1"&gt;# Update Actions
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;## change email business logic
&lt;/span&gt;        &lt;span class="c1"&gt;## run bg task
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serializer_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'request'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_202_ACCEPTED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# ---------------------------------------
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change_username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;## change username business logic
&lt;/span&gt;        &lt;span class="c1"&gt;## run bg task
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serializer_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'request'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_202_ACCEPTED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, I hope you like this idea and help you write more elegant code with nice business logic. If you have some different idea share with me and other peoples in comments&lt;/p&gt;




&lt;p&gt;Thanks for read, I hope you like and help you with something! I will be happy to know what you think about this. So, be sure to comment on your debt, criticism or suggestion. Enjoy and follow my work&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://linktr.ee/txiocoder"&gt;Here&lt;/a&gt;, all my resources.&lt;/li&gt;
&lt;li&gt;Learn With Me on &lt;a href="https://www.youtube.com/channel/UCETQfLH1W0V1EBwp4iMOF6w"&gt;Youtube&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Follow Me on &lt;a href="https://www.instagram.com/txiocoder/"&gt;Instagram&lt;/a&gt; to stay updated.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Stay safe!&lt;/p&gt;




</description>
      <category>django</category>
      <category>python</category>
      <category>codequality</category>
      <category>restful</category>
    </item>
    <item>
      <title>I bought a tiny piece of internet history. [Plus a little puzzle to keep you busy this weekend!]</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 06 Aug 2021 14:15:37 +0000</pubDate>
      <link>https://dev.to/inhuofficial/i-own-a-tiny-piece-of-internet-history-plus-a-little-puzzle-to-keep-you-busy-this-weekend-559</link>
      <guid>https://dev.to/inhuofficial/i-own-a-tiny-piece-of-internet-history-plus-a-little-puzzle-to-keep-you-busy-this-weekend-559</guid>
      <description>&lt;p&gt;Over a year ago I bought a domain name on a whim. Now you might be thinking "nothing special about that, I have done that!". In fact, some of you will probably have bought loads of domains on a whim! &lt;/p&gt;

&lt;p&gt;But this domain is at least a &lt;em&gt;little bit&lt;/em&gt; special as it is linked to quite a historic web page, one that is older than some of you reading this article (yikes, I am old!). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-little-bit-of-history"&gt;
  &lt;/a&gt;
  A little bit of history!
&lt;/h2&gt;

&lt;p&gt;Back in 2005 &lt;a href="https://twitter.com/tewy"&gt;Alex Tew&lt;/a&gt; wanted some money to pay for his University education. &lt;/p&gt;

&lt;p&gt;He came up with the idea to sell pixels on a page for $1 each. &lt;/p&gt;

&lt;p&gt;When you owned these pixels (bought in blocks of 10x10 pixels) you could upload an image that fits within those pixels.&lt;/p&gt;

&lt;p&gt;In total there were 1000x1000 pixels up for grabs and...the rest is history. They all sold out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-million-dollar-home-page"&gt;
  &lt;/a&gt;
  The million dollar home page!
&lt;/h2&gt;

&lt;p&gt;Yup, if you did the quick Maths (or knew of the site already) you will have worked out that 1000 x 1000 x $1 is $1,000,000!&lt;/p&gt;

&lt;p&gt;If only I had thought of that idea!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-it-out-in-all-of-its-glory"&gt;
  &lt;/a&gt;
  Check it out in all of its glory!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.milliondollarhomepage.com/"&gt;The million dollar home page is still live&lt;/a&gt; and hopefully will be for a long time to come! You can read more about the &lt;a href="https://en.wikipedia.org/wiki/The_Million_Dollar_Homepage"&gt;million dollar homepage over on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can spend hours on there looking at all the little images, the random sites they lead to (and all of the dead ones!) etc.&lt;/p&gt;

&lt;p&gt;Before you go to check it out though, I better get to the point...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-why-is-this-relevant"&gt;
  &lt;/a&gt;
  So why is this relevant?
&lt;/h3&gt;

&lt;p&gt;Oh yes, to the point!&lt;/p&gt;

&lt;p&gt;When you bought these pixels you could link them to a domain name. So when you click on your pixel art it would redirect you to your domain name. &lt;/p&gt;

&lt;p&gt;So I spent (far too long) clicking on every little image, seeing where it went to, checking for dead links and then seeing if the attached domain was up for sale.&lt;/p&gt;

&lt;p&gt;By luck I found an awesome one at a reasonable price!&lt;/p&gt;

&lt;p&gt;Now I could tell you what domain I bought...but that wouldn't be much fun. So here is a little puzzle for you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-puzzle"&gt;
  &lt;/a&gt;
  The Puzzle!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Clue 1:&lt;/strong&gt; "The key to unlocking this puzzle lies next to the ______".&lt;/p&gt;

&lt;p&gt;The blank in the first clue is the missing word(s) from this famous movie quote...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clue 2:&lt;/strong&gt; "the matrix has you, follow the _______"&lt;/p&gt;

&lt;p&gt;Not too difficult (I hope!). &lt;/p&gt;

&lt;p&gt;Once you have worked out what you are looking for go to &lt;a href="http://www.milliondollarhomepage.com/"&gt;http://www.milliondollarhomepage.com/&lt;/a&gt; and see if you can find out the answer to my riddle (it may take a while!)!&lt;/p&gt;

&lt;p&gt;You will know if you have found the site as it will simply say "hello there my DEV friend" (yes, I really did make no effort to put anything else up there! It isn't even a valid HTML document...it's Friday, give me a break!). &lt;/p&gt;

&lt;p&gt;First to find it can &lt;strong&gt;put the first letter of each full word in the domain name&lt;/strong&gt; in the comments and claim your prize (which is nothing other than the satisfaction of winning I am afraid!).&lt;/p&gt;

&lt;p&gt;That way other people can play along without you spoiling it!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update!
&lt;/h4&gt;

&lt;p&gt;Oh darn, I missed a big flaw in my plan as I didn't realise the image had a file name that matched in the HTML due to how the regions work! 🤦‍♂️&lt;/p&gt;

&lt;p&gt;So now it is just down to how much fun you want to have exploring as it isn't much of a challenge if you use your developer skills! &lt;/p&gt;

&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; open DevTools and search for the key word, or you can try and find it by eye and have a bit more fun!&lt;/p&gt;

&lt;p&gt;If you have any funny (or good) ideas of what to do with the domain once you have found it then let me know as it has been sat doing nothing for over a year!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#that-is-it"&gt;
  &lt;/a&gt;
  That is it!
&lt;/h2&gt;

&lt;p&gt;I am still recovering after &lt;a href="https://dev.to/inhuofficial/101-digital-accessibility-tips-and-tricks-4728"&gt;my monster last post&lt;/a&gt; so this is my "contribution" to the internet this week. (and the quotation marks are because I am not adding any value really 😋)&lt;/p&gt;

&lt;p&gt;However I am working on an awesome series to do with building the ultimate blogging tool (&lt;a href="https://dev.to/inhuofficial/designing-the-ultimate-inclusive-writing-tool-part-1-a-wysiwyg-in-745-bytes-ggh"&gt;an extension of some of the ideas in this post&lt;/a&gt;) so you may want to follow me if you write, or are considering writing (and you should write, it is awesome!)!&lt;/p&gt;

&lt;p&gt;I love the fact that I own a little bit of this web page, it is a shame I can't change the image or the URL but still, a little bit of internet history that I will (hopefully) put to good use one day!&lt;/p&gt;

&lt;p&gt;Have a great weekend peeps, I look forward to seeing if anyone finds the image and the domain name!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Criando Aplicações com Astro Build &amp; Azure Static Web CLI!</title>
      <author>Glaucia Lemos</author>
      <pubDate>Fri, 06 Aug 2021 13:49:10 +0000</pubDate>
      <link>https://dev.to/glaucia86/criando-aplicacoes-com-astro-build-azure-static-web-cli-39nb</link>
      <guid>https://dev.to/glaucia86/criando-aplicacoes-com-astro-build-azure-static-web-cli-39nb</guid>
      <description>&lt;p&gt;Recentemente tivemos o lançamento do serviço &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=javascript-34087-gllemos"&gt;Azure Static Web Apps&lt;/a&gt;&lt;/strong&gt;. Um serviço que te permite criar e implantar automaticamente aplicações Full Stack (desde o Back-End há Front-End) completa no Azure desde repositório do GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/D8jXxgCd"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UY5i0VYD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/BnsBQ7Hy/swa-overview.png" alt="swa-overview.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A parte mais interessante do &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=javascript-34087-gllemos"&gt;Azure Static Web Apps&lt;/a&gt;&lt;/strong&gt; é que esse serviço integra perfeitamente para realizar hospedagem de forma global e de forma distribuída sua aplicação ou conteúdo estático, no lado do Back-End criando API's fazendo uso do serviço &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/apis?WT.mc_id=javascript-34087-gllemos"&gt;Azure Functions&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/key-vault-secrets?WT.mc_id=javascript-34087-gllemos"&gt;incluir recursos de autenticação&lt;/a&gt;&lt;/strong&gt;, roteamento personalizado e incluso autorização baseada em rotas!&lt;br&gt;
E, o melhor disso tudo: realizar &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/plans?WT.mc_id=javascript-34087-gllemos"&gt;hospedagem de forma totalmente gratuita!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Se desejarem saber um pouco mais sobre esse novo serviço, eu escrevi um artigo mais detalhado sobre o produto no link abaixo:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/glaucia86" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsiHKYKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7BHm3RKS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/8505/767224fd-6d7c-4ed1-aafe-d679b960a2ba.jpg" alt="glaucia86"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/glaucia86/publicando-aplicacoes-estaticas-com-static-web-apps-azure-devops-4c1o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Publicando Aplicações Estáticas com Static Web Apps &amp;amp; Azure DevOps!&lt;/h2&gt;
      &lt;h3&gt;Glaucia Lemos ・ May 12 ・ 14 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#mas-o-que-%C3%A9-o-azure-static-web-apps-cli"&gt;
  &lt;/a&gt;
  Mas, o que é o Azure Static Web Apps CLI?!
&lt;/h2&gt;

&lt;p&gt;Bom, o enfoque de hoje será sobre uma ferramenta ligada a esse serviço que te permitirá emular localmente as suas aplicações estáticas de forma muito rápida e dinâmica: &lt;strong&gt;&lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;Azure Static Web Apps CLI&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Azure"&gt;
        Azure
      &lt;/a&gt; / &lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;
        static-web-apps-cli
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Azure Static Web Apps CLI ✨
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Azure Static Web Apps CLI (preview)&lt;/h2&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/Azure/static-web-apps-clidocs/swa-emu-icon.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--twhQ4gYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Azure/static-web-apps-clidocs/swa-emu-icon.png" width="300"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The Static Web Apps CLI, also known as SWA CLI, serves as a local development tool for &lt;a href="https://docs.microsoft.com/azure/static-web-apps" rel="nofollow"&gt;Azure Static Web Apps&lt;/a&gt;. It can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serve static app assets, or proxy to your app dev server&lt;/li&gt;
&lt;li&gt;Serve API requests, or proxy to APIs running in Azure Functions Core Tools&lt;/li&gt;
&lt;li&gt;Emulate authentication and authorization&lt;/li&gt;
&lt;li&gt;Emulate Static Web Apps configuration, including routing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Static Web Apps CLI is in preview.&lt;/strong&gt; If you have suggestions or you encounter issues, please report them or help us fix them. Your contributions are very much appreciated. 🙏&lt;/p&gt;

&lt;p&gt;The CLI emulates commonly used capabilities of the Azure Static Web Apps cloud service. &lt;strong&gt;Some differences are expected. Always deploy and test your apps in Azure to confirm behavior.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
Quickstart&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install the cli
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install -g @azure/static-web-apps-cli&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Open a SWA app folder at the root (outside any /api or /app…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Azure/static-web-apps-cli"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Conforme o próprio repositório da ferramenta o &lt;strong&gt;&lt;a href="https://github.com/Azure/static-web-apps-cli"&gt;Azure Static Web Apps CLI&lt;/a&gt;&lt;/strong&gt; com SWA CLI você pode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✅ Criar aplicações estáticas ativas ou proxy para o seu server de desenvolvimento de aplicações&lt;/li&gt;
&lt;li&gt;✅ Atender e criar requisições de API's ou proxies para API's que executem no Azure Functions&lt;/li&gt;
&lt;li&gt;✅ Emular autenticação e autorização&lt;/li&gt;
&lt;li&gt;✅ Emular configuração de aplicações Web Estáticas, incluso o roteamento!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Outro ponto importante a mencionar aqui é que você pode emular quaisquer projeto estático ou com estrutura de aplicação Front-End, seja ela:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✅ React&lt;/li&gt;
&lt;li&gt;✅ Angular&lt;/li&gt;
&lt;li&gt;✅ Svelte&lt;/li&gt;
&lt;li&gt;✅ Vue&lt;/li&gt;
&lt;li&gt;✅ Next.js&lt;/li&gt;
&lt;li&gt;✅ Blazor/WebAssembly!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bom! Falar é bom! Mas é muito melhor quando temos DEMOS! Então, vamos codificar agora e realizar uma demo bem simples de como podemos fazer uso dessa ferramenta localmente!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo-time"&gt;
  &lt;/a&gt;
  Demo Time!
&lt;/h2&gt;

&lt;p&gt;A primeira coisa que precisamos fazer é instalar o &lt;strong&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/strong&gt;! Sempre procuram instalar a versão LTS!&lt;/p&gt;

&lt;p&gt;Nessa demo, estarei usando um novo framework que pode ser uma grande tendência no mundo do desenvolvimento: &lt;strong&gt;&lt;a href="https://astro.build/"&gt;Astro Build&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Não estarei entrando em detalhes sobre esse framework, até porque o enfoque não é esse nesse artigo. Mas, se desejarem saber mais, posso estar fazendo um artigo e vídeo sobre esse framework fantástico!&lt;/p&gt;

&lt;p&gt;E, caso queiram saber mais detalhes sobre o &lt;strong&gt;&lt;a href="https://astro.build/"&gt;Astro Build&lt;/a&gt;&lt;/strong&gt;, vocês podem saber um pouco mais no vídeo abaixo:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dsTXcSeAZq8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Para agilizar um pouco mais a nossa demo, eu criei um projeto modelo que, peço encarecidamente que vocês façam um download ou git clone dele:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; git clone https://github.com/glaucia86/astro-swa-demo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se vocês desejarem, podem fazer as modificações necessárias. Tipo, imagens e outras cositas más! Eu super recomendo quando vocês iniciarem um novo projeto Astro, escolham a opção: &lt;em&gt;Portfolio&lt;/em&gt;. Vocês terão esse mesmo modelo para iniciar, quem sabe um novo site estático portifólio!&lt;/p&gt;

&lt;p&gt;Bom, vão até a pasta &lt;em&gt;astro-demo&lt;/em&gt; e instalam os pacotes localmente usando o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E, enfim, digitam o comando &lt;code&gt;npm start&lt;/code&gt; para iniciar o projeto. Abrem o browser na página: &lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Caso vejam conforme a imagem abaixo é porque funcionou tudo certinho!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/qtmtwf8G"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vR-zmf3b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/QtDpXhCv/Captura-de-Tela-2021-08-03-a-s-23-43-51.png" alt="Captura-de-Tela-2021-08-03-a-s-23-43-51.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois disso, agora vamos ao próximo passo! Abre o seu command line e digite o seguinte comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @azure/static-web-apps-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Crie uma pasta para que possamos testar essa ferramenta. No meu caso, criei uma pasta com o seguinte nome:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;mkdir &lt;/span&gt;swa-cli-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vem a parte mais legal, onde apenas com o comando de linha vocês poderão criar uma página estática de exemplo. Para isso, execute o comando abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; swa start http://localhost:3000 &lt;span class="nt"&gt;--run&lt;/span&gt; &lt;span class="s2"&gt;"npm start"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depois que executamos esse comando note que ele pedirá a abrir uma página no browser. Porém, numa porta diferente: &lt;code&gt;http://localhost:4280/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O que isso quer nos dizer? Que estamos de fato, emulando o serve do Azure Static Web Apps. Desde esse endpoint, podemos testar até mesmo API's de Back-End com esse endpoint ou até mesmo simular uma autenticação integrada de logins. Uma vez que o Azure Static Web Apps tem suporte para isso. (Mais informações &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/authentication-authorization?WT.mc_id=javascript-34087-gllemos"&gt;AQUI&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Legal! Não é mesmo?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realizando-deploy-da-aplica%C3%A7%C3%A3o-via-vs-code"&gt;
  &lt;/a&gt;
  Realizando deploy da aplicação via Vs Code!
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;para realizar os passos abaixo se faz necessário você alocar o seu projeto no GitHub e possuir uma conta free do Azure!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos agora fazer o deploy dessa aplicação usando a extensão do Azure Static Web Apps no &lt;strong&gt;&lt;a href="https://code.visualstudio.com/?WT.mc_id=javascript-34087-gllemos"&gt;Visual Studio Code&lt;/a&gt;&lt;/strong&gt;?!&lt;/p&gt;

&lt;p&gt;Para isso, baixem agora mesmo a extensão: &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps&amp;amp;WT.mc_id=javascript-34087-gllemos"&gt;Azure Static Web Apps&lt;/a&gt;&lt;/strong&gt;! &lt;/p&gt;

&lt;p&gt;Agora abra o projeto no Visual Studio Code e vamos seguir os seguintes passos:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-01"&gt;
  &lt;/a&gt;
  Passo 01:
&lt;/h5&gt;

&lt;p&gt;Clique no botão &lt;code&gt;+&lt;/code&gt; conforme a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/9DZVczCk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GN3bXknT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/ht3Gb7wK/Captura-de-Tela-2021-08-04-a-s-01-15-35.png" alt="Captura-de-Tela-2021-08-04-a-s-01-15-35.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-02"&gt;
  &lt;/a&gt;
  Passo 02:
&lt;/h5&gt;

&lt;p&gt;Aqui vocês devem definir o nome da aplicação. O nome deve ser único!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/5QgY7pkw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TeGfKep4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/mhfYr5Y6/Captura-de-Tela-2021-08-04-a-s-01-21-19.png" alt="Captura-de-Tela-2021-08-04-a-s-01-21-19.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-03"&gt;
  &lt;/a&gt;
  Passo 03:
&lt;/h5&gt;

&lt;p&gt;Como o Astro ainda não está listado na extensão, vamos escolher a opção &lt;code&gt;custom&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/62g2Dy9Q"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g69G76gm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/tJC3nxwF/step-02.png" alt="step-02.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-04"&gt;
  &lt;/a&gt;
  Passo 04:
&lt;/h5&gt;

&lt;p&gt;Já aqui estaremos definindo a localização da nossa aplicação. Muito cuidado, caso se a sua aplicação (raiz do projeto) estejam em alguma subpasta (que é o meu caso). Nesse exemplo, do meu projeto, a raiz do projeto encontra-se na pasta &lt;code&gt;astro-demo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/3WGdkr8g"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--opFz7mqR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/WpWrftxf/Captura-de-Tela-2021-08-04-a-s-01-27-59.png" alt="Captura-de-Tela-2021-08-04-a-s-01-27-59.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-05"&gt;
  &lt;/a&gt;
  Passo 05:
&lt;/h5&gt;

&lt;p&gt;E, finalmente temos que definir onde está sendo gerada os arquivos de artefato do Astro. Segundo a documentação, fica localizada na pasta &lt;code&gt;dist&lt;/code&gt; (para diferentes frameworks existem diferentes pastas de artifatos. Para saber mais, clique &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/front-end-frameworks?WT.mc_id=javascript-34087-gllemos"&gt;AQUI&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/LJDqmyHw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtQvM95n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/25RnFJgk/step-03.png" alt="step-03.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-06"&gt;
  &lt;/a&gt;
  Passo 06:
&lt;/h5&gt;

&lt;p&gt;Depois que executar o comando acima, abrirá uma caixa que te levará até o próximo passo (ou seja, ao repositório do GitHub)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/5YdDnWGF"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCFOn82T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/tTYyRXND/step-06.png" alt="step-06.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-07"&gt;
  &lt;/a&gt;
  Passo 07:
&lt;/h5&gt;

&lt;p&gt;Note que, no momento que somos levados ao site do repositório do projeto, apresentará uma pasta contendo um arquivo 'yaml' e além disso, uma action sendo executada pelo GitHub. Clique nessa action!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/jC8ZjrXQ"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kyd3whHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/dtFX4sZX/step-07.png" alt="step-07.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-08"&gt;
  &lt;/a&gt;
  Passo 08:
&lt;/h5&gt;

&lt;p&gt;Agora olha que interessante, há um &lt;code&gt;job&lt;/code&gt; sendo executado ali! Isso demonstra que a nossa aplicação está fazendo uma comunicação com a plataforma Azure e além do mais criando uma esteira de C.I e C.D pra nós! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/MvC0cZjR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imYKV1XP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/htj25fDC/step-08.png" alt="step-08.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-09"&gt;
  &lt;/a&gt;
  Passo 09:
&lt;/h5&gt;

&lt;p&gt;Caso tudo dê certo! Agora vamos ao último passo!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://postimg.cc/t15Fmhvt"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__ixgDN3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/858wc4h3/step-09.png" alt="step-09.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#passo-10"&gt;
  &lt;/a&gt;
  Passo 10:
&lt;/h5&gt;

&lt;p&gt;Retorne para o Visual Studio Code e abre novamente a extensão do SWA. E, procure pela aplicação recém criada! Clique com o botão direito em: &lt;code&gt;browser site&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Agora abram o browser! E, vocês verão o projeto de vocês disponível globalmente e pronto para ser visto por todo mundo!&lt;/p&gt;

&lt;p&gt;Se vocês desejarem ver o meu projeto online, ele está disponível &lt;strong&gt;&lt;a href="https://yellow-grass-008f2c710.azurestaticapps.net/"&gt;AQUI&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gifyu.com/image/OJkv"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GYEMGp9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://s6.gifyu.com/images/astro-swa-demo.gif" alt="astro-swa-demo.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão!
&lt;/h2&gt;

&lt;p&gt;O Azure Static Web Apps veio pra nos auxiliar e facilitar quando o assunto é realizar deployment de projetos estáticos de uma maneira: simples, rápida e dinâmica! E, principalmente - a melhor parte disso tudo - integrado ao GitHub Actions! Criando assim uma esteira de C.I e C.D automaticamente pra nós! Fantástico, não é mesmo?!&lt;/p&gt;

&lt;p&gt;Se desejarem saber mais ou até mesmo experimentar esse serviço de graça, super recomendo os cursos abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/?WT.mc_id=javascript-34087-gllemos"&gt;Documentação Oficial do Azure Static Web Apps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/learn/paths/build-applications-with-azure-devops/?WT.mc_id=javascript-34087-gllemos"&gt;Curso Grátis - Azure DevOps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/pt-br/learn/modules/publish-app-service-static-web-app-api/?WT.mc_id=javascript-34087-gllemos"&gt;Curso Grátis - Publique uma Aplicação Estática no Angular, React, Vue ou Javascript &amp;amp; API&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/pt-br/learn/modules/create-deploy-static-webapp-gatsby-app-service/?WT.mc_id=javascript-34087-gllemos"&gt;Curso Grátis - Crie e Publique um site estático com Gatsby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/publish-gatsby/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Gatsby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/publish-hugo/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Hugo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/publish-vuepress/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no VuePress&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/pt-br/azure/static-web-apps/deploy-nextjs/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Next.js&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/deploy-nuxtjs/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Nuxt.js&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/pt-br/azure/static-web-apps/publish-jekyll/?WT.mc_id=javascript-34087-gllemos"&gt;Implementando Azure Static Web Apps no Jekyll&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#palavras-finais"&gt;
  &lt;/a&gt;
  Palavras Finais
&lt;/h2&gt;

&lt;p&gt;Espero que esse tutorial de SWA CLI + Astro Build seja de grande ajuda à todas as pessoas! Se vocês curtiram sobre o Astro, deixem nos comentários abaixo. Porque dependendo eu faço uma série de vídeos explicando melhor sobre esse framework incrível!&lt;/p&gt;

&lt;p&gt;Ah! Já ia esquecer de falar aqui! Não deixem de se inscrever no meu Canal do Youtube! Estou criando inúmeras séries incríveis para esse ano de 2021! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;😃 &lt;strong&gt;Microsoft Learn Live Sessions (a partir de Outubro)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;Tutoriais semanais de Node.js, TypeScript &amp;amp; JavaScript&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;E muitos Live Codings (a partir de Outubro)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se são conteúdos que você curte, então não deixa de se inscrever e ative o sininho para ficar sabendo quando teremos vídeo novo!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTWdv_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/pr3TL4Pd/Screen-Shot-12-31-20-at-01-06-AM.png" alt="Screen-Shot-12-31-20-at-01-06-AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E para ficarem por dentro de várias outras novidades, não deixem de me seguir lá no twitter!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/glaucia_lemos86"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TRF6AJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code4coders.files.wordpress.com/2019/05/image-12.png" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nos vemos! Até a próxima pessoal! 😍&lt;/p&gt;

</description>
      <category>azure</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Advance Angular Dynamic Component</title>
      <author>ezzabuzaid</author>
      <pubDate>Fri, 06 Aug 2021 13:40:33 +0000</pubDate>
      <link>https://dev.to/this-is-angular/advance-angular-dynamic-component-12e</link>
      <guid>https://dev.to/this-is-angular/advance-angular-dynamic-component-12e</guid>
      <description>&lt;p&gt;In this article, I will show you how you can still use inputs and outputs and support OnChanges lifecycle while creating dynamic components.&lt;/p&gt;

&lt;p&gt;If you don't know about dynamic components yet, I recommend this article &lt;a href="https://netbasal.com/dynamically-creating-components-with-angular-a7346f4a982d"&gt;Dynamically Creating Components with Angular&lt;/a&gt; before going forward.&lt;/p&gt;

&lt;p&gt;For clarity about what I’m going to talk about, the &lt;a href="https://github.com/ezzabuzaid/dynamic-component-article/tree/main/src/app"&gt;project&lt;/a&gt; is available to browse through Github. or a &lt;a href="https://stackblitz.com/edit/angular-ivy-ogmamz?file=src%2Fapp%2Fcolor-box.component.ts"&gt;Demo&lt;/a&gt; if you prefer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;In order to create a dynamic component, you have to use either &lt;code&gt;ngComponentOutlet&lt;/code&gt; directive or &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; object, neither provides a way to bind inputs and outputs.&lt;/p&gt;

&lt;p&gt;moreover, &lt;code&gt;ngOnChanges&lt;/code&gt; won't work, &lt;a href="https://indepth.dev/posts/1054/here-is-what-you-need-to-know-about-dynamic-components-in-angular#ngonchanges"&gt;This is because the function that performs inputs checks is generated by the compiler during compilation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;To work around the problem we would use a custom directive that could help as little as possible to facilitate the bindings.&lt;/p&gt;

&lt;p&gt;We will use &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; to create a component factory that holds metadata about the component inputs and outputs. this metadata will be used to ensure correct properties names of inputs and outputs are used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;componentFactoryResolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolveComponentFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ComponentType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;factory&lt;/code&gt; has two getters that represent the component inputs and outputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * The inputs of the component.
 */&lt;/span&gt;
&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}[];&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * The outputs of the component.
 */&lt;/span&gt;
&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each of which has &lt;code&gt;propName&lt;/code&gt; and &lt;code&gt;templateName&lt;/code&gt; that corresponds to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;templateName&lt;/code&gt; defaults to &lt;code&gt;propName&lt;/code&gt; if not specifed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Our directive would be used like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;[dynamic-component]=&lt;/span&gt;&lt;span class="s"&gt;"component"&lt;/span&gt; &lt;span class="na"&gt;[inputs]=&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt; &lt;span class="na"&gt;[outputs]=&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Types that will be used in the code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserOutputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ComponentFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inputs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentOutputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ComponentFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;outputs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Utility function for strict mode people&lt;/strong&gt; 😅&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;asserts&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;NonNullable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`cannot be undefined or null.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The directive&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[dynamic-component]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DynamicComponentDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dynamic-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserOutputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To complete the setup we need to make sure that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;outputs&lt;/code&gt;/&lt;code&gt;inputs&lt;/code&gt; object corresponds to component outputs/inputs, no incorrect names used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;component&lt;/code&gt; &lt;code&gt;ngOnChange&lt;/code&gt; runs on input change.&lt;/li&gt;
&lt;li&gt;outputs &lt;code&gt;EventEmitter&lt;/code&gt; are auto unsubscribed from.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'll show a few functions implementation to better highlight how things are done. You might want to check the &lt;a href="https://github.com/ezzabuzaid/dynamic-component-article/blob/main/src/app/dynamic-component.directive.ts"&gt;complete code&lt;/a&gt; while reading the following section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;p&gt;Since this is not Angular out-of-the-box solution we can't ensure the correct inputs/outputs names are used hence manual validation is required to avoid hidden issues.&lt;/p&gt;

&lt;p&gt;As mentioned above &lt;code&gt;ComponentFactory&lt;/code&gt; object will be used to inspect component inputs and outputs,    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inputs"&gt;
  &lt;/a&gt;
  Inputs
&lt;/h3&gt;

&lt;p&gt;Loop over the user-provided inputs, check if each provided input is declared in the component as &lt;strong&gt;Input&lt;/strong&gt;.&lt;br&gt;
A component input is a field decorated with &lt;code&gt;@Input&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;validateInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userInputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userInputsKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInputs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;userInputsKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userInputKey&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentHaveThatInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;componentInputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInput&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;componentInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userInputKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;componentHaveThatInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Input &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;userInputKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; input.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#outputs"&gt;
  &lt;/a&gt;
  Outputs
&lt;/h3&gt;

&lt;p&gt;Loop over the component outputs, check if each output holds an instance of &lt;code&gt;EventEmitter&lt;/code&gt;.&lt;br&gt;
A component output is a field decorated with &lt;code&gt;@Output&lt;/code&gt; and has &lt;code&gt;EventEmitter&lt;/code&gt; instance as value.&lt;/p&gt;

&lt;p&gt;In the other part, we perform a loop over the user-provided outputs, check if each provided output is declared in the component as &lt;strong&gt;Output&lt;/strong&gt; and if the user-provided output is function. that function will be used as &lt;code&gt;EventEmitter&lt;/code&gt; handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;validateOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentOutputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserOutputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Output &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; must be a typeof EventEmitter`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;outputsKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;outputsKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentHaveThatOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;componentHaveThatOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Output &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; output.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Output &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; must be a function`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#binding"&gt;
  &lt;/a&gt;
  Binding
&lt;/h2&gt;

&lt;p&gt;Binding is pretty straightforward now since we won't have incorrect inputs/outputs names.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inputs"&gt;
  &lt;/a&gt;
  Inputs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;bindInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userInputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;componentInputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userInputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#outputs"&gt;
  &lt;/a&gt;
  Outputs
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;takeUntil&lt;/code&gt; operator used to unsubscribe from the &lt;code&gt;EventEmitter&lt;/code&gt; instance later on.&lt;br&gt;
&lt;code&gt;this.subscription&lt;/code&gt; is an instance of &lt;code&gt;Subject&lt;/code&gt;, which will be declared in the next sections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;bindOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ComponentInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;componentOutputs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentInstance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userOutputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// in case the output has not been provided at all&lt;/span&gt;
                  &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-component"&gt;
  &lt;/a&gt;
  Creating The Component
&lt;/h2&gt;

&lt;p&gt;Creating dynamic components is done using &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; and &lt;code&gt;ViewContainerRef&lt;/code&gt;.&lt;br&gt;
First, we create a factory using &lt;code&gt;ComponentFactoryResolver&lt;/code&gt;, the factory contains the metadata to perform inputs/outputs validation.&lt;/p&gt;

&lt;p&gt;Second, we use that factory to create the component using &lt;code&gt;ViewContainerRef&lt;/code&gt;, it also takes the injector, which will be declared later on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactoryResolver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolveComponentFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cleaning-up"&gt;
  &lt;/a&gt;
  Cleaning up
&lt;/h2&gt;

&lt;p&gt;To destroy a component we invoke the &lt;code&gt;destroy&lt;/code&gt; method defined in &lt;code&gt;ComponentRef&lt;/code&gt;, then we clear &lt;code&gt;ViewContainerRef&lt;/code&gt; which holds the actual component, doing so will also remove it from the UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;destroyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;viewContainerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the cleanup will be performed in &lt;code&gt;ngOnDestroy&lt;/code&gt; lifecycle, the &lt;code&gt;subscription&lt;/code&gt; is as mentioned previously an instance of &lt;code&gt;Subject&lt;/code&gt; that we used to unsubscribe from &lt;code&gt;EventEmitter&lt;/code&gt; subscriptions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroyComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#combine-the-functions"&gt;
  &lt;/a&gt;
  Combine The Functions
&lt;/h2&gt;

&lt;p&gt;Let's call the functions, &lt;code&gt;ngOnChanges&lt;/code&gt; lifecycle will be used to create the component whenever the &lt;code&gt;component&lt;/code&gt; input or &lt;code&gt;injector&lt;/code&gt; input changes, in that case, we destroy the previous component first, then we create the new component.&lt;/p&gt;

&lt;p&gt;after that, we perform the validation then bind the inputs and outputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dynamic-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserOutputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;UserInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Injector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ensure component is defined&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldCreateNewComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;
      &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldCreateNewComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroyComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// to make eslint happy ^^&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// to remove old subscription&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with that, in place, we have all the required functionality to do what [ngComponentOutlet] can't.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ngonchanges"&gt;
  &lt;/a&gt;
  The ngOnChanges
&lt;/h2&gt;

&lt;p&gt;So far we can completely create dynamic components, but we can't use &lt;code&gt;ngOnChanges&lt;/code&gt; lifecycle since it doesn't react to &lt;code&gt;@Input&lt;/code&gt; changes therefore we have to do this manually.&lt;/p&gt;

&lt;p&gt;Another way to do this is to change the &lt;code&gt;@Input&lt;/code&gt; field that concerned you to have getter and setter, so you can know when a change happens, but it is not a favorable option so let's stick &lt;code&gt;ngOnChanges&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's start with creating &lt;em&gt;changes&lt;/em&gt; object for the component.&lt;br&gt;
Basically, do a loop over new inputs (&lt;code&gt;currentInputs&lt;/code&gt;) and compare each input with the previous one, in case of change we add it as changed input to the changes object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;makeComponentChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputsChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstChange&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previuosInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputsChange&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentInputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputsChange&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentInputs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentInputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentInputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;previuosInputValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;previuosInputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentInputValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;previuosInputValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstChange&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;previuosInputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentInputValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;firstChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have to manually call the &lt;code&gt;ngOnChanges&lt;/code&gt; from the component instance if the component declared it and passes changes as an argument.&lt;br&gt;
Changing the previous function to have the functionality&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ensure component is defined&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;componentChanges&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleChange&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shouldCreateNewComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;
      &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;previousValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injector&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shouldCreateNewComponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroyComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="c1"&gt;// (1) &lt;/span&gt;
      &lt;span class="nx"&gt;componentChanges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeComponentChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// (2)&lt;/span&gt;
  &lt;span class="nx"&gt;componentChanges&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeComponentChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;assertNotNullOrUndefined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

  &lt;span class="c1"&gt;// (3)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindInputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// (4)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// to remove old subscription&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bindOutputs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// (5)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;componentRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentChanges&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create changes object with &lt;code&gt;firstChange&lt;/code&gt; as true after creating the component.&lt;/li&gt;
&lt;li&gt;In case the component didn't change that means only the inputs or outputs did change so we create changes object with &lt;code&gt;firstChange&lt;/code&gt; as false.&lt;/li&gt;
&lt;li&gt;Rebind the inputs only if they did change.&lt;/li&gt;
&lt;li&gt;Rebind the outputs only if they did change.&lt;/li&gt;
&lt;li&gt;Calling component &lt;code&gt;ngOnChanges&lt;/code&gt; lifecycle with the possible inputs changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Time to try it out. &lt;a href="https://stackblitz.com/edit/angular-ivy-ogmamz?file=src%2Fapp%2Fcolor-box.component.ts"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a simple component that displays a color based on input and emits an event when it changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-color-box&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;div style="height: 250px; width: 250px;" [style.background-color]="backgroundColor"&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ColorBoxComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnChanges&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;backgroundColorChanges&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnChanges&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SimpleChanges&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColorChanges&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Host component declares &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; with &lt;code&gt;ColorBoxComponent&lt;/code&gt; as the &lt;code&gt;dynamic-component&lt;/code&gt; with inputs and outputs.&lt;br&gt;
Clicking on &lt;em&gt;Change Color&lt;/em&gt; button will invoke &lt;code&gt;ngOnChanges&lt;/code&gt; of &lt;code&gt;ColorBoxComponent&lt;/code&gt;, just as it should be.  &lt;/p&gt;

&lt;p&gt;Try to change the input name and you'll see an exception thrown in the console.&lt;/p&gt;

&lt;p&gt;A bit about outputs, you'll need to use an arrow function syntax to have &lt;code&gt;this&lt;/code&gt; referring to the &lt;code&gt;AppComponent&lt;/code&gt; instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ColorBoxComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./color-box.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;ng-template
   [dynamic-component]="component"
   [inputs]="{backgroundColor: backgroundColor}"
   [outputs]="{backgroundColorChanges: onColorChange}"&amp;gt;
  &amp;lt;/ng-template&amp;gt;
  &amp;lt;button (click)="changeColor()"&amp;gt;Change Color&amp;lt;/button&amp;gt;
`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ColorBoxComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;onColorChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ColorBoxComponent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;backgroundColor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;changeColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Dynamic component is almost required in every project and having the ability to deal with it in an easy way is important.&lt;/p&gt;

&lt;p&gt;Lastly, there's already a package that does all of that and a bit more &lt;a href="https://www.npmjs.com/package/ng-dynamic-component"&gt;ng-dynamic-component&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://indepth.dev/posts/1054/here-is-what-you-need-to-know-about-dynamic-components-in-angular#ngonchanges"&gt;Here is what you need to know about dynamic components in Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_component_outlet.ts"&gt;NgComponentOutlet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://netbasal.com/dynamically-creating-components-with-angular-a7346f4a982d"&gt;Dynamically Creating Components with Angular&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>angular</category>
    </item>
    <item>
      <title>How to develop Cryptocurrency Trading Platform?</title>
      <author>Robert John</author>
      <pubDate>Fri, 06 Aug 2021 13:29:55 +0000</pubDate>
      <link>https://dev.to/robertj46122142/how-to-develop-cryptocurrency-trading-platform-56g0</link>
      <guid>https://dev.to/robertj46122142/how-to-develop-cryptocurrency-trading-platform-56g0</guid>
      <description>&lt;p&gt;It has been more than 12 years since Bitcoin (BTC) first emerged in the world. However, the cryptocurrency industry is continuously breaking records even now.  The daily trading volume of digital currencies is $99.95 billion according to data given by CoinMarketCap. Besides that, there are 11175 cryptos in the market today. Hence, is a highly suitable time for entrepreneurs to buy a White-label Cryptocurrency Exchange software and begin their lucrative journey. They can get in touch with a well-versed app development company to create a cutting-edge trading platform. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;What are the various kinds of Bitcoin Exchange Software?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Cryptopreneurs can purchase different types of Cryptocurrency Exchange software based on the business needs, market conditions, and regulatory laws. They can choose (Centralized, Decentralized, Peer-to-Peer, and Hybrid) to set up their online trading platform.  The degree of control over funds and freedom in decision-making varies from one Bitcoin Exchange PHP script to another. &lt;/p&gt;

&lt;p&gt;Moreover, entrepreneurs can form a strong brand image in the industry by buying white-label solutions of popular crypto exchanges. For instance, an app development company will offer clones of Binance Decentralized Exchange (DEX), Bitstamp, Coinbase, IDEX, LocalBitcoins, Paxful, Poloniex, and WazirX. &lt;/p&gt;

&lt;p&gt;Get the guide to &lt;a href="https://www.appdupe.com/cryptocurrency-exchange-script"&gt;Develop Crypto trading platform&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cryptocurrency</category>
      <category>cryptotrading</category>
      <category>bitcointrading</category>
    </item>
    <item>
      <title> Game Dev Digest — Issue #105 - Double Stuffed</title>
      <author>Game Dev Digest - The Newsletter On Unity Game Dev</author>
      <pubDate>Fri, 06 Aug 2021 13:08:17 +0000</pubDate>
      <link>https://dev.to/gamedevdigest/game-dev-digest-issue-105-double-stuffed-5h4f</link>
      <guid>https://dev.to/gamedevdigest/game-dev-digest-issue-105-double-stuffed-5h4f</guid>
      <description>&lt;h3&gt;
  &lt;a href="#issue-105-double-stuffed"&gt;
  &lt;/a&gt;
  Issue #105 - Double Stuffed
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://gamedevdigest.com/digests/issue-105-double-stuffed.html"&gt;GameDevDigest.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ye6TfKSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/social-posts/issue-105.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ye6TfKSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/social-posts/issue-105.png" alt="Issue #105 - Double Stuffed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Newsletter is back this week, hope you enjoy it as usual!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://80.lv/articles/depth-of-field-in-unity-for-2d-games-with-semi-transparent-sprites"&gt;&lt;strong&gt;Depth Of Field in Unity for 2D Games With Semi-Transparent Sprites&lt;/strong&gt;&lt;/a&gt;  - The Co-Founder of The Sixth Hammer Dimitar Popov has shared the company's findings on setting up DoF Blur in 2D games, discussed the problems they faced, and how they overcame the challenges of this task.&lt;br&gt;
&lt;a href="https://80.lv/articles/depth-of-field-in-unity-for-2d-games-with-semi-transparent-sprites"&gt;&lt;em&gt;80.lv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/posts/no-bloom-no-post-53965598"&gt;&lt;strong&gt;No Bloom? No Problem: Glowing Stuff without Post Effects&lt;/strong&gt;&lt;/a&gt;  - In this lesson, we're going to look at ways to make the things in your game appear to glow without the use of bloom!&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/no-bloom-no-post-53965598"&gt;&lt;em&gt;Team Dogpit&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/posts/54164790"&gt;&lt;strong&gt;URP Compute Grass Shader + Grass Painter Update&lt;/strong&gt;&lt;/a&gt;  - A few months ago I made a Geometry shader for interactive grass. While this works great on Windows, Geometry Shaders aren't that well supported on other platforms. A better option for the same effect is a Compute Shader, which is supported on PS4/5, Xbox, Switch, iOs, Android, and Windows. &lt;em&gt;[&lt;a href="https://www.patreon.com/posts/53587750"&gt;built-in pipeline version&lt;/a&gt; also available]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/54164790"&gt;&lt;em&gt;Minions Art&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bronsonzgeb.com/index.php/2021/07/25/pixelate-filter-in-urp-using-compute-shaders/"&gt;&lt;strong&gt;Pixelate Filter in URP using Compute Shaders&lt;/strong&gt;&lt;/a&gt;  - This article will use the pixelate image filter from the previous post but in URP, the Universal Render Pipeline. We’ll set up a ScriptableRendererFeature and ScriptableRenderPass to run the compute shader at the end of the rendering pipeline. I recommend you read the previous pixelate filter post before this one to understand the full context.&lt;br&gt;
&lt;em&gt;[Don't miss the &lt;a href="https://bronsonzgeb.com/index.php/2021/08/01/pixelate-filter-in-hdrp-using-compute-shaders/"&gt;HDRP&lt;/a&gt; version as well]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://bronsonzgeb.com/index.php/2021/07/25/pixelate-filter-in-urp-using-compute-shaders/"&gt;&lt;em&gt;Bronson Zgeb&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://catlikecoding.com/unity/tutorials/pseudorandom-noise/voronoi-noise/"&gt;&lt;strong&gt;Voronoi Noise&lt;/strong&gt;&lt;/a&gt;  - This is the sixth tutorial in a series about pseudorandom noise. It introduces various flavors of Voronoi noise.&lt;br&gt;
&lt;a href="https://catlikecoding.com/unity/tutorials/pseudorandom-noise/voronoi-noise/"&gt;&lt;em&gt;catlikecoding.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.unity.com/technology/optimize-your-mobile-game-performance-expert-tips-on-graphics-and-assets"&gt;&lt;strong&gt;Optimize your mobile game performance: Expert tips on graphics and assets&lt;/strong&gt;&lt;/a&gt;  - In the final installment of this optimization series, we focus on how to improve the performance of your assets, project configuration, and graphics. In case you missed them, check out our previous posts on profiling, memory, and code architecture, as well as physics, UI, and audio, for a more complete picture of how to optimize your game – or, download the free e-book for a rundown of all these topics.&lt;br&gt;
&lt;a href="https://blog.unity.com/technology/optimize-your-mobile-game-performance-expert-tips-on-graphics-and-assets"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.unity.com/games/2d-art-creation-in-dragon-crashers"&gt;&lt;strong&gt;2D art creation in Dragon Crashers&lt;/strong&gt;&lt;/a&gt;  - Talking with Eduardo from the Unity 2D team, Jarek opened up about his creative process, tips for creating sprites, 2D lighting and animations, and using Affinity Designer and Photo, his art and design software of choice.&lt;br&gt;
&lt;a href="https://blog.unity.com/games/2d-art-creation-in-dragon-crashers"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.sunnyvalleystudio.com/blog/how-to-sort-sprites-in-unity"&gt;&lt;strong&gt;How to sort sprites by Y axis in Unity 2D&lt;/strong&gt;&lt;/a&gt;  - Creating the illusion of 3D in 2D.&lt;br&gt;
&lt;a href="http://www.sunnyvalleystudio.com/blog/how-to-sort-sprites-in-unity"&gt;&lt;em&gt;sunnyvalleystudio.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://monoflauta.com/2021/07/27/11-useful-unity-c-extension-methods/"&gt;&lt;strong&gt;11 Useful Unity C# Extension Methods&lt;/strong&gt;&lt;/a&gt;  - This time I will show you a list of useful Unity extensions and the cases where you can use them. I had been looking around to expand my list of useful extensions and some of them were pretty interesting plus I already had a few I normally use.&lt;br&gt;
&lt;a href="https://monoflauta.com/2021/07/27/11-useful-unity-c-extension-methods/"&gt;&lt;em&gt;monoflauta.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gamedev-resources.com/create-an-item-management-editor-tool-with-ui-toolkit/"&gt;&lt;strong&gt;Create an item management editor window with UI Toolkit&lt;/strong&gt;&lt;/a&gt;  - This tutorial will cover the fundamentals of creating a custom editor tool, including what scriptable objects are and how to create, delete and bind to one. You will also learn about ListView and the Object Picker.&lt;br&gt;
&lt;a href="https://gamedev-resources.com/create-an-item-management-editor-tool-with-ui-toolkit/"&gt;&lt;em&gt;gamedev-resources.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.raywenderlich.com/22175776-introduction-to-textmesh-pro-in-unity"&gt;&lt;strong&gt;Introduction to TextMesh Pro in Unity&lt;/strong&gt;&lt;/a&gt;  - Learn about TextMesh Pro in Unity by creating a spooky text-based adventure game where the style of the text changes based on what happens in the story.&lt;br&gt;
&lt;a href="https://www.raywenderlich.com/22175776-introduction-to-textmesh-pro-in-unity"&gt;&lt;em&gt;raywenderlich.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gamasutra.com/view/news/386242/Going_forward_Unity_devs_will_need_Unity_Pro_to_publish_on_consoles.php?"&gt;&lt;strong&gt;Going forward, Unity devs will need Unity Pro to publish on consoles&lt;/strong&gt;&lt;/a&gt;  - In late June, Unity quietly updated its licensing policy requirements for developers working on “closed platforms” like Xbox, PlayStation, Nintendo Switch, and Google Stadia. Unity developers starting new projects will now need either a Unity Pro license or a Preferred Platform License Key to develop for these platforms.&lt;br&gt;
&lt;em&gt;[&lt;a href="https://www.youtube.com/watch?v=fXUvnEJ3YeA"&gt;Watch&lt;/a&gt; Gamefromscratch's take]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://gamasutra.com/view/news/386242/Going_forward_Unity_devs_will_need_Unity_Pro_to_publish_on_consoles.php?"&gt;&lt;em&gt;gamasutra.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=kQIBQbAShk0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yXO4A9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/a28f74c18eedfc1ebb0f195c424ee8ff.png" alt="Creator Spotlight: Minute of Islands by Studio Fizbin"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=kQIBQbAShk0"&gt;&lt;strong&gt;Creator Spotlight: Minute of Islands by Studio Fizbin&lt;/strong&gt;&lt;/a&gt;  - Studio Fizbin joins us on Twitch to explore the tech behind their gorgeous 2D narrative puzzle platformer, Minute of Islands. We answer questions from the community as we open up the engine and learn how the team built their hand-drawn environment, the challenges they faced, and what tools helped achieve their vision for this vibrant world.&lt;br&gt;
&lt;em&gt;[don't miss these other Creator Spotlights as well: &lt;a href="https://www.youtube.com/watch?v=pu9krs6rHKQ"&gt;Harold Halibut | Slow Bros.&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=jR_4qVRO3e8"&gt;Praey for the Gods | No Matter Studios&lt;/a&gt;]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=kQIBQbAShk0"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=GFOpKcpKGKQ"&gt;&lt;strong&gt;Batman Arkham's Freeflow Combat | Mix and Jam&lt;/strong&gt;&lt;/a&gt;  - This project is a take on the Freeflow Combat system from the Batman Arkham series of games! Let’s explore game dev techniques and try to achieve a similar system!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=GFOpKcpKGKQ"&gt;&lt;em&gt;Mix and Jam&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=AbV7gVCndIE"&gt;&lt;strong&gt;I Made The Legend of Zelda Boss Fights but they’re 3D&lt;/strong&gt;&lt;/a&gt;  - I Made The Legend of Zelda Boss Fights but they’re 3D. . . Last time when I made The Legend of Zelda but it’s 3D, I said at the end of the video that I might continue on with the dungeons and boss fights in another video since I had never made a boss at that point. After a couple months I’ve finally finished up with doing all the different dungeons, along with the enemies and the bosses.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=AbV7gVCndIE"&gt;&lt;em&gt;CodyCantEatThis&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=YnIiMCnAf9E"&gt;&lt;strong&gt;LEARN UNITY AUDIO - The Ultimate Guide to Audio, Implementation &amp;amp; Scripting&lt;/strong&gt;&lt;/a&gt;  - If you're struggling to implement sound effects, audio in Unity - Need help scripting them? Then this Unity tutorial is for you! This video will have details on adding 2D and 3D audio effects, understanding the basics around these, scripting audio sources, audio clips, using triggers, unity events, UI buttons and custom events. Looking at playing and pausing audio and understanding AudioMixers and how to change that at runtime. I'll lave time stamps under here for your convenience! :)&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=YnIiMCnAf9E"&gt;&lt;em&gt;SpeedTutor&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=SzQABx2YTJA"&gt;&lt;strong&gt;Creating a Dynamic Modal Window in Unity&lt;/strong&gt;&lt;/a&gt;  - Modal windows are a crucial part of Game UI, so let's make one in Unity that's flexible and versatile!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=SzQABx2YTJA"&gt;&lt;em&gt;Game Dev Guide&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ibr8gKmz760"&gt;&lt;strong&gt;Unity Visual Scripting in 2021! (changes from 2020, BOLT)&lt;/strong&gt;&lt;/a&gt;  - Let's explore the changes in Unity Visual Scripting 2021 and Bolt.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=ibr8gKmz760"&gt;&lt;em&gt;Code Monkey&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=IzUpWU1Wd2E"&gt;&lt;strong&gt;Quickly &amp;amp; Easily Create Hit Impact Effects&lt;/strong&gt;&lt;/a&gt;  - In this video, we’ll show you how to quickly &amp;amp; easily make hit impact effects for your games.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=IzUpWU1Wd2E"&gt;&lt;em&gt;Game Dev Republic&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=h50OMdqtbKE"&gt;&lt;strong&gt;InGame Tilemap Editing - PART 2: Lines &amp;amp; Rectangles - 2D Level Editor with Unity - Tutorial&lt;/strong&gt;&lt;/a&gt;  - In this tutorial series you will learn how you can create an ingame UI where your players can draw on a grid. We are going to use Unitys Tilemaps and there will be a lot of coding involved. You'll learn how you can add the UI with clickable buttons, how to show a preview where an item would be placed and of course you can place it. It will then be drawn onto a tilemap.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=h50OMdqtbKE"&gt;&lt;em&gt;Velvary&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=rMlcwtoui4I"&gt;&lt;strong&gt;Input System Interactions Explained | Press, Hold, Tap, SlowTap, MultiTap - Unity&lt;/strong&gt;&lt;/a&gt;  - Today we go over Interactions in Unity's New Input System. I go what makes an interaction, how it impacts the actions, the individual actions themselves, code overview, interaction priority and multiple interactions, and custom interactions.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=rMlcwtoui4I"&gt;&lt;em&gt;samyam&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=7eKi6NKri6I"&gt;&lt;strong&gt;Best practices: Async vs. coroutines - Unite Copenhagen&lt;/strong&gt;&lt;/a&gt;  - Before async was introduced in Unity 2017, asynchronous routines were implemented using coroutines and/or callbacks. This video covers the benefits of async over coroutines. You'll see how one example problem – building an asynchronous prompt popup – can be solved using async vs coroutines.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=7eKi6NKri6I"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assets"&gt;
  &lt;/a&gt;
  Assets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://assetstore.unity.com/summer-sale?aid=1011l8NVc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBRe2cEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/a9024c2f-b132-c78b-755f-d32fe22cb1d4.jpeg" alt="Smash Hit Summer - Asset Store Sale"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://assetstore.unity.com/summer-sale?aid=1011l8NVc"&gt;&lt;strong&gt;Smash Hit Summer - Asset Store Sale&lt;/strong&gt;&lt;/a&gt;  - 50% off&lt;br&gt;
&lt;a href="https://assetstore.unity.com/summer-sale?aid=1011l8NVc"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://assetstore.unity.com/publisher-sale?aid=1011l8NVc"&gt;&lt;strong&gt;The Animation Publishers Sale Begins Today!&lt;/strong&gt;&lt;/a&gt;  - All assets from 3 Animation Publishers, Kevin Iglesias, Explosive, and we make the game, are on sale for 50% off from August 2, 2021 00:00:00 PT through August 15, 2021. In addition, each Animation Publisher has one asset that will be offered for free with coupon code: ANIMATE2021 during the sale:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free asset &lt;a href="https://assetstore.unity.com/packages/3d/animations/basic-motions-157744?aid=1011l8NVc"&gt;Basic Motions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free asset &lt;a href="https://assetstore.unity.com/packages/3d/animations/crafting-mecanim-animation-pack-36545?aid=1011l8NVc"&gt;The Crafting Mecanim Animation Pack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Free asset &lt;a href="https://assetstore.unity.com/packages/3d/animations/oriental-sword-animation-71318?aid=1011l8NVc"&gt;Oriental Sword Animation&lt;/a&gt;
&lt;em&gt;[remember to use coupon code: ANIMATE2021 at checkout]&lt;/em&gt;
&lt;a href="https://assetstore.unity.com/publisher-sale?aid=1011l8NVc"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/renanwolf/UniRate?"&gt;&lt;strong&gt;UniRate&lt;/strong&gt;&lt;/a&gt;  - Unity plugin to easily manage the application frame rate and rendering interval. Preventing battery power consumption and device heat, especially on mobile platforms.&lt;br&gt;
&lt;a href="https://github.com/renanwolf/UniRate?"&gt;&lt;em&gt;renanwolf&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Cysharp/UniTask?"&gt;&lt;strong&gt;UniTask&lt;/strong&gt;&lt;/a&gt;  - Provides an efficient allocation free async/await integration for Unity.&lt;br&gt;
&lt;a href="https://github.com/Cysharp/UniTask?"&gt;&lt;em&gt;Cysharp&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ultraleap/PlayRecorder?utm_source=pocket_mylist"&gt;&lt;strong&gt;PlayRecorder&lt;/strong&gt;&lt;/a&gt;  - PlayRecorder lets you record Unity scene logic into binary files that work in both the editor or builds. Once a recording is made with a scene, even if that recording is created within a build, it can be played back within the editor, making it incredibly useful for recording data from user studies or analytics. Data can also be recorded within the editor, and then played back within a build.&lt;br&gt;
&lt;a href="https://github.com/ultraleap/PlayRecorder?utm_source=pocket_mylist"&gt;&lt;em&gt;Ultraleap&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/MonoMod/MonoMod?"&gt;&lt;strong&gt;MonoMod&lt;/strong&gt;&lt;/a&gt;  - C# modding swiss army knife, powered by cecil.&lt;br&gt;
&lt;a href="https://github.com/MonoMod/MonoMod?"&gt;&lt;em&gt;MonoMod&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/voxell-tech/UnityNLP?"&gt;&lt;strong&gt;Unity NLP&lt;/strong&gt;&lt;/a&gt;  - Natural Language Processing in Unity.&lt;br&gt;
&lt;a href="https://github.com/voxell-tech/UnityNLP?"&gt;&lt;em&gt;voxell-tech&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/snozbot/fungus?"&gt;&lt;strong&gt;Fungus&lt;/strong&gt;&lt;/a&gt;  - The goal of Fungus is to provide a free, open source tool for creating interactive storytelling games in Unity 3D. Fungus is designed to be easy to learn for beginners to Unity 3D, especially for people with no coding experience. For power users, it provides an intuitive, fast workflow for visual scripting and interactive storytelling. Fungus is being used to create Visual Novels, Point and Click Adventure Games, Childrens Stories, Hidden Object Games, eLearning apps and also some frankly weird stuff which defies classification :)&lt;br&gt;
&lt;a href="https://github.com/snozbot/fungus?"&gt;&lt;em&gt;snozbot&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/michaelday008/AnyRPGCore?"&gt;&lt;strong&gt;AnyRPG&lt;/strong&gt;&lt;/a&gt;  - Open source Role Playing Game engine for Unity 3D written in C#.&lt;br&gt;
&lt;a href="https://github.com/michaelday008/AnyRPGCore?"&gt;&lt;em&gt;michaelday008&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/FritzsHero/RoadArchitect?"&gt;&lt;strong&gt;RoadArchitect&lt;/strong&gt;&lt;/a&gt;  - Road Architect is a professional quality road system creator featuring dynamic intersections, bridges and many other road objects.&lt;br&gt;
&lt;a href="https://github.com/FritzsHero/RoadArchitect?"&gt;&lt;em&gt;FritzsHero&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/naelstrof/UnityJigglePhysics?"&gt;&lt;strong&gt;Unity Jiggle Physics&lt;/strong&gt;&lt;/a&gt;  - An acceleration-based jigglebone system with soft-body/squash-and-stretch physics for SkinnedMeshRenderers in Unity.&lt;br&gt;
&lt;a href="https://github.com/naelstrof/UnityJigglePhysics?"&gt;&lt;em&gt;naelstrof&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/komietty/unity-animated-convexhull?"&gt;&lt;strong&gt;unity-animated-convexhull&lt;/strong&gt;&lt;/a&gt;  - Realtime Fast convex generator for Unity.&lt;br&gt;
&lt;a href="https://github.com/komietty/unity-animated-convexhull?"&gt;&lt;em&gt;komietty&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/JimmyCushnie/SUCC?utm_source=pocket_mylist"&gt;&lt;strong&gt;SUCC&lt;/strong&gt;&lt;/a&gt;  - Sexy and Utilitarian Code Configuration.&lt;br&gt;
&lt;a href="https://github.com/JimmyCushnie/SUCC?utm_source=pocket_mylist"&gt;&lt;em&gt;Jimmy Cushnie&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/WooshiiDev/HierarchyDecorator?"&gt;&lt;strong&gt;Hierarchy Decorator&lt;/strong&gt;&lt;/a&gt;  - Lightweight Unity Extension for allowing Headers and GameObject info inside the Hierarchy Window.&lt;br&gt;
&lt;a href="https://github.com/WooshiiDev/HierarchyDecorator?"&gt;&lt;em&gt;WooshiiDev&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Seneral/UndoPro?"&gt;&lt;strong&gt;UndoPro&lt;/strong&gt;&lt;/a&gt;  - UndoPro is a command-based undo system integrated into Unity's default system. This allows devs to use actions for their undo/redo operations without forcing the user into a new undo-workflow!&lt;br&gt;
&lt;a href="https://github.com/Seneral/UndoPro?"&gt;&lt;em&gt;Seneral&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gasgiant/Markup-Attributes?"&gt;&lt;strong&gt;Markup Attributes&lt;/strong&gt;&lt;/a&gt;  - A Unity Editor extension for customizing inspector layout with attributes.&lt;br&gt;
&lt;a href="https://github.com/gasgiant/Markup-Attributes?"&gt;&lt;em&gt;gasgiant&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vvrvvd/Unity-Spline-Editor?"&gt;&lt;strong&gt;Unity Spline Editor&lt;/strong&gt;&lt;/a&gt;  - Unity Spline Editor is an open-source tool for creating and managing cubic bezier curves in Unity Editor.&lt;br&gt;
&lt;a href="https://github.com/vvrvvd/Unity-Spline-Editor?"&gt;&lt;em&gt;vvrvvd&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/coder89/arfoundation-mock?"&gt;&lt;strong&gt;Unity.XR.Mock for ARFoundation 4.x&lt;/strong&gt;&lt;/a&gt;  - Unity Editor plugin that let's you mock AR environment for development &amp;amp; testing on your PC.&lt;br&gt;
&lt;a href="https://github.com/coder89/arfoundation-mock?"&gt;&lt;em&gt;coder89&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ryanslikesocool/Easings?"&gt;&lt;strong&gt;Unity-Easings&lt;/strong&gt;&lt;/a&gt;  - 41 easing methods to make transitions nicer in Unity.&lt;br&gt;
&lt;a href="https://github.com/ryanslikesocool/Easings?"&gt;&lt;em&gt;ryanslikesocool&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/NagaChiang/entity-tween?"&gt;&lt;strong&gt;Entity Tween&lt;/strong&gt;&lt;/a&gt;  - Entity compatible tween library for Unity ECS/DOTS and Project Tiny (DOTS Runtime).&lt;br&gt;
&lt;a href="https://github.com/NagaChiang/entity-tween?"&gt;&lt;em&gt;NagaChiang&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/quabug/EntitiesBT?utm_source=pocket_mylist"&gt;&lt;strong&gt;EntitiesBT&lt;/strong&gt;&lt;/a&gt;  - Behavior Tree for Unity ECS (DOTS) framework.&lt;br&gt;
&lt;a href="https://github.com/quabug/EntitiesBT?utm_source=pocket_mylist"&gt;&lt;em&gt;quabug&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DreamersIncStudios/ECS-IAUS-sytstem"&gt;&lt;strong&gt;ECS-IAUS-sytstem&lt;/strong&gt;&lt;/a&gt;  - The utility system works by identifying options available to the AI and selecting the best option by scoring each option based on the circumstances. &lt;em&gt;[read the &lt;a href="https://dreamerincblog.wordpress.com/2021/01/24/devlog-15-the-one-about-the-dots-iaus-repo/"&gt;blog description&lt;/a&gt;]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://github.com/DreamersIncStudios/ECS-IAUS-sytstem"&gt;&lt;em&gt;DreamersIncStudios&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/FBast/ReflexityAI?utm_source=pocket_mylist"&gt;&lt;strong&gt;ReflexityAI&lt;/strong&gt;&lt;/a&gt;  - Provide a basic framework to build an Utility AI in Unity using the xNode editor of Siccity.&lt;br&gt;
&lt;a href="https://github.com/FBast/ReflexityAI?utm_source=pocket_mylist"&gt;&lt;em&gt;FBast&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/CatLib/Core?utm_source=pocket_mylist"&gt;&lt;strong&gt;CatLib Core&lt;/strong&gt;&lt;/a&gt;  - CatLib lightweight dependency injection container&lt;br&gt;
&lt;a href="https://github.com/CatLib/Core?utm_source=pocket_mylist"&gt;&lt;em&gt;CatLib&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gpvigano/AsImpL?"&gt;&lt;strong&gt;AsImpL (OBJ)&lt;/strong&gt;&lt;/a&gt;  - Asynchronous Importer and run-time Loader for Unity.&lt;br&gt;
&lt;a href="https://github.com/gpvigano/AsImpL?"&gt;&lt;em&gt;gpvigano&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/OndrejNepozitek/Edgar-Unity?"&gt;&lt;strong&gt;Edgar for Unity&lt;/strong&gt;&lt;/a&gt;  - This project is a Unity plugin for procedural generation of 2D dungeons (and platformers) and aims to give game designers a complete control over generated levels. It combines graph-based approach to procedural generation with handmade room templates to generate levels with a feeling of consistency.&lt;br&gt;
&lt;a href="https://github.com/OndrejNepozitek/Edgar-Unity?"&gt;&lt;em&gt;OndrejNepozitek&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/RadicalCSG/Chisel.Prototype?"&gt;&lt;strong&gt;Chisel.Prototype&lt;/strong&gt;&lt;/a&gt;  - Chisel is an extension for Unity that allows for rapid, iterative, non destructive level editing!&lt;br&gt;
&lt;a href="https://github.com/RadicalCSG/Chisel.Prototype?"&gt;&lt;em&gt;RadicalCSG&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cowtrix/voxul?"&gt;&lt;strong&gt;voxul&lt;/strong&gt;&lt;/a&gt;  - voxul is a voxel system and editor tool for Unity 3D. Use it to build voxel meshes, objects and levels.&lt;br&gt;
&lt;a href="https://github.com/cowtrix/voxul?"&gt;&lt;em&gt;cowtrix&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/artnas/Unity-Plane-Mesh-Splitter?"&gt;&lt;strong&gt;Unity Plane Mesh Splitter&lt;/strong&gt;&lt;/a&gt;  - A simple tool which lets you split any mesh into smaller submeshes. At first it was designed to work with imported Tiled2Unity terrains, but I rewrote it to work with everything you can throw at it.&lt;br&gt;
&lt;a href="https://github.com/artnas/Unity-Plane-Mesh-Splitter?"&gt;&lt;em&gt;artnas&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/needle-tools/compilation-visualizer?"&gt;&lt;strong&gt;Compilation Visualizer for Unity&lt;/strong&gt;&lt;/a&gt;  - Unity Tool showing a timeline of assembly compilation. This is especially helpful when trying to optimize compile times and dependencies between assemblies. Besides showing a graphical view of compilation, selecting an assembly shows both dependencies and dependents of that assembly.&lt;br&gt;
&lt;a href="https://github.com/needle-tools/compilation-visualizer?"&gt;&lt;em&gt;needle-tools&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/daemon3000/InputManager?utm_source=pocket_mylist"&gt;&lt;strong&gt;InputManager&lt;/strong&gt;&lt;/a&gt;  - InputManager is a custom input manager for Unity that allows you to rebind keys at runtime and abstract input devices for cross platform input.&lt;br&gt;
&lt;a href="https://github.com/daemon3000/InputManager?utm_source=pocket_mylist"&gt;&lt;em&gt;daemon3000&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SoftwareGuy/Ignorance?"&gt;&lt;strong&gt;Ignorance 1.4 Beta&lt;/strong&gt;&lt;/a&gt;  - Ignorance utilizes the power of ENet to provide a reliable UDP networking transport for Mirror Networking.&lt;br&gt;
&lt;a href="https://github.com/SoftwareGuy/Ignorance?"&gt;&lt;em&gt;SoftwareGuy&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/instance-id/ElementAnimationToolkit?"&gt;&lt;strong&gt;ElementAnimationToolkit&lt;/strong&gt;&lt;/a&gt;  - A collection of Unity UIElements animation extension methods, new animated elements, and examples.&lt;br&gt;
&lt;a href="https://github.com/instance-id/ElementAnimationToolkit?"&gt;&lt;em&gt;instance-id&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/alelievr/NodeGraphProcessor?"&gt;&lt;strong&gt;NodeGraphProcessor&lt;/strong&gt;&lt;/a&gt;  - Node graph editor framework focused on data processing using Unity UIElements, GraphView and C# 4.7.&lt;br&gt;
&lt;a href="https://github.com/alelievr/NodeGraphProcessor?"&gt;&lt;em&gt;alelievr&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mob-sakai/ParticleEffectForUGUI?"&gt;&lt;strong&gt;Particle Effect For UGUI (UI Particle)&lt;/strong&gt;&lt;/a&gt;  - Render particle effect in UnityUI(uGUI). Maskable, sortable, and no extra Camera/RenderTexture/Canvas.&lt;br&gt;
&lt;a href="https://github.com/mob-sakai/ParticleEffectForUGUI?"&gt;&lt;em&gt;mob-sakai&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/alelievr/HDRP-UI-Camera-Stacking?"&gt;&lt;strong&gt;HDRP UI Camera Stacking&lt;/strong&gt;&lt;/a&gt;  - The HDRP UI Camera Stacking package allows you to stack multiple camera rendering UI only at a fraction of the cost of a standard camera.&lt;br&gt;
&lt;a href="https://github.com/alelievr/HDRP-UI-Camera-Stacking?"&gt;&lt;em&gt;alelievr&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/FredericRP/Standard-Assets?"&gt;&lt;strong&gt;Standard-Assets&lt;/strong&gt;&lt;/a&gt;  - Bucket, event management, object pool, popup, screen transitions and tips helper for Unity.&lt;br&gt;
&lt;a href="https://github.com/FredericRP/Standard-Assets?"&gt;&lt;em&gt;FredericRP&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spotlight"&gt;
  &lt;/a&gt;
  Spotlight
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://store.steampowered.com/app/1252240/Aeon_Drive/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxyH6d4A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/240f7acce420bd11f51179961ae595db.png" alt="Aeon Drive"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://store.steampowered.com/app/1252240/Aeon_Drive/"&gt;&lt;strong&gt;Aeon Drive&lt;/strong&gt;&lt;/a&gt;  - Rush through the cyberpunk landscapes of Neo Barcelona in Aeon Drive, an action-platformer with a speedrunning twist! Whether solo or in up to 4 player co-op, sprint and dash through many areas of the neon-infused city - and use your time and space-bending abilities to get ahead.&lt;/p&gt;

&lt;p&gt;[&lt;a href="https://store.steampowered.com/app/1252240/Aeon_Drive/"&gt;Play the demo&lt;/a&gt; on Steam, and follow the development on &lt;a href="https://twitter.com/AeonDrive"&gt;Twitter&lt;/a&gt; and &lt;a href="https://discord.com/invite/RfKxxFE"&gt;Discord&lt;/a&gt;]&lt;br&gt;
&lt;a href="https://store.steampowered.com/app/1252240/Aeon_Drive/"&gt;&lt;em&gt;2Awesome Studio&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You can subscribe to the free weekly newsletter on &lt;a href="https://gamedevdigest.com"&gt;GameDevDigest.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>unity</category>
      <category>csharp</category>
      <category>news</category>
    </item>
    <item>
      <title>Memoization Demystified in 6 minutes</title>
      <author>Precious adeyinka</author>
      <pubDate>Fri, 06 Aug 2021 13:06:16 +0000</pubDate>
      <link>https://dev.to/pflash/memoization-demystified-in-7-minutes-25pi</link>
      <guid>https://dev.to/pflash/memoization-demystified-in-7-minutes-25pi</guid>
      <description>&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;Do you remember how we used to play Nintendo games as kids, and did you ever played &lt;strong&gt;Need for speed video games. Boy!&lt;/strong&gt; I don't know what you played if you didn't played that game, and can you remember how you try to boost your racing speed by the push of a button to apply some nitro super powers? Yeahhh, I know you are having memories already, good old days huh!&lt;/p&gt;

&lt;p&gt;Anyways, it is pretty much the same concepts applied in programming, but just in a different context, and in this article I aim to explain the relationship between &lt;strong&gt;nitrospeeding&lt;/strong&gt; concept from the video game and &lt;strong&gt;memoization&lt;/strong&gt; for your computer programs.&lt;/p&gt;

&lt;p&gt;When we write code and build applications, we often write functions that tend to perform some sort of computations, and those computations could be very expensive, in terms of space (as in the amount of memory needed by your program to execute) and time (as in the duration it takes for your program to execute) complexity.&lt;/p&gt;

&lt;p&gt;This can affect the performance of your application, and as such, you might loose your customers, some money, as a result or even worse. So, what if there is a way to make those slow performing processes that makes your application lack some Nitro Speed faster and better?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's do this thing!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-memoization"&gt;
  &lt;/a&gt;
  What is Memoization?
&lt;/h3&gt;

&lt;p&gt;That is when &lt;strong&gt;MEMOIZATION&lt;/strong&gt; gains the spotlight, because it essentially aims to solve the issues with performance for the most. When your application slows down, it might be because of a particular process running that causes the delay to affect the entire app, and when we build software's we tend to use functions, because they make our programs reusable and modular. So, maybe you have a function that performs some kind of API calls or complex calculations that requires a lot of space and time to execute, then what you can do to prevent such function from affecting your application is to memoize the function, and that basically means that since the function will be receiving some inputs, and producing some results, then why not sort of remember the values of each input, so that whenever you need to perform a future action that depends on the values from the previous computations with already know inputs, then your function could just remember them and use them again easily rather than have to recalculate them all over again, and doing so will tremendously improve the speed and efficiency of your programs.&lt;/p&gt;

&lt;p&gt;Essentially, think of memoization as a type of caching (where caching generally refers to storage techniques adopted, when you intend to reuse a resource in the future) where you memorize the values of known input, and should they be needed in the future, we could remember their outcomes, rather than calculate them again and again and again, which is a very tedious process and time consuming one also.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And that ladies and gentlemen is Memoization&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-i-memoize"&gt;
  &lt;/a&gt;
  What can I memoize?
&lt;/h3&gt;

&lt;p&gt;You can memoize essentially, almost all types of function, but should you actually memoize all functions? and the abrupt answer is no don't.&lt;/p&gt;

&lt;p&gt;You can memoize :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pure functions (a pure function essential is a function that returns the exact same value for the exact same input everytime)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functions with limited input range but repeatedly occuring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Functions that performs complex computations with repeated values, and also some API calls that are happening too frequent, but speaking of API calls, make sure to do a background check, because your browser is most likely using &lt;strong&gt;HTTP CACHING&lt;/strong&gt; already to cache your accessed URLs in the browser.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anything, aside from this, just be reasonable about it, and carefully think of the impact it might cause and the idea in principle for your applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-catch"&gt;
  &lt;/a&gt;
  What is the catch?
&lt;/h3&gt;

&lt;p&gt;While there are a lot of useful articles online, explaining memoization, I often don't read about the side effects of applying this approach in your programs. So, in order to make that clear, I would like to inform you that memoization does a great job in terms of performance for your programs, but it does so in a trade for memory consumption, because you will need a lot of memory to store the previously computed values, and depending on the size and throughput of your transactions or computations, the variation in the amount of memory consumed will be reflected accordingly. Hence, keep that in mind when using this approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-example"&gt;
  &lt;/a&gt;
  An Example
&lt;/h3&gt;

&lt;p&gt;Enough talking, let's see some actions. And in this example, I will, show you how to create a simple greeter function that uses memoization to remember a previous user and displays a different message accordingly, and I am choosing this example just to demonstrate some really subtle instance, that is not all numerical and requires some computations like; fibonacci, squaring, summing, factorial, and just to mention a few, because you will see a lot of these examples online, but I just also want you to see a different use case and that you could apply the concept to pretty much any kind of function you wish, you can be really creative about it, so let's see some action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;const greet &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;let users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;name &lt;span class="k"&gt;in &lt;/span&gt;&lt;span class="nb"&gt;users&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;let &lt;/span&gt;message &lt;span class="o"&gt;=&lt;/span&gt; name + &lt;span class="s1"&gt;', you already seem to know your way around, please feel free to explore!'&lt;/span&gt;
            &lt;span class="nb"&gt;users&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;name] &lt;span class="o"&gt;=&lt;/span&gt; message
            &lt;span class="k"&gt;return &lt;/span&gt;message
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;let &lt;/span&gt;message &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; + name + &lt;span class="s1"&gt;', it looks like you are new here, let\'&lt;/span&gt;s get you all setup shall we.&lt;span class="s1"&gt;'
            users[name] = message
            return message
        }
    }
}

let greeter = greet()
console.log(greeter('&lt;/span&gt;Dave&lt;span class="s1"&gt;')); // Hello Dave, it looks like you are new here, let'&lt;/span&gt;s get you all setup shall we.
console.log&lt;span class="o"&gt;(&lt;/span&gt;greeter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Dave'&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; // Dave, you already seem to know your way around, please feel free to explore!
console.log&lt;span class="o"&gt;(&lt;/span&gt;greeter&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Precious'&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; // Hello Precious, it looks like you are new here, &lt;span class="nb"&gt;let&lt;/span&gt;&lt;span class="s1"&gt;'s get you all setup shall we.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#breakdown"&gt;
  &lt;/a&gt;
  Breakdown
&lt;/h3&gt;

&lt;p&gt;Here in this example, you can see that we have a function that returns another function, which is something called a &lt;strong&gt;closure&lt;/strong&gt; and it is important in order to make the function able to remember the values on consequent executions, unless this, it will just start a new execution every time sort of.&lt;/p&gt;

&lt;p&gt;Also inside the function, there is a variable, &lt;strong&gt;users&lt;/strong&gt;, that stores the results of known inputs and values, that is like the cache(storage) for remembering the stored values.&lt;/p&gt;

&lt;p&gt;The returned function takes a parameter &lt;strong&gt;name&lt;/strong&gt;, and it uses a conditional to check if the name parameter is already stored in the cache, and if it is, it returns a different message and also updates the message in the storage accordingly, so that on future calls, it will return the newly stored message, and if the first condition fails, then the &lt;strong&gt;else block&lt;/strong&gt; will make a new message for the user and store that in the cache(as in the variable users) and the displays the message to the user also.&lt;/p&gt;

&lt;p&gt;And when we called the function the first time with &lt;strong&gt;dave&lt;/strong&gt;, we get a welcoming sort of message, and when we called the function again with the same argument &lt;strong&gt;dave&lt;/strong&gt;, we get a more friendly and familiar message instead, and when we do the same thing for a new argument, we get the process happening again.&lt;/p&gt;

&lt;p&gt;It is important to note that without memoization used here, it will not be that easy to achieve this functionality, it is possible yes, but not what you want to do, it will require more lines of code and logic to get it to work perfectly, so save yourself some headaches really.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h3&gt;

&lt;p&gt;Well, now that you now know what &lt;strong&gt;memozation&lt;/strong&gt; is and how it can be used and not used, you can take more control of the speed of your applications and apply some nitrospeed to your programs. Aside from this, there are some concepts and keywords that might be new to you, so do well to check them out too, in order to make some sense out of this explanation. I don't want to suggest, just feel free to explore, if you do so, you will find out something I don't know haha, so maybe a quick google search can deliver a plethora of resources to you really.&lt;/p&gt;

&lt;p&gt;A few of them maybe:&lt;/p&gt;

&lt;p&gt;-Closure&lt;br&gt;
-Functional Programming&lt;br&gt;
-HTTP Caching&lt;/p&gt;

&lt;p&gt;Whatever I leave out, also include them for your own good.&lt;/p&gt;

&lt;p&gt;Alright that is everything, thank you for reading, see you in the next article.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>performance</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Is there a programming language that you can call "the best"?</title>
      <author>Maddy</author>
      <pubDate>Fri, 06 Aug 2021 13:02:37 +0000</pubDate>
      <link>https://dev.to/maddy/is-there-a-programming-language-that-you-can-call-the-best-2e73</link>
      <guid>https://dev.to/maddy/is-there-a-programming-language-that-you-can-call-the-best-2e73</guid>
      <description>&lt;p&gt;Is there a programming language that you can call "the best"?&lt;/p&gt;

&lt;p&gt;When I was studying computer science at university, I had this thought several times. Now that I work as a full-time software engineer, I can say that the best programming language doesn't exist.😁 It's just a matter of personal preference, and it depends on what you are trying to build. &lt;/p&gt;

&lt;p&gt;Three criteria that I think can be useful when choosing a programming language to learn are:&lt;/p&gt;

&lt;p&gt;🎨 &lt;strong&gt;Your interests&lt;/strong&gt;: what do you like? Are you into mobile development? Then go with Kotlin/Java for Android, Swift for iOS. Data science? Python. Gaming? C++. Web development? JavaScript and PHP are great. The list goes on. &lt;/p&gt;

&lt;p&gt;📊 &lt;strong&gt;Market trends&lt;/strong&gt;: some languages are more popular than others, and if you're looking to program professionally, ideally, you might want to stick with the top 5. Also, just because a programming language is more trendy for a year, it doesn't mean that the others become obsolete all of a sudden. Every year StackOverflow publishes a developer &lt;a href="https://insights.stackoverflow.com/survey/2021#overview"&gt;survey&lt;/a&gt;. It gives a great insight into what developers are learning. &lt;/p&gt;

&lt;p&gt;💭 &lt;strong&gt;Complexity&lt;/strong&gt;: some languages take more effort than others to learn, are more verbose and strongly typed. Start with a relatively easy language and work your way up from there.&lt;/p&gt;

&lt;p&gt;🔎 &lt;strong&gt;Field&lt;/strong&gt;: I've noticed that some languages are more used in specific sectors than others. For example, in financial services Java is very popular, especially in large corporations. In healthcare, Python is predominant.&lt;/p&gt;

&lt;p&gt;In a commercial setting, a language is chosen based on the type of application to build (for example: is it a mobile or web application that we're trying to develop?), the complexity, the time available, scalability, etc. &lt;/p&gt;

&lt;p&gt;Many factors need to be taken into account when considering a suitable language for a project. But if you're starting, the three criteria listed earlier should guide you in the right direction (I hope!). &lt;/p&gt;

&lt;p&gt;Happy learning!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>learning</category>
      <category>softwareengineering</category>
    </item>
  </channel>
</rss>
