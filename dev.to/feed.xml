<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Fun tech quiz questions directly in your terminal</title>
      <author>Bobby Iliev</author>
      <pubDate>Wed, 26 May 2021 06:55:11 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/fun-tech-quiz-questions-directly-in-your-terminal-19pk</link>
      <guid>https://dev.to/bobbyiliev/fun-tech-quiz-questions-directly-in-your-terminal-19pk</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YyaVQa2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/june2020/3um936quha6qp3q3o18y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YyaVQa2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/june2020/3um936quha6qp3q3o18y.png" alt="3um936quha6qp3q3o18y.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Quizzes are a great way to test your knowledge on a specific topic. So I decided to create a tool called &lt;a href="https://quizapi.io"&gt;the Quiz API&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;Quiz API is a simple HTTP REST API for technical quizzes including a wide variety of topics like: Linux, DevOps, Programming (PHP, JS, Python and etc.), Docker, &lt;br&gt;
Kubernetes and lots more!&lt;/p&gt;

&lt;p&gt;It is free for developers and I've just released a beta version and started adding some cool questions!&lt;/p&gt;

&lt;p&gt;As the Quiz API returns the output in a JSON format, I created a bash script that allows you to answer questions whenever you feel like directly via your terminal!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfKidwJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.devdojo.com/images/june2020/ckb8sug0y9rs4ha6toeb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfKidwJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.devdojo.com/images/june2020/ckb8sug0y9rs4ha6toeb.gif" alt="QuizAPI Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;In order to be able to use the Quiz API bash script you need to have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An API Key for the Quiz API, you can get it totally for free &lt;a href="https://quizapi.io/register"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access to a bash terminal&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#download-the-quiz-bash-script"&gt;
  &lt;/a&gt;
  Download the Quiz bash script
&lt;/h2&gt;

&lt;p&gt;In order to download the bash script which would allow you to consume the QuizAPI and take questions directly via your terminal, you just need to run this command here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wget https://quizapi.io/quiz.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to check the script before running it! This bash script is also available on git and you can check it's contents here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/QuizApi/QuizAPI-BASH/blob/master/quiz.sh"&gt;https://github.com/QuizApi/QuizAPI-BASH/blob/master/quiz.sh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any pull requests with improvements are more than welcome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-raw-jq-endraw-"&gt;
  &lt;/a&gt;
  Install &lt;code&gt;jq&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;jq&lt;/code&gt; command-line tool is is a lightweight and flexible command-line JSON processor. It is great for parsing JSON output in your terminal and it is required by the Quiz API bash script.&lt;/p&gt;

&lt;p&gt;If you try to run the script without having &lt;code&gt;jq&lt;/code&gt; installed you will get the following message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The jq command is required! Please install it and then try again
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't have &lt;code&gt;jq&lt;/code&gt; already installed, you can do that by running one of the following commands depending on your OS:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu/Debian:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or if you are running the latest Ubuntu version you might have to install it with &lt;code&gt;snap&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo snap install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Fedora:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo dnf install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;openSUSE:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo zypper install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Arch:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo pacman -S jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#mac"&gt;
  &lt;/a&gt;
  Mac:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Homebrew:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;MacPort
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;port install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are on a different system, follow the steps from the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stedolan.github.io/jq/download/"&gt;https://stedolan.github.io/jq/download/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Once you have your API Key and &lt;code&gt;jq&lt;/code&gt; installed you can execute the script by running the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the script executable:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chmod +x quiz.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Execute the script:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./quiz.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we did not specify the API key, you will get the following output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Usage: quiz.sh -a API_KEY [-c Category] [-d Difficulty] [-t Tags]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order for the script to work, we need to pass our API key as an argument. One of the ways to do that is to define our API key as an environment variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export API_KEY=your_api_key_here
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: change the &lt;code&gt;your_api_key_here&lt;/code&gt; with your actual &lt;a href="https://quizapi.io/clientarea/settings/token"&gt;Quiz API key&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Then run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./quiz.sh -a ${API_KEY}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The script will make a curl request to the Quiz API and it would pars the output for you in a nice interactive cli multiple choice quiz like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; "How to dump pod logs (stdout) in Kubernetes?"
  1 ) "kubectl log my-pod"
  2 ) "kubectl pod logs my-pod"
  3 ) "kubectl logs my-pod"
  4 ) "kubectl pods logs my-pod"
Check an option (again to uncheck, ENTER when done):
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be able to select 1 or multiple answers and then press enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"How to dump pod logs (stdout) in Kubernetes?"
  1 ) "kubectl log my-pod"
  2 ) "kubectl pod logs my-pod"
  3+) "kubectl logs my-pod"
  4 ) "kubectl pods logs my-pod"
"kubectl logs my-pod" was checked
Check an option (again to uncheck, ENTER when done):

Selected was:  "kubectl logs my-pod"
Correct: is:  "kubectl logs my-pod"
Correct Answer!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#available-arguments"&gt;
  &lt;/a&gt;
  Available arguments
&lt;/h2&gt;

&lt;p&gt;The script allows you to specify different parameters so that you could get the questions that you want.&lt;/p&gt;

&lt;p&gt;The available arguments are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-c&lt;/code&gt; - get questions only for a specific category&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-d&lt;/code&gt; - get questions only for a specific difficulty (Easy, Medium and Hard)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-t&lt;/code&gt; - get questions for a specific topic/tag, this lets you combine multiple topics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, if you wanted to get easy Docker questions only, you could run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./quiz.sh -a ${API_KEY} -d hard -t docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;We have added about 1000 questions for the beta version! But we are planning to add a lot more than that in the future.&lt;/p&gt;

&lt;p&gt;As the Quiz API is free for developers, any contributions would be greatly appreciated. If you are feeling adventurous, you could do so via this link here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/contribute"&gt;https://quizapi.io/contribute&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you notice a wrong question feel free to report it as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/contact"&gt;https://quizapi.io/contact&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Quizzes can be a fun way to test and improve your knowledge, with the Quiz API you are going to be able to do so via your terminal at any time!&lt;/p&gt;

&lt;p&gt;For more information make sure to check out the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quizapi.io/docs/1.0/overview"&gt;https://quizapi.io/docs/1.0/overview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, feel free to reach out and say hi on twitter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/bobbyiliev_"&gt;https://twitter.com/bobbyiliev_&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>What are selectors and their types in CSS?</title>
      <author>Rajesh Kumar Yadav</author>
      <pubDate>Wed, 26 May 2021 06:23:35 +0000</pubDate>
      <link>https://dev.to/rajeshkumaryadavdotcom/what-are-selectors-and-their-types-in-css-24kl</link>
      <guid>https://dev.to/rajeshkumaryadavdotcom/what-are-selectors-and-their-types-in-css-24kl</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-selectors"&gt;
  &lt;/a&gt;
  What are Selectors?
&lt;/h1&gt;

&lt;p&gt;CSS selectors identify specific HTML elements as targets for CSS styles. This topic covers how CSS selectors target HTML elements. Selectors use a wide range of over 50 selection methods offered by the CSS language, including elements, classes, IDs, pseudo-elements and pseudo-classes, and patterns.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#basic-selectors"&gt;
  &lt;/a&gt;
  Basic selectors
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Universal selector (all elements)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tag selector (all &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Class selector (all elements with class blue)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.blue.red
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All elements with class blue and red (a type of Compound selector)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#headline
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ID selector (the element with "id" attribute set to headline)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:pseudo-class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All elements with pseudo-class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;::pseudo-element
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Element that matches pseudo-element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:lang(en)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Element that matches &lt;code&gt;:lang&lt;/code&gt; declaration, for example &lt;code&gt;&amp;lt;span lang="en"&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;div &amp;gt; p 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;child selector&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The value of an ID must be unique in a web page. It is a violation of the HTML standard to use the value of an ID more than once in the same document tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#attribute-selectors"&gt;
  &lt;/a&gt;
  Attribute Selectors
&lt;/h1&gt;

&lt;p&gt;Attribute selectors can be used with various types of operators that change the selection criteria accordingly. They select an element using the presence of a given attribute or attribute value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div[data-color] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-background=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div[data-color="red"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-color=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute*="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value where the given attribute contains the given value anywhere (as&lt;br&gt;
a substring).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[class*="foo"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo-123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar123foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"barfooo123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"barfo0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute~="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value where the given value appears in a whitespace-separated list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[class~="color-red"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color-red foo-bar the-div"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"color-blue foo-bar the-div"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute^="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value where the given attribute begins with the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[class^="foo-"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo-123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo-234"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bar-123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute$="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with the given attribute and value where the given attribute ends with the given value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[class$="file"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foobar-file"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foobar-file"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foobar-input"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute|="value"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with a given attribute and value where the attribute's value is exactly the given value or is exactly&lt;br&gt;
the given value followed by - &lt;code&gt;(U+002D)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[lang|="EN"] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"EN-us"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"EN-gb"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"PT-pt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[attribute="value" i]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Selects elements with a given attribute and value where the attribute's value can be represented as Value, VALUE,&lt;br&gt;
vAlUe or any other case-insensitive possibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;[lang="EN" i] {
 color: red;
}
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"EN"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"PT"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This will NOT be red&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Specificity of attribute selectors&lt;br&gt;
0-1-0&lt;br&gt;
Same as class selector and &lt;code&gt;pseudoclass&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*[type=checkbox] // 0-1-0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that this means an attribute selector can be used to select an element by its ID at a lower level of specificity than if it was selected with an ID selector: &lt;code&gt;[id="my-ID"]&lt;/code&gt; targets the same element as &lt;code&gt;#my-ID&lt;/code&gt; but with lower specificity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#combinators"&gt;
  &lt;/a&gt;
  Combinators
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#descendant-combinator-selector-selector"&gt;
  &lt;/a&gt;
  Descendant Combinator: selector selector
&lt;/h2&gt;

&lt;p&gt;A descendant combinator, represented by at least one space character (), selects elements that are a descendant of&lt;br&gt;
the defined element. This combinator selects all descendants of the element (from child elements on down).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div p {
 color:red;
}
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the first two &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements are selected since they are both descendants of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#child-combinator-selector-gt-selector"&gt;
  &lt;/a&gt;
  Child Combinator: selector &amp;gt; selector
&lt;/h2&gt;

&lt;p&gt;The child &lt;code&gt;(&amp;gt;)&lt;/code&gt; combinator is used to select elements that are children, or direct descendants, of the specified element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;div &amp;gt; p {
 color:red;
}
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS selects only the first &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, as it is the only paragraph directly descended from a &lt;/p&gt;.&lt;br&gt;
The second &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element is not selected because it is not a direct child of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.
&lt;h2&gt;
  &lt;a href="#adjacent-sibling-combinator-raw-selector-selector-endraw-"&gt;
  &lt;/a&gt;
  Adjacent Sibling Combinator: &lt;code&gt;selector + selector&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The adjacent sibling &lt;code&gt;(+)&lt;/code&gt; combinator selects a sibling element that immediate follows a specified element.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;p + p {
 color:red;
}
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The above example selects only those &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements which are directly preceded by another &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-sibling-combinator-raw-selector-selector-endraw-"&gt;
  &lt;/a&gt;
  General Sibling Combinator: &lt;code&gt;selector ~ selector&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The general sibling &lt;code&gt;(~)&lt;/code&gt; combinator selects all siblings that follow the specified element.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;p ~ p {
 color:red;
}
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is not red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;And now a title&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;My text is red&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The above example selects all &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements that are preceded by another &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, whether or not they are immediately adjacent.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pseudoclasses"&gt;
  &lt;/a&gt;
  Pseudo-classes
&lt;/h1&gt;

&lt;p&gt;Pseudo-classes are keywords which allow selection based on information that lies outside of the document tree or that cannot be expressed by other selectors or combinators. This information can be associated to a certain state (state and dynamic pseudo-classes), to locations (structural and target pseudo-classes), to negations of the former (negation pseudo-class) or to languages (lang pseudo-class). Examples include whether or not a link has been followed &lt;code&gt;(:visited)&lt;/code&gt;, the mouse is over an element &lt;code&gt;(:hover)&lt;/code&gt;, a checkbox is checked &lt;code&gt;(:checked)&lt;/code&gt;, etc.&lt;br&gt;
Syntax&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;selector&lt;/span&gt;&lt;span class="nd"&gt;:pseudo-class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="py"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;VALUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;List of pseudo-classes:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:active
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element being activated (i.e. clicked) by the user.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:any   
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Allows you to build sets of related selectors by creating groups that the included items will match. This is an alternative to repeating an entire selector.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:target
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Selects the current active #news element (clicked on a URL containing that anchor name)&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:checked 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to radio, checkbox, or option elements that are checked or toggled into an "on" state.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:default 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Represents any user interface element that is the default among a group of similar elements.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:disabled 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any UI element which is in a disabled state.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:empty
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element which has no children.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:enabled
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any UI element which is in an enabled state.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:first
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Used in conjunction with the @page rule, this selects the first page in a printed document.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:first-child
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Represents any element that is the first child element of its parent.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:first-of-type
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies when an element is the first of the selected element type inside its parent. This may or may not be the first-child.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:focus
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element which has the user's focus. This can be given by the user's keyboard, mouse events, or other forms of input.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:focus-within
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Can be used to highlight a whole section when one element inside it is focused. It matches any element that the :focus pseudo-class matches or that has a descendant focused.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:full-screen
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element displayed in full-screen mode. It selects the whole stack of elements and not just the top level element.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:hover
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element being hovered by the user's pointing device, but not activated.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:indeterminate
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies radio or checkbox UI elements which are neither checked nor unchecked, but are in an indeterminate state. This can be due to an element's attribute or DOM manipulation.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:in-range
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :in-range CSS pseudo-class matches when an element has its value attribute inside the specified range limitations for this element. It allows the page to give a feedback that the value currently defined using the element is inside the range limits.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:invalid
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements whose values are invalid according to the type specified in the &lt;code&gt;type= attribute&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:lang
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element who's wrapping &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element has a properly designated &lt;code&gt;lang= attribute&lt;/code&gt;. For the pseudo-class to be valid, it must contain a valid two or three letter language code.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:last-child 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Represents any element that is the last child element of its parent.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:last-of-type 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies when an element is the last of the selected element type inside its parent. This may or may not be the &lt;code&gt;last-child&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:left 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Used in conjunction with the &lt;code&gt;@page&lt;/code&gt; rule, this selects all the left pages in a printed document.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:link
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any links which haven't been visited by the user.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:not()
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to all elements which do not match the value passed to &lt;code&gt;(:not(p) or :not(.class-name)&lt;/code&gt; for example. It must have a value to be valid and it can only contain one selector. However, you can chain multiple &lt;code&gt;:not&lt;/code&gt; selectors&lt;br&gt;
together.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:nth-child
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies when an element is the n-th element of its parent, where n can be an integer, a mathematical expression (e.g n+3) or the keywords odd or even.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:nth-of-type
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies when an element is the n-th element of its parent of the same element type, where n can be an integer, a mathematical expression (e.g n+3) or the keywords odd or even.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:only-child
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :only-child CSS pseudo-class represents any element which is the only child of its parent. This is the same as&lt;br&gt;
:first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:optional
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :optional CSS pseudo-class represents any element that does not have the required attribute set on it. This allows&lt;br&gt;
forms to easily indicate optional fields and to style them accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:out-of-range
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :out-of-range CSS pseudo-class matches when an element has its value attribute outside the specified range limitations for this element. It allows the page to give a feedback that the value currently defined using the&lt;br&gt;
element is outside the range limits. A value can be outside of a range if it is either smaller or larger than maximum and minimum set values.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:placeholder-shown 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Experimental. Applies to any form element currently displaying placeholder text.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:read-only 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element which is not editable by the user.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:read-write
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any element that is editable by a user, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:right 
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Used in conjunction with the &lt;code&gt;@page&lt;/code&gt; rule, this selects all the right pages in a printed document.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;matches the root element of a tree representing the document.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:scope
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;CSS pseudo-class matches the elements that are a reference point for selectors to match against.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:target
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Selects the current active #news element (clicked on a URL containing that anchor name)&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:visited
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Applies to any links which have has been visited by the user.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#child-pseudo-class"&gt;
  &lt;/a&gt;
  Child Pseudo Class
&lt;/h1&gt;

&lt;p&gt;The :nth-child(an+b) CSS pseudo-class matches an element that has an+b-1 siblings before it in the document tree, for a given positive or zero value for n&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#class-name-selectors"&gt;
  &lt;/a&gt;
  Class Name Selectors
&lt;/h1&gt;

&lt;p&gt;The class name selector select all elements with the targeted class name. For example, the class name .warning would select the following &lt;/p&gt; element:&lt;br&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This would be some warning copy.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;You can also combine class names to target elements more specifically. Let's build on the example above to showcase a more complicated class selection.&lt;br&gt;
CSS&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.important&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.warning&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.warning.important&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;HTML&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This would be some warning copy.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"important warning"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"important"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is some really important warning copy.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In this example, all elements with the .warning class will have a blue text color, elements with the .important class with have an orange text color, and all elements that have both the .important and .warning class name will have a red text color.&lt;br&gt;
Notice that within the CSS, the .warning.important declaration did not have any spaces between the two class&lt;br&gt;
names. This means it will only find elements which contain both class names warning and important in their class attribute. Those class names could be in any order on the element. If a space was included between the two classes in the CSS declaration, it would only select elements that have parent elements with a .warning class names and child elements with .important class names.&lt;/p&gt;

&lt;p&gt;Select element using its ID without the high specificity of the ID selector&lt;br&gt;
This trick helps you select an element using the ID as a value for an attribute selector to avoid the high specificity of&lt;br&gt;
the ID selector.&lt;br&gt;
HTML:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"element"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* High specificity will override many selectors */&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"element"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;/* Low specificity, can be overridden easily */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#the-lastoftype-selector"&gt;
  &lt;/a&gt;
  The :last-of-type selector
&lt;/h1&gt;

&lt;p&gt;The :last-of-type selects the element that is the last child, of a particular type, of its parent. In the example below,&lt;br&gt;
the css selects the last paragraph and the last heading h1.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#C5CAE9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#CDDC39&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;





&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;First paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Second paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Last paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Heading 1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;First heading 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Last heading 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;h1&gt;
  &lt;a href="#css3-inrange-selector-example"&gt;
  &lt;/a&gt;
  CSS3 :in-range selector example
&lt;/h1&gt;



&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:in-range&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;





&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;min=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"15"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The border for this value will be blue&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The :in-range CSS pseudo-class matches when an element has its value attribute inside the specified range limitations for this element. It allows the page to give a feedback that the value currently defined using the element is inside the range limits&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#id-selectors"&gt;
  &lt;/a&gt;
  ID selectors
&lt;/h1&gt;

&lt;p&gt;ID selectors select DOM elements with the targeted ID. To select an element by a specific ID in CSS, the # prefix is used.&lt;br&gt;
For example, the following HTML div element…&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"exampleID"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Example&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;…can be selected by #exampleID in CSS as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#exampleID {
 width: 20px;
}
&lt;/code&gt;&lt;/pre&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: The HTML specs do not allow multiple elements with the same ID&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Source - &lt;a href="https://developersdiscussion.com"&gt;https://developersdiscussion.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/rkycom"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With all that being said, I highly recommend you keep learning!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Please feel free to connect with me on &lt;a href="https://www.linkedin.com/in/www-rajeshkumaryadav-com/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://twitter.com/rky_com"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>programming</category>
      <category>developer</category>
    </item>
    <item>
      <title>Behind the Scenes of React.</title>
      <author>Prajwal Jain</author>
      <pubDate>Wed, 26 May 2021 05:56:07 +0000</pubDate>
      <link>https://dev.to/j836/behind-the-scenes-of-react-f01</link>
      <guid>https://dev.to/j836/behind-the-scenes-of-react-f01</guid>
      <description>&lt;h1&gt;
  &lt;a href="#behind-the-scenes-of-react"&gt;
  &lt;/a&gt;
  Behind the Scenes of React
&lt;/h1&gt;

&lt;p&gt;Arent you guys curious🤔 about what does React do behind the scenes and how it does so many things for us..?&lt;/p&gt;

&lt;p&gt;Well,this blog comes out of my curiosity of how the developers at facebook came to create this wonderful thing which caused a revoltion in the World of Web.&lt;/p&gt;

&lt;p&gt;Do you know that react has its own DOM!Ya,you got it!same as that of browser has!&lt;/p&gt;

&lt;p&gt;Okay.You may think thats great!But why would someone need an Extra DOM?&lt;br&gt;
Eventually,whatever changes are going to occur are on the brwoser's DOM, right?&lt;/p&gt;

&lt;p&gt;Well,thats true..But but but...there are some crucial points we need to understand.&lt;/p&gt;

&lt;p&gt;1.Say we have 10,000 lines of code.We change 1 line of code and the browser DOM has to re render all 10,000 lines of code!&lt;br&gt;
This is expensive.&lt;br&gt;
WHoaaaaa!this is what used to happen before React and similar technologies.&lt;/p&gt;

&lt;p&gt;2.Whenever a component's state changes,code is re rendered by DOM, and browser has to repaint each and every element on the screen.This involves a lot of mathematical and other calculations.&lt;br&gt;
So our browser is doing unnecessary cycling of complete DOM whereas only a single elements' state has changed.Thus,More the items to repaint slower the app.&lt;/p&gt;

&lt;p&gt;And that's the reason why,React has Virtual DOM.&lt;br&gt;
It helps in minimizing the actual changes on browser DOM.How?&lt;/p&gt;

&lt;p&gt;Lets see.&lt;/p&gt;

&lt;p&gt;Initally,virtual DOM will be an exact copy of real DOM.&lt;/p&gt;

&lt;p&gt;In React,whenever a components' state changes,the changes are reflected in Virtual DOM.&lt;br&gt;
Thus,Virtual DOM has the updated state of the component.&lt;/p&gt;

&lt;p&gt;Now it checks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VirtualDOM&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Browsers&lt;/span&gt; &lt;span class="nx"&gt;DOM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;chill&lt;/span&gt; &lt;span class="nx"&gt;man&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;browsers&lt;/span&gt; &lt;span class="nx"&gt;DOM&lt;/span&gt; &lt;span class="nx"&gt;only&lt;/span&gt; &lt;span class="nx"&gt;where&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;changed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a high level overview of what diffing algorithm does.&lt;/p&gt;

&lt;p&gt;Thus,browsers' work has highly reduced and now it will help us loading our app faster!&lt;/p&gt;

&lt;p&gt;The process through which React updates the DOM is known as Reconciliation.&lt;br&gt;
This reconciliation has 2 phases :&lt;br&gt;
Render Phase&lt;br&gt;
Commit Phase&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#render-phase"&gt;
  &lt;/a&gt;
  Render Phase
&lt;/h2&gt;

&lt;p&gt;The Render phase takes your JSX and turns it into a javascript representation. This is nothing but the VirtualDOM.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#commit-phase"&gt;
  &lt;/a&gt;
  Commit Phase
&lt;/h2&gt;

&lt;p&gt;The commit phase is actually taking that representation and applying it to the real DOM.&lt;br&gt;
The commit phase is where React actually touches the DOM and makes changes.&lt;/p&gt;

&lt;p&gt;An Importatnt Point:&lt;br&gt;
React does not commit state changes one after the other if there are multiple state changes.&lt;br&gt;
Instead,&lt;br&gt;
React goes through its virtual DOM ,creates a list of those changes that need to be made to the actual DOM and then does it all in one single process.&lt;br&gt;
In fancy words,React does batch updates.&lt;/p&gt;

&lt;p&gt;So putting all pieces together,&lt;br&gt;
Reconciliation = Render + Diffing occurs in between + Commit.&lt;/p&gt;

&lt;p&gt;If there is no change in the state then commit is not done although render has occured.&lt;/p&gt;

&lt;p&gt;Now that you have understood reconcilitaion lets understand how diffing works and different factors that affect diffing.&lt;/p&gt;

&lt;p&gt;React works on heursitic search.In simple terms,a heuristic search is a technique which has some previous knowledge about the search.&lt;br&gt;
So the assumptions(knowledge) that the React has is:&lt;/p&gt;

&lt;p&gt;Two elements of different types will produce different trees.&lt;br&gt;
For a stable re-render key props are required on child elements.(Refer Docs)&lt;/p&gt;

&lt;p&gt;Whenever the root elements have different types,&lt;br&gt;
for eg. initialliy it was&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello React&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then we change it to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello React&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React will destroy the old tree and build the new tree from scratch. All the children will also get destroyed.&lt;br&gt;
Destroying old tree =&amp;gt; all the state associated with it is gone.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dom-elements-of-the-same-type"&gt;
  &lt;/a&gt;
  DOM Elements Of The Same Type
&lt;/h2&gt;

&lt;p&gt;When comparing two React DOM elements of the same type,react only updates the changed attributes.&lt;br&gt;
Same goes when updating style.&lt;br&gt;
For eg:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"hero"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello React&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is changed to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello React&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When only the attributes are changed,DOM nodes are not recreated =&amp;gt; state is maintained =&amp;gt;component is already on the page =&amp;gt; DOM does not need to repaint the DOM styles on the view.This is what makes React super fast!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#component-elements-of-the-same-type"&gt;
  &lt;/a&gt;
  Component Elements Of The Same Type
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Now we are on COMPONENTS of same type.Earlier it was DOM elements of same type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of reiterating what docs has written,read react docs.It has been beautifully explained there along with simple examples.&lt;/p&gt;

&lt;p&gt;Thats it from this blog!&lt;br&gt;
If you found this post useful do react to this post, which inspires me to write more. If you have any comments or corrections that could improve this post, I would be glad to receive them. Thank you for your time 👋🏼 💙.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reconciliation</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Linux Kernel vs. Memory Fragmentation (Part II)</title>
      <author>Wenbo Zhang</author>
      <pubDate>Wed, 26 May 2021 05:52:28 +0000</pubDate>
      <link>https://dev.to/ethercflow/linux-kernel-vs-memory-fragmentation-part-ii-6mg</link>
      <guid>https://dev.to/ethercflow/linux-kernel-vs-memory-fragmentation-part-ii-6mg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQeNHjgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://download.pingcap.com/images/blog/linux-memory-fragmentation-and-defragmentation.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQeNHjgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://download.pingcap.com/images/blog/linux-memory-fragmentation-and-defragmentation.png" alt="Linux kernel memory fragmentation and defragmentation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1"&gt;Linux Kernel vs. Memory Fragmentation (Part I)&lt;/a&gt;, I concluded that grouping by migration types only delays memory fragmentation, but does not fundamentally solve it. As the memory fragmentation increases and it does not have enough contiguous physical memory, performance degrades.&lt;/p&gt;

&lt;p&gt;Therefore, to mitigate the performance degradation, the Linux kernel community introduced &lt;strong&gt;memory compaction&lt;/strong&gt; to the kernel.&lt;/p&gt;

&lt;p&gt;In this post, I'll explain the principle of memory compaction, how to view the fragmentation index, and how to quantify the latency overheads caused by memory compaction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-compaction"&gt;
  &lt;/a&gt;
  Memory compaction
&lt;/h2&gt;

&lt;p&gt;Before memory compaction, the kernel used lumpy reclaim for defragmentation. However, this feature was removed from v3.10 (currently the most widely used kernel version). If you'd like to learn more, you can read about lumpy reclaim in the articles I listed in &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1#a-brief-history-of-defragmentation"&gt;A brief history of defragmentation&lt;/a&gt;. For now, let me bring your mind to memory compaction.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#algorithm-introduction"&gt;
  &lt;/a&gt;
  Algorithm introduction
&lt;/h3&gt;

&lt;p&gt;The article &lt;a href="https://lwn.net/Articles/368869/"&gt;Memory compaction&lt;/a&gt; on LWN.net explains the algorithmic idea of memory compaction in detail. You can take the following fragmented zone as a simple example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G_fB8HNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/a-small-fragmented-memory-zone.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_fB8HNC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/a-small-fragmented-memory-zone.png" alt="A small fragmented memory zone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A small fragmented memory zone - LWN.net &lt;/p&gt;

&lt;p&gt;The white boxes are free pages, while those in red are allocated pages.&lt;/p&gt;

&lt;p&gt;Memory compaction for this zone breaks down into three major steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Scan this zone from left to right for red pages of the MIGRATE_MOVABLE migration type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjxHISN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/linux-kernel-movable-pages.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjxHISN_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/linux-kernel-movable-pages.png" alt="Search for movable pages"&gt;&lt;/a&gt;&lt;/p&gt;

 Search for movable pages &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the same time, scan this zone from right to left for free pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dPtWrv1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/linux-kernel-free-pages.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPtWrv1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/linux-kernel-free-pages.png" alt="Search for free pages"&gt;&lt;/a&gt;&lt;/p&gt;

 Search for free pages &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shift movable pages at the bottom to free pages at the top, thus creating a contiguous chunk of free space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3Vv8O9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/a-small-memory-zone-after-memory-compaction.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3Vv8O9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/a-small-memory-zone-after-memory-compaction.png" alt="The small memory zone after memory compaction"&gt;&lt;/a&gt;&lt;/p&gt;

 The memory zone after memory compaction &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This principle seems relatively simple, and the kernel also provides &lt;code&gt;/proc/sys/vm/compact_memory&lt;/code&gt; as the interface for manually triggering memory compaction.&lt;/p&gt;

&lt;p&gt;However, as mentioned in &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1"&gt;Part I&lt;/a&gt; and &lt;a href="https://lwn.net/Articles/591998/"&gt;Memory compaction issues&lt;/a&gt;, memory compaction is not very efficient in practice—at least for the most commonly-used kernel, v3.10—no matter whether it is triggered automatically or manually. Due to the high overhead it causes, it becomes a performance bottleneck instead.&lt;/p&gt;

&lt;p&gt;The open source community did not abandon this feature but continued to optimize it in subsequent versions. For example, the community &lt;a href="https://github.com/torvalds/linux/commit/698b1b3064"&gt;introduced kcompactd&lt;/a&gt; to the kernel in v4.6 and &lt;a href="https://lwn.net/Articles/686801/"&gt;made direct compaction more deterministic&lt;/a&gt; in v4.8.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-memory-compaction-is-performed"&gt;
  &lt;/a&gt;
  When memory compaction is performed
&lt;/h3&gt;

&lt;p&gt;In kernel v3.10, memory compaction is performed under any of the following situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;kswapd&lt;/code&gt; kernel thread is called to balance zones after a failed high-order allocation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;khugepaged&lt;/code&gt; kernel thread is called to collapse a huge page.&lt;/li&gt;
&lt;li&gt;Memory compaction is manually triggered via the &lt;code&gt;/proc&lt;/code&gt; interface.&lt;/li&gt;
&lt;li&gt;The system performs direct reclaim to meet higher-order memory requirements, including handling Transparent Huge Page (THP) page fault exceptions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="https://pingcap.com/blog/why-we-disable-linux-thp-feature-for-databases"&gt;Why We Disable Linux's THP Feature for Databases&lt;/a&gt;, I described how THP slows down performance and recommended disabling this feature. I will put it aside in this article and mainly focus on the memory allocation path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QeLICvVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/memory-allocation-in-the-slow-path.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QeLICvVl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/memory-allocation-in-the-slow-path.png" alt="Memory allocation in the slow path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Memory allocation in the slow path &lt;/p&gt;

&lt;p&gt;When the kernel allocates pages, if there are no available pages in the free lists of the buddy system, the following occurs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The kernel processes this request in the slow path and tries to allocate pages using the low watermark as the threshold.&lt;/li&gt;
&lt;li&gt;If the memory allocation fails, which indicates that the memory may be slightly insufficient, the page allocator wakes up the &lt;code&gt;kswapd&lt;/code&gt; thread to asynchronously reclaim pages and attempts to allocate pages again, also using the low watermark as the threshold.&lt;/li&gt;
&lt;li&gt;If the allocation fails again, it means that the memory shortage is severe. In this case, the kernel runs asynchronous memory compaction first.&lt;/li&gt;
&lt;li&gt;If the allocation still does not succeed after the async memory compaction, the kernel directly reclaims memory.&lt;/li&gt;
&lt;li&gt;After the direct memory reclaim, if the kernel doesn't reclaim enough pages to meet the demand, it performs direct memory compaction. If it doesn't reclaim a single page, the OOM Killer is called to deallocate memory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The above steps are only a simplified description of the actual workflow. In real practice, it is more complicated and will be different depending on the requested memory order and allocation flags.&lt;/p&gt;

&lt;p&gt;As for direct memory reclaim, it is not only performed by the kernel when the memory is severely insufficient, but also triggered due to memory fragmentation in practical scenarios. In a certain period, these two situations may occur simultaneously.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-analyze-memory-compaction"&gt;
  &lt;/a&gt;
  How to analyze memory compaction
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#quantify-the-performance-latency"&gt;
  &lt;/a&gt;
  Quantify the performance latency
&lt;/h4&gt;

&lt;p&gt;As mentioned in the previous section, the kernel may perform memory reclaim or memory compaction when allocating memory. To make it easier to quantify the latency caused by direct memory reclaim and memory compaction for each participating thread, I committed two tools, &lt;a href="https://github.com/iovisor/bcc/blob/master/tools/drsnoop_example.txt"&gt;drsnoop&lt;/a&gt; and &lt;a href="https://github.com/iovisor/bcc/blob/master/tools/compactsnoop_example.txt"&gt;compactsnoop&lt;/a&gt;, to the &lt;a href="https://github.com/iovisor/bcc"&gt;BCC&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Both tools are based on kernel events and come with detailed documentation, but there is one thing I want to note: to reduce the cost of introducing Berkeley Packet Filters (BPF), these two tools capture the latency of each corresponding event. Therefore, you may see from the output that each memory request corresponds to multiple latency results.&lt;/p&gt;

&lt;p&gt;The reason for the many-to-one relationship is that, for older kernels like v3.10, it is uncertain how many times the kernel will try to allocate during a memory allocation process in the slow path. The uncertainty also makes OOM Killer start to work either too early or too late, resulting in most tasks on the server being hung up for a long time.&lt;/p&gt;

&lt;p&gt;After the kernel merged the patch &lt;a href="https://github.com/torvalds/linux/commit/c73322d0"&gt;mm: fixed 100% CPU kswapd busyloop on unreclaimable nodes&lt;/a&gt; in v4.12, the maximum number of direct memory reclaims is limited to 16. Let's assume that the average latency of a direct memory reclaim is 10 ms. (Shrinking active or inactive LRU chain tables is time consuming for today's servers with several hundred gigabytes of RAM. There is also an additional delay if the server needs to wait for a dirty page to be written back.)&lt;/p&gt;

&lt;p&gt;If a thread asks the page allocator for pages and gets enough memory after only one direct memory reclaim, the latency of this allocation increases by 10 ms. If the kernel tries 16 times before reclaiming enough memory spaces, then the increased latency of this allocation is 160 ms instead of 10 ms, which may severely degrade performance.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#view-the-fragmentation-index"&gt;
  &lt;/a&gt;
  View the fragmentation index
&lt;/h4&gt;

&lt;p&gt;Let's come back to memory compaction. There are four main steps for the core logic of memory compaction:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Determine whether a memory zone is suitable for memory compaction.&lt;/li&gt;
&lt;li&gt;Set the starting page frame number for scanning.&lt;/li&gt;
&lt;li&gt;Isolate pages of the MIGRATE_MOVABLE type.&lt;/li&gt;
&lt;li&gt;Migrate pages of the MIGRATE_MOVABLE type to the top of the zone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the zone still needs compaction after one migration, the kernel loops the above process for three to four times until the compaction is finished. This operation consumes a lot of CPU resources; therefore, you can often see from the monitoring that the system CPU usage is full.&lt;/p&gt;

&lt;p&gt;Well then, how does the kernel determine whether a zone is suitable for memory compaction?&lt;/p&gt;

&lt;p&gt;If you use the &lt;code&gt;/proc/sys/vm/compact_memory&lt;/code&gt; interface to forcibly require memory compaction for a zone, there is no need for the kernel to determine it.&lt;/p&gt;

&lt;p&gt;If memory compaction is automatically triggered, the kernel calculates the fragmentation index of the requested order to determine whether the zone has enough memory left for compaction. The closer the index is to 0, the more the memory allocation is likely to fail due to insufficient memory. This means memory reclaim is more suitable than memory compaction at this time. The closer the index is to 1,000, the more the allocation is likely to fail due to excessive external fragmentation. Therefore, in this situation, it is appropriate to do memory reclaim, not memory compaction.&lt;/p&gt;

&lt;p&gt;Whether the kernel chooses to perform memory compaction or memory reclaim is determined by the external fragmentation threshold. You can view this threshold through the &lt;code&gt;/proc/sys/vm/extfrag_threshold&lt;/code&gt; interface.&lt;/p&gt;

&lt;p&gt;You can execute &lt;code&gt;cat /sys/kernel/debug/extfrag/extfrag_index&lt;/code&gt; to directly view the fragmentation index through &lt;code&gt;/sys/kernel/debug/extfrag/extfrag_index&lt;/code&gt;. Note that the following screen shot results are divided by 1,000:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_Hfd7eY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/fragment-index-command.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_Hfd7eY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/media/fragment-index-command.png" alt="Linux  raw `/sys/kernel/debug/extfrag/extfrag_index` endraw  command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and cons
&lt;/h4&gt;

&lt;p&gt;Both the monitoring interfaces based on the &lt;code&gt;/proc&lt;/code&gt; file system and the tools based on kernel events (&lt;a href="https://github.com/iovisor/bcc/blob/master/tools/drsnoop_example.txt"&gt;drsnoop&lt;/a&gt; and &lt;a href="https://github.com/iovisor/bcc/blob/master/tools/compactsnoop_example.txt"&gt;compactsnoop&lt;/a&gt;) can be used to analyze memory compaction, but with different pros and cons.&lt;/p&gt;

&lt;p&gt;The monitoring interfaces are simple to use, but they cannot perform quantitative analysis on the latency results, and the sampling period is too long. The tools based on kernel events can solve these problems, but you need a certain understanding of the working principle of the kernel-related subsystems to use these tools, and there are certain requirements for the client's kernel version.&lt;/p&gt;

&lt;p&gt;Therefore, the monitoring interfaces and the kernel-events-based tools actually complement each other. Using them together can help you to analyze memory compaction thoroughly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-mitigate-memory-fragmentation"&gt;
  &lt;/a&gt;
  How to mitigate memory fragmentation
&lt;/h3&gt;

&lt;p&gt;The kernel is designed to take care of slow backend devices. For example, it implements the second chance method and the refault distance based on the LRU algorithm and does not support limiting the percentage of &lt;code&gt;page cache&lt;/code&gt;. Some companies used to customize their own kernel to limit the &lt;code&gt;page cache&lt;/code&gt; and tried to submit it to the upstream kernel community, but the community did not accept it. I think it may be because this feature causes problems such as working set refaults.&lt;/p&gt;

&lt;p&gt;Therefore, to reduce the frequency of direct memory reclaim and mitigate fragmentation issues, it is a good choice to increase &lt;code&gt;vm.min_free_kbytes&lt;/code&gt; (up to 5% of the total memory). This indirectly limits the percentage of &lt;code&gt;page cache&lt;/code&gt; for scenarios with a lot of I/O operations, and the machine has more than 100 GB of memory.&lt;/p&gt;

&lt;p&gt;Although setting &lt;code&gt;vm.min_free_kbytes&lt;/code&gt; to a bigger value wastes some memory, it is negligible. For example, if a server has 256 GB memory and you set &lt;code&gt;vm.min_free_kbytes&lt;/code&gt; to &lt;code&gt;"4G"&lt;/code&gt;, it only takes 1.5% of the total memory space.&lt;/p&gt;

&lt;p&gt;The community apparently noticed the waste of memory as well, so the kernel merged the patch &lt;a href="http://lkml.iu.edu/hypermail/linux/kernel/1602.3/02009.html"&gt;mm: scale kswapd watermarks in proportion to memory&lt;/a&gt; in v4.6 to optimize it.&lt;/p&gt;

&lt;p&gt;Another solution is to execute &lt;code&gt;drop cache&lt;/code&gt; at the right time, but it may cause more jitter to the application performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-1"&gt;Part I&lt;/a&gt; of this post series, I briefly explained why the external fragmentation affects performance and introduced the efforts the community has made over the years in defragmentation. Here in Part II, I've focused on the defragmentation principles in the kernel v3.10 and how to observe memory fragmentation quantitatively and qualitatively.&lt;/p&gt;

&lt;p&gt;I hope this post series will be helpful for you! If you have any other thoughts about Linux memory management, welcome to join the &lt;a href="https://slack.tidb.io/invite?team=tidb-community&amp;amp;channel=everyone&amp;amp;ref=pingcap-blog"&gt;TiDB Community Slack&lt;/a&gt; workspace to share and discuss with us.&lt;/p&gt;

&lt;p&gt;Originally pulished at &lt;a href="https://pingcap.com/blog/linux-kernel-vs-memory-fragmentation-2"&gt;Linux Kernel vs. Memory Fragmentation (Part II)&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Live like a monk - the key to success</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 26 May 2021 05:28:12 +0000</pubDate>
      <link>https://dev.to/sandordargo/live-like-a-monk-the-key-to-success-49ag</link>
      <guid>https://dev.to/sandordargo/live-like-a-monk-the-key-to-success-49ag</guid>
      <description>&lt;p&gt;Don't get me wrong, I'm not particularly successful. If I look around I see prettier, richer, more popular people. People who rose more in the company ranks, people who write better code, who can contribute more, who make more money either from their main job or on the side, people who write better posts and who simply know much more than me.&lt;/p&gt;

&lt;p&gt;And you know what? I'm fine with that.&lt;/p&gt;

&lt;p&gt;It doesn't matter.&lt;/p&gt;

&lt;p&gt;What matters to me is that I'm growing and that I'm happy with the progress I made during the last years. Each day if I look back to where I was 6 months ago, I see some gain. I could also see gaps, I could think about how many things I messed up, how many things I could have done better, but that would lock me up in negativity. Instead, I'm happy for my growth.&lt;/p&gt;

&lt;p&gt;The key element for this growth, at least that's how I see it is not learning about my craft every day - tough it's definitely important -, it's not writing and working on my posts and books each day, but what helps most is that I read some uplifting, inspirational, motivational content on a daily basis. (Which pushes me towards the former activities.)&lt;/p&gt;

&lt;p&gt;A few years ago I started to seriously limit and filter my content consumption. I read to help me reach better mental states. Instead of reading about people killing others or making their and others' lives more miserable, I read about how to grow. I read about how to help others.&lt;/p&gt;

&lt;p&gt;One of my key sources is &lt;a href="https://benjaminhardy.com/articles/"&gt;Benjamin Hardy&lt;/a&gt;'s articles and books. I've been watching &lt;a href="https://www.youtube.com/channel/UC07WXGmXVbNrv3VMOp5DvDw"&gt;one of his videos&lt;/a&gt; recently where shared a quote from &lt;a href="https://twitter.com/coachgoldsmith"&gt;Marshall Goldsmith&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"If you do not create and control your environment, your environment creates and controls you."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It really clicked with me. This is something I've been pondering about since a while. In fact, since I went back to my hometown for three weeks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brf4vBkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wnr66lo4nmzmqeezf95.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brf4vBkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wnr66lo4nmzmqeezf95.jpg" alt="Photo of Budapest by amir hossein bakhtiari from Pexels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I love my hometown, Budapest, and I love my friends there, I love my family. But I also noticed a couple of things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even tough I managed to carve out some time for myself, it felt unproductive&lt;/li&gt;
&lt;li&gt;I saw how people limit themselves through unsolicited conflicts&lt;/li&gt;
&lt;li&gt;I saw how people are controlled by their environments. Including me.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tv-kills-both-family-time-and-productivity"&gt;
  &lt;/a&gt;
  TV kills both family time and productivity
&lt;/h2&gt;

&lt;p&gt;According to different studies, an average US adult spends more than 4 hours a day in front of the TV, I have no data on European countries - I didn't really check -, but I have no strong reasons to believe that it's drastically different.&lt;/p&gt;

&lt;p&gt;Though it seems that the younger you are, the less you spend watching the telly, it's not for a good reason. Scrolling social media or watching netflix on your mobile is not better than watching the TV.&lt;/p&gt;

&lt;p&gt;We have one in our living room, but we barely use it. We turn it on at New Years Eve a bit before midnight (since our kids were born and they are still small we spend the night at home), during some weekends to make a movie afternoon for the kids and each time our president declares war on COVID and asks for the support of his "compatriots". But even that has become boring. Sorry, Monsieur Macron, this is not your fault. It's just boring.&lt;/p&gt;

&lt;p&gt;At my father's place, it's different. The TV is on in the morning, in the afternoon and in the evening as well. He often falls asleep while the TV is still turned on.&lt;/p&gt;

&lt;p&gt;In the mornings, it didn't bother me. As most people in the house were sleeping anyways, I hid in a small room and kept working on my articles and presentations.&lt;/p&gt;

&lt;p&gt;In the evening it was different. I joined my father and brother in the living room where they were either watching some football or the nth replay of some stand-up comedy. &lt;/p&gt;

&lt;p&gt;I don't like to talk for the sake of talking. You should ask my wife about that... But I like to be close to my loved ones. Even if it means just being in the same room and reading, working on stuff.&lt;/p&gt;

&lt;p&gt;I realized that having the TV on, even if I did't pay attention was very distracting.&lt;/p&gt;

&lt;p&gt;I was the guest, and obviously I wouldn't ask them to turn it off when they were actually watching it so that I can read or work, but I was wondering how much useful time is flushed down the toilet like that. Just by watching something not even interesting &lt;a href="https://www.youtube.com/watch?v=1g2ntIN7JuY"&gt;while others are working towards their dreams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I was left alone with my brother, we often turned it off to talk. But when we were talking with the TV on in the background, I saw that it was difficult to pay full attention. That freaking box is killing both dreams and social times. We should throw our TVs out... Or at least it should not be the center of our living rooms and our lives...&lt;/p&gt;

&lt;p&gt;But there is something worse that that.&lt;/p&gt;

&lt;p&gt;When you have a TV in the kitchen or in the dining room, or when they share one space with the living room and you turn on the news while eating. It's the worst. I was living like that since I was 14 until I left home.&lt;/p&gt;

&lt;p&gt;I tell you what it does. Instead of discussing what matters in the life of a family, such as what happened during the day, what do you plan for next day, what you learnt, what you experienced, what was going on at school, at work, you watch the news.&lt;/p&gt;

&lt;p&gt;News are depressing. There are natural disasters. Accidents. People die. Sometimes you don't even understand how can be anyone still alive. But that's not the worse. There are terrorist attacks that obviously creates even more hate. It's still not the worse. There are rich people enjoying their money. And boy, people are envious. There are politicians who get richer in mysterious ways. These are the worst because you can complain about "those thieves". You can blame them because of your lack of success. You can blame the rich, the politicians because of your miserable life.&lt;/p&gt;

&lt;p&gt;Believe me, those who watch the news during their meals, they will blame, they will complain, they will make their life a bit more sad. They will smuggle a bit of extra frustration, a bit of extra misery and a big bunch of victim mindset into the everydays.&lt;/p&gt;

&lt;p&gt;That's the biggest problem with television.&lt;/p&gt;

&lt;p&gt;So if you want a better life, get rid of the TV, or at least don't watch the news, and please, please, at least not during meals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#active-social-life-collects-taxes-even-the-next-day"&gt;
  &lt;/a&gt;
  Active social life collects taxes, even the next day
&lt;/h2&gt;

&lt;p&gt;Apart from the TV, an extended social life also made it more difficult to stay productive. I have way more friends in Hungary than in France. It makes sense. I spent 28 years in Hungary, 8 in France. And those years in Hungary were my youth, they were the actively socializing years, plus I was fully involved in a few organizations where I made many friends. I already came to France married and soon we had children.&lt;/p&gt;

&lt;p&gt;My social groups are very different in the two countries.&lt;/p&gt;

&lt;p&gt;I barely go out in the evenings in France (regardless of the current curfew), but in Hungary there are calls almost every day, I have to turn down so many.&lt;/p&gt;

&lt;p&gt;I know it would be different if I were constantly at home. But I see the lives of my friends, I see how they live, how frequently they go out, etc. I'd probably step out at least twice a week and the weekends would be also different then here.&lt;/p&gt;

&lt;p&gt;It means, that I'd be do something very different during those evenings and probably it'd be very difficult to wake up so early in the next morning.&lt;/p&gt;

&lt;p&gt;When I was thinking about all this, I realized that I almost live like a monk.&lt;/p&gt;

&lt;p&gt;I live far away from most of my friends, I seriously limit my media intakes, I spend most morning and evenings in silence, reading or working on my articles, books, etc.&lt;/p&gt;

&lt;p&gt;It happened a few times lately that my wife asked if everything was fine because I looked strange. I said, oh yes, I was just writing in my head.&lt;/p&gt;

&lt;p&gt;Do I enjoy it? Yes.&lt;/p&gt;

&lt;p&gt;Living an active social life is fun, but it requires some sacrifices. You sacrifice a lot of time. Sure, you'll have fun, that's good, but you'll have less time to achieve your goals - unless it's having fun. Often, you don't only sacrifice the time you spend with your friends and acquaintances. And I don't mean the traveling, but you might be more exhausted the next day. Oh, maybe I'm just not 21 anymore when I could directly go to university after partying all night and get some sleep between two classes. Sure, life changed, I changed.&lt;/p&gt;

&lt;p&gt;I realized the importance of what successful people write about friendships. You need to pay attention who you spend your time with. You need to say no sometimes and you need to spend less time with people if you feel that your roads have parted in different ways. You don't stay there out of comfort and (self-)pity. You don't stay there when your only common topic is reheat the memories from 15 years ago.&lt;/p&gt;

&lt;p&gt;Your personality is not permanent. It's perfectly fine that you want different things than before. But most people around you, including your family, friends, will not want you to change. It's easier to spend time with someone they already knew. They also don't want to be jealous, they don't want to be reminded that they can also change themselves. That there are different ways of living your life. Beware, I don't say better, but different. After all, different is not always better...&lt;/p&gt;

&lt;p&gt;I needed lots of time and great distance to start to understand this and I'm still far from a complete understanding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-conclusion"&gt;
  &lt;/a&gt;
  A conclusion?
&lt;/h2&gt;

&lt;p&gt;Is there any? Anyone should draw his or her own, but...&lt;/p&gt;

&lt;p&gt;The TV is bad if you turn it on (too much) and especially if you mix it with family time! Don't do that if you want a happy and/or successful life!&lt;/p&gt;

&lt;p&gt;The question of an extended social life is more difficult. Having friends is great, but it's better to have a few great ones than several shallows. As you grow up, you have a family, you have new goals, you need time and you start valuing the real relationships.&lt;/p&gt;

&lt;p&gt;You have to control your environment, you have to actively shape it so that it helps you to achieve your goals. This means both a physical environment (hopefully not) including a TV and both a social one.&lt;/p&gt;

&lt;p&gt;It can sound harsh, but you also have to actively manage your circles, who you spend time with. It cannot be based on rote, but it must be the result of conscious decisions.&lt;/p&gt;

&lt;p&gt;If you do this, if you limit and filter your media and social intakes, you might feel like you live like a monk. At the same time, you'll also feel your soul cleaner and calmer. You'll have the necessary time and peace to work towards your goals.&lt;/p&gt;

&lt;p&gt;What's your take on this?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>lifestyle</category>
    </item>
    <item>
      <title>The LANd of Computer Networking</title>
      <author>thesystemsprogrammer</author>
      <pubDate>Wed, 26 May 2021 04:40:47 +0000</pubDate>
      <link>https://dev.to/thesystemsprogrammer/the-land-of-computer-networking-57n5</link>
      <guid>https://dev.to/thesystemsprogrammer/the-land-of-computer-networking-57n5</guid>
      <description>&lt;p&gt;To understand how your laptop at home talks to Google’s servers in a galaxy far far away, you first need to understand how your laptop at home (or in a data center) talks to another computer located in the same physical location. To do that, all the computers must be connected in some way so that they can transfer signals to each other. Let’s assume that we’re only interested in wired connections at the moment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-land"&gt;
  &lt;/a&gt;
  The LANd
&lt;/h2&gt;

&lt;p&gt;One way to connect computers to each other is give all computers a direct connection to each other. Let’s say we have 3 computers, computer A would have 2 ports so that it can talk to computers B and C.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-RxvgFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a98827d932b6ec70ab339f_3pHZOmNsbsfbqBpfN2Eby7aRMwzKSx_fmfdujqsyadpCl1JNm0fETsBSDVnTKf7jXezjry1uqM3WiYopiGNMQandM58e3s_ts0XiGKsbhKaI1pdrq1vNOwZbkbYlmmKBNqV2-DEq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-RxvgFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a98827d932b6ec70ab339f_3pHZOmNsbsfbqBpfN2Eby7aRMwzKSx_fmfdujqsyadpCl1JNm0fETsBSDVnTKf7jXezjry1uqM3WiYopiGNMQandM58e3s_ts0XiGKsbhKaI1pdrq1vNOwZbkbYlmmKBNqV2-DEq.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doesn’t seem so bad, right? Well, let’s now think about a network with 100 computers. Each computer would need 99 ports. In total, that’s almost 10,000 ports for this network! Clearly, this model would only work at a small scale.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myqZElRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9883c824b7d10ab5539b0_nP0xGGMJ_0SDY3P0i3cEN30lfbUhJcyqUHd4Co4NCJrlCTCegPusAZWc5b1PXZVT9Kvdpywt2tFk7jmzP_14MRnWe1XfB2H73ZppeR_oGxrrvyo_5tKLzzXIRxUEjzykXxANJwnd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myqZElRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9883c824b7d10ab5539b0_nP0xGGMJ_0SDY3P0i3cEN30lfbUhJcyqUHd4Co4NCJrlCTCegPusAZWc5b1PXZVT9Kvdpywt2tFk7jmzP_14MRnWe1XfB2H73ZppeR_oGxrrvyo_5tKLzzXIRxUEjzykXxANJwnd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another way to handle this is to have a centralized hub. All data sent by a computer is received by the hub. The hub then forwards all data to all the other computers connected to the hub. The intended computer receives the data and all other computers drop the data. Now how many connections do we need? For 100 computers on this network, we’d only need 100 connections! Each computer just needs to be wired to the hub and it will be able to communicate to any other computer on the network. This is known as the “star” network topology, when all computers in a network are connected to one central hub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E12aYSUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9884b68784a4e461d155b_-GAuSr3lsy8htsJB2C7vkHQgSalXY5qySHKOVi1-qPwgn0gTx96DFDxE3qX1ZYtxaPycftZlDiFC30Z892esj_DrDFx8sCThjkcgjMX1f5dbZOE55gbHlCdc-UHFCPa3IY5PASVp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E12aYSUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9884b68784a4e461d155b_-GAuSr3lsy8htsJB2C7vkHQgSalXY5qySHKOVi1-qPwgn0gTx96DFDxE3qX1ZYtxaPycftZlDiFC30Z892esj_DrDFx8sCThjkcgjMX1f5dbZOE55gbHlCdc-UHFCPa3IY5PASVp.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One downside of this approach, however, is each computer would be receiving data that is not intended for it. The hub doesn’t know anything about where its incoming data should be routed too, it only knows to forward all data it receives to all other computers on the network. This not only may be a security issue, but it also wastes bandwidth. We could be transferring data from computer C to D while computer A is trying to talk to computer B! The problem gets even worse as more computers are connected to the hub. For every additional computer connected to the hub, every sent message on the network needs to be sent to one additional computer.&lt;/p&gt;

&lt;p&gt;How can we solve this problem? Let’s break down our 100 computer hub network into two 50 computer hub networks and connect the 50 computer hub networks to each other using a bridge. Let’s call the first 50 computer hub network Network 1 and the second 50 computer hub network Network 2. The goal of this is to have a mechanism for allowing all computers on the larger 100 computer network to talk to each other, but messages not intended for Network 2 from Network 1, don’t need to be broadcasted to Network 2 computers and vice-versa. The hubs on Network 1 and Network 2 are now going to be connected to each other using this bridge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6FN6BGkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9885c469300bd77844f59_QAy53jgXb-q-ENNk31fWwWt8qvI4PjPGoJK9BaE6oIhGNlA8kaAKrg3HDu50fuSRt3EW5mPgoi9j-DbUOP5LhQDUFgFc4C7xurs0DYphsHWnkrocQx4qS-VA8375ugDrIQi3Pz86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6FN6BGkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9885c469300bd77844f59_QAy53jgXb-q-ENNk31fWwWt8qvI4PjPGoJK9BaE6oIhGNlA8kaAKrg3HDu50fuSRt3EW5mPgoi9j-DbUOP5LhQDUFgFc4C7xurs0DYphsHWnkrocQx4qS-VA8375ugDrIQi3Pz86.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bridge is slightly smarter than a hub. It doesn’t just blindly forward packets to computers that aren’t the destination. Instead, it has an idea of which computers are in Network 1 and which computers are in Network 2. To do this, the bridge needs to know which computers are on Network 1 and which computers are on Network 2; it needs a forwarding table. The main way this is done is through some added support by the computers on the network and a learning mechanism. To make this possible, each computer on the network will be assigned an address. In practice, the addresses of these computers are known as MAC addresses. When a computer wants to send a message, it will include the address of the sender and the address of the receiver in the message. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TyPy7oMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9885ca468fe6d2b00e30c_jhLreuLBpO9wFXRM_W5cf9nWSTm1ygJBAYKilJ6uboo7TgKZHQnrCh5SRqciYKefA8nNrBtP7zYRb2eEkocL1CP_uc0ToWYBIVURVuQZZwVlLP5b71-Xt58M3YhkAkJ42j3DKqSO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TyPy7oMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9885ca468fe6d2b00e30c_jhLreuLBpO9wFXRM_W5cf9nWSTm1ygJBAYKilJ6uboo7TgKZHQnrCh5SRqciYKefA8nNrBtP7zYRb2eEkocL1CP_uc0ToWYBIVURVuQZZwVlLP5b71-Xt58M3YhkAkJ42j3DKqSO.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially, say computer A on Network 1 wants to send data to computer B on Network 2. Computer A will send the data to the hub which will broadcast the message to all computers on Network 1. Additionally, the hub will forward the message to the bridge. The bridge will then note that computer A sent it information on port 1 which is associated with Network 1. The bridge needs to know whether it should drop or forward the message on to Network 2. Because the bridge doesn’t yet have any information of which network computer B is on, it forwards the information to the hub on Network 2 even though computer B may not be in Network 2. In turn, the hub on Network 2 broadcasts the message to all computers on the network and computer B is one of those computers that will receive the message. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xREGh1r9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9885c2c2e016e2ba16eeb_5snMAFZxMuAN0c9UqJI3hOAD3MznQi8oQNa_YowJlI8k-r4hggO8QkW2xJJ8kSr1myhQGUMEG_qLw_ZYfrISwUGjup19Ls61wFadw3d_Yy_bw-YIIIPHVY3q8yyqDD7oEv8az7KJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xREGh1r9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a9885c2c2e016e2ba16eeb_5snMAFZxMuAN0c9UqJI3hOAD3MznQi8oQNa_YowJlI8k-r4hggO8QkW2xJJ8kSr1myhQGUMEG_qLw_ZYfrISwUGjup19Ls61wFadw3d_Yy_bw-YIIIPHVY3q8yyqDD7oEv8az7KJ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, say computer C, a computer on Network 1 wants to send a message to computer A (which is also on Network 1). The hub in Network 1 receives the message and sends it to all computers on Network 1. Additionally, it sends the message to the bridge. The bridge recognizes that the message is intended for computer A. Previously, it had noted down that computer A had sent data from Network 1, so the bridge knows it can safely drop (instead of forward) the message to Network 2. &lt;/p&gt;

&lt;p&gt;Why is this more efficient? Now, after a computer in Network 1 has sent its first message, any message that it is intended to receive after that from another computer in Network 1 does not need to be broadcasted to Network 2, saving bandwidth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#switching-it-up"&gt;
  &lt;/a&gt;
  Switching it Up
&lt;/h2&gt;

&lt;p&gt;Now, I hate to switch things up on you, but everything we just discussed, that’s old tech! But, it’s important to understand that so you can appreciate what is used in modern networking. Introducing the packet switch! &lt;/p&gt;

&lt;p&gt;The packet switch has mostly made the physical usage of bridges and hubs obsolete although the concepts that they were built upon are still used today. One thing you may have wondered is, why don’t we use the intelligence of a bridge knowing to forward messages or drop them in a hub. A packet switch has that functionality! It acts as a hub but is able to make smarter routing decisions which further reduces bandwidth consumption. When computer Z on Network 3, which is connected by a packet switch, wants to send a message to computer Y on Network 3, the packet switch forwards the message directly to computer Y instead of sending it to Computer X as well. It can do this because it has routing information and learns it in a similar way that bridges learn routing information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rzCc7TtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a98b2dcb6bcd6526d3ea5f_PiJp-P8lNL3r7_t77-lGeTTHtMsH-L5JC1es1Nx9tGko4OjwIRR0YNLH9ou2o5hCiPZiSDmEBlwMqhBigR9rO45RuQ1YO3p-2mwhK-1pBzQhutU3sIsuQmkzhbFd7eyeuPT0ii_0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzCc7TtL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uploads-ssl.webflow.com/607faaa72189681ba155d94f/60a98b2dcb6bcd6526d3ea5f_PiJp-P8lNL3r7_t77-lGeTTHtMsH-L5JC1es1Nx9tGko4OjwIRR0YNLH9ou2o5hCiPZiSDmEBlwMqhBigR9rO45RuQ1YO3p-2mwhK-1pBzQhutU3sIsuQmkzhbFd7eyeuPT0ii_0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Packet switches take advantage of dedicated hardware that make the routing and forwarding calculation extremely fast. Because of this, they are generally more expensive than hubs and bridges. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that we know how computers in the same physical location can talk to each other, let’s explore how computers in different physical locations talk to each other. This is what the next post will be about.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>systems</category>
      <category>firstyearincode</category>
      <category>programming</category>
    </item>
    <item>
      <title>Deploy a Simple Website Using Github Pages</title>
      <author>Pranav Viswanathan</author>
      <pubDate>Wed, 26 May 2021 04:21:05 +0000</pubDate>
      <link>https://dev.to/pranavviswanathan/deploy-a-simple-website-using-github-pages-1jl</link>
      <guid>https://dev.to/pranavviswanathan/deploy-a-simple-website-using-github-pages-1jl</guid>
      <description>&lt;p&gt;&lt;strong&gt;So what is github pages?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Github pages is a feature in github that allows you to deploy static webpages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do I do it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Its actually really simple, lemme walk you through it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 1:&lt;/em&gt;&lt;br&gt;
Make a github repository.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 2:&lt;/em&gt;&lt;br&gt;
Upload a simple .html page with the name as index.html. It is important to note that the name of the web page &lt;strong&gt;MUST&lt;/strong&gt; be index.html&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 3:&lt;/em&gt;&lt;br&gt;
Go to &lt;br&gt;
Repository setting -&amp;gt; Pages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 4:&lt;/em&gt;&lt;br&gt;
Set the branch to main and save. You will see a " is ready to be published."&lt;/p&gt;

&lt;p&gt;In a few minutes, your website will be ready to view!&lt;br&gt;
And that's it, 4 simple steps and then you have you first webste deployed using gitub pages.&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Enabling Quake Mode on Windows Terminal</title>
      <author>Michael Crump</author>
      <pubDate>Wed, 26 May 2021 03:59:10 +0000</pubDate>
      <link>https://dev.to/mbcrump/enabling-quake-mode-on-windows-terminal-161i</link>
      <guid>https://dev.to/mbcrump/enabling-quake-mode-on-windows-terminal-161i</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;I just got my hands on the new Windows Terminal preview and wanted to share how to enable "Quake Mode" which allows you to open a new terminal instance from anywhere in Windows by pressing the Win + ` key. &lt;/p&gt;

&lt;p&gt;You must be using the latest version of Windows Terminal Preview.  &lt;/p&gt;

&lt;p&gt;Just place this code in your "actions" section: &lt;/p&gt;

&lt;p&gt;{ "command": { "action": "globalSummon", "name": "_quake", "dropdownDuration": 200, "toggleVisibility": true, "monitor": "any", "desktop": "toCurrent" }, "keys": "win+`" },&lt;/p&gt;

&lt;p&gt;Read the &lt;a href="https://docs.microsoft.com/en-us/windows/terminal/customize-settings/actions#global-commands"&gt;docs&lt;/a&gt; for more information on the Global Commands that you can use.&lt;/p&gt;

&lt;p&gt;Or you can watch the video below and hopefully you'll find it helpful! &lt;/p&gt;

&lt;p&gt;Video (6 mins)&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vVy8XnDnslU"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Feel free to checkout my &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch streams&lt;/a&gt; as we learn about security and app development or you can watch the condensed version of all of my streams by subscribing to my &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Stay connected with me on social platforms for daily software development news.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://twitter.com/intent/follow?screen_name=mbcrump"&gt;Twitter&lt;/a&gt; | &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch&lt;/a&gt; | &lt;a href="https://instagram.com/mbcrump"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt; | &lt;a href="https://github.com/mbcrump"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.michaelcrump.net"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>productivity</category>
      <category>terminal</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cheatsheet for the Regex Cheatsheet, Part VIII: Pattern Modifiers</title>
      <author>Analogy | Absence | Example</author>
      <pubDate>Wed, 26 May 2021 03:39:42 +0000</pubDate>
      <link>https://dev.to/mathlete/cheatsheet-for-the-regex-cheatsheet-part-viii-pattern-modifiers-24la</link>
      <guid>https://dev.to/mathlete/cheatsheet-for-the-regex-cheatsheet-part-viii-pattern-modifiers-24la</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;I was recently doing a code challenge for a job interview that required me to strip out all nonalphabetic characters. "Ah! I should use Regular Expressions for this!" I thought in triumph, impressed that I even knew what regular expressions &lt;em&gt;were&lt;/em&gt;. That fleeting moment of glory faded once I decided to brush up on regular expressions and landed on the encouragingly-named &lt;a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/"&gt;Regular Expressions Cheatsheet&lt;/a&gt;. I had no idea how to use it!&lt;/p&gt;

&lt;p&gt;So, for people like me, here is a &lt;em&gt;Cheatsheet for the Regex Cheatsheet, Part VIII: Pattern Modifiers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tbBAqSXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdweg8wkwafvg1sdzkmq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbBAqSXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdweg8wkwafvg1sdzkmq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-pattern-modifiers"&gt;
  &lt;/a&gt;
  What are Pattern Modifiers?
&lt;/h2&gt;

&lt;p&gt;Pattern modifiers aka flags modify the behavior of the regex search you are performing. Again, this will be better understood through example, so read on! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anatomy-of-a-regular-expression"&gt;
  &lt;/a&gt;
  Anatomy of a regular expression
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Forward slashes go on either end like so: &lt;code&gt;/&lt;/code&gt;something&lt;code&gt;/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;g&lt;/code&gt; for "global" at the end to find every instance, like so: &lt;code&gt;/&lt;/code&gt;something&lt;code&gt;/g&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;m&lt;/code&gt; to "multi line" to the beginning/end of each line, not just the beginning/end of each string, like &lt;code&gt;/&lt;/code&gt;something&lt;code&gt;/g&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt;something&lt;code&gt;/gm&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#pattern-modifiers"&gt;
  &lt;/a&gt;
  Pattern Modifiers
&lt;/h2&gt;

&lt;p&gt;To illustrate pattern modifiers, let's revisit a regex from &lt;a href="https://dev.to/mathlete/cheatsheet-for-the-regex-cheatsheet-part-vii-groups-ranges-32ne"&gt;Groups &amp;amp; Ranges&lt;/a&gt; where we are searching for vowels:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-xyz-endraw-range-of-characters-raw-x-endraw-or-raw-y-endraw-or-raw-z-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;[xyz]&lt;/code&gt; Range of characters (&lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; or &lt;code&gt;z&lt;/code&gt;)
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[aeiou]&lt;/code&gt; is used in &lt;code&gt;/[aeiou]/&lt;/code&gt; (with no modifiers) to find the the &lt;em&gt;only&lt;/em&gt; first vowel:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;A lion roared&lt;/em&gt;&lt;/p&gt;




&lt;h5&gt;
  &lt;a href="#-raw-g-endraw-global-match-continue-searching-after-the-initial-match"&gt;
  &lt;/a&gt;
  &lt;code&gt;g&lt;/code&gt; Global match: Continue searching after the initial match
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;g&lt;/code&gt; can be added like this &lt;code&gt;/[aeiou]/g&lt;/code&gt; to find &lt;em&gt;all&lt;/em&gt; the lowercase vowels:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;A lion roared&lt;/em&gt;&lt;/p&gt;




&lt;h5&gt;
  &lt;a href="#-raw-i-endraw-case-insensitive-match"&gt;
  &lt;/a&gt;
  &lt;code&gt;i&lt;/code&gt; Case Insensitive match
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;i&lt;/code&gt; can be added like this &lt;code&gt;/[aeiou]/gi&lt;/code&gt; to find all the lowercase &lt;em&gt;and uppercase&lt;/em&gt; vowels:
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;A lion roared&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dunce-corner"&gt;
  &lt;/a&gt;
  Dunce Corner
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#-raw-m-endraw-multiline"&gt;
  &lt;/a&gt;
  &lt;code&gt;m&lt;/code&gt; Multiline
&lt;/h5&gt;

&lt;p&gt;I don't get this. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline"&gt;MDN Web Docs&lt;/a&gt; says:&lt;/p&gt;

&lt;p&gt;"...if "m" is used, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; change from matching at only the start or end of the entire string to the start or end of &lt;strong&gt;any&lt;/strong&gt; line within the string."&lt;/p&gt;




&lt;h5&gt;
  &lt;a href="#-raw-s-endraw-single-line"&gt;
  &lt;/a&gt;
  &lt;code&gt;s&lt;/code&gt; Single line
&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;Maybe&lt;/em&gt; this is explained in (this MDN Doc)[&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll&lt;/a&gt;], but I still don't get it.&lt;/p&gt;




&lt;p&gt;I don't think the following are supported in Javascript. Reach out in the comments in you know better.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#-raw-x-endraw-allow-comments-and-whitespace-in-pattern"&gt;
  &lt;/a&gt;
  &lt;code&gt;x&lt;/code&gt; Allow comments and whitespace in pattern
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#-raw-u-endraw-ungreedy-pattern"&gt;
  &lt;/a&gt;
  &lt;code&gt;U&lt;/code&gt; Ungreedy pattern
&lt;/h5&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Gatsby: Smart way to build websites</title>
      <author>Mukul Jain</author>
      <pubDate>Wed, 26 May 2021 02:51:26 +0000</pubDate>
      <link>https://dev.to/mukuljainx/gatsby-smart-way-to-build-websites-2d46</link>
      <guid>https://dev.to/mukuljainx/gatsby-smart-way-to-build-websites-2d46</guid>
      <description>&lt;p&gt;Gatsby is Frontend framework based on React and GraphQL with plugins for almost anything one can imagine some of which are officially supported. The plugin approach makes it modular, want to handle images with optimisation and lazy loading, install &lt;code&gt;gatsby-plugin-image&lt;/code&gt;, need convert Markdown to HTML? install &lt;code&gt;gatsby-transformer-remark&lt;/code&gt; and leave all the work to Gatsby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#behind-the-scenes"&gt;
  &lt;/a&gt;
  Behind The Scenes
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Few pages (ex. Home, about, contact, products )&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;li&gt;Progressive image loading&lt;/li&gt;
&lt;li&gt;Fast page loading&lt;/li&gt;
&lt;li&gt;Highly customisable&lt;/li&gt;
&lt;li&gt;Intelligent data prefetching&lt;/li&gt;
&lt;/ol&gt;



&lt;h3&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h3&gt;

&lt;p&gt;Whether use any framework or not to register every page we manually have to link them with speicifc routes. Gatsby does this automatically, just create a &lt;code&gt;js|jsx&lt;/code&gt; file in pages folder and that page is linked to route same as file name, there is 404 page (404.js) too which is rendered for every other route.&lt;/p&gt;

&lt;p&gt;Same goes for Markdown files or any other format, Gatsby knows what inside the folder, it fetched everything using file systema and dumped all to GraphQL, one can named export any query from any component and that will be available as props. That's how the blog listing works in this site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo"&gt;
  &lt;/a&gt;
  SEO
&lt;/h3&gt;

&lt;p&gt;All the pages are SSR rendered improving the SEO autmatically besides, it's also provide &lt;code&gt;gatsby-plugin-react-helmet&lt;/code&gt; which allows for different meta tags based on page, use &lt;code&gt;Helmet&lt;/code&gt; component and write all SEO related meta tags inside it, rest of things will taken care.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#progressive-image-loading"&gt;
  &lt;/a&gt;
  Progressive image loading
&lt;/h3&gt;

&lt;p&gt;While loading a website a a low quality is loaded first (~ 20px x 20px) and when user scrolls to that image or all other assets are fetched high resolution image will be loaded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fast-page-loading"&gt;
  &lt;/a&gt;
  Fast page loading
&lt;/h3&gt;

&lt;p&gt;On initial load a partial page is loaded which have the layout and all the text, HTML + CSS mostly and in next fraction of seconds JS is fetched and parsed which makes the bootstrap the React and routing capabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highly-customisable"&gt;
  &lt;/a&gt;
  Highly customisable
&lt;/h2&gt;

&lt;p&gt;There are two types of API exposed&lt;/p&gt;

&lt;p&gt;Many events like &lt;code&gt;onInitialClientRender&lt;/code&gt;, &lt;code&gt;onRouteUpdate&lt;/code&gt;, &lt;code&gt;disableCorePrefetching&lt;/code&gt;, &lt;code&gt;onCreateDevServer&lt;/code&gt;, &lt;code&gt;onCreatePage&lt;/code&gt; are exposed and some of them can be overwritten while others act as hooks. This can be done by creating a &lt;a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-browser"&gt;gatsby-browser.js&lt;/a&gt; or &lt;a href="https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node"&gt;gatsby-node.js&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intelligent-data-prefetching"&gt;
  &lt;/a&gt;
  Intelligent data prefetching
&lt;/h3&gt;

&lt;p&gt;Can the page get more faster? Yes! As all pages server side rendered there static data (generated by GraphQL) can be pre-fetched after the current page finishes loading, this happens for the next accessible pages from the current page &lt;strong&gt;which are in viewport&lt;/strong&gt;. Things for generated Markdown pages are even better, as you can seen in the gif, as I am scrolling down the data for each blog is fetched and when I click on a blog (last one in this case), it instantly loads, it's HTML was already fetched what loads after clicking, assets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NVT59l0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mukuljainx/mukul-jain/b16cef213b81565aa2d6629c9146e0686067e75b/src/pages/posts/Gatsby-smart-way-to-build-static-websites/pre-fetching.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NVT59l0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mukuljainx/mukul-jain/b16cef213b81565aa2d6629c9146e0686067e75b/src/pages/posts/Gatsby-smart-way-to-build-static-websites/pre-fetching.gif" alt="Data pre fetching demo"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Automation&lt;/strong&gt; is what Gatsby did, it took the best pratices and optimisation techniques and applied them during the build time and website which were already easy to make again due to automation at development time became more optimized and faster in production, not only static website, one can create full fledged e commerce website with Gatsby, that's why it matter.&lt;/p&gt;

&lt;p&gt;Checkout &lt;a href="https://github.com/mukuljainx/mukul-jain"&gt;my blog Github Repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>What is Null Safety Operator in PHP 8 and why is it next big thing in PHP</title>
      <author>Lakhveer Bawa</author>
      <pubDate>Wed, 26 May 2021 02:40:44 +0000</pubDate>
      <link>https://dev.to/bawa_geek/what-is-null-safety-operator-in-php-8-and-why-is-it-next-big-thing-in-php-377b</link>
      <guid>https://dev.to/bawa_geek/what-is-null-safety-operator-in-php-8-and-why-is-it-next-big-thing-in-php-377b</guid>
      <description>&lt;p&gt;PHP is known to have a very bad reputation among developers because of its loose type system and little weak technical design.&lt;br&gt;
However with every new version, PHP is changing the perception of developers.&lt;br&gt;
Recent improvements in PHP 7 and then PHP 8 brought many features that you would only see in languages like Java, C++, Dart etc.&lt;/p&gt;

&lt;p&gt;One of those features/improvement brought by PHP 8 is easier Null Safety.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#null-safety-has-lot-of-significance-in-programming-as-program-crashes-caused-by-null-values-are-highly-popular"&gt;
  &lt;/a&gt;
  Null Safety has lot of significance in programming as, Program Crashes caused by Null Values are highly popular.
&lt;/h5&gt;
&lt;h2&gt;
  &lt;a href="#what-is-null-safety-operator"&gt;
  &lt;/a&gt;
  What is Null Safety Operator:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/Xepskm6YoEEifd1rb7/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Xepskm6YoEEifd1rb7/giphy.gif" alt="wondering"&gt;&lt;/a&gt;&lt;br&gt;
Null-safe operator is a new syntax in PHP 8.0, that provides optional chaining feature to PHP.&lt;/p&gt;

&lt;p&gt;The null-safe operator allows reading the value of property and method return value chaining, where the null-safe operator short-circuits the retrieval if the value is null, without causing any errors.&lt;/p&gt;

&lt;p&gt;The syntax is similar to the property/method access operator (-&amp;gt;), and following the nullable type pattern, the null-safe operator is ?-&amp;gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Null safe operator silently returns null if the expression to the left side evaluates to null.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getAddress&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;?Address&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getCountry&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nv"&gt;$country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$customer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getCountry&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet above, the Customer::getAddress() method return value is nullable; It can return a null value, or an object of Address class.&lt;/p&gt;

&lt;p&gt;The $customer-&amp;gt;getAddress()-&amp;gt;getCountry() chain is not "null safe", because the return value of getAddress can be null, and PHP throws an error when it tries to call getCountry() method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Fatal&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Uncaught&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Call&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getCountry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;on&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="o"&gt;:...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To safely access the address, it was necessary to check the null return values before further accessing the return value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$customer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAddress&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$address&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$address&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getCountry&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$customer&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAddress&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$address&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getCountry&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The null-safe operator solves this by short-circuiting the property/method access, and returning null immediately if the left side of the operator is null, without executing the rest of the expression.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://php.watch/versions/8.0"&gt;PHP 8 new Features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/QEIC6GZIEGStO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/QEIC6GZIEGStO/giphy.gif" alt="bye"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>php</category>
    </item>
    <item>
      <title>Stripe Goes No-Code — Stripe Payment Links Explained</title>
      <author>swyx</author>
      <pubDate>Wed, 26 May 2021 02:17:37 +0000</pubDate>
      <link>https://dev.to/swyx/stripe-goes-no-code-stripe-payment-links-explained-4im</link>
      <guid>https://dev.to/swyx/stripe-goes-no-code-stripe-payment-links-explained-4im</guid>
      <description>&lt;p&gt;It's official: With the new &lt;a href="https://stripe.com/en-sg/payments/payment-links"&gt;Payment Links&lt;/a&gt; feature, Stripe has entered the No Code market.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bLNFJNoL9e8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-its-a-big-deal"&gt;
  &lt;/a&gt;
  Why It's a Big Deal
&lt;/h2&gt;

&lt;p&gt;You can think of the process of getting money from your customers to yourself in 3 stages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running a Server for backend logic and secrets&lt;/li&gt;
&lt;li&gt;Building a Frontend UI for customers to enter in their payment details and complete their purchase&lt;/li&gt;
&lt;li&gt;Creating a &lt;a href="https://stripe.com/docs/payments/payment-intents#:~:text=Each%20PaymentIntent%20typically%20correlates%20with,collect%2C%20and%20the%20desired%20currency."&gt;&lt;code&gt;PaymentIntent&lt;/code&gt;&lt;/a&gt; to track a single customer session from end to end. These must be created uniquely for each transaction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these stages are immensely technical. &lt;br&gt;
Stripe's recent product releases have progressively eliminated each one of these stages, opening Stripe up to the 99.6% of humanity that doesn't code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#towards-stripe-checkout"&gt;
  &lt;/a&gt;
  Towards Stripe Checkout
&lt;/h2&gt;

&lt;p&gt;Stripe's roots are famously developer centric. The default approach was to only offer a serverside SDK, and let you &lt;a href="https://stripe.com/docs/payments/integration-builder"&gt;wire everything else up yourself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This gives you maximum control, but it can mean a lot of code to write and maintain. You not only have to code up an attractive, reassuring UI for people to enter their credit card details (though &lt;a href="https://stripe.com/en-sg/payments/elements"&gt;Stripe Elements&lt;/a&gt; makes that easier), you also have to continually run a server just to take even a small one-off payment. If your server goes down , or you screw up some JavaScript, there goes your money!&lt;/p&gt;

&lt;p&gt;So along comes &lt;a href="https://stripe.com/en-sg/payments/elements"&gt;Stripe Checkout&lt;/a&gt;, where Stripe hosts your UI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMzAeaWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://b.stripecdn.com/docs/assets/overview.6a4ea4b380bea93a5be8a820f3eb7c35.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMzAeaWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://b.stripecdn.com/docs/assets/overview.6a4ea4b380bea93a5be8a820f3eb7c35.gif" alt="https://b.stripecdn.com/docs/assets/overview.6a4ea4b380bea93a5be8a820f3eb7c35.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wonderful! You not only don't have to code the UI or host it, Stripe is continually improving the checkout page on your behalf. It is even hosting it &lt;strong&gt;on their domain&lt;/strong&gt;, and most people will trust a Stripe domain over your own when entering in their credit card details.&lt;/p&gt;

&lt;p&gt;But.&lt;/p&gt;

&lt;p&gt;Look upon &lt;a href="https://stripe.com/docs/payments/accept-a-payment?platform=web&amp;amp;ui=checkout#create-a-checkout-session"&gt;the Stripe Checkout docs&lt;/a&gt; and realize that the &lt;code&gt;PaymentIntent&lt;/code&gt; section is not handled at all - you STILL have to write some code and run at least a serverless function to get this thing working!&lt;/p&gt;

&lt;p&gt;I know this all too well because I spent a day learning and debugging this when I was &lt;a href="https://dev.to/swyx/lessons-and-regrets-from-my-25000-launch-3aaa"&gt;launching my self published book&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe-payment-links"&gt;
  &lt;/a&gt;
  Stripe Payment Links
&lt;/h2&gt;

&lt;p&gt;Since everyone was writing little serverless functions to coordinate all the &lt;code&gt;PaymentIntent&lt;/code&gt; creation and offer a nice URL for all this, the natural next step is for Stripe to do it for you instead!&lt;/p&gt;

&lt;p&gt;You can think of &lt;a href="https://stripe.com/en-sg/payments/payment-links"&gt;Stripe Payment Links&lt;/a&gt; as a thin layer atop of Stripe Checkout:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---CU1_WGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ald99mra5o9qjjt1xui5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---CU1_WGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ald99mra5o9qjjt1xui5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the interface between your user and your business is just a simple URL - the web's firstborn API. &lt;/p&gt;

&lt;p&gt;Getting started with it could not be easier.&lt;/p&gt;

&lt;p&gt;Assuming you have some &lt;a href="https://stripe.com/docs/billing/prices-guide"&gt;products and prices already set up&lt;/a&gt; in Stripe, head to your Stripe Dashboard and look for "Payment links" under the Products section. &lt;a href="https://dashboard.stripe.com/payment-links"&gt;Here is a direct link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From here you can create a New link for each product, in seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gy43-o5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j91nd0eohyyrpika39dw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gy43-o5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j91nd0eohyyrpika39dw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final Payment link will just look like this: &lt;a href="https://buy.stripe.com/4gwcQB0I9dVpeIw5km"&gt;https://buy.stripe.com/4gwcQB0I9dVpeIw5km&lt;/a&gt; (yes, that's a real Payment link URL!). You can now use it inside of low and no code setups like HTML, Wordpress, or WebFlow.&lt;/p&gt;

&lt;p&gt;But perhaps the biggest 🤯 of all is that &lt;strong&gt;you don't even need a website to take the money over the Internet anymore&lt;/strong&gt;. You can now drop that link over a Discord or Slack app, or even place it as your "link in bio". &lt;/p&gt;

&lt;p&gt;That's the beauty of the URL - it's accepted everywhere. As all the best payment solutions should be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparisons"&gt;
  &lt;/a&gt;
  Comparisons
&lt;/h2&gt;

&lt;p&gt;Now that Stripe is handling all three stages of the ecommerce process for the first time, it is inevitable to start comparing it to other vendors that have done the same since forever. Before Stripe, you could easily have spun up a Shopify or Gumroad site and taken payments that way. Is Stripe now going for their lunch?&lt;/p&gt;

&lt;p&gt;I don't have any inside info on this, but my intuition is: No. People hire Gumroad and Shopify to do very different jobs. &lt;/p&gt;

&lt;p&gt;For example, Gumroad: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;acts as a &lt;a href="https://www.digitalocean.com/blog/starter-apps-for-any-indie-business/#:~:text=Gumroad%20had%20the%20features%20Adam,him%20of%20those%20burdens%20too."&gt;Merchant of Record&lt;/a&gt; (to drastically simplify tax collection and compliance)&lt;/li&gt;
&lt;li&gt;provides social proof (in the form of customer reviews)&lt;/li&gt;
&lt;li&gt;platform traffic and revenue via &lt;a href="https://gumroad.com/discover"&gt;its Discover marketplace&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;fulfilment (aka if you are selling digital content, it hosts your files for your customers to download)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In exchange for all that, it takes &lt;a href="https://sacra.com/research/gumroad-android-creator-economy/"&gt;6.5% of your sales&lt;/a&gt;. Stripe Payment Links are available for no extra charge on Stripe's standard &lt;a href="https://stripe.com/en-sg/pricing"&gt;integrated pricing&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tech</category>
      <category>stripe</category>
      <category>creators</category>
    </item>
  </channel>
</rss>
