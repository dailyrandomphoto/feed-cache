<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is React Helmet and Where To Use It</title>
      <author>Olena Drugalya</author>
      <pubDate>Mon, 22 Mar 2021 09:19:46 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/what-is-react-helmet-and-where-to-use-it-2ed3</link>
      <guid>https://dev.to/olenadrugalya/what-is-react-helmet-and-where-to-use-it-2ed3</guid>
      <description>&lt;p&gt;This blog post is about an interesting React component - &lt;strong&gt;React Helmet&lt;/strong&gt;.&lt;br&gt;
Before you read this article, you have to be familiar with  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; library. You would also need a basic knowledge about the HTML &lt;code&gt;head&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;I came across this component while building Gatsby website and it got me interested since I have never come across it before. Let's explore what it is, as well as where and how to use it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-react-helmet" class="anchor"&gt;
  &lt;/a&gt;
  What is React Helmet
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://github.com/nfl/react-helmet"&gt;official docs&lt;/a&gt; &lt;strong&gt;React Helmet&lt;/strong&gt; is a reusable component, which helps manage all of your changes to the document head. &lt;br&gt;
For example, you can use React Helmet to set the title, description and meta tags for the document dynamically. This is very handy when you have a project with multiple routes and want to update the meta tags for SEO based on the route currently rendered to the page.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-install-and-use" class="anchor"&gt;
  &lt;/a&gt;
  How to Install and Use
&lt;/h2&gt;

&lt;p&gt;It exists actually in the "react-helmet" library, so first we need to install this library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;helmet&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can import &lt;strong&gt;React Helmet&lt;/strong&gt; component to our project and use it. The following example sets the page title, language and description.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-helmet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Helmet&lt;/span&gt; &lt;span class="na"&gt;htmlAttributes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from React Helmet&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Basic example"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Helmet&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Supports all valid head tags: &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;meta&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt;, &lt;code&gt;noscript&lt;/code&gt;, and &lt;code&gt;style&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Supports attributes for &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; tags.&lt;/li&gt;
&lt;li&gt;Supports server-side rendering.&lt;/li&gt;
&lt;li&gt;Nested components override duplicate head changes (Components further down the tree can override values provided to the Helmet component on a higher level).&lt;/li&gt;
&lt;li&gt;Duplicate head changes are preserved when specified in the same component (support for tags like "apple-touch-icon").&lt;/li&gt;
&lt;li&gt;Callback for tracking DOM changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-helmet" class="anchor"&gt;
  &lt;/a&gt;
  Dynamic Helmet
&lt;/h2&gt;

&lt;p&gt;Above was an example of simple usage of Helmet, but this is unlikely, that you are going to use it like this in the project. The next example will show how to add title, metadata and other important SEO elements dynamically and importing it inside any component you want. &lt;/p&gt;

&lt;p&gt;We are going to create a SEO component, which will receive some data as props and fill it up in to &lt;code&gt;head&lt;/code&gt; section of the page. &lt;/p&gt;

&lt;p&gt;1.We destructure components &lt;em&gt;props&lt;/em&gt; and receive &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; array (it is empty by default):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-helmet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{.....}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Now we can use destructured data as properties of &lt;strong&gt;Helmet&lt;/strong&gt; component. We can also use property &lt;code&gt;htmlAttributes&lt;/code&gt; to set up language for the website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-helmet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Helmet&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;htmlAttributes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`description`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; tags are crawled by search engines, that's why it is important to use those at first place.&lt;/p&gt;

&lt;p&gt;3.We can add a bunch of meta objects to the &lt;code&gt;meta&lt;/code&gt; array. They are divided into 2 groups - &lt;strong&gt;OpenGraph&lt;/strong&gt; tags and &lt;strong&gt;Twitter&lt;/strong&gt; tags. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenGraph tags&lt;/strong&gt; (marked with &lt;em&gt;og:&lt;/em&gt;) are crawled by Facebook whenever you share a link through Messenger/ Facebook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someUrl&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someArticle&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someTitle&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someDescription&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;og:image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someImage&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fb:app_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someFbAppId&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Twitter tags&lt;/strong&gt; (marked with &lt;em&gt;twitter&lt;/em&gt;) are crawled by Twitter accordingly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someSummary&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:creator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someAuthorName&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someTitle&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someDescription&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter:image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;someImage&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was just a simple example how we can create reusable dynamic SOE component. If you wonder how to make a complex one, check this &lt;a href="https://github.com/kentcdodds/kentcdodds.com/blob/main/src/components/seo/index.js"&gt;SEO&lt;/a&gt; made by Kent Dods. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;React Helmet&lt;/strong&gt; is aimed to manage and dynamically set what’s in the document’s &lt;code&gt;head&lt;/code&gt; section. &lt;br&gt;
It comes-in especially handy when combined with server-side rendering because it allows to set meta tags that will be read by search engines and social media crawlers. This makes server-side rendering and React Helmet a dynamic duo for creating apps that are SEO and social media friendly.&lt;br&gt;
&lt;strong&gt;Helmet&lt;/strong&gt; is being used as plugin in &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-react-helmet/"&gt;Gatsby&lt;/a&gt; framework. &lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I Made This Realistic Red Switch (Pure CSS)</title>
      <author>Yoav Kadosh</author>
      <pubDate>Mon, 22 Mar 2021 09:12:59 +0000</pubDate>
      <link>https://dev.to/ykadosh/how-i-made-this-realistic-red-switch-pure-css-49g2</link>
      <guid>https://dev.to/ykadosh/how-i-made-this-realistic-red-switch-pure-css-49g2</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ykadosh/embed/ExNOmZx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I created this pen last week after stumbling across this &lt;a href="https://dribbble.com/shots/14172039-3D-Red-Switch"&gt;3D Red Switch&lt;/a&gt; design on Dribble. Since then it gained a lot of popularity (much more than I have anticipated!), and a few people have asked me to write a tutorial about how I made it. &lt;/p&gt;

&lt;p&gt;I've used various different CSS techniques in the making of this, including gradients, 3D transformations, animations, and transitions. In this tutorial, I will go over some of these techniques in depth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simulating-a-state" class="anchor"&gt;
  &lt;/a&gt;
  Simulating a State
&lt;/h2&gt;

&lt;p&gt;This is probably the oldest trick in the book. A switch has 2 states - on and off, but CSS has no way of maintaining such a state.&lt;/p&gt;

&lt;p&gt;To solve this, we can use one of the native HTML elements. Since we only need to maintain 2 states, a &lt;strong&gt;checkbox&lt;/strong&gt; element is a great choice. We can use the &lt;code&gt;:checked&lt;/code&gt; CSS selector to apply CSS based on whether the checkbox is checked or not.&lt;/p&gt;

&lt;p&gt;We wrap the whole thing in a &lt;code&gt;&amp;lt;label/&amp;gt;&lt;/code&gt; to link the click event of the entire element to the &lt;strong&gt;checkbox&lt;/strong&gt;, and we hide the checkbox itself using CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"switch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One issue with this is that we can't apply CSS to the &lt;code&gt;&amp;lt;label/&amp;gt;&lt;/code&gt; itself based on the checkbox state, since there's no "ancestor selector" in CSS. Because of that, I placed all the switch elements after the &lt;strong&gt;checkbox&lt;/strong&gt; and used the adjacent sibling selector (&lt;code&gt;+&lt;/code&gt;) to apply CSS to them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"switch"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Apply some CSS to .button when the checkbox is checked&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you need to simulate an element with more than 2 states, you can use other HTML elements like &lt;strong&gt;radio buttons&lt;/strong&gt; (&lt;code&gt;&amp;lt;input type="radio"/&amp;gt;&lt;/code&gt;). Some people take this technique to the next level and create an entire game using CSS only! Check out this &lt;a href="https://codepen.io/collection/AKkZro"&gt;collection of pure CSS games&lt;/a&gt; on CodePen for some inspiration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-black-frame" class="anchor"&gt;
  &lt;/a&gt;
  Making The Black Frame
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIQDc-yE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxy24397o0m5ubyd5dxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIQDc-yE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxy24397o0m5ubyd5dxq.png" alt="Making the black frame using CSS box-shadow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used &lt;code&gt;box-shadow&lt;/code&gt; to simulate the button's frame. &lt;code&gt;box-shadow&lt;/code&gt; is a very powerful CSS property, because it allows you to stack multiple shadow effects separated by a comma.&lt;/p&gt;

&lt;p&gt;I used a set of 5 shadow effects to create the frame, and a &lt;code&gt;border-radius&lt;/code&gt; property to make the shadow round in the corners. Here's the breakdown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;surrounding&lt;/span&gt; &lt;span class="nf"&gt;shadow&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;surrounding&lt;/span&gt; &lt;span class="nf"&gt;shadow&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;-2px&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt; &lt;span class="s2"&gt;"shine"&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="mh"&gt;#47434c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt; &lt;span class="no"&gt;gray&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;
    &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The internal black shadow&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-the-3d-button-shape" class="anchor"&gt;
  &lt;/a&gt;
  Making The 3D Button Shape
&lt;/h2&gt;

&lt;p&gt;I used CSS transformations and transitions to make the button appear 3-dimensional.&lt;/p&gt;

&lt;p&gt;The button itself is made of 3 divs (1 div and 2 pseudo-elements to be precise), that are perpendicular to each other, as illustrated below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slj7ihDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df8n9mxk6gwk2f39swsj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slj7ihDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df8n9mxk6gwk2f39swsj.jpg" alt="Making a 3D red switch using CSS"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I rotated the entire button 25 degrees, and used &lt;code&gt;transform-origin&lt;/code&gt; to set the pivot point away from the div, to make the button appear as if it is rotating around some point deeper inside the button, rather than around the div:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r2_AaFs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjve0r7zy30xiwcij0df.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r2_AaFs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjve0r7zy30xiwcij0df.jpg" alt="Making a 3D red switch using CSS"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;perspective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$rotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25deg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$pivot-distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$pivot-distance&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;translateZ&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$pivot-distance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$rotation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transform-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;preserve-3d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-the-animation" class="anchor"&gt;
  &lt;/a&gt;
  Making The Animation
&lt;/h2&gt;

&lt;p&gt;I used CSS transitions to rotate the switch back and forth. I wanted the transition to appear realistic, by starting slowly and ending quickly. I could've used one of the native easing functions, like &lt;code&gt;ease-in&lt;/code&gt;, but that wasn't producing the right animation, so I used a custom &lt;code&gt;cubic-bezier()&lt;/code&gt; easing function instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;transition: all 0.3s cubic-bezier(1, 0, 1, 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1b-LGPpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb8h5909sy6hgx1fuu7u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1b-LGPpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb8h5909sy6hgx1fuu7u.png" alt="Chrome DevTools transition cubic-bezier easing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This curve means that the transition starts slowly, and ends quickly, just like a real switch that slowly turns until it "clicks" towards the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-io-characters" class="anchor"&gt;
  &lt;/a&gt;
  Making The I/O Characters
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q8JuC84J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8427wnzotib5mqne1e0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8JuC84J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8427wnzotib5mqne1e0.png" alt="Making the I/O characters using CSS gradients"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are multiple tricks I could've used to create the I/O characters. I could've used real letters and apply styling to them, or use a special font. But since those are pretty simple characters to draw, I decided to use gradients to make them.&lt;/p&gt;

&lt;p&gt;CSS gradients are amazing, but I had no idea how powerful they are until I came across this great article about &lt;a href="https://css-tricks.com/drawing-images-with-css-gradients/"&gt;CSS Drawings&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The true power of gradients comes from the fact that they are considered as "images" by CSS, and therefore can benefit from the power of the &lt;code&gt;background&lt;/code&gt; property. backgrounds in CSS can not only be stacked (like shadows), but they can also have custom position and size!&lt;/p&gt;

&lt;p&gt;This means that you can do pretty much &lt;em&gt;everything&lt;/em&gt; with CSS gradients. If you want to understand just how far you can take it, check out &lt;a href="https://a.singlediv.com/"&gt;https://a.singlediv.com/&lt;/a&gt; (every art piece on that site is made with a single div).&lt;/p&gt;

&lt;p&gt;The syntax is pretty simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;position&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;size&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can stack multiple gradients with commas, and add &lt;code&gt;background-repeat: no-repeat&lt;/code&gt; to prevent the gradients from repeating:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I made the characters using a background with 2 gradients.&lt;br&gt;
For the "I" character, I used an all-white &lt;code&gt;linear-gradient()&lt;/code&gt;, and made it narrow and long. For the "O" character I used a &lt;code&gt;radial-gradient()&lt;/code&gt; with 4 color stops, from transparent to white and back to transparent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;White&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt; &lt;span class="nf"&gt;line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"I"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt; &lt;span class="m"&gt;52%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;72%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;80%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="m"&gt;33%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// White circle ("O")&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you take a look at the &lt;code&gt;radial-gradient()&lt;/code&gt;, you'll notice that there's a &lt;code&gt;2%&lt;/code&gt; gap between each color stop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;radial-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; 
  &lt;span class="nt"&gt;white&lt;/span&gt; &lt;span class="err"&gt;52&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; 
  &lt;span class="nt"&gt;white&lt;/span&gt; &lt;span class="err"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; 
  &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;72&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the different colors blend together, instead of having a crisp, pixelated transition. To illustrate this, take a look at the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3OQrf7GX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5kp97c5yd6l7bjmdldm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3OQrf7GX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5kp97c5yd6l7bjmdldm.jpg" alt="CSS gradients - blending colors between color stops"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an inherent CSS gradient behavior - it creates a smooth blend between the colors when there's a gap between the color stops.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-led-gradient" class="anchor"&gt;
  &lt;/a&gt;
  Making The "LED" Gradient
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JqdMc3GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzcrsdnvaao8vd70ukpx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqdMc3GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzcrsdnvaao8vd70ukpx.jpg" alt="Making the LED light using CSS gradients and animations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As seen in the picture above, I stacked 2 gradients to achieve a look of an LED bulb hidden behind a semi-transparent red plastic with small round bumps on it.&lt;/p&gt;

&lt;p&gt;I had to use 2 elements, one for each gradient, since the first gradient had to be none-repeating, and the second one had to be repeating. Additionally, I wanted to make the light "flicker", so I had to separate them.&lt;/p&gt;

&lt;p&gt;The first element is the &lt;code&gt;.light&lt;/code&gt; element, where I used a &lt;code&gt;radial-gradient()&lt;/code&gt; to illustrate a red LED light, with a brighter center (the center is orange, while the surroundings are red).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.light&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nf"&gt;adjust-hue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lighten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Orange&lt;/span&gt;
    &lt;span class="nv"&gt;$color&lt;/span&gt; &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Red&lt;/span&gt;
    &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Don't be alarmed by &lt;code&gt;adjust-hue()&lt;/code&gt; and &lt;code&gt;lighten()&lt;/code&gt;, I will cover those in the next part. For now, just consider them as hex colors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second element is the &lt;code&gt;.dots&lt;/code&gt; element, where I used a repeating &lt;code&gt;radial-gradient()&lt;/code&gt; with a transparent center to create a matrix of round-shaped bumps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dots&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nf"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;darken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;35%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, I used animation to create the flickering effect:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJPmfEpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0fuv44ty5zmvyng8m95.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJPmfEpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0fuv44ty5zmvyng8m95.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.light&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flicker&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.2s&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nt"&gt;flicker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;80&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.8&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#controlling-the-color-through-a-variable" class="anchor"&gt;
  &lt;/a&gt;
  Controlling The Color Through A Variable
&lt;/h2&gt;

&lt;p&gt;As this pen gained popularity, some people asked to see it in different colors. Initially, I had hardcoded colors throughout my CSS, so I changed those to SASS variables for simple configuration. &lt;/p&gt;

&lt;p&gt;However, I wanted the main color to be easily configurable, so having multiple color variables wasn't good enough. I needed to control all of the colors &amp;amp; shading through a single variable.&lt;/p&gt;

&lt;p&gt;In order to achieve that, I used SASS's built-in color functions: &lt;code&gt;lighten()&lt;/code&gt;, &lt;code&gt;darken()&lt;/code&gt; and &lt;code&gt;adjust-hue()&lt;/code&gt; (&lt;a href="https://sassme.jim-nielsen.com/"&gt;SassMe&lt;/a&gt; is a nice tool for visualizing the output of these functions).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lighten()&lt;/code&gt; and &lt;code&gt;darken()&lt;/code&gt; are pretty self-explanatory. They make a given color lighter or darker based on the given percentage. For example, &lt;code&gt;lighten(black, 50%)&lt;/code&gt; will mix black with 50% white, producing a gray color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9h9AfTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpcueqfb761gqw3bjsq3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9h9AfTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpcueqfb761gqw3bjsq3.png" alt="Making a color lighter using SASS lighten(), visualized by https://sassme.jim-nielsen.com/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, for the LED light, &lt;code&gt;lighten()&lt;/code&gt; and &lt;code&gt;darken()&lt;/code&gt; were not enough, since the center of the light was orange, while the surroundings were red. That's not a different color shade, it's a different color altogether.&lt;/p&gt;

&lt;p&gt;That's where &lt;code&gt;adjust-hue()&lt;/code&gt; comes in handy. It lets you change the color's hue property by a given degree.&lt;/p&gt;

&lt;p&gt;A color's hue is the color's position on the color wheel and can be represented by a single numerical value, usually in degrees (0 - 360). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHRDu6Ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtrqummd7kuouewfjsor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHRDu6Ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtrqummd7kuouewfjsor.png" alt="Color hue scale"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I used &lt;code&gt;adjust-hue()&lt;/code&gt; to "rotate" the color's hue property 35 degrees to the right:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;adjust-hue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;35&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Producing this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5qYe0o5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq2yqhevam3gr0kmpsc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5qYe0o5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq2yqhevam3gr0kmpsc1.png" alt="Adjusting the color's hue property using SASS adjust-hue(), visualized by https://sassme.jim-nielsen.com/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if the color is red, to rotated color will be orange. But if the color is green the rotated color becomes blue!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--msZZVp6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1zd8wy34unwlvfsc69m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--msZZVp6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1zd8wy34unwlvfsc69m.png" alt="Adjusting the color's hue property using SASS adjust-hue(), visualized by https://sassme.jim-nielsen.com/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now, you can control all the colors in the switch via a single variable &lt;code&gt;$color&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOTxJGmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mraymky496rsk8zlz2ri.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOTxJGmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mraymky496rsk8zlz2ri.gif" alt="Changing the switch main color"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This tutorial turned out to be a bit longer than I anticipated, and it may appear a bit overwhelming at first to see all the different techniques and tricks that were used for making this switch. But when you break it down to its basic elements, these techniques are pretty simple to comprehend. &lt;/p&gt;

&lt;p&gt;I hope I was able to provide some insight into the development process, and I hope you learned some new CSS techniques.&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>TypeScript Type Guards and Type Predicates</title>
      <author>Stephan Meijer</author>
      <pubDate>Mon, 22 Mar 2021 08:39:16 +0000</pubDate>
      <link>https://dev.to/smeijer/typescript-type-guards-and-type-predicates-4m5e</link>
      <guid>https://dev.to/smeijer/typescript-type-guards-and-type-predicates-4m5e</guid>
      <description>&lt;p&gt;Union types enable us to accept parameters of multiple, different types. Provide either type &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt;. Sometimes, these types aren't 100% compatible. They serve the same goal but have different properties. At a later stage, we might want to run some code based on the exact type. This is where type guards and type predicates come in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Let's start with declaring some types. I like to look at some code when trying to explain stuff. It makes me grasp the concept better.&lt;/p&gt;

&lt;p&gt;Assume that we are building a blog and have two types, that form a single union.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;frontMatter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NotFound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The concrete types are &lt;code&gt;Article&lt;/code&gt; and &lt;code&gt;NotFound&lt;/code&gt;, while &lt;code&gt;Page&lt;/code&gt; is the union. The goal is to write a function to render a page. I'm not going into details about the requirements of checking if a blog exists, and when to invoke that &lt;code&gt;notFound&lt;/code&gt; function, but imagine that we have a single render function. Based on the contents in the database, we render either the article, or a not found page. Something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;notFound&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The challenge that we're dealing with, is when we need to know if &lt;code&gt;handleRequest&lt;/code&gt; returned an &lt;code&gt;Article&lt;/code&gt; or a &lt;code&gt;NotFound&lt;/code&gt; type. In JavaScript, you'd use something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;404 — not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But in TypeScript, that's not going to work. It will throw an Error mentioning that the property &lt;code&gt;content&lt;/code&gt; does not exist on type &lt;code&gt;Page&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Property &lt;span class="s1"&gt;'content'&lt;/span&gt; does not exist on &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;'Page'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
  Property &lt;span class="s1"&gt;'content'&lt;/span&gt; does not exist on &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;'NotFound'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's because not all the types in the union include that property. To fix this, we need to add a type guard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-guard" class="anchor"&gt;
  &lt;/a&gt;
  Type Guard
&lt;/h2&gt;

&lt;p&gt;A type guard is an expression that performs a runtime check that guarantees the type in the current scope.&lt;/p&gt;

&lt;p&gt;The quick fix is to replace that &lt;code&gt;page.content&lt;/code&gt; check with something TypeScript would understand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;404 — not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works, but it does come at a maintainability cost. The benefit of TypeScript is that it will warn us when we remove a property that's being used. With this change, TypeScript won't warn us when we rename the &lt;code&gt;content&lt;/code&gt; property to &lt;code&gt;body&lt;/code&gt; for example.  Or when we made a typo in &lt;code&gt;'content'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is why type predicates are interesting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-predicate" class="anchor"&gt;
  &lt;/a&gt;
  Type Predicate
&lt;/h2&gt;

&lt;p&gt;The type predicate, is the return type of a function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isArticle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's not the whole function that's the predicate. The predicate is &lt;code&gt;page is Article&lt;/code&gt;. Also good to know, &lt;code&gt;'content' in page&lt;/code&gt; is not a type guard in this context. It's a simple expression. The type guard is the &lt;code&gt;if&lt;/code&gt; statement that causes TypeScript to narrow the type.&lt;/p&gt;

&lt;p&gt;So, the function above looks quite similar to that earlier type guard and comes with the same maintainability issue. But, now that we've extracted it, we can also solve that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isArticle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works and will error when we refactor &lt;code&gt;Article&lt;/code&gt; and remove the &lt;code&gt;content&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Functions that are declared as type predicate, must return a boolean. When the return value is &lt;code&gt;true&lt;/code&gt;, TypeScript assumes that the return type is the one that's declared in the type predicate. If this function returns true, TypeScript assumes that the provided argument &lt;code&gt;page&lt;/code&gt; is of type &lt;code&gt;Article&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When we'd call this method inside our render function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isArticle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;404 — not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript knows that &lt;code&gt;page.content&lt;/code&gt; exists, because inside the if scope, &lt;code&gt;page&lt;/code&gt; is of type&lt;code&gt;Article&lt;/code&gt;. The &lt;code&gt;if (isArticle(page))&lt;/code&gt; expression, is a type guard.&lt;/p&gt;

&lt;p&gt;After the if statement, &lt;code&gt;page&lt;/code&gt; is not of type &lt;code&gt;Article&lt;/code&gt;. And because our union only has 2 types, TypeScript is also aware that it must be of type &lt;code&gt;NotFound&lt;/code&gt;  at that stage.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;👋 I'm Stephan, and I'm building &lt;a href="http://rake.red"&gt;rake.red&lt;/a&gt;. If you wish to read more of mine, follow me on &lt;a href="https://twitter.com/meijer_s"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>typescript</category>
      <category>typeguards</category>
      <category>development</category>
    </item>
    <item>
      <title>CSS 101 - Flexbox</title>
      <author>Eric Chapman</author>
      <pubDate>Mon, 22 Mar 2021 02:13:35 +0000</pubDate>
      <link>https://dev.to/ericchapman/css-101-flexbox-3nng</link>
      <guid>https://dev.to/ericchapman/css-101-flexbox-3nng</guid>
      <description>&lt;p&gt;One of my 2021 resolution is to strength my knowledge of CSS. I postpone the training since almost one year. So this time no excuse, everyday, I will publish here on Dev.to what I learn from my CSS course the day before.&lt;/p&gt;

&lt;p&gt;Click follow if you want to miss nothing. &lt;/p&gt;

&lt;h2&gt;Flexbox&lt;/h2&gt;

&lt;p&gt;Since flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7bBRKYqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28zdey4jymig7j6jr5kd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7bBRKYqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28zdey4jymig7j6jr5kd.png" alt="flex"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Flex container properties&lt;/h2&gt;

&lt;p&gt;Here a list of properties that apply to the container&lt;/p&gt;

&lt;p&gt;This defines a flex container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Flex direction&lt;/b&gt; &lt;br&gt;
This property define the direction flex items are placed in the flex container: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;row (left to right)&lt;/li&gt;
&lt;li&gt;row-reverse (right to left)&lt;/li&gt;
&lt;li&gt;column (top to bottom)&lt;/li&gt;
&lt;li&gt;column-reverse (bottom to top)
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;b&gt;flex-wrap&lt;/b&gt;&lt;br&gt;
By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property. (wrap, nowrap, wrap-reverse)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;justify-content&lt;/b&gt;&lt;br&gt;
This defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size.&lt;/p&gt;

&lt;pre&gt;
flex-start    [- - -        ]
flex-end      [        - - -]
center        [    - - -    ]
space-between [-     -     -] 
space-around  [ -    -    - ]
space-evenly  [  -   -   -  ]
&lt;/pre&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;b&gt;align-items&lt;/b&gt;&lt;br&gt;
This defines the default behavior for how flex items are laid out along the cross axis on the current line&lt;/p&gt;

&lt;pre&gt;
flex-start 
[ ----- ]
[       ]
[       ]

flex-end 
[       ]
[       ]
[ ----- ]

center 
[       ]
[ ----- ]
[       ]

stretch 
[ | | | ]
[ | | | ]
[ | | | ]
&lt;/pre&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;h2&gt;Flex items properties&lt;/h2&gt;

&lt;p&gt;Here a list of properties that apply to individual item&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Order&lt;/b&gt;&lt;br&gt;
By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;flex-grow&lt;/b&gt;&lt;br&gt;
This defines the ability for a flex item to grow if necessary&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;b&gt;align-self&lt;/b&gt;&lt;br&gt;
This allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.&lt;/p&gt;

&lt;p&gt;For example if align-items is set to flex-start &lt;/p&gt;

&lt;pre&gt;
[ ----- ]
[       ]
[       ]
&lt;/pre&gt;

&lt;p&gt;Setting .item3 to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;align-self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will create this custom alignment:&lt;/p&gt;

&lt;pre&gt;
[ -- -- ]
[       ]
[   _   ]
&lt;/pre&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's it for today. Tomorrow the journey continue, see you later! If you want to be sure to miss nothing click follow me here or on twitter!&lt;/p&gt;

&lt;p&gt;Follow me on Twitter: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw" class="twitter-follow-button"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Visualize with React Chart Race</title>
      <author>Ivana</author>
      <pubDate>Mon, 22 Mar 2021 00:48:17 +0000</pubDate>
      <link>https://dev.to/ivanadokic/react-chart-race-nba-leaders-ece</link>
      <guid>https://dev.to/ivanadokic/react-chart-race-nba-leaders-ece</guid>
      <description>&lt;p&gt;Using a Chart Library that consolidates and presents data visually might help people to understand a large amount of information and make better business decisions. Using the right type of chart is the decision to make when you want to present data. Those are some charts I have used:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.chartjs.org/"&gt;Chartjs&lt;/a&gt;- Simple JavaScript charting for designers &amp;amp; developers&lt;br&gt;
&lt;a href="https://developers.google.com/chart"&gt;Google Charts&lt;/a&gt; - Google chart tools are powerful, simple to use, and free&lt;br&gt;
&lt;a href="https://d3js.org/"&gt;D3&lt;/a&gt; - JavaScript library for manipulating docs based on data&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;animated bar chart race&lt;/strong&gt; is one of my favorite visualizations and it helps you for example to visualize the change in trends over time. This type of animation has been around for a while it's very popular on social media as they provide a holistic data story/insight in an easy-to-understand chart. &lt;/p&gt;

&lt;p&gt;A bar chart race contains an animated order of bars that display the value of data at a different moment in time. You can make your own bar chart race without coding with &lt;a&gt;Flourish&lt;/a&gt; - platform for data visualization and storytelling. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a60zPZEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34pew4odzc2g3zezjpju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a60zPZEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34pew4odzc2g3zezjpju.png" alt="Alt Text"&gt;&lt;/a&gt;.&lt;br&gt;
You will need to Create Flourish Account, Open up the Bar Chart Race Template, and format the data to be imported to Flourish, you can Download the formatted data and Import directly following the structure in the file. &lt;/p&gt;

&lt;p&gt;Sometimes, in the software we build, we find that we have to deal with data sets that cannot be viewed clearly unless we visualize it. Depends on the data set after knowing what you are looking for, you will need to surf for the dataset that can be used using different sources such as web scraping or for example use Python that can allow us to scrape websites effectively.&lt;/p&gt;

&lt;p&gt;I was looking for NBA Season Leaders - ESPN Rating&lt;br&gt;
data sets, and for this project I came across a bar chart race visualization library called &lt;code&gt;React Chart Race&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-chart-race" class="anchor"&gt;
  &lt;/a&gt;
  React Chart Race
&lt;/h2&gt;

&lt;p&gt;I really like this animated bar chart race &lt;a href="https://www.npmjs.com/package/react-chart-race"&gt;React Chart Race&lt;/a&gt; I found while I was looking to show the top NBA Players ranked visually for the &lt;a href="https://github.com/ivanadokic/nba-stats"&gt;NBA-stats&lt;/a&gt; project I was building.&lt;/p&gt;

&lt;p&gt;The animated bar chart race helps you visualize your changing data and it's quite easy to understand. A rising or decreasing bar moves up or down along with the animation.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hhcll7Z7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ugurdalkiran/react-chart-race/master/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hhcll7Z7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/ugurdalkiran/react-chart-race/master/demo.gif" alt="here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;npm install --save react-chart-race&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#import" class="anchor"&gt;
  &lt;/a&gt;
  Import
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;import ChartRace from 'react-chart-race';&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-usage" class="anchor"&gt;
  &lt;/a&gt;
  Simple Usage
&lt;/h2&gt;

&lt;p&gt;An element must consist of 4 variables: id, title, value, color, I wanted to have those bars set to &lt;code&gt;color&lt;/code&gt; that is the exact &lt;code&gt;NBA hex color code&lt;/code&gt; of the Player's Team &lt;a href="https://teamcolorcodes.com/nba-team-color-codes/"&gt;NBA Team Color Codes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7iqhN_US--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avyte4ehwwex1q1eoj45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iqhN_US--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avyte4ehwwex1q1eoj45.png" alt="Alt Text"&gt;&lt;/a&gt;. I manually set &lt;code&gt;values&lt;/code&gt; from 2020-2021 NBA Season Leaders - ESPN Rating in order to have Players ranked, I choose the top 6 Players, but it depends on you to chose and add or remove it.&lt;/p&gt;

&lt;p&gt;To learn more follow this &lt;a href="https://teamcolorcodes.com/milwaukee-bucks-color-codes/"&gt;link&lt;/a&gt; for the rest of the NBA &lt;code&gt;hex color codes&lt;/code&gt; for all of your favorite NBA team color codes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1I9QFHCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5rbpuu15ok7rnb5p7r8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1I9QFHCa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5rbpuu15ok7rnb5p7r8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;We will need to &lt;code&gt;setState&lt;/code&gt; for the animation to work.&lt;/p&gt;

&lt;p&gt;To connect please check my &lt;a href="https://github.com/ivanadokic"&gt;Github&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/ivana-dokic/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/LloydPile"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Coding is like Art.</title>
      <author>Natalie Hummel</author>
      <pubDate>Sun, 21 Mar 2021 23:27:57 +0000</pubDate>
      <link>https://dev.to/nmhummel/coding-is-like-art-1bbh</link>
      <guid>https://dev.to/nmhummel/coding-is-like-art-1bbh</guid>
      <description>&lt;p&gt;Sometimes there's so much going on, but when you step back and see the end results, it's a masterpiece. It also took you weeks to create and you're not even sure you're going to show it to anyone. Maybe it can go in the portfolio one day but you never seem to be "finished" with it. My current project is going to be one of those constantly in-progress pieces. It's also centered around art, so I thought the simile was apropos. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DWfNR_Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkgg5uecmx78pgd6homa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DWfNR_Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkgg5uecmx78pgd6homa.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
My project, decUrator, allows you to browse the diverse paintings of the Modern Museum of Art (MoMA to its friends) in New York City. You can create rooms to store your favorite paintings and browse others' exhibits, too. Check out the demo below before we get all technical about it.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lkiR5eIi_0A"&gt;
&lt;/iframe&gt;
&lt;br&gt;
The backend of this project was created with Ruby on Rails. I had two models-- Painting and Room-- with a join table of Exhibiton. The frontend was created using JavaScript, with React as my framework and Redux to give me that sweet, global store action. The backend, like with my last JavaScript project ("Squared Away"), was not worked on as much as the front end. I used it to generate my API or seeded rooms and paintings. With a database of 1,994 paintings, I knew my frontend was going to have a field day trying to load that many paintings. To prevent that, I tweaked my index route like so:&lt;br&gt;
&lt;code&gt;paintings = Painting.order(:artist).sample(20)&lt;/code&gt;&lt;br&gt;
This allowed a random sample of 20 paintings to be loaded at the time. On the front end, that allowed me to fetch 20 new, random paintings with the click of a button:&lt;br&gt;
&lt;code&gt;&amp;lt;button onClick={refreshPaintings}&amp;gt;Click to see different paintings&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side note&lt;/strong&gt;: You may be wondering why I had the paintings listed by order of artist, when all the results are random. To be frank, the .sample function was a temporary crutch during development. My true intent was to introduce pagination, but even that would mean scrolling through 100 pages of paintings. I plan to include a feature in the very near future to allow people to search by artist's name, nationality, gender, and more. &lt;/p&gt;

&lt;p&gt;Working in React was interesting. And just as I was getting comfortable with it, we learned how to incorporate Redux. Moving from a local state to a global store was beneficial, but also confusing. There was a day or two where I wasn't sure which was the proper way to accomplish a goal. (Extra fun: when you're working on the Ruby backend and keep trying to set a variable with 'let'.) One thing I knew for sure, though, is that the Connect feature is pretty awesome. &lt;/p&gt;

&lt;p&gt;Connect is a function that is part of the Redux family. It lives in the export line of each component that needs it and connects that component to not only the Redux store (our globally stored data), but also the functions it needs to dispatch actions to the store. There are two important arguments passed to this function-- mapStateToProps and mapDispatchToProps. I want to focus in on one of mapStateToProps' features-- ownProps. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mapStateToProps?: (state, ownProps?) =&amp;gt; Object&lt;/code&gt;&lt;br&gt;
If a mapStateToProps (aka 'stateProps) function is specified, the new wrapper component will subscribe to Redux store updates. This means that any time the store is updated, mapStateToProps will be called. The results of mapStateToProps must be a plain object, which will be merged into the wrapped component’s props. If you don't want to subscribe to store updates, pass null or undefined in place of mapStateToProps.&lt;br&gt;
You can read more about them &lt;a href="'https://react-redux.js.org/api/connect'"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you DO use stateProps, the first parameter given is the store state. If you use the optional second parameter, you get to use &lt;strong&gt;ownProps&lt;/strong&gt;, the attributes that are passed when the component is used. In plain React, these would be just called props. Take a look at my SingleRoom.js file below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZGOxNKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6b4rk2g02deiqz1i9za.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ZGOxNKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6b4rk2g02deiqz1i9za.PNG" alt="SingleRoom"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I placed a debugger after line 9 and typed 'ownProps' and 'currentRoom' into the console, I would get a big red warning that neither is defined. Both live in the stateProps method. However, I was able to manipulate ownProps in that method to get the data I needed into a const called currentRoom. Notice on line 8 I am able utilize currentRoom by adding the prefix this.props-- this being the component, and props being its own props. Take a look at the console log:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0EpO2RTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9b4gpsoil1eiv6ty4di.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0EpO2RTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9b4gpsoil1eiv6ty4di.PNG" alt="ownProps"&gt;&lt;/a&gt;&lt;br&gt;
We hit the stateProps function first where we see the ownProps and currentRoom variable on display. Following the path, we're able to get the id number of the room we're in using ownProps/match/params: {id: "3"}. Turn that into an integer using parseInt, and we have an actual number 3. Now we can take that room id and find not only its name, but also its paintings and map them out for all to see. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ehV9ZZQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xehv6dva6lfstdnkazdl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ehV9ZZQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xehv6dva6lfstdnkazdl.PNG" alt="Room #3"&gt;&lt;/a&gt;&lt;br&gt;
Yippee skippy! Notice I did not need to call the dispatchProps function. Since we didn't need to return new functions that call dispatch(), the dispatch passed to my component by default sufficed. &lt;/p&gt;

&lt;p&gt;This project is my last official one as a student with Flatiron school. I've noticed that with EVERY project, I have doubted my ability to finish it and have it work properly. With this one, I thought for sure it would be the hill I would die on. As it turns out, I finished it in less time than my previous projects. (!!!) Every project week has involved a lot of self-doubt, but there's also been some triumphant moments: when that function I've been working on for an hour finally works right, when I make a cool feature using CSS, when I get no red warnings in the console. These are all moments to cherish and call back to when I'm feeling down. I encourage anyone questioning their abilities to recall how they felt during those moments, and to remember that there was also an "after this" moment that involved a nap and maybe a celebratory beer.&lt;/p&gt;

&lt;p&gt;Coding truly is like art. Some people will understand it, some won't. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WaXJn6a4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkeyu8vysvyh55qs8zo2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WaXJn6a4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xkeyu8vysvyh55qs8zo2.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One person's gibberish is another person's blood, sweat, and tears. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bXIWVWJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whzlaum3sc15fg25uiub.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bXIWVWJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whzlaum3sc15fg25uiub.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But the greatest thing about your masterpiece is that it is your very own. Well, yours...and maybe some folks posting on &lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover art: "Untitled", Sam Gilliam (2019)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>rails</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Contributing to Open Source in Quality Assurance</title>
      <author>Isabel Costa</author>
      <pubDate>Sun, 21 Mar 2021 21:20:57 +0000</pubDate>
      <link>https://dev.to/isabelcmdcosta/contributing-to-open-source-with-quality-assurance-1n8e</link>
      <guid>https://dev.to/isabelcmdcosta/contributing-to-open-source-with-quality-assurance-1n8e</guid>
      <description>&lt;p&gt;Did you know you can contribute to Open Source with Quality Assurance? Usually while building software, there is some component of quality assurance or testing involved, so that also applies to open source projects. When I think of quality assurance of a project I think of testing in general, which includes writing unit tests, integration tests, manual testing, performance testing, documenting test scenarios, ...&lt;/p&gt;

&lt;p&gt;Contributing to Quality Assurance (QA) helps to ensure the overall quality of the project since it can help to detect bugs early and faults in how the feature was implemented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-to-contribute" class="anchor"&gt;
  &lt;/a&gt;
  Ways to contribute
&lt;/h2&gt;

&lt;p&gt;So here are some examples of how to contribute to Quality Assurance of an open source project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Test manually a pull request code&lt;/strong&gt; before it gets accepted to be merged, to confirm the code is working as expected. Be creative! Try to come up with test cases for the feature being implemented that perhaps the author of the pull request did not think of. Examples: &lt;a href="https://github.com/anitab-org/mentorship-backend/pull/535#pullrequestreview-401001287"&gt;testing REST API&lt;/a&gt;, &lt;a href="https://github.com/anitab-org/mentorship-android/pull/725#pullrequestreview-438635985"&gt;testing bottom navigation bug in android app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Test the deployed version of the app and report bugs&lt;/strong&gt; found by creating issues describing them! Provide as much information as you can so that maintainers and other contributors can confirm the bug, and also for developers to have the necessary context to look for a solution for it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Write tests to improve test coverage&lt;/strong&gt; of the project. These could be unit, integration, user interface, automation tests… Sometimes also, there could be enough code coverage, but some edge cases for a feature might not be covered in those. So be creative!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reproduce bugs already reported&lt;/strong&gt; through issues and add more context or information to those if you think it’s missing. You can help maintainers confirm if a bug was properly reported and makes sense.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Write documentation about test cases&lt;/strong&gt; for the project. This can help new contributors learn how to use the project, and what are some use cases for it. Also can help other testers, do more testing and cover more scenarios. Example: &lt;a href="https://github.com/anitab-org/mentorship-backend/blob/cf6df094e4fef735e135674e4d5697ded5060d7d/docs/quality-assurance-test-cases.md"&gt;quality assurance test cases for mentorship-backend&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Help automate tasks on CI/CD pipeline&lt;/strong&gt; as enforcing coding style in code, run tests for the project, so that pipeline fails and signals to contributors and maintainers of the code changes of a pull request are up to standards.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-learn-more-about-quality-assurance" class="anchor"&gt;
  &lt;/a&gt;
  Resources to learn more about Quality Assurance
&lt;/h2&gt;

&lt;p&gt;There are 2 resources that come to my mind with regards to learning more about Quality Assurance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Test Automation University&lt;/strong&gt; - &lt;a href="https://testautomationu.applitools.com/"&gt;https://testautomationu.applitools.com/&lt;/a&gt; where you can learn about Test automation specifically.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;FreeCodeCamp&lt;/strong&gt; has a certification for Quality Assurance &lt;a href="https://www.freecodecamp.org/"&gt;https://www.freecodecamp.org/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would love to know more resources, so if you know more, let me know in the comments :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-at-anitaborg-open-source-community" class="anchor"&gt;
  &lt;/a&gt;
  Process at AnitaB.org Open Source community
&lt;/h2&gt;

&lt;p&gt;When working on &lt;a href="https://summerofcode.withgoogle.com/archive/2018/projects/6592097335377920/"&gt;my Google Summer of Code project&lt;/a&gt; back in 2018, I tried to come with ways for other open source contributors, to contribute to the project by testing it. I asked for help in the community for people to test the application and report bugs found by creating issues. Here's an &lt;a href="https://github.com/anitab-org/mentorship-backend/issues/93"&gt;example of a bug reported&lt;/a&gt; where user registration was possible by sending empty values for certain required fields.&lt;/p&gt;

&lt;p&gt;When &lt;a href="https://github.com/getodk/collect/pull/1986"&gt;contributing to Open Data Kit&lt;/a&gt;, I noticed that maintainers had a step while reviewing code, of verifying if my change was working on multiple Android versions. This inspired me to incorporate such steps in our community as well. These days at &lt;a href="https://github.com/anitab-org"&gt;AnitaB.org Open Source&lt;/a&gt; we have this step as part of our Open Source workflow, in particular of the Pull Request lifecycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our work related to QA includes:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://github.com/anitab-org/documentation/blob/85f3fdc625a6e8d2269f3a61a43421994807c157/quality-assurance.md"&gt;guide to contributing to Quality Assurance&lt;/a&gt; in our projects;
We also have a &lt;a href="https://github.com/anitab-org/mentorship-backend/blob/cf6df094e4fef735e135674e4d5697ded5060d7d/docs/test-pr-guide.md#template-to-report-pr-testing-results"&gt;PR test report template&lt;/a&gt; we encourage our contributors to use when testing a PR;&lt;/li&gt;
&lt;li&gt;Once we have 2 approvals, we label the issue with &lt;a href="https://github.com/anitab-org/mentorship-backend/pulls?q=is%3Apr+is%3Aopen+label%3A%22Status%3A+Needs+Testing%22"&gt;“Status: Needs Testing”&lt;/a&gt; and wait for someone, other than the author, to run the PR code (or test the live app if there is a deployed version of the PR) and test what was implemented. In success, we label the issue with “Status: Ready to Merge”, in failure we re-evaluate the PR with the contributor;&lt;/li&gt;
&lt;li&gt;We started exploring a test management tool called &lt;a href="https://www.testquality.com/"&gt;TestQuality&lt;/a&gt; to help us document test scenarios we already know and tested before;&lt;/li&gt;
&lt;li&gt;We have a dedicated channel &lt;a href="https://anitab-org.zulipchat.com/#narrow/stream/216325-quality-assurance"&gt;#quality-assurance&lt;/a&gt; on Zulip for general discussion around QA;&lt;/li&gt;
&lt;li&gt;Writing automated tests, which includes UI tests and unit tests, &lt;a href="https://github.com/anitab-org/mentorship-backend/pull/708"&gt;user journey tests&lt;/a&gt;, …&lt;/li&gt;
&lt;li&gt;We have deployed versions of some of our projects, which allows contributors to test the app, without running the app in their development environments. We also have &lt;a href="https://github.com/anitab-org/mentorship-android/pull/1004/checks"&gt;apk artifacts being built through GitHub Actions&lt;/a&gt; for one of our Android apps being developed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As per our experience in the community, people who were joining us were mostly interested in contributing as a developer, but eventually got interested and helped with this type of contribution. &lt;strong&gt;By learning how to test a project, you also learn how the project works.&lt;/strong&gt; This can be an easy path to start contributing and getting familiar with the project and its codebase.&lt;/p&gt;




&lt;p&gt;A huge thank you to &lt;a href="https://www.linkedin.com/in/roshni-pattath-4a356448"&gt;Roshni Pattath&lt;/a&gt; who has been an advocate and mentor for quality assurance within the AnitaB.org Open Source community. I’ve learned so much from her. Also for helping me review this post.&lt;/p&gt;

&lt;p&gt;If you are interested in contributing this way, we have plenty of work you could do in our community. You can check out &lt;a href="https://github.com/anitab-org"&gt;GitHub&lt;/a&gt; and also join our &lt;a href="https://anitab-org.zulipchat.com"&gt;Zulip&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can find me on &lt;a href="https://twitter.com/isabelcmdcosta"&gt;Twitter&lt;/a&gt;, &lt;a href="https://github.com/isabelcosta"&gt;GitHub&lt;/a&gt; and &lt;a href="https://isabelcosta.github.io/"&gt;my personal website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>List of APIs to use for creating JavaScript/React App</title>
      <author>Kritika Srivastava</author>
      <pubDate>Sun, 21 Mar 2021 21:08:54 +0000</pubDate>
      <link>https://dev.to/kritika27/list-of-apis-to-use-for-creating-javascript-react-app-8m4</link>
      <guid>https://dev.to/kritika27/list-of-apis-to-use-for-creating-javascript-react-app-8m4</guid>
      <description>&lt;p&gt;Hello,Dev Friends.In this article I have written about a list of certain public APIs which you can use for practice as a beginner in React/JavaScript.Before starting with creating Apps in React using Public APIs,learn React basics and about fetch/axios,http requests,JSON.Learn to read the documentation of any API for its usage.&lt;/p&gt;

&lt;p&gt;So,here goes the list:&lt;/p&gt;

&lt;p&gt;1.Quotes API:&lt;br&gt;
&lt;a href="https://api.quotable.io/random"&gt;API Link&lt;/a&gt;&lt;br&gt;
You can generate random quotes on clicking a button using this API.Make use of fetch and useEffect.&lt;br&gt;
&lt;a href="https://github.com/kritika27/quotes-generator-react"&gt;Github Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dazzling-edison-76c948.netlify.app/"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Currency Converter:&lt;br&gt;
&lt;a href="https://api.exchangeratesapi.io/latest"&gt;API Link&lt;/a&gt;&lt;br&gt;
This API has currency exchange rates which you can use for creating currency converter app.&lt;br&gt;
&lt;a href="https://github.com/kritika27/currency-converter-reactjs"&gt;Github Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://vigorous-wiles-69bb0f.netlify.app/"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3.Robohash API:&lt;br&gt;
Website-&lt;a href="https://robohash.org/"&gt;https://robohash.org/&lt;/a&gt;&lt;br&gt;
This API is used for generating unique robot/alien/monster images by adding any text at the end of the above url.&lt;br&gt;
&lt;a href="https://github.com/kritika27/superrobos-react-robohash"&gt;Github Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://affectionate-almeida-56a8ef.netlify.app/"&gt;Demo link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.Random user API:&lt;br&gt;
&lt;a href="https://randomuser.me/api/"&gt;API Link&lt;/a&gt;&lt;br&gt;
You can generate random user and his/her details by using this API.&lt;/p&gt;

&lt;p&gt;5.Weather API:&lt;br&gt;
Website-&lt;a href="https://openweathermap.org/api"&gt;https://openweathermap.org/api&lt;/a&gt;&lt;br&gt;
Search for weather of any city with the help of the given API.Generate your API key for usage.&lt;/p&gt;

&lt;p&gt;6.OMDB Movie API:&lt;br&gt;
Website-&lt;a href="http://www.omdbapi.com/"&gt;http://www.omdbapi.com/&lt;/a&gt;&lt;br&gt;
Search for the movies through this API and you can also display Single movie details separately by using React Router.API key is required.&lt;/p&gt;

&lt;p&gt;7.Covid-19 API:&lt;br&gt;
&lt;a href="https://covid19.mathdro.id/api"&gt;API Link&lt;/a&gt;&lt;br&gt;
Through this API you can generate Covid-19 data of different countries.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=khJlrj3Y6Ls"&gt;Refer to this tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many APIs but I don't want to overwhelm someone who is starting with React/JavaScript.You can start with these APIs first for practice.&lt;/p&gt;

&lt;p&gt;Happy Coding :)&lt;br&gt;
You can follow me on &lt;a href="https://twitter.com/kritikasri27"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/kritika27"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>react</category>
      <category>api</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How I got my first job in tech as a software engineer with no money and no degree</title>
      <author>Maximilian</author>
      <pubDate>Sun, 21 Mar 2021 19:08:19 +0000</pubDate>
      <link>https://dev.to/kaxmoglan/how-i-got-my-first-job-in-tech-as-a-software-engineer-with-no-money-and-no-degree-3j30</link>
      <guid>https://dev.to/kaxmoglan/how-i-got-my-first-job-in-tech-as-a-software-engineer-with-no-money-and-no-degree-3j30</guid>
      <description>&lt;p&gt;This is the story of how I got my first job in tech as a software engineer in less than a year after my first ever git commit, without spending any money, without a degree and without applying to a single job.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Small print:&lt;/strong&gt; I already owned a MacBook Pro and I was living with my parents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preface:&lt;/strong&gt; I wrote my first ever blog post outlining exactly why I chose a career in tech, which you can read here: &lt;a href="https://dev.to/kaxmoglan/why-i-chose-a-career-in-tech-1mn8"&gt;Why I Chose A Career In Tech&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mission:&lt;/strong&gt; To help someone find their own path, create their own roadmap and see what's possible to achieve in tech in a year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end" class="anchor"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;I'm always a fan of working backwards, so step one was inevitably answering the question: "where do I want to be and by when?". Although I was already aware of the kinds of jobs I was after and the salary range of a lot of positions, I needed to be specific.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I want to be a full stack developer / software engineer, specialising in Javascript, but be language and framework agnostic. I.e. I want to develop the ability to work with multiple languages and multiple frameworks, but become an expert in full stack Javascript development.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to be remote, but accept that I may have to be office based for my first role (or two) until I have some experience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to aim to enter the market as a mid-level developer. Worst case scenario, I'll be a strong junior.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to work for a company I respect and whose mission I support (sorry JP Morgan).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to work for a company where I have the opportunity to learn and grow.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-plan" class="anchor"&gt;
  &lt;/a&gt;
  The Plan
&lt;/h2&gt;

&lt;p&gt;Ok, so I have an end goal, but how the hell do I get there?&lt;/p&gt;

&lt;p&gt;Well, like most things in life, it starts on Google and it ends with square eyes watching endless YouTube videos and reading countless blog posts, forums and articles. Eventually, I felt like I had a good idea as to how to achieve my goal. Enter my roadmap:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MDN Web Docs. The fundamentals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Free Code Camp (FCC). Learn code interactively. Build simple but solid projects for my portfolio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;YouTube. Expand on things I learn on MDN &amp;amp; FCC. Use as a tool to help me understand things on MDN &amp;amp; FCC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Git. Sign up to GitHub. Push every bit of code I write. Get those green squares. 3 functions: learn git, help to track my progress, show potential employers I'm serious!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Portfolio. Comprised of FCC projects, 2 simple unique projects, 2 full stack projects and 2 freelance projects. Aim to show technical ability, creative ability and professional ability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Portfolio site. Create a portfolio site to showcase my portfolio. Design something sleek and modern that's technically advanced enough to showcase as a portfolio piece itself, and stands out from the crowd.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Social media. Twitter, Instagram, start a blog, LinkedIn, CV.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Job hunt.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And finally, as an overarching point:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live, eat and breathe code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I feel this kind of goes without saying, but in order to get good at anything, you have to put the time in - &lt;em&gt;especially&lt;/em&gt; if you've got a time limit!&lt;/p&gt;

&lt;p&gt;Living, eating and breathing something means (to me) that aside from doing what you need to do to avoid burnout, you do the thing at every possible opportunity. This means that if you're drinking a coffee, you read about code. If you're playing Playstation, you listen to a podcast about code. If you're reading a book, you're reading a book about code. You get the point.&lt;/p&gt;

&lt;p&gt;Personally speaking, my time off is normally exercising, so I always take 1 hour a day to remove myself from everything but the workout. Although, admittedly, sometimes I did use this time to listen to a YouTube video or podcast when I found something particularly difficult.&lt;/p&gt;

&lt;p&gt;By the time I had finished researching and putting this plan together, it was around mid-February 2020. My target was to be 'job-ready' (not that I knew what this particularly meant) inside 2 years studying part-time, but then Covid hit, so with lockdown and no work firmly in place, I pushed this target to being job-ready by the end of the year, with a more ambitious target of getting my first job by the end of the year. (Spoiler alert: this didn't quite happen).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-portfolio" class="anchor"&gt;
  &lt;/a&gt;
  The Portfolio
&lt;/h2&gt;

&lt;p&gt;I completed the FCC certificates, got a MongoDB certificate, created an obligitory to do list in React, made a full stack blogging app with Django, made a full stack social media app with React, Express, Redux and Firebase, got 2 freelance clients and designed and built a modern brochure site for one using Node.js, Gulp, Sass and Pug, and designed and built a custom e-commerce solution for the other using PHP, Node.js, Gulp, Sass and Wordpress. I also designed and built my portfolio site with React, Typescript, Gulp and Sass, complete with Dev.to API integration and a theme switcher. I also incorporated current design trends and made it as unique and interesting as I could - mainly thanks to illustratations by my brother which I animated with CSS.&lt;/p&gt;

&lt;p&gt;It was now time to start the 'get out there' part of my journey, so I stopped the projects, stopped the tutorials and started making my CV, signed up to LinkedIn and bookmarked a load of tech-orientated recruitment companies to contact.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-happened" class="anchor"&gt;
  &lt;/a&gt;
  So what happened?
&lt;/h2&gt;

&lt;p&gt;I was fully prepared to be job hunting for months. In my head, I had set a target for a 3-month long job search, but in reality, I knew that even this was impossible to gauge. After all, I had no idea how good or bad my code was or how well suited I was to the tech industry! I had also never interviewed for a job in my life and had no qualifications to speak of, so there was that too.&lt;/p&gt;

&lt;p&gt;Ok ok so what happened?!&lt;/p&gt;

&lt;p&gt;Well...&lt;/p&gt;

&lt;p&gt;I ran &lt;code&gt;npm run build&lt;/code&gt; on my portfolio project, published a few blog posts on Dev.to, made my CV, uploaded my CV to LinkedIn and set my profile to 'actively seeking work' or whatever the setting is. I also uploaded my CV to CV Library and then... I went to bed.&lt;/p&gt;

&lt;p&gt;This was on Thursday 11th February 2021, 322 days after my first git commit.&lt;/p&gt;

&lt;p&gt;I was going to give myself the weekend and begin my 8-hour a day job search on Monday.&lt;/p&gt;

&lt;p&gt;However, on Friday 12th Feb, I had about 20 emails and my phone was ringing off the hook all day (literally) with recruiters wanting a chat. I hadn't sent a single email.&lt;/p&gt;

&lt;p&gt;By the end of Friday, I had 4 interviews lined up for the following week.&lt;/p&gt;

&lt;p&gt;By the end of the following week, I had 3 second-round interviews.&lt;/p&gt;

&lt;p&gt;On the 26th Feb, I had a job offer.&lt;/p&gt;

&lt;p&gt;I started my mid-level, remote software engineering role on 1st March 2021 for a start-up in London, building a platform that aims to help people.&lt;/p&gt;

&lt;p&gt;Nearly 1 month on, I am still getting messages every day with job specs and interview requests from all kinds of different companies, large and small across a plethora of industries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isnt-this-abnormal-though" class="anchor"&gt;
  &lt;/a&gt;
  Isn't this abnormal though?
&lt;/h2&gt;

&lt;p&gt;The short answer is, I have no idea! Based on what I've seen, read and heard from other people, YES, this is a fairly unique position to be in and I am very grateful and feel very fortunate. However, it does show you what's possible and how in demand developers and engineers are right now.&lt;/p&gt;

&lt;p&gt;This is by no means an "I'VE MADE IT!" post. This is much more an "I've got my foot in the door, and here's how you can do it too!" post. I still work evenings and weekends to get better at what I do, and to bring more value to whomever I work with or for and ultimately, create more value for myself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-this-means-for-you" class="anchor"&gt;
  &lt;/a&gt;
  What this means for you
&lt;/h2&gt;

&lt;p&gt;I'm aiming to write another post about my first month in tech and all the things I've learned during this whole process as I think that will be of more value to new and aspiring devs, but for now, the key takeaways I have to help land your first position are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a plan and stick to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do everything you can to show your passion: blog posts, social media and, most importantly, personal and unique projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub. Get those green squares. It's simple, easy to achieve and it's visual.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Think like an engineer. Ultimately, this is what landed me my first role. Learning syntax in the grand scheme of things is easy. Thinking like an engineer is the biggest challenge and is ultimately invaluable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus your CV around your achievements in tech. Created a website for a client? Great! What did this mean for the business?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop a passion for the process of learning and even the process of finding a job. Enjoy the challenge of it all. It's no fun if you're not having fun.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, you will struggle. You will feel dumb. You will feel like giving up. But, it's those who keep going that succeed. So....&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Keep going!&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;If you're interested, here's &lt;a href="https://www.maxcoghlan.com"&gt;a link to my portfolio&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>motivation</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>[CSS] You Don't Know Margins</title>
      <author>Carlos Augusto M. Filho</author>
      <pubDate>Sun, 21 Mar 2021 18:10:18 +0000</pubDate>
      <link>https://dev.to/camfilho/css-you-don-t-know-margins-3mh0</link>
      <guid>https://dev.to/camfilho/css-you-don-t-know-margins-3mh0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Some of the challenges in developing a website are its layout, legibility, spacing. In those cases, one solution could possibly be a smart use of margin. But, do you really know how the property &lt;code&gt; margin &lt;/code&gt; works?&lt;/p&gt;

&lt;p&gt;Before moving on, I have a challenge for you.&lt;/p&gt;

&lt;p&gt;Liquid error: internal&lt;/p&gt;

&lt;p&gt;The solution lies on margin collapse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This article is organized as follows:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Definition&lt;/li&gt;
&lt;li&gt;Why?&lt;/li&gt;
&lt;li&gt;When?&lt;/li&gt;
&lt;li&gt;When not?&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#definition" class="anchor"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://duckduckgo.com/"&gt;DuckDuckGoing&lt;/a&gt; around about Margin Collapse, I have found some definitions about it, here I bring a summary of them.&lt;/p&gt;

&lt;p&gt;Accordingly to W3.org, margin collapse is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The adjoining margins of two or more boxes can combine to form a single margin.[...] the resulting is called collapsing margin."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A more comprehensive definition is given by CSS-Tricks:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Collapsing margins happens when two vertical margins come in contact with one another."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The final definition that I bring is given by MDN:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The top and bottom margins of blocks are sometimes combined (collapsed) into a single margin whose size is the largest of the individual margins."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While those definitions do a good job in describing what margin collapse is, bellow I show some cases where this collapse happens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why" class="anchor"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;Before moving on to the examples, I need to explain why it happens.&lt;/p&gt;

&lt;p&gt;One of the reasons that CSS uses margin collapse I found on &lt;a href="https://medium.com/@YeshaS93/collapsing-margins-a9d7d3f7be6e"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The concept of margin collapsing comes from graphic design. There, you have margins to title and subtitles, but when a subtitle comes just after the title you should not double the margins. This is why they developed the concept of collapsed margins and this is why it happens just on vertical margins.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using the power of margin collapsing, it is easily possible to define &lt;br&gt;
margins to sets of vertical content.&lt;/p&gt;

&lt;p&gt;I explain, imagine we had a set of 3 paragraphs with this property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;p {
 margin-top: 10px;
}

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
//10px margin
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; My First Paragraph &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
//10px margin
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; My Second Paragraph &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
//10px margin
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; My Third Paragraph &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
//0 margin
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The spacing wouldn't be equally spaced. An easy solution to this lies on the margin collapse.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;p {
 margin-top: 10px;
 margin-bottom: 10px;
}

&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
//10px margin
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; My First Paragraph &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
//10px margin (collapsed)
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; My Second Paragraph &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
//10px margin (collapsed)
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; My Third Paragraph &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
//10px margin
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#when" class="anchor"&gt;
  &lt;/a&gt;
  When?
&lt;/h2&gt;

&lt;p&gt;If there is one thing to remember when you leave this page is that &lt;strong&gt;collapsing only happens on vertical margins&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The main scenarios are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parent-and-descendants" class="anchor"&gt;
  &lt;/a&gt;
  Parent and Descendants
&lt;/h3&gt;

&lt;p&gt;If no border, padding, inline part or clearance separate the margin-top of a parent to his first child, then it is going to collapse.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FKZWZ-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/3u6e6fgj1w796auccp5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FKZWZ-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/3u6e6fgj1w796auccp5r.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same happens with the last child of the parent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSsE-lsN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/4or2viiyxoy4562gduvv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSsE-lsN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/4or2viiyxoy4562gduvv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adjacent-siblings" class="anchor"&gt;
  &lt;/a&gt;
  Adjacent Siblings
&lt;/h3&gt;

&lt;p&gt;When there are adjacent siblings, the margin-bottom of the top element collapses with the margin-top of the bottom element. The resulting size is the biggest between the two.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLLTbhLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/fyhhl598dgjbp1h6q1hd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLLTbhLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/fyhhl598dgjbp1h6q1hd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#empty-blocks" class="anchor"&gt;
  &lt;/a&gt;
  Empty Blocks
&lt;/h3&gt;

&lt;p&gt;The margin-top and margin-bottom of an empty block collapse if there are no padding, border, inline content avoiding it. Also, it does not collapse if the block does not have a height or min-height attribute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--euSyoEVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/sa87hszmhfou48svch8z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--euSyoEVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/sa87hszmhfou48svch8z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#negative-margins" class="anchor"&gt;
  &lt;/a&gt;
  Negative Margins
&lt;/h3&gt;

&lt;p&gt;When it comes to negative margins, the resulting size depends on the signals involved.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#negative-positive" class="anchor"&gt;
  &lt;/a&gt;
  Negative + Positive
&lt;/h4&gt;

&lt;p&gt;The resulting size of a negative margin and a positive margin is their algebric sum.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aw47Awqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/jm0texf4hh51tb5peywf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aw47Awqx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/jm0texf4hh51tb5peywf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#negative-negative" class="anchor"&gt;
  &lt;/a&gt;
  Negative + Negative
&lt;/h4&gt;

&lt;p&gt;When both margins are negative, the resulting size is similar when there are positive + positive. In this, the most negative one wins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6pLfcA6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/gfrou7kk1ciqdgxbbhwm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6pLfcA6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/gfrou7kk1ciqdgxbbhwm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-not" class="anchor"&gt;
  &lt;/a&gt;
  When not?
&lt;/h2&gt;

&lt;p&gt;There are many exceptions to the collapsing rule that it would be hard to know it by heart. &lt;br&gt;
Here I show some examples when the margins do not collapse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nonblocklevel-elements" class="anchor"&gt;
  &lt;/a&gt;
  Non-Block-Level Elements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt; Flex Items&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; &lt;code&gt;Grid Items &lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; &lt;code&gt; Absolutely positioned items&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; &lt;code&gt;Other non-block-elements &lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#border-or-padding-property-on-the-parent-element" class="anchor"&gt;
  &lt;/a&gt;
  Border or Padding Property on the Parent Element
&lt;/h3&gt;

&lt;p&gt;If there is a border-top or padding-top between the parent and the first-child.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L_yxCJFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/8g2bj1sco8xs42ra4dwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_yxCJFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/8g2bj1sco8xs42ra4dwg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same happens if there is a border-bottom or padding-bottom between the parent and its last-child.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dvy1paYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/755l2emdr2psof592bdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dvy1paYj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/755l2emdr2psof592bdb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#horizontal-margins" class="anchor"&gt;
  &lt;/a&gt;
  Horizontal Margins
&lt;/h3&gt;

&lt;p&gt;The horizontal margins never collapse.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuSExDHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/urj7mr9n82mreso954dq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuSExDHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/urj7mr9n82mreso954dq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5RAi9KCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/7osydb3fqh1047zs3mmx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5RAi9KCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://thepracticaldev.s3.amazonaws.com/i/7osydb3fqh1047zs3mmx.jpg" width="400px"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though it came with the idea of easing our lives, It can be really tricky to deal with margin collapse. This is mainly because of the many rules and exceptions has grown since the invention of it. One possible solution that it is easy to remember and understand is only applying margin-top to the elements. To read more about the possible solutions, &lt;a href="https://csswizardry.com/2012/06/single-direction-margin-declarations/"&gt;Harry Robert&lt;/a&gt; discuss more on his article.&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/camfilho"&gt;Twitter&lt;/a&gt; and comment down below your thoughts on this.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How I Made an Inaccessible Site Accessible for Myself with UserCSS</title>
      <author>Eevis (she/her)</author>
      <pubDate>Sun, 21 Mar 2021 16:26:43 +0000</pubDate>
      <link>https://dev.to/eevajonnapanula/how-i-made-an-inaccessible-site-accessible-for-myself-with-usercss-53f3</link>
      <guid>https://dev.to/eevajonnapanula/how-i-made-an-inaccessible-site-accessible-for-myself-with-usercss-53f3</guid>
      <description>&lt;p&gt;As mentioned in the &lt;a href="https://dev.to/eevajonnapanula/you-make-my-head-spin-reducing-the-motion-on-web-328b"&gt;blog post about reducing motion&lt;/a&gt;, I'm sensitive to certain types of movement on the web. For a long time, I've been wondering if there is a way to access and change websites' styles and modify them to not include that kind of movement. &lt;/p&gt;

&lt;p&gt;A few weeks ago, my colleague &lt;a href="https://twitter.com/isfotis"&gt;Fotis&lt;/a&gt; demonstrated how to do this with user styles. I finally found the missing piece - I already knew how to remove or change the problematic things, but didn't know how to inject new styles into the pages.&lt;/p&gt;

&lt;p&gt;In this blog post, I share how I wrote some simple enhancements for &lt;a href="https://mimmitkoodaa.ohjelmistoebusiness.fi/"&gt;Mimmit Koodaa&lt;/a&gt;'s (a Finnish initiative for getting more women to tech) webpage. They have some animations and auto-playing videos as background. As those animations can make me a bit dizzy and nauseous, and videos that automatically play are just distracting, I wanted to remove these factors from the website. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stylus" class="anchor"&gt;
  &lt;/a&gt;
  Stylus
&lt;/h2&gt;

&lt;p&gt;For injecting the user styles to the site, I'm using the Stylus Chrome extension. If you want to read more, here's their repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/openstyles"&gt;
        openstyles
      &lt;/a&gt; / &lt;a href="https://github.com/openstyles/stylus"&gt;
        stylus
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Stylus - Userstyles Manager
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The basic idea with the Stylus extension is that users can use, edit and save user styles from either userstyles.org or self-hosted user styles (with postfixes &lt;code&gt;.user.css&lt;/code&gt; and &lt;code&gt;.user.styl&lt;/code&gt;). I'm self-hosting my code on Github, and you can find the link to the repository at the end of the blog post. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-styles" class="anchor"&gt;
  &lt;/a&gt;
  Writing the styles
&lt;/h2&gt;

&lt;p&gt;As mentioned, I'm writing the styles with UserCSS. If you're interested in the syntax, or UserCSS in general, head to &lt;a href="https://github.com/openstyles/stylus/wiki/Writing-UserCSS"&gt;Stylus' docs about UserCSS&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animation" class="anchor"&gt;
  &lt;/a&gt;
  Animation
&lt;/h3&gt;

&lt;p&gt;On the website, &lt;a href="https://mimmitkoodaa.ohjelmistoebusiness.fi/thisisnotawebinar/"&gt;on the page for this spring's launch event&lt;/a&gt;,  there are animations behind the headings that shift horizontally when scrolling vertically. It's especially problematic for me, so that is one thing I wanted to get rid of.  &lt;/p&gt;

&lt;p&gt;I've fiddled with many websites to try to turn their animations off, and I've seen many different solutions. I was a bit afraid of what I would find. This time, animations were done with good old transitions, and I was happy. That is easy to fix.&lt;/p&gt;

&lt;p&gt;I decided to go with the "remove motion"-solution for this instead of just reducing motion. All of the headings have a class of &lt;code&gt;elementor-motion-effects-container&lt;/code&gt;, which wraps the heading-element and the image behind the header. That image is the one that transitions. Thus it's possible to target all the elements inside the container and set transition to none. Targeting all the child elements is done just in case if there ever appears something else that moves.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.elementor-motion-effects-container&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Another problem on the launch website was the image gallery. I wanted to remove the animation from when images appear. They slide in, and it was a bit distracting.&lt;/p&gt;

&lt;p&gt;Finding the correct class to set the properties wasn't easy. I went through multiple classes having different transformations and finally found the correct element.&lt;/p&gt;

&lt;p&gt;Here's how I removed the animation:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.elementor-gallery-item__image.e-gallery-image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#video" class="anchor"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;On the same page, there is an auto-playing video behind the hero/banner. As it's impossible to fiddle with the auto-playing attribute or pause the video with css, I decided to just remove the video. Luckily, there is actually a static background image behind the video, so the layout doesn't get messed up when removing something.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#complete-styles" class="anchor"&gt;
  &lt;/a&gt;
  Complete Styles
&lt;/h2&gt;

&lt;p&gt;You can find the complete styles and instructions on how to install them from the repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/eevajonnapanula"&gt;
        eevajonnapanula
      &lt;/a&gt; / &lt;a href="https://github.com/eevajonnapanula/mimmit-koodaa-motion-safer-css"&gt;
        mimmit-koodaa-motion-safer-css
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Motion safe UserCSS for Mimmit Koodaa-website
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;I'm thrilled that I've found the tools to make the web more usable for myself by modifying the websites' styles. Of course, there are a ton of other use cases for UserCSS, and I can't wait to explore them. &lt;/p&gt;

&lt;p&gt;However, this does not mean that the responsibility of making the web usable and accessible is on the users - accessibility is definitely a thing developers should learn and be concerned with when creating user interfaces. Even if I have the tools to modify the site for myself, it doesn't mean that most people have.&lt;/p&gt;

&lt;p&gt;Have you ever tried out UserCSS or similar solutions? &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@epicantus"&gt;Daria Nepriakhina&lt;/a&gt; on &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>a11y</category>
      <category>webdev</category>
      <category>ux</category>
    </item>
    <item>
      <title>Python Asterisks</title>
      <author>Siddharth Chandra</author>
      <pubDate>Sun, 21 Mar 2021 15:39:56 +0000</pubDate>
      <link>https://dev.to/siddharth2016/python-asterisks-2j6i</link>
      <guid>https://dev.to/siddharth2016/python-asterisks-2j6i</guid>
      <description>&lt;p&gt;Asterisk, we all know is a little star symbol (*), used in programming languages for multiplication and other tasks like pointer declaration!&lt;/p&gt;

&lt;p&gt;In Python, there is no pointer concept, but still, asterisks carry some amazing abilities to ease the life of a programmer.&lt;/p&gt;

&lt;p&gt;In this article, we are going to see some of the most used use-cases of the asterisk symbol!&lt;/p&gt;

&lt;p&gt;Then, let's get started 😎&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#multiplication-and-exponentiation" class="anchor"&gt;
  &lt;/a&gt;
  Multiplication and Exponentiation
&lt;/h3&gt;

&lt;p&gt;Asterisk symbol most common use case is for accomplishing multiplication tasks (that we all know) and in python, it provides yet another much-needed task of exponentiation with the help of using 2 asterisks instead of 1 (amazing, right !).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="c1"&gt;# 8
&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;    &lt;span class="c1"&gt;# 8, exponentiation
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unpacking-iterable-objects" class="anchor"&gt;
  &lt;/a&gt;
  Unpacking Iterable Objects
&lt;/h3&gt;

&lt;p&gt;Asterisks can be used to unpack a list or any iterable data type. Simple, just put an asterisk in front of the variable that contains iterable needed to be unpacked and voila, you get your unpacked data!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;alist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;blist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ctuple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;combined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;alist&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;blist&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctuple&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# tedious, less pythonic
&lt;/span&gt;
&lt;span class="n"&gt;unpacked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;blist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ctuple&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;        &lt;span class="c1"&gt;# hmm, cool, right ? more pythonic
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use this kind of unpacking to assign some values to a variable. For example, we need the first element of the list in a variable and all other elements in another variable, then something like this will do the trick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;       &lt;span class="c1"&gt;# b = 1 and c = [2, 3, 4]
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#restrict-functions-to-keyword-only-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Restrict Functions to Keyword Only Arguments
&lt;/h3&gt;

&lt;p&gt;Asterisks in python can be used to restrict a function so that it can take only keyword arguments, but how? let's look at an example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;someFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secondarg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;someFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;# Raises Exception - TypeError: someFunc takes 0 positional arguments, but 2 were given
&lt;/span&gt;
&lt;span class="n"&gt;someFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstarg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secondarg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# Works like magic !
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To restrict the function to take keyword arguments only, place an asterisk symbol before the arguments you want to be restricted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;someFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zerotharg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secondarg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# Here, zerotharg is a positional argument (which we can use as a keyword also, but not restricted to it) and firstarg and secondarg (after the asterisk) are keyword-only (restricted) arguments.
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unpack-multiple-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Unpack Multiple Arguments
&lt;/h3&gt;

&lt;p&gt;Using an asterisk to get multiple arguments in a function is no less than magic in itself. Even, we can get multiple keyword arguments, that's insane!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;someFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;*args&lt;/code&gt; will take multiple positional arguments, unpacking them as a tuple (can be accessed using indices) and &lt;code&gt;**kwargs&lt;/code&gt; will take multiple keyword arguments, unpacking them as a dictionary (can be accessed as a dict key-value).&lt;/p&gt;




&lt;p&gt;That's it from me!&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading the article and if you have reached to this point, then what are you waiting for, hit follow button, share this with your friends and let others know the beauty of the python programming language!&lt;/p&gt;




&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
