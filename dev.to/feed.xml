<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Create an animated sidebar with TailwindCSS in Reactüí´</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Tue, 21 Dec 2021 08:37:38 +0000</pubDate>
      <link>https://dev.to/byteslash/create-an-animated-sidebar-with-tailwindcss-in-react-1kjc</link>
      <guid>https://dev.to/byteslash/create-an-animated-sidebar-with-tailwindcss-in-react-1kjc</guid>
      <description>&lt;p&gt;Hey everyone, in many apps you need a sidebar/drawer which slides in if you click on a hamburger icon. In this tutorial, we are going to see how to build that üåü.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/b748e5d32ebd4552aebf78be01d63408"&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Creating a new react app-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app animated-sidebar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-tailwindcss"&gt;
  &lt;/a&gt;
  Setting up tailwindCSS
&lt;/h3&gt;

&lt;p&gt;Installing Tailwind-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configuring paths-&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;tailwind.config.jd&lt;/code&gt; replace the content with this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add tailwindCSS to CSS&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;index.css&lt;/code&gt; add this code block-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-sidebar"&gt;
  &lt;/a&gt;
  Creating the sidebar
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#making-a-new-component"&gt;
  &lt;/a&gt;
  Making a new component
&lt;/h3&gt;

&lt;p&gt;I am going to create a separate component for Sidebar, so create a file &lt;code&gt;Sidebar.js&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; folder. Now create a functional component-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Sidebar = () =&amp;gt; {
  return (
    &amp;lt;div&amp;gt;

    &amp;lt;/div&amp;gt;
  )
}

export default Sidebar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rendering-the-sidebar-component"&gt;
  &lt;/a&gt;
  Rendering the Sidebar component
&lt;/h3&gt;

&lt;p&gt;We also need to render the component so add this in &lt;code&gt;App.js&lt;/code&gt;-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Sidebar from "./Sidebar";

function App() {
  return (
    &amp;lt;div className="flex flex-col items-center justify-center min-h-screen py-2"&amp;gt;
      &amp;lt;Sidebar /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should show us an empty canvas now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-basic-sidebar"&gt;
  &lt;/a&gt;
  Making a basic sidebar
&lt;/h3&gt;

&lt;p&gt;I am going to make a simple div with a text in it-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="top-0 right-0 w-[35vw] bg-blue-600  p-10 pl-20 text-white fixed h-full "&amp;gt;
  &amp;lt;h2 className="mt-20 text-4xl font-semibold text-white"&amp;gt;I am a sidebar&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us a simple, blue sidebar on the right side-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6em4D8zT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640060870893/1FSVXdoyT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6em4D8zT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640060870893/1FSVXdoyT.png" alt="image.png" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-open-and-closed-states"&gt;
  &lt;/a&gt;
  Handling open and closed states
&lt;/h3&gt;

&lt;p&gt;Create a useState to store a boolean value that decides if we should or shouldn't show the sidebar-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [showSidebar, setShowSidebar] = useState(false);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to show buttons/icons to open and close the sidebar so I will wrap the whole thing in a fragment, add a button to close, and a hamburger icon to open -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;&amp;gt;
  {showSidebar ? (
    &amp;lt;button
      className="flex text-4xl text-white items-center cursor-pointer fixed right-10 top-6 z-50"
      onClick={() =&amp;gt; setShowSidebar(!showSidebar)}
    &amp;gt;
      x
    &amp;lt;/button&amp;gt;
  ) : (
    &amp;lt;svg
      onClick={() =&amp;gt; setShowSidebar(!showSidebar)}
      className="fixed  z-30 flex items-center cursor-pointer right-10 top-6"
      fill="#2563EB"
      viewBox="0 0 100 80"
      width="40"
      height="40"
    &amp;gt;
      &amp;lt;rect width="100" height="10"&amp;gt;&amp;lt;/rect&amp;gt;
      &amp;lt;rect y="30" width="100" height="10"&amp;gt;&amp;lt;/rect&amp;gt;
      &amp;lt;rect y="60" width="100" height="10"&amp;gt;&amp;lt;/rect&amp;gt;
    &amp;lt;/svg&amp;gt;
  )}

  &amp;lt;div className="top-0 right-0 w-[35vw] bg-blue-600  p-10 pl-20 text-white fixed h-full z-40"&amp;gt;
    &amp;lt;h3 className="mt-20 text-4xl font-semibold text-white"&amp;gt;I am a sidebar&amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will not make any difference right now but let's add some conditional classes to the main sidebar div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div
  className={`top-0 right-0 w-[35vw] bg-blue-600  p-10 pl-20 text-white fixed h-full z-40 ${
    showSidebar ? "translate-x-0 " : "translate-x-full"
  }`}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the &lt;code&gt;showSidebar&lt;/code&gt; variable is true then it will add the &lt;code&gt;translate-x-0&lt;/code&gt; otherwise &lt;code&gt;translate-x-full&lt;/code&gt;. Our sidebar now works üéâ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/c9ddedafa8ca4cf7873f930f4aa52863"&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But it isn't smooth so let us see how to make the animation smooth. Just add these two classes to the blue div-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ease-in-out duration-300
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The div should look like this now-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div
  className={`top-0 right-0 w-[35vw] bg-blue-600  p-10 pl-20 text-white fixed h-full z-40  ease-in-out duration-300 ${
    showSidebar ? "translate-x-0 " : "translate-x-full"
  }`}
&amp;gt;
  &amp;lt;h3 className="mt-20 text-4xl font-semibold text-white"&amp;gt;I am a sidebar&amp;lt;/h3&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our sidebar animation looks very smooth and great! ü•≥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/b748e5d32ebd4552aebf78be01d63408"&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you liked this tutorial and add nice animation to the sidebar in your project. Peace ‚úåÔ∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/avneesh0612/animated-sidebar"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.avneesh.tech/animate-and-change-header-background-on-scroll"&gt;Animate and Change Header Background on Scroll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://links.avneesh.tech/"&gt;Connect with me&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>react</category>
      <category>animation</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to add login authentication to a Flask and React application. </title>
      <author>Faruq Abdulsalam</author>
      <pubDate>Tue, 21 Dec 2021 08:14:51 +0000</pubDate>
      <link>https://dev.to/nagatodev/how-to-add-login-authentication-to-a-flask-and-react-application-23i7</link>
      <guid>https://dev.to/nagatodev/how-to-add-login-authentication-to-a-flask-and-react-application-23i7</guid>
      <description>&lt;p&gt;In &lt;code&gt;flask&lt;/code&gt;, adding authentication has been made quite easy with the &lt;code&gt;@login_required&lt;/code&gt; decorator in the flask extension &lt;code&gt;Flask-login&lt;/code&gt;. I have an article on how to add basic authentication to your flask application that you can read up on &lt;a href="https://dev.to/nagatodev/adding-authentication-to-a-flask-application-53ep"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, since you will be working with API endpoints you can't use the approach above because the &lt;code&gt;@login_required&lt;/code&gt; decorator redirects to the application to an &lt;code&gt;HTML page&lt;/code&gt; when it discovers a user that is not authenticated trying to access a protected page. This defeats the idea of creating API endpoints as APIs are only designed to return data in &lt;code&gt;json&lt;/code&gt; format.&lt;/p&gt;

&lt;p&gt;In this part of the series, you'll be learning how to add authentication to the connected React and Flask application you built in the previous part of the series. Authentication will be done with the flask extension: &lt;a href="https://flask-jwt-extended.readthedocs.io/en/stable/basic_usage/"&gt;flask-jwt-extended&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;1) Beginner-level understanding of the flask framework. If you are new to &lt;code&gt;Flask&lt;/code&gt; you can check out my &lt;a href="https://dev.to/nagatodev/getting-started-with-flask-1kn1"&gt;article&lt;/a&gt; on how to set up your flask project and use it with the &lt;a href="https://palletsprojects.com/p/jinja/"&gt;jinja&lt;/a&gt; template engine. &lt;/p&gt;

&lt;p&gt;2) I strongly advise you to read the previous &lt;a href="https://dev.tohello"&gt;article&lt;/a&gt;. You can also get the files in the Github &lt;a href="https://github.com/Faruqt/React-Flask"&gt;repo&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;3) Familiarity with the basics of &lt;code&gt;ReactJs&lt;/code&gt;. You will be making use of the &lt;code&gt;useState&lt;/code&gt; hook, fetching data from API endpoints using &lt;code&gt;axios&lt;/code&gt; and also using &lt;code&gt;react-router-dom&lt;/code&gt; to handle routing of components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started!!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flask-backend"&gt;
  &lt;/a&gt;
  Flask Backend
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installing-the-flask-extension"&gt;
  &lt;/a&gt;
  Installing the flask extension.
&lt;/h3&gt;

&lt;p&gt;Navigate into the &lt;code&gt;backend&lt;/code&gt; directory and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pip&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;jwt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;extended&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; If you cloned the repo, you don't need to run the command above, just set up your flask application with the instructions in the &lt;code&gt;README.md&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basepy"&gt;
  &lt;/a&gt;
  base.py
&lt;/h3&gt;

&lt;p&gt;You'll be adding authentication to the &lt;code&gt;/profile&lt;/code&gt; API endpoint created in the previous tutorial. Navigate to the &lt;code&gt;base.py&lt;/code&gt; script you created in the backend directory of your application to create the token(login) and logout API endpoints.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tokenlogin-api-endpoint"&gt;
  &lt;/a&gt;
  token(login) API endpoint
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;flask&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonify&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timezone&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;flask_jwt_extended&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;create_access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;get_jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;get_jwt_identity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
                               &lt;span class="nx"&gt;unset_jwt_cookies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jwt_required&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JWTManager&lt;/span&gt;


&lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT_SECRET_KEY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;please-remember-to-change-me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JWTManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;create_token&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wrong email or password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;

    &lt;span class="nx"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;access_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;my_profile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nx"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nagato&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello! I'm a full stack developer that loves python and javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response_body&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go through the code above:&lt;/p&gt;

&lt;p&gt;First, the required functions are imported from the installed &lt;code&gt;flask_jwt_extended&lt;/code&gt; extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;flask_jwt_extended&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;create_access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;get_jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;get_jwt_identity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
                               &lt;span class="nx"&gt;unset_jwt_cookies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jwt_required&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JWTManager&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, the flask application instance is configured with the &lt;code&gt;JWT&lt;/code&gt; secret key then passed as an argument to the &lt;code&gt;JWTManager&lt;/code&gt; function and assigned to the &lt;code&gt;jwt&lt;/code&gt; variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT_SECRET_KEY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;please-remember-to-change-me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JWTManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;token&lt;/code&gt; API endpoint will have a &lt;code&gt;POST&lt;/code&gt; request method. Whenever the user submits a login request, the email and password are extracted and compared with the hardcoded email(test) and password(test). Please &lt;strong&gt;note&lt;/strong&gt; that in an ideal scenario you are going to compare the extracted login details with data in your database.&lt;/p&gt;

&lt;p&gt;If the login details are not correct, the error message &lt;code&gt;Wrong email or password&lt;/code&gt; with the status code &lt;code&gt;401&lt;/code&gt; which means &lt;code&gt;UNAUTHORIZED Error&lt;/code&gt; is sent back to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wrong email or password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Else if the login details are confirmed to be correct, an access token is created for that particular email address by assigning the &lt;code&gt;email&lt;/code&gt; to the &lt;code&gt;identity&lt;/code&gt; variable. Finally, the token is returned to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;access_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test this, start your backend server with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please &lt;strong&gt;note&lt;/strong&gt; that the command above was specified in the &lt;code&gt;package.json&lt;/code&gt; file in the react frontend. This was done in the previous part of the series. If you have not checked it out yet, please head &lt;a href="https://dev.to/nagatodev/how-to-connect-flask-to-reactjs-1k8i"&gt;there&lt;/a&gt; so you can learn how to set it up. However if you have already cloned the repo, let's proceed.&lt;/p&gt;

&lt;p&gt;Next, open up &lt;a href="https://web.postman.co/"&gt;postman&lt;/a&gt; and send a &lt;code&gt;POST&lt;/code&gt; request to this API endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:5000/token&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll get a &lt;code&gt;500 internal server&lt;/code&gt; error üëá&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTG10w6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6evm5ix4axj1rp2mb12o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTG10w6q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6evm5ix4axj1rp2mb12o.png" alt="500 internal server error" width="880" height="262"&gt;&lt;/a&gt; &lt;br&gt;
Check your terminal and you'll see the error as well üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3t7qEqkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7typdk0o3cso8ayb8e91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3t7qEqkK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7typdk0o3cso8ayb8e91.png" alt="terminal nonetype error" width="880" height="258"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;AttributeError: 'NoneType' object has no attribute 'get'&lt;/code&gt; the error occurred because you did not specify the login details when you made the &lt;code&gt;POST&lt;/code&gt; request to the API endpoint thus a &lt;code&gt;None&lt;/code&gt; value was passed as an argument to the &lt;code&gt;request.json.get&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;Return to &lt;code&gt;POSTMAN&lt;/code&gt; and pass the login details along with the &lt;code&gt;POST&lt;/code&gt; request.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5JttQVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iifymp0j2ymp9rv8snlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5JttQVY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iifymp0j2ymp9rv8snlw.png" alt="login details" width="880" height="277"&gt;&lt;/a&gt;&lt;br&gt;
 Please ensure you adjust your settings as circled in the image above.&lt;/p&gt;

&lt;p&gt;After making the request you should get your access token in the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;access_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your access token will be here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can try to pass in a wrong email or password to see the &lt;code&gt;401 UNAUTHORIZED error&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M-jGc7o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yccpwbuhbi27bq0isz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M-jGc7o2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6yccpwbuhbi27bq0isz4.png" alt="401 UNAUTHORIZED error" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logout-api-endpoint"&gt;
  &lt;/a&gt;
  Logout API endpoint
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/logout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logout successful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;unset_jwt_cookies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When the &lt;code&gt;logout&lt;/code&gt; API endpoint is called, &lt;code&gt;response&lt;/code&gt; is passed to the &lt;code&gt;unset_jwt_cookies&lt;/code&gt; function which deletes the cookies containing the access token for the user and finally returns the success message to the user.&lt;/p&gt;

&lt;p&gt;Head over to &lt;code&gt;Postman&lt;/code&gt; once again and make a POST request to the &lt;code&gt;logout&lt;/code&gt; API endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:5000/logout&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get the response below üëá&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2u7jUKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwhgdiyrmqlzkse9juro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2u7jUKt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwhgdiyrmqlzkse9juro.png" alt="logout api call" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#refreshing-tokens"&gt;
  &lt;/a&gt;
  Refreshing tokens
&lt;/h3&gt;

&lt;p&gt;The generated token always has a &lt;code&gt;lifespan&lt;/code&gt; after which it expires. To ensure that this does not happen while the user is logged in, you have to create a function that refreshes the token when it is close to the end of its lifespan. &lt;/p&gt;

&lt;p&gt;First, specify the &lt;code&gt;lifespan&lt;/code&gt; for your generated tokens and add it as a new configuration for your application.&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt;You can change the time to suit your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT_ACCESS_TOKEN_EXPIRES&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, create the function below üëá, above the &lt;code&gt;create_token&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after_request&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;refresh_expiring_jwts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;exp_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_jwt&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;target_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;target_timestamp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;exp_timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;get_jwt_identity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
    &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Case&lt;/span&gt; &lt;span class="nx"&gt;where&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="nx"&gt;JWT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Just&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="nx"&gt;respone&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;after_request&lt;/code&gt; decorator ensures that the &lt;code&gt;refresh_expiring_jwts&lt;/code&gt; function runs after a request has been made to the protected API endpoint &lt;code&gt;/profile&lt;/code&gt;. The function takes as an argument, the response from the &lt;code&gt;/profile&lt;/code&gt; API call.&lt;/p&gt;

&lt;p&gt;Then, the current expiry timestamp for the user's token is obtained and compared with the specified &lt;code&gt;timestamp&lt;/code&gt; for the token which is set at 30 minutes. You can change this as well.&lt;/p&gt;

&lt;p&gt;If the expiry timestamp for the user's token happens to be  30minutes away from expiration, the token for that user is changed to a new one with the specified 1hr lifespan, and the new token is returned to the user. But if the token is not close to expiration, the original token is sent to the user.&lt;/p&gt;

&lt;p&gt;To conclude the backend setup, you need to add the &lt;code&gt;@jwt_required()&lt;/code&gt; decorator to the &lt;code&gt;my_profile&lt;/code&gt; function to prevent unauthenticated users from making requests to the API endpoint. But first, test the &lt;code&gt;/profile&lt;/code&gt; API endpoint by making a &lt;code&gt;GET&lt;/code&gt; request to the URL below using &lt;code&gt;Postman&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:5000/profile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should still get the json form of the dictionary created in the last article.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zJQTBcnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zisjb8jrudw85xo1gn6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zJQTBcnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zisjb8jrudw85xo1gn6u.png" alt="json form of profile api call" width="880" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, add the &lt;code&gt;@jwt_required()&lt;/code&gt; decorator&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;jwt_required&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;my_profile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nx"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nagato&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello! I'm a full stack developer that loves python and javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response_body&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and try to make the API request to the &lt;code&gt;/profile&lt;/code&gt; endpoint using the URL above. You'll get a &lt;code&gt;401 UNAUTHORIZED error&lt;/code&gt; because the token was absent when you made the request. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--__OSp0zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euujk8xxoproqdf7o8ef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__OSp0zz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euujk8xxoproqdf7o8ef.png" alt="unauthorized error" width="880" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the user logs in and gets the assigned token, the token needs to be sent with each call the user makes to the API endpoints in the backend as an &lt;code&gt;Authorization Header&lt;/code&gt; in this format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bearer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before you head over to the frontend, you can also test this on &lt;code&gt;Postman&lt;/code&gt; by adding the user's token to the Authorization header before you call the protected &lt;code&gt;\profile&lt;/code&gt; API endpoint.&lt;/p&gt;

&lt;p&gt;Make a &lt;code&gt;POST&lt;/code&gt; request to the endpoint below to get your token and copy it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//127.0.0.1:5000/token&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add the &lt;code&gt;authorization&lt;/code&gt; header key with your &lt;code&gt;token&lt;/code&gt; as its value and then send the &lt;code&gt;GET&lt;/code&gt; request, you should get a json response containing the dictionary with your name and about_me info.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1b1qdaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cakm1vcyb4s7p4a1w7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1b1qdaU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cakm1vcyb4s7p4a1w7i.png" alt="authorization header added" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations you have successfully added authentication to your API endpoint. After the changes and additions, this should be the final look of the &lt;code&gt;base.py&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;flask&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jsonify&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timezone&lt;/span&gt;
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;flask_jwt_extended&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;create_access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;get_jwt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;get_jwt_identity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
                               &lt;span class="nx"&gt;unset_jwt_cookies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;jwt_required&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JWTManager&lt;/span&gt;


&lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT_SECRET_KEY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;please-remember-to-change-me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JWT_ACCESS_TOKEN_EXPIRES&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jwt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JWTManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;after_request&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;refresh_expiring_jwts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;exp_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;get_jwt&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;target_timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;target_timestamp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;exp_timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;get_jwt_identity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
    &lt;span class="nx"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;Case&lt;/span&gt; &lt;span class="nx"&gt;where&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="nx"&gt;JWT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Just&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="nx"&gt;respone&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;create_token&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Wrong email or password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;

    &lt;span class="nx"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;access_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/logout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jsonify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logout successful&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;unset_jwt_cookies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;jwt_required&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;my_profile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nx"&gt;response_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nagato&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello! I'm a full stack developer that loves python and javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response_body&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can head over to the react frontend where you'll be making the API endpoint calls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-frontend"&gt;
  &lt;/a&gt;
  React Frontend
&lt;/h2&gt;

&lt;p&gt;In the last article, you only had to make a few changes to the &lt;code&gt;App.js&lt;/code&gt; file. But this time around major changes will be made and new components will also be created.&lt;/p&gt;

&lt;p&gt;In the frontend, a &lt;code&gt;Login&lt;/code&gt; component that will hold the login page will be created. This component will be rendered anytime it notices that an unauthenticated user is trying to access a page that contains a protected API endpoint. This will ensure that any request made to the backend has a token appended to it.&lt;/p&gt;

&lt;p&gt;To start with, create a new directory &lt;code&gt;components&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; directory and in it, four new components &lt;code&gt;Login.js&lt;/code&gt;, &lt;code&gt;useToken.js&lt;/code&gt;, &lt;code&gt;Header.js&lt;/code&gt; and &lt;code&gt;Profile.js&lt;/code&gt;. Then navigate back to the base directory and install &lt;code&gt;react-router-dom&lt;/code&gt; before you go into the components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#storage-of-token-in-the-frontend"&gt;
  &lt;/a&gt;
  Storage of token in the frontend
&lt;/h3&gt;

&lt;p&gt;The token generated from the backend needs to be stored in your web browser after you log in. Presently, that is not the case. Whenever a user refreshes his browser page, the token gets deleted and the user would be prompted to log in once again. &lt;/p&gt;

&lt;p&gt;To fix this, you'll need to make use of web storage objects: &lt;code&gt;localStorage&lt;/code&gt; or &lt;code&gt;sessionStorage&lt;/code&gt;. You can read more on that &lt;a href="https://javascript.info/localstorage"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;i)sessionStorage: The user's token gets stored in the tab currently opened in the browser. If the user refreshes the page, the token is still retained. However, if the user opens a new tab to the same page in the web browser, the token won't reflect on that page as the new tab doesn't share the same storage with the previous one. Thus, the user would be prompted to log in again.&lt;/p&gt;

&lt;p&gt;To see this in action, open any website of your choice and open up the &lt;code&gt;Developer tools&lt;/code&gt; menu with the &lt;code&gt;Inspect Element&lt;/code&gt; or &lt;code&gt;Inspect&lt;/code&gt; option by right-clicking on any page in your browser. You can also see the web storage under the &lt;code&gt;Application&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;Open up your console and store an object sample in the web storage using the sessionStorage function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to get the value &lt;code&gt;53&lt;/code&gt; assigned to the key &lt;code&gt;test&lt;/code&gt; above run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2U-AsLRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzdztspwnzrk3afunu5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2U-AsLRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzdztspwnzrk3afunu5x.png" alt="session and local storage test" width="880" height="737"&gt;&lt;/a&gt;&lt;br&gt;
Refresh the page and run the &lt;code&gt;getItem&lt;/code&gt; function again, you'll still get the value from the storage.&lt;/p&gt;

&lt;p&gt;Now, open the link to the same page you just worked with, in a new tab, and try to access the stored object value via the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sessionStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll get a &lt;code&gt;null&lt;/code&gt; value because the current tab doesn't have access to the storage of the previous tab. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;note:&lt;/strong&gt; while carrying out all the tests above, keep an eye on the changes occurring in the &lt;code&gt;web storage&lt;/code&gt; section above your &lt;code&gt;console&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ii)localStorage: Here, the user's token get's stored in universal storage that can be accessed by all tabs and browser windows. The token is still retained even if the user refreshes or closes the page, creates a new tab or window, or restarts the browser entirely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to get the assigned value &lt;code&gt;333&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try to run the duplicate test done above, you'll notice that you can access the value from the duplicated page. You can also create a new browser window, open any page of the same website and try to access the value set above. You'll notice that you still have access to it. That is the beauty of using &lt;code&gt;localStorage&lt;/code&gt;, it ensures that the user only needs to log in once and they can easily navigate to any page on the website. &lt;/p&gt;

&lt;p&gt;Whenever you are done, you can delete the object from the storage using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usetokenjs"&gt;
  &lt;/a&gt;
  useToken.js
&lt;/h3&gt;

&lt;p&gt;Now you need to replicate what was done above in your react code. Open the &lt;code&gt;useToken&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;userToken&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;userToken&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getToken&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saveToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;removeToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;saveToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;removeToken&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;useToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the tests you carried out in the console, the functions created in the &lt;code&gt;useToken&lt;/code&gt; component should be easy to understand.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getToken&lt;/code&gt; function is used to retrieve the &lt;code&gt;token&lt;/code&gt; stored in the &lt;code&gt;localStorage&lt;/code&gt; and only returns a token if it exists hence the use of the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; conditional operator.&lt;/p&gt;

&lt;p&gt;The useState hook is used to handle the state of the &lt;code&gt;token&lt;/code&gt; variable which will contain the value of the token. This ensures that the react application always reloads when any of the functions are called. Such that when a user logs in and the token is stored or when the user logs out, the application also becomes aware that a change has occurred in the web storage of your browser and hence reacts accordingly by either redirecting to the page the user wants to access or returning to the login page once the user logs out.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;saveToken&lt;/code&gt; function handles the storage of the token obtained when the user logs in and the &lt;code&gt;setToken&lt;/code&gt; function in it updates the state of the &lt;code&gt;token&lt;/code&gt; variable with the &lt;code&gt;token&lt;/code&gt; passed as an argument to the &lt;code&gt;saveToken&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;removeToken&lt;/code&gt; function deletes the token from the local storage and returns the token back to the null state whenever it gets called.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;code&gt;saveToken&lt;/code&gt; function assigned as a value to the setToken variable, the value of the &lt;code&gt;token&lt;/code&gt; itself and the &lt;code&gt;removeToken&lt;/code&gt; function are all returned as the result of calling the &lt;code&gt;useToken&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#appjs"&gt;
  &lt;/a&gt;
  App.js
&lt;/h3&gt;

&lt;p&gt;I told you that you'll be making major changes right? üòú. Clean up &lt;code&gt;App.js&lt;/code&gt;; all the code that was added the last time will be moved into the &lt;code&gt;Profile&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/Header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useToken&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/useToken&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;removeToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;removeToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;  
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;:(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;}&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Routes&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BrowserRouter&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the top of the file, the &lt;code&gt;BrowserRouter&lt;/code&gt;, &lt;code&gt;Route&lt;/code&gt;, &lt;code&gt;Routes&lt;/code&gt; functions that will be used to handle URL routing for the profile component are imported from the installed &lt;code&gt;react-router-dom&lt;/code&gt; package. The other created components are also imported from the &lt;code&gt;components&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;App&lt;/code&gt; function, the value object returned when the &lt;code&gt;useToken&lt;/code&gt; function is called is destructured and the values are assigned to the &lt;code&gt;token&lt;/code&gt;, &lt;code&gt;removeToken&lt;/code&gt; and &lt;code&gt;setToken&lt;/code&gt; variables respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;removeToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, the &lt;code&gt;BrowserRouter&lt;/code&gt; function is made the parent component and in it, the &lt;code&gt;Header&lt;/code&gt; component is placed with the &lt;code&gt;removeToken&lt;/code&gt; function passed as an argument which is called &lt;code&gt;prop&lt;/code&gt; in react.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;removeToken&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the javascript conditional ternary operator is used to ensure that the user must have a token before having access to the &lt;code&gt;profile&lt;/code&gt; component. If the user doesn't have a token, the &lt;code&gt;Login&lt;/code&gt; component is rendered with the &lt;code&gt;setToken&lt;/code&gt; function passed as an argument. Else if the user already has a token, the &lt;code&gt;Profile&lt;/code&gt; component with the URL path &lt;code&gt;/profile&lt;/code&gt; is rendered and displayed to the user.&lt;/p&gt;

&lt;p&gt;You can read more on how to use &lt;code&gt;React Router&lt;/code&gt; &lt;a href="https://www.geeksforgeeks.org/reactjs-router/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you need to create the Login, Header, and Profile functions in your &lt;code&gt;Login&lt;/code&gt;, Header, and &lt;code&gt;Profile&lt;/code&gt; component files respectively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loginjs"&gt;
  &lt;/a&gt;
  Login.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setloginForm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logMeIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
          &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="nx"&gt;setloginForm&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;
      &lt;span class="nx"&gt;setloginForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevNote&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevNote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;login&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
                  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
                  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
                  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
                  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
                  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                  &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
                  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
                  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
                  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loginForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logMeIn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above should be easy to understand, the summary of what it does is to use the login details provided by the user to make a &lt;code&gt;POST&lt;/code&gt; request to the &lt;code&gt;/token&lt;/code&gt; API endpoint in the backend which then returns the user's token and the token is stored in the local web storage using the &lt;code&gt;setToken&lt;/code&gt; function passed as a prop to the Login function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#headerjs"&gt;
  &lt;/a&gt;
  Header.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../logo.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logMeOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/logout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App-header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App-logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logMeOut&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
                &lt;span class="nx"&gt;Logout&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the user clicks on the &lt;code&gt;Logout&lt;/code&gt; button, a &lt;code&gt;POST&lt;/code&gt; request is made to the &lt;code&gt;/logout&lt;/code&gt; API endpoint, and the cookies in which the user's JWToken is stored are cleared on the backend. The &lt;code&gt;Axios&lt;/code&gt; response function is used to call the &lt;code&gt;removeToken&lt;/code&gt; function which deletes the &lt;code&gt;token&lt;/code&gt; stored in the local web storage. Now, if the user tries to access the &lt;code&gt;/profile&lt;/code&gt; page, the user gets redirected to the login page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#profilejs"&gt;
  &lt;/a&gt;
  Profile.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProfileData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bearer &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
      &lt;span class="nx"&gt;setProfileData&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt;
        &lt;span class="na"&gt;profile_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Profile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&amp;lt;button onClick={getData}&amp;gt;Click me&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="na"&gt;me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The piece of code previously in &lt;code&gt;App.js&lt;/code&gt; was moved here. This contains the protected endpoint &lt;code&gt;\profile&lt;/code&gt;. A &lt;code&gt;GET&lt;/code&gt; request method is sent to the endpoint whenever the &lt;code&gt;Click me&lt;/code&gt; button is clicked and it responds with the user's details. &lt;/p&gt;

&lt;p&gt;For the user to be able to access the data of the &lt;code&gt;\profile&lt;/code&gt; API endpoint, an Authorization header that contains the token must be added to the axios &lt;code&gt;GET&lt;/code&gt; request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bearer &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#appcss"&gt;
  &lt;/a&gt;
  App.css
&lt;/h3&gt;

&lt;p&gt;You also need to make a change to the CSS style for the header. On line 16 you'll see the style for the header component &lt;code&gt;.App-header&lt;/code&gt;. Comment out or delete the &lt;code&gt;/* min-height: 100vh; */&lt;/code&gt; code so your application can end up looking like üëá:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9xD6eE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymn70ryf2rm1mg5gr1dn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9xD6eE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymn70ryf2rm1mg5gr1dn.png" alt="final application look" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to test your application, start the backend server by running the script below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;backend&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;followed by :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then navigate to the &lt;code&gt;http://localhost:3000/profile&lt;/code&gt; URL in your web browser and you'll be prompted to login since the page is protected. I hope you still remember the login details: &lt;code&gt;email:test&lt;/code&gt; and &lt;code&gt;password:test&lt;/code&gt;. You can also open up &lt;code&gt;localStorage&lt;/code&gt; under the &lt;code&gt;Application&lt;/code&gt; section in &lt;code&gt;Developer tools&lt;/code&gt; to monitor the token as it gets stored and deleted.&lt;/p&gt;

&lt;p&gt;It's been a long ride, but we have finally come to the end of this tutorial. With what you have learned, I believe you can easily authenticate your flask plus react applications. Congratulations on the new knowledge you just acquired.&lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to drop them as a comment or send me a message on &lt;a href="https://www.linkedin.com/in/faruq-abdulsalam-b2847b160"&gt;Linkedin&lt;/a&gt; or &lt;a href="https://twitter.com/Ace_II"&gt;Twitter&lt;/a&gt; and I'll ensure I respond as quickly as I can. Ciao üëã&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>python</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Anysite Scraper (Short Profile)</title>
      <author>ahmed software</author>
      <pubDate>Tue, 21 Dec 2021 07:59:07 +0000</pubDate>
      <link>https://dev.to/ahmedsoftware/anysite-scraper-short-profile-5jg</link>
      <guid>https://dev.to/ahmedsoftware/anysite-scraper-short-profile-5jg</guid>
      <description>&lt;p&gt;Anysite Scraper is a web scraping and web data mining software used to extract business leads (i.e. Business name, website link, address, contact person, email address, phone number, working hours etc.) as per customer requirements from any website. You can create project script with user-interface for any website as per your requirements.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>7 Essential SEO Best Practices for New Ecommerce Business in 2022</title>
      <author>Vivek Tank</author>
      <pubDate>Tue, 21 Dec 2021 07:28:14 +0000</pubDate>
      <link>https://dev.to/imvtank/7-essential-seo-best-practices-for-new-ecommerce-business-in-2022-4j65</link>
      <guid>https://dev.to/imvtank/7-essential-seo-best-practices-for-new-ecommerce-business-in-2022-4j65</guid>
      <description>&lt;p&gt;SEO (search engine optimization) is a non-negotiable key element in ecommerce web development. Your highest priority should always be ranking at the top of search engines in order to attain business success. With that, achieving the number one spot is possible with the help of ecommerce SEO. In this article, we will discuss the best and essential ecommerce SEO practices for new ecommerce businesses in 2022. Read on to understand how you can optimize your site effectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ecommerce-seo-and-why-is-it-important"&gt;
  &lt;/a&gt;
  What is eCommerce SEO and Why is it Important?
&lt;/h2&gt;

&lt;p&gt;eCommerce SEO is a free and organic process of making your website more visible on search engine results pages (SERPs). A well-ranked page will be placed higher in the SERP and bring more traffic towards your website. With that, ranking as high as possible should be your top priority.&lt;/p&gt;

&lt;p&gt;To achieve this, you need to ensure your website is optimized for search engines. The keywords you use, setup of your website, and whether it‚Äôs mobile-friendly all have a huge impact on SEO optimization.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-seo-best-practices-you-need-for-your-ecommerce-businesses"&gt;
  &lt;/a&gt;
  7 SEO Best Practices You Need for Your eCommerce Businesses
&lt;/h2&gt;

&lt;p&gt;Now that we know the importance of SEO, how do we make sure your ecommerce site is optimized? It‚Äôs essential that your products rank higher than your competitors to ensure your business‚Äô success, and you can achieve this by following these 7 easy tips:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-optimize-meta-amp-header-tags"&gt;
  &lt;/a&gt;
  1. Optimize Meta &amp;amp; Header Tags
&lt;/h3&gt;

&lt;p&gt;Meta tags provide data on what your page is about to both search engines and site visitors. These are usually invisible tags found in HTML documents, and so they need to be coded in your CMS.&lt;/p&gt;

&lt;p&gt;SERP snippets descriptions are set up using meta description tags. It‚Äôs important to note that Google will keep only the first 150-160 characters of your meta description. You need to maximize searcher interest by inserting all important information at the beginning of your meta tag.&lt;/p&gt;

&lt;p&gt;The meta description doesn‚Äôt affect SERP rank, but it‚Äôs still important to optimize it for search intent. The more relevant your description is, specifically with how accurate it is to a normal customer‚Äôs query, the more likely a user will find your page.&lt;/p&gt;

&lt;p&gt;Structuring or sectioning pages for your content is another important factor for SEO. This is made possible by using heading tags, both for the reader and search engines. Headings serve as a guide to help readers find the exact segment/answer they‚Äôre looking for.&lt;/p&gt;

&lt;p&gt;In the SERP‚Äôs perspective, heading tags form the entire gist of the content, and help search bots understand what the page is about. With that, it‚Äôs important to remember that H1 heading is treated by search engines as the title of the page.&lt;/p&gt;

&lt;p&gt;Use H1 for the title, H2 for section headings, and H3 for subsections. Treating each heading as a customer‚Äôs query or as an answer to a query is one of the common ecommerce SEO practices, as it helps give more chances for your content to rank on SERP‚Äôs.&lt;/p&gt;

&lt;p&gt;Consistency in your headings is vital as well. All of your headings should be written in such a way that if you were to remove all the text and keep only the headings, they would read like a list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-make-use-of-voice-search-optimization"&gt;
  &lt;/a&gt;
  2. Make Use of Voice Search Optimization
&lt;/h3&gt;

&lt;p&gt;Voice search has become one of the most popular ways to search on search engines. Not only is this method faster and easier, but it can be more appropriate at times as well. Similarly, since people are almost always on their mobile devices, this is more likely how they search.&lt;/p&gt;

&lt;p&gt;Optimizing this for your SEO is possible by keeping in mind question keywords, long-tail keywords, and ‚Äúfiller words.‚Äù Question keywords are the standard ‚Äúhow, what, when, why, where.‚Äù Long-tail keywords are what complete a question, while filler words are ‚ÄúI, the, of the, on the, to, for,‚Äù etc. As people utilize voice search in a conversational way, it‚Äôs important to use keywords similar to this. For example, ‚Äúwhere can I find a &lt;a href="https://www.verzdesign.com/"&gt;website design&lt;/a&gt; company in Singapore?‚Äù&lt;/p&gt;

&lt;p&gt;Restructuring your content also helps, such as including FAQ‚Äôs on your product pages. By being one step ahead of your customers and anticipating the type of questions they‚Äôll ask, as well as the frequency, not only helps them but also helps SERP‚Äôs redirect them straight to the answer they are looking for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-insert-keywords-into-your-content"&gt;
  &lt;/a&gt;
  3. Insert Keywords into Your Content
&lt;/h3&gt;

&lt;p&gt;Keywords are an important factor in SEO. Making sure these pop up at least 1-3 times throughout your content is key to optimizing SEO. It‚Äôs important to ensure your keywords appear in various parts of your content. Spreading them out to your product headline, description, meta description, image alternate attributes, and subheadlines helps Google understand your page and rank you better.&lt;/p&gt;

&lt;p&gt;However before you use a keyword, do some research on it first. Proper research includes the following: keyword search volume, cost-per-click/CPC, and what people are looking for when they use that keyword. This helps keep the relevance of your content and improves its reach whilst addressing your searcher‚Äôs queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-leverage-on-location-tagging"&gt;
  &lt;/a&gt;
  4. Leverage on Location Tagging
&lt;/h3&gt;

&lt;p&gt;While geotagging is identifying an exact location with coordinates, in SEO it is simply inputting a target location via keywords. This can also be placed in the meta title. For example ‚Äúweb design company in Singapore | Verz Design‚Äù, geotagging your keywords plays a huge role in SEO because Google filters data with this information. So when customers search according to a specific location, your website is sure to pop up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-implement-proper-structured-data"&gt;
  &lt;/a&gt;
  5. Implement Proper Structured Data
&lt;/h3&gt;

&lt;p&gt;Structured data in SEO is the markup that informs search engines what your content is about, helping them display it accordingly on SERPs.&lt;/p&gt;

&lt;p&gt;In an SEO context, this usually refers to implementing some type of markup on a webpage, in order to provide additional detail around the page‚Äôs content. This markup improves the search engines‚Äô understanding of that content, helping improve SERP results.&lt;/p&gt;

&lt;p&gt;In SEO, structured data is essential because this is Google‚Äôs basis on what your business and content are all about, and in turn how to display it accordingly on SERP‚Äôs, including ranking. Additionally, structured data also determines how your snippet or search results will look. By providing viewers with the proper information, it increases your ranking, as well as the chances of them clicking on your site and converting into customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-mobile-optimization"&gt;
  &lt;/a&gt;
  6. Mobile Optimization
&lt;/h3&gt;

&lt;p&gt;Mobile optimization accurately displays your website on a smaller screen. In SEO, Google actually ranks websites higher depending on how mobile-friendly they are. By making sure your eCommerce website has a responsive design that adapts to any device, you ensure a smooth &lt;a href="https://www.verzdesign.com/customer-journey-map"&gt;customer journey&lt;/a&gt; from browsing all the way to checkout. Neat and user-friendly the mobile version of your website are all big factors to customer retention. With people always on the go and on their phones, this is vital. Sites that are not mobile-friendly may turn away customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-optimize-website-loading-speed"&gt;
  &lt;/a&gt;
  7. Optimize Website Loading Speed
&lt;/h3&gt;

&lt;p&gt;Page load speed also helps in SERP rank, both for desktop and mobile. The faster your pages load, the better Google will rank you. Slow-loading websites can hurt your keyword ranking on Google.&lt;/p&gt;

&lt;p&gt;How do you decrease page load speed? Reduce image size, enable file compression, reduce the number of plugins and reduce redirects. When it comes to enhancing website speed, a faster page load time results in more page visits, higher conversion rates, and more revenue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimize-your-platforms-with-the-help-of-us"&gt;
  &lt;/a&gt;
  Optimize your Platforms with the Help of Us!
&lt;/h2&gt;

&lt;p&gt;Search engine optimization is the key to boosting your ecommerce site‚Äôs sales and revenue, ensuring your success and making you the leader in your industry. &lt;/p&gt;

&lt;p&gt;If you are looking for web design services, specifically &lt;a href="https://www.verzdesign.com/our-services/web-development/ecommerce"&gt;ecommerce website design&lt;/a&gt; in Singapore, Verz Design can help. They provide professional services on ecommerce SEO practices that are sure to help your website rank well in SERP‚Äôs.&lt;/p&gt;

&lt;p&gt;Furthermore, Verz is an approved vendor under the Productivity Solutions Grant, or &lt;a href="https://www.verzdesign.com/our-services/consultation-services/psg"&gt;PSG grant for ecommerce&lt;/a&gt; businesses. Tap on the grant to build your ecommerce business and adopt IT solutions to boost your business growth! Call us at 6841 1680 or email us at &lt;a href="mailto:sales@verzdesign.com"&gt;sales@verzdesign.com&lt;/a&gt; for a free consultation today!&lt;/p&gt;

</description>
      <category>ecommerce</category>
      <category>business</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>It's Prisma Time - Create Table</title>
      <author>Luca Del Puppo</author>
      <pubDate>Tue, 21 Dec 2021 07:02:02 +0000</pubDate>
      <link>https://dev.to/this-is-learning/its-prisma-time-create-table-3911</link>
      <guid>https://dev.to/this-is-learning/its-prisma-time-create-table-3911</guid>
      <description>&lt;p&gt;Hello Folks üëã  and welcome back to this series,&lt;br&gt;
today it's time to create your first table with prisma, are you ready? Then let's go üí™&lt;/p&gt;

&lt;p&gt;Before starting, let me explain which type of tables we are going to create in this series. For this series we are going to create a simple db to manage a blog, ok.. not a big and strong blog but an easy blog to focus our learn on the main concepts of prisma. Since we‚Äôre talking about blogs, let's start from the post table obviously. &lt;br&gt;
Open the &lt;code&gt;prisma/schema.prisma&lt;/code&gt; file and append the following snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;        &lt;span class="nx"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;autoincrement&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;     &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;content&lt;/span&gt;   &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;published&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;createAt&lt;/span&gt;  &lt;span class="nx"&gt;DateTime&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="nx"&gt;updatedAt&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;updatedAt&lt;/span&gt;

  &lt;span class="p"&gt;@@&lt;/span&gt;&lt;span class="nd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! But what did you do adding this code? ü§î&lt;br&gt;
Writing this code you described the entity Post and you indicated to Prisma:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I want an entity called Post&lt;/li&gt;
&lt;li&gt;This entity has 6 properties&lt;/li&gt;
&lt;li&gt;The id property is of type Integer, it is the primary key of my entity (&lt;code&gt;@id&lt;/code&gt;) and it must be auto-generated (&lt;code&gt;@default(autoincrement())&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The title property is of type String&lt;/li&gt;
&lt;li&gt;The content property is of type String&lt;/li&gt;
&lt;li&gt;The published property is of type Boolean and its default value is false&lt;/li&gt;
&lt;li&gt;The createAt is of type DateTime and when a new record is inserted, set it with the current date time&lt;/li&gt;
&lt;li&gt;The updatedAt is of type DateTime and when a record is updated, update it with the current date time (&lt;code&gt;@updatedAt&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Call the table "posts" (&lt;code&gt;@@map("posts")&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, nothing so difficult, just some special syntax to remember.&lt;br&gt;
I don't want to go too deep but If you are interested in the Data model of Prisma &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#defining-models"&gt;here&lt;/a&gt; the link to the documentation.&lt;br&gt;
&lt;em&gt;N.B. It's important to know well the mapping between the Prisma's types and the native's types of the different database services&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But let's go ahead, you described your entity now I think you want use it.&lt;br&gt;
To use this entity inside of your typescript code, you need to create its typescript definition. To do this, run the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx prisma generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command adds in you package.json a new dependence &lt;code&gt;@prisma/client&lt;/code&gt;, and creates a folder &lt;code&gt;.prisma&lt;/code&gt; inside of your node_modules folder.&lt;br&gt;
The &lt;code&gt;@prisma/client&lt;/code&gt; is the package that contains the client to connect to your database, whereas, the .prisma folder contains a file &lt;code&gt;index.d.ts&lt;/code&gt; that describes the post Entity and all the possible functions to work with this Entity.&lt;br&gt;
Ok, at this point, let's try to get data from this collection of &lt;code&gt;posts&lt;/code&gt; and to do this let's create a file called &lt;code&gt;index.ts&lt;/code&gt; inside the src folder and copy the following code. (&lt;code&gt;src/index.ts&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this simple code, you created a connection to your database, found the posts inside the posts collections, and logged the result in the console.&lt;br&gt;
To run this code you have to add this section in your &lt;code&gt;package.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ts-node ./src/index.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script permits you to run the code written above.&lt;br&gt;
Ok, it's time to show the result. Run in your terminal the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpGdIQie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs567zh06u7hyl20vv4r.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpGdIQie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs567zh06u7hyl20vv4r.jpg" alt="Cat Oh no" width="500" height="641"&gt;&lt;/a&gt;&lt;br&gt;
Ok, maybe that's not the result that you expected but something's gone üòÖ&lt;br&gt;
The error that you are seeing in your terminal appeared because we haven't a database.... we haven't a database yet üòÉ&lt;br&gt;
In the next article, I'll show you how to create the database and we'll resolve this terrible mistake, I promise!&lt;/p&gt;

&lt;p&gt;I think that could be all for today!&lt;br&gt;
See you soon Guys&lt;br&gt;
Bye Bye üëã&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The code of this article is available &lt;a href="https://github.com/Puppo/it-s-prisma-time/tree/03-create-table"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>database</category>
      <category>orm</category>
    </item>
    <item>
      <title>How to implement Material UI in React?
</title>
      <author>Kuldeep Tarapara</author>
      <pubDate>Tue, 21 Dec 2021 07:00:56 +0000</pubDate>
      <link>https://dev.to/kuldeeptarapara/how-to-implement-material-ui-in-react-m0e</link>
      <guid>https://dev.to/kuldeeptarapara/how-to-implement-material-ui-in-react-m0e</guid>
      <description>&lt;p&gt;Material-UI is a library that provides React components for easy and fast web development. So, in this article, we will see how to implement Material UI in React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to implement Material UI in React?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can easily put together really beautiful components and make them work according to our use as all the components are configurable. This saves a lot of time as we don‚Äôt have to struggle with CSS to make things presentable. Material-UI components work in isolation. They are self-supporting, and will only inject the styles they need to display.&lt;/p&gt;

&lt;p&gt;You‚Äôll learn how to set up and use Material-UI in your React web application as we build a demo ‚Äù Sign In ‚Äù application.&lt;/p&gt;

&lt;p&gt;As you can see the user interface consists of material design elements. We‚Äôll use Material-UI components to display a Sign In form to the user. The application consists of an App Bar on top which contains the title of the application. Then you can use two text fields to input email and password and a Button to Sign In.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Generating The React Project:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, we need to create a new React project. This can be done by using the create-react-app script in the following way:&lt;/p&gt;

&lt;p&gt;npx create-react-app signin-material-ui&lt;br&gt;
After executing this command a new project directory sign in-material-UI is available. Change into the newly created project folder and you‚Äôll find the React starter project. Start your React project by:&lt;/p&gt;

&lt;p&gt;npm start&lt;br&gt;
Installing Material-UI Library &amp;amp; Dependencies: &lt;br&gt;
To use Material-UI components we have to make sure that we have installed them on our project which can be done by:&lt;/p&gt;

&lt;p&gt;npm install @material-ui/core&lt;br&gt;
Implementing The Sample Application: Before starting building our project we need to delete the default contents of the project responsible for the start screen by:&lt;/p&gt;

&lt;p&gt;Select all files in the src folder and delete them.&lt;br&gt;
Create a new file index.js in the src folder.&lt;br&gt;
So, now we can add our own code to the index.js file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create Signing function: First, we will create a container element inside the SignIn function. Also, this will be used in wrapping all the components.&lt;/p&gt;

&lt;p&gt;function SignIn(){&lt;br&gt;
return(&lt;br&gt;
    &lt;br&gt;
        &lt;br&gt;
        .&lt;br&gt;
        .&lt;br&gt;
        .&lt;br&gt;
        &lt;br&gt;
    &lt;br&gt;
    )&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;ReactDOM.render(, document.getElementById("root"));&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating an App Bar component:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
          &lt;br&gt;
            Sign In&lt;br&gt;
          &lt;br&gt;
&lt;br&gt;
Creating Sign In form component: The form will contain two text fields each for email and password, a remember me checkbox, a Sign In button, and some links.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      // Email Textfield


      // Password Textfield


      // Remember Me Checkbox
      }
        label="Remember me"
      /&amp;amp;gt;

      // Sign In button

        Sign In




          // Forgot Password link

            Forgot password?




          // Sign Up Link

            {"Don't have an account? Sign Up"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Complete Code:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;So, this is index.js if you clear the src folder and create a single indes.js file.&lt;/p&gt;

&lt;p&gt;import React from "react";&lt;br&gt;
import ReactDOM from "react-dom";&lt;br&gt;
import AppBar from "@material-ui/core/AppBar";&lt;br&gt;
import Toolbar from "@material-ui/core/Toolbar";&lt;br&gt;
import Button from "@material-ui/core/Button";&lt;br&gt;
import TextField from "@material-ui/core/TextField";&lt;br&gt;
import FormControlLabel from "@material-ui/core/FormControlLabel";&lt;br&gt;
import Checkbox from "@material-ui/core/Checkbox";&lt;br&gt;
import Link from "@material-ui/core/Link";&lt;br&gt;
import Grid from "@material-ui/core/Grid";&lt;br&gt;
import Typography from "@material-ui/core/Typography";&lt;br&gt;
import Container from "@material-ui/core/Container";&lt;/p&gt;

&lt;p&gt;function SignIn() {&lt;br&gt;
  return (&lt;br&gt;
    &lt;br&gt;
      &lt;br&gt;
        &lt;br&gt;
          &lt;br&gt;
            &lt;br&gt;
                Sign In&lt;br&gt;
            &lt;br&gt;
          &lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
          
            variant="outlined"&lt;br&gt;
            margin="normal"&lt;br&gt;
            required&lt;br&gt;
            fullWidth&lt;br&gt;
            id="email"&lt;br&gt;
            label="Email Address"&lt;br&gt;
            name="email"&lt;br&gt;
            autoComplete="email"&lt;br&gt;
            autoFocus&lt;br&gt;
          /&amp;gt;&lt;br&gt;
          
            variant="outlined"&lt;br&gt;
            margin="normal"&lt;br&gt;
            required&lt;br&gt;
            fullWidth&lt;br&gt;
            name="password"&lt;br&gt;
            label="Password"&lt;br&gt;
            type="password"&lt;br&gt;
            id="password"&lt;br&gt;
            autoComplete="current-password"&lt;br&gt;
          /&amp;gt;&lt;br&gt;
          
            control={
                               color="primary" /&amp;gt;}&lt;br&gt;
            label="Remember me"&lt;br&gt;
          /&amp;gt;&lt;br&gt;
          
                  fullWidth variant="contained"&lt;br&gt;
                  color="primary"&amp;gt;&lt;br&gt;
            Sign In&lt;br&gt;
          &lt;br&gt;
          &lt;br&gt;
            &lt;br&gt;
              &lt;br&gt;
                Forgot password?&lt;br&gt;
              &lt;br&gt;
            &lt;br&gt;
            &lt;br&gt;
              &lt;br&gt;
                {"Don't have an account? Sign Up"}&lt;br&gt;
              &lt;br&gt;
            &lt;br&gt;
          &lt;br&gt;
        &lt;br&gt;
      &lt;br&gt;
    &lt;br&gt;
  );&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;ReactDOM.render(, document.getElementById("root"));&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, in this article, we have been through how to implement Material UI in React. Also, feel free to comment with your suggestions and feedback on the post. Moreover, at BOSC Tech Labs, we have a team of highly experienced React JS developers. They can assist you in developing your customized web app. So contact us to hire experienced React JS developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content Source:&lt;/strong&gt; &lt;a href="https://bosctechlabs.com/how-to-implement-material-ui/"&gt;https://bosctechlabs.com/how-to-implement-material-ui/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Starting my Web Developer Journey</title>
      <author>Kaviraj Singh Bhati</author>
      <pubDate>Tue, 21 Dec 2021 06:23:19 +0000</pubDate>
      <link>https://dev.to/kavirajsinghbhati/starting-my-web-developer-journey-2pp0</link>
      <guid>https://dev.to/kavirajsinghbhati/starting-my-web-developer-journey-2pp0</guid>
      <description>&lt;p&gt;Hello my fellow developers. I have decided to start my web development journey (again) after trying for the last one year and failing!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-brief-background"&gt;
  &lt;/a&gt;
  A brief background
&lt;/h2&gt;

&lt;p&gt;A brief introduction about me, I am a pre-final year student in Computer Science. I currently am learning data structures and algorithms and primarily use Java. I‚Äôm also taking some simple crash courses on Web Development and participating in #100DaysOfCode on Twitter.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#my-study-plan"&gt;
  &lt;/a&gt;
  My study plan
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Reviewing my HTML, CSS and JavaScript knowledge: &lt;br&gt;
I will be taking a crash course for each language to learn the basics. I don't want to get trapped in tutorial hell so I will not be spending too much time on watching tutorials.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build some projects: After finishing the courses, next logical step would be to build some projects to sharpen my skills, and deploy them to showcase in my portfolio.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working on my problem solving skills: As the interview season's round the corner, it's high time that I prepare for my coding interviews. For the next 100 days, I would prepare my problem solving skills.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I know I am a bit late to start this journey but hey, &lt;em&gt;Better late than never&lt;/em&gt;. I am so excited to see where this journey takes me.&lt;br&gt;
P.S. This is my very first article on social media. Pardon me for my grammar mistakes, if any!&lt;br&gt;
Peace ‚úå&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React Micro Frontends with Webpack's Module Federation</title>
      <author>Pahan Perera</author>
      <pubDate>Tue, 21 Dec 2021 05:39:29 +0000</pubDate>
      <link>https://dev.to/pahanperera/react-micro-frontends-with-webpacks-module-federation-32ii</link>
      <guid>https://dev.to/pahanperera/react-micro-frontends-with-webpacks-module-federation-32ii</guid>
      <description>&lt;p&gt;&lt;strong&gt;Micro Frontends&lt;/strong&gt; is a very popular topic in today's frontend world. Most of the teams tend to adopt this micro frontend strategy to develop their large and complex web applications, due to many advantages it provides such as, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separate, decoupled codebases&lt;/li&gt;
&lt;li&gt;Independent deployment&lt;/li&gt;
&lt;li&gt;Incremental updates &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below diagram showcases some of the important concepts of micro frontends. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Phs3AZXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqtkmjvvel08cyhlsgg2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Phs3AZXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqtkmjvvel08cyhlsgg2.png" alt="Micro Frontend Concepts" width="880" height="287"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most popular way of developing micro frontends is using HTML5 Web Components (Custom Elements). Angular like web frameworks has &lt;a href="https://angular.io/guide/elements"&gt;extended to support Web Components&lt;/a&gt;, while most of other libraries like &lt;a href="https://reactjs.org/docs/web-components.html"&gt;React, supports it&lt;/a&gt; out of the box.&lt;/p&gt;

&lt;p&gt;For more information about micro frontends you can refer to &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/micro-frontends.html"&gt;https://martinfowler.com/articles/micro-frontends.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://micro-frontends.org"&gt;https://micro-frontends.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-module-federation-in-webpack-"&gt;
  &lt;/a&gt;
  What is Module Federation in Webpack ?
&lt;/h2&gt;

&lt;p&gt;Webpack version 5 comes with a new feature called &lt;a href="https://webpack.js.org/concepts/module-federation/"&gt;Module Federation&lt;/a&gt;, which helps to share code and dependencies between projects at runtime. &lt;/p&gt;

&lt;p&gt;In high level, an application &lt;code&gt;exposes&lt;/code&gt; certain component/s via a separate javascript file, and other application that wishes to use that component, async loads that &lt;code&gt;remote&lt;/code&gt; javascript file and consume that component. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MjR1KyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyv0byoa6dbhv5517430.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MjR1KyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyv0byoa6dbhv5517430.png" alt="Webpack's Module Federation" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recent times this feature has changed the way we develop micro frontends. &lt;/p&gt;

&lt;p&gt;In this post, I will walk through how you can develop React based micro frontends using Webpack's Module Federation by creating a simple bank application that shows a list of accounts and account details on a selected account. &lt;/p&gt;

&lt;p&gt;This is how our final application architecture would look like. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZYLeuD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlti5tc8dbz732kzw088.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZYLeuD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlti5tc8dbz732kzw088.png" alt="Simple Bank Application using React" width="880" height="818"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started..
&lt;/h2&gt;

&lt;p&gt;All of the code in this post can be found &lt;a href="https://github.com/PahanPerera/react-webpack-micro-frontends"&gt;here&lt;/a&gt; for your references. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;p&gt;First of all, since this is about React and webpack, you should have a React application configured with Webpack.&lt;/p&gt;

&lt;p&gt;Refer to &lt;a href="https://github.com/PahanPerera/react-webpack-micro-frontends/tree/main/account-summary-app"&gt;this project&lt;/a&gt; if you need help doing that. &lt;/p&gt;

&lt;p&gt;Also, as mentioned above, we will need three React projects for our application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;accounts-summary-app&lt;/code&gt; - Micro frontend that provides the summary of all the accounts &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;account-details-app&lt;/code&gt; - Micro frontend that provides details of a selected account&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;main-app&lt;/code&gt; - app that hosts above two components. Also acts as a medium to communicate with each other. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configure-raw-modulefederationplugin-endraw-in-micro-frontend-projects"&gt;
  &lt;/a&gt;
  Configure &lt;code&gt;ModuleFederationPlugin&lt;/code&gt; in Micro Frontend Projects
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ModuleFederationPlugin&lt;/code&gt; is a &lt;a href="https://webpack.js.org/plugins/module-federation-plugin/"&gt;high level webpack plugin&lt;/a&gt; that provides a very convenient way to configure module federation in your projects. Also plugin comes along with webpack library without need of installing another dependency as well.&lt;/p&gt;

&lt;p&gt;Responsibility of our micro frontend projects is to &lt;code&gt;expose&lt;/code&gt; a component. So let's add following to &lt;code&gt;webpack.config.js&lt;/code&gt; of &lt;code&gt;accounts-summary-app&lt;/code&gt; project. &lt;/p&gt;

&lt;p&gt;import the plugin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;webpack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;configure the plugin&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AccountsSummaryApp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accountsSummaryApp_remote.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exposes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AccountsSummary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/components/AccountsSummary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; is unique identification of your module. Normally this is the name of your micro frontend project. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;filename&lt;/code&gt; is the name of the javascript file that exposes the components&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;exposes&lt;/code&gt; is a map (key and a value) of components that are exposed from this module. (key will act as an alias for the component while the value is where the component located in the project)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's run this project locally and see what happens. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vh3TL9zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghnm55s4zlr57eygmxd8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vh3TL9zs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghnm55s4zlr57eygmxd8.png" alt="Separate javascript file for exposed module" width="880" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, now webpack has bundled our &lt;code&gt;AccountsSummary&lt;/code&gt; component into a separate javascript file, as we instructed in the webpack configuration. &lt;/p&gt;

&lt;p&gt;Let's do the same to the &lt;code&gt;account-details-app&lt;/code&gt; project as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AccountDetailsApp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accountDetailsApp_remote.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exposes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./AccountDetails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/components/AccountDetails&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you missed some thing, you can always refer to these two projects &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/PahanPerera/react-webpack-micro-frontends/tree/main/account-summary-app"&gt;accounts-summary-app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/PahanPerera/react-webpack-micro-frontends/tree/main/account-details-app"&gt;account-details-app&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configure-raw-modulefederationplugin-endraw-in-host-app-project"&gt;
  &lt;/a&gt;
  Configure &lt;code&gt;ModuleFederationPlugin&lt;/code&gt; in Host App project.
&lt;/h3&gt;

&lt;p&gt;Like I was explaining before, our host app, &lt;code&gt;main-app&lt;/code&gt; is responsible for loading the components from micro frontend projects.&lt;/p&gt;

&lt;p&gt;Like micro frontends configurations defines &lt;code&gt;exposes&lt;/code&gt;, Host app's webpack configuration defines &lt;code&gt;remotes&lt;/code&gt; that tells webpack where to find those external components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ModuleFederationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;remotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;AccountsSummaryApp_Remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AccountsSummaryApp@http://localhost:9001/accountsSummaryApp_remote.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;AccountDetailsApp_Remote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AccountDetailsApp@http://localhost:9002/accountDetailsApp_remote.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;remotes&lt;/code&gt; is a map (key and value) that defines all the external modules that it consumes. Key will act as an alias for the module and value defines the remote javascript file location for that module. &lt;/p&gt;

&lt;p&gt;value should have a special format like below&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Name of the Exposed Module&amp;gt;@&amp;lt;Remote URL of the javascript file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that all the webpack configurations are completed, let's write some javascript code to load external components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#load-external-components-to-host-app"&gt;
  &lt;/a&gt;
  Load External Components to Host App
&lt;/h3&gt;

&lt;p&gt;One of the beautify thing about this webpack module federation is that, developers can not feel a difference between importing a local component from its own project and remote component from an external javascript file. &lt;/p&gt;

&lt;p&gt;React code will look like you are lazy loading a component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AccountsSummary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lazy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AccountsSummaryApp_Remote/AccountsSummary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and use that in your jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt; &lt;span class="na"&gt;fallback&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Error while loading Account Summary&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AccountsSummary&lt;/span&gt; &lt;span class="na"&gt;onAccountSelected&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleAccountSelected&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Suspense&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to note about the import is that to use same alias that you define in the host application along with the component alias that you defined in your micro frontend project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8SNenJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3iepl3jvw4wd6cc03gkx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8SNenJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3iepl3jvw4wd6cc03gkx.png" alt="Module Federation configurations" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communication-between-components"&gt;
  &lt;/a&gt;
  Communication between components
&lt;/h3&gt;

&lt;p&gt;As mentioned earlier, external components are same as local components in your project. So standard ways of communication should be applicable here as well.&lt;/p&gt;

&lt;p&gt;For this application, I have defined a shared state with in the host application and each component communicate via that shared state. &lt;/p&gt;

&lt;p&gt;Refer to &lt;code&gt;main-app&lt;/code&gt; to see the &lt;a href="https://github.com/PahanPerera/react-webpack-micro-frontends/blob/main/main-app/src/pages/AccountsPage.js"&gt;code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is very beginner level tutorial about how to develop Micro Frontends using Webpack's Module Federation feature. During this post I was able to briefly explain about&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What are Micro Frontends&lt;/li&gt;
&lt;li&gt;What is Webpack's Module Federation Feature&lt;/li&gt;
&lt;li&gt;Configure Micro frontends to expose components&lt;/li&gt;
&lt;li&gt;Configure Host app to use those exposed components&lt;/li&gt;
&lt;li&gt;How to communicate between components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full working example can be found [here].(&lt;a href="https://github.com/PahanPerera/react-webpack-micro-frontends"&gt;https://github.com/PahanPerera/react-webpack-micro-frontends&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;You can find the full React Template used in this sample bank application &lt;a href="https://pahanperera.gumroad.com/l/GDJBq"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;That is all for now. Please share you feedbacks. Thank you for reading.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>microfrontends</category>
      <category>webpack</category>
      <category>react</category>
    </item>
    <item>
      <title>Welcome to Docker! üê≥</title>
      <author>Edel Prado</author>
      <pubDate>Tue, 21 Dec 2021 05:31:44 +0000</pubDate>
      <link>https://dev.to/epradojr/welcome-to-docker-4hjm</link>
      <guid>https://dev.to/epradojr/welcome-to-docker-4hjm</guid>
      <description>&lt;p&gt;Hi! I‚Äôm Eddie Prado and I wanted to showcase the amazing Docker platform! In this blog, I want to explain to you what docker is, how it works, and reasons why you should learn the ins and outs of it. &lt;br&gt;
_&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h2&gt;

&lt;p&gt;First things first, what is Docker exactly? To put it simply, it is a platform for building, running, and shipping applications. So, if the app you are developing works on your machine, it will run on someone else‚Äôs machine via containers.&lt;br&gt;
_&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Let‚Äôs look at an example where Docker would have been a great tool to have:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Developer A is part of a team that are creating an app that could revolutionize how we see data. Dev-A, after long sleepless nights, gets his code running! Woohoo! Now he needs to send it to Developer B for testing and review. Dev-B downloads Dev-A‚Äôs app onto to his machine, but it won‚Äôt run. After half a workday of trial and error, Dev-A and Dev-B have the app working by updating, downgrading, and replacing software and files. Phew! Now Dev-B can finally do his testing, but the app still must go through many other channels before it can publish. This scenario will keep repeating itself unless the team matches Dev-A‚Äôs machine configuration to their own machine which is just not possible when everyone is working on their own distinct projects that require different configurations. So, how could we solve this problem?&lt;/p&gt;

&lt;p&gt;Well, there are two routes you could possibly go.&lt;br&gt;
_&lt;br&gt;
_&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%A5-virtual-machines-vs-docker"&gt;
  &lt;/a&gt;
  üñ• Virtual Machines Vs. Docker! üê≥
&lt;/h2&gt;

&lt;p&gt;One way to resolve this issue would be to use a virtual machine. A virtual machine, or VM for short, isn‚Äôt any different than other physical computers. It uses its own CPU, memory, disk, and can even connect to the internet! While the hardware of a computer is physical and tangible, VMs are often thought of as software-defined computers within physical servers. While virtual machines may have some positives like trying new operating systems, running old software, or developing software for other systems, the negatives severely slow down the development process. &lt;/p&gt;

&lt;p&gt;One bad side of VMs is the need to have a operating system for every virtual machine you use. On top of that, those operating systems need to be licensed, patched, and monitored. Another downside would be the slow start up. Just like physical computers, VMs need to boot up, and depending on the task at hand, you may need to boot up several different virtual machines. This leads me to my final point. Virtual machines are resource intensive. These resources being CPU, memory, and disk space allocation. &lt;br&gt;
What could counter these negatives? Docker, that‚Äôs what! &lt;/p&gt;

&lt;p&gt;Docker turns the negatives from VMs into positives, and by doing so, it streamlines the app development process! While virtual machines need their own operating systems, Docker does not. It uses the hosts own OS kernel, so there is no need to buy a separate license or worry about extra patches. Since this eliminates the need of a guest OS which is essential for virtual machines to function, Docker is incredibly lightweight. Because of this, Docker boot up times are minimal when compared to VMs, and Docker uses less resources by downloading only the most essential files/software to run an application. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is a comparison of the infrastructure between Docker and Virtual Machines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uFZohFfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz16sdhau16hjzm5ca31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uFZohFfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz16sdhau16hjzm5ca31.png" alt="VM and Docker infrastructure" width="880" height="374"&gt;&lt;/a&gt;&lt;br&gt;
_&lt;br&gt;
_&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-docker-work"&gt;
  &lt;/a&gt;
  How does Docker work?
&lt;/h2&gt;

&lt;p&gt;To answer that question, there are three things you must know. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dockerfile - which is plan for building a Docker image.&lt;/li&gt;
&lt;li&gt;Image - which is a template for running a container&lt;/li&gt;
&lt;li&gt;Container - which is a running process/application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The process starts with replicating an environment (like Dev-A‚Äôs machine configuration!). The person who is developing the application creates the environment using the dockerfile. After the dockerfile has been created, any developer will have the ability to create an image, which is an immutable snapshot of the environment, using the dockerfile. These images can be pushed up to the cloud (DockerHub) for others to pull down to their local machine. They then can create a container which is a running process of the image that was pulled from the cloud. &lt;br&gt;
_&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Let‚Äôs go back to our Dev-A and Dev-B example. This time we will use Docker!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dev-A is in charge of creating an app that could revolutionize how we use data. Before they start their long journey of developing said application, they create a dockerfile with a base image in the root of the project. Dev-A will continue to update it with the necessary files used in the app throughout his process. An unspecified amount of time later, Dev-A finishes his app! They then build an image, which creates an image ID, using the terminal. Dev-A then pushes said image to DockerHub and gives the image key to Dev-B to pull the image down to his local machine. Dev-B does just that and begins running an isolated container which flawlessly runs the app. Developer B instantly gets to work testing and reviewing the code while Dev-A goes home and gets his much needed sleep. &lt;/p&gt;

&lt;p&gt;When working in a team, Docker is essential in creating a efficient and streamlined development process. It not only increases productivity, but also allows for multiple containers to run on the same machine, maintain isolated applications, and allows for quick and easy configurations! &lt;br&gt;
_&lt;br&gt;
_&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-download-the-docker-desktop-application"&gt;
  &lt;/a&gt;
  Where to download the Docker Desktop application?
&lt;/h2&gt;

&lt;p&gt;To install Docker head to &lt;a href="https://docs.docker.com/get-docker/"&gt;https://docs.docker.com/get-docker/&lt;/a&gt; and download the Docker Desktop application for your operating system. Docker is available for Mac, Windows, and Linux. There is also a VS Code extension for docker. Check out &lt;em&gt;Tutorial: Get started with Docker&lt;/em&gt; to get more details on that.&lt;/p&gt;

&lt;p&gt;I heavily recommend checking out the below resources to get an even better grasp on how powerful Docker is. Especially when collaborating as a team.&lt;br&gt;
_&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/"&gt;Docker Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docker-curriculum.com/"&gt;Docker for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.microsoft.com/en-us/visualstudio/docker/tutorials/docker-tutorial"&gt;Tutorial: Get started with Docker&lt;/a&gt;
_&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Video:&lt;/strong&gt;&lt;br&gt;
Great video explaining how Docker works.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rOTqprHv1YE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
_&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extra Reading:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.docker.com/blog/containers-replacing-virtual-machines/"&gt;Are Containers Replacing Virtual Machines?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aquasec.com/cloud-native-academy/docker-container/docker-in-production-getting-it-right/"&gt;Docker in Production: Getting it Right&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>docker</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Prototype in Javascript</title>
      <author>Amod Shinde</author>
      <pubDate>Tue, 21 Dec 2021 05:17:30 +0000</pubDate>
      <link>https://dev.to/amoled27/prototype-in-javascript-kll</link>
      <guid>https://dev.to/amoled27/prototype-in-javascript-kll</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sYTCjWC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6jt14918mz6if5hbnu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sYTCjWC7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6jt14918mz6if5hbnu2.png" alt="Prototype in Javascript" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we shall discuss prototype in Javascript and how it works under the hood. Often developers who are new to Javascript wonder what is this magic keyword and how the heck it gives access to some methods you never define? Let us find out what prototype is all about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-javascript-prototype"&gt;
  &lt;/a&gt;
  Introduction to Javascript prototype
&lt;/h2&gt;

&lt;p&gt;By default, Javascript provides the &lt;strong&gt;Object()&lt;/strong&gt; function. You can verify it by printing it in the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eYK985lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orrbo5w0ogkofvf9zs6b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eYK985lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orrbo5w0ogkofvf9zs6b.png" alt="Output" width="383" height="53"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object()&lt;/strong&gt; though seems like an object, it's a function and not an object. It might be a little confusing but remember that Object() is a function and it provides an anonymous object that can be referenced using &lt;strong&gt;prototype&lt;/strong&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ofFXdnNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/021xifu6ab6pfbhiyt28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ofFXdnNh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/021xifu6ab6pfbhiyt28.png" alt="output2" width="861" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;Object.prototype&lt;/strong&gt; object has predefined methods such as toString() , valueOf(). In JS, when a function is a value of a property of an object, it's called a method.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;constructor&lt;/strong&gt; of Object.prototype, in turn, references the Object function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUnuTgwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c81qnb26o86dgix99qyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUnuTgwM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c81qnb26o86dgix99qyk.png" alt="Prototype chaining" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's understand it better using an example. let's define a constructor function called Programmer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above constructor function accepts name and language as parameters and assigns them to the name and language properties respectively. Behind the scene, JS creates a new function Programmer() and an anonymous object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLqKqQxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uo41g9svqzb60f2jb01i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLqKqQxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uo41g9svqzb60f2jb01i.png" alt="Protoypes in javascript" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so similar to what we saw earlier in the case of object function, even this Programmer() function has a property called prototype that references an anonymous object and constructor of which references back to the Programmer() function.&lt;/p&gt;

&lt;p&gt;Let us print both in the console and see the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oirNZMfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7jso1ui0na0nyk5eqk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oirNZMfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7jso1ui0na0nyk5eqk9.png" alt="prototype chaining" width="858" height="126"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wi1TYFqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrls1e41edy64o1526vj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wi1TYFqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrls1e41edy64o1526vj.png" alt="Prototype chaining output" width="860" height="374"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can observe that the object we get from Programmer.prototype has a constructor that is referencing the Programmer() function itself. In addition to this, JS links the Programmer.prototype to Object.prototype object via &lt;strong&gt;[[ prototype ]],&lt;/strong&gt;  this is known as &lt;strong&gt;prototype linkage.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Image will help you understand it better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0KMz0bdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/499garz1tq69puwm4xlh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0KMz0bdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/499garz1tq69puwm4xlh.png" alt="Prototypes" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-custom-methods-in-the-javascript-prototype"&gt;
  &lt;/a&gt;
  Defining custom methods in the Javascript prototype
&lt;/h2&gt;

&lt;p&gt;You can define your own custom methods in the prototype object. These custom functions are further accessible to the instances created from that function. &lt;/p&gt;

&lt;p&gt;The following code defines a new method called intro() on Programmer.prototype:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello, My name is &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; and I am a &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Developer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This intro() function is added to the Programmer.prototype object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BtV1nPop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdgxy9jaecpbobx3j5er.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BtV1nPop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdgxy9jaecpbobx3j5er.png" alt="javascript prototypes" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's create an instance of the &lt;strong&gt;Programmer&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The JS will now create a new object &lt;strong&gt;p&lt;/strong&gt; and links to Programmer.prototype object via the prototype linkage.&lt;/p&gt;

&lt;p&gt;Now let's call the intro() function from this &lt;strong&gt;p&lt;/strong&gt; instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;introduction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;introduction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bH4zM4Ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0obvdke9i0acm3duock.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bH4zM4Ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0obvdke9i0acm3duock.png" alt="JS prototype o/p" width="841" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does this work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;p&lt;/strong&gt; doesn't have its own intro() method, Javascript follows the prototype linkage and finds it on the &lt;strong&gt;Programmer.prototype&lt;/strong&gt; object and executes it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dy4jxM29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tfyvjuf0o3lntugzido.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dy4jxM29--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tfyvjuf0o3lntugzido.png" alt="prototype" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's try to call &lt;strong&gt;toString( )&lt;/strong&gt; method on &lt;strong&gt;p&lt;/strong&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How does this work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again, since &lt;strong&gt;p&lt;/strong&gt; doesn't have its own &lt;strong&gt;toString( )&lt;/strong&gt; method, Javascript follows the prototype linkage and searches for it on the &lt;strong&gt;Programmer.prototype&lt;/strong&gt; object. Because the &lt;strong&gt;Programmer.prototype&lt;/strong&gt; doesn't have the &lt;strong&gt;toString( )&lt;/strong&gt; ,method, it further follows the prototype linkage and searches in the &lt;strong&gt;Object.prototype&lt;/strong&gt; object. It finds &lt;strong&gt;toString( )&lt;/strong&gt;  here and executes it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zn6Z9evx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j0ex58o5kh1uxbqpc3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zn6Z9evx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6j0ex58o5kh1uxbqpc3s.png" alt="Prototype" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you call a method that doesn't exist up the prototype linkage, i.e. on the &lt;strong&gt;Programmer.prototype&lt;/strong&gt; or &lt;strong&gt;Object.prototype,&lt;/strong&gt; then Javascript will throw an error that it cannot find the method specified.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeProfession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;since changeProfession( ); doesn't exist on any of the objects in the prototype chain javascript throws an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KsX5SJ6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6oeao0eum6ccti4s85z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KsX5SJ6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6oeao0eum6ccti4s85z.png" alt="prototype in js" width="861" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;let's create another instance called &lt;strong&gt;q:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Raj&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OaCA6c8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4is1rhn8rtxc3yr0479.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OaCA6c8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4is1rhn8rtxc3yr0479.png" alt="prototype in js" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;p&lt;/strong&gt;  and &lt;strong&gt;q&lt;/strong&gt;  both the objects have the same objects and properties. But what if we define another method on &lt;strong&gt;q&lt;/strong&gt; ? will p be able to access it ?&lt;/p&gt;

&lt;p&gt;The code defines method &lt;strong&gt;getSalary( )&lt;/strong&gt; on &lt;strong&gt;q&lt;/strong&gt; object.&lt;/p&gt;






&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSalary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My salary is decent.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;strong&gt;getSalary( )&lt;/strong&gt;  method is added to only &lt;strong&gt;q&lt;/strong&gt;  object and not on &lt;strong&gt;Programmer.prototype&lt;/strong&gt; or &lt;strong&gt;p.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--exgfY86C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ishcwgra4g58ts8bn13d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--exgfY86C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ishcwgra4g58ts8bn13d.png" alt="Image js" width="880" height="738"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you try to call &lt;strong&gt;getSalary( )&lt;/strong&gt; function with p: it will throw an error:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dunder-proto-proto-"&gt;
  &lt;/a&gt;
  The Dunder Proto (_ _ proto _ _)
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;proto&lt;/strong&gt; is pronounced as dunder proto. The &lt;strong&gt;proto&lt;/strong&gt; is an accessor property of the Object.prototype object. It exposes the internal prototype linkage ( [[Prototype]]) of an object through which it is accessed.&lt;/p&gt;

&lt;p&gt;The p.&lt;strong&gt;proto&lt;/strong&gt; exposes the [[Prototype]] that references the Programmer.prototype object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;Programmer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should, however, use the Object.getPrototypeOf() method instead of the &lt;strong&gt;proto&lt;/strong&gt;. The Object.getPrototypeOf() method returns the prototype of a specified object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another popular way to get the prototype linkage when the Object.getPrototypeOf() method wasn‚Äôt available is via the constructor property as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The¬†&lt;code&gt;p.constructor&lt;/code&gt;¬†returns programmer, therefore,¬†&lt;code&gt;p.constructor.prototype&lt;/code&gt;¬†returns the prototype¬†object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shadowing"&gt;
  &lt;/a&gt;
  Shadowing
&lt;/h2&gt;

&lt;p&gt;See the following method call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The p object doesn‚Äôt have the intro() method defined, therefore JavaScript goes up to the prototype chain to find it. In this case, it can find the method in the Programmer.prototype object.&lt;/p&gt;

&lt;p&gt;Let‚Äôs add a new method to the object p with the same name as the method in the Programmer.prototype object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And call the¬†&lt;strong&gt;intro( )&lt;/strong&gt;¬†method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intro&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the &lt;strong&gt;p&lt;/strong&gt; object has the &lt;strong&gt;intro()&lt;/strong&gt; method, JavaScript just executes it immediately without looking it up in the prototype chain.&lt;/p&gt;

&lt;p&gt;This is an example of shadowing. The &lt;strong&gt;intro()&lt;/strong&gt; method of the &lt;strong&gt;p&lt;/strong&gt; object shadows the &lt;strong&gt;intro()&lt;/strong&gt; method of the prototype object which the &lt;strong&gt;p&lt;/strong&gt; object references.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Neon Nav</title>
      <author>SebastianDreyer</author>
      <pubDate>Tue, 21 Dec 2021 05:16:05 +0000</pubDate>
      <link>https://dev.to/linoleumdevelop/neon-nav-c9f</link>
      <guid>https://dev.to/linoleumdevelop/neon-nav-c9f</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/linoleum-develop/embed/dyVzpdz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>design</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Top DevOps News of 2021 RECAP</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Tue, 21 Dec 2021 05:10:43 +0000</pubDate>
      <link>https://dev.to/n3wt0n/top-devops-news-of-2021-recap-1cbl</link>
      <guid>https://dev.to/n3wt0n/top-devops-news-of-2021-recap-1cbl</guid>
      <description>&lt;p&gt;What happened in the DevOps Space in 2021? Yep, It's that time of the year... These are the Top 10 DevOps-related news of 2021!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;This post is the last one I will publish in 2021. In fact I will take a short break and I will publish the next post (and video) next year ;)&lt;/p&gt;

&lt;p&gt;Alright, these are my &lt;strong&gt;top 10 news of this year&lt;/strong&gt;, but if you have any other news that you want to share or that you think is more important please let me know in the comment section below, I'd love to hear your opinion.&lt;/p&gt;

&lt;p&gt;Also, the news are not in any specific order. If one comes before another it doesn't mean it's more important or anything.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2R1nSOBBMuw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw"&gt;Link to the video: https://youtu.be/2R1nSOBBMuw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-devops-state-in-2021"&gt;
  &lt;/a&gt;
  General DevOps State in 2021
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=50"&gt;Watch this part here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a general comment, this year has been great for DevOps tools, but not &lt;strong&gt;so much for DevOps Adoption&lt;/strong&gt; at higher level.&lt;/p&gt;

&lt;p&gt;The DORA's report for 2021, in fact, shows Modest DevOps Gains in comparison to 2019.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1lulxZUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phmvwhjknhezrzlpz9j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1lulxZUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phmvwhjknhezrzlpz9j1.png" alt="DORA" width="880" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There has been only a 6% increase in the number of Elite Performers in the last 2 years, even tho the high performer grew about 17%. Not bad of course, but could be better. Not sure if the growth has been slowed down because of the pandemic, but all the analysts were expecting bigger numbers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_QTutgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m6x7dbp2wvmq2vhftkn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_QTutgy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m6x7dbp2wvmq2vhftkn.png" alt="DORA SRE" width="481" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is interesting in my opinion is the number of organizations that are reportedly using SRE practices, about 52% of the respondent to the study, even tho only the 10% of the elite performers reported to have implemented the totality of the practices. There is a lot of room for growth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-github-ceo-change"&gt;
  &lt;/a&gt;
  1. GitHub CEO Change
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=100"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, let's jump to the first news, which is pretty recent and came quite unexpected. I'm talking about GitHub CEO Nat Friedman stepping down from the role.&lt;/p&gt;

&lt;p&gt;In an internal post, subsequently published also on GitHub's blog on November 3, Nat in fact announced that he was stepping down as CEO of GitHub after more than 3 years of service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MlbrMyje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1k2falepc7invcyav0e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MlbrMyje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1k2falepc7invcyav0e.png" alt="GitHub Stats" width="880" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the same post, Nat Friedman also announced the latest figure about GitHub usage: 73 million of active developers, and about 84% of Fortune 500.&lt;/p&gt;

&lt;p&gt;And the same day the company announced the new CEO, again with a post on the public Blog. Thomas Dohmke, who was previously Chief Product Officer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3soBX1Xe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkv4lldu9ano9zcxu33g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3soBX1Xe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkv4lldu9ano9zcxu33g.png" alt="GitHub New CEO" width="880" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thomas has joined GitHub in 2018 together with Nat, and has been in charge of some very important programs like the GitHub Archive, Dependabot, Codespaces, Copilot and even the NPM acquisition.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skFULHsO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0h1l0q1capwqf16vw5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skFULHsO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0h1l0q1capwqf16vw5q.png" alt="GitHub Statement" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the post, Thomas assured that GitHub will remain an independent outfit within Microsoft and that it will retain its developer-first values, distinctive spirit, and open extensibility, while supporting developers in their choice of any language, license, tool, platform, or cloud.&lt;/p&gt;

&lt;p&gt;Well, good to know that. Who knows what GitHub will have for us in the coming months.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-github-actions-oidc-support-for-passwordless-authentication-to-cloud"&gt;
  &lt;/a&gt;
  2. GitHub Actions OIDC Support for Passwordless Authentication to Cloud
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=168"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And still talking about GitHub, time for a more technical news. During GitHub Universe 2021 in October, it has been announced that GitHub Actions will now support OpenID Connect as authentication method to connect to Cloud resources.&lt;/p&gt;

&lt;p&gt;The usage of OpenID Connect, OIDC, solves a long standing problem afflicting all the major CI/CD platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdNmHYKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me2wmuebrq7okx010rte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdNmHYKr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/me2wmuebrq7okx010rte.png" alt="CI CD Credentianls" width="880" height="778"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CI/CD workflows are often designed to access a cloud provider in order to deploy software or use the cloud's services.&lt;br&gt;
To access these resources, the workflow will supply credentials, such as a passwords or tokens, to the cloud provider. These credentials are usually stored as a secret, and the workflow presents this secret to the cloud provider every time it runs.&lt;/p&gt;

&lt;p&gt;But using hardcoded secrets requires you to create credentials in the cloud provider and then duplicate them in GitHub as a secret. With OIDC, you can take a different approach, configuring your workflow to request a short-lived access token directly from the cloud provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kX6-6SUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h53k311zjif1ptsu6r2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kX6-6SUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h53k311zjif1ptsu6r2.jpg" alt="OIDC Flow" width="880" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your cloud provider also needs to support OIDC on their end of course, and you must configure a trust relationship that controls which workflows are able to request the access tokens.&lt;/p&gt;

&lt;p&gt;[Other benefits of OIDC are that permissions can be made more granular by configuring conditions for issuing tokens, and that tokens are only valid for a single workflow run, and then automatically expire. This increase security and remove the needs for credentials rotation.&lt;/p&gt;

&lt;p&gt;Providers that currently support OIDC include AWS, Azure, GCP, and HashiCorp Vault, and more will be added over time.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-snyk-extends-tools-portfolio-to-drive-devsecops-adoption"&gt;
  &lt;/a&gt;
  3. Snyk Extends Tools Portfolio to Drive DevSecOps Adoption
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=269"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, enough talking about GitHub, let's move to the 3rd news and we will still be talking about Security.&lt;/p&gt;

&lt;p&gt;During its online annual conference in October, Snyk, one of the leading companies focusing on DevSecOps, announced a massive expansion of their Tools Portfolio.&lt;/p&gt;

&lt;p&gt;Snyk Code has added support for support for C++, C#, Elixir, Ruby, PHP and Go.&lt;/p&gt;

&lt;p&gt;Snyk Open Source has been extended to provide native integration with Atlassian BitBucket and AWS CodePipeline platforms, while tightening the integrations with DigitalOcean and HashiCorp. Support for package managers Yarn 2 and Poetry has been added, alongside integration with a C++ scanning tool from FossilID&lt;/p&gt;

&lt;p&gt;The Snyk Container platform is now integrated with the open source Trivy container scanning tools and with Snyk‚Äôs vulnerability database in addition to adding support for container registries such as Quay, GitHub Container Registry, GitLab, Google Artifact Registry and Harbor.&lt;/p&gt;

&lt;p&gt;The Snyk infrastructure-as-code platform now also makes it possible to detect configuration issues in Kubernetes manifests in Terraform code in a way that is compatible with cloud platforms from AWS, Azure and GCP.&lt;/p&gt;

&lt;p&gt;And finally, Snyk launched both a new free developer security education program, dubbed Snyk Learn, through which developers can attain and measure their level of DevSecOps expertise and Snyk Impact, an effort to foster collaboration among developers involving a wide range of socio-economic issues.&lt;/p&gt;

&lt;p&gt;If you want to know more about Snyk and the tools they provide, check out the &lt;a href="https://youtu.be/hXiJJUTiLEw"&gt;complete review I made about their toolset&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-chaos-engineering-with-azure-chaos-studio"&gt;
  &lt;/a&gt;
  4. Chaos Engineering With Azure Chaos Studio
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=362"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up, a very interesting news about Azure. During Ignite 2021 Microsoft has in fact announced the public preview of Azure Chaos Studio.&lt;/p&gt;

&lt;p&gt;As the name hints, with Chaos Studio you can practice chaos engineering, because it enables you to orchestrate fault injection on your Azure resources in a safe and controlled way.&lt;/p&gt;

&lt;p&gt;Chaos Studio is a fully-managed service, so it doesn‚Äôt require you to do any management or maintenance of the service, and of course it is deeply integrated into Azure, leveraging ARM templates, Azure Policy, Application Insights and Azure AD for RBAC&lt;/p&gt;

&lt;p&gt;It uses a fault library that cover several Azure services and replicates real-world scenarios: you can run faults in sequence and/or in parallel, add time delays, and group target resources across regions.&lt;/p&gt;

&lt;p&gt;It does even allow to easily stop an experiment and roll back the fault being injected to avoid having more impact to an environment than originally intended.&lt;/p&gt;

&lt;p&gt;Chaos Engineering is not always easy to do, and it is especially difficult to do it right (aka without taking down the whole production), so this service is extremely interesting for me and I can't wait to try it out. If you are interested too, consider subscribing because I will soon have a video about this.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-aws-announced-devops-guru"&gt;
  &lt;/a&gt;
  5. AWS Announced DevOps Guru
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=423"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But Azure is not the only cloud provider that has announced something major in the DevOps space this year. AWS, in fact  announced during their re:Invent conference a new tool called DevOps Guru which should help operations find issues that could be having an impact on an application performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lyXs67Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8d6o1nwjh0wlw1ebu3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyXs67Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8d6o1nwjh0wlw1ebu3j.png" alt="AWS DevOps Guru" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The way it works is that it collects and analyzes data from application metrics, logs, and events to identify behavior that deviates from normal operational patterns.&lt;/p&gt;

&lt;p&gt;When it finds a problem, the service can send an SMS, Slack message or other communication to the team and provides recommendations on how to fix the problem as quickly as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWQqCVUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td3f751rwmcchm3toqj6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWQqCVUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/td3f751rwmcchm3toqj6.png" alt="AWS DevOps Guru Stats" width="855" height="810"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This service gives AWS a product that would be competing with companies like Sumo Logic, DataDog or Splunk by providing deep operational insight on problems that could impact your applications.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-salesforce-makes-devops-for-salesforce"&gt;
  &lt;/a&gt;
  6. Salesforce Makes DevOps for Salesforce
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=482"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next news is about Salesforce... Now, I know what you are thinking... "Really? Talking about Salesforce in the Top 10 DevOps news for 2021?" Well, it does sound strange, but I think they've actually got something here...&lt;/p&gt;

&lt;p&gt;At its online conference  in June, Salesforce  unveiled a DevOps Center pilot that provides a portal through which organizations can track and manage changes to Salesforce applications, including work items and pipelines that should be fully configurable.&lt;/p&gt;

&lt;p&gt;In addition, Salesforce added Salesforce Functions to enable developers to deploy code in a serverless environment, using any code... or so they said.&lt;/p&gt;

&lt;p&gt;They have also announced a new unified command line interface (CLI) for all its applications, which allows you to work with and automate all of Salesforce and Heroku at the same time, including the new Functions. Also because the only way you have to create those functions is via the CLI.&lt;/p&gt;

&lt;p&gt;Finally, Salesforce added an Einstein Automate tool that employs machine learning algorithms to both integrate data and automate workflows.&lt;/p&gt;

&lt;p&gt;I've never been a huge fan of Salesforce and Salesforce development in particular, but I think adding more DevOps components and services to the platform is a good thing. What do you think? Let me know in the comments below.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#7-docker-desktop-no-longer-free"&gt;
  &lt;/a&gt;
  7. Docker Desktop No Longer Free
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=566"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a blog post on the 31st of August, Docker's CEO announced that the use of Docker Desktop in large businesses now requires a Pro, Team, or Business paid subscription. And Large businesses for them means companies with 250 or more employees, or annual revenues higher than $10m.&lt;/p&gt;

&lt;p&gt;As part of this announcement, the company has also updated their plans and pricing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TD9LZgx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3enoatkk645zxun48ns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TD9LZgx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3enoatkk645zxun48ns.png" alt="Docker Pricing" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker has renamed its Free plan to "Personal", and while there are no changes to the $5/month Pro and $7/month Teams subscriptions, a new $21/month Business subscription has been created adding features such as centralized management, single sign-on, and enhanced security.&lt;/p&gt;

&lt;p&gt;As I've said before in my opinion this news made more noise than necessary, and this is for 2 reasons. First of all, there has been no change in the Docker Engine itself and the Docker CLI, those are still free.&lt;/p&gt;

&lt;p&gt;Second, most of the Docker workloads, especially on bigger companies, run on Linux machines, while Docker Desktop supports only Windows and MacOS... so again, not a big deal if you ask me.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#8-gitlab-removed-its-starter-tier"&gt;
  &lt;/a&gt;
  8. GitLab Removed Its 'Starter' Tier
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=655"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up, let's talk about GitLab. At the beginning of the year, in fact, GitLab announced that it would get rid of their cheapest plan.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcpznxZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn0sltnl4ez9yedxtygo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcpznxZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fn0sltnl4ez9yedxtygo.png" alt="GitLab Blog" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a blog post, GitLab's cofounder and CEO Sid Sijbrandij announced that they were phasing out the Bronze/Starter tier because, and I quote "&lt;em&gt;The Bronze/Starter tier does not meet the hurdle rate that GitLab expects from a tier&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UP4uzdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h66rjfss0ktx07icimr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UP4uzdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h66rjfss0ktx07icimr9.png" alt="GitLab Reason" width="880" height="140"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In other words, GitLab decided it was not making enough money on the $4.00 user/month subscription.&lt;/p&gt;

&lt;p&gt;The effect of the change is that any features in Bronze that are not in the free tier have been moved up to Premium tier, which is almost 5 times more expensive that the Starter tier was.&lt;/p&gt;

&lt;p&gt;Luckily the free tier, which in terms of total users is the most popular plan on GitLab, will remain in place, but it only comes with limited CI/CD credits and doesn‚Äôt include any support options.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-jiras-negative-year"&gt;
  &lt;/a&gt;
  9. Jira's Negative Year
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=711"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And still on the negative side, but I promise this is the last bad news, I want to talk about Jira. This is not much of a news, rather a market trend, but 2021 has seen a lot of negative comments and feedback targeting the platform. And I mean a lot.&lt;/p&gt;

&lt;p&gt;So much so that someone has even created an entire website dedicated to this, called "&lt;em&gt;Why Jira Sucks&lt;/em&gt;", which at the time of recording lists the 31 biggest complains Jira users have.&lt;/p&gt;

&lt;p&gt;There has even been a video campaign on YouTube in which Jira was personified as an employee of a company and an HR representative was trying to fire them listing all the problems and downsides they have... I have to said that was quite funny to watch, but I felt bad for Atlassian...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WcSYswnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1da8p2wyqe6dmttx9cbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WcSYswnX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1da8p2wyqe6dmttx9cbf.png" alt="Jira Twitter" width="880" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the situation on twitter isn't better, with countless tweets of angry and frustrated users that use the platform to express their thoughts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMFommSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp9hzz8xx3jf76hgvaj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMFommSO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qp9hzz8xx3jf76hgvaj0.png" alt="Jira Meme" width="880" height="1074"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope the recent move of Atlassian to basically deprecate the on-prem installations of their products, including Jira, and move the users to their cloud offering will allow them bring more innovation to the platform and fix the problems they have.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10-hashicorp-and-terraform-wins"&gt;
  &lt;/a&gt;
  10. HashiCorp and Terraform Wins
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://youtu.be/2R1nSOBBMuw?t=780"&gt;Watch this news here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, last one for this year. And this is about HashiCorp, the maker of Terraform, Vault, and Consul, just to name a few things.&lt;/p&gt;

&lt;p&gt;This year has been a great year for HashiCorp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zoej2q6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avm7t2qm5zdvt0qwdlr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoej2q6K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avm7t2qm5zdvt0qwdlr3.png" alt="HashiCorp Microsoft Partner of the Year" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not only they have been recognized as the Winner of 2021 Microsoft Open Source Software on Azure Partner of the Year, but also been named #4 on the 2021 Forbes Cloud 100 List.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WYw_2z2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k7d6vftqbh5l67o9k9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WYw_2z2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k7d6vftqbh5l67o9k9y.png" alt="HashiCorp Cloud 100" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, that was not the news... the news is that in June HashiCorp released the much awaited version 1.0 of Terraform, the de-facto standard multicloud IaC solution.&lt;/p&gt;

&lt;p&gt;The GA of version 1.0 of course brings a ton of improvements to the system, including an improved experience for both usage and upgrade, and better interoperability, scalability, and stability.&lt;/p&gt;

&lt;p&gt;And with this milestone, Terraform Cloud now has the ability to run checks for third-party Integrations, to enforce security, compliance, and cost management best practices.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Alright, these were the TOP 10 DevOps Related news of 2021 for me. As I said before, let me know in the comment section below if I've missed something you consider important.&lt;/p&gt;

&lt;p&gt;With this, I wish you all a prosperous new year, I hope 2022 will bring you joy.&lt;/p&gt;

&lt;p&gt;Once again, thanks for your support to the channel, &lt;strong&gt;all this wouldn't be possible if not for you. You all made my year.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2R1nSOBBMuw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>news</category>
      <category>2021</category>
      <category>terraform</category>
    </item>
  </channel>
</rss>
