<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Week 2 is here!</title>
      <author>Jmulvez</author>
      <pubDate>Tue, 21 Dec 2021 17:14:22 +0000</pubDate>
      <link>https://dev.to/jmulvez/week-2-is-here-189b</link>
      <guid>https://dev.to/jmulvez/week-2-is-here-189b</guid>
      <description>&lt;p&gt;Week 1 was crazy! Every time I begin to feel comfortable with one topic, I find theres yet another layer of depth to conquer. At times I found myself second guessing everything and re-reading everything over and over again. I learned that alot of coding comes down to "what the frick is this?" and "what the frick is that?" but its rewarding when things finally click. I found myself procrastinating at some points just lost in my computer screen. Luckily, I think I've found a way to make the learning experience more enjoyable as I go along. I was looking through my phone and came across an app I had forgotten about for at least a couple of years, it was my Nintendo Gameboy emulator! That's when the idea hit me. Games in the early 2000's were all simple coding much like the material that I'm currently studying. Next thing I knew I found myself on Github looking for older Nintendo favorites of mine such as Super Mario Bros or Pokemon. The plan is to create my own version of these games by going through the game files and changing the contents inside. I even told some friends about the projects and they were overjoyed at the idea and even wanted to try the games when I finish them! It gives me even more motivation to get good at this coding business so I can take on bigger and bigger projects. It's a massive amount of work, I'll need all the motivation I can get at this point.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What to learn to become a fullstack developer (for beginners)</title>
      <author>Kalob Taulien</author>
      <pubDate>Tue, 21 Dec 2021 17:11:11 +0000</pubDate>
      <link>https://dev.to/kalobtaulien/what-to-learn-to-become-a-fullstack-developer-for-beginners-khm</link>
      <guid>https://dev.to/kalobtaulien/what-to-learn-to-become-a-fullstack-developer-for-beginners-khm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#learn-to-earn-in-web-development"&gt;
  &lt;/a&gt;
  Learn to earn in web development
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In web development there is a lot to learn before you can start to earn. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Getting into web development, or coding/programming of any kind, can take quite a while. &lt;/p&gt;

&lt;p&gt;Learning is the easy part, but landing a job… well that's the hard part! &lt;/p&gt;

&lt;p&gt;But that wasn't always the case. Once upon a time, it was the exact opposite. &lt;/p&gt;

&lt;p&gt;You see, when I first started learning how to code in 1999 all we had were boring books and a few awful websites. &lt;/p&gt;

&lt;p&gt;But nowadays you can just watch videos and the information is downloaded directly into your brain, how awesome is that?! &lt;/p&gt;

&lt;p&gt;But in 2021/2022 we have a problem… there is SO MUCH information we don't know what to follow or believe. &lt;/p&gt;

&lt;p&gt;That's where online courses come to save the day. &lt;/p&gt;

&lt;p&gt;Online coding courses give you the knowledge and practice you need to learn how to code, and they give you the guidance you need to move forward as a web developer looking for a career change. &lt;/p&gt;

&lt;p&gt;What do you need to learn first (in web development)?&lt;br&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html%C2%A0"&gt;
  &lt;/a&gt;
  HTML. 
&lt;/h2&gt;

&lt;p&gt;It's easy. You could learn and be REALLY good at HTML in less than a week. &lt;/p&gt;

&lt;p&gt;Every website uses HTML, so this is the first thing you'll want to learn. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://arbington.com/search/?q=html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_qPFaZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m86iopeqmxibin9tv24u.png" alt="Learn HTML" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#then-you-need-to-learn%C2%A0css%C2%A0"&gt;
  &lt;/a&gt;
  Then you need to learn CSS. 
&lt;/h2&gt;

&lt;p&gt;CSS is also easy, but it's BIG and has strict rules that aren't always obvious. It should take you about a month to get really good at CSS and to start making beautiful and modern looking websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://arbington.com/search/?q=css"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WYz754F---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhcqzyv48y0qk90a1mt7.png" alt="Learn CSS" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#then-you-need-to-learn-javascript%C2%A0"&gt;
  &lt;/a&gt;
  Then you need to learn JavaScript. 
&lt;/h2&gt;

&lt;p&gt;Ugh, JavaScript. &lt;/p&gt;

&lt;p&gt;I say "ugh" because JavaScript is a HUGE ecosystem full of shiny objects that don't matter. Don't learn React first, don't learn Vue first, don't learn jQuery first.. learn plain, vanilla, raw, unfiltered, boring JavaScript first.&lt;/p&gt;

&lt;p&gt;Don't get distracted by all the tools, packages and fun things you can do. Just keep it simple. This can take you between 1–3 months to learn. &lt;/p&gt;

&lt;p&gt;JavaScript is a programming language, whereas CSS and HTML are not programming languages - they are considered markup languages. And the human brain registers a programming language as a different way to think - it's literally like learning a new speaking language. So be patient at this step. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://arbington.com/search/?q=javascript"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qe7fMs6a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39g3urjt3t1ee9dgqzud.png" alt="Learn JavaScrcipt" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#then-you-need-to-learn-about%C2%A0apis%C2%A0"&gt;
  &lt;/a&gt;
  Then you need to learn about APIs. 
&lt;/h2&gt;

&lt;p&gt;Application Programming Interfaces. &lt;/p&gt;

&lt;p&gt;That sounds harder than it actually is. It's honestly just fancy talk for "sending and receiving data from a different computer over the internet". It's like asking your waiter for a drink - you make a request, it shows up, and what you do afterwards is up to you. &lt;/p&gt;

&lt;p&gt;API's should take you about a day to learn the theory. But then another 1–2 weeks for practice. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-up-learn-git-amp%C2%A0github"&gt;
  &lt;/a&gt;
  Next up, learn Git &amp;amp; GitHub
&lt;/h2&gt;

&lt;p&gt;Git is a "version control tool". It lets you make changes over time, rewind your work, save it and store it somewhere safe like GitHub.com or GitLab.com. &lt;/p&gt;

&lt;p&gt;It can get REALLY complex really easily, so just learn the basics for now.&lt;/p&gt;

&lt;p&gt;This should take you about a week to learn, but then you should be using Git on every project moving forward for all of time. So you'll get REALLY good at it pretty quickly. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://arbington.com/search/?q=git"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---WvemxBh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpf2y9bvlcwff9b50d70.png" alt="Learn Git and GitHub" width="880" height="556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lastly-learn-a-serverside-language"&gt;
  &lt;/a&gt;
  Lastly, learn a server-side language
&lt;/h2&gt;

&lt;p&gt;Server-side programming languages are the languages you write that exist on the server. That could be Python, PHP, Java, JavaScript, etc. &lt;/p&gt;

&lt;p&gt;I personally like Python because it's powerful, easy to learn, easy to read and write, and it's the worlds #1 most popular programming language - so you know there are jobs related to Python. &lt;/p&gt;

&lt;p&gt;This is similar to learning JavaScript, time-wise at least. It should take 1–3 months to learn a server-side language well enough you can apply for a job. &lt;/p&gt;

&lt;p&gt;If you already know JavaScript quite well, you'll pick up other languages quite easily. So if you already know JavaScript and you're just learning Python, it'll probably take half the time to learn Python, so maybe 2–6 weeks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://arbington.com/search/?q=python"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQ4_qVsx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98d2a7vswm8cw5r96sak.png" alt="Learn Python" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-can-you-learn-all%C2%A0this"&gt;
  &lt;/a&gt;
  Where can you learn all this?
&lt;/h2&gt;

&lt;p&gt;Arbington.com is the place to learn this. Right now it's $15/month to get access to over 150 web development courses, plus another 150 design courses, hundreds of marketing, SEO and analytics courses, and so much more. &lt;/p&gt;

&lt;p&gt;In total you'll get immediate access to over 1,500 courses for just $15/month - and it comes with a free 14 day trial. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://arbington.com/premium/info/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dX8NW4FB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqcoadnh1h0nrgbro725.png" alt="Arbington Premium" width="880" height="206"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Certificates of completion are included in every course!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-just-like%C2%A0that"&gt;
  &lt;/a&gt;
  And just like that…
&lt;/h2&gt;

&lt;p&gt;In about 7–10 months you have become a junior fullstack web developer. &lt;/p&gt;

&lt;p&gt;There are a few things we skipped over like learning React.js or Django for Python, but once you know the programming language the frameworks become easier to learn.&lt;/p&gt;

&lt;p&gt;Don't forget to open source all of your work on GitHub to future employers can see your progress!&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>this keyword and .call(), .apply(), .bind() method</title>
      <author>Nasirul Islam</author>
      <pubDate>Tue, 21 Dec 2021 17:03:12 +0000</pubDate>
      <link>https://dev.to/nasirulislam/this-keyword-and-call-apply-bind-method-9b6</link>
      <guid>https://dev.to/nasirulislam/this-keyword-and-call-apply-bind-method-9b6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this-keyword-in-javascript"&gt;
  &lt;/a&gt;
  What is this keyword in javascript?
&lt;/h2&gt;

&lt;p&gt;"this" keyword in JavaScript allows a function to be re-used in various execution contexts. That is, once a function is defined, it can be invoked for different objects using the "this" keyword. The current execution contact identifies an object when we invoke a method.&lt;/p&gt;

&lt;p&gt;If you want to understand this keyword, you have to know some binding rules. We will discuss these step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implicit-binding"&gt;
  &lt;/a&gt;
  Implicit Binding
&lt;/h2&gt;

&lt;p&gt;In the case of common JavaScript functions, if the function is preceded by a (.) Dot notation, then the object before the dot notation is the "this" or object inside the function. If the property of the object is not found then JavaScript takes the window as the object by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let blog = {
    name: 'Tapas',
    address: 'freecodecamp',
    message: function() {
        console.log(`${this.name} blogs on ${this.address}`);
    }
};

blog.message();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explicit-binding"&gt;
  &lt;/a&gt;
  Explicit Binding:
&lt;/h2&gt;

&lt;p&gt;If the function is not within an object, but if the function is in a global context, then when calling the function, it is necessary to specify which object will be "this" directly. This requires some built-in methods of JavaScript. The methods are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let getName = function() {
     console.log(this.name);
 }

let user = {
   name: 'Tapas',
   address: 'Freecodecamp'  
 };

getName.call(user);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#call-method"&gt;
  &lt;/a&gt;
  .call() method:
&lt;/h2&gt;

&lt;p&gt;If the function is in the global context, then when invoked the function you have to specify which object will be "this" directly. This requires using JavaScript's built-in method .call(). .call() method takes an object as the first parameter of the method and many more parameters can be given later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apply-method"&gt;
  &lt;/a&gt;
  .apply() method:
&lt;/h2&gt;

&lt;p&gt;In the same case, JavaScript's built-in method .apply() can be used. It works like the .call () method. However, the .apply() method takes an object as its first parameter and an array as its second parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let getName = function(hobby1, hobby2) {
     console.log(this.name + ' likes ' + hobby1 + ' , ' + hobby2);
 }

let user = {
   name: 'Tapas',
   address: 'Bangalore'  
 };

let hobbies = ['Swimming', 'Blogging'];

getName.apply(user, hobbies);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bind-method"&gt;
  &lt;/a&gt;
  .bind() method:
&lt;/h2&gt;

&lt;p&gt;The .bind() method works just like the .call() method. However, the difference is that the .bind() method returns the instance of the function without directly calling the function and we can store it in a variable and call this variable as a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let getName = function(hobby1, hobby2) {
     console.log(this.name + ' likes ' + hobby1 + ' , ' + hobby2);
 }

let user = {
   name: 'Tapas',
   address: 'Bangalore'  
 };

let hobbies = ['Swimming', 'Blogging'];
let newFn = getName.bind(user, hobbies[0], hobbies[1]); 

newFn();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#window-binding"&gt;
  &lt;/a&gt;
  Window Binding:
&lt;/h2&gt;

&lt;p&gt;If "this" is an object within a function, unless it is defined directly or indirectly, JavaScript takes window as the object by default. This is basically window binding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From this tutorial, we have learned &lt;strong&gt;"this"&lt;/strong&gt; keyword in javascript and &lt;strong&gt;.call()&lt;/strong&gt;, &lt;strong&gt;.apply()&lt;/strong&gt;, &lt;strong&gt;.bind()&lt;/strong&gt; methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/javascript-this-keyword-binding-rules/"&gt;Freecodecamp Web Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=uZqyRJkTQog"&gt;Learn with Sumit Bangladesh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Reach out to me on:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nasirul-islam.netlify.app/"&gt;Portfolio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Nasirul-Islam"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/nasirul866/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Achieve Full Decentralization with ENS using Spheron!</title>
      <author>Mitrasish Mukherjee</author>
      <pubDate>Tue, 21 Dec 2021 17:00:56 +0000</pubDate>
      <link>https://dev.to/spheron-protocol/achieve-full-decentralization-with-ens-using-spheron-10go</link>
      <guid>https://dev.to/spheron-protocol/achieve-full-decentralization-with-ens-using-spheron-10go</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Leave no centralized stone unturned with an ENS domain! 👀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://ens.domains/"&gt;ENS (Ethereum Name Service)&lt;/a&gt; domains are the decentralized Ethereum-based naming system alternative to DNS (Domain Name Service). They both are lookup systems which use domain names to map and reference complex addresses. The difference being, while DNS uses domain names to translate a website’s underlying IP address, ENS uses .eth suffix domain names to reference Ethereum addresses, or on the other hand to remember resources, like IPFS file hashes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ethereum-name-service-ens"&gt;
  &lt;/a&gt;
  What is Ethereum Name Service (ENS)?
&lt;/h2&gt;

&lt;p&gt;ENS is an open source, distributed, and community-owned naming system that resides in the Ethereum blockchain. At its core, ENS is composed of two main pieces. Firstly, the ENS registry, which lives in a smart contract running on the Ethereum blockchain and has a record of all domains and subdomains, detailing the owner, resolver, and caching TTL (time-to-live) for all records under that domain.&lt;br&gt;
The second key piece are resolvers, which are the actors responsible for translating the ENS domain names into the underlying referenced address or hash. These are also smart contracts on the blockchain, which carry the task of being asked what the “mywallet.eth” domain references, and responding with the resource’s address: “0xe9...42a2”.&lt;/p&gt;

&lt;p&gt;Learn more about ENS domains &lt;a href="https://docs.ens.domains/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#buy-ens-domains-and-register-them"&gt;
  &lt;/a&gt;
  Buy ENS Domains and Register Them
&lt;/h2&gt;

&lt;p&gt;You can buy and register ENS domains instantly, with a slight one-minute delay. Instead of paying an undefined fee, there is a yearly rent model which costs approximately USD$5 payable in ETH (some domains are slightly more expensive due to popularity). These funds now go to initiatives and grants to help maintain/develop ENS and the Ethereum ecosystem overall.&lt;br&gt;
Let’s go over the registration process.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-go-to-the-ens-domain-app"&gt;
  &lt;/a&gt;
  1. Go to the &lt;a href="https://app.ens.domains/"&gt;ENS domain app&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VV-KZtfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/argo/ens-ss-1_GzZXjAaL3.png%3FupdatedAt%3D1638019968019" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VV-KZtfs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/argo/ens-ss-1_GzZXjAaL3.png%3FupdatedAt%3D1638019968019" alt="ENS App SS1" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To register your first ENS domain, visit the &lt;a href="https://app.ens.domains/"&gt;ENS app&lt;/a&gt; and search for an address/name you want to register and is available. At the moment, you can register domains that are a minimum of 3 characters long (no maximum limit), and you can include emojis.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-connect-to-the-main-network"&gt;
  &lt;/a&gt;
  2. Connect to the Main Network.
&lt;/h3&gt;

&lt;p&gt;To pay for the registration fee of your ENS domain, and declare your ownership for it, you will have to connect to the Mainnet using one of the offered integrations (MetaMask, WalletConnect, Portis, Authereum).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-define-registration-period-and-confirm"&gt;
  &lt;/a&gt;
  3. Define Registration Period and Confirm
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YCRgbdbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/argo/ens-ss-2_nNXn11VEA.png%3FupdatedAt%3D1638019967517" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YCRgbdbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/argo/ens-ss-2_nNXn11VEA.png%3FupdatedAt%3D1638019967517" alt="ENS App SS2" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose for how long you will want to rent that domain, and verify the final ETH fee to pay. Once you’re good to go, hit “Request to Register” and a transaction will begin. It takes about one minute to verify because during that period the platform is verifying no one else has already tried or is trying to acquire the same domain.&lt;/p&gt;

&lt;p&gt;If everything is good, your wallet will pop up to execute the final transaction, and confirm your ownership and purchase.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-review-details"&gt;
  &lt;/a&gt;
  4. Review Details
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtmzdvsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/argo/ens-ss-3_q7xmuTb1-.png%3FupdatedAt%3D1638019967489" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtmzdvsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/argo/ens-ss-3_q7xmuTb1-.png%3FupdatedAt%3D1638019967489" alt="ENS App SS3" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once your transaction is successful, you will see a page similar to the one above (using the ens.eth domain as an example). Let’s go over the details on this page.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;registrant&lt;/strong&gt; is the owner of the ENS domain, in this case, it will be you! The registrant can set the controller address, change the resolver, or transfer the registration to a new owner.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;records&lt;/strong&gt; in your domain are where the magic happens! Here you can specify all the resources/addresses that your ENS domain name references. For example, an ETH, BTC, LTC, or DOGE address, content such as the IPFS hash to your website, or text records for things like email or Twitter handles.&lt;br&gt;
Each time you modify a record, there is an ETH transaction to be made (You will need to pay the gas fee).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-link-ens-domains-to-ipfsarweaveskynet-sites"&gt;
  &lt;/a&gt;
  How to link ENS Domains to IPFS/Arweave/Skynet Sites?
&lt;/h2&gt;

&lt;p&gt;Now that you have an ENS domain name, let’s see how we can configure and host Skynet, Arweave or IPFS deployed sites using Spheron Protocol (previously ArGoApp).&lt;/p&gt;

&lt;p&gt;Currently managing ENS domains is a manual process, where you need to update the content hash and pay an ETH gas fee every time you make a new deployment to your website. Spheron Protocol eases that process, by providing an intuitive UI where you can update content hash with each new deployment on IPFS/Arweave/Skynet.&lt;/p&gt;

&lt;p&gt;Here's a video to help you configure ENS domains for IPFS/Arweave/Skynet deployed applications using Spheron Protocol. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let’s get started! 🚀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Ynfwggyl5rY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Or follow the steps below to deploy a dapp on decentralised storage and configure your ENS domains.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-host-your-site-on-skynetarweaveipfs-using-spheron-protocol-github"&gt;
  &lt;/a&gt;
  1. Host Your Site on Skynet/Arweave/IPFS using Spheron Protocol + Github
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQnW967I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/argo/argo-ss-1_SlkbbAUdy.png%3FupdatedAt%3D1638019967627" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQnW967I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/argo/argo-ss-1_SlkbbAUdy.png%3FupdatedAt%3D1638019967627" alt="ArGo App SS1" width="446" height="773"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-add-an-ens-domain-to-your-site"&gt;
  &lt;/a&gt;
  2. Add an ENS Domain to Your Site.
&lt;/h3&gt;

&lt;p&gt;Once your deployment is successfully finished, you will see your website’s details. Navigate to the Project → Domain tab, where you will find the ENS Domain setup waiting for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ix0vMwjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ik.imagekit.io/argo/argo-ss-2_GadfSsAZZeq.gif%3FupdatedAt%3D1638019969400" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ix0vMwjv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ik.imagekit.io/argo/argo-ss-2_GadfSsAZZeq.gif%3FupdatedAt%3D1638019969400" alt="ArGo App SS2" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Specify the ENS domain you want to use as your deployed site (Skynet, Arweave or IPFS) address and select the site which you want to map with your ENS domain name.&lt;/p&gt;

&lt;p&gt;Secondly, you will need to update the content hash in your ENS domain. Spheron Protocol provides a seamless experience by updating your content hash automatically when you click the update button. It will trigger an on-chain transaction through MetaMask/Portis/WalletConnect/Authereum.&lt;/p&gt;

&lt;p&gt;Upon completion of the transaction, you can verify the content in your ENS. &lt;/p&gt;

&lt;p&gt;And that’s it! Once the transaction is verified, you can access your deployed website through your ENS domain name!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-test-your-new-ens-skynetarweaveipfs-website"&gt;
  &lt;/a&gt;
  3. Test Your New ENS + Skynet/Arweave/IPFS Website!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mkRinQ7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ik.imagekit.io/argo/argo-ss-3_IAgvb2w2y.gif%3FupdatedAt%3D1638019971925" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mkRinQ7Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ik.imagekit.io/argo/argo-ss-3_IAgvb2w2y.gif%3FupdatedAt%3D1638019971925" alt="ArGo App SS3" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you are using a browser not compatible with ENS, you need to append the “.link” or “.limo” suffix after your domain to visit your website on any browser.&lt;/p&gt;

&lt;p&gt;If you’re using an ENS-compatible browser like brave or opera, you can just type your address in the search bar “address.eth/” (don’t forget the “/”) and it should be automatically resolved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;With this, your app is now fully decentralized, Incredible right?&lt;/em&gt;&lt;/strong&gt; 🎉&lt;/p&gt;

&lt;p&gt;Hosting websites on decentralized storage and configuring decentralized domains with Spheron Protocol is an easy yet powerful way to make sure you have 100% uptime and your website is censorship resilient. &lt;/p&gt;

&lt;p&gt;You can achieve the unachievable with Spheron Protocol now.&lt;/p&gt;

&lt;p&gt;If you have trouble deploying your website using Spheron Protocol (previously ArGoApp), contact us on our &lt;a href="https://argoapp.live/contact"&gt;Discord Group&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Checkout Spheron Protocol (previously ArGoApp): &lt;a href="https://argoapp.net"&gt;https://argoapp.net&lt;/a&gt;&lt;br&gt;
Join our Telegram channel: &lt;a href="https://t.me/argoofficial"&gt;https://t.me/argoofficial&lt;/a&gt;&lt;br&gt;
Join our Discord group: &lt;a href="https://argoapp.live/contact"&gt;https://argoapp.live/contact&lt;/a&gt;&lt;br&gt;
Follow us on Twitter: &lt;a href="https://twitter.com/SpheronHQ"&gt;https://twitter.com/SpheronHQ&lt;/a&gt;&lt;br&gt;
Follow us on LinkedIn: &lt;a href="https://linkedin.com/company/spheron"&gt;https://linkedin.com/company/spheron&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Como funcionam as Tries</title>
      <author>Pedro Victor</author>
      <pubDate>Tue, 21 Dec 2021 16:38:48 +0000</pubDate>
      <link>https://dev.to/pedrovictoroc/como-funcionam-as-tries-5f55</link>
      <guid>https://dev.to/pedrovictoroc/como-funcionam-as-tries-5f55</guid>
      <description>&lt;h2&gt;
  &lt;a href="#sum%C3%A1rio"&gt;
  &lt;/a&gt;
  Sumário
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="#tldr"&gt;TL;DR&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#problema-inicial"&gt;O problema inicial&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#um-m%C3%A9todo-geral-para-comparar-strings"&gt;Como comparamos strings&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#uma-ideia-alternativa"&gt;Uma ideia alternativa&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#um-caso-de-uso-mais-complexo"&gt;Idealizando um "autocomplete"&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#algumas-otimiza%C3%A7%C3%B5es"&gt;Algumas otimizações&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclus%C3%A3o"&gt;Conclusão&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Tries são estruturas de dados que assumem a forma de árvore de busca, podendo um nó ter diversos filhos, mas nunca mais de um pai. A chave de cada nó geralmente é composta por um único caractere, o caminho a partir da raiz até um determinado nó forma uma palavra, ou parte de uma, inserida na Trie.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problema-inicial"&gt;
  &lt;/a&gt;
  Problema inicial
&lt;/h2&gt;

&lt;p&gt;Imagine que estamos desenvolvendo um jogo cuja meta do jogador é escrever todas as palavras que conhece, ganha quem souber mais palavras! Uma forma de contabilizarmos as palavras inseridas pode ser: a cada inserção verificamos se a palavra já foi inserida em uma lista, caso não tenha sido então adicionamos.&lt;br&gt;
De fato essa solução funciona, mas será que essa é realmente a mais interessante?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#um-m%C3%A9todo-geral-para-comparar-strings"&gt;
  &lt;/a&gt;
  Um método geral para comparar strings
&lt;/h2&gt;

&lt;p&gt;Antes de tudo, vamos entender como geralmente comparamos strings. Para isso, utilizando como linguagem o JavaScript e &lt;a href="https://javascript.info/comparison#string-comparison"&gt;este link como fonte&lt;/a&gt; temos uma forma geral de comparar strings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compare o primeiro caractere de cada string&lt;/li&gt;
&lt;li&gt;Caso o valor de &lt;a href="https://unicode.org/charts/"&gt;Unicode&lt;/a&gt; da primeira string seja maior ou menos que o da segunda, sabemos que são strings diferentes e terminamos&lt;/li&gt;
&lt;li&gt;Caso sejam iguais, continue com o segundo caractere&lt;/li&gt;
&lt;li&gt;Efetue a mesma etapa incrementando o índice do caractere analisado até finalizar a string&lt;/li&gt;
&lt;li&gt;Caso cheguemos ao final da string e seus caracteres sejam iguais, sabemos com certeza que ambas as cadeias de caracteres são iguais&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#uma-ideia-alternativa"&gt;
  &lt;/a&gt;
  Uma ideia alternativa
&lt;/h2&gt;

&lt;p&gt;A essa altura entendemos então que ao tentar adicionar uma palavra na lista que comentamos anteriormente não iremos apenas comparar ela N vezes, com N sendo a quantidade de palavras inseridas anteriormente na lista, mas por baixo dos panos também iremos comparar letras, palavra por palavra, de todos os elementos da lista.&lt;/p&gt;

&lt;p&gt;Temos então uma ideia! E se montarmos um conjunto com as palavras que começam com a letra &lt;strong&gt;"C"&lt;/strong&gt;? Nesse caso, quando quisermos adicionar a palavra &lt;strong&gt;"Car"&lt;/strong&gt; apenas temos que comparar com as palavras dentro deste conjunto, reduzindo as comparações com palavras que começam com outras letras. Podemos aplicar o mesmo raciocínio e, dessa vez, construir o conjunto das palavras que começa com &lt;strong&gt;"Ca"&lt;/strong&gt;, e assim caso este esteja vazio sabemos que a palavra &lt;strong&gt;"Car"&lt;/strong&gt; não foi inserida anteriormente e, por tanto, basta adicionar!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_5qA1pZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09k6cgwf6m20syjjekqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_5qA1pZW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09k6cgwf6m20syjjekqj.png" alt="Uma árvore com raiz a letra C, filho esquerdo com chave a letra A, que possui filho com a letra R como chave, todos com fundo verde e letra branca, representando a palavra inserida. A raiz possui filho direito com chave O e dois filhos, com chave M e R respectivamente, suas cores são fundo branco e letra preta." width="377" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note que o conjunto anterior continha então as palavras "Com" e "Cor", agora, inserimos "Car".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#um-caso-de-uso-mais-complexo"&gt;
  &lt;/a&gt;
  Um caso de uso mais complexo
&lt;/h2&gt;

&lt;p&gt;Imagine que um programador esteja digitando em seu editor de texto e você deseja fornecer uma opção de "autocomplete" que mostra as palavras-chave que o usuário pode estar querendo digitar. Nesse caso, temos &lt;strong&gt;C&lt;/strong&gt;, um conjunto de palavras-chave da linguagem, &lt;strong&gt;S&lt;/strong&gt; um "armazém" de Tries que contém essas palavras-chave e &lt;strong&gt;W&lt;/strong&gt;, a palavra que o programador começou a digitar. Podemos, portanto, selecionar em &lt;strong&gt;S&lt;/strong&gt; (nosso "armazém") a Trie cuja raiz tem chave igual à primeira letra de &lt;strong&gt;W&lt;/strong&gt; (palavra que o programador digitou), chamaremos esta de &lt;strong&gt;T&lt;/strong&gt; (entenda apenas como sendo a Trie que usaremos), e então percorremos a cada letra de &lt;strong&gt;W&lt;/strong&gt; um nó em &lt;strong&gt;T&lt;/strong&gt; e, ao fim de &lt;strong&gt;W&lt;/strong&gt;, percorremos essa sub-árvore  com raiz na última letra da palavra digitada e mostramos todas as palavras que podem ser formadas a partir dela!&lt;/p&gt;

&lt;p&gt;Parece complicado né? Mas na verdade não é! Entenda que nosso armazém é na verdade a raiz de uma Trie! Estranho né? Mas apenas pense que seria o equivalente de termos como chave nada mais nada menos que a string vazia, afinal, ela é prefixo de toda palavra!&lt;/p&gt;

&lt;p&gt;Sobre o restante, nada mais é do que percorrer uma árvore a partir de um certo nó, o que podemos facilmente fazer com um pouquinho de conhecimento sobre a estrutura de dados árvore!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02jGMCKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ills9uy1q7no76emo143.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02jGMCKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ills9uy1q7no76emo143.png" alt='Uma trie com nó inicial "L", à esquerda temos um caminho único que constrói a palavra "List", à direita temos dois caminhos que formam "Length" e "Let"' width="400" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesse exemplo, suponha que o programador digitou apenas "L", dessa forma podemos percorrer recursivamente a Trie e obter para o nosso "autocomplete" as palavras-chave "Let", "List", "Length". Suponha agora que a entrada seja "Le", nesse caso teremos como retorno para "autocomplete" as palavras-chave "Let" e "Length". Com esse exemplo fica fácil saber como implementar, né?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#algumas-otimiza%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Algumas otimizações
&lt;/h2&gt;

&lt;p&gt;Suponha que no exemplo da imagem anterior tínhamos a palavra "Como", ao invés de "Com", dessa forma, naturalmente, poderíamos ter nossa Trie se adicionássemos um novo nó com a letra "o" como chave, correto? Sim!&lt;/p&gt;

&lt;p&gt;Mas será que isso realmente é necessário? Algumas implementações utilizam uma breve otimização no quesito memória, como o nó de chave "m" não tem mais de um filho, poderíamos concatenar ambas as chaves e ter um nó de chave "mo". Isso traz alguma complexidade para a implementação, entretanto, representa um nó a menos na memória. &lt;/p&gt;

&lt;p&gt;Tries podem ser implementadas de diversas formas, com diversos nomes, como: Árvore Prefixo, Árvore Sufixo e Árvore Patricia, cada um com seus detalhes de implementação e otimizações, é aconselhável ler o que cada uma tem a oferecer antes de implementar!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Com isso vemos uma nova forma de comparar strings, sem precisarmos percorrer repetidamente uma lista inteira, ou utilizar "índices únicos" em bancos de dados. Obviamente temos casos específicos para seu uso, o intuito deste artigo é apontar para uma nova abordagem, bem como uma nova estrutura de dados, caso algo não tenha ficado claro ou notou algum erro, não deixe de avisar!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>datastructures</category>
      <category>trie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to build a full stack application with Supabase &amp; ReactJS</title>
      <author>Dom the dev</author>
      <pubDate>Tue, 21 Dec 2021 16:35:36 +0000</pubDate>
      <link>https://dev.to/dom_the_dev/how-to-build-a-full-stack-application-with-supabase-reactjs-3j5e</link>
      <guid>https://dev.to/dom_the_dev/how-to-build-a-full-stack-application-with-supabase-reactjs-3j5e</guid>
      <description>&lt;p&gt;React JS is one of the most (if not the most) popular frontend libraries nowadays. It helps you to build super fast user interfaces.&lt;/p&gt;

&lt;p&gt;Supabase is an easy to use tool that helps you to create your applications backend.&lt;/p&gt;

&lt;p&gt;With both tools combined you can create your own full stack application. Include different kinds of Sign Ups, persist data with a PostgreSql database as well as file uploads with their storage service.&lt;/p&gt;

&lt;p&gt;I made a series for my YouTube Channel, where i build "Movie Tinder" App. The first video of this series contains the "Magic Link" Sign In method. For that I am using React Router v6 as well as custom hooks and React Context to create protected Routes.&lt;/p&gt;

&lt;p&gt;You can watch the first Video on &lt;a href="https://www.youtube.com/channel/UCAa2t4QIxlaUuPO2FKq5TDw"&gt;My YouTube Channel&lt;/a&gt; or here below: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-5UJjJZzznw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Hire Java Developer in the USA for Best Services</title>
      <author>NogaTech</author>
      <pubDate>Tue, 21 Dec 2021 16:31:17 +0000</pubDate>
      <link>https://dev.to/nogatech1/hire-java-developer-in-the-usa-for-best-services-1kg</link>
      <guid>https://dev.to/nogatech1/hire-java-developer-in-the-usa-for-best-services-1kg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vVD3rv4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07uf6714b8d4srzks90t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vVD3rv4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07uf6714b8d4srzks90t.png" alt="Image description" width="880" height="738"&gt;&lt;/a&gt;&lt;br&gt;
Java is one of the maximum famous programming languages. Many organizations want to lease Java developers. &lt;/p&gt;

&lt;p&gt;According to Stackify, Java is the maximum sought-after programming language amongst recruiters. Indeed, has more Java programmers’ jobs than any other language (as per March 2017).&lt;/p&gt;

&lt;p&gt;Java is the closest to Lingua Franca (an idiom that means common language) in the IT industry. It is a platform that lets you run transportable code to your laptop or server. It aids in the development and distribution of applications across multiple platforms.&lt;/p&gt;

&lt;p&gt;Java is an object-orientated programming language that consists of a unique feature: a just-in-time translator.&lt;/p&gt;

&lt;p&gt;If you're a startup looking for Java Programmers for your projects related to Java Application Development, this blog is for you. For expert Java Developers in the USA, keep reading and contact NogaTech IT Solutions LLC.&lt;/p&gt;

&lt;p&gt;Before you begin to recruit a Java programmer, you must assess the vertical you are working in. This will help you determine the skills you need. These are tried-and-true methods to find and hire Java programmers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;## Who are Java Programmers?&lt;/strong&gt;&lt;br&gt;
Java developers work with Java software, commercial apps, and websites to incorporate them. The Java developer should understand the client's vision and create a plan of action.&lt;/p&gt;

&lt;p&gt;To achieve the desired results, they must learn how to code to align with the customer's vision. They must inspect the merchandise and make any necessary adjustments. The code must meet the customer's needs.&lt;br&gt;
Java developers should resolve any issues as quickly as possible. &lt;/p&gt;

&lt;p&gt;Therefore, it is important to remedy any issues immediately. The java developer must then deploy the code in a real-world setting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-your-skills-before-you-hire-a-java-developer-in-the-usa"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test Your Skills Before You Hire a Java Developer in the USA.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is crucial to evaluate candidates' language skills and knowledge of Java's ecosystems when hiring Java talent.&lt;/p&gt;

&lt;p&gt;Candidates must also be able to understand object-oriented programming. Candidates should understand the basics of class loading, data types, threads and Servlets.&lt;/p&gt;

&lt;p&gt;Test your abilities to be a Junior Java Developer&lt;br&gt;
A candidate's experience in this instance is between 0 and 2 years. Candidates who meet these requirements will write clear and manageable Java code. Candidates should have a good knowledge of JavaScript, Servlets and Servlet arguments and methods.&lt;/p&gt;

&lt;p&gt;• Finding a developer to work on a distributed or networking application You should search for someone familiar with protocols if you are looking for a junior Java developer to work on a dispersed or network application.&lt;br&gt;
• Java-primarily based net packages require a developer to be hired. Java-primarily based net app builders must be familiarized with service-orientated architecture (SOA) and net offerings, including SOAP and REST. Web technology, including HTML, CSS and JavaScript, must be famous to the person.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-your-abilities-to-be-a-senior-java-developer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test your abilities to be a Senior Java Developer&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Senior Java developers should have 3 to 6 years of experience. These applicants must be able to write clean, readable code optimized.&lt;br&gt;
They need to be capable of apprehending object-orientated programming nicely as J2EE. &lt;br&gt;
• They ought to additionally be capable of troubleshooting and fastening issues.&lt;br&gt;
• Developers will need to be able to handle complex queries.&lt;br&gt;
• Great Java developers know how to handle memory issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-capabilities-for-a-java-architect-position"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Testing capabilities for a Java Architect position&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Java architects have the best knowledge of Java. They'll need to be proficient in multithreading, exceptions, class basics, data types, etc.&lt;br&gt;
They should have a good understanding of J2EE, Hibernate, and the Core and Session interfaces. They should be familiar with design patterns as well as SQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-hire-a-java-developer-in-the-usa"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How do I hire a Java Developer in the USA?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Take a Java online test.&lt;/strong&gt;&lt;br&gt;
A live Coding round can be performed or an online proctored test. It depends on how many applications you receive and how intense you want your hiring process.&lt;/p&gt;

&lt;p&gt;Proctored tests will give you an overview of software developers' Java knowledge and coding techniques.&lt;/p&gt;

&lt;p&gt;Live Coding is an option if you want to get in-depth with candidates and solve complex problems using intricate methods, but it can be time-consuming.&lt;/p&gt;

&lt;p&gt;Although this procedure cannot evaluate Java programmers at the highest level, it can detect plagiarism and provide insight into Java programmers' approaches to a problem and their ideologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-ready-for-your-interview"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Get ready for your interview.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Java programmers of every age are applying for this role, as the language is well-known. Their resumes may not include Java, but that does not necessarily mean they are skilled programmers.&lt;/p&gt;

&lt;p&gt;Therefore, it would help if you created a focused strategy on your goals. Java programmers with extensive knowledge are a good choice.&lt;br&gt;
Asking the right questions assists you in keeping away from a horrific hire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-the-java-programmers-skill-level"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Define the Java Programmer's Skill Level&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;There are many ways to find a skilled software developer. Even if you think you know what you should look for, you might be surprised by the results. Check out all the reputable certifications and should make hiring managers giddy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java-programmers-work-well-with-other-people"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Java programmers work well with other people.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Java programming is not an individual task. Java programmers must work with other team members and together as a group.&lt;/p&gt;

&lt;p&gt;"Team player" does not have to be a technical term. We are searching for a person who can adhere to traditional coding practices and cultural fitness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#they-should-be-able-java-frameworks"&gt;
  &lt;/a&gt;
  &lt;strong&gt;They should be able Java frameworks.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Java can be used for more than just web and mobile apps. This is why it is crucial to have terrific information on Java frameworks. Spring, Hibernate and JSF are just some of the popular options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enquire-about-java-application-development-in-depth"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Enquire about Java Application Development in Depth.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Interviews are more than the job candidate answering questions. It will help if you recognize extra approximately the candidate and your employer than you do approximately you. It is not a good idea to take something out of context.&lt;/p&gt;

&lt;p&gt;Make them feel comfortable, but be ready for the "Tell me more about yourself" question. It is also possible that they already have it on their resume.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advertise-your-job-openings-in-areas-where-developers-are-most-active"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Advertise your job openings in areas where developers are most active.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Instead of posting the job opening on LinkedIn, you have the option to speak with candidates directly. Java programmers meet in many online forums, hubs and organizations to discuss and share their code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provide-new-opportunities-for-the-team"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Provide new opportunities for the team.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;People want to work in businesses that offer stability and long-term growth. Provide paid classes for them to learn new skills and add value to your company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#only-when-they-improve-their-skills-will-they-help-you-take-your-company-to-the-next-level"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Only when they improve their skills will they help you take your company to the next level.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;What is the cost of hiring a Java developer in America?&lt;br&gt;
The skills of a Java developer will greatly influence the pay scale. Your salary scale will determine how skilled you are as a Java developer. These skills are essential for Java developers.&lt;/p&gt;

&lt;p&gt;Your company's success will depend on how skilled your Java developer is because they can do more than their tasks.&lt;/p&gt;

&lt;p&gt;Also, the number of years of experience will be taken into account. Developers with more experience have a higher cost of recruiting.&lt;/p&gt;

&lt;p&gt;Most freelance Java developers prefer to work hourly or weekly. On average, a Java Developer makes $7 an hour. On the other hand, a java developer may make approximately $9802.23 per year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Summary&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The Java Developers Hiring Guide: What Are the Most Important Takeaways?&lt;/p&gt;

&lt;p&gt;• Before you begin the hiring process, analyze your needs and determine which categories of Java app development projects you are interested in.&lt;br&gt;
• Choose web- or Java-based app developers who are experts within your field.&lt;br&gt;
• Interview to assess their knowledge of the essential Java technologies and frameworks, as well as their software development methods.&lt;br&gt;
• Do not believe the statement without checking for &lt;/p&gt;

&lt;p&gt;If you are looking for top Java developers in the USA, contact &lt;a href="https://www.nogatechsolutions.com/java-application-development-company"&gt;NogaTech IT Solutions LLC&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>devops</category>
    </item>
    <item>
      <title>Towards Perfecting Code Organization</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 21 Dec 2021 16:28:23 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/towards-perfecting-code-organization-m8e</link>
      <guid>https://dev.to/michaelmangial1/towards-perfecting-code-organization-m8e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#environment-and-wellbeing"&gt;
  &lt;/a&gt;
  Environment and Well-Being
&lt;/h2&gt;

&lt;p&gt;Your environment impacts your well-being.&lt;/p&gt;

&lt;p&gt;If you've ever gathered motivation to clean, organize, and decorate your workspace, opened your laptop with a fresh cup of hot coffee, and then carried on with your work for the day, you'll know that this is a proven fact.&lt;/p&gt;

&lt;p&gt;Your environment impacts your well-being.&lt;/p&gt;

&lt;p&gt;Your coding environment is no exception.&lt;/p&gt;

&lt;p&gt;Just like a physical workspace, if a coding workspace is routinely kept organized and neat, it will have a positive impact on your well-being.&lt;/p&gt;

&lt;p&gt;So, how can we organize our coding workspaces?&lt;/p&gt;

&lt;p&gt;Again, just like with a physical workspace, organization is probably the most significant factor.&lt;/p&gt;

&lt;p&gt;A physical workspace may not look neat and tidy, but if things are organized, and a clear pattern for staying organized, then a sense of being overwhelmed is avoided and a productive environment is maintained.&lt;/p&gt;

&lt;p&gt;In a codebase, there may be a variety of different patterns of organization. However, the most important thing is to have it organized via a consistent pattern.&lt;/p&gt;

&lt;p&gt;It's simple math. 1% is better than 0%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An organized but less-than-ideal workspace is better than an unorganized and definitely-less-than-ideal workspace.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you take away nothing else from this article, at least take away this:&lt;/em&gt; If you want to improve your developer experience, organize your workspace. It doesn't haven't to be perfect, it just has to be consistent and intelligible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first step to perfecting code organization is to organize your codebase. Later on, you can fine tune it to be closer to ideal.&lt;/p&gt;

&lt;p&gt;It's a simple fact. It's much easier to reorganize an already-organized workspace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perfecting-code-organization"&gt;
  &lt;/a&gt;
  Perfecting Code Organization
&lt;/h2&gt;

&lt;p&gt;As for the fine-tuning of a codebase, let's compare and contrast some common approached to code organization (using a React app as our example).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-files-by-type"&gt;
  &lt;/a&gt;
  Grouping Files by Type
&lt;/h3&gt;

&lt;p&gt;One common approach in React applications is to group files by their types/groups:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /components
  /hooks
  /pages
  /functions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The benefit of this approach is that it's pretty clear where to look for a &lt;code&gt;Button&lt;/code&gt; component (let's say) versus where to look for a &lt;code&gt;Products&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;The difficulty with this approach is that it doesn't allow for an association between various files and a common experience in the application (sometimes called a "domain").&lt;/p&gt;

&lt;p&gt;Or, you have nest a folder named after a domain across all the various top-level directories:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /components
    /product-listing
  /hooks
    /product-listing
  /pages
    /product-listing
  /functions
    /product-listing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, it can get confusing as to what is a component that it tightly coupled with a domain versus a component that is generic enough to be shared across any domain (for example).&lt;/p&gt;

&lt;p&gt;Of course, you could nest &lt;code&gt;shared&lt;/code&gt; directories to distinguish:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /components
    /shared
    /product-listing
  /hooks
    /shared
    /product-listing
  /pages
    /product-listing
  /functions
    /shared
    /product-listing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, as you can catch with the glance of your eye, there is an obvious problem of duplication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grouping-files-by-domain"&gt;
  &lt;/a&gt;
  Grouping Files by Domain
&lt;/h3&gt;

&lt;p&gt;What if we reverse the hierarchy?&lt;/p&gt;

&lt;p&gt;Instead of grouping first by file &lt;em&gt;type&lt;/em&gt; and then by &lt;em&gt;domain&lt;/em&gt;, look what happens when we group by domain and then type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /shared
    /components
    /hooks
    /functions
    /pages
  /product-listing
    /components
    /hooks
    /functions
    /pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We still have repetition of directories for the various file types, but the domain concepts are centralized to one part of the code.&lt;/p&gt;

&lt;p&gt;You can also easily see if a file is scoped to a domain or if it is shared.&lt;/p&gt;

&lt;p&gt;There is one development off of this that we will want to make, however.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;shared&lt;/code&gt; directory is still a bit ambiguous with this domain-driven organization.&lt;/p&gt;

&lt;p&gt;There are two main types of shared files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Files that contain project-specific concepts but are used across multiple domains (i.e. &lt;code&gt;ShoppingCart&lt;/code&gt;, not found in a design system, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Files that contain generic files that could theoretically be consumed in any application (i.e. &lt;code&gt;Button&lt;/code&gt;, could be found in a design system, etc.). &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this reason, we can distinguish between &lt;code&gt;common&lt;/code&gt; (product-specific) and &lt;code&gt;shared&lt;/code&gt; (generic) files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /shared
    /components
    /hooks
    /functions
    /pages
  /common
    /components
    /hooks
    /functions
    /pages
  /product-listing
    /components
    /hooks
    /functions
    /pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;? &lt;strong&gt;Note:&lt;/strong&gt; You can use whatever verbiage you prefer to make the distinction. The important thing is to make a distinction. Also, what constitutes &lt;code&gt;common&lt;/code&gt; versus &lt;code&gt;shared&lt;/code&gt; can vary based on context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#treating-shared-files-as-external-packages"&gt;
  &lt;/a&gt;
  Treating Shared Files As External Packages
&lt;/h3&gt;

&lt;p&gt;A final suggestion to perfect our code organization is to treat the &lt;code&gt;shared&lt;/code&gt; directory as an external package.&lt;/p&gt;

&lt;p&gt;You can achieve this by using &lt;a href="https://webpack.js.org/configuration/resolve/#resolvealias"&gt;an alias&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// some-component.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@shared/components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The advantage of this is that 1) you don't have to deal with long relative imports, 2) you can clearly see the distinction between generic and project-specific files as you would if using an external library, and 3) you can find and replace if you do move the files to an external library.&lt;/p&gt;

&lt;p&gt;Once these files are being treated as a separate package, you may want to group the directory by potential external library names as opposed to file types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /shared
    /design
    /data-visualization
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This is a great way to keep shared, generic files in the project for convenience and experimentation before they become an external library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can treat this section of the codebase as a "lab" or "staging" for external libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Remember that 1% is better than 0%.&lt;/p&gt;

&lt;p&gt;Your environment impacts your well-being.&lt;/p&gt;

&lt;p&gt;Organize your codebase, and then find ways to improve the organization incremental.&lt;/p&gt;

&lt;p&gt;The big thing is to have consistency in organization and clarity in where to put what and when.&lt;/p&gt;

&lt;p&gt;What do you do to organize your codebase?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Reusable form components using react + react hooks form + yup + typescript</title>
      <author>kiranojhanp</author>
      <pubDate>Tue, 21 Dec 2021 16:02:07 +0000</pubDate>
      <link>https://dev.to/kiranojhanp/reusable-form-components-using-react-react-hooks-form-yup-typescript-16k</link>
      <guid>https://dev.to/kiranojhanp/reusable-form-components-using-react-react-hooks-form-yup-typescript-16k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This Post helps to build a simple form with basic elements like input and select using react hooks form that manage form data, submission, and validation. By the end of this post, we will create reusable components with following syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-react-hooks-form"&gt;
  &lt;/a&gt;
  What is React hooks form?
&lt;/h2&gt;

&lt;p&gt;A library to build Performant, flexible and extensible forms with easy-to-use validation. Check &lt;a href="https://react-hook-form.com/"&gt;Official Website&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-yup"&gt;
  &lt;/a&gt;
  What is Yup?
&lt;/h2&gt;

&lt;p&gt;Yup is a straightforward JavaScript schema builder for value parsing and validation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I didn't find many resources online for reusable components for react hooks form, especially using typescript. I have written this blog post to share what I created in few hours. Feel free to comment improvements below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You can use this library in react and react based frameworks such as NextJS, GatsbyJS and even react native. I will be using a simple typescript project bootstrapped using create-react-app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app my-app &lt;span class="nt"&gt;--template&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; react-hook-form @hookform/resolvers yup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-build"&gt;
  &lt;/a&gt;
  Lets Build
&lt;/h2&gt;

&lt;p&gt;Create 2 Components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── src/
├── components
    ├── Form.tsx
    ├── Input.tsx
    ├── Usage.tsx

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#formtsx"&gt;
  &lt;/a&gt;
  Form.tsx
&lt;/h3&gt;

&lt;p&gt;We use this component as a simple form wrapper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;classNameType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;childrenType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IFormProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;defaultValues&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;childrenType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;buttonLabel&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;classNameType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IFormProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;defaultValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;buttonLabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"d-flex justify-content-center fields__email"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="p"&gt;...{&lt;/span&gt;
                      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                  &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn btn--brand"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buttonLabel&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#inputtsx"&gt;
  &lt;/a&gt;
  Input.tsx
&lt;/h3&gt;

&lt;p&gt;We use this component for any input element (text,password,email,etc)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InputHTMLAttributes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;InputProps&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;InputHTMLAttributes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLInputElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;wrapperClass&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;InputProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;wrapperClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;wrapperClass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;aria&lt;/span&gt;&lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="na"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"alert"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usagetsx"&gt;
  &lt;/a&gt;
  Usage.tsx
&lt;/h3&gt;

&lt;p&gt;Above components can be used in application as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;yup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-hook-form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hookform/resolvers/yup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// interface for form&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;EmailInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// validation&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EmailSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a valid email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email is required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yup&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Max password length is 32&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Password is required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Usage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;formState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useForm&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;yupResolver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;EmailSchema&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;EmailInterface&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;
      &lt;span class="na"&gt;buttonLabel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Change Email"&lt;/span&gt;
      &lt;span class="na"&gt;register&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"change-form"&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
        &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Enter your email"&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;autoFocus&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
        &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Usage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congrats! You have successfully created reusable input component using react hooks form, yup and typescript. Here's same project in &lt;a href="https://codesandbox.io/s/reusable-compoents-react-hooks-form-f594r"&gt;codesandbox&lt;/a&gt;. Feel free to check.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bS7POzHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifz4luvk7gm0y1s49rn6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bS7POzHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifz4luvk7gm0y1s49rn6.jpg" alt="COngratulation" width="880" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Pure Functions Explained for Humans</title>
      <author>Alex Khismatulin</author>
      <pubDate>Tue, 21 Dec 2021 16:00:52 +0000</pubDate>
      <link>https://dev.to/alexkhismatulin/pure-functions-explained-for-humans-1j3c</link>
      <guid>https://dev.to/alexkhismatulin/pure-functions-explained-for-humans-1j3c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#start-leveraging-pure-functions-today"&gt;
  &lt;/a&gt;
  Start leveraging pure functions TODAY
&lt;/h2&gt;

&lt;p&gt;First things first: you don't have to write code in a functional style to leverage pure functions.&lt;/p&gt;

&lt;p&gt;This powerful tool makes it easier to read, reuse, maintain, and test code. Nobody wants to lose any of these benefits because their code is not functional. And you shouldn't neither. So get known to the concept now to make your code even better, functional or not.&lt;/p&gt;

&lt;p&gt; Good news: it is extremely easy to understand and start using pure functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-definition"&gt;
  &lt;/a&gt;
  A simple definition
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A function can be called pure if it returns the same output given the same input every time you call it, doesn't consume or modify other resources internally, and doesn't change its inputs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, this seems to sound way easier than what we usually see when it comes to pure functions. Now let's break it down and see what each part of this definition means and how those parts are named in the professional lexicon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#returns-the-same-output-given-the-same-input"&gt;
  &lt;/a&gt;
  Returns the same output given the same input
&lt;/h2&gt;

&lt;p&gt;This one means exactly what it says. Every time we call a function with a constant value, it has to return the same result. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-consider-2-examples"&gt;
  &lt;/a&gt;
  Let's consider 2 examples
&lt;/h3&gt;

&lt;p&gt;We will create &lt;code&gt;addFive&lt;/code&gt; and &lt;code&gt;addSomething&lt;/code&gt; functions and see how they follow(or don't follow) the rule. But before we move forward, can you guess which one violates the rule and why?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-addfive-endraw-function"&gt;
  &lt;/a&gt;
  &lt;code&gt;addFive&lt;/code&gt; function
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;seven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addFive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we have an &lt;code&gt;addFive&lt;/code&gt; function, we always expect that &lt;code&gt;addFive(2)&lt;/code&gt; would return 7. No matter what happens with the rest of a program, when, or where in the code we call &lt;code&gt;addFive(2)&lt;/code&gt;, it always gives us 7.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-addsomething-endraw-function"&gt;
  &lt;/a&gt;
  &lt;code&gt;addSomething&lt;/code&gt; function
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns a random number&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As opposed to &lt;code&gt;addFive&lt;/code&gt;, there's the &lt;code&gt;addSomething&lt;/code&gt; function. As we can guess from the name, it adds an unknown number to a passed value. So if &lt;code&gt;addSomething(2)&lt;/code&gt; call returned 6, we have no guarantee that every time we call &lt;code&gt;addSomething(2)&lt;/code&gt; it would return 6. Instead, this will be an arbitrary number that we can't predict at the moment of calling the function unless we know how the internal random number generator works. This function does not guarantee to return the same output given the same input.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-that-mean-for-us"&gt;
  &lt;/a&gt;
  What does that mean for us?
&lt;/h3&gt;

&lt;p&gt;At this point, we can definitely tell that &lt;code&gt;addSomething&lt;/code&gt; is not a pure function. But we also cannot state that &lt;code&gt;addFive&lt;/code&gt; is a pure function yet. To do this, we need to check if it satisfies other conditions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doesnt-consume-or-modify-other-resources-internally"&gt;
  &lt;/a&gt;
  Doesn't consume or modify other resources internally
&lt;/h2&gt;

&lt;p&gt;To explore this topic, we need to think about how the functions from the above examples would be implemented.&lt;/p&gt;

&lt;p&gt;First, our pure function candidate, &lt;code&gt;addFive&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addFive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the function does exactly and only what it says and what we expect it to do. Nothing else other than adding 5 a passed number is happening. &lt;code&gt;addFive&lt;/code&gt; passes this check. &lt;/p&gt;

&lt;p&gt;Now, let's define the &lt;code&gt;addSomething&lt;/code&gt; function that is already known as impure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;callCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;callCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callCounter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEvenCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callCounter&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEvenCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function has an external variable that stores the number of times the function was called. Then, based on the counter, we check if it's an even call and add 3 if it is, or add 4 if it's not. This call counter is an external state that the &lt;code&gt;addSomething&lt;/code&gt; function uses to calculate the results. Such states fall under the definition of side effects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Side effect is a modification of any external state, consumption of dynamic external values, or anything a function does outside of the work related to calculating the output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our case, &lt;code&gt;addSomething&lt;/code&gt; modifies and uses &lt;code&gt;callCounter&lt;/code&gt; to calculate the final output. This is a side effect. How could we fix &lt;code&gt;addSomething&lt;/code&gt; to clean it up from side effects?&lt;/p&gt;

&lt;p&gt;If we can't consume or modify an external variable, we need to make it an input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isEvenCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEvenCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we control if it's an even or odd call from outside, and our &lt;code&gt;addSomething&lt;/code&gt; function becomes pure. Whenever we call it with the same pair of inputs, it would return the same number.&lt;/p&gt;

&lt;p&gt;Don't worry if you still don't quite understand what can be a side effect. We will see more examples of side effects a bit later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#doesnt-change-its-inputs"&gt;
  &lt;/a&gt;
  Doesn't change its inputs
&lt;/h2&gt;

&lt;p&gt;For this part we need to create the &lt;code&gt;getFullName&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function takes an object with first and last names. Then it formats these properties in the object so they start with a capital letter and all other letters are lowercased. In the end, the function returns a full name.&lt;/p&gt;

&lt;p&gt;If we skip over potential edge cases, our function will return the same output every time we pass an object with the same values. The function doesn't consume or modify any external resources neither and only calculates a full name. So, does that mean it's pure?&lt;/p&gt;

&lt;p&gt;No. And here's why.&lt;/p&gt;

&lt;p&gt;The object we pass to &lt;code&gt;getFullName&lt;/code&gt; is a referential type. When we change its properties inside the function, the changes get reflected in the original object outside the function. In other words, we &lt;strong&gt;mutate&lt;/strong&gt; our inputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// note that all letters are lowercased&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;khismatulin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns "Alex Khismatulin"&lt;/span&gt;

&lt;span class="c1"&gt;// Logs "Alex Khismatulin", capitalized. Object is modified.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though primitive vs reference types separation sounds complex, in practice, it is not. Spend a few minutes to check it out. There are plenty of &lt;a href="https://www.google.com/search?q=primitive+types+vs+reference+types"&gt;good posts&lt;/a&gt; on the topic. &lt;strong&gt;Tip&lt;/strong&gt;: add your preferred language to the end of the search query to get more contextual results. Here's &lt;a href="https://www.google.com/search?q=primitive+types+vs+reference+types+javascript"&gt;an example for JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Input mutations are also considered &lt;strong&gt;side effects&lt;/strong&gt;. We change inputs that come from outside, so we're still changing an external resource but in a different way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#same-doesnt-always-mean-equal"&gt;
  &lt;/a&gt;
  "Same" doesn't always mean "equal"
&lt;/h2&gt;

&lt;p&gt;As we just touched referential types, we should also note that even though pure functions always return the same output given the same inputs, this doesn't mean that all inputs and outputs must be &lt;strong&gt;equal&lt;/strong&gt; to each other. That is possible when a function takes or returns a referential type. Look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes first and last names and creates a user object. Every time we pass the same names, we get an object with the same fields and values. But objects returned from different function calls are not equal to one another:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Khismatulin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Khismatulin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false, objects are not equal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that &lt;code&gt;firstName&lt;/code&gt; from &lt;code&gt;user1&lt;/code&gt; is equal to &lt;code&gt;firstName&lt;/code&gt; from &lt;code&gt;user2&lt;/code&gt;. &lt;code&gt;lastName&lt;/code&gt; from &lt;code&gt;user1&lt;/code&gt; is equal to &lt;code&gt;lastName&lt;/code&gt; from &lt;code&gt;user2&lt;/code&gt;. But &lt;code&gt;user1&lt;/code&gt; is not equal to &lt;code&gt;user2&lt;/code&gt; because they are different object instances.&lt;/p&gt;

&lt;p&gt;Even though the objects are not equal, our function is still pure. The same is applied to inputs: they don't have to be literally equal to produce the same output. It's just not a 100% correct word used in the first place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-identical-not-same-or-equal"&gt;
  &lt;/a&gt;
  It's "identical", not "same" or "equal"
&lt;/h3&gt;

&lt;p&gt;The word "identical" describes what we expect from pure functions best. Values such functions take or return don't necessarily have to be equal, but they have to be &lt;strong&gt;identical&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-side-effects"&gt;
  &lt;/a&gt;
  Other side effects
&lt;/h2&gt;

&lt;p&gt;So, what can be a side effect? Here are a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Querying or changing external variables and states&lt;/li&gt;
&lt;li&gt;Mutating inputs&lt;/li&gt;
&lt;li&gt;DOM interaction&lt;/li&gt;
&lt;li&gt;Network calls&lt;/li&gt;
&lt;li&gt;Calling other impure functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list goes on and on, but you get the idea. &lt;strong&gt;Anything unrelated to computing output or relies on any dynamic values other than inputs is a side effect.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Moreover, &lt;code&gt;console.log&lt;/code&gt; is also a side effect! It interacts with the console, thus doing work unrelated to computing an output. No worries, usually console logs have no impact, so this rule is omitted when debugging code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-definition"&gt;
  &lt;/a&gt;
  Final definition
&lt;/h2&gt;

&lt;p&gt;Now, as we have all the pieces of our simple definition uncovered, we a ready to derive a smarter definition of a pure function:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A function can be called pure if it returns identical output given identical input every time it is called and has no side effects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Awesome! But there's one thing that might've been bugging you while reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-should-i-do-when-i-do-need-side-effects"&gt;
  &lt;/a&gt;
  What should I do when I do need side effects?
&lt;/h2&gt;

&lt;p&gt;Some things are impure by their nature. At the end of the day, this is what programming is about – transforming data is our bread and butter.&lt;/p&gt;

&lt;p&gt;Side effects are imminent. But when we have to deal with them, we should strive to isolate them as much as possible and separate from the code that executes pure operations.&lt;/p&gt;

&lt;p&gt;Here's a pretty widespread Redux selector pattern. We have a code that gets a snapshot of Redux state and a selector function that knows how to get a specific value from that state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You don't need to know anything about Redux to understand the example. There's no magic going on here. &lt;code&gt;store.getState()&lt;/code&gt; in our case only returns an object that holds some values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this example, the values in the store change dynamically and are out of our control. We secure the &lt;code&gt;getUserById&lt;/code&gt; value selector function from any third-party states and make it only rely on its inputs.&lt;/p&gt;

&lt;p&gt;You see the pattern: separate the code that has to deal with impure data sources or to produce side effects from the code that gives linear output based on its inputs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-pros"&gt;
  &lt;/a&gt;
  What are the pros?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#reusability"&gt;
  &lt;/a&gt;
  Reusability
&lt;/h3&gt;

&lt;p&gt;Let's come back to the Redux selector example. Other than just returning a user from state, we can update the code and break it down into a few pure functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;findUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUsersFromState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have one function that knows how to get users from state and another one that knows how to find a user by id in a list of users. That means we can reuse &lt;code&gt;findUserById&lt;/code&gt; in other parts of the app where we use the same shape for the user object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// find a user in the store users&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUsersFromState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// find a user in the lottery players list&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lotteryPlayers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getLotteryPlayers&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;winnerId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;winnerId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both cases leverage &lt;code&gt;findUserById&lt;/code&gt; because it does one small thing and has no unpredictable dependencies. If we ever needed to change the field name that holds user id, we would need to do that in just one place.&lt;/p&gt;

&lt;p&gt;Purity gives us space to create functions that are not bound to specific data sources or context in which functions are called.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;p&gt;We're going come back to the Redux selector example one more time and imagine that we decided to get state from the store right inside the selector function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What would it cost us to add a test that validates this function? Well, we would need to do some dark magic to mock &lt;code&gt;store.getState()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Should return user with correct id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see what's going on? We had to mock the whole Redux store just to test one small selector. More importantly, the test must know &lt;strong&gt;how&lt;/strong&gt; the state is retrieved from the store. Imagine what would we need to do to test a more complex one? What would happen if we decided to replace Redux with some other state management tool?&lt;/p&gt;

&lt;p&gt;To see the difference, here's a test for the original pure version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Should return user with correct id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUserById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we don't need to think about what method is used to return a state from the store and mock the whole thing. We just use a state fixture. If we ever change a state management tool, this will not affect the tests because they only know what the state's shape is, not how it's stored.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#they-make-the-code-easier-to-consume"&gt;
  &lt;/a&gt;
  They make the code easier to consume
&lt;/h3&gt;

&lt;p&gt;Last but not least, writing pure functions forces us to create smaller, more specialized functions that do one small thing. The code is going to become more organized. This, in turn, will increase readability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-end"&gt;
  &lt;/a&gt;
  In the end
&lt;/h2&gt;

&lt;p&gt;Pure functions alone are not going to make your code perfect. But this is a must-have part of your toolset if you want to be a professional in what you do. Every little step moves you to a bigger goal, and pure functions are not an exception. Employ this concept and make your code a little better today.&lt;/p&gt;

&lt;p&gt;I hope you learned something today. Make this topic a small piece in the strong foundation of your success. Thank you for reading!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you like occasional no-bullshit web shorties, you should definitely drop me a line on &lt;a href="https://twitter.com/alexkhismatulin"&gt;Twitter&lt;/a&gt;. Feel free to tag me if you want to discuss this article, and I will make sure to join the conversation!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codequality</category>
      <category>javascript</category>
    </item>
    <item>
      <title>DevOps Consultant Jobs and Where to Find Them</title>
      <author>Reza Piri</author>
      <pubDate>Tue, 21 Dec 2021 16:00:28 +0000</pubDate>
      <link>https://dev.to/rezapped/devops-consultant-jobs-and-where-to-find-them-1671</link>
      <guid>https://dev.to/rezapped/devops-consultant-jobs-and-where-to-find-them-1671</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4162jOVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gennovacap.com/wp-content/uploads/2021/12/consulting-3031678_1280-thegem-blog-default.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4162jOVj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gennovacap.com/wp-content/uploads/2021/12/consulting-3031678_1280-thegem-blog-default.webp" alt="DevOps Consultant Jobs" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By Reza Piri  Devops  December 17, 2021&lt;/p&gt;

&lt;p&gt;DevOps professionals are in high demand. With more businesses looking to recruit employees with expertise in this area, consultants are a valuable addition to the team. The DevOps market is expected to grow by over 20% by 2026.  In this guide, we’ll discuss what DevOps consultants do, how much they earn and where to look for DevOps Consultant Jobs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  TABLE OF CONTENTS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#DevOps-consultant-versus-DevOps-Engineer"&gt;DevOps consultant versus DevOps Engineer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#What-do-DevOps-consultants-do?"&gt;What do DevOps consultants do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#What-are-the-roles-and-responsibilities-of-DevOps-consultants?"&gt;What are the roles and responsibilities of DevOps consultants?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#How-much-do-DevOps-consultants-make?"&gt;How much do DevOps consultants make?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Top-10-DevOps-consultant-job-boards"&gt;Top 10 DevOps consultant job boards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#devops-consultant-versus-devops-engineer"&gt;
  &lt;/a&gt;
  DEVOPS CONSULTANT VERSUS DEVOPS ENGINEER &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;DevOps consultants are not the same as DevOps engineers. There are key differences in their roles and responsibilities. Engineers are concerned with the day-to-day running of operations. Whereas, consulting is more focused on solving specific issues, providing tailored recommendations for businesses and organizations and drawing up plans of action. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-devops-consultants-do"&gt;
  &lt;/a&gt;
  WHAT DO DEVOPS CONSULTANTS DO? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;DevOps consultants work to improve operations and optimize DevOps outcomes. Business owners may hire external consultants for &lt;a href="https://gennovacap.com/devops-consulting/"&gt;DevOps professional services&lt;/a&gt; or recruit for in-house roles. They can evaluate existing systems and cultures, make recommendations for changes and improvements, and also identify effective solutions. &lt;/p&gt;

&lt;p&gt;This will help companies achieve key objectives and tackle specific problems for optimal software delivery. They work with clients to establish pain points and inefficiencies. They also implement strategies to streamline operations and engineer change.&lt;/p&gt;

&lt;p&gt;Hiring a DevOps consultant can help business owners and leaders tackle existing issues and identify the best ways to move forward. However, once a consultant advises or recommends strategies and measures, it is up to the client to choose which path to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-roles-and-responsibilities-of-devops-consultants"&gt;
  &lt;/a&gt;
  WHAT ARE THE ROLES AND RESPONSIBILITIES OF DEVOPS CONSULTANTS? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;DevOps consultants have a diverse range of &lt;a href="https://www.ziprecruiter.com/e/What-Does-a-DevOps-Consultant-Do"&gt;roles and responsibilities&lt;/a&gt; and they may work with a broad spectrum of clients. As the demand for these specialists increases, the pool of clients is expanding to cover an array of sectors and industries. Key roles and responsibilities for consultants include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyzing existing strategies, tools and systems &lt;/li&gt;
&lt;li&gt;Evaluating the client’s DevOps culture and environment &lt;/li&gt;
&lt;li&gt;Liaising with clients to discuss primary aims and problems to solve&lt;/li&gt;
&lt;li&gt;Establishing key objectives and pain points&lt;/li&gt;
&lt;li&gt;Using DevOps tools and industry-standard methodologies to draw up tailored plans and roadmaps&lt;/li&gt;
&lt;li&gt;Educating and training employees&lt;/li&gt;
&lt;li&gt;Establishing intelligent, efficient infrastructures&lt;/li&gt;
&lt;li&gt;Supervising architectural changes and designs&lt;/li&gt;
&lt;li&gt;Facilitating growth in line with client objectives and KPIs (key performance indicators)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many projects that consultants undertake will focus on identifying and responding to company issues. They will also suggest modifications and new strategies throughout the development lifecycle. Some consultants will stay in contact with the client to oversee, implement and manage changes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-much-do-devops-consultants-make"&gt;
  &lt;/a&gt;
  HOW MUCH DO DEVOPS CONSULTANTS MAKE? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;DevOps experts are in high demand, and as a result, salaries are increasing. Statistics suggest that the average salary for a DevOps consultant in the US is now $125,000 (source). Entry-level roles are usually advertised at $100,000-$140,000 but senior consultants have the potential to earn much more. &lt;/p&gt;

&lt;p&gt;Salaries for more experienced DevOps consultants usually increase to around $140,000, with some professionals earning up to $170,000. Research indicates that salaries are highest in San Francisco (source). &lt;/p&gt;

&lt;p&gt;With the demand for DevOps consultants on the rise &lt;a href="https://www.techrepublic.com/article/devops-salaries-are-rising-heres-where-they-are-growing-fastest/"&gt;wages are likely to rise&lt;/a&gt; in the coming years. The exact wage for a DevOps consultant will depend on the employer, the project and also the employment status of the individual. Some consultants are self-employed or freelance, while others have an annual salary. Some companies offer higher wages than others. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-10-devops-consultant-job-boards"&gt;
  &lt;/a&gt;
  TOP 10 DEVOPS CONSULTANT JOB BOARDS &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;If you are a DevOps consultant, there are many options to explore when it comes to finding top DevOps jobs. Here are the top 10 job boards for DevOps consultant jobs:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dice.com:&lt;/strong&gt; Dice.com is an online job board and recruitment platform, which connects organizations and employers with talented tech professionals. Thousands of employers use Dice and it offers a wide range of features, including profile analysis and personalized recommendations. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hired.com:&lt;/strong&gt; Hired.com is a high-profile platform, which brings employers and job-seekers together. They specialize in engineering, DevOps and sales roles. Hired.com also advertises opportunities across the US and the UK and Ireland. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angel.co:&lt;/strong&gt; Angel.co specializes in start-up recruitment and focuses on development and tech roles in the US. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Ladders:&lt;/strong&gt; The Ladders is an exclusive recruitment platform, which is designed for professionals with salary expectations over $100,000. Job-seekers can search for suitable roles and create a profile, while recruiters and employers can find suitable candidates. There are over 250,000 screened jobs available. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crunch Board:&lt;/strong&gt; Crunch Board is a popular job board for tech startups and professionals who are hunting for new opportunities. It is possible to create both employee and employer accounts. The job board, which is updated constantly, advertises roles across the globe. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tech Careers:&lt;/strong&gt; Tech Careers is an easy to use, interactive job board. It enables job-seekers to search for vacancies, which suit their location, level of expertise, experience and job title. Featuring vacancies from top organizations, users can also sign up for alerts to ensure they hear about exciting roles first. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White Truffle:&lt;/strong&gt; Established in 2011, White Truffle is a talent sourcing platform, which provides opportunities for both employers and employees. Job-seekers can search for the latest vacancies and employers and employees can benefit from innovative job matching technology. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smashing Magazine Job Board:&lt;/strong&gt; The Smashing Magazine job board helps developers and designers to find top jobs quickly and easily. It is suitable for both employers and employees. The board also advertises vacancies across the world. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Underdog:&lt;/strong&gt; This is one of the best places to go for start-up jobs. Underdog is all about making it as easy as possible to find and apply for jobs. Most of the roles are remote or located in New York and San Francisco. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tech Fetch:&lt;/strong&gt; Tech Fetch is a US leading job portal. They provide employers with over 1 million tech resumes. It also has over 100,000 tech roles for job-seekers. Matching technology enables employers to access the top 10 candidates in just 30 seconds. &lt;/p&gt;

&lt;p&gt;While there are plenty of job boards out there, you want to make sure your search is tailored for DevOps Consultant Jobs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  SUMMARY &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;DevOps consultants play an integral role in helping businesses solve issues. They help implement effective procedures, measures, tools and strategies throughout the development process. DevOps consulting is a varied role, which involves working with a wide range of clients.&lt;/p&gt;

&lt;p&gt;DevOps consultants earn an average of $125,000 but there is potential to earn more. There are several innovative job boards available for employers looking to add to their team. As well as for  consultants searching for a new challenge. &lt;/p&gt;

</description>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Resolving ENS Usernames in React</title>
      <author>Rahat Chowdhury</author>
      <pubDate>Tue, 21 Dec 2021 15:38:20 +0000</pubDate>
      <link>https://dev.to/rahat/resolving-ens-usernames-in-react-3ppm</link>
      <guid>https://dev.to/rahat/resolving-ens-usernames-in-react-3ppm</guid>
      <description>&lt;p&gt;An awesome part of using a dApp is the fact that you can connect your wallet and and be logged in or signed up for the application right away. The problem that this may bring is that wallets are this large string of alphanumeric characters and don't make the best usernames. See example below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;0xd2f8ed343386FB042178c7e133A837CB8043d0dc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ew right? This isn't the greatest way of displaying a username. You could do something like create a form and ask for a preferred username &lt;em&gt;or&lt;/em&gt; we could leverage the decentralized web and look at using existing ENS usernames in our applications. &lt;/p&gt;

&lt;p&gt;Let's take a look at how we can do this using React and the Ethers library. &lt;/p&gt;

&lt;p&gt;I started off by scaffolding out a react application using:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then I installed a dependency I need using yarn. (You can use npm instead if you prefer).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yarn add ethers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Afterwards I went into App.js and got rid of everything inside the div and then imported the ethers library and useState from React to keep track of the username of the signed in person. If you want to code along with this blog then here is what my App.js looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
import { useState } from 'react';
import { ethers } from 'ethers';

function App() {
  const [name, setName] = useState("");
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not too much going on just yet. Let's add a button inside of our app div and give it a function that can execute on click.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="App"&amp;gt;
      &amp;lt;button className ="button" onClick={() =&amp;gt; handleWalletConnect()}&amp;gt;connect&amp;lt;/button&amp;gt;
      &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So this handleWalletConnect function is going to accomplish a couple of things. We want to make sure we get access to the users wallet as well as their ens username if they have one. Here is the function which I'll break down line by line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [name, setName] = useState("");
  const handleWalletConnect = async () =&amp;gt; {
    const { ethereum } = window;
    if(ethereum) {
      const provider = new ethers.providers.Web3Provider(ethereum)
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner()
      const address = await signer.getAddress()
      const ens = await provider.lookupAddress(address);
      if (ens !== null) {
        setName(ens)
      } else {
        setName(address)
      }
    } else {
      alert('no wallet detected!')
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we're doing is destructuring the Ethereum object from the Window:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const { ethereum } = window&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is something that is injected into the window from a wallet like Metamask. As long as it exists we will continue on with the rest of our code, otherwise we want to alert the user that we aren't detecting any wallets in their browser. &lt;/p&gt;

&lt;p&gt;Next up is creating a provider that will give us access to a lot of methods that makes our life easier. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;const provider = new ethers.providers.Web3Provider(ethereum)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A provider is a nice little abstraction of the connection to the Ethereum network. We're leveraging the work that the nice folks at Ethers have already done for us instead of reinventing the wheel. &lt;/p&gt;

&lt;p&gt;The first thing we want to do with our provider is ask for permission to connect to the users wallet which is taken care of with this line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;await provider.send("eth_requestAccounts", [])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This sends a request over to the wallet asking the user to allow connection with our dApp. &lt;/p&gt;

&lt;p&gt;Next we want to get information about the user. We do this by creating a signer object:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const signer = provider.getSigner()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us access to more methods like this handy one for getting the signer's address:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const address = await signer.getAddress()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now in theory we have everything we need to start building out our dApp. We have the address but we want to make things a little more human readable. Our provider has a nice little method of doing a reverse lookup to see if the Ethereum address is linked to an ENS username and that's done in the line below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const ens = await provider.lookupAddress(address)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will return the ens username if it exists otherwise we will get back null. Now we can either set the name to be the username or just fall back to the address if they do not have an ens username.&lt;/p&gt;

&lt;p&gt;Now that we can access our user's decentralized identity we can allow for a greater user experience instead of forcing our users to fill out yet another form on profile details for a new service. &lt;/p&gt;

&lt;p&gt;The final code for this can all be found on this repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Rahat-ch/reactensusernames"&gt;https://github.com/Rahat-ch/reactensusernames&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also watch a quick video of this tutorial below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qQBJBJGv_ZA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>web3</category>
      <category>react</category>
    </item>
  </channel>
</rss>
